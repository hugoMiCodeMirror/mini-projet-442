
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f72c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e594  0800f8fc  0800f8fc  000108fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801de90  0801de90  0001f0b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801de90  0801de90  0001ee90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801de98  0801de98  0001f0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801de98  0801de98  0001ee98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801de9c  0801de9c  0001ee9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0801dea0  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c70  200000b8  0801df58  0001f0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d28  0801df58  0001fd28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031449  00000000  00000000  0001f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000074da  00000000  00000000  00050531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002850  00000000  00000000  00057a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f15  00000000  00000000  0005a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003139d  00000000  00000000  0005c175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034830  00000000  00000000  0008d512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001194e8  00000000  00000000  000c1d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001db22a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b364  00000000  00000000  001db270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001e65d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f8e4 	.word	0x0800f8e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800f8e4 	.word	0x0800f8e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f005 f8bd 	bl	8005f5c <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f002 fcb6 	bl	8003758 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f005 fa57 	bl	80062b0 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f002 fca6 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000d4 	.word	0x200000d4
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_ADC3_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <MX_ADC3_Init+0xa0>)
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e82:	f005 f86b 	bl	8005f5c <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f002 fc64 	bl	8003758 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e90:	2306      	movs	r3, #6
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000ea2:	f005 fa05 	bl	80062b0 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000eac:	f002 fc54 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000011c 	.word	0x2000011c
 8000ebc:	40012200 	.word	0x40012200
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d124      	bne.n	8000f30 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	f006 fb2d 	bl	8007588 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2e:	e029      	b.n	8000f84 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d124      	bne.n	8000f84 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_ADC_MspInit+0xd8>)
 8000f80:	f006 fb02 	bl	8007588 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fb0:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <MX_DAC_Init+0x50>)
 8000fb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fb6:	f005 fcad 	bl	8006914 <HAL_DAC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fc0:	f002 fbca 	bl	8003758 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	@ (8000fec <MX_DAC_Init+0x4c>)
 8000fd4:	f005 fd24 	bl	8006a20 <HAL_DAC_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fde:	f002 fbbb 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000164 	.word	0x20000164
 8000ff0:	40007400 	.word	0x40007400

08000ff4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	@ 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	@ (8001078 <HAL_DAC_MspInit+0x84>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12b      	bne.n	800106e <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a18      	ldr	r2, [pc, #96]	@ (800107c <HAL_DAC_MspInit+0x88>)
 800101c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <HAL_DAC_MspInit+0x88>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <HAL_DAC_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001046:	2310      	movs	r3, #16
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104a:	2303      	movs	r3, #3
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4809      	ldr	r0, [pc, #36]	@ (8001080 <HAL_DAC_MspInit+0x8c>)
 800105a:	f006 fa95 	bl	8007588 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	210f      	movs	r1, #15
 8001062:	2036      	movs	r0, #54	@ 0x36
 8001064:	f005 fc2c 	bl	80068c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001068:	2036      	movs	r0, #54	@ 0x36
 800106a:	f005 fc45 	bl	80068f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	@ 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40007400 	.word	0x40007400
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000

08001084 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 800108a:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <MX_DMA2D_Init+0x60>)
 800108c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800108e:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800109a:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010ba:	f005 fec9 	bl	8006e50 <HAL_DMA2D_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80010c4:	f002 fb48 	bl	8003758 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010c8:	2101      	movs	r1, #1
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_DMA2D_Init+0x5c>)
 80010cc:	f006 f92e 	bl	800732c <HAL_DMA2D_ConfigLayer>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80010d6:	f002 fb3f 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000178 	.word	0x20000178
 80010e4:	4002b000 	.word	0x4002b000

080010e8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_DMA2D_MspInit+0x44>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d113      	bne.n	8001122 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 8001100:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_DMA2D_MspInit+0x48>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2105      	movs	r1, #5
 8001116:	205a      	movs	r0, #90	@ 0x5a
 8001118:	f005 fbd2 	bl	80068c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800111c:	205a      	movs	r0, #90	@ 0x5a
 800111e:	f005 fbeb 	bl	80068f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	4002b000 	.word	0x4002b000
 8001130:	40023800 	.word	0x40023800

08001134 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
 8001148:	615a      	str	r2, [r3, #20]
 800114a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <MX_FMC_Init+0x98>)
 800114e:	4a20      	ldr	r2, [pc, #128]	@ (80011d0 <MX_FMC_Init+0x9c>)
 8001150:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_FMC_Init+0x98>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <MX_FMC_Init+0x98>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_FMC_Init+0x98>)
 8001160:	2204      	movs	r2, #4
 8001162:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <MX_FMC_Init+0x98>)
 8001166:	2210      	movs	r2, #16
 8001168:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_FMC_Init+0x98>)
 800116c:	2240      	movs	r2, #64	@ 0x40
 800116e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_FMC_Init+0x98>)
 8001172:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001176:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_FMC_Init+0x98>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_FMC_Init+0x98>)
 8001180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001184:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_FMC_Init+0x98>)
 8001188:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800118c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_FMC_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001194:	2302      	movs	r3, #2
 8001196:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001198:	2307      	movs	r3, #7
 800119a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800119c:	2304      	movs	r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80011a4:	2303      	movs	r3, #3
 80011a6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_FMC_Init+0x98>)
 80011b6:	f009 fb41 	bl	800a83c <HAL_SDRAM_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80011c0:	f002 faca 	bl	8003758 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001b8 	.word	0x200001b8
 80011d0:	a0000140 	.word	0xa0000140

080011d4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011e8:	4b3a      	ldr	r3, [pc, #232]	@ (80012d4 <HAL_FMC_MspInit+0x100>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d16d      	bne.n	80012cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80011f0:	4b38      	ldr	r3, [pc, #224]	@ (80012d4 <HAL_FMC_MspInit+0x100>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 80011f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011fa:	4a37      	ldr	r2, [pc, #220]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6393      	str	r3, [r2, #56]	@ 0x38
 8001202:	4b35      	ldr	r3, [pc, #212]	@ (80012d8 <HAL_FMC_MspInit+0x104>)
 8001204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800120e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001212:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001220:	230c      	movs	r3, #12
 8001222:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	482c      	ldr	r0, [pc, #176]	@ (80012dc <HAL_FMC_MspInit+0x108>)
 800122a:	f006 f9ad 	bl	8007588 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800122e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001232:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001240:	230c      	movs	r3, #12
 8001242:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4825      	ldr	r0, [pc, #148]	@ (80012e0 <HAL_FMC_MspInit+0x10c>)
 800124a:	f006 f99d 	bl	8007588 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800124e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001252:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001260:	230c      	movs	r3, #12
 8001262:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	481e      	ldr	r0, [pc, #120]	@ (80012e4 <HAL_FMC_MspInit+0x110>)
 800126a:	f006 f98d 	bl	8007588 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800126e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001272:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001280:	230c      	movs	r3, #12
 8001282:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4817      	ldr	r0, [pc, #92]	@ (80012e8 <HAL_FMC_MspInit+0x114>)
 800128a:	f006 f97d 	bl	8007588 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800128e:	2328      	movs	r3, #40	@ 0x28
 8001290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129e:	230c      	movs	r3, #12
 80012a0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4811      	ldr	r0, [pc, #68]	@ (80012ec <HAL_FMC_MspInit+0x118>)
 80012a8:	f006 f96e 	bl	8007588 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80012ac:	2308      	movs	r3, #8
 80012ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012bc:	230c      	movs	r3, #12
 80012be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	480a      	ldr	r0, [pc, #40]	@ (80012f0 <HAL_FMC_MspInit+0x11c>)
 80012c6:	f006 f95f 	bl	8007588 <HAL_GPIO_Init>
 80012ca:	e000      	b.n	80012ce <HAL_FMC_MspInit+0xfa>
    return;
 80012cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200001ec 	.word	0x200001ec
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021c00 	.word	0x40021c00
 80012f0:	40020800 	.word	0x40020800

080012f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012fc:	f7ff ff6a 	bl	80011d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4a07      	ldr	r2, [pc, #28]	@ (8001334 <vApplicationGetIdleTaskMemory+0x2c>)
 8001318:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4a06      	ldr	r2, [pc, #24]	@ (8001338 <vApplicationGetIdleTaskMemory+0x30>)
 800131e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	200003cc 	.word	0x200003cc
 8001338:	2000046c 	.word	0x2000046c

0800133c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b0a6      	sub	sp, #152	@ 0x98
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 800134e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001352:	4618      	mov	r0, r3
 8001354:	f00a fe49 	bl	800bfea <osMutexCreate>
 8001358:	4603      	mov	r3, r0
 800135a:	4a31      	ldr	r2, [pc, #196]	@ (8001420 <MX_FREERTOS_Init+0xe4>)
 800135c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800135e:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <MX_FREERTOS_Init+0xe8>)
 8001360:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001364:	461d      	mov	r5, r3
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800136e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001372:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f00a fdd6 	bl	800bf2a <osThreadCreate>
 800137e:	4603      	mov	r3, r0
 8001380:	4a29      	ldr	r2, [pc, #164]	@ (8001428 <MX_FREERTOS_Init+0xec>)
 8001382:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <MX_FREERTOS_Init+0xf0>)
 8001386:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800138a:	461d      	mov	r5, r3
 800138c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800138e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001390:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001398:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f00a fdc3 	bl	800bf2a <osThreadCreate>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a22      	ldr	r2, [pc, #136]	@ (8001430 <MX_FREERTOS_Init+0xf4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 80013aa:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <MX_FREERTOS_Init+0xf8>)
 80013ac:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80013b0:	461d      	mov	r5, r3
 80013b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 80013be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f00a fdb0 	bl	800bf2a <osThreadCreate>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <MX_FREERTOS_Init+0xfc>)
 80013ce:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <MX_FREERTOS_Init+0x100>)
 80013d2:	f107 0420 	add.w	r4, r7, #32
 80013d6:	461d      	mov	r5, r3
 80013d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f00a fd9d 	bl	800bf2a <osThreadCreate>
 80013f0:	4603      	mov	r3, r0
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_FREERTOS_Init+0x104>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <MX_FREERTOS_Init+0x108>)
 80013f8:	1d3c      	adds	r4, r7, #4
 80013fa:	461d      	mov	r5, r3
 80013fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001400:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001404:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f00a fd8c 	bl	800bf2a <osThreadCreate>
 8001412:	4603      	mov	r3, r0
 8001414:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <MX_FREERTOS_Init+0x10c>)
 8001416:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001418:	bf00      	nop
 800141a:	3798      	adds	r7, #152	@ 0x98
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	200003c8 	.word	0x200003c8
 8001424:	0800f908 	.word	0x0800f908
 8001428:	200003b4 	.word	0x200003b4
 800142c:	0800f930 	.word	0x0800f930
 8001430:	200003b8 	.word	0x200003b8
 8001434:	0800f95c 	.word	0x0800f95c
 8001438:	200003bc 	.word	0x200003bc
 800143c:	0800f988 	.word	0x0800f988
 8001440:	200003c0 	.word	0x200003c0
 8001444:	0800f9b4 	.word	0x0800f9b4
 8001448:	200003c4 	.word	0x200003c4

0800144c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f00a fdb4 	bl	800bfc2 <osDelay>
 800145a:	e7fb      	b.n	8001454 <StartDefaultTask+0x8>

0800145c <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0d0      	sub	sp, #320	@ 0x140
 8001460:	af00      	add	r7, sp, #0
 8001462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001466:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800146a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if ((gameOver && !lastMove) || gamePaused || !gameStarted) { // revoir la condition
 800146c:	4bc0      	ldr	r3, [pc, #768]	@ (8001770 <StartDisplayTask+0x314>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <StartDisplayTask+0x20>
 8001474:	4bbf      	ldr	r3, [pc, #764]	@ (8001774 <StartDisplayTask+0x318>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d007      	beq.n	800148c <StartDisplayTask+0x30>
 800147c:	4bbe      	ldr	r3, [pc, #760]	@ (8001778 <StartDisplayTask+0x31c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d103      	bne.n	800148c <StartDisplayTask+0x30>
 8001484:	4bbd      	ldr	r3, [pc, #756]	@ (800177c <StartDisplayTask+0x320>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d110      	bne.n	80014ae <StartDisplayTask+0x52>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 800148c:	4bbc      	ldr	r3, [pc, #752]	@ (8001780 <StartDisplayTask+0x324>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001494:	4618      	mov	r0, r3
 8001496:	f00b f921 	bl	800c6dc <xQueueSemaphoreTake>
      displayGameStatus();
 800149a:	f000 ffab 	bl	80023f4 <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 800149e:	4bb8      	ldr	r3, [pc, #736]	@ (8001780 <StartDisplayTask+0x324>)
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	f00b f80e 	bl	800c4c8 <xQueueGenericSend>
 80014ac:	e223      	b.n	80018f6 <StartDisplayTask+0x49a>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 80014ae:	4bb5      	ldr	r3, [pc, #724]	@ (8001784 <StartDisplayTask+0x328>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d826      	bhi.n	8001504 <StartDisplayTask+0xa8>
 80014b6:	a201      	add	r2, pc, #4	@ (adr r2, 80014bc <StartDisplayTask+0x60>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014db 	.word	0x080014db
 80014c4:	080014e9 	.word	0x080014e9
 80014c8:	080014f7 	.word	0x080014f7
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	49ad      	ldr	r1, [pc, #692]	@ (8001788 <StartDisplayTask+0x32c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00d f8fc 	bl	800e6d0 <siprintf>
          break;
 80014d8:	e014      	b.n	8001504 <StartDisplayTask+0xa8>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	49ab      	ldr	r1, [pc, #684]	@ (800178c <StartDisplayTask+0x330>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00d f8f5 	bl	800e6d0 <siprintf>
          break;
 80014e6:	e00d      	b.n	8001504 <StartDisplayTask+0xa8>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	49a8      	ldr	r1, [pc, #672]	@ (8001790 <StartDisplayTask+0x334>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00d f8ee 	bl	800e6d0 <siprintf>
          break;
 80014f4:	e006      	b.n	8001504 <StartDisplayTask+0xa8>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	49a6      	ldr	r1, [pc, #664]	@ (8001794 <StartDisplayTask+0x338>)
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00d f8e7 	bl	800e6d0 <siprintf>
          break;
 8001502:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 8001504:	4ba4      	ldr	r3, [pc, #656]	@ (8001798 <StartDisplayTask+0x33c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800150e:	49a3      	ldr	r1, [pc, #652]	@ (800179c <StartDisplayTask+0x340>)
 8001510:	4618      	mov	r0, r3
 8001512:	f00d f8dd 	bl	800e6d0 <siprintf>

      // On convertit la vitesse en texte
      char speedText[100];
      sprintf(speedText, (char *)"Speed: %d Hz", speed);
 8001516:	4ba2      	ldr	r3, [pc, #648]	@ (80017a0 <StartDisplayTask+0x344>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001520:	49a0      	ldr	r1, [pc, #640]	@ (80017a4 <StartDisplayTask+0x348>)
 8001522:	4618      	mov	r0, r3
 8001524:	f00d f8d4 	bl	800e6d0 <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001528:	4b95      	ldr	r3, [pc, #596]	@ (8001780 <StartDisplayTask+0x324>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001530:	4618      	mov	r0, r3
 8001532:	f00b f8d3 	bl	800c6dc <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001536:	489c      	ldr	r0, [pc, #624]	@ (80017a8 <StartDisplayTask+0x34c>)
 8001538:	f002 fd32 	bl	8003fa0 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 800153c:	f002 fc98 	bl	8003e70 <BSP_LCD_GetXSize>
 8001540:	4603      	mov	r3, r0
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154a:	2000      	movs	r0, #0
 800154c:	f002 fea8 	bl	80042a0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 8001550:	f002 fc8e 	bl	8003e70 <BSP_LCD_GetXSize>
 8001554:	4603      	mov	r3, r0
 8001556:	b29b      	uxth	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	f240 1101 	movw	r1, #257	@ 0x101
 800155e:	2000      	movs	r0, #0
 8001560:	f002 fe9e 	bl	80042a0 <BSP_LCD_DrawHLine>

      // On affiche la direction, le score et la vitesse
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 8001564:	f107 020c 	add.w	r2, r7, #12
 8001568:	2303      	movs	r3, #3
 800156a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800156e:	2000      	movs	r0, #0
 8001570:	f002 fdce 	bl	8004110 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 8001574:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001578:	2303      	movs	r3, #3
 800157a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800157e:	20c8      	movs	r0, #200	@ 0xc8
 8001580:	f002 fdc6 	bl	8004110 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(350, 8*32 + 2, (uint8_t *)speedText, LEFT_MODE);
 8001584:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001588:	2303      	movs	r3, #3
 800158a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800158e:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001592:	f002 fdbd 	bl	8004110 <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      if (!gameOver)
 8001596:	4b76      	ldr	r3, [pc, #472]	@ (8001770 <StartDisplayTask+0x314>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d13e      	bne.n	800161c <StartDisplayTask+0x1c0>
        switch (headPart) {
 800159e:	4b83      	ldr	r3, [pc, #524]	@ (80017ac <StartDisplayTask+0x350>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d83a      	bhi.n	800161c <StartDisplayTask+0x1c0>
 80015a6:	a201      	add	r2, pc, #4	@ (adr r2, 80015ac <StartDisplayTask+0x150>)
 80015a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ac:	080015d5 	.word	0x080015d5
 80015b0:	080015bd 	.word	0x080015bd
 80015b4:	080015ed 	.word	0x080015ed
 80015b8:	08001605 	.word	0x08001605
          case HeadBottom:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 80015bc:	4b7c      	ldr	r3, [pc, #496]	@ (80017b0 <StartDisplayTask+0x354>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	4618      	mov	r0, r3
 80015c4:	4b7a      	ldr	r3, [pc, #488]	@ (80017b0 <StartDisplayTask+0x354>)
 80015c6:	785b      	ldrb	r3, [r3, #1]
 80015c8:	015b      	lsls	r3, r3, #5
 80015ca:	4a7a      	ldr	r2, [pc, #488]	@ (80017b4 <StartDisplayTask+0x358>)
 80015cc:	4619      	mov	r1, r3
 80015ce:	f002 ff0d 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 80015d2:	e023      	b.n	800161c <StartDisplayTask+0x1c0>
          case HeadTop:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 80015d4:	4b76      	ldr	r3, [pc, #472]	@ (80017b0 <StartDisplayTask+0x354>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	015b      	lsls	r3, r3, #5
 80015da:	4618      	mov	r0, r3
 80015dc:	4b74      	ldr	r3, [pc, #464]	@ (80017b0 <StartDisplayTask+0x354>)
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	4a75      	ldr	r2, [pc, #468]	@ (80017b8 <StartDisplayTask+0x35c>)
 80015e4:	4619      	mov	r1, r3
 80015e6:	f002 ff01 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 80015ea:	e017      	b.n	800161c <StartDisplayTask+0x1c0>
          case HeadLeft:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 80015ec:	4b70      	ldr	r3, [pc, #448]	@ (80017b0 <StartDisplayTask+0x354>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	015b      	lsls	r3, r3, #5
 80015f2:	4618      	mov	r0, r3
 80015f4:	4b6e      	ldr	r3, [pc, #440]	@ (80017b0 <StartDisplayTask+0x354>)
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	015b      	lsls	r3, r3, #5
 80015fa:	4a70      	ldr	r2, [pc, #448]	@ (80017bc <StartDisplayTask+0x360>)
 80015fc:	4619      	mov	r1, r3
 80015fe:	f002 fef5 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 8001602:	e00b      	b.n	800161c <StartDisplayTask+0x1c0>
          case HeadRight:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 8001604:	4b6a      	ldr	r3, [pc, #424]	@ (80017b0 <StartDisplayTask+0x354>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	015b      	lsls	r3, r3, #5
 800160a:	4618      	mov	r0, r3
 800160c:	4b68      	ldr	r3, [pc, #416]	@ (80017b0 <StartDisplayTask+0x354>)
 800160e:	785b      	ldrb	r3, [r3, #1]
 8001610:	015b      	lsls	r3, r3, #5
 8001612:	4a6b      	ldr	r2, [pc, #428]	@ (80017c0 <StartDisplayTask+0x364>)
 8001614:	4619      	mov	r1, r3
 8001616:	f002 fee9 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 800161a:	bf00      	nop
        }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001622:	e08e      	b.n	8001742 <StartDisplayTask+0x2e6>
        switch (snakeBodyParts[i]) {
 8001624:	4a67      	ldr	r2, [pc, #412]	@ (80017c4 <StartDisplayTask+0x368>)
 8001626:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b05      	cmp	r3, #5
 8001630:	f200 8082 	bhi.w	8001738 <StartDisplayTask+0x2dc>
 8001634:	a201      	add	r2, pc, #4	@ (adr r2, 800163c <StartDisplayTask+0x1e0>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	08001655 	.word	0x08001655
 8001640:	0800167b 	.word	0x0800167b
 8001644:	080016a1 	.word	0x080016a1
 8001648:	080016c7 	.word	0x080016c7
 800164c:	080016ed 	.word	0x080016ed
 8001650:	08001713 	.word	0x08001713
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 8001654:	4a5c      	ldr	r2, [pc, #368]	@ (80017c8 <StartDisplayTask+0x36c>)
 8001656:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800165a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	4618      	mov	r0, r3
 8001662:	4a59      	ldr	r2, [pc, #356]	@ (80017c8 <StartDisplayTask+0x36c>)
 8001664:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	785b      	ldrb	r3, [r3, #1]
 800166e:	015b      	lsls	r3, r3, #5
 8001670:	4a56      	ldr	r2, [pc, #344]	@ (80017cc <StartDisplayTask+0x370>)
 8001672:	4619      	mov	r1, r3
 8001674:	f002 feba 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 8001678:	e05e      	b.n	8001738 <StartDisplayTask+0x2dc>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 800167a:	4a53      	ldr	r2, [pc, #332]	@ (80017c8 <StartDisplayTask+0x36c>)
 800167c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001680:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001684:	015b      	lsls	r3, r3, #5
 8001686:	4618      	mov	r0, r3
 8001688:	4a4f      	ldr	r2, [pc, #316]	@ (80017c8 <StartDisplayTask+0x36c>)
 800168a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	015b      	lsls	r3, r3, #5
 8001696:	4a4e      	ldr	r2, [pc, #312]	@ (80017d0 <StartDisplayTask+0x374>)
 8001698:	4619      	mov	r1, r3
 800169a:	f002 fea7 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 800169e:	e04b      	b.n	8001738 <StartDisplayTask+0x2dc>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 80016a0:	4a49      	ldr	r2, [pc, #292]	@ (80017c8 <StartDisplayTask+0x36c>)
 80016a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016a6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016aa:	015b      	lsls	r3, r3, #5
 80016ac:	4618      	mov	r0, r3
 80016ae:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <StartDisplayTask+0x36c>)
 80016b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	785b      	ldrb	r3, [r3, #1]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	4a45      	ldr	r2, [pc, #276]	@ (80017d4 <StartDisplayTask+0x378>)
 80016be:	4619      	mov	r1, r3
 80016c0:	f002 fe94 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 80016c4:	e038      	b.n	8001738 <StartDisplayTask+0x2dc>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 80016c6:	4a40      	ldr	r2, [pc, #256]	@ (80017c8 <StartDisplayTask+0x36c>)
 80016c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016cc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016d0:	015b      	lsls	r3, r3, #5
 80016d2:	4618      	mov	r0, r3
 80016d4:	4a3c      	ldr	r2, [pc, #240]	@ (80017c8 <StartDisplayTask+0x36c>)
 80016d6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	785b      	ldrb	r3, [r3, #1]
 80016e0:	015b      	lsls	r3, r3, #5
 80016e2:	4a3d      	ldr	r2, [pc, #244]	@ (80017d8 <StartDisplayTask+0x37c>)
 80016e4:	4619      	mov	r1, r3
 80016e6:	f002 fe81 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 80016ea:	e025      	b.n	8001738 <StartDisplayTask+0x2dc>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 80016ec:	4a36      	ldr	r2, [pc, #216]	@ (80017c8 <StartDisplayTask+0x36c>)
 80016ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016f2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016f6:	015b      	lsls	r3, r3, #5
 80016f8:	4618      	mov	r0, r3
 80016fa:	4a33      	ldr	r2, [pc, #204]	@ (80017c8 <StartDisplayTask+0x36c>)
 80016fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	785b      	ldrb	r3, [r3, #1]
 8001706:	015b      	lsls	r3, r3, #5
 8001708:	4a34      	ldr	r2, [pc, #208]	@ (80017dc <StartDisplayTask+0x380>)
 800170a:	4619      	mov	r1, r3
 800170c:	f002 fe6e 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 8001710:	e012      	b.n	8001738 <StartDisplayTask+0x2dc>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 8001712:	4a2d      	ldr	r2, [pc, #180]	@ (80017c8 <StartDisplayTask+0x36c>)
 8001714:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001718:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800171c:	015b      	lsls	r3, r3, #5
 800171e:	4618      	mov	r0, r3
 8001720:	4a29      	ldr	r2, [pc, #164]	@ (80017c8 <StartDisplayTask+0x36c>)
 8001722:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	785b      	ldrb	r3, [r3, #1]
 800172c:	015b      	lsls	r3, r3, #5
 800172e:	4a2c      	ldr	r2, [pc, #176]	@ (80017e0 <StartDisplayTask+0x384>)
 8001730:	4619      	mov	r1, r3
 8001732:	f002 fe5b 	bl	80043ec <BSP_LCD_DrawBitmap>
            break;
 8001736:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 8001738:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800173c:	3301      	adds	r3, #1
 800173e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <StartDisplayTask+0x33c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800174c:	4293      	cmp	r3, r2
 800174e:	f6ff af69 	blt.w	8001624 <StartDisplayTask+0x1c8>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <StartDisplayTask+0x388>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d876      	bhi.n	8001848 <StartDisplayTask+0x3ec>
 800175a:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <StartDisplayTask+0x304>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017e9 	.word	0x080017e9
 8001764:	08001801 	.word	0x08001801
 8001768:	08001819 	.word	0x08001819
 800176c:	08001831 	.word	0x08001831
 8001770:	200002b4 	.word	0x200002b4
 8001774:	20000004 	.word	0x20000004
 8001778:	200002b0 	.word	0x200002b0
 800177c:	200002ac 	.word	0x200002ac
 8001780:	200003c8 	.word	0x200003c8
 8001784:	20000228 	.word	0x20000228
 8001788:	0800f9d0 	.word	0x0800f9d0
 800178c:	0800f9e4 	.word	0x0800f9e4
 8001790:	0800f9f8 	.word	0x0800f9f8
 8001794:	0800fa0c 	.word	0x0800fa0c
 8001798:	200002a4 	.word	0x200002a4
 800179c:	0800fa20 	.word	0x0800fa20
 80017a0:	20000000 	.word	0x20000000
 80017a4:	0800fa2c 	.word	0x0800fa2c
 80017a8:	ffa52a2a 	.word	0xffa52a2a
 80017ac:	20000229 	.word	0x20000229
 80017b0:	20000008 	.word	0x20000008
 80017b4:	08012cec 	.word	0x08012cec
 80017b8:	08013978 	.word	0x08013978
 80017bc:	08014604 	.word	0x08014604
 80017c0:	08015290 	.word	0x08015290
 80017c4:	2000022c 	.word	0x2000022c
 80017c8:	200002b8 	.word	0x200002b8
 80017cc:	08010748 	.word	0x08010748
 80017d0:	080113d4 	.word	0x080113d4
 80017d4:	08012060 	.word	0x08012060
 80017d8:	08015f1c 	.word	0x08015f1c
 80017dc:	08016ba8 	.word	0x08016ba8
 80017e0:	08017834 	.word	0x08017834
 80017e4:	20000001 	.word	0x20000001
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 80017e8:	4b45      	ldr	r3, [pc, #276]	@ (8001900 <StartDisplayTask+0x4a4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	015b      	lsls	r3, r3, #5
 80017ee:	4618      	mov	r0, r3
 80017f0:	4b43      	ldr	r3, [pc, #268]	@ (8001900 <StartDisplayTask+0x4a4>)
 80017f2:	785b      	ldrb	r3, [r3, #1]
 80017f4:	015b      	lsls	r3, r3, #5
 80017f6:	4a43      	ldr	r2, [pc, #268]	@ (8001904 <StartDisplayTask+0x4a8>)
 80017f8:	4619      	mov	r1, r3
 80017fa:	f002 fdf7 	bl	80043ec <BSP_LCD_DrawBitmap>
          break;
 80017fe:	e023      	b.n	8001848 <StartDisplayTask+0x3ec>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8001800:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <StartDisplayTask+0x4a4>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	015b      	lsls	r3, r3, #5
 8001806:	4618      	mov	r0, r3
 8001808:	4b3d      	ldr	r3, [pc, #244]	@ (8001900 <StartDisplayTask+0x4a4>)
 800180a:	785b      	ldrb	r3, [r3, #1]
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	4a3e      	ldr	r2, [pc, #248]	@ (8001908 <StartDisplayTask+0x4ac>)
 8001810:	4619      	mov	r1, r3
 8001812:	f002 fdeb 	bl	80043ec <BSP_LCD_DrawBitmap>
          break;
 8001816:	e017      	b.n	8001848 <StartDisplayTask+0x3ec>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 8001818:	4b39      	ldr	r3, [pc, #228]	@ (8001900 <StartDisplayTask+0x4a4>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	015b      	lsls	r3, r3, #5
 800181e:	4618      	mov	r0, r3
 8001820:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <StartDisplayTask+0x4a4>)
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	015b      	lsls	r3, r3, #5
 8001826:	4a39      	ldr	r2, [pc, #228]	@ (800190c <StartDisplayTask+0x4b0>)
 8001828:	4619      	mov	r1, r3
 800182a:	f002 fddf 	bl	80043ec <BSP_LCD_DrawBitmap>
          break;
 800182e:	e00b      	b.n	8001848 <StartDisplayTask+0x3ec>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 8001830:	4b33      	ldr	r3, [pc, #204]	@ (8001900 <StartDisplayTask+0x4a4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	015b      	lsls	r3, r3, #5
 8001836:	4618      	mov	r0, r3
 8001838:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <StartDisplayTask+0x4a4>)
 800183a:	785b      	ldrb	r3, [r3, #1]
 800183c:	015b      	lsls	r3, r3, #5
 800183e:	4a34      	ldr	r2, [pc, #208]	@ (8001910 <StartDisplayTask+0x4b4>)
 8001840:	4619      	mov	r1, r3
 8001842:	f002 fdd3 	bl	80043ec <BSP_LCD_DrawBitmap>
          break;
 8001846:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 8001848:	4b32      	ldr	r3, [pc, #200]	@ (8001914 <StartDisplayTask+0x4b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d11a      	bne.n	8001886 <StartDisplayTask+0x42a>
 8001850:	4b31      	ldr	r3, [pc, #196]	@ (8001918 <StartDisplayTask+0x4bc>)
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	4b31      	ldr	r3, [pc, #196]	@ (800191c <StartDisplayTask+0x4c0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d105      	bne.n	8001868 <StartDisplayTask+0x40c>
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <StartDisplayTask+0x4bc>)
 800185e:	785a      	ldrb	r2, [r3, #1]
 8001860:	4b2e      	ldr	r3, [pc, #184]	@ (800191c <StartDisplayTask+0x4c0>)
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	429a      	cmp	r2, r3
 8001866:	d00e      	beq.n	8001886 <StartDisplayTask+0x42a>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 8001868:	482d      	ldr	r0, [pc, #180]	@ (8001920 <StartDisplayTask+0x4c4>)
 800186a:	f002 fb99 	bl	8003fa0 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 800186e:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <StartDisplayTask+0x4c0>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	015b      	lsls	r3, r3, #5
 8001874:	b298      	uxth	r0, r3
 8001876:	4b29      	ldr	r3, [pc, #164]	@ (800191c <StartDisplayTask+0x4c0>)
 8001878:	785b      	ldrb	r3, [r3, #1]
 800187a:	015b      	lsls	r3, r3, #5
 800187c:	b299      	uxth	r1, r3
 800187e:	2320      	movs	r3, #32
 8001880:	2220      	movs	r2, #32
 8001882:	f002 fe65 	bl	8004550 <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800188c:	e01f      	b.n	80018ce <StartDisplayTask+0x472>
        if (applePosition[i][0] != -1)
 800188e:	4a25      	ldr	r2, [pc, #148]	@ (8001924 <StartDisplayTask+0x4c8>)
 8001890:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001894:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800189c:	d012      	beq.n	80018c4 <StartDisplayTask+0x468>
          BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 800189e:	4a21      	ldr	r2, [pc, #132]	@ (8001924 <StartDisplayTask+0x4c8>)
 80018a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018a4:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80018a8:	015b      	lsls	r3, r3, #5
 80018aa:	4618      	mov	r0, r3
 80018ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001924 <StartDisplayTask+0x4c8>)
 80018ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	4413      	add	r3, r2
 80018b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001928 <StartDisplayTask+0x4cc>)
 80018be:	4619      	mov	r1, r3
 80018c0:	f002 fd94 	bl	80043ec <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++)
 80018c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018c8:	3301      	adds	r3, #1
 80018ca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80018ce:	2304      	movs	r3, #4
 80018d0:	461a      	mov	r2, r3
 80018d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018d6:	4293      	cmp	r3, r2
 80018d8:	dbd9      	blt.n	800188e <StartDisplayTask+0x432>
      xSemaphoreGive(displayMutexHandle);
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <StartDisplayTask+0x4d0>)
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	f00a fdf0 	bl	800c4c8 <xQueueGenericSend>

      if (gameOver)
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <StartDisplayTask+0x4d4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <StartDisplayTask+0x49a>
        lastMove = 0;
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <StartDisplayTask+0x4d8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
    }

    osDelay(90);
 80018f6:	205a      	movs	r0, #90	@ 0x5a
 80018f8:	f00a fb63 	bl	800bfc2 <osDelay>
    if ((gameOver && !lastMove) || gamePaused || !gameStarted) { // revoir la condition
 80018fc:	e5b6      	b.n	800146c <StartDisplayTask+0x10>
 80018fe:	bf00      	nop
 8001900:	2000000c 	.word	0x2000000c
 8001904:	080184c0 	.word	0x080184c0
 8001908:	0801914c 	.word	0x0801914c
 800190c:	08019dd8 	.word	0x08019dd8
 8001910:	0801aa64 	.word	0x0801aa64
 8001914:	200002a8 	.word	0x200002a8
 8001918:	20000008 	.word	0x20000008
 800191c:	200003a8 	.word	0x200003a8
 8001920:	ff81cd4b 	.word	0xff81cd4b
 8001924:	200003ac 	.word	0x200003ac
 8001928:	0800fabc 	.word	0x0800fabc
 800192c:	200003c8 	.word	0x200003c8
 8001930:	200002b4 	.word	0x200002b4
 8001934:	20000004 	.word	0x20000004

08001938 <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 8001940:	4b30      	ldr	r3, [pc, #192]	@ (8001a04 <StartJoystickTask+0xcc>)
 8001942:	2208      	movs	r2, #8
 8001944:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001946:	492f      	ldr	r1, [pc, #188]	@ (8001a04 <StartJoystickTask+0xcc>)
 8001948:	482f      	ldr	r0, [pc, #188]	@ (8001a08 <StartJoystickTask+0xd0>)
 800194a:	f004 fcb1 	bl	80062b0 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 800194e:	482e      	ldr	r0, [pc, #184]	@ (8001a08 <StartJoystickTask+0xd0>)
 8001950:	f004 fb48 	bl	8005fe4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001954:	bf00      	nop
 8001956:	2164      	movs	r1, #100	@ 0x64
 8001958:	482b      	ldr	r0, [pc, #172]	@ (8001a08 <StartJoystickTask+0xd0>)
 800195a:	f004 fc11 	bl	8006180 <HAL_ADC_PollForConversion>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f8      	bne.n	8001956 <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 8001964:	4828      	ldr	r0, [pc, #160]	@ (8001a08 <StartJoystickTask+0xd0>)
 8001966:	f004 fc96 	bl	8006296 <HAL_ADC_GetValue>
 800196a:	4603      	mov	r3, r0
 800196c:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <StartJoystickTask+0xd4>)
 800196e:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 8001970:	4827      	ldr	r0, [pc, #156]	@ (8001a10 <StartJoystickTask+0xd8>)
 8001972:	f004 fb37 	bl	8005fe4 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001976:	bf00      	nop
 8001978:	2164      	movs	r1, #100	@ 0x64
 800197a:	4825      	ldr	r0, [pc, #148]	@ (8001a10 <StartJoystickTask+0xd8>)
 800197c:	f004 fc00 	bl	8006180 <HAL_ADC_PollForConversion>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f8      	bne.n	8001978 <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 8001986:	4822      	ldr	r0, [pc, #136]	@ (8001a10 <StartJoystickTask+0xd8>)
 8001988:	f004 fc85 	bl	8006296 <HAL_ADC_GetValue>
 800198c:	4603      	mov	r3, r0
 800198e:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <StartJoystickTask+0xdc>)
 8001990:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 8001992:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <StartJoystickTask+0xd4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800199a:	d207      	bcs.n	80019ac <StartJoystickTask+0x74>
 800199c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <StartJoystickTask+0xe0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <StartJoystickTask+0x74>
      direction = Down;
 80019a4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <StartJoystickTask+0xe4>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e027      	b.n	80019fc <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <StartJoystickTask+0xd4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d907      	bls.n	80019c8 <StartJoystickTask+0x90>
 80019b8:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <StartJoystickTask+0xe0>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d003      	beq.n	80019c8 <StartJoystickTask+0x90>
      direction = Up;
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <StartJoystickTask+0xe4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e019      	b.n	80019fc <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <StartJoystickTask+0xdc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019d0:	d207      	bcs.n	80019e2 <StartJoystickTask+0xaa>
 80019d2:	4b11      	ldr	r3, [pc, #68]	@ (8001a18 <StartJoystickTask+0xe0>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d003      	beq.n	80019e2 <StartJoystickTask+0xaa>
      direction = Right;
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <StartJoystickTask+0xe4>)
 80019dc:	2203      	movs	r2, #3
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e00c      	b.n	80019fc <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <StartJoystickTask+0xdc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d906      	bls.n	80019fc <StartJoystickTask+0xc4>
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <StartJoystickTask+0xe0>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b03      	cmp	r3, #3
 80019f4:	d002      	beq.n	80019fc <StartJoystickTask+0xc4>
      direction = Left;
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <StartJoystickTask+0xe4>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 80019fc:	200a      	movs	r0, #10
 80019fe:	f00a fae0 	bl	800bfc2 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 8001a02:	e79d      	b.n	8001940 <StartJoystickTask+0x8>
 8001a04:	200007c4 	.word	0x200007c4
 8001a08:	2000011c 	.word	0x2000011c
 8001a0c:	20000220 	.word	0x20000220
 8001a10:	200000d4 	.word	0x200000d4
 8001a14:	20000224 	.word	0x20000224
 8001a18:	20000229 	.word	0x20000229
 8001a1c:	20000228 	.word	0x20000228

08001a20 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b08e      	sub	sp, #56	@ 0x38
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 8001a28:	f00b fc04 	bl	800d234 <xTaskGetTickCount>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]
  TickType_t delay = pdMS_TO_TICKS(1000. / initSpeed);
 8001a30:	2303      	movs	r3, #3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd8e 	bl	8000554 <__aeabi_i2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	4991      	ldr	r1, [pc, #580]	@ (8001c88 <StartManageBodyParts+0x268>)
 8001a42:	f7fe ff1b 	bl	800087c <__aeabi_ddiv>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7fe fffd 	bl	8000a4c <__aeabi_d2uiz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	4a8b      	ldr	r2, [pc, #556]	@ (8001c8c <StartManageBodyParts+0x26c>)
 8001a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  for(;;)
  {
    delay = pdMS_TO_TICKS(1000. / speed);
 8001a66:	4b8a      	ldr	r3, [pc, #552]	@ (8001c90 <StartManageBodyParts+0x270>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fd72 	bl	8000554 <__aeabi_i2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	4983      	ldr	r1, [pc, #524]	@ (8001c88 <StartManageBodyParts+0x268>)
 8001a7a:	f7fe feff 	bl	800087c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7fe ffe1 	bl	8000a4c <__aeabi_d2uiz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	4a7d      	ldr	r2, [pc, #500]	@ (8001c8c <StartManageBodyParts+0x26c>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	617b      	str	r3, [r7, #20]

    if (!gameOver && !gamePaused && gameStarted) {
 8001a9e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c94 <StartManageBodyParts+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 82ba 	bne.w	800201c <StartManageBodyParts+0x5fc>
 8001aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8001c98 <StartManageBodyParts+0x278>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 82b5 	bne.w	800201c <StartManageBodyParts+0x5fc>
 8001ab2:	4b7a      	ldr	r3, [pc, #488]	@ (8001c9c <StartManageBodyParts+0x27c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 82b0 	beq.w	800201c <StartManageBodyParts+0x5fc>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 8001abc:	4b78      	ldr	r3, [pc, #480]	@ (8001ca0 <StartManageBodyParts+0x280>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4b78      	ldr	r3, [pc, #480]	@ (8001ca4 <StartManageBodyParts+0x284>)
 8001ac2:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001ac4:	4b76      	ldr	r3, [pc, #472]	@ (8001ca0 <StartManageBodyParts+0x280>)
 8001ac6:	785a      	ldrb	r2, [r3, #1]
 8001ac8:	4b76      	ldr	r3, [pc, #472]	@ (8001ca4 <StartManageBodyParts+0x284>)
 8001aca:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 8001acc:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	723b      	strb	r3, [r7, #8]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001ad2:	4b75      	ldr	r3, [pc, #468]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001ad4:	785b      	ldrb	r3, [r3, #1]
 8001ad6:	727b      	strb	r3, [r7, #9]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001ad8:	4b74      	ldr	r3, [pc, #464]	@ (8001cac <StartManageBodyParts+0x28c>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d833      	bhi.n	8001b48 <StartManageBodyParts+0x128>
 8001ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae8 <StartManageBodyParts+0xc8>)
 8001ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae6:	bf00      	nop
 8001ae8:	08001af9 	.word	0x08001af9
 8001aec:	08001b0d 	.word	0x08001b0d
 8001af0:	08001b21 	.word	0x08001b21
 8001af4:	08001b35 	.word	0x08001b35
        case Up:
          headPart = HeadTop;
 8001af8:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb0 <StartManageBodyParts+0x290>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 8001afe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b00:	785b      	ldrb	r3, [r3, #1]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b68      	ldr	r3, [pc, #416]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b08:	705a      	strb	r2, [r3, #1]
          break;
 8001b0a:	e01d      	b.n	8001b48 <StartManageBodyParts+0x128>
        case Down:
          headPart = HeadBottom;
 8001b0c:	4b68      	ldr	r3, [pc, #416]	@ (8001cb0 <StartManageBodyParts+0x290>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001b12:	4b65      	ldr	r3, [pc, #404]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b14:	785b      	ldrb	r3, [r3, #1]
 8001b16:	3301      	adds	r3, #1
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b1c:	705a      	strb	r2, [r3, #1]
          break;
 8001b1e:	e013      	b.n	8001b48 <StartManageBodyParts+0x128>
        case Left:
          headPart = HeadLeft;
 8001b20:	4b63      	ldr	r3, [pc, #396]	@ (8001cb0 <StartManageBodyParts+0x290>)
 8001b22:	2202      	movs	r2, #2
 8001b24:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001b26:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b30:	701a      	strb	r2, [r3, #0]
          break;
 8001b32:	e009      	b.n	8001b48 <StartManageBodyParts+0x128>
        case Right:
          headPart = HeadRight;
 8001b34:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb0 <StartManageBodyParts+0x290>)
 8001b36:	2203      	movs	r2, #3
 8001b38:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b59      	ldr	r3, [pc, #356]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b44:	701a      	strb	r2, [r3, #0]
          break;
 8001b46:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001b48:	4b57      	ldr	r3, [pc, #348]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d204      	bcs.n	8001b5c <StartManageBodyParts+0x13c>
 8001b52:	4b55      	ldr	r3, [pc, #340]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b54:	785b      	ldrb	r3, [r3, #1]
 8001b56:	2208      	movs	r2, #8
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d303      	bcc.n	8001b64 <StartManageBodyParts+0x144>
        // On a touché un mur
        gameOver = 1;
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c94 <StartManageBodyParts+0x274>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	e01f      	b.n	8001ba4 <StartManageBodyParts+0x184>
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 8001b64:	2300      	movs	r3, #0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b68:	e016      	b.n	8001b98 <StartManageBodyParts+0x178>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 8001b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	4951      	ldr	r1, [pc, #324]	@ (8001cb4 <StartManageBodyParts+0x294>)
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d10b      	bne.n	8001b92 <StartManageBodyParts+0x172>
 8001b7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001b7c:	785a      	ldrb	r2, [r3, #1]
 8001b7e:	494d      	ldr	r1, [pc, #308]	@ (8001cb4 <StartManageBodyParts+0x294>)
 8001b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	440b      	add	r3, r1
 8001b86:	785b      	ldrb	r3, [r3, #1]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d102      	bne.n	8001b92 <StartManageBodyParts+0x172>
            // On a touché notre corps
            gameOver = 1;
 8001b8c:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <StartManageBodyParts+0x274>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 8001b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b94:	3301      	adds	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b98:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <StartManageBodyParts+0x298>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	dbe2      	blt.n	8001b6a <StartManageBodyParts+0x14a>
      }
      // Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001ba4:	4b45      	ldr	r3, [pc, #276]	@ (8001cbc <StartManageBodyParts+0x29c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bae:	e10e      	b.n	8001dce <StartManageBodyParts+0x3ae>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4a42      	ldr	r2, [pc, #264]	@ (8001cc0 <StartManageBodyParts+0x2a0>)
 8001bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bba:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001bbe:	4299      	cmp	r1, r3
 8001bc0:	f040 8102 	bne.w	8001dc8 <StartManageBodyParts+0x3a8>
 8001bc4:	4b38      	ldr	r3, [pc, #224]	@ (8001ca8 <StartManageBodyParts+0x288>)
 8001bc6:	785b      	ldrb	r3, [r3, #1]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4a3d      	ldr	r2, [pc, #244]	@ (8001cc0 <StartManageBodyParts+0x2a0>)
 8001bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001bd6:	4299      	cmp	r1, r3
 8001bd8:	f040 80f6 	bne.w	8001dc8 <StartManageBodyParts+0x3a8>
          snakeSize++;
 8001bdc:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <StartManageBodyParts+0x298>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b34      	ldr	r3, [pc, #208]	@ (8001cb8 <StartManageBodyParts+0x298>)
 8001be6:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001be8:	4b34      	ldr	r3, [pc, #208]	@ (8001cbc <StartManageBodyParts+0x29c>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

          // On augmente la vitesse de 1Hz a chaque palier
          for (int i = 0; i < 5; i++) {
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf2:	e011      	b.n	8001c18 <StartManageBodyParts+0x1f8>
            if (snakeSize == palierIncreaseSpeed[i]) {
 8001bf4:	4a33      	ldr	r2, [pc, #204]	@ (8001cc4 <StartManageBodyParts+0x2a4>)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	4413      	add	r3, r2
 8001bfa:	781a      	ldrb	r2, [r3, #0]
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <StartManageBodyParts+0x298>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d106      	bne.n	8001c12 <StartManageBodyParts+0x1f2>
              speed++;
 8001c04:	4b22      	ldr	r3, [pc, #136]	@ (8001c90 <StartManageBodyParts+0x270>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <StartManageBodyParts+0x270>)
 8001c0e:	701a      	strb	r2, [r3, #0]
              break;
 8001c10:	e005      	b.n	8001c1e <StartManageBodyParts+0x1fe>
          for (int i = 0; i < 5; i++) {
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	3301      	adds	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	ddea      	ble.n	8001bf4 <StartManageBodyParts+0x1d4>
            }
          }


          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001c1e:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <StartManageBodyParts+0x298>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	e020      	b.n	8001c6a <StartManageBodyParts+0x24a>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	4a26      	ldr	r2, [pc, #152]	@ (8001cc8 <StartManageBodyParts+0x2a8>)
 8001c2e:	5cd1      	ldrb	r1, [r2, r3]
 8001c30:	4a25      	ldr	r2, [pc, #148]	@ (8001cc8 <StartManageBodyParts+0x2a8>)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	4413      	add	r3, r2
 8001c36:	460a      	mov	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <StartManageBodyParts+0x294>)
 8001c40:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001c44:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb4 <StartManageBodyParts+0x294>)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001c4c:	6a3b      	ldr	r3, [r7, #32]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	4a18      	ldr	r2, [pc, #96]	@ (8001cb4 <StartManageBodyParts+0x294>)
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	7859      	ldrb	r1, [r3, #1]
 8001c58:	4a16      	ldr	r2, [pc, #88]	@ (8001cb4 <StartManageBodyParts+0x294>)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	460a      	mov	r2, r1
 8001c62:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dcdb      	bgt.n	8001c28 <StartManageBodyParts+0x208>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <StartManageBodyParts+0x298>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d929      	bls.n	8001ccc <StartManageBodyParts+0x2ac>
            backX = snakeBodyPosition[0][0];
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <StartManageBodyParts+0x294>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	77fb      	strb	r3, [r7, #31]
            backY = snakeBodyPosition[0][1];
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <StartManageBodyParts+0x294>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	77bb      	strb	r3, [r7, #30]
 8001c84:	e028      	b.n	8001cd8 <StartManageBodyParts+0x2b8>
 8001c86:	bf00      	nop
 8001c88:	408f4000 	.word	0x408f4000
 8001c8c:	10624dd3 	.word	0x10624dd3
 8001c90:	20000000 	.word	0x20000000
 8001c94:	200002b4 	.word	0x200002b4
 8001c98:	200002b0 	.word	0x200002b0
 8001c9c:	200002ac 	.word	0x200002ac
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	200003a8 	.word	0x200003a8
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000228 	.word	0x20000228
 8001cb0:	20000229 	.word	0x20000229
 8001cb4:	200002b8 	.word	0x200002b8
 8001cb8:	200002a4 	.word	0x200002a4
 8001cbc:	200002a8 	.word	0x200002a8
 8001cc0:	200003ac 	.word	0x200003ac
 8001cc4:	0801b6f0 	.word	0x0801b6f0
 8001cc8:	2000022c 	.word	0x2000022c
          }
          else {
            backX = snakeTailPosition[0];
 8001ccc:	4ba6      	ldr	r3, [pc, #664]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	77fb      	strb	r3, [r7, #31]
            backY = snakeTailPosition[1];
 8001cd2:	4ba5      	ldr	r3, [pc, #660]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	77bb      	strb	r3, [r7, #30]
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001cd8:	4ba4      	ldr	r3, [pc, #656]	@ (8001f6c <StartManageBodyParts+0x54c>)
 8001cda:	7818      	ldrb	r0, [r3, #0]
 8001cdc:	4ba3      	ldr	r3, [pc, #652]	@ (8001f6c <StartManageBodyParts+0x54c>)
 8001cde:	7859      	ldrb	r1, [r3, #1]
 8001ce0:	7a3b      	ldrb	r3, [r7, #8]
 8001ce2:	7a7a      	ldrb	r2, [r7, #9]
 8001ce4:	7fbd      	ldrb	r5, [r7, #30]
 8001ce6:	7ffc      	ldrb	r4, [r7, #31]
 8001ce8:	9201      	str	r2, [sp, #4]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	462b      	mov	r3, r5
 8001cee:	4622      	mov	r2, r4
 8001cf0:	f000 fa0c 	bl	800210c <whatBodyPart>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b9d      	ldr	r3, [pc, #628]	@ (8001f70 <StartManageBodyParts+0x550>)
 8001cfa:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001cfc:	7a3a      	ldrb	r2, [r7, #8]
 8001cfe:	4b9d      	ldr	r3, [pc, #628]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001d00:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001d02:	7a7a      	ldrb	r2, [r7, #9]
 8001d04:	4b9b      	ldr	r3, [pc, #620]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001d06:	705a      	strb	r2, [r3, #1]

          // Si on a de la place pour une nouvelle pomme
          uint8_t NBFreeCells = gridSizeX * gridSizeY - snakeSize - 1;
 8001d08:	220f      	movs	r2, #15
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	fb12 f303 	smulbb	r3, r2, r3
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b99      	ldr	r3, [pc, #612]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	74fb      	strb	r3, [r7, #19]
          if (NBFreeCells > NBApple) {
 8001d1e:	2204      	movs	r2, #4
 8001d20:	7cfb      	ldrb	r3, [r7, #19]
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d945      	bls.n	8001db2 <StartManageBodyParts+0x392>
            // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
            do {
              applePosition[i][0] = rand() % gridSizeX;
 8001d26:	f00c fbd3 	bl	800e4d0 <rand>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d32:	fb01 f202 	mul.w	r2, r1, r2
 8001d36:	1a9b      	subs	r3, r3, r2
 8001d38:	b259      	sxtb	r1, r3
 8001d3a:	4a90      	ldr	r2, [pc, #576]	@ (8001f7c <StartManageBodyParts+0x55c>)
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
              applePosition[i][1] = rand() % gridSizeY;
 8001d42:	f00c fbc5 	bl	800e4d0 <rand>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2208      	movs	r2, #8
 8001d4a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001d4e:	fb01 f202 	mul.w	r2, r1, r2
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	b259      	sxtb	r1, r3
 8001d56:	4a89      	ldr	r2, [pc, #548]	@ (8001f7c <StartManageBodyParts+0x55c>)
 8001d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	460a      	mov	r2, r1
 8001d60:	705a      	strb	r2, [r3, #1]
            } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) 
 8001d62:	4a86      	ldr	r2, [pc, #536]	@ (8001f7c <StartManageBodyParts+0x55c>)
 8001d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d66:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4983      	ldr	r1, [pc, #524]	@ (8001f7c <StartManageBodyParts+0x55c>)
 8001d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f000 fa27 	bl	80021d0 <isSnakePosition>
 8001d82:	4603      	mov	r3, r0
                  || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ce      	bne.n	8001d26 <StartManageBodyParts+0x306>
 8001d88:	4a7c      	ldr	r2, [pc, #496]	@ (8001f7c <StartManageBodyParts+0x55c>)
 8001d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d8c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001d90:	b2d8      	uxtb	r0, r3
 8001d92:	4a7a      	ldr	r2, [pc, #488]	@ (8001f7c <StartManageBodyParts+0x55c>)
 8001d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f000 fa5f 	bl	8002268 <isApplePosition>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ba      	bne.n	8001d26 <StartManageBodyParts+0x306>
 8001db0:	e00a      	b.n	8001dc8 <StartManageBodyParts+0x3a8>
          }
          else {
            applePosition[i][0] = -1;
 8001db2:	4a72      	ldr	r2, [pc, #456]	@ (8001f7c <StartManageBodyParts+0x55c>)
 8001db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db6:	21ff      	movs	r1, #255	@ 0xff
 8001db8:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = -1;
 8001dbc:	4a6f      	ldr	r2, [pc, #444]	@ (8001f7c <StartManageBodyParts+0x55c>)
 8001dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	22ff      	movs	r2, #255	@ 0xff
 8001dc6:	705a      	strb	r2, [r3, #1]
      for (int i = 0; i < NBApple; i++) {
 8001dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dca:	3301      	adds	r3, #1
 8001dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dce:	2304      	movs	r3, #4
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	f6ff aeeb 	blt.w	8001bb0 <StartManageBodyParts+0x190>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 8001dda:	4b69      	ldr	r3, [pc, #420]	@ (8001f80 <StartManageBodyParts+0x560>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 811c 	bne.w	800201c <StartManageBodyParts+0x5fc>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001de4:	4b64      	ldr	r3, [pc, #400]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d011      	beq.n	8001e10 <StartManageBodyParts+0x3f0>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001dec:	4b62      	ldr	r3, [pc, #392]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	4a60      	ldr	r2, [pc, #384]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001df4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001df8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001dfa:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	4a5c      	ldr	r2, [pc, #368]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	785a      	ldrb	r2, [r3, #1]
 8001e0a:	4b57      	ldr	r3, [pc, #348]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001e0c:	705a      	strb	r2, [r3, #1]
 8001e0e:	e005      	b.n	8001e1c <StartManageBodyParts+0x3fc>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 8001e10:	7a3a      	ldrb	r2, [r7, #8]
 8001e12:	4b55      	ldr	r3, [pc, #340]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001e14:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001e16:	7a7a      	ldrb	r2, [r7, #9]
 8001e18:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001e1a:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001e1c:	4b56      	ldr	r3, [pc, #344]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	61bb      	str	r3, [r7, #24]
 8001e24:	e020      	b.n	8001e68 <StartManageBodyParts+0x448>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	4a51      	ldr	r2, [pc, #324]	@ (8001f70 <StartManageBodyParts+0x550>)
 8001e2c:	5cd1      	ldrb	r1, [r2, r3]
 8001e2e:	4a50      	ldr	r2, [pc, #320]	@ (8001f70 <StartManageBodyParts+0x550>)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	4413      	add	r3, r2
 8001e34:	460a      	mov	r2, r1
 8001e36:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001e3e:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001e42:	4a4c      	ldr	r2, [pc, #304]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	4a49      	ldr	r2, [pc, #292]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	7859      	ldrb	r1, [r3, #1]
 8001e56:	4a47      	ldr	r2, [pc, #284]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	460a      	mov	r2, r1
 8001e60:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	dcdb      	bgt.n	8001e26 <StartManageBodyParts+0x406>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001e6e:	4b42      	ldr	r3, [pc, #264]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80b2 	beq.w	8001fdc <StartManageBodyParts+0x5bc>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001e78:	4b3c      	ldr	r3, [pc, #240]	@ (8001f6c <StartManageBodyParts+0x54c>)
 8001e7a:	7818      	ldrb	r0, [r3, #0]
 8001e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f6c <StartManageBodyParts+0x54c>)
 8001e7e:	7859      	ldrb	r1, [r3, #1]
 8001e80:	4b3c      	ldr	r3, [pc, #240]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001e82:	781c      	ldrb	r4, [r3, #0]
 8001e84:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001e86:	785d      	ldrb	r5, [r3, #1]
 8001e88:	7a3b      	ldrb	r3, [r7, #8]
 8001e8a:	7a7a      	ldrb	r2, [r7, #9]
 8001e8c:	9201      	str	r2, [sp, #4]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	462b      	mov	r3, r5
 8001e92:	4622      	mov	r2, r4
 8001e94:	f000 f93a 	bl	800210c <whatBodyPart>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b34      	ldr	r3, [pc, #208]	@ (8001f70 <StartManageBodyParts+0x550>)
 8001e9e:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001ea0:	7a3a      	ldrb	r2, [r7, #8]
 8001ea2:	4b34      	ldr	r3, [pc, #208]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001ea4:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001ea6:	7a7a      	ldrb	r2, [r7, #9]
 8001ea8:	4b32      	ldr	r3, [pc, #200]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001eaa:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001eac:	4b32      	ldr	r3, [pc, #200]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001f70 <StartManageBodyParts+0x550>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	f200 80b0 	bhi.w	800201c <StartManageBodyParts+0x5fc>
 8001ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec4 <StartManageBodyParts+0x4a4>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001edd 	.word	0x08001edd
 8001ec8:	08001f01 	.word	0x08001f01
 8001ecc:	08001f25 	.word	0x08001f25
 8001ed0:	08001f4b 	.word	0x08001f4b
 8001ed4:	08001f91 	.word	0x08001f91
 8001ed8:	08001fb7 	.word	0x08001fb7
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001edc:	4b26      	ldr	r3, [pc, #152]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	4a24      	ldr	r2, [pc, #144]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001ee4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d103      	bne.n	8001ef8 <StartManageBodyParts+0x4d8>
                tailPart = TailTop;
 8001ef0:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <StartManageBodyParts+0x564>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001ef6:	e091      	b.n	800201c <StartManageBodyParts+0x5fc>
                tailPart = TailRight;
 8001ef8:	4b22      	ldr	r3, [pc, #136]	@ (8001f84 <StartManageBodyParts+0x564>)
 8001efa:	2203      	movs	r2, #3
 8001efc:	701a      	strb	r2, [r3, #0]
              break;
 8001efe:	e08d      	b.n	800201c <StartManageBodyParts+0x5fc>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001f08:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d103      	bne.n	8001f1c <StartManageBodyParts+0x4fc>
                tailPart = TailTop;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <StartManageBodyParts+0x564>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001f1a:	e07f      	b.n	800201c <StartManageBodyParts+0x5fc>
                tailPart = TailLeft;
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <StartManageBodyParts+0x564>)
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]
              break;
 8001f22:	e07b      	b.n	800201c <StartManageBodyParts+0x5fc>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	785a      	ldrb	r2, [r3, #1]
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001f34:	785b      	ldrb	r3, [r3, #1]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d203      	bcs.n	8001f42 <StartManageBodyParts+0x522>
                tailPart = TailTop;
 8001f3a:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <StartManageBodyParts+0x564>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f40:	e06c      	b.n	800201c <StartManageBodyParts+0x5fc>
                tailPart = TailBottom;
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <StartManageBodyParts+0x564>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
              break;
 8001f48:	e068      	b.n	800201c <StartManageBodyParts+0x5fc>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <StartManageBodyParts+0x558>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	4a08      	ldr	r2, [pc, #32]	@ (8001f74 <StartManageBodyParts+0x554>)
 8001f52:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001f56:	4b04      	ldr	r3, [pc, #16]	@ (8001f68 <StartManageBodyParts+0x548>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d214      	bcs.n	8001f88 <StartManageBodyParts+0x568>
                tailPart = TailLeft;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <StartManageBodyParts+0x564>)
 8001f60:	2202      	movs	r2, #2
 8001f62:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001f64:	e05a      	b.n	800201c <StartManageBodyParts+0x5fc>
 8001f66:	bf00      	nop
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	2000022c 	.word	0x2000022c
 8001f74:	200002b8 	.word	0x200002b8
 8001f78:	200002a4 	.word	0x200002a4
 8001f7c:	200003ac 	.word	0x200003ac
 8001f80:	200002a8 	.word	0x200002a8
 8001f84:	20000001 	.word	0x20000001
                tailPart = TailRight;
 8001f88:	4b28      	ldr	r3, [pc, #160]	@ (800202c <StartManageBodyParts+0x60c>)
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	701a      	strb	r2, [r3, #0]
              break;
 8001f8e:	e045      	b.n	800201c <StartManageBodyParts+0x5fc>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001f90:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <StartManageBodyParts+0x610>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3b01      	subs	r3, #1
 8001f96:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <StartManageBodyParts+0x614>)
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	785a      	ldrb	r2, [r3, #1]
 8001f9e:	4b26      	ldr	r3, [pc, #152]	@ (8002038 <StartManageBodyParts+0x618>)
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d103      	bne.n	8001fae <StartManageBodyParts+0x58e>
                tailPart = TailRight;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	@ (800202c <StartManageBodyParts+0x60c>)
 8001fa8:	2203      	movs	r2, #3
 8001faa:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001fac:	e036      	b.n	800201c <StartManageBodyParts+0x5fc>
                tailPart = TailBottom;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	@ (800202c <StartManageBodyParts+0x60c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
              break;
 8001fb4:	e032      	b.n	800201c <StartManageBodyParts+0x5fc>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <StartManageBodyParts+0x610>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8002034 <StartManageBodyParts+0x614>)
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	785a      	ldrb	r2, [r3, #1]
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002038 <StartManageBodyParts+0x618>)
 8001fc6:	785b      	ldrb	r3, [r3, #1]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d103      	bne.n	8001fd4 <StartManageBodyParts+0x5b4>
                tailPart = TailLeft;
 8001fcc:	4b17      	ldr	r3, [pc, #92]	@ (800202c <StartManageBodyParts+0x60c>)
 8001fce:	2202      	movs	r2, #2
 8001fd0:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001fd2:	e023      	b.n	800201c <StartManageBodyParts+0x5fc>
                tailPart = TailBottom;
 8001fd4:	4b15      	ldr	r3, [pc, #84]	@ (800202c <StartManageBodyParts+0x60c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
              break;
 8001fda:	e01f      	b.n	800201c <StartManageBodyParts+0x5fc>
          }
        }
        else {
          switch (headPart) {
 8001fdc:	4b17      	ldr	r3, [pc, #92]	@ (800203c <StartManageBodyParts+0x61c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d81b      	bhi.n	800201c <StartManageBodyParts+0x5fc>
 8001fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fec <StartManageBodyParts+0x5cc>)
 8001fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fea:	bf00      	nop
 8001fec:	08001ffd 	.word	0x08001ffd
 8001ff0:	08002005 	.word	0x08002005
 8001ff4:	0800200d 	.word	0x0800200d
 8001ff8:	08002015 	.word	0x08002015
            case HeadTop:
              tailPart = TailTop;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <StartManageBodyParts+0x60c>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
              break;
 8002002:	e00b      	b.n	800201c <StartManageBodyParts+0x5fc>
            case HeadBottom:
              tailPart = TailBottom;
 8002004:	4b09      	ldr	r3, [pc, #36]	@ (800202c <StartManageBodyParts+0x60c>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
              break;
 800200a:	e007      	b.n	800201c <StartManageBodyParts+0x5fc>
            case HeadLeft:
              tailPart = TailLeft;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <StartManageBodyParts+0x60c>)
 800200e:	2202      	movs	r2, #2
 8002010:	701a      	strb	r2, [r3, #0]
              break;
 8002012:	e003      	b.n	800201c <StartManageBodyParts+0x5fc>
            case HeadRight:
              tailPart = TailRight;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <StartManageBodyParts+0x60c>)
 8002016:	2203      	movs	r2, #3
 8002018:	701a      	strb	r2, [r3, #0]
              break;
 800201a:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	6979      	ldr	r1, [r7, #20]
 8002022:	4618      	mov	r0, r3
 8002024:	f00a ff2c 	bl	800ce80 <vTaskDelayUntil>
    delay = pdMS_TO_TICKS(1000. / speed);
 8002028:	e51d      	b.n	8001a66 <StartManageBodyParts+0x46>
 800202a:	bf00      	nop
 800202c:	20000001 	.word	0x20000001
 8002030:	200002a4 	.word	0x200002a4
 8002034:	200002b8 	.word	0x200002b8
 8002038:	2000000c 	.word	0x2000000c
 800203c:	20000229 	.word	0x20000229

08002040 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 8002048:	4b29      	ldr	r3, [pc, #164]	@ (80020f0 <StartTsHandlerTask+0xb0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <StartTsHandlerTask+0x14>
      rand();
 8002050:	f00c fa3e 	bl	800e4d0 <rand>
    

    BSP_TS_GetState(&TS_State);
 8002054:	4827      	ldr	r0, [pc, #156]	@ (80020f4 <StartTsHandlerTask+0xb4>)
 8002056:	f002 ff47 	bl	8004ee8 <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 800205a:	4b26      	ldr	r3, [pc, #152]	@ (80020f4 <StartTsHandlerTask+0xb4>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d136      	bne.n	80020d0 <StartTsHandlerTask+0x90>
 8002062:	4b25      	ldr	r3, [pc, #148]	@ (80020f8 <StartTsHandlerTask+0xb8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d032      	beq.n	80020d0 <StartTsHandlerTask+0x90>
      if (gameOver) {
 800206a:	4b24      	ldr	r3, [pc, #144]	@ (80020fc <StartTsHandlerTask+0xbc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <StartTsHandlerTask+0x3e>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8002072:	4823      	ldr	r0, [pc, #140]	@ (8002100 <StartTsHandlerTask+0xc0>)
 8002074:	f001 ffe0 	bl	8004038 <BSP_LCD_Clear>
        restartGame();
 8002078:	f000 f92a 	bl	80022d0 <restartGame>
 800207c:	e028      	b.n	80020d0 <StartTsHandlerTask+0x90>
      }
      else if (gamePaused) {
 800207e:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <StartTsHandlerTask+0xc4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d014      	beq.n	80020b0 <StartTsHandlerTask+0x70>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <StartTsHandlerTask+0xc8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800208e:	4618      	mov	r0, r3
 8002090:	f00a fb24 	bl	800c6dc <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8002094:	481a      	ldr	r0, [pc, #104]	@ (8002100 <StartTsHandlerTask+0xc0>)
 8002096:	f001 ffcf 	bl	8004038 <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 800209a:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <StartTsHandlerTask+0xc8>)
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	f00a fa10 	bl	800c4c8 <xQueueGenericSend>
        gamePaused = 0;
 80020a8:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <StartTsHandlerTask+0xc4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	e00f      	b.n	80020d0 <StartTsHandlerTask+0x90>
      }
      else if (!gameStarted) {
 80020b0:	4b0f      	ldr	r3, [pc, #60]	@ (80020f0 <StartTsHandlerTask+0xb0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <StartTsHandlerTask+0x8a>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80020b8:	4811      	ldr	r0, [pc, #68]	@ (8002100 <StartTsHandlerTask+0xc0>)
 80020ba:	f001 ffbd 	bl	8004038 <BSP_LCD_Clear>
        restartGame();
 80020be:	f000 f907 	bl	80022d0 <restartGame>
        gameStarted = 1;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <StartTsHandlerTask+0xb0>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	e002      	b.n	80020d0 <StartTsHandlerTask+0x90>
      }
      else {
        gamePaused = 1;
 80020ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002104 <StartTsHandlerTask+0xc4>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 80020d0:	4b08      	ldr	r3, [pc, #32]	@ (80020f4 <StartTsHandlerTask+0xb4>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <StartTsHandlerTask+0xa0>
      screenPressed = 1;
 80020d8:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <StartTsHandlerTask+0xb8>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e002      	b.n	80020e6 <StartTsHandlerTask+0xa6>
    }
    else {
      screenPressed = 0;
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <StartTsHandlerTask+0xb8>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 80020e6:	200a      	movs	r0, #10
 80020e8:	f009 ff6b 	bl	800bfc2 <osDelay>
    if (!gameStarted)
 80020ec:	e7ac      	b.n	8002048 <StartTsHandlerTask+0x8>
 80020ee:	bf00      	nop
 80020f0:	200002ac 	.word	0x200002ac
 80020f4:	200001f0 	.word	0x200001f0
 80020f8:	2000021c 	.word	0x2000021c
 80020fc:	200002b4 	.word	0x200002b4
 8002100:	ff81cd4b 	.word	0xff81cd4b
 8002104:	200002b0 	.word	0x200002b0
 8002108:	200003c8 	.word	0x200003c8

0800210c <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 800210c:	b490      	push	{r4, r7}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4604      	mov	r4, r0
 8002114:	4608      	mov	r0, r1
 8002116:	4611      	mov	r1, r2
 8002118:	461a      	mov	r2, r3
 800211a:	4623      	mov	r3, r4
 800211c:	71fb      	strb	r3, [r7, #7]
 800211e:	4603      	mov	r3, r0
 8002120:	71bb      	strb	r3, [r7, #6]
 8002122:	460b      	mov	r3, r1
 8002124:	717b      	strb	r3, [r7, #5]
 8002126:	4613      	mov	r3, r2
 8002128:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 800212a:	79fa      	ldrb	r2, [r7, #7]
 800212c:	797b      	ldrb	r3, [r7, #5]
 800212e:	429a      	cmp	r2, r3
 8002130:	d101      	bne.n	8002136 <whatBodyPart+0x2a>
    return BottomTop;
 8002132:	2302      	movs	r3, #2
 8002134:	e046      	b.n	80021c4 <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 8002136:	79ba      	ldrb	r2, [r7, #6]
 8002138:	793b      	ldrb	r3, [r7, #4]
 800213a:	429a      	cmp	r2, r3
 800213c:	d101      	bne.n	8002142 <whatBodyPart+0x36>
    return LeftRight;
 800213e:	2303      	movs	r3, #3
 8002140:	e040      	b.n	80021c4 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 8002142:	79fa      	ldrb	r2, [r7, #7]
 8002144:	797b      	ldrb	r3, [r7, #5]
 8002146:	429a      	cmp	r2, r3
 8002148:	d20b      	bcs.n	8002162 <whatBodyPart+0x56>
 800214a:	79ba      	ldrb	r2, [r7, #6]
 800214c:	793b      	ldrb	r3, [r7, #4]
 800214e:	429a      	cmp	r2, r3
 8002150:	d907      	bls.n	8002162 <whatBodyPart+0x56>
    if (missingX == frontX)
 8002152:	7c3a      	ldrb	r2, [r7, #16]
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	429a      	cmp	r2, r3
 8002158:	d101      	bne.n	800215e <whatBodyPart+0x52>
      return BottomRight;
 800215a:	2301      	movs	r3, #1
 800215c:	e032      	b.n	80021c4 <whatBodyPart+0xb8>
    else
      return LeftTop;
 800215e:	2304      	movs	r3, #4
 8002160:	e030      	b.n	80021c4 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 8002162:	79fa      	ldrb	r2, [r7, #7]
 8002164:	797b      	ldrb	r3, [r7, #5]
 8002166:	429a      	cmp	r2, r3
 8002168:	d20b      	bcs.n	8002182 <whatBodyPart+0x76>
 800216a:	79ba      	ldrb	r2, [r7, #6]
 800216c:	793b      	ldrb	r3, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	d207      	bcs.n	8002182 <whatBodyPart+0x76>
    if (missingX == frontX)
 8002172:	7c3a      	ldrb	r2, [r7, #16]
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	429a      	cmp	r2, r3
 8002178:	d101      	bne.n	800217e <whatBodyPart+0x72>
      return RightTop;
 800217a:	2305      	movs	r3, #5
 800217c:	e022      	b.n	80021c4 <whatBodyPart+0xb8>
    else
      return BottomLeft;
 800217e:	2300      	movs	r3, #0
 8002180:	e020      	b.n	80021c4 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 8002182:	79fa      	ldrb	r2, [r7, #7]
 8002184:	797b      	ldrb	r3, [r7, #5]
 8002186:	429a      	cmp	r2, r3
 8002188:	d90b      	bls.n	80021a2 <whatBodyPart+0x96>
 800218a:	79ba      	ldrb	r2, [r7, #6]
 800218c:	793b      	ldrb	r3, [r7, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	d207      	bcs.n	80021a2 <whatBodyPart+0x96>
    if (missingX == frontX)
 8002192:	7c3a      	ldrb	r2, [r7, #16]
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	429a      	cmp	r2, r3
 8002198:	d101      	bne.n	800219e <whatBodyPart+0x92>
      return LeftTop;
 800219a:	2304      	movs	r3, #4
 800219c:	e012      	b.n	80021c4 <whatBodyPart+0xb8>
    else
      return BottomRight;
 800219e:	2301      	movs	r3, #1
 80021a0:	e010      	b.n	80021c4 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 80021a2:	79fa      	ldrb	r2, [r7, #7]
 80021a4:	797b      	ldrb	r3, [r7, #5]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d90b      	bls.n	80021c2 <whatBodyPart+0xb6>
 80021aa:	79ba      	ldrb	r2, [r7, #6]
 80021ac:	793b      	ldrb	r3, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d907      	bls.n	80021c2 <whatBodyPart+0xb6>
    if (missingX == frontX)
 80021b2:	7c3a      	ldrb	r2, [r7, #16]
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d101      	bne.n	80021be <whatBodyPart+0xb2>
      return BottomLeft;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e002      	b.n	80021c4 <whatBodyPart+0xb8>
    else
      return RightTop;
 80021be:	2305      	movs	r3, #5
 80021c0:	e000      	b.n	80021c4 <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 80021c2:	2302      	movs	r3, #2
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc90      	pop	{r4, r7}
 80021cc:	4770      	bx	lr
	...

080021d0 <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	460a      	mov	r2, r1
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	4613      	mov	r3, r2
 80021de:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 80021e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <isSnakePosition+0x88>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	79fa      	ldrb	r2, [r7, #7]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d106      	bne.n	80021f8 <isSnakePosition+0x28>
 80021ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <isSnakePosition+0x88>)
 80021ec:	785b      	ldrb	r3, [r3, #1]
 80021ee:	79ba      	ldrb	r2, [r7, #6]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d101      	bne.n	80021f8 <isSnakePosition+0x28>
    return 1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e029      	b.n	800224c <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e013      	b.n	8002226 <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 80021fe:	4a17      	ldr	r2, [pc, #92]	@ (800225c <isSnakePosition+0x8c>)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002206:	79fa      	ldrb	r2, [r7, #7]
 8002208:	429a      	cmp	r2, r3
 800220a:	d109      	bne.n	8002220 <isSnakePosition+0x50>
 800220c:	4a13      	ldr	r2, [pc, #76]	@ (800225c <isSnakePosition+0x8c>)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4413      	add	r3, r2
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	79ba      	ldrb	r2, [r7, #6]
 8002218:	429a      	cmp	r2, r3
 800221a:	d101      	bne.n	8002220 <isSnakePosition+0x50>
      return 1;
 800221c:	2301      	movs	r3, #1
 800221e:	e015      	b.n	800224c <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3301      	adds	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b0e      	ldr	r3, [pc, #56]	@ (8002260 <isSnakePosition+0x90>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4293      	cmp	r3, r2
 8002230:	dbe5      	blt.n	80021fe <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 8002232:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <isSnakePosition+0x94>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	79fa      	ldrb	r2, [r7, #7]
 8002238:	429a      	cmp	r2, r3
 800223a:	d106      	bne.n	800224a <isSnakePosition+0x7a>
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <isSnakePosition+0x94>)
 800223e:	785b      	ldrb	r3, [r3, #1]
 8002240:	79ba      	ldrb	r2, [r7, #6]
 8002242:	429a      	cmp	r2, r3
 8002244:	d101      	bne.n	800224a <isSnakePosition+0x7a>
    return 1;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <isSnakePosition+0x7c>

  return 0;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	20000008 	.word	0x20000008
 800225c:	200002b8 	.word	0x200002b8
 8002260:	200002a4 	.word	0x200002a4
 8002264:	2000000c 	.word	0x2000000c

08002268 <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
 8002272:	460b      	mov	r3, r1
 8002274:	71bb      	strb	r3, [r7, #6]
 8002276:	4613      	mov	r3, r2
 8002278:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	e019      	b.n	80022b4 <isApplePosition+0x4c>
    if (i == appleIndex)
 8002280:	797b      	ldrb	r3, [r7, #5]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d011      	beq.n	80022ac <isApplePosition+0x44>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	4910      	ldr	r1, [pc, #64]	@ (80022cc <isApplePosition+0x64>)
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 8002292:	4293      	cmp	r3, r2
 8002294:	d10b      	bne.n	80022ae <isApplePosition+0x46>
 8002296:	79ba      	ldrb	r2, [r7, #6]
 8002298:	490c      	ldr	r1, [pc, #48]	@ (80022cc <isApplePosition+0x64>)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	440b      	add	r3, r1
 80022a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d102      	bne.n	80022ae <isApplePosition+0x46>
      return 1;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e009      	b.n	80022c0 <isApplePosition+0x58>
      continue;
 80022ac:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3301      	adds	r3, #1
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	2304      	movs	r3, #4
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4293      	cmp	r3, r2
 80022bc:	dbe0      	blt.n	8002280 <isApplePosition+0x18>
  }

  return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	200003ac 	.word	0x200003ac

080022d0 <restartGame>:

void restartGame()
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  gameOver = 0;
 80022d6:	4b3c      	ldr	r3, [pc, #240]	@ (80023c8 <restartGame+0xf8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
  lastMove = 1;
 80022dc:	4b3b      	ldr	r3, [pc, #236]	@ (80023cc <restartGame+0xfc>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
  snakeSize = 0;
 80022e2:	4b3b      	ldr	r3, [pc, #236]	@ (80023d0 <restartGame+0x100>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
  speed = initSpeed;
 80022e8:	2203      	movs	r2, #3
 80022ea:	4b3a      	ldr	r3, [pc, #232]	@ (80023d4 <restartGame+0x104>)
 80022ec:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 80022ee:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <restartGame+0x108>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 80022f4:	4b38      	ldr	r3, [pc, #224]	@ (80023d8 <restartGame+0x108>)
 80022f6:	2206      	movs	r2, #6
 80022f8:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 80022fa:	4b38      	ldr	r3, [pc, #224]	@ (80023dc <restartGame+0x10c>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 8002300:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <restartGame+0x10c>)
 8002302:	2207      	movs	r2, #7
 8002304:	705a      	strb	r2, [r3, #1]
  direction = Up;
 8002306:	4b36      	ldr	r3, [pc, #216]	@ (80023e0 <restartGame+0x110>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 800230c:	4b35      	ldr	r3, [pc, #212]	@ (80023e4 <restartGame+0x114>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 8002312:	4b35      	ldr	r3, [pc, #212]	@ (80023e8 <restartGame+0x118>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	e047      	b.n	80023ae <restartGame+0xde>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 800231e:	f00c f8d7 	bl	800e4d0 <rand>
 8002322:	4603      	mov	r3, r0
 8002324:	220f      	movs	r2, #15
 8002326:	fb93 f1f2 	sdiv	r1, r3, r2
 800232a:	fb01 f202 	mul.w	r2, r1, r2
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	b259      	sxtb	r1, r3
 8002332:	4a2e      	ldr	r2, [pc, #184]	@ (80023ec <restartGame+0x11c>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 800233a:	f00c f8c9 	bl	800e4d0 <rand>
 800233e:	4603      	mov	r3, r0
 8002340:	2208      	movs	r2, #8
 8002342:	fb93 f1f2 	sdiv	r1, r3, r2
 8002346:	fb01 f202 	mul.w	r2, r1, r2
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	b259      	sxtb	r1, r3
 800234e:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <restartGame+0x11c>)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	460a      	mov	r2, r1
 8002358:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 800235a:	4a24      	ldr	r2, [pc, #144]	@ (80023ec <restartGame+0x11c>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4921      	ldr	r1, [pc, #132]	@ (80023ec <restartGame+0x11c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	440b      	add	r3, r1
 800236c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7ff ff2b 	bl	80021d0 <isSnakePosition>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ce      	bne.n	800231e <restartGame+0x4e>
 8002380:	4a1a      	ldr	r2, [pc, #104]	@ (80023ec <restartGame+0x11c>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8002388:	b2d8      	uxtb	r0, r3
 800238a:	4a18      	ldr	r2, [pc, #96]	@ (80023ec <restartGame+0x11c>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f7ff ff63 	bl	8002268 <isApplePosition>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1ba      	bne.n	800231e <restartGame+0x4e>
  for (int i = 0; i < NBApple; i++) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3301      	adds	r3, #1
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	2304      	movs	r3, #4
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4293      	cmp	r3, r2
 80023b6:	dbb2      	blt.n	800231e <restartGame+0x4e>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80023b8:	480d      	ldr	r0, [pc, #52]	@ (80023f0 <restartGame+0x120>)
 80023ba:	f001 fe3d 	bl	8004038 <BSP_LCD_Clear>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200002b4 	.word	0x200002b4
 80023cc:	20000004 	.word	0x20000004
 80023d0:	200002a4 	.word	0x200002a4
 80023d4:	20000000 	.word	0x20000000
 80023d8:	20000008 	.word	0x20000008
 80023dc:	2000000c 	.word	0x2000000c
 80023e0:	20000228 	.word	0x20000228
 80023e4:	20000229 	.word	0x20000229
 80023e8:	20000001 	.word	0x20000001
 80023ec:	200003ac 	.word	0x200003ac
 80023f0:	ff81cd4b 	.word	0xff81cd4b

080023f4 <displayGameStatus>:

void displayGameStatus()
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  if (gameOver) {
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <displayGameStatus+0xa4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002400:	4826      	ldr	r0, [pc, #152]	@ (800249c <displayGameStatus+0xa8>)
 8002402:	f001 fdcd 	bl	8003fa0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002406:	4826      	ldr	r0, [pc, #152]	@ (80024a0 <displayGameStatus+0xac>)
 8002408:	f001 fdfc 	bl	8004004 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 800240c:	2301      	movs	r3, #1
 800240e:	4a25      	ldr	r2, [pc, #148]	@ (80024a4 <displayGameStatus+0xb0>)
 8002410:	2164      	movs	r1, #100	@ 0x64
 8002412:	2000      	movs	r0, #0
 8002414:	f001 fe7c 	bl	8004110 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002418:	4823      	ldr	r0, [pc, #140]	@ (80024a8 <displayGameStatus+0xb4>)
 800241a:	f001 fdf3 	bl	8004004 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 800241e:	2301      	movs	r3, #1
 8002420:	4a22      	ldr	r2, [pc, #136]	@ (80024ac <displayGameStatus+0xb8>)
 8002422:	2182      	movs	r1, #130	@ 0x82
 8002424:	2000      	movs	r0, #0
 8002426:	f001 fe73 	bl	8004110 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 800242a:	e032      	b.n	8002492 <displayGameStatus+0x9e>
  else if (gamePaused) {
 800242c:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <displayGameStatus+0xbc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002434:	4819      	ldr	r0, [pc, #100]	@ (800249c <displayGameStatus+0xa8>)
 8002436:	f001 fdb3 	bl	8003fa0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800243a:	4819      	ldr	r0, [pc, #100]	@ (80024a0 <displayGameStatus+0xac>)
 800243c:	f001 fde2 	bl	8004004 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8002440:	2301      	movs	r3, #1
 8002442:	4a1c      	ldr	r2, [pc, #112]	@ (80024b4 <displayGameStatus+0xc0>)
 8002444:	2164      	movs	r1, #100	@ 0x64
 8002446:	2000      	movs	r0, #0
 8002448:	f001 fe62 	bl	8004110 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 800244c:	4816      	ldr	r0, [pc, #88]	@ (80024a8 <displayGameStatus+0xb4>)
 800244e:	f001 fdd9 	bl	8004004 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 8002452:	2301      	movs	r3, #1
 8002454:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <displayGameStatus+0xc4>)
 8002456:	2182      	movs	r1, #130	@ 0x82
 8002458:	2000      	movs	r0, #0
 800245a:	f001 fe59 	bl	8004110 <BSP_LCD_DisplayStringAt>
}
 800245e:	e018      	b.n	8002492 <displayGameStatus+0x9e>
  else if (!gameStarted) {
 8002460:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <displayGameStatus+0xc8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d114      	bne.n	8002492 <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002468:	480c      	ldr	r0, [pc, #48]	@ (800249c <displayGameStatus+0xa8>)
 800246a:	f001 fd99 	bl	8003fa0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800246e:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <displayGameStatus+0xac>)
 8002470:	f001 fdc8 	bl	8004004 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 8002474:	2301      	movs	r3, #1
 8002476:	4a12      	ldr	r2, [pc, #72]	@ (80024c0 <displayGameStatus+0xcc>)
 8002478:	2164      	movs	r1, #100	@ 0x64
 800247a:	2000      	movs	r0, #0
 800247c:	f001 fe48 	bl	8004110 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002480:	4809      	ldr	r0, [pc, #36]	@ (80024a8 <displayGameStatus+0xb4>)
 8002482:	f001 fdbf 	bl	8004004 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 8002486:	2301      	movs	r3, #1
 8002488:	4a0e      	ldr	r2, [pc, #56]	@ (80024c4 <displayGameStatus+0xd0>)
 800248a:	2182      	movs	r1, #130	@ 0x82
 800248c:	2000      	movs	r0, #0
 800248e:	f001 fe3f 	bl	8004110 <BSP_LCD_DisplayStringAt>
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200002b4 	.word	0x200002b4
 800249c:	ffa52a2a 	.word	0xffa52a2a
 80024a0:	20000038 	.word	0x20000038
 80024a4:	0800fa3c 	.word	0x0800fa3c
 80024a8:	20000040 	.word	0x20000040
 80024ac:	0800fa48 	.word	0x0800fa48
 80024b0:	200002b0 	.word	0x200002b0
 80024b4:	0800fa64 	.word	0x0800fa64
 80024b8:	0800fa70 	.word	0x0800fa70
 80024bc:	200002ac 	.word	0x200002ac
 80024c0:	0800fa8c 	.word	0x0800fa8c
 80024c4:	0800fa98 	.word	0x0800fa98

080024c8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80024d2:	20c8      	movs	r0, #200	@ 0xc8
 80024d4:	f001 fc50 	bl	8003d78 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80024d8:	f000 fa7a 	bl	80029d0 <ft5336_I2C_InitializeIfRequired>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800250c:	2300      	movs	r3, #0
 800250e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002510:	f000 fa5e 	bl	80029d0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002514:	2300      	movs	r3, #0
 8002516:	73fb      	strb	r3, [r7, #15]
 8002518:	e010      	b.n	800253c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	21a8      	movs	r1, #168	@ 0xa8
 8002520:	4618      	mov	r0, r3
 8002522:	f001 fc0b 	bl	8003d3c <TS_IO_Read>
 8002526:	4603      	mov	r3, r0
 8002528:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800252a:	7b7b      	ldrb	r3, [r7, #13]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b51      	cmp	r3, #81	@ 0x51
 8002530:	d101      	bne.n	8002536 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8002532:	2301      	movs	r3, #1
 8002534:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3301      	adds	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d802      	bhi.n	8002548 <ft5336_ReadID+0x4e>
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0e8      	beq.n	800251a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002548:	7b7b      	ldrb	r3, [r7, #13]
 800254a:	b2db      	uxtb	r3, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fa45 	bl	80029f0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 f933 	bl	80027d4 <ft5336_TS_DisableIT>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2102      	movs	r1, #2
 800258c:	4618      	mov	r0, r3
 800258e:	f001 fbd5 	bl	8003d3c <TS_IO_Read>
 8002592:	4603      	mov	r3, r0
 8002594:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d901      	bls.n	80025ae <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <ft5336_TS_DetectTouch+0x50>)
 80025b4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <ft5336_TS_DetectTouch+0x50>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	b2db      	uxtb	r3, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	2000066c 	.word	0x2000066c

080025cc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80025ee:	4b6d      	ldr	r3, [pc, #436]	@ (80027a4 <ft5336_TS_GetXY+0x1d8>)
 80025f0:	789a      	ldrb	r2, [r3, #2]
 80025f2:	4b6c      	ldr	r3, [pc, #432]	@ (80027a4 <ft5336_TS_GetXY+0x1d8>)
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	f080 80cf 	bcs.w	800279a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80025fc:	4b69      	ldr	r3, [pc, #420]	@ (80027a4 <ft5336_TS_GetXY+0x1d8>)
 80025fe:	789b      	ldrb	r3, [r3, #2]
 8002600:	2b09      	cmp	r3, #9
 8002602:	d871      	bhi.n	80026e8 <ft5336_TS_GetXY+0x11c>
 8002604:	a201      	add	r2, pc, #4	@ (adr r2, 800260c <ft5336_TS_GetXY+0x40>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	08002635 	.word	0x08002635
 8002610:	08002647 	.word	0x08002647
 8002614:	08002659 	.word	0x08002659
 8002618:	0800266b 	.word	0x0800266b
 800261c:	0800267d 	.word	0x0800267d
 8002620:	0800268f 	.word	0x0800268f
 8002624:	080026a1 	.word	0x080026a1
 8002628:	080026b3 	.word	0x080026b3
 800262c:	080026c5 	.word	0x080026c5
 8002630:	080026d7 	.word	0x080026d7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8002634:	2304      	movs	r3, #4
 8002636:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002638:	2303      	movs	r3, #3
 800263a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800263c:	2306      	movs	r3, #6
 800263e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002640:	2305      	movs	r3, #5
 8002642:	753b      	strb	r3, [r7, #20]
      break;
 8002644:	e051      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8002646:	230a      	movs	r3, #10
 8002648:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800264a:	2309      	movs	r3, #9
 800264c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800264e:	230c      	movs	r3, #12
 8002650:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8002652:	230b      	movs	r3, #11
 8002654:	753b      	strb	r3, [r7, #20]
      break;
 8002656:	e048      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002658:	2310      	movs	r3, #16
 800265a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800265c:	230f      	movs	r3, #15
 800265e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002660:	2312      	movs	r3, #18
 8002662:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8002664:	2311      	movs	r3, #17
 8002666:	753b      	strb	r3, [r7, #20]
      break;
 8002668:	e03f      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800266a:	2316      	movs	r3, #22
 800266c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800266e:	2315      	movs	r3, #21
 8002670:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8002672:	2318      	movs	r3, #24
 8002674:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8002676:	2317      	movs	r3, #23
 8002678:	753b      	strb	r3, [r7, #20]
      break;
 800267a:	e036      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800267c:	231c      	movs	r3, #28
 800267e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002680:	231b      	movs	r3, #27
 8002682:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8002684:	231e      	movs	r3, #30
 8002686:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002688:	231d      	movs	r3, #29
 800268a:	753b      	strb	r3, [r7, #20]
      break;
 800268c:	e02d      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800268e:	2322      	movs	r3, #34	@ 0x22
 8002690:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8002692:	2321      	movs	r3, #33	@ 0x21
 8002694:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8002696:	2324      	movs	r3, #36	@ 0x24
 8002698:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800269a:	2323      	movs	r3, #35	@ 0x23
 800269c:	753b      	strb	r3, [r7, #20]
      break;
 800269e:	e024      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80026a0:	2328      	movs	r3, #40	@ 0x28
 80026a2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80026a4:	2327      	movs	r3, #39	@ 0x27
 80026a6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80026a8:	232a      	movs	r3, #42	@ 0x2a
 80026aa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80026ac:	2329      	movs	r3, #41	@ 0x29
 80026ae:	753b      	strb	r3, [r7, #20]
      break;
 80026b0:	e01b      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80026b2:	232e      	movs	r3, #46	@ 0x2e
 80026b4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80026b6:	232d      	movs	r3, #45	@ 0x2d
 80026b8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80026ba:	2330      	movs	r3, #48	@ 0x30
 80026bc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80026be:	232f      	movs	r3, #47	@ 0x2f
 80026c0:	753b      	strb	r3, [r7, #20]
      break;
 80026c2:	e012      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80026c4:	2334      	movs	r3, #52	@ 0x34
 80026c6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80026c8:	2333      	movs	r3, #51	@ 0x33
 80026ca:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80026cc:	2336      	movs	r3, #54	@ 0x36
 80026ce:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80026d0:	2335      	movs	r3, #53	@ 0x35
 80026d2:	753b      	strb	r3, [r7, #20]
      break;
 80026d4:	e009      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80026d6:	233a      	movs	r3, #58	@ 0x3a
 80026d8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80026da:	2339      	movs	r3, #57	@ 0x39
 80026dc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80026de:	233c      	movs	r3, #60	@ 0x3c
 80026e0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80026e2:	233b      	movs	r3, #59	@ 0x3b
 80026e4:	753b      	strb	r3, [r7, #20]
      break;
 80026e6:	e000      	b.n	80026ea <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80026e8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80026ea:	89fb      	ldrh	r3, [r7, #14]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	7dfa      	ldrb	r2, [r7, #23]
 80026f0:	4611      	mov	r1, r2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 fb22 	bl	8003d3c <TS_IO_Read>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4b29      	ldr	r3, [pc, #164]	@ (80027a8 <ft5336_TS_GetXY+0x1dc>)
 8002704:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002706:	89fb      	ldrh	r3, [r7, #14]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	7dba      	ldrb	r2, [r7, #22]
 800270c:	4611      	mov	r1, r2
 800270e:	4618      	mov	r0, r3
 8002710:	f001 fb14 	bl	8003d3c <TS_IO_Read>
 8002714:	4603      	mov	r3, r0
 8002716:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002722:	b21a      	sxth	r2, r3
 8002724:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <ft5336_TS_GetXY+0x1dc>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	b21b      	sxth	r3, r3
 800272a:	4313      	orrs	r3, r2
 800272c:	b21b      	sxth	r3, r3
 800272e:	b29a      	uxth	r2, r3
 8002730:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <ft5336_TS_GetXY+0x1dc>)
 8002732:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8002734:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <ft5336_TS_GetXY+0x1dc>)
 8002736:	881a      	ldrh	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800273c:	89fb      	ldrh	r3, [r7, #14]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	7d7a      	ldrb	r2, [r7, #21]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f001 faf9 	bl	8003d3c <TS_IO_Read>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	b2db      	uxtb	r3, r3
 8002752:	461a      	mov	r2, r3
 8002754:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <ft5336_TS_GetXY+0x1dc>)
 8002756:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002758:	89fb      	ldrh	r3, [r7, #14]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	7d3a      	ldrb	r2, [r7, #20]
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f001 faeb 	bl	8003d3c <TS_IO_Read>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002774:	b21a      	sxth	r2, r3
 8002776:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <ft5336_TS_GetXY+0x1dc>)
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b21b      	sxth	r3, r3
 800277c:	4313      	orrs	r3, r2
 800277e:	b21b      	sxth	r3, r3
 8002780:	b29a      	uxth	r2, r3
 8002782:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <ft5336_TS_GetXY+0x1dc>)
 8002784:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <ft5336_TS_GetXY+0x1dc>)
 8002788:	881a      	ldrh	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800278e:	4b05      	ldr	r3, [pc, #20]	@ (80027a4 <ft5336_TS_GetXY+0x1d8>)
 8002790:	789b      	ldrb	r3, [r3, #2]
 8002792:	3301      	adds	r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <ft5336_TS_GetXY+0x1d8>)
 8002798:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000066c 	.word	0x2000066c
 80027a8:	20000670 	.word	0x20000670

080027ac <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	21a4      	movs	r1, #164	@ 0xa4
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fa9e 	bl	8003d08 <TS_IO_Write>
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	21a4      	movs	r1, #164	@ 0xa4
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fa8a 	bl	8003d08 <TS_IO_Write>
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	6039      	str	r1, [r7, #0]
 8002834:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fa7b 	bl	8003d3c <TS_IO_Read>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	601a      	str	r2, [r3, #0]
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4603      	mov	r3, r0
 800286a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800287c:	4b4d      	ldr	r3, [pc, #308]	@ (80029b4 <ft5336_TS_GetTouchInfo+0x158>)
 800287e:	785b      	ldrb	r3, [r3, #1]
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	4293      	cmp	r3, r2
 8002886:	f080 8090 	bcs.w	80029aa <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b09      	cmp	r3, #9
 800288e:	d85d      	bhi.n	800294c <ft5336_TS_GetTouchInfo+0xf0>
 8002890:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <ft5336_TS_GetTouchInfo+0x3c>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028c1 	.word	0x080028c1
 800289c:	080028cf 	.word	0x080028cf
 80028a0:	080028dd 	.word	0x080028dd
 80028a4:	080028eb 	.word	0x080028eb
 80028a8:	080028f9 	.word	0x080028f9
 80028ac:	08002907 	.word	0x08002907
 80028b0:	08002915 	.word	0x08002915
 80028b4:	08002923 	.word	0x08002923
 80028b8:	08002931 	.word	0x08002931
 80028bc:	0800293f 	.word	0x0800293f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80028c0:	2303      	movs	r3, #3
 80028c2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80028c4:	2307      	movs	r3, #7
 80028c6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80028c8:	2308      	movs	r3, #8
 80028ca:	757b      	strb	r3, [r7, #21]
      break;
 80028cc:	e03f      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80028ce:	2309      	movs	r3, #9
 80028d0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80028d2:	230d      	movs	r3, #13
 80028d4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80028d6:	230e      	movs	r3, #14
 80028d8:	757b      	strb	r3, [r7, #21]
      break;
 80028da:	e038      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80028dc:	230f      	movs	r3, #15
 80028de:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80028e0:	2313      	movs	r3, #19
 80028e2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80028e4:	2314      	movs	r3, #20
 80028e6:	757b      	strb	r3, [r7, #21]
      break;
 80028e8:	e031      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80028ea:	2315      	movs	r3, #21
 80028ec:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80028ee:	2319      	movs	r3, #25
 80028f0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80028f2:	231a      	movs	r3, #26
 80028f4:	757b      	strb	r3, [r7, #21]
      break;
 80028f6:	e02a      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80028f8:	231b      	movs	r3, #27
 80028fa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80028fc:	231f      	movs	r3, #31
 80028fe:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002900:	2320      	movs	r3, #32
 8002902:	757b      	strb	r3, [r7, #21]
      break;
 8002904:	e023      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8002906:	2321      	movs	r3, #33	@ 0x21
 8002908:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800290a:	2325      	movs	r3, #37	@ 0x25
 800290c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 800290e:	2326      	movs	r3, #38	@ 0x26
 8002910:	757b      	strb	r3, [r7, #21]
      break;
 8002912:	e01c      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8002914:	2327      	movs	r3, #39	@ 0x27
 8002916:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002918:	232b      	movs	r3, #43	@ 0x2b
 800291a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800291c:	232c      	movs	r3, #44	@ 0x2c
 800291e:	757b      	strb	r3, [r7, #21]
      break;
 8002920:	e015      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8002922:	232d      	movs	r3, #45	@ 0x2d
 8002924:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8002926:	2331      	movs	r3, #49	@ 0x31
 8002928:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800292a:	2332      	movs	r3, #50	@ 0x32
 800292c:	757b      	strb	r3, [r7, #21]
      break;
 800292e:	e00e      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002930:	2333      	movs	r3, #51	@ 0x33
 8002932:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8002934:	2337      	movs	r3, #55	@ 0x37
 8002936:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002938:	2338      	movs	r3, #56	@ 0x38
 800293a:	757b      	strb	r3, [r7, #21]
      break;
 800293c:	e007      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800293e:	2339      	movs	r3, #57	@ 0x39
 8002940:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8002942:	233d      	movs	r3, #61	@ 0x3d
 8002944:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8002946:	233e      	movs	r3, #62	@ 0x3e
 8002948:	757b      	strb	r3, [r7, #21]
      break;
 800294a:	e000      	b.n	800294e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800294c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	7dfa      	ldrb	r2, [r7, #23]
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f001 f9f0 	bl	8003d3c <TS_IO_Read>
 800295c:	4603      	mov	r3, r0
 800295e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002960:	7d3b      	ldrb	r3, [r7, #20]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	119b      	asrs	r3, r3, #6
 8002966:	f003 0203 	and.w	r2, r3, #3
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800296e:	89fb      	ldrh	r3, [r7, #14]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	7dba      	ldrb	r2, [r7, #22]
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f001 f9e0 	bl	8003d3c <TS_IO_Read>
 800297c:	4603      	mov	r3, r0
 800297e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8002980:	7d3b      	ldrb	r3, [r7, #20]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800298a:	89fb      	ldrh	r3, [r7, #14]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	7d7a      	ldrb	r2, [r7, #21]
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 f9d2 	bl	8003d3c <TS_IO_Read>
 8002998:	4603      	mov	r3, r0
 800299a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800299c:	7d3b      	ldrb	r3, [r7, #20]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	111b      	asrs	r3, r3, #4
 80029a2:	f003 0204 	and.w	r2, r3, #4
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	2000066c 	.word	0x2000066c

080029b8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <ft5336_Get_I2C_InitializedStatus+0x14>)
 80029be:	781b      	ldrb	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	2000066c 	.word	0x2000066c

080029d0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80029d4:	f7ff fff0 	bl	80029b8 <ft5336_Get_I2C_InitializedStatus>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80029de:	f001 f989 	bl	8003cf4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80029e2:	4b02      	ldr	r3, [pc, #8]	@ (80029ec <ft5336_I2C_InitializeIfRequired+0x1c>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
  }
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	2000066c 	.word	0x2000066c

080029f0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80029fe:	68fb      	ldr	r3, [r7, #12]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	@ 0x40
 8002a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a22:	4baf      	ldr	r3, [pc, #700]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4aae      	ldr	r2, [pc, #696]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a28:	f043 0310 	orr.w	r3, r3, #16
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4bac      	ldr	r3, [pc, #688]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a3a:	4ba9      	ldr	r3, [pc, #676]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4aa8      	ldr	r2, [pc, #672]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4ba6      	ldr	r3, [pc, #664]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	4ba3      	ldr	r3, [pc, #652]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	4aa2      	ldr	r2, [pc, #648]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a58:	f043 0302 	orr.w	r3, r3, #2
 8002a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5e:	4ba0      	ldr	r3, [pc, #640]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	623b      	str	r3, [r7, #32]
 8002a68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6a:	4b9d      	ldr	r3, [pc, #628]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	4a9c      	ldr	r2, [pc, #624]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a70:	f043 0308 	orr.w	r3, r3, #8
 8002a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a76:	4b9a      	ldr	r3, [pc, #616]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a82:	4b97      	ldr	r3, [pc, #604]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	4a96      	ldr	r2, [pc, #600]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8e:	4b94      	ldr	r3, [pc, #592]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	61bb      	str	r3, [r7, #24]
 8002a98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b91      	ldr	r3, [pc, #580]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a90      	ldr	r2, [pc, #576]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b8e      	ldr	r3, [pc, #568]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a8a      	ldr	r2, [pc, #552]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002ab8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b88      	ldr	r3, [pc, #544]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002aca:	4b85      	ldr	r3, [pc, #532]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a84      	ldr	r2, [pc, #528]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b82      	ldr	r3, [pc, #520]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aee:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002afa:	4b79      	ldr	r3, [pc, #484]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	4a78      	ldr	r2, [pc, #480]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002b00:	f043 0320 	orr.w	r3, r3, #32
 8002b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b06:	4b76      	ldr	r3, [pc, #472]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b12:	4b73      	ldr	r3, [pc, #460]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	4a72      	ldr	r2, [pc, #456]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1e:	4b70      	ldr	r3, [pc, #448]	@ (8002ce0 <MX_GPIO_Init+0x2d4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2160      	movs	r1, #96	@ 0x60
 8002b2e:	486d      	ldr	r0, [pc, #436]	@ (8002ce4 <MX_GPIO_Init+0x2d8>)
 8002b30:	f004 ffe2 	bl	8007af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b34:	2201      	movs	r2, #1
 8002b36:	2120      	movs	r1, #32
 8002b38:	486b      	ldr	r0, [pc, #428]	@ (8002ce8 <MX_GPIO_Init+0x2dc>)
 8002b3a:	f004 ffdd 	bl	8007af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2108      	movs	r1, #8
 8002b42:	4869      	ldr	r0, [pc, #420]	@ (8002ce8 <MX_GPIO_Init+0x2dc>)
 8002b44:	f004 ffd8 	bl	8007af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002b48:	2201      	movs	r2, #1
 8002b4a:	2108      	movs	r1, #8
 8002b4c:	4867      	ldr	r0, [pc, #412]	@ (8002cec <MX_GPIO_Init+0x2e0>)
 8002b4e:	f004 ffd3 	bl	8007af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002b52:	2201      	movs	r2, #1
 8002b54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b58:	4865      	ldr	r0, [pc, #404]	@ (8002cf0 <MX_GPIO_Init+0x2e4>)
 8002b5a:	f004 ffcd 	bl	8007af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002b64:	4863      	ldr	r0, [pc, #396]	@ (8002cf4 <MX_GPIO_Init+0x2e8>)
 8002b66:	f004 ffc7 	bl	8007af8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	21c8      	movs	r1, #200	@ 0xc8
 8002b6e:	4862      	ldr	r0, [pc, #392]	@ (8002cf8 <MX_GPIO_Init+0x2ec>)
 8002b70:	f004 ffc2 	bl	8007af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002b74:	2308      	movs	r3, #8
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b84:	4619      	mov	r1, r3
 8002b86:	4857      	ldr	r0, [pc, #348]	@ (8002ce4 <MX_GPIO_Init+0x2d8>)
 8002b88:	f004 fcfe 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002b9c:	2309      	movs	r3, #9
 8002b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ba0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	484f      	ldr	r0, [pc, #316]	@ (8002ce4 <MX_GPIO_Init+0x2d8>)
 8002ba8:	f004 fcee 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002bac:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bbe:	230b      	movs	r3, #11
 8002bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	484b      	ldr	r0, [pc, #300]	@ (8002cf8 <MX_GPIO_Init+0x2ec>)
 8002bca:	f004 fcdd 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002bce:	f643 0323 	movw	r3, #14371	@ 0x3823
 8002bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002be0:	230a      	movs	r3, #10
 8002be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002be8:	4619      	mov	r1, r3
 8002bea:	4844      	ldr	r0, [pc, #272]	@ (8002cfc <MX_GPIO_Init+0x2f0>)
 8002bec:	f004 fccc 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002c00:	2308      	movs	r3, #8
 8002c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002c04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4837      	ldr	r0, [pc, #220]	@ (8002ce8 <MX_GPIO_Init+0x2dc>)
 8002c0c:	f004 fcbc 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002c10:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002c22:	230c      	movs	r3, #12
 8002c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4834      	ldr	r0, [pc, #208]	@ (8002d00 <MX_GPIO_Init+0x2f4>)
 8002c2e:	f004 fcab 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002c32:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c44:	4619      	mov	r1, r3
 8002c46:	482f      	ldr	r0, [pc, #188]	@ (8002d04 <MX_GPIO_Init+0x2f8>)
 8002c48:	f004 fc9e 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002c4c:	2360      	movs	r3, #96	@ 0x60
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c50:	2301      	movs	r3, #1
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c60:	4619      	mov	r1, r3
 8002c62:	4820      	ldr	r0, [pc, #128]	@ (8002ce4 <MX_GPIO_Init+0x2d8>)
 8002c64:	f004 fc90 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002c68:	2340      	movs	r3, #64	@ 0x40
 8002c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002c78:	230a      	movs	r3, #10
 8002c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002c7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c80:	4619      	mov	r1, r3
 8002c82:	481e      	ldr	r0, [pc, #120]	@ (8002cfc <MX_GPIO_Init+0x2f0>)
 8002c84:	f004 fc80 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	481a      	ldr	r0, [pc, #104]	@ (8002d08 <MX_GPIO_Init+0x2fc>)
 8002c9e:	f004 fc73 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002ca2:	2340      	movs	r3, #64	@ 0x40
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ca6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	480c      	ldr	r0, [pc, #48]	@ (8002ce8 <MX_GPIO_Init+0x2dc>)
 8002cb8:	f004 fc66 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002cbc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002cce:	230a      	movs	r3, #10
 8002cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480a      	ldr	r0, [pc, #40]	@ (8002d04 <MX_GPIO_Init+0x2f8>)
 8002cda:	f004 fc55 	bl	8007588 <HAL_GPIO_Init>
 8002cde:	e015      	b.n	8002d0c <MX_GPIO_Init+0x300>
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40020c00 	.word	0x40020c00
 8002cec:	40022800 	.word	0x40022800
 8002cf0:	40022000 	.word	0x40022000
 8002cf4:	40021c00 	.word	0x40021c00
 8002cf8:	40021800 	.word	0x40021800
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	40020800 	.word	0x40020800
 8002d04:	40020000 	.word	0x40020000
 8002d08:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002d0c:	23f0      	movs	r3, #240	@ 0xf0
 8002d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d10:	2302      	movs	r3, #2
 8002d12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d1c:	230a      	movs	r3, #10
 8002d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d24:	4619      	mov	r1, r3
 8002d26:	4891      	ldr	r0, [pc, #580]	@ (8002f6c <MX_GPIO_Init+0x560>)
 8002d28:	f004 fc2e 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d3e:	230a      	movs	r3, #10
 8002d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002d42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d46:	4619      	mov	r1, r3
 8002d48:	4889      	ldr	r0, [pc, #548]	@ (8002f70 <MX_GPIO_Init+0x564>)
 8002d4a:	f004 fc1d 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002d4e:	2328      	movs	r3, #40	@ 0x28
 8002d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d52:	2301      	movs	r3, #1
 8002d54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d62:	4619      	mov	r1, r3
 8002d64:	4883      	ldr	r0, [pc, #524]	@ (8002f74 <MX_GPIO_Init+0x568>)
 8002d66:	f004 fc0f 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002d6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d70:	2300      	movs	r3, #0
 8002d72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	487e      	ldr	r0, [pc, #504]	@ (8002f78 <MX_GPIO_Init+0x56c>)
 8002d80:	f004 fc02 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002d84:	2308      	movs	r3, #8
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002d94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4878      	ldr	r0, [pc, #480]	@ (8002f7c <MX_GPIO_Init+0x570>)
 8002d9c:	f004 fbf4 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002da0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002da6:	2300      	movs	r3, #0
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002db2:	4619      	mov	r1, r3
 8002db4:	486e      	ldr	r0, [pc, #440]	@ (8002f70 <MX_GPIO_Init+0x564>)
 8002db6:	f004 fbe7 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002dba:	2310      	movs	r3, #16
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002dc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4869      	ldr	r0, [pc, #420]	@ (8002f74 <MX_GPIO_Init+0x568>)
 8002dce:	f004 fbdb 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002dd2:	2304      	movs	r3, #4
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dde:	2303      	movs	r3, #3
 8002de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002de2:	230c      	movs	r3, #12
 8002de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dea:	4619      	mov	r1, r3
 8002dec:	4861      	ldr	r0, [pc, #388]	@ (8002f74 <MX_GPIO_Init+0x568>)
 8002dee:	f004 fbcb 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002df2:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e04:	4619      	mov	r1, r3
 8002e06:	485e      	ldr	r0, [pc, #376]	@ (8002f80 <MX_GPIO_Init+0x574>)
 8002e08:	f004 fbbe 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002e0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e12:	2301      	movs	r3, #1
 8002e14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002e1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e22:	4619      	mov	r1, r3
 8002e24:	4851      	ldr	r0, [pc, #324]	@ (8002f6c <MX_GPIO_Init+0x560>)
 8002e26:	f004 fbaf 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002e2a:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8002e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e30:	2301      	movs	r3, #1
 8002e32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002e3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e40:	4619      	mov	r1, r3
 8002e42:	484f      	ldr	r0, [pc, #316]	@ (8002f80 <MX_GPIO_Init+0x574>)
 8002e44:	f004 fba0 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002e48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002e4e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002e52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4843      	ldr	r0, [pc, #268]	@ (8002f6c <MX_GPIO_Init+0x560>)
 8002e60:	f004 fb92 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002e64:	2310      	movs	r3, #16
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002e74:	230a      	movs	r3, #10
 8002e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4840      	ldr	r0, [pc, #256]	@ (8002f80 <MX_GPIO_Init+0x574>)
 8002e80:	f004 fb82 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002e84:	23c8      	movs	r3, #200	@ 0xc8
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4835      	ldr	r0, [pc, #212]	@ (8002f70 <MX_GPIO_Init+0x564>)
 8002e9c:	f004 fb74 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002ea0:	2305      	movs	r3, #5
 8002ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eac:	2303      	movs	r3, #3
 8002eae:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002eb0:	230a      	movs	r3, #10
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eb8:	4619      	mov	r1, r3
 8002eba:	482f      	ldr	r0, [pc, #188]	@ (8002f78 <MX_GPIO_Init+0x56c>)
 8002ebc:	f004 fb64 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002ec0:	2332      	movs	r3, #50	@ 0x32
 8002ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ed0:	230b      	movs	r3, #11
 8002ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4827      	ldr	r0, [pc, #156]	@ (8002f78 <MX_GPIO_Init+0x56c>)
 8002edc:	f004 fb54 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eec:	2303      	movs	r3, #3
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ef0:	2309      	movs	r3, #9
 8002ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4822      	ldr	r0, [pc, #136]	@ (8002f84 <MX_GPIO_Init+0x578>)
 8002efc:	f004 fb44 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002f00:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002f12:	2309      	movs	r3, #9
 8002f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4815      	ldr	r0, [pc, #84]	@ (8002f74 <MX_GPIO_Init+0x568>)
 8002f1e:	f004 fb33 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002f22:	2386      	movs	r3, #134	@ 0x86
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f32:	230b      	movs	r3, #11
 8002f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4812      	ldr	r0, [pc, #72]	@ (8002f88 <MX_GPIO_Init+0x57c>)
 8002f3e:	f004 fb23 	bl	8007588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002f42:	2328      	movs	r3, #40	@ 0x28
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002f52:	230a      	movs	r3, #10
 8002f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	480a      	ldr	r0, [pc, #40]	@ (8002f88 <MX_GPIO_Init+0x57c>)
 8002f5e:	f004 fb13 	bl	8007588 <HAL_GPIO_Init>

}
 8002f62:	bf00      	nop
 8002f64:	3740      	adds	r7, #64	@ 0x40
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40022000 	.word	0x40022000
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40020c00 	.word	0x40020c00
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40022800 	.word	0x40022800
 8002f80:	40021c00 	.word	0x40021c00
 8002f84:	40020400 	.word	0x40020400
 8002f88:	40020000 	.word	0x40020000

08002f8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <MX_I2C1_Init+0x78>)
 8002f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002f96:	4b1a      	ldr	r3, [pc, #104]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002f98:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <MX_I2C1_Init+0x7c>)
 8002f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002f9c:	4b18      	ldr	r3, [pc, #96]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fa2:	4b17      	ldr	r3, [pc, #92]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fa8:	4b15      	ldr	r3, [pc, #84]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fae:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fb4:	4b12      	ldr	r3, [pc, #72]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fba:	4b11      	ldr	r3, [pc, #68]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fc6:	480e      	ldr	r0, [pc, #56]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002fc8:	f004 fdb0 	bl	8007b2c <HAL_I2C_Init>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002fd2:	f000 fbc1 	bl	8003758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4809      	ldr	r0, [pc, #36]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002fda:	f005 fb3d 	bl	8008658 <HAL_I2CEx_ConfigAnalogFilter>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002fe4:	f000 fbb8 	bl	8003758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4805      	ldr	r0, [pc, #20]	@ (8003000 <MX_I2C1_Init+0x74>)
 8002fec:	f005 fb7f 	bl	80086ee <HAL_I2CEx_ConfigDigitalFilter>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ff6:	f000 fbaf 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000674 	.word	0x20000674
 8003004:	40005400 	.word	0x40005400
 8003008:	00c0eaff 	.word	0x00c0eaff

0800300c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <MX_I2C3_Init+0x74>)
 8003012:	4a1c      	ldr	r2, [pc, #112]	@ (8003084 <MX_I2C3_Init+0x78>)
 8003014:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8003016:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <MX_I2C3_Init+0x74>)
 8003018:	4a1b      	ldr	r2, [pc, #108]	@ (8003088 <MX_I2C3_Init+0x7c>)
 800301a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800301c:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <MX_I2C3_Init+0x74>)
 800301e:	2200      	movs	r2, #0
 8003020:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003022:	4b17      	ldr	r3, [pc, #92]	@ (8003080 <MX_I2C3_Init+0x74>)
 8003024:	2201      	movs	r2, #1
 8003026:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003028:	4b15      	ldr	r3, [pc, #84]	@ (8003080 <MX_I2C3_Init+0x74>)
 800302a:	2200      	movs	r2, #0
 800302c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <MX_I2C3_Init+0x74>)
 8003030:	2200      	movs	r2, #0
 8003032:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003034:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <MX_I2C3_Init+0x74>)
 8003036:	2200      	movs	r2, #0
 8003038:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800303a:	4b11      	ldr	r3, [pc, #68]	@ (8003080 <MX_I2C3_Init+0x74>)
 800303c:	2200      	movs	r2, #0
 800303e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003040:	4b0f      	ldr	r3, [pc, #60]	@ (8003080 <MX_I2C3_Init+0x74>)
 8003042:	2200      	movs	r2, #0
 8003044:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003046:	480e      	ldr	r0, [pc, #56]	@ (8003080 <MX_I2C3_Init+0x74>)
 8003048:	f004 fd70 	bl	8007b2c <HAL_I2C_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003052:	f000 fb81 	bl	8003758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003056:	2100      	movs	r1, #0
 8003058:	4809      	ldr	r0, [pc, #36]	@ (8003080 <MX_I2C3_Init+0x74>)
 800305a:	f005 fafd 	bl	8008658 <HAL_I2CEx_ConfigAnalogFilter>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003064:	f000 fb78 	bl	8003758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003068:	2100      	movs	r1, #0
 800306a:	4805      	ldr	r0, [pc, #20]	@ (8003080 <MX_I2C3_Init+0x74>)
 800306c:	f005 fb3f 	bl	80086ee <HAL_I2CEx_ConfigDigitalFilter>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003076:	f000 fb6f 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200006c8 	.word	0x200006c8
 8003084:	40005c00 	.word	0x40005c00
 8003088:	00c0eaff 	.word	0x00c0eaff

0800308c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b0ac      	sub	sp, #176	@ 0xb0
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a4:	f107 0318 	add.w	r3, r7, #24
 80030a8:	2284      	movs	r2, #132	@ 0x84
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f00b fb72 	bl	800e796 <memset>
  if(i2cHandle->Instance==I2C1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a44      	ldr	r2, [pc, #272]	@ (80031c8 <HAL_I2C_MspInit+0x13c>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d13d      	bne.n	8003138 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030c2:	2300      	movs	r3, #0
 80030c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030c6:	f107 0318 	add.w	r3, r7, #24
 80030ca:	4618      	mov	r0, r3
 80030cc:	f006 fbf0 	bl	80098b0 <HAL_RCCEx_PeriphCLKConfig>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030d6:	f000 fb3f 	bl	8003758 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030da:	4b3c      	ldr	r3, [pc, #240]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	4a3b      	ldr	r2, [pc, #236]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e6:	4b39      	ldr	r3, [pc, #228]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030fa:	2312      	movs	r3, #18
 80030fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800310c:	2304      	movs	r3, #4
 800310e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003112:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003116:	4619      	mov	r1, r3
 8003118:	482d      	ldr	r0, [pc, #180]	@ (80031d0 <HAL_I2C_MspInit+0x144>)
 800311a:	f004 fa35 	bl	8007588 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800311e:	4b2b      	ldr	r3, [pc, #172]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	4a2a      	ldr	r2, [pc, #168]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 8003124:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003128:	6413      	str	r3, [r2, #64]	@ 0x40
 800312a:	4b28      	ldr	r3, [pc, #160]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003136:	e042      	b.n	80031be <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a25      	ldr	r2, [pc, #148]	@ (80031d4 <HAL_I2C_MspInit+0x148>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d13d      	bne.n	80031be <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003142:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003146:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800314e:	f107 0318 	add.w	r3, r7, #24
 8003152:	4618      	mov	r0, r3
 8003154:	f006 fbac 	bl	80098b0 <HAL_RCCEx_PeriphCLKConfig>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800315e:	f000 fafb 	bl	8003758 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003162:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	4a19      	ldr	r2, [pc, #100]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 8003168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800316c:	6313      	str	r3, [r2, #48]	@ 0x30
 800316e:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800317a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800317e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003182:	2312      	movs	r3, #18
 8003184:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003188:	2301      	movs	r3, #1
 800318a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800318e:	2303      	movs	r3, #3
 8003190:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003194:	2304      	movs	r3, #4
 8003196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800319a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800319e:	4619      	mov	r1, r3
 80031a0:	480d      	ldr	r0, [pc, #52]	@ (80031d8 <HAL_I2C_MspInit+0x14c>)
 80031a2:	f004 f9f1 	bl	8007588 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80031a6:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	4a08      	ldr	r2, [pc, #32]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 80031ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b2:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <HAL_I2C_MspInit+0x140>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
}
 80031be:	bf00      	nop
 80031c0:	37b0      	adds	r7, #176	@ 0xb0
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40005400 	.word	0x40005400
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40020400 	.word	0x40020400
 80031d4:	40005c00 	.word	0x40005c00
 80031d8:	40021c00 	.word	0x40021c00

080031dc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a15      	ldr	r2, [pc, #84]	@ (8003240 <HAL_I2C_MspDeInit+0x64>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d110      	bne.n	8003210 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80031ee:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <HAL_I2C_MspDeInit+0x68>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	4a14      	ldr	r2, [pc, #80]	@ (8003244 <HAL_I2C_MspDeInit+0x68>)
 80031f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031f8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80031fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031fe:	4812      	ldr	r0, [pc, #72]	@ (8003248 <HAL_I2C_MspDeInit+0x6c>)
 8003200:	f004 fb6e 	bl	80078e0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003204:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003208:	480f      	ldr	r0, [pc, #60]	@ (8003248 <HAL_I2C_MspDeInit+0x6c>)
 800320a:	f004 fb69 	bl	80078e0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800320e:	e013      	b.n	8003238 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0d      	ldr	r2, [pc, #52]	@ (800324c <HAL_I2C_MspDeInit+0x70>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10e      	bne.n	8003238 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <HAL_I2C_MspDeInit+0x68>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	4a09      	ldr	r2, [pc, #36]	@ (8003244 <HAL_I2C_MspDeInit+0x68>)
 8003220:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003224:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003226:	2180      	movs	r1, #128	@ 0x80
 8003228:	4809      	ldr	r0, [pc, #36]	@ (8003250 <HAL_I2C_MspDeInit+0x74>)
 800322a:	f004 fb59 	bl	80078e0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800322e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003232:	4807      	ldr	r0, [pc, #28]	@ (8003250 <HAL_I2C_MspDeInit+0x74>)
 8003234:	f004 fb54 	bl	80078e0 <HAL_GPIO_DeInit>
}
 8003238:	bf00      	nop
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40005400 	.word	0x40005400
 8003244:	40023800 	.word	0x40023800
 8003248:	40020400 	.word	0x40020400
 800324c:	40005c00 	.word	0x40005c00
 8003250:	40021c00 	.word	0x40021c00

08003254 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08e      	sub	sp, #56	@ 0x38
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	2234      	movs	r2, #52	@ 0x34
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f00b fa98 	bl	800e796 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003266:	4b3a      	ldr	r3, [pc, #232]	@ (8003350 <MX_LTDC_Init+0xfc>)
 8003268:	4a3a      	ldr	r2, [pc, #232]	@ (8003354 <MX_LTDC_Init+0x100>)
 800326a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800326c:	4b38      	ldr	r3, [pc, #224]	@ (8003350 <MX_LTDC_Init+0xfc>)
 800326e:	2200      	movs	r2, #0
 8003270:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003272:	4b37      	ldr	r3, [pc, #220]	@ (8003350 <MX_LTDC_Init+0xfc>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003278:	4b35      	ldr	r3, [pc, #212]	@ (8003350 <MX_LTDC_Init+0xfc>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800327e:	4b34      	ldr	r3, [pc, #208]	@ (8003350 <MX_LTDC_Init+0xfc>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8003284:	4b32      	ldr	r3, [pc, #200]	@ (8003350 <MX_LTDC_Init+0xfc>)
 8003286:	2228      	movs	r2, #40	@ 0x28
 8003288:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800328a:	4b31      	ldr	r3, [pc, #196]	@ (8003350 <MX_LTDC_Init+0xfc>)
 800328c:	2209      	movs	r2, #9
 800328e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8003290:	4b2f      	ldr	r3, [pc, #188]	@ (8003350 <MX_LTDC_Init+0xfc>)
 8003292:	2235      	movs	r2, #53	@ 0x35
 8003294:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8003296:	4b2e      	ldr	r3, [pc, #184]	@ (8003350 <MX_LTDC_Init+0xfc>)
 8003298:	220b      	movs	r2, #11
 800329a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800329c:	4b2c      	ldr	r3, [pc, #176]	@ (8003350 <MX_LTDC_Init+0xfc>)
 800329e:	f240 2215 	movw	r2, #533	@ 0x215
 80032a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80032a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003350 <MX_LTDC_Init+0xfc>)
 80032a6:	f240 121b 	movw	r2, #283	@ 0x11b
 80032aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <MX_LTDC_Init+0xfc>)
 80032ae:	f240 2235 	movw	r2, #565	@ 0x235
 80032b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80032b4:	4b26      	ldr	r3, [pc, #152]	@ (8003350 <MX_LTDC_Init+0xfc>)
 80032b6:	f240 121d 	movw	r2, #285	@ 0x11d
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80032bc:	4b24      	ldr	r3, [pc, #144]	@ (8003350 <MX_LTDC_Init+0xfc>)
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80032c4:	4b22      	ldr	r3, [pc, #136]	@ (8003350 <MX_LTDC_Init+0xfc>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80032cc:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <MX_LTDC_Init+0xfc>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80032d4:	481e      	ldr	r0, [pc, #120]	@ (8003350 <MX_LTDC_Init+0xfc>)
 80032d6:	f005 fa57 	bl	8008788 <HAL_LTDC_Init>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80032e0:	f000 fa3a 	bl	8003758 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80032e8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80032ec:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80032f2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80032f6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80032f8:	2302      	movs	r3, #2
 80032fa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80032fc:	23ff      	movs	r3, #255	@ 0xff
 80032fe:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003304:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003308:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800330a:	2307      	movs	r3, #7
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800330e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8003312:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8003314:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800331a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800331e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003320:	2300      	movs	r3, #0
 8003322:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	2200      	movs	r2, #0
 8003336:	4619      	mov	r1, r3
 8003338:	4805      	ldr	r0, [pc, #20]	@ (8003350 <MX_LTDC_Init+0xfc>)
 800333a:	f005 fbb7 	bl	8008aac <HAL_LTDC_ConfigLayer>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8003344:	f000 fa08 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	3738      	adds	r7, #56	@ 0x38
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	2000071c 	.word	0x2000071c
 8003354:	40016800 	.word	0x40016800

08003358 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b0ae      	sub	sp, #184	@ 0xb8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003370:	f107 0320 	add.w	r3, r7, #32
 8003374:	2284      	movs	r2, #132	@ 0x84
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f00b fa0c 	bl	800e796 <memset>
  if(ltdcHandle->Instance==LTDC)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6f      	ldr	r2, [pc, #444]	@ (8003540 <HAL_LTDC_MspInit+0x1e8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	f040 80d6 	bne.w	8003536 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800338a:	2308      	movs	r3, #8
 800338c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800338e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003392:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003394:	2305      	movs	r3, #5
 8003396:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003398:	2302      	movs	r3, #2
 800339a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800339c:	2303      	movs	r3, #3
 800339e:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80033a0:	2301      	movs	r3, #1
 80033a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80033a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033aa:	f107 0320 	add.w	r3, r7, #32
 80033ae:	4618      	mov	r0, r3
 80033b0:	f006 fa7e 	bl	80098b0 <HAL_RCCEx_PeriphCLKConfig>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80033ba:	f000 f9cd 	bl	8003758 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80033be:	4b61      	ldr	r3, [pc, #388]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	4a60      	ldr	r2, [pc, #384]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	4a5a      	ldr	r2, [pc, #360]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033dc:	f043 0310 	orr.w	r3, r3, #16
 80033e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e2:	4b58      	ldr	r3, [pc, #352]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033ee:	4b55      	ldr	r3, [pc, #340]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	4a54      	ldr	r2, [pc, #336]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033fa:	4b52      	ldr	r3, [pc, #328]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003406:	4b4f      	ldr	r3, [pc, #316]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	4a4e      	ldr	r2, [pc, #312]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 800340c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003410:	6313      	str	r3, [r2, #48]	@ 0x30
 8003412:	4b4c      	ldr	r3, [pc, #304]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800341e:	4b49      	ldr	r3, [pc, #292]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003422:	4a48      	ldr	r2, [pc, #288]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 8003424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003428:	6313      	str	r3, [r2, #48]	@ 0x30
 800342a:	4b46      	ldr	r3, [pc, #280]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003436:	4b43      	ldr	r3, [pc, #268]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	4a42      	ldr	r2, [pc, #264]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003440:	6313      	str	r3, [r2, #48]	@ 0x30
 8003442:	4b40      	ldr	r3, [pc, #256]	@ (8003544 <HAL_LTDC_MspInit+0x1ec>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800344e:	2310      	movs	r3, #16
 8003450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003460:	2300      	movs	r3, #0
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003466:	230e      	movs	r3, #14
 8003468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800346c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003470:	4619      	mov	r1, r3
 8003472:	4835      	ldr	r0, [pc, #212]	@ (8003548 <HAL_LTDC_MspInit+0x1f0>)
 8003474:	f004 f888 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003478:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800347c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003492:	230e      	movs	r3, #14
 8003494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003498:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800349c:	4619      	mov	r1, r3
 800349e:	482b      	ldr	r0, [pc, #172]	@ (800354c <HAL_LTDC_MspInit+0x1f4>)
 80034a0:	f004 f872 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80034a4:	23f7      	movs	r3, #247	@ 0xf7
 80034a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034aa:	2302      	movs	r3, #2
 80034ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80034bc:	230e      	movs	r3, #14
 80034be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80034c2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80034c6:	4619      	mov	r1, r3
 80034c8:	4821      	ldr	r0, [pc, #132]	@ (8003550 <HAL_LTDC_MspInit+0x1f8>)
 80034ca:	f004 f85d 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80034ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	2302      	movs	r3, #2
 80034d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80034e8:	2309      	movs	r3, #9
 80034ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80034ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80034f2:	4619      	mov	r1, r3
 80034f4:	4817      	ldr	r0, [pc, #92]	@ (8003554 <HAL_LTDC_MspInit+0x1fc>)
 80034f6:	f004 f847 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80034fa:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80034fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003514:	230e      	movs	r3, #14
 8003516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800351a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800351e:	4619      	mov	r1, r3
 8003520:	480d      	ldr	r0, [pc, #52]	@ (8003558 <HAL_LTDC_MspInit+0x200>)
 8003522:	f004 f831 	bl	8007588 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2105      	movs	r1, #5
 800352a:	2058      	movs	r0, #88	@ 0x58
 800352c:	f003 f9c8 	bl	80068c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003530:	2058      	movs	r0, #88	@ 0x58
 8003532:	f003 f9e1 	bl	80068f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003536:	bf00      	nop
 8003538:	37b8      	adds	r7, #184	@ 0xb8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40016800 	.word	0x40016800
 8003544:	40023800 	.word	0x40023800
 8003548:	40021000 	.word	0x40021000
 800354c:	40022400 	.word	0x40022400
 8003550:	40022800 	.word	0x40022800
 8003554:	40021800 	.word	0x40021800
 8003558:	40022000 	.word	0x40022000

0800355c <main>:
 800355c:	b598      	push	{r3, r4, r7, lr}
 800355e:	af00      	add	r7, sp, #0
 8003560:	4b37      	ldr	r3, [pc, #220]	@ (8003640 <main+0xe4>)
 8003562:	2201      	movs	r2, #1
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	4b36      	ldr	r3, [pc, #216]	@ (8003640 <main+0xe4>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	f002 fca5 	bl	8005eba <HAL_Init>
 8003570:	f000 f86e 	bl	8003650 <SystemClock_Config>
 8003574:	f7ff fa4a 	bl	8002a0c <MX_GPIO_Init>
 8003578:	f7fd fc52 	bl	8000e20 <MX_ADC3_Init>
 800357c:	f7fd fd82 	bl	8001084 <MX_DMA2D_Init>
 8003580:	f7fd fdd8 	bl	8001134 <MX_FMC_Init>
 8003584:	f7ff fd02 	bl	8002f8c <MX_I2C1_Init>
 8003588:	f7ff fd40 	bl	800300c <MX_I2C3_Init>
 800358c:	f7ff fe62 	bl	8003254 <MX_LTDC_Init>
 8003590:	f000 f8e8 	bl	8003764 <MX_RTC_Init>
 8003594:	f000 f9b8 	bl	8003908 <MX_SPI2_Init>
 8003598:	f002 f8a2 	bl	80056e0 <MX_TIM1_Init>
 800359c:	f002 f8f4 	bl	8005788 <MX_TIM2_Init>
 80035a0:	f002 f940 	bl	8005824 <MX_TIM3_Init>
 80035a4:	f002 f98c 	bl	80058c0 <MX_TIM5_Init>
 80035a8:	f002 f9d8 	bl	800595c <MX_TIM8_Init>
 80035ac:	f002 faec 	bl	8005b88 <MX_USART1_UART_Init>
 80035b0:	f002 fb1a 	bl	8005be8 <MX_USART6_UART_Init>
 80035b4:	f7fd fbe2 	bl	8000d7c <MX_ADC1_Init>
 80035b8:	f7fd fcf2 	bl	8000fa0 <MX_DAC_Init>
 80035bc:	f002 fab4 	bl	8005b28 <MX_UART7_Init>
 80035c0:	f000 fbe6 	bl	8003d90 <BSP_LCD_Init>
 80035c4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80035c8:	2000      	movs	r0, #0
 80035ca:	f000 fc79 	bl	8003ec0 <BSP_LCD_LayerDefaultInit>
 80035ce:	f000 fc4f 	bl	8003e70 <BSP_LCD_GetXSize>
 80035d2:	4604      	mov	r4, r0
 80035d4:	f000 fc60 	bl	8003e98 <BSP_LCD_GetYSize>
 80035d8:	4603      	mov	r3, r0
 80035da:	fb04 f303 	mul.w	r3, r4, r3
 80035de:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4619      	mov	r1, r3
 80035e6:	2001      	movs	r0, #1
 80035e8:	f000 fc6a 	bl	8003ec0 <BSP_LCD_LayerDefaultInit>
 80035ec:	f001 f82a 	bl	8004644 <BSP_LCD_DisplayOn>
 80035f0:	2000      	movs	r0, #0
 80035f2:	f000 fcc5 	bl	8003f80 <BSP_LCD_SelectLayer>
 80035f6:	4813      	ldr	r0, [pc, #76]	@ (8003644 <main+0xe8>)
 80035f8:	f000 fd1e 	bl	8004038 <BSP_LCD_Clear>
 80035fc:	2001      	movs	r0, #1
 80035fe:	f000 fcbf 	bl	8003f80 <BSP_LCD_SelectLayer>
 8003602:	2000      	movs	r0, #0
 8003604:	f000 fd18 	bl	8004038 <BSP_LCD_Clear>
 8003608:	480f      	ldr	r0, [pc, #60]	@ (8003648 <main+0xec>)
 800360a:	f000 fcfb 	bl	8004004 <BSP_LCD_SetFont>
 800360e:	480f      	ldr	r0, [pc, #60]	@ (800364c <main+0xf0>)
 8003610:	f000 fcc6 	bl	8003fa0 <BSP_LCD_SetTextColor>
 8003614:	2000      	movs	r0, #0
 8003616:	f000 fcdb 	bl	8003fd0 <BSP_LCD_SetBackColor>
 800361a:	f000 fc29 	bl	8003e70 <BSP_LCD_GetXSize>
 800361e:	4603      	mov	r3, r0
 8003620:	b29c      	uxth	r4, r3
 8003622:	f000 fc39 	bl	8003e98 <BSP_LCD_GetYSize>
 8003626:	4603      	mov	r3, r0
 8003628:	b29b      	uxth	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	4620      	mov	r0, r4
 800362e:	f001 fc1b 	bl	8004e68 <BSP_TS_Init>
 8003632:	f7fd fe83 	bl	800133c <MX_FREERTOS_Init>
 8003636:	f008 fc71 	bl	800bf1c <osKernelStart>
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <main+0xde>
 800363e:	bf00      	nop
 8003640:	200007c4 	.word	0x200007c4
 8003644:	ff81cd4b 	.word	0xff81cd4b
 8003648:	20000040 	.word	0x20000040
 800364c:	ffa52a2a 	.word	0xffa52a2a

08003650 <SystemClock_Config>:
 8003650:	b580      	push	{r7, lr}
 8003652:	b094      	sub	sp, #80	@ 0x50
 8003654:	af00      	add	r7, sp, #0
 8003656:	f107 0320 	add.w	r3, r7, #32
 800365a:	2230      	movs	r2, #48	@ 0x30
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f00b f899 	bl	800e796 <memset>
 8003664:	f107 030c 	add.w	r3, r7, #12
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
 8003674:	f005 fc00 	bl	8008e78 <HAL_PWR_EnableBkUpAccess>
 8003678:	4b2c      	ldr	r3, [pc, #176]	@ (800372c <SystemClock_Config+0xdc>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	4a2b      	ldr	r2, [pc, #172]	@ (800372c <SystemClock_Config+0xdc>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003682:	6413      	str	r3, [r2, #64]	@ 0x40
 8003684:	4b29      	ldr	r3, [pc, #164]	@ (800372c <SystemClock_Config+0xdc>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4b27      	ldr	r3, [pc, #156]	@ (8003730 <SystemClock_Config+0xe0>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	@ (8003730 <SystemClock_Config+0xe0>)
 8003696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <SystemClock_Config+0xe0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2309      	movs	r3, #9
 80036aa:	623b      	str	r3, [r7, #32]
 80036ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80036b2:	2301      	movs	r3, #1
 80036b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b6:	2302      	movs	r3, #2
 80036b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036c0:	2319      	movs	r3, #25
 80036c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80036c4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80036c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ca:	2302      	movs	r3, #2
 80036cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ce:	2309      	movs	r3, #9
 80036d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036d2:	f107 0320 	add.w	r3, r7, #32
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 fc2e 	bl	8008f38 <HAL_RCC_OscConfig>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <SystemClock_Config+0x96>
 80036e2:	f000 f839 	bl	8003758 <Error_Handler>
 80036e6:	f005 fbd7 	bl	8008e98 <HAL_PWREx_EnableOverDrive>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <SystemClock_Config+0xa4>
 80036f0:	f000 f832 	bl	8003758 <Error_Handler>
 80036f4:	230f      	movs	r3, #15
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	2302      	movs	r3, #2
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	f107 030c 	add.w	r3, r7, #12
 8003710:	2106      	movs	r1, #6
 8003712:	4618      	mov	r0, r3
 8003714:	f005 feb4 	bl	8009480 <HAL_RCC_ClockConfig>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <SystemClock_Config+0xd2>
 800371e:	f000 f81b 	bl	8003758 <Error_Handler>
 8003722:	bf00      	nop
 8003724:	3750      	adds	r7, #80	@ 0x50
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40023800 	.word	0x40023800
 8003730:	40007000 	.word	0x40007000

08003734 <HAL_TIM_PeriodElapsedCallback>:
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_TIM_PeriodElapsedCallback+0x16>
 8003746:	f002 fbc5 	bl	8005ed4 <HAL_IncTick>
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40001000 	.word	0x40001000

08003758 <Error_Handler>:
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
 800375c:	b672      	cpsid	i
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	e7fd      	b.n	8003760 <Error_Handler+0x8>

08003764 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b090      	sub	sp, #64	@ 0x40
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800376a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800376e:	2200      	movs	r2, #0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	609a      	str	r2, [r3, #8]
 8003776:	60da      	str	r2, [r3, #12]
 8003778:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800377a:	2300      	movs	r3, #0
 800377c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800377e:	463b      	mov	r3, r7
 8003780:	2228      	movs	r2, #40	@ 0x28
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f00b f806 	bl	800e796 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800378a:	4b46      	ldr	r3, [pc, #280]	@ (80038a4 <MX_RTC_Init+0x140>)
 800378c:	4a46      	ldr	r2, [pc, #280]	@ (80038a8 <MX_RTC_Init+0x144>)
 800378e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003790:	4b44      	ldr	r3, [pc, #272]	@ (80038a4 <MX_RTC_Init+0x140>)
 8003792:	2200      	movs	r2, #0
 8003794:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003796:	4b43      	ldr	r3, [pc, #268]	@ (80038a4 <MX_RTC_Init+0x140>)
 8003798:	227f      	movs	r2, #127	@ 0x7f
 800379a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800379c:	4b41      	ldr	r3, [pc, #260]	@ (80038a4 <MX_RTC_Init+0x140>)
 800379e:	22ff      	movs	r2, #255	@ 0xff
 80037a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80037a2:	4b40      	ldr	r3, [pc, #256]	@ (80038a4 <MX_RTC_Init+0x140>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80037a8:	4b3e      	ldr	r3, [pc, #248]	@ (80038a4 <MX_RTC_Init+0x140>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80037ae:	4b3d      	ldr	r3, [pc, #244]	@ (80038a4 <MX_RTC_Init+0x140>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80037b4:	483b      	ldr	r0, [pc, #236]	@ (80038a4 <MX_RTC_Init+0x140>)
 80037b6:	f006 fc6b 	bl	800a090 <HAL_RTC_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80037c0:	f7ff ffca 	bl	8003758 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80037de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037e2:	2201      	movs	r2, #1
 80037e4:	4619      	mov	r1, r3
 80037e6:	482f      	ldr	r0, [pc, #188]	@ (80038a4 <MX_RTC_Init+0x140>)
 80037e8:	f006 fcd6 	bl	800a198 <HAL_RTC_SetTime>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80037f2:	f7ff ffb1 	bl	8003758 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8003808:	2300      	movs	r3, #0
 800380a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800380e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003812:	2201      	movs	r2, #1
 8003814:	4619      	mov	r1, r3
 8003816:	4823      	ldr	r0, [pc, #140]	@ (80038a4 <MX_RTC_Init+0x140>)
 8003818:	f006 fd58 	bl	800a2cc <HAL_RTC_SetDate>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003822:	f7ff ff99 	bl	8003758 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003826:	2300      	movs	r3, #0
 8003828:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800382a:	2300      	movs	r3, #0
 800382c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800382e:	2300      	movs	r3, #0
 8003830:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003854:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003856:	463b      	mov	r3, r7
 8003858:	2201      	movs	r2, #1
 800385a:	4619      	mov	r1, r3
 800385c:	4811      	ldr	r0, [pc, #68]	@ (80038a4 <MX_RTC_Init+0x140>)
 800385e:	f006 fdb9 	bl	800a3d4 <HAL_RTC_SetAlarm>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8003868:	f7ff ff76 	bl	8003758 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800386c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003872:	463b      	mov	r3, r7
 8003874:	2201      	movs	r2, #1
 8003876:	4619      	mov	r1, r3
 8003878:	480a      	ldr	r0, [pc, #40]	@ (80038a4 <MX_RTC_Init+0x140>)
 800387a:	f006 fdab 	bl	800a3d4 <HAL_RTC_SetAlarm>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8003884:	f7ff ff68 	bl	8003758 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8003888:	2202      	movs	r2, #2
 800388a:	2100      	movs	r1, #0
 800388c:	4805      	ldr	r0, [pc, #20]	@ (80038a4 <MX_RTC_Init+0x140>)
 800388e:	f006 ff6d 	bl	800a76c <HAL_RTCEx_SetTimeStamp>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8003898:	f7ff ff5e 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800389c:	bf00      	nop
 800389e:	3740      	adds	r7, #64	@ 0x40
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	200007d4 	.word	0x200007d4
 80038a8:	40002800 	.word	0x40002800

080038ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b0a4      	sub	sp, #144	@ 0x90
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038b4:	f107 030c 	add.w	r3, r7, #12
 80038b8:	2284      	movs	r2, #132	@ 0x84
 80038ba:	2100      	movs	r1, #0
 80038bc:	4618      	mov	r0, r3
 80038be:	f00a ff6a 	bl	800e796 <memset>
  if(rtcHandle->Instance==RTC)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a0e      	ldr	r2, [pc, #56]	@ (8003900 <HAL_RTC_MspInit+0x54>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d114      	bne.n	80038f6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038cc:	2320      	movs	r3, #32
 80038ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038d6:	f107 030c 	add.w	r3, r7, #12
 80038da:	4618      	mov	r0, r3
 80038dc:	f005 ffe8 	bl	80098b0 <HAL_RCCEx_PeriphCLKConfig>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80038e6:	f7ff ff37 	bl	8003758 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038ea:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <HAL_RTC_MspInit+0x58>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ee:	4a05      	ldr	r2, [pc, #20]	@ (8003904 <HAL_RTC_MspInit+0x58>)
 80038f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038f4:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80038f6:	bf00      	nop
 80038f8:	3790      	adds	r7, #144	@ 0x90
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40002800 	.word	0x40002800
 8003904:	40023800 	.word	0x40023800

08003908 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <MX_SPI2_Init+0x74>)
 800390e:	4a1c      	ldr	r2, [pc, #112]	@ (8003980 <MX_SPI2_Init+0x78>)
 8003910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003912:	4b1a      	ldr	r3, [pc, #104]	@ (800397c <MX_SPI2_Init+0x74>)
 8003914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800391a:	4b18      	ldr	r3, [pc, #96]	@ (800397c <MX_SPI2_Init+0x74>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003920:	4b16      	ldr	r3, [pc, #88]	@ (800397c <MX_SPI2_Init+0x74>)
 8003922:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003926:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <MX_SPI2_Init+0x74>)
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800392e:	4b13      	ldr	r3, [pc, #76]	@ (800397c <MX_SPI2_Init+0x74>)
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003934:	4b11      	ldr	r3, [pc, #68]	@ (800397c <MX_SPI2_Init+0x74>)
 8003936:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800393a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800393c:	4b0f      	ldr	r3, [pc, #60]	@ (800397c <MX_SPI2_Init+0x74>)
 800393e:	2200      	movs	r2, #0
 8003940:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003942:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <MX_SPI2_Init+0x74>)
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003948:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <MX_SPI2_Init+0x74>)
 800394a:	2200      	movs	r2, #0
 800394c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800394e:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <MX_SPI2_Init+0x74>)
 8003950:	2200      	movs	r2, #0
 8003952:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003954:	4b09      	ldr	r3, [pc, #36]	@ (800397c <MX_SPI2_Init+0x74>)
 8003956:	2207      	movs	r2, #7
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800395a:	4b08      	ldr	r3, [pc, #32]	@ (800397c <MX_SPI2_Init+0x74>)
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <MX_SPI2_Init+0x74>)
 8003962:	2208      	movs	r2, #8
 8003964:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003966:	4805      	ldr	r0, [pc, #20]	@ (800397c <MX_SPI2_Init+0x74>)
 8003968:	f006 fff9 	bl	800a95e <HAL_SPI_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003972:	f7ff fef1 	bl	8003758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200007f4 	.word	0x200007f4
 8003980:	40003800 	.word	0x40003800

08003984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	@ 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a25      	ldr	r2, [pc, #148]	@ (8003a38 <HAL_SPI_MspInit+0xb4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d144      	bne.n	8003a30 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80039a6:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	4a24      	ldr	r2, [pc, #144]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b2:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80039be:	4b1f      	ldr	r3, [pc, #124]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ca:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039d6:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	4a18      	ldr	r2, [pc, #96]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e2:	4b16      	ldr	r3, [pc, #88]	@ (8003a3c <HAL_SPI_MspInit+0xb8>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80039ee:	2303      	movs	r3, #3
 80039f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039fe:	2305      	movs	r3, #5
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	4619      	mov	r1, r3
 8003a08:	480d      	ldr	r0, [pc, #52]	@ (8003a40 <HAL_SPI_MspInit+0xbc>)
 8003a0a:	f003 fdbd 	bl	8007588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003a0e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a20:	2305      	movs	r3, #5
 8003a22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a24:	f107 0314 	add.w	r3, r7, #20
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4806      	ldr	r0, [pc, #24]	@ (8003a44 <HAL_SPI_MspInit+0xc0>)
 8003a2c:	f003 fdac 	bl	8007588 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003a30:	bf00      	nop
 8003a32:	3728      	adds	r7, #40	@ 0x28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40003800 	.word	0x40003800
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40020400 	.word	0x40020400

08003a48 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	@ 0x30
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a51      	ldr	r2, [pc, #324]	@ (8003b98 <I2Cx_MspInit+0x150>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d14d      	bne.n	8003af4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003a58:	4b50      	ldr	r3, [pc, #320]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a64:	4b4d      	ldr	r3, [pc, #308]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003a74:	2312      	movs	r3, #18
 8003a76:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003a80:	2304      	movs	r3, #4
 8003a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4845      	ldr	r0, [pc, #276]	@ (8003ba0 <I2Cx_MspInit+0x158>)
 8003a8c:	f003 fd7c 	bl	8007588 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003a90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a96:	f107 031c 	add.w	r3, r7, #28
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4840      	ldr	r0, [pc, #256]	@ (8003ba0 <I2Cx_MspInit+0x158>)
 8003a9e:	f003 fd73 	bl	8007588 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa6:	4a3d      	ldr	r2, [pc, #244]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003aa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aae:	4b3b      	ldr	r3, [pc, #236]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003aba:	4b38      	ldr	r3, [pc, #224]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4a37      	ldr	r2, [pc, #220]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003ac0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ac4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003ac6:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a34      	ldr	r2, [pc, #208]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003acc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003ad0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	210f      	movs	r1, #15
 8003ad6:	2048      	movs	r0, #72	@ 0x48
 8003ad8:	f002 fef2 	bl	80068c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003adc:	2048      	movs	r0, #72	@ 0x48
 8003ade:	f002 ff0b 	bl	80068f8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	210f      	movs	r1, #15
 8003ae6:	2049      	movs	r0, #73	@ 0x49
 8003ae8:	f002 feea 	bl	80068c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003aec:	2049      	movs	r0, #73	@ 0x49
 8003aee:	f002 ff03 	bl	80068f8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003af2:	e04d      	b.n	8003b90 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003af4:	4b29      	ldr	r3, [pc, #164]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af8:	4a28      	ldr	r2, [pc, #160]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b00:	4b26      	ldr	r3, [pc, #152]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b10:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b12:	2312      	movs	r3, #18
 8003b14:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003b1e:	2304      	movs	r3, #4
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b22:	f107 031c 	add.w	r3, r7, #28
 8003b26:	4619      	mov	r1, r3
 8003b28:	481e      	ldr	r0, [pc, #120]	@ (8003ba4 <I2Cx_MspInit+0x15c>)
 8003b2a:	f003 fd2d 	bl	8007588 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003b2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b34:	f107 031c 	add.w	r3, r7, #28
 8003b38:	4619      	mov	r1, r3
 8003b3a:	481a      	ldr	r0, [pc, #104]	@ (8003ba4 <I2Cx_MspInit+0x15c>)
 8003b3c:	f003 fd24 	bl	8007588 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003b40:	4b16      	ldr	r3, [pc, #88]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	4a15      	ldr	r2, [pc, #84]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003b46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b4c:	4b13      	ldr	r3, [pc, #76]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003b58:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b62:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003b64:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a0c      	ldr	r2, [pc, #48]	@ (8003b9c <I2Cx_MspInit+0x154>)
 8003b6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b6e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003b70:	2200      	movs	r2, #0
 8003b72:	210f      	movs	r1, #15
 8003b74:	201f      	movs	r0, #31
 8003b76:	f002 fea3 	bl	80068c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003b7a:	201f      	movs	r0, #31
 8003b7c:	f002 febc 	bl	80068f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003b80:	2200      	movs	r2, #0
 8003b82:	210f      	movs	r1, #15
 8003b84:	2020      	movs	r0, #32
 8003b86:	f002 fe9b 	bl	80068c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003b8a:	2020      	movs	r0, #32
 8003b8c:	f002 feb4 	bl	80068f8 <HAL_NVIC_EnableIRQ>
}
 8003b90:	bf00      	nop
 8003b92:	3730      	adds	r7, #48	@ 0x30
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000858 	.word	0x20000858
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40021c00 	.word	0x40021c00
 8003ba4:	40020400 	.word	0x40020400

08003ba8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f004 faa9 	bl	8008108 <HAL_I2C_GetState>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d125      	bne.n	8003c08 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <I2Cx_Init+0x68>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d103      	bne.n	8003bcc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a13      	ldr	r2, [pc, #76]	@ (8003c14 <I2Cx_Init+0x6c>)
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a12      	ldr	r2, [pc, #72]	@ (8003c18 <I2Cx_Init+0x70>)
 8003bd0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a11      	ldr	r2, [pc, #68]	@ (8003c1c <I2Cx_Init+0x74>)
 8003bd6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff23 	bl	8003a48 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f003 ff92 	bl	8007b2c <HAL_I2C_Init>
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000858 	.word	0x20000858
 8003c14:	40005c00 	.word	0x40005c00
 8003c18:	40005400 	.word	0x40005400
 8003c1c:	40912732 	.word	0x40912732

08003c20 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	@ 0x28
 8003c24:	af04      	add	r7, sp, #16
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	72fb      	strb	r3, [r7, #11]
 8003c32:	460b      	mov	r3, r1
 8003c34:	813b      	strh	r3, [r7, #8]
 8003c36:	4613      	mov	r3, r2
 8003c38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c3e:	7afb      	ldrb	r3, [r7, #11]
 8003c40:	b299      	uxth	r1, r3
 8003c42:	88f8      	ldrh	r0, [r7, #6]
 8003c44:	893a      	ldrh	r2, [r7, #8]
 8003c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c4a:	9302      	str	r3, [sp, #8]
 8003c4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4603      	mov	r3, r0
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f004 f93c 	bl	8007ed4 <HAL_I2C_Mem_Read>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003c66:	7afb      	ldrb	r3, [r7, #11]
 8003c68:	4619      	mov	r1, r3
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 f832 	bl	8003cd4 <I2Cx_Error>
  }
  return status;    
 8003c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b08a      	sub	sp, #40	@ 0x28
 8003c7e:	af04      	add	r7, sp, #16
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	4608      	mov	r0, r1
 8003c84:	4611      	mov	r1, r2
 8003c86:	461a      	mov	r2, r3
 8003c88:	4603      	mov	r3, r0
 8003c8a:	72fb      	strb	r3, [r7, #11]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	813b      	strh	r3, [r7, #8]
 8003c90:	4613      	mov	r3, r2
 8003c92:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c98:	7afb      	ldrb	r3, [r7, #11]
 8003c9a:	b299      	uxth	r1, r3
 8003c9c:	88f8      	ldrh	r0, [r7, #6]
 8003c9e:	893a      	ldrh	r2, [r7, #8]
 8003ca0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ca4:	9302      	str	r3, [sp, #8]
 8003ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	4603      	mov	r3, r0
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f003 fffb 	bl	8007cac <HAL_I2C_Mem_Write>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003cba:	7dfb      	ldrb	r3, [r7, #23]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d004      	beq.n	8003cca <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003cc0:	7afb      	ldrb	r3, [r7, #11]
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f805 	bl	8003cd4 <I2Cx_Error>
  }
  return status;
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f003 ffb3 	bl	8007c4c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff ff5e 	bl	8003ba8 <I2Cx_Init>
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003cf8:	4802      	ldr	r0, [pc, #8]	@ (8003d04 <TS_IO_Init+0x10>)
 8003cfa:	f7ff ff55 	bl	8003ba8 <I2Cx_Init>
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000858 	.word	0x20000858

08003d08 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
 8003d12:	460b      	mov	r3, r1
 8003d14:	71bb      	strb	r3, [r7, #6]
 8003d16:	4613      	mov	r3, r2
 8003d18:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003d1a:	79bb      	ldrb	r3, [r7, #6]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	79f9      	ldrb	r1, [r7, #7]
 8003d20:	2301      	movs	r3, #1
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	1d7b      	adds	r3, r7, #5
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4803      	ldr	r0, [pc, #12]	@ (8003d38 <TS_IO_Write+0x30>)
 8003d2c:	f7ff ffa5 	bl	8003c7a <I2Cx_WriteMultiple>
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000858 	.word	0x20000858

08003d3c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	4603      	mov	r3, r0
 8003d44:	460a      	mov	r2, r1
 8003d46:	71fb      	strb	r3, [r7, #7]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003d50:	79bb      	ldrb	r3, [r7, #6]
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	79f9      	ldrb	r1, [r7, #7]
 8003d56:	2301      	movs	r3, #1
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	f107 030f 	add.w	r3, r7, #15
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	2301      	movs	r3, #1
 8003d62:	4804      	ldr	r0, [pc, #16]	@ (8003d74 <TS_IO_Read+0x38>)
 8003d64:	f7ff ff5c 	bl	8003c20 <I2Cx_ReadMultiple>

  return read_value;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000858 	.word	0x20000858

08003d78 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f002 f8c7 	bl	8005f14 <HAL_Delay>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003d94:	4b31      	ldr	r3, [pc, #196]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003d96:	2228      	movs	r2, #40	@ 0x28
 8003d98:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003d9a:	4b30      	ldr	r3, [pc, #192]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003d9c:	2209      	movs	r2, #9
 8003d9e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003da0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003da2:	2235      	movs	r2, #53	@ 0x35
 8003da4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003da6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003da8:	220b      	movs	r2, #11
 8003daa:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003dac:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003dae:	f240 121b 	movw	r2, #283	@ 0x11b
 8003db2:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003db4:	4b29      	ldr	r3, [pc, #164]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003db6:	f240 2215 	movw	r2, #533	@ 0x215
 8003dba:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003dbc:	4b27      	ldr	r3, [pc, #156]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003dbe:	f240 121d 	movw	r2, #285	@ 0x11d
 8003dc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003dc4:	4b25      	ldr	r3, [pc, #148]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003dc6:	f240 2235 	movw	r2, #565	@ 0x235
 8003dca:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4823      	ldr	r0, [pc, #140]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003dd0:	f000 fd30 	bl	8004834 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003dd4:	4b21      	ldr	r3, [pc, #132]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003dd6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003dda:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003dde:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003de2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003dec:	4b1b      	ldr	r3, [pc, #108]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003dfc:	4b17      	ldr	r3, [pc, #92]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003e02:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003e08:	4b14      	ldr	r3, [pc, #80]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003e0e:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003e14:	4b11      	ldr	r3, [pc, #68]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003e16:	4a12      	ldr	r2, [pc, #72]	@ (8003e60 <BSP_LCD_Init+0xd0>)
 8003e18:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003e1a:	4810      	ldr	r0, [pc, #64]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003e1c:	f004 fe84 	bl	8008b28 <HAL_LTDC_GetState>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003e26:	2100      	movs	r1, #0
 8003e28:	480c      	ldr	r0, [pc, #48]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003e2a:	f000 fc29 	bl	8004680 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003e2e:	480b      	ldr	r0, [pc, #44]	@ (8003e5c <BSP_LCD_Init+0xcc>)
 8003e30:	f004 fcaa 	bl	8008788 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003e34:	2201      	movs	r2, #1
 8003e36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003e3a:	480a      	ldr	r0, [pc, #40]	@ (8003e64 <BSP_LCD_Init+0xd4>)
 8003e3c:	f003 fe5c 	bl	8007af8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003e40:	2201      	movs	r2, #1
 8003e42:	2108      	movs	r1, #8
 8003e44:	4808      	ldr	r0, [pc, #32]	@ (8003e68 <BSP_LCD_Init+0xd8>)
 8003e46:	f003 fe57 	bl	8007af8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003e4a:	f000 fe57 	bl	8004afc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003e4e:	4807      	ldr	r0, [pc, #28]	@ (8003e6c <BSP_LCD_Init+0xdc>)
 8003e50:	f000 f8d8 	bl	8004004 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	200008ac 	.word	0x200008ac
 8003e60:	40016800 	.word	0x40016800
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40022800 	.word	0x40022800
 8003e6c:	20000038 	.word	0x20000038

08003e70 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003e74:	4b06      	ldr	r3, [pc, #24]	@ (8003e90 <BSP_LCD_GetXSize+0x20>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a06      	ldr	r2, [pc, #24]	@ (8003e94 <BSP_LCD_GetXSize+0x24>)
 8003e7a:	2134      	movs	r1, #52	@ 0x34
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	4413      	add	r3, r2
 8003e82:	3360      	adds	r3, #96	@ 0x60
 8003e84:	681b      	ldr	r3, [r3, #0]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	20000994 	.word	0x20000994
 8003e94:	200008ac 	.word	0x200008ac

08003e98 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003e9c:	4b06      	ldr	r3, [pc, #24]	@ (8003eb8 <BSP_LCD_GetYSize+0x20>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a06      	ldr	r2, [pc, #24]	@ (8003ebc <BSP_LCD_GetYSize+0x24>)
 8003ea2:	2134      	movs	r1, #52	@ 0x34
 8003ea4:	fb01 f303 	mul.w	r3, r1, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3364      	adds	r3, #100	@ 0x64
 8003eac:	681b      	ldr	r3, [r3, #0]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	20000994 	.word	0x20000994
 8003ebc:	200008ac 	.word	0x200008ac

08003ec0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b090      	sub	sp, #64	@ 0x40
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	6039      	str	r1, [r7, #0]
 8003eca:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003ed0:	f7ff ffce 	bl	8003e70 <BSP_LCD_GetXSize>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003edc:	f7ff ffdc 	bl	8003e98 <BSP_LCD_GetYSize>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003eec:	23ff      	movs	r3, #255	@ 0xff
 8003eee:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003f06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003f0c:	2307      	movs	r3, #7
 8003f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003f10:	f7ff ffae 	bl	8003e70 <BSP_LCD_GetXSize>
 8003f14:	4603      	mov	r3, r0
 8003f16:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003f18:	f7ff ffbe 	bl	8003e98 <BSP_LCD_GetYSize>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003f20:	88fa      	ldrh	r2, [r7, #6]
 8003f22:	f107 030c 	add.w	r3, r7, #12
 8003f26:	4619      	mov	r1, r3
 8003f28:	4812      	ldr	r0, [pc, #72]	@ (8003f74 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003f2a:	f004 fdbf 	bl	8008aac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	4911      	ldr	r1, [pc, #68]	@ (8003f78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f42:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003f44:	88fa      	ldrh	r2, [r7, #6]
 8003f46:	490c      	ldr	r1, [pc, #48]	@ (8003f78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3308      	adds	r3, #8
 8003f54:	4a09      	ldr	r2, [pc, #36]	@ (8003f7c <BSP_LCD_LayerDefaultInit+0xbc>)
 8003f56:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	4907      	ldr	r1, [pc, #28]	@ (8003f78 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003f6a:	601a      	str	r2, [r3, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	3740      	adds	r7, #64	@ 0x40
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	200008ac 	.word	0x200008ac
 8003f78:	20000998 	.word	0x20000998
 8003f7c:	20000038 	.word	0x20000038

08003f80 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003f88:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <BSP_LCD_SelectLayer+0x1c>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6013      	str	r3, [r2, #0]
} 
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000994 	.word	0x20000994

08003fa0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003fa8:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <BSP_LCD_SetTextColor+0x28>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	4907      	ldr	r1, [pc, #28]	@ (8003fcc <BSP_LCD_SetTextColor+0x2c>)
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	20000994 	.word	0x20000994
 8003fcc:	20000998 	.word	0x20000998

08003fd0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	@ (8003ffc <BSP_LCD_SetBackColor+0x2c>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4908      	ldr	r1, [pc, #32]	@ (8004000 <BSP_LCD_SetBackColor+0x30>)
 8003fde:	4613      	mov	r3, r2
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3304      	adds	r3, #4
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	601a      	str	r2, [r3, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	20000994 	.word	0x20000994
 8004000:	20000998 	.word	0x20000998

08004004 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800400c:	4b08      	ldr	r3, [pc, #32]	@ (8004030 <BSP_LCD_SetFont+0x2c>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4908      	ldr	r1, [pc, #32]	@ (8004034 <BSP_LCD_SetFont+0x30>)
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3308      	adds	r3, #8
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000994 	.word	0x20000994
 8004034:	20000998 	.word	0x20000998

08004038 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	b085      	sub	sp, #20
 800403c:	af02      	add	r7, sp, #8
 800403e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004040:	4b0f      	ldr	r3, [pc, #60]	@ (8004080 <BSP_LCD_Clear+0x48>)
 8004042:	681c      	ldr	r4, [r3, #0]
 8004044:	4b0e      	ldr	r3, [pc, #56]	@ (8004080 <BSP_LCD_Clear+0x48>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0e      	ldr	r2, [pc, #56]	@ (8004084 <BSP_LCD_Clear+0x4c>)
 800404a:	2134      	movs	r1, #52	@ 0x34
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	335c      	adds	r3, #92	@ 0x5c
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461e      	mov	r6, r3
 8004058:	f7ff ff0a 	bl	8003e70 <BSP_LCD_GetXSize>
 800405c:	4605      	mov	r5, r0
 800405e:	f7ff ff1b 	bl	8003e98 <BSP_LCD_GetYSize>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	9301      	str	r3, [sp, #4]
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	462a      	mov	r2, r5
 8004070:	4631      	mov	r1, r6
 8004072:	4620      	mov	r0, r4
 8004074:	f000 fcb2 	bl	80049dc <LL_FillBuffer>
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004080:	20000994 	.word	0x20000994
 8004084:	200008ac 	.word	0x200008ac

08004088 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	80fb      	strh	r3, [r7, #6]
 8004092:	460b      	mov	r3, r1
 8004094:	80bb      	strh	r3, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800409a:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <BSP_LCD_DisplayChar+0x80>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	491b      	ldr	r1, [pc, #108]	@ (800410c <BSP_LCD_DisplayChar+0x84>)
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	3308      	adds	r3, #8
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6819      	ldr	r1, [r3, #0]
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80040b6:	4b14      	ldr	r3, [pc, #80]	@ (8004108 <BSP_LCD_DisplayChar+0x80>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4c14      	ldr	r4, [pc, #80]	@ (800410c <BSP_LCD_DisplayChar+0x84>)
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4423      	add	r3, r4
 80040c6:	3308      	adds	r3, #8
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80040cc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80040d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <BSP_LCD_DisplayChar+0x80>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4c0d      	ldr	r4, [pc, #52]	@ (800410c <BSP_LCD_DisplayChar+0x84>)
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4423      	add	r3, r4
 80040e0:	3308      	adds	r3, #8
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	889b      	ldrh	r3, [r3, #4]
 80040e6:	3307      	adds	r3, #7
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	da00      	bge.n	80040ee <BSP_LCD_DisplayChar+0x66>
 80040ec:	3307      	adds	r3, #7
 80040ee:	10db      	asrs	r3, r3, #3
 80040f0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80040f4:	18ca      	adds	r2, r1, r3
 80040f6:	88b9      	ldrh	r1, [r7, #4]
 80040f8:	88fb      	ldrh	r3, [r7, #6]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fbb6 	bl	800486c <DrawChar>
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bd90      	pop	{r4, r7, pc}
 8004108:	20000994 	.word	0x20000994
 800410c:	20000998 	.word	0x20000998

08004110 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004110:	b5b0      	push	{r4, r5, r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	60ba      	str	r2, [r7, #8]
 8004118:	461a      	mov	r2, r3
 800411a:	4603      	mov	r3, r0
 800411c:	81fb      	strh	r3, [r7, #14]
 800411e:	460b      	mov	r3, r1
 8004120:	81bb      	strh	r3, [r7, #12]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8004126:	2301      	movs	r3, #1
 8004128:	83fb      	strh	r3, [r7, #30]
 800412a:	2300      	movs	r3, #0
 800412c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800413a:	e002      	b.n	8004142 <BSP_LCD_DisplayStringAt+0x32>
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	3301      	adds	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	617a      	str	r2, [r7, #20]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f6      	bne.n	800413c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800414e:	f7ff fe8f 	bl	8003e70 <BSP_LCD_GetXSize>
 8004152:	4601      	mov	r1, r0
 8004154:	4b50      	ldr	r3, [pc, #320]	@ (8004298 <BSP_LCD_DisplayStringAt+0x188>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	4850      	ldr	r0, [pc, #320]	@ (800429c <BSP_LCD_DisplayStringAt+0x18c>)
 800415a:	4613      	mov	r3, r2
 800415c:	005b      	lsls	r3, r3, #1
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4403      	add	r3, r0
 8004164:	3308      	adds	r3, #8
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	889b      	ldrh	r3, [r3, #4]
 800416a:	fbb1 f3f3 	udiv	r3, r1, r3
 800416e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	2b03      	cmp	r3, #3
 8004174:	d01c      	beq.n	80041b0 <BSP_LCD_DisplayStringAt+0xa0>
 8004176:	2b03      	cmp	r3, #3
 8004178:	dc33      	bgt.n	80041e2 <BSP_LCD_DisplayStringAt+0xd2>
 800417a:	2b01      	cmp	r3, #1
 800417c:	d002      	beq.n	8004184 <BSP_LCD_DisplayStringAt+0x74>
 800417e:	2b02      	cmp	r3, #2
 8004180:	d019      	beq.n	80041b6 <BSP_LCD_DisplayStringAt+0xa6>
 8004182:	e02e      	b.n	80041e2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	1ad1      	subs	r1, r2, r3
 800418a:	4b43      	ldr	r3, [pc, #268]	@ (8004298 <BSP_LCD_DisplayStringAt+0x188>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4843      	ldr	r0, [pc, #268]	@ (800429c <BSP_LCD_DisplayStringAt+0x18c>)
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4403      	add	r3, r0
 800419a:	3308      	adds	r3, #8
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	889b      	ldrh	r3, [r3, #4]
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	4413      	add	r3, r2
 80041ac:	83fb      	strh	r3, [r7, #30]
      break;
 80041ae:	e01b      	b.n	80041e8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80041b0:	89fb      	ldrh	r3, [r7, #14]
 80041b2:	83fb      	strh	r3, [r7, #30]
      break;
 80041b4:	e018      	b.n	80041e8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	b299      	uxth	r1, r3
 80041be:	4b36      	ldr	r3, [pc, #216]	@ (8004298 <BSP_LCD_DisplayStringAt+0x188>)
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4836      	ldr	r0, [pc, #216]	@ (800429c <BSP_LCD_DisplayStringAt+0x18c>)
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4403      	add	r3, r0
 80041ce:	3308      	adds	r3, #8
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	889b      	ldrh	r3, [r3, #4]
 80041d4:	fb11 f303 	smulbb	r3, r1, r3
 80041d8:	b29a      	uxth	r2, r3
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	83fb      	strh	r3, [r7, #30]
      break;
 80041e0:	e002      	b.n	80041e8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	83fb      	strh	r3, [r7, #30]
      break;
 80041e6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80041e8:	8bfb      	ldrh	r3, [r7, #30]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <BSP_LCD_DisplayStringAt+0xe6>
 80041ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	da1d      	bge.n	8004232 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80041fa:	e01a      	b.n	8004232 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	89b9      	ldrh	r1, [r7, #12]
 8004202:	8bfb      	ldrh	r3, [r7, #30]
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff ff3f 	bl	8004088 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800420a:	4b23      	ldr	r3, [pc, #140]	@ (8004298 <BSP_LCD_DisplayStringAt+0x188>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4923      	ldr	r1, [pc, #140]	@ (800429c <BSP_LCD_DisplayStringAt+0x18c>)
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	3308      	adds	r3, #8
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	889a      	ldrh	r2, [r3, #4]
 8004220:	8bfb      	ldrh	r3, [r7, #30]
 8004222:	4413      	add	r3, r2
 8004224:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	3301      	adds	r3, #1
 800422a:	60bb      	str	r3, [r7, #8]
    i++;
 800422c:	8bbb      	ldrh	r3, [r7, #28]
 800422e:	3301      	adds	r3, #1
 8004230:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2dc      	uxtb	r4, r3
 8004240:	f7ff fe16 	bl	8003e70 <BSP_LCD_GetXSize>
 8004244:	8bb9      	ldrh	r1, [r7, #28]
 8004246:	4b14      	ldr	r3, [pc, #80]	@ (8004298 <BSP_LCD_DisplayStringAt+0x188>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4d14      	ldr	r5, [pc, #80]	@ (800429c <BSP_LCD_DisplayStringAt+0x18c>)
 800424c:	4613      	mov	r3, r2
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	442b      	add	r3, r5
 8004256:	3308      	adds	r3, #8
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	889b      	ldrh	r3, [r3, #4]
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	1ac3      	subs	r3, r0, r3
 8004262:	b299      	uxth	r1, r3
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <BSP_LCD_DisplayStringAt+0x188>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	480c      	ldr	r0, [pc, #48]	@ (800429c <BSP_LCD_DisplayStringAt+0x18c>)
 800426a:	4613      	mov	r3, r2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4403      	add	r3, r0
 8004274:	3308      	adds	r3, #8
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	889b      	ldrh	r3, [r3, #4]
 800427a:	4299      	cmp	r1, r3
 800427c:	bf2c      	ite	cs
 800427e:	2301      	movcs	r3, #1
 8004280:	2300      	movcc	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	4023      	ands	r3, r4
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1b7      	bne.n	80041fc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bdb0      	pop	{r4, r5, r7, pc}
 8004296:	bf00      	nop
 8004298:	20000994 	.word	0x20000994
 800429c:	20000998 	.word	0x20000998

080042a0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80042a0:	b5b0      	push	{r4, r5, r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
 80042aa:	460b      	mov	r3, r1
 80042ac:	80bb      	strh	r3, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80042b6:	4b26      	ldr	r3, [pc, #152]	@ (8004350 <BSP_LCD_DrawHLine+0xb0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a26      	ldr	r2, [pc, #152]	@ (8004354 <BSP_LCD_DrawHLine+0xb4>)
 80042bc:	2134      	movs	r1, #52	@ 0x34
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	3348      	adds	r3, #72	@ 0x48
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d114      	bne.n	80042f6 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80042cc:	4b20      	ldr	r3, [pc, #128]	@ (8004350 <BSP_LCD_DrawHLine+0xb0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a20      	ldr	r2, [pc, #128]	@ (8004354 <BSP_LCD_DrawHLine+0xb4>)
 80042d2:	2134      	movs	r1, #52	@ 0x34
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	335c      	adds	r3, #92	@ 0x5c
 80042dc:	681c      	ldr	r4, [r3, #0]
 80042de:	f7ff fdc7 	bl	8003e70 <BSP_LCD_GetXSize>
 80042e2:	4602      	mov	r2, r0
 80042e4:	88bb      	ldrh	r3, [r7, #4]
 80042e6:	fb03 f202 	mul.w	r2, r3, r2
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	4413      	add	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4423      	add	r3, r4
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e013      	b.n	800431e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80042f6:	4b16      	ldr	r3, [pc, #88]	@ (8004350 <BSP_LCD_DrawHLine+0xb0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a16      	ldr	r2, [pc, #88]	@ (8004354 <BSP_LCD_DrawHLine+0xb4>)
 80042fc:	2134      	movs	r1, #52	@ 0x34
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	4413      	add	r3, r2
 8004304:	335c      	adds	r3, #92	@ 0x5c
 8004306:	681c      	ldr	r4, [r3, #0]
 8004308:	f7ff fdb2 	bl	8003e70 <BSP_LCD_GetXSize>
 800430c:	4602      	mov	r2, r0
 800430e:	88bb      	ldrh	r3, [r7, #4]
 8004310:	fb03 f202 	mul.w	r2, r3, r2
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4423      	add	r3, r4
 800431c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800431e:	4b0c      	ldr	r3, [pc, #48]	@ (8004350 <BSP_LCD_DrawHLine+0xb0>)
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	68f9      	ldr	r1, [r7, #12]
 8004324:	887c      	ldrh	r4, [r7, #2]
 8004326:	4b0a      	ldr	r3, [pc, #40]	@ (8004350 <BSP_LCD_DrawHLine+0xb0>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4d0b      	ldr	r5, [pc, #44]	@ (8004358 <BSP_LCD_DrawHLine+0xb8>)
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	442b      	add	r3, r5
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	2300      	movs	r3, #0
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	2301      	movs	r3, #1
 8004340:	4622      	mov	r2, r4
 8004342:	f000 fb4b 	bl	80049dc <LL_FillBuffer>
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bdb0      	pop	{r4, r5, r7, pc}
 800434e:	bf00      	nop
 8004350:	20000994 	.word	0x20000994
 8004354:	200008ac 	.word	0x200008ac
 8004358:	20000998 	.word	0x20000998

0800435c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800435c:	b5b0      	push	{r4, r5, r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	603a      	str	r2, [r7, #0]
 8004366:	80fb      	strh	r3, [r7, #6]
 8004368:	460b      	mov	r3, r1
 800436a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <BSP_LCD_DrawPixel+0x88>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1d      	ldr	r2, [pc, #116]	@ (80043e8 <BSP_LCD_DrawPixel+0x8c>)
 8004372:	2134      	movs	r1, #52	@ 0x34
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	3348      	adds	r3, #72	@ 0x48
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d116      	bne.n	80043b0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004382:	4b18      	ldr	r3, [pc, #96]	@ (80043e4 <BSP_LCD_DrawPixel+0x88>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a18      	ldr	r2, [pc, #96]	@ (80043e8 <BSP_LCD_DrawPixel+0x8c>)
 8004388:	2134      	movs	r1, #52	@ 0x34
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	335c      	adds	r3, #92	@ 0x5c
 8004392:	681c      	ldr	r4, [r3, #0]
 8004394:	88bd      	ldrh	r5, [r7, #4]
 8004396:	f7ff fd6b 	bl	8003e70 <BSP_LCD_GetXSize>
 800439a:	4603      	mov	r3, r0
 800439c:	fb03 f205 	mul.w	r2, r3, r5
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	4413      	add	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4423      	add	r3, r4
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	b292      	uxth	r2, r2
 80043ac:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80043ae:	e015      	b.n	80043dc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80043b0:	4b0c      	ldr	r3, [pc, #48]	@ (80043e4 <BSP_LCD_DrawPixel+0x88>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0c      	ldr	r2, [pc, #48]	@ (80043e8 <BSP_LCD_DrawPixel+0x8c>)
 80043b6:	2134      	movs	r1, #52	@ 0x34
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	335c      	adds	r3, #92	@ 0x5c
 80043c0:	681c      	ldr	r4, [r3, #0]
 80043c2:	88bd      	ldrh	r5, [r7, #4]
 80043c4:	f7ff fd54 	bl	8003e70 <BSP_LCD_GetXSize>
 80043c8:	4603      	mov	r3, r0
 80043ca:	fb03 f205 	mul.w	r2, r3, r5
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4423      	add	r3, r4
 80043d6:	461a      	mov	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	6013      	str	r3, [r2, #0]
}
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bdb0      	pop	{r4, r5, r7, pc}
 80043e4:	20000994 	.word	0x20000994
 80043e8:	200008ac 	.word	0x200008ac

080043ec <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b08b      	sub	sp, #44	@ 0x2c
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fc:	2300      	movs	r3, #0
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
 8004404:	2300      	movs	r3, #0
 8004406:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	330a      	adds	r3, #10
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	330b      	adds	r3, #11
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	441a      	add	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	330c      	adds	r3, #12
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	441a      	add	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	330d      	adds	r3, #13
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	061b      	lsls	r3, r3, #24
 8004430:	4413      	add	r3, r2
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3312      	adds	r3, #18
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3313      	adds	r3, #19
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3314      	adds	r3, #20
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	441a      	add	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3315      	adds	r3, #21
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	061b      	lsls	r3, r3, #24
 8004458:	4413      	add	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3316      	adds	r3, #22
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3317      	adds	r3, #23
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	441a      	add	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3318      	adds	r3, #24
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	441a      	add	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3319      	adds	r3, #25
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	061b      	lsls	r3, r3, #24
 8004480:	4413      	add	r3, r2
 8004482:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	331c      	adds	r3, #28
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	331d      	adds	r3, #29
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	4413      	add	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8004498:	4b2b      	ldr	r3, [pc, #172]	@ (8004548 <BSP_LCD_DrawBitmap+0x15c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a2b      	ldr	r2, [pc, #172]	@ (800454c <BSP_LCD_DrawBitmap+0x160>)
 800449e:	2134      	movs	r1, #52	@ 0x34
 80044a0:	fb01 f303 	mul.w	r3, r1, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	335c      	adds	r3, #92	@ 0x5c
 80044a8:	681c      	ldr	r4, [r3, #0]
 80044aa:	f7ff fce1 	bl	8003e70 <BSP_LCD_GetXSize>
 80044ae:	4602      	mov	r2, r0
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	fb03 f202 	mul.w	r2, r3, r2
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4423      	add	r3, r4
 80044be:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3b20      	subs	r3, #32
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d802      	bhi.n	80044ce <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
 80044cc:	e008      	b.n	80044e0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	3b10      	subs	r3, #16
 80044d2:	2b07      	cmp	r3, #7
 80044d4:	d802      	bhi.n	80044dc <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80044d6:	2302      	movs	r3, #2
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e001      	b.n	80044e0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80044dc:	2301      	movs	r3, #1
 80044de:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	08d2      	lsrs	r2, r2, #3
 80044ee:	fb03 f202 	mul.w	r2, r3, r2
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	4413      	add	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004500:	e018      	b.n	8004534 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8004502:	6a39      	ldr	r1, [r7, #32]
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fab3 	bl	8004a74 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800450e:	f7ff fcaf 	bl	8003e70 <BSP_LCD_GetXSize>
 8004512:	4603      	mov	r3, r0
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	6a3a      	ldr	r2, [r7, #32]
 8004518:	4413      	add	r3, r2
 800451a:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	fb02 f303 	mul.w	r3, r2, r3
 8004526:	425b      	negs	r3, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	3301      	adds	r3, #1
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
 8004534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	429a      	cmp	r2, r3
 800453a:	d3e2      	bcc.n	8004502 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	372c      	adds	r7, #44	@ 0x2c
 8004542:	46bd      	mov	sp, r7
 8004544:	bd90      	pop	{r4, r7, pc}
 8004546:	bf00      	nop
 8004548:	20000994 	.word	0x20000994
 800454c:	200008ac 	.word	0x200008ac

08004550 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004554:	b086      	sub	sp, #24
 8004556:	af02      	add	r7, sp, #8
 8004558:	4604      	mov	r4, r0
 800455a:	4608      	mov	r0, r1
 800455c:	4611      	mov	r1, r2
 800455e:	461a      	mov	r2, r3
 8004560:	4623      	mov	r3, r4
 8004562:	80fb      	strh	r3, [r7, #6]
 8004564:	4603      	mov	r3, r0
 8004566:	80bb      	strh	r3, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
 800456c:	4613      	mov	r3, r2
 800456e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004574:	4b30      	ldr	r3, [pc, #192]	@ (8004638 <BSP_LCD_FillRect+0xe8>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4930      	ldr	r1, [pc, #192]	@ (800463c <BSP_LCD_FillRect+0xec>)
 800457a:	4613      	mov	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4413      	add	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	440b      	add	r3, r1
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fd0a 	bl	8003fa0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800458c:	4b2a      	ldr	r3, [pc, #168]	@ (8004638 <BSP_LCD_FillRect+0xe8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2b      	ldr	r2, [pc, #172]	@ (8004640 <BSP_LCD_FillRect+0xf0>)
 8004592:	2134      	movs	r1, #52	@ 0x34
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	3348      	adds	r3, #72	@ 0x48
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d114      	bne.n	80045cc <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80045a2:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <BSP_LCD_FillRect+0xe8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a26      	ldr	r2, [pc, #152]	@ (8004640 <BSP_LCD_FillRect+0xf0>)
 80045a8:	2134      	movs	r1, #52	@ 0x34
 80045aa:	fb01 f303 	mul.w	r3, r1, r3
 80045ae:	4413      	add	r3, r2
 80045b0:	335c      	adds	r3, #92	@ 0x5c
 80045b2:	681c      	ldr	r4, [r3, #0]
 80045b4:	f7ff fc5c 	bl	8003e70 <BSP_LCD_GetXSize>
 80045b8:	4602      	mov	r2, r0
 80045ba:	88bb      	ldrh	r3, [r7, #4]
 80045bc:	fb03 f202 	mul.w	r2, r3, r2
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4413      	add	r3, r2
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	4423      	add	r3, r4
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e013      	b.n	80045f4 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80045cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004638 <BSP_LCD_FillRect+0xe8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004640 <BSP_LCD_FillRect+0xf0>)
 80045d2:	2134      	movs	r1, #52	@ 0x34
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	4413      	add	r3, r2
 80045da:	335c      	adds	r3, #92	@ 0x5c
 80045dc:	681c      	ldr	r4, [r3, #0]
 80045de:	f7ff fc47 	bl	8003e70 <BSP_LCD_GetXSize>
 80045e2:	4602      	mov	r2, r0
 80045e4:	88bb      	ldrh	r3, [r7, #4]
 80045e6:	fb03 f202 	mul.w	r2, r3, r2
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4423      	add	r3, r4
 80045f2:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80045f4:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <BSP_LCD_FillRect+0xe8>)
 80045f6:	681c      	ldr	r4, [r3, #0]
 80045f8:	68fd      	ldr	r5, [r7, #12]
 80045fa:	887e      	ldrh	r6, [r7, #2]
 80045fc:	f8b7 8000 	ldrh.w	r8, [r7]
 8004600:	f7ff fc36 	bl	8003e70 <BSP_LCD_GetXSize>
 8004604:	4602      	mov	r2, r0
 8004606:	887b      	ldrh	r3, [r7, #2]
 8004608:	1ad1      	subs	r1, r2, r3
 800460a:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <BSP_LCD_FillRect+0xe8>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	480b      	ldr	r0, [pc, #44]	@ (800463c <BSP_LCD_FillRect+0xec>)
 8004610:	4613      	mov	r3, r2
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4403      	add	r3, r0
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	9100      	str	r1, [sp, #0]
 8004620:	4643      	mov	r3, r8
 8004622:	4632      	mov	r2, r6
 8004624:	4629      	mov	r1, r5
 8004626:	4620      	mov	r0, r4
 8004628:	f000 f9d8 	bl	80049dc <LL_FillBuffer>
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004636:	bf00      	nop
 8004638:	20000994 	.word	0x20000994
 800463c:	20000998 	.word	0x20000998
 8004640:	200008ac 	.word	0x200008ac

08004644 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004648:	4b0a      	ldr	r3, [pc, #40]	@ (8004674 <BSP_LCD_DisplayOn+0x30>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <BSP_LCD_DisplayOn+0x30>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004658:	2201      	movs	r2, #1
 800465a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800465e:	4806      	ldr	r0, [pc, #24]	@ (8004678 <BSP_LCD_DisplayOn+0x34>)
 8004660:	f003 fa4a 	bl	8007af8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004664:	2201      	movs	r2, #1
 8004666:	2108      	movs	r1, #8
 8004668:	4804      	ldr	r0, [pc, #16]	@ (800467c <BSP_LCD_DisplayOn+0x38>)
 800466a:	f003 fa45 	bl	8007af8 <HAL_GPIO_WritePin>
}
 800466e:	bf00      	nop
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	200008ac 	.word	0x200008ac
 8004678:	40022000 	.word	0x40022000
 800467c:	40022800 	.word	0x40022800

08004680 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b090      	sub	sp, #64	@ 0x40
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800468a:	4b64      	ldr	r3, [pc, #400]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 800468c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468e:	4a63      	ldr	r2, [pc, #396]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004690:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004694:	6453      	str	r3, [r2, #68]	@ 0x44
 8004696:	4b61      	ldr	r3, [pc, #388]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800469e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80046a2:	4b5e      	ldr	r3, [pc, #376]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	4a5d      	ldr	r2, [pc, #372]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ae:	4b5b      	ldr	r3, [pc, #364]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046ba:	4b58      	ldr	r3, [pc, #352]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	4a57      	ldr	r2, [pc, #348]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046c0:	f043 0310 	orr.w	r3, r3, #16
 80046c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046c6:	4b55      	ldr	r3, [pc, #340]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	623b      	str	r3, [r7, #32]
 80046d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80046d2:	4b52      	ldr	r3, [pc, #328]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	4a51      	ldr	r2, [pc, #324]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80046de:	4b4f      	ldr	r3, [pc, #316]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80046ea:	4b4c      	ldr	r3, [pc, #304]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ee:	4a4b      	ldr	r2, [pc, #300]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046f6:	4b49      	ldr	r3, [pc, #292]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004702:	4b46      	ldr	r3, [pc, #280]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	4a45      	ldr	r2, [pc, #276]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004708:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800470c:	6313      	str	r3, [r2, #48]	@ 0x30
 800470e:	4b43      	ldr	r3, [pc, #268]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800471a:	4b40      	ldr	r3, [pc, #256]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	4a3f      	ldr	r2, [pc, #252]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004720:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004724:	6313      	str	r3, [r2, #48]	@ 0x30
 8004726:	4b3d      	ldr	r3, [pc, #244]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004732:	4b3a      	ldr	r3, [pc, #232]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004736:	4a39      	ldr	r2, [pc, #228]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473c:	6313      	str	r3, [r2, #48]	@ 0x30
 800473e:	4b37      	ldr	r3, [pc, #220]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800474a:	4b34      	ldr	r3, [pc, #208]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	4a33      	ldr	r2, [pc, #204]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004750:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004754:	6313      	str	r3, [r2, #48]	@ 0x30
 8004756:	4b31      	ldr	r3, [pc, #196]	@ (800481c <BSP_LCD_MspInit+0x19c>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800475e:	60bb      	str	r3, [r7, #8]
 8004760:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004762:	2310      	movs	r3, #16
 8004764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004766:	2302      	movs	r3, #2
 8004768:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800476e:	2302      	movs	r3, #2
 8004770:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004772:	230e      	movs	r3, #14
 8004774:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004776:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800477a:	4619      	mov	r1, r3
 800477c:	4828      	ldr	r0, [pc, #160]	@ (8004820 <BSP_LCD_MspInit+0x1a0>)
 800477e:	f002 ff03 	bl	8007588 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004782:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004788:	2302      	movs	r3, #2
 800478a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800478c:	2309      	movs	r3, #9
 800478e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004790:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004794:	4619      	mov	r1, r3
 8004796:	4823      	ldr	r0, [pc, #140]	@ (8004824 <BSP_LCD_MspInit+0x1a4>)
 8004798:	f002 fef6 	bl	8007588 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800479c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80047a2:	2302      	movs	r3, #2
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80047a6:	230e      	movs	r3, #14
 80047a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80047aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047ae:	4619      	mov	r1, r3
 80047b0:	481d      	ldr	r0, [pc, #116]	@ (8004828 <BSP_LCD_MspInit+0x1a8>)
 80047b2:	f002 fee9 	bl	8007588 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80047b6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80047c0:	230e      	movs	r3, #14
 80047c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80047c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047c8:	4619      	mov	r1, r3
 80047ca:	4818      	ldr	r0, [pc, #96]	@ (800482c <BSP_LCD_MspInit+0x1ac>)
 80047cc:	f002 fedc 	bl	8007588 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80047d0:	23f7      	movs	r3, #247	@ 0xf7
 80047d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80047d4:	2302      	movs	r3, #2
 80047d6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80047d8:	230e      	movs	r3, #14
 80047da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80047dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047e0:	4619      	mov	r1, r3
 80047e2:	4813      	ldr	r0, [pc, #76]	@ (8004830 <BSP_LCD_MspInit+0x1b0>)
 80047e4:	f002 fed0 	bl	8007588 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80047e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80047ee:	2301      	movs	r3, #1
 80047f0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80047f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047f6:	4619      	mov	r1, r3
 80047f8:	480b      	ldr	r0, [pc, #44]	@ (8004828 <BSP_LCD_MspInit+0x1a8>)
 80047fa:	f002 fec5 	bl	8007588 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80047fe:	2308      	movs	r3, #8
 8004800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004802:	2301      	movs	r3, #1
 8004804:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004806:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800480a:	4619      	mov	r1, r3
 800480c:	4808      	ldr	r0, [pc, #32]	@ (8004830 <BSP_LCD_MspInit+0x1b0>)
 800480e:	f002 febb 	bl	8007588 <HAL_GPIO_Init>
}
 8004812:	bf00      	nop
 8004814:	3740      	adds	r7, #64	@ 0x40
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800
 8004820:	40021000 	.word	0x40021000
 8004824:	40021800 	.word	0x40021800
 8004828:	40022000 	.word	0x40022000
 800482c:	40022400 	.word	0x40022400
 8004830:	40022800 	.word	0x40022800

08004834 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800483e:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <BSP_LCD_ClockConfig+0x34>)
 8004840:	2208      	movs	r2, #8
 8004842:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004844:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <BSP_LCD_ClockConfig+0x34>)
 8004846:	22c0      	movs	r2, #192	@ 0xc0
 8004848:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800484a:	4b07      	ldr	r3, [pc, #28]	@ (8004868 <BSP_LCD_ClockConfig+0x34>)
 800484c:	2205      	movs	r2, #5
 800484e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004850:	4b05      	ldr	r3, [pc, #20]	@ (8004868 <BSP_LCD_ClockConfig+0x34>)
 8004852:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004856:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004858:	4803      	ldr	r0, [pc, #12]	@ (8004868 <BSP_LCD_ClockConfig+0x34>)
 800485a:	f005 f829 	bl	80098b0 <HAL_RCCEx_PeriphCLKConfig>
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200009b0 	.word	0x200009b0

0800486c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	603a      	str	r2, [r7, #0]
 8004876:	80fb      	strh	r3, [r7, #6]
 8004878:	460b      	mov	r3, r1
 800487a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	2300      	movs	r3, #0
 8004882:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004884:	4b53      	ldr	r3, [pc, #332]	@ (80049d4 <DrawChar+0x168>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4953      	ldr	r1, [pc, #332]	@ (80049d8 <DrawChar+0x16c>)
 800488a:	4613      	mov	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	440b      	add	r3, r1
 8004894:	3308      	adds	r3, #8
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	88db      	ldrh	r3, [r3, #6]
 800489a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800489c:	4b4d      	ldr	r3, [pc, #308]	@ (80049d4 <DrawChar+0x168>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	494d      	ldr	r1, [pc, #308]	@ (80049d8 <DrawChar+0x16c>)
 80048a2:	4613      	mov	r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	3308      	adds	r3, #8
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	889b      	ldrh	r3, [r3, #4]
 80048b2:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80048b4:	8a3b      	ldrh	r3, [r7, #16]
 80048b6:	3307      	adds	r3, #7
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da00      	bge.n	80048be <DrawChar+0x52>
 80048bc:	3307      	adds	r3, #7
 80048be:	10db      	asrs	r3, r3, #3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	8a3b      	ldrh	r3, [r7, #16]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	e076      	b.n	80049c2 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80048d4:	8a3b      	ldrh	r3, [r7, #16]
 80048d6:	3307      	adds	r3, #7
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da00      	bge.n	80048de <DrawChar+0x72>
 80048dc:	3307      	adds	r3, #7
 80048de:	10db      	asrs	r3, r3, #3
 80048e0:	461a      	mov	r2, r3
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	fb02 f303 	mul.w	r3, r2, r3
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80048ee:	8a3b      	ldrh	r3, [r7, #16]
 80048f0:	3307      	adds	r3, #7
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	da00      	bge.n	80048f8 <DrawChar+0x8c>
 80048f6:	3307      	adds	r3, #7
 80048f8:	10db      	asrs	r3, r3, #3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d002      	beq.n	8004904 <DrawChar+0x98>
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d004      	beq.n	800490c <DrawChar+0xa0>
 8004902:	e00c      	b.n	800491e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	617b      	str	r3, [r7, #20]
      break;
 800490a:	e016      	b.n	800493a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	3201      	adds	r2, #1
 8004916:	7812      	ldrb	r2, [r2, #0]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]
      break;
 800491c:	e00d      	b.n	800493a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	041a      	lsls	r2, r3, #16
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	3301      	adds	r3, #1
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	4313      	orrs	r3, r2
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	3202      	adds	r2, #2
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
      break;
 8004938:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800493a:	2300      	movs	r3, #0
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e036      	b.n	80049ae <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004940:	8a3a      	ldrh	r2, [r7, #16]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	1ad2      	subs	r2, r2, r3
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	4413      	add	r3, r2
 800494a:	3b01      	subs	r3, #1
 800494c:	2201      	movs	r2, #1
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	461a      	mov	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d012      	beq.n	8004982 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	b29a      	uxth	r2, r3
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	4413      	add	r3, r2
 8004964:	b298      	uxth	r0, r3
 8004966:	4b1b      	ldr	r3, [pc, #108]	@ (80049d4 <DrawChar+0x168>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	491b      	ldr	r1, [pc, #108]	@ (80049d8 <DrawChar+0x16c>)
 800496c:	4613      	mov	r3, r2
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	4619      	mov	r1, r3
 800497c:	f7ff fcee 	bl	800435c <BSP_LCD_DrawPixel>
 8004980:	e012      	b.n	80049a8 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	b29a      	uxth	r2, r3
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	4413      	add	r3, r2
 800498a:	b298      	uxth	r0, r3
 800498c:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <DrawChar+0x168>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4911      	ldr	r1, [pc, #68]	@ (80049d8 <DrawChar+0x16c>)
 8004992:	4613      	mov	r3, r2
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	3304      	adds	r3, #4
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	88bb      	ldrh	r3, [r7, #4]
 80049a2:	4619      	mov	r1, r3
 80049a4:	f7ff fcda 	bl	800435c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	3301      	adds	r3, #1
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	8a3b      	ldrh	r3, [r7, #16]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d3c4      	bcc.n	8004940 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80049b6:	88bb      	ldrh	r3, [r7, #4]
 80049b8:	3301      	adds	r3, #1
 80049ba:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	3301      	adds	r3, #1
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	8a7b      	ldrh	r3, [r7, #18]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d384      	bcc.n	80048d4 <DrawChar+0x68>
  }
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	3720      	adds	r7, #32
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000994 	.word	0x20000994
 80049d8:	20000998 	.word	0x20000998

080049dc <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80049ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004a64 <LL_FillBuffer+0x88>)
 80049ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80049f0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80049f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a68 <LL_FillBuffer+0x8c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a6c <LL_FillBuffer+0x90>)
 80049f8:	2134      	movs	r1, #52	@ 0x34
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3348      	adds	r3, #72	@ 0x48
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d103      	bne.n	8004a10 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004a08:	4b16      	ldr	r3, [pc, #88]	@ (8004a64 <LL_FillBuffer+0x88>)
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	609a      	str	r2, [r3, #8]
 8004a0e:	e002      	b.n	8004a16 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004a10:	4b14      	ldr	r3, [pc, #80]	@ (8004a64 <LL_FillBuffer+0x88>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004a16:	4a13      	ldr	r2, [pc, #76]	@ (8004a64 <LL_FillBuffer+0x88>)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004a1c:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <LL_FillBuffer+0x88>)
 8004a1e:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <LL_FillBuffer+0x94>)
 8004a20:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004a22:	4810      	ldr	r0, [pc, #64]	@ (8004a64 <LL_FillBuffer+0x88>)
 8004a24:	f002 fa14 	bl	8006e50 <HAL_DMA2D_Init>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d115      	bne.n	8004a5a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	480c      	ldr	r0, [pc, #48]	@ (8004a64 <LL_FillBuffer+0x88>)
 8004a32:	f002 fc7b 	bl	800732c <HAL_DMA2D_ConfigLayer>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10e      	bne.n	8004a5a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69f9      	ldr	r1, [r7, #28]
 8004a46:	4807      	ldr	r0, [pc, #28]	@ (8004a64 <LL_FillBuffer+0x88>)
 8004a48:	f002 fa4c 	bl	8006ee4 <HAL_DMA2D_Start>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004a52:	210a      	movs	r1, #10
 8004a54:	4803      	ldr	r0, [pc, #12]	@ (8004a64 <LL_FillBuffer+0x88>)
 8004a56:	f002 fa70 	bl	8006f3a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000954 	.word	0x20000954
 8004a68:	20000994 	.word	0x20000994
 8004a6c:	200008ac 	.word	0x200008ac
 8004a70:	4002b000 	.word	0x4002b000

08004a74 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8004a82:	4b1c      	ldr	r3, [pc, #112]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004a84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004a88:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004a90:	4b18      	ldr	r3, [pc, #96]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004a96:	4b17      	ldr	r3, [pc, #92]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004a9c:	4b15      	ldr	r3, [pc, #84]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004a9e:	22ff      	movs	r2, #255	@ 0xff
 8004aa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8004aa2:	4a14      	ldr	r2, [pc, #80]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004aa8:	4b12      	ldr	r3, [pc, #72]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8004aae:	4b11      	ldr	r3, [pc, #68]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004ab0:	4a11      	ldr	r2, [pc, #68]	@ (8004af8 <LL_ConvertLineToARGB8888+0x84>)
 8004ab2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004ab4:	480f      	ldr	r0, [pc, #60]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004ab6:	f002 f9cb 	bl	8006e50 <HAL_DMA2D_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d115      	bne.n	8004aec <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	480c      	ldr	r0, [pc, #48]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004ac4:	f002 fc32 	bl	800732c <HAL_DMA2D_ConfigLayer>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10e      	bne.n	8004aec <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4806      	ldr	r0, [pc, #24]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004ada:	f002 fa03 	bl	8006ee4 <HAL_DMA2D_Start>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004ae4:	210a      	movs	r1, #10
 8004ae6:	4803      	ldr	r0, [pc, #12]	@ (8004af4 <LL_ConvertLineToARGB8888+0x80>)
 8004ae8:	f002 fa27 	bl	8006f3a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000954 	.word	0x20000954
 8004af8:	4002b000 	.word	0x4002b000

08004afc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004b00:	4b29      	ldr	r3, [pc, #164]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b02:	4a2a      	ldr	r2, [pc, #168]	@ (8004bac <BSP_SDRAM_Init+0xb0>)
 8004b04:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004b06:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb0 <BSP_SDRAM_Init+0xb4>)
 8004b08:	2202      	movs	r2, #2
 8004b0a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004b0c:	4b28      	ldr	r3, [pc, #160]	@ (8004bb0 <BSP_SDRAM_Init+0xb4>)
 8004b0e:	2207      	movs	r2, #7
 8004b10:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004b12:	4b27      	ldr	r3, [pc, #156]	@ (8004bb0 <BSP_SDRAM_Init+0xb4>)
 8004b14:	2204      	movs	r2, #4
 8004b16:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004b18:	4b25      	ldr	r3, [pc, #148]	@ (8004bb0 <BSP_SDRAM_Init+0xb4>)
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004b1e:	4b24      	ldr	r3, [pc, #144]	@ (8004bb0 <BSP_SDRAM_Init+0xb4>)
 8004b20:	2202      	movs	r2, #2
 8004b22:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004b24:	4b22      	ldr	r3, [pc, #136]	@ (8004bb0 <BSP_SDRAM_Init+0xb4>)
 8004b26:	2202      	movs	r2, #2
 8004b28:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004b2a:	4b21      	ldr	r3, [pc, #132]	@ (8004bb0 <BSP_SDRAM_Init+0xb4>)
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004b30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004b36:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b3e:	2204      	movs	r2, #4
 8004b40:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004b42:	4b19      	ldr	r3, [pc, #100]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b44:	2210      	movs	r2, #16
 8004b46:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004b48:	4b17      	ldr	r3, [pc, #92]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b4a:	2240      	movs	r2, #64	@ 0x40
 8004b4c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004b4e:	4b16      	ldr	r3, [pc, #88]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b54:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004b56:	4b14      	ldr	r3, [pc, #80]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004b5c:	4b12      	ldr	r3, [pc, #72]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b62:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004b64:	4b10      	ldr	r3, [pc, #64]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004b6a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004b72:	2100      	movs	r1, #0
 8004b74:	480c      	ldr	r0, [pc, #48]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b76:	f000 f87f 	bl	8004c78 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004b7a:	490d      	ldr	r1, [pc, #52]	@ (8004bb0 <BSP_SDRAM_Init+0xb4>)
 8004b7c:	480a      	ldr	r0, [pc, #40]	@ (8004ba8 <BSP_SDRAM_Init+0xac>)
 8004b7e:	f005 fe5d 	bl	800a83c <HAL_SDRAM_Init>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004b88:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb4 <BSP_SDRAM_Init+0xb8>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	e002      	b.n	8004b96 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004b90:	4b08      	ldr	r3, [pc, #32]	@ (8004bb4 <BSP_SDRAM_Init+0xb8>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004b96:	f240 6003 	movw	r0, #1539	@ 0x603
 8004b9a:	f000 f80d 	bl	8004bb8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004b9e:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <BSP_SDRAM_Init+0xb8>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000a34 	.word	0x20000a34
 8004bac:	a0000140 	.word	0xa0000140
 8004bb0:	20000a68 	.word	0x20000a68
 8004bb4:	20000048 	.word	0x20000048

08004bb8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bca:	4b29      	ldr	r3, [pc, #164]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bcc:	2210      	movs	r2, #16
 8004bce:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004bd0:	4b27      	ldr	r3, [pc, #156]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004bd6:	4b26      	ldr	r3, [pc, #152]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004bdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004be0:	4923      	ldr	r1, [pc, #140]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004be2:	4824      	ldr	r0, [pc, #144]	@ (8004c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004be4:	f005 fe5e 	bl	800a8a4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004be8:	2001      	movs	r0, #1
 8004bea:	f001 f993 	bl	8005f14 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004bee:	4b20      	ldr	r3, [pc, #128]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004c00:	4b1b      	ldr	r3, [pc, #108]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c0a:	4919      	ldr	r1, [pc, #100]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c0c:	4819      	ldr	r0, [pc, #100]	@ (8004c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c0e:	f005 fe49 	bl	800a8a4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004c12:	4b17      	ldr	r3, [pc, #92]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c14:	2203      	movs	r2, #3
 8004c16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c18:	4b15      	ldr	r3, [pc, #84]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c1a:	2210      	movs	r2, #16
 8004c1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004c1e:	4b14      	ldr	r3, [pc, #80]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c20:	2208      	movs	r2, #8
 8004c22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004c24:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c2e:	4910      	ldr	r1, [pc, #64]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c30:	4810      	ldr	r0, [pc, #64]	@ (8004c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c32:	f005 fe37 	bl	800a8a4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004c36:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004c3a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c3e:	2204      	movs	r2, #4
 8004c40:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c42:	4b0b      	ldr	r3, [pc, #44]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c44:	2210      	movs	r2, #16
 8004c46:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a07      	ldr	r2, [pc, #28]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c52:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c58:	4905      	ldr	r1, [pc, #20]	@ (8004c70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c5a:	4806      	ldr	r0, [pc, #24]	@ (8004c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c5c:	f005 fe22 	bl	800a8a4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4804      	ldr	r0, [pc, #16]	@ (8004c74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c64:	f005 fe53 	bl	800a90e <HAL_SDRAM_ProgramRefreshRate>
}
 8004c68:	bf00      	nop
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	20000a84 	.word	0x20000a84
 8004c74:	20000a34 	.word	0x20000a34

08004c78 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b090      	sub	sp, #64	@ 0x40
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004c82:	4b70      	ldr	r3, [pc, #448]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c86:	4a6f      	ldr	r2, [pc, #444]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	6393      	str	r3, [r2, #56]	@ 0x38
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9e:	4a69      	ldr	r2, [pc, #420]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004ca0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ca6:	4b67      	ldr	r3, [pc, #412]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cb2:	4b64      	ldr	r3, [pc, #400]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb6:	4a63      	ldr	r2, [pc, #396]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004cb8:	f043 0304 	orr.w	r3, r3, #4
 8004cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cbe:	4b61      	ldr	r3, [pc, #388]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	623b      	str	r3, [r7, #32]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cca:	4b5e      	ldr	r3, [pc, #376]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	4a5d      	ldr	r2, [pc, #372]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004cd0:	f043 0308 	orr.w	r3, r3, #8
 8004cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ce2:	4b58      	ldr	r3, [pc, #352]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce6:	4a57      	ldr	r2, [pc, #348]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004ce8:	f043 0310 	orr.w	r3, r3, #16
 8004cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cee:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cfa:	4b52      	ldr	r3, [pc, #328]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfe:	4a51      	ldr	r2, [pc, #324]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004d00:	f043 0320 	orr.w	r3, r3, #32
 8004d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d06:	4b4f      	ldr	r3, [pc, #316]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d12:	4b4c      	ldr	r3, [pc, #304]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d16:	4a4b      	ldr	r2, [pc, #300]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d1e:	4b49      	ldr	r3, [pc, #292]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d2a:	4b46      	ldr	r3, [pc, #280]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	4a45      	ldr	r2, [pc, #276]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d36:	4b43      	ldr	r3, [pc, #268]	@ (8004e44 <BSP_SDRAM_MspInit+0x1cc>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004d42:	2302      	movs	r3, #2
 8004d44:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004d46:	2301      	movs	r3, #1
 8004d48:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004d4e:	230c      	movs	r3, #12
 8004d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004d52:	2308      	movs	r3, #8
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004d56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	483a      	ldr	r0, [pc, #232]	@ (8004e48 <BSP_SDRAM_MspInit+0x1d0>)
 8004d5e:	f002 fc13 	bl	8007588 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004d62:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004d68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4837      	ldr	r0, [pc, #220]	@ (8004e4c <BSP_SDRAM_MspInit+0x1d4>)
 8004d70:	f002 fc0a 	bl	8007588 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004d74:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4833      	ldr	r0, [pc, #204]	@ (8004e50 <BSP_SDRAM_MspInit+0x1d8>)
 8004d82:	f002 fc01 	bl	8007588 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004d86:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004d8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d90:	4619      	mov	r1, r3
 8004d92:	4830      	ldr	r0, [pc, #192]	@ (8004e54 <BSP_SDRAM_MspInit+0x1dc>)
 8004d94:	f002 fbf8 	bl	8007588 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004d98:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004d9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004da2:	4619      	mov	r1, r3
 8004da4:	482c      	ldr	r0, [pc, #176]	@ (8004e58 <BSP_SDRAM_MspInit+0x1e0>)
 8004da6:	f002 fbef 	bl	8007588 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004daa:	2328      	movs	r3, #40	@ 0x28
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004db2:	4619      	mov	r1, r3
 8004db4:	4829      	ldr	r0, [pc, #164]	@ (8004e5c <BSP_SDRAM_MspInit+0x1e4>)
 8004db6:	f002 fbe7 	bl	8007588 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004dba:	4b29      	ldr	r3, [pc, #164]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004dc0:	4b27      	ldr	r3, [pc, #156]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004dc2:	2280      	movs	r2, #128	@ 0x80
 8004dc4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004dc6:	4b26      	ldr	r3, [pc, #152]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dcc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004dce:	4b24      	ldr	r3, [pc, #144]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004dd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004dd4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004dd6:	4b22      	ldr	r3, [pc, #136]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004dd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ddc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004dde:	4b20      	ldr	r3, [pc, #128]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004de0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004de4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004de6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004dec:	4b1c      	ldr	r3, [pc, #112]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004dee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004df2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004df4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004dfa:	4b19      	ldr	r3, [pc, #100]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004e00:	4b17      	ldr	r3, [pc, #92]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004e06:	4b16      	ldr	r3, [pc, #88]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004e0c:	4b14      	ldr	r3, [pc, #80]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004e0e:	4a15      	ldr	r2, [pc, #84]	@ (8004e64 <BSP_SDRAM_MspInit+0x1ec>)
 8004e10:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a12      	ldr	r2, [pc, #72]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e18:	4a11      	ldr	r2, [pc, #68]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004e1e:	4810      	ldr	r0, [pc, #64]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004e20:	f001 ff06 	bl	8006c30 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004e24:	480e      	ldr	r0, [pc, #56]	@ (8004e60 <BSP_SDRAM_MspInit+0x1e8>)
 8004e26:	f001 fe55 	bl	8006ad4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	210f      	movs	r1, #15
 8004e2e:	2038      	movs	r0, #56	@ 0x38
 8004e30:	f001 fd46 	bl	80068c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004e34:	2038      	movs	r0, #56	@ 0x38
 8004e36:	f001 fd5f 	bl	80068f8 <HAL_NVIC_EnableIRQ>
}
 8004e3a:	bf00      	nop
 8004e3c:	3740      	adds	r7, #64	@ 0x40
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023800 	.word	0x40023800
 8004e48:	40020800 	.word	0x40020800
 8004e4c:	40020c00 	.word	0x40020c00
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40021400 	.word	0x40021400
 8004e58:	40021800 	.word	0x40021800
 8004e5c:	40021c00 	.word	0x40021c00
 8004e60:	20000a94 	.word	0x20000a94
 8004e64:	40026410 	.word	0x40026410

08004e68 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4603      	mov	r3, r0
 8004e70:	460a      	mov	r2, r1
 8004e72:	80fb      	strh	r3, [r7, #6]
 8004e74:	4613      	mov	r3, r2
 8004e76:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004e7c:	4a14      	ldr	r2, [pc, #80]	@ (8004ed0 <BSP_TS_Init+0x68>)
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004e82:	4a14      	ldr	r2, [pc, #80]	@ (8004ed4 <BSP_TS_Init+0x6c>)
 8004e84:	88bb      	ldrh	r3, [r7, #4]
 8004e86:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004e88:	4b13      	ldr	r3, [pc, #76]	@ (8004ed8 <BSP_TS_Init+0x70>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2070      	movs	r0, #112	@ 0x70
 8004e8e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004e90:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <BSP_TS_Init+0x70>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2070      	movs	r0, #112	@ 0x70
 8004e96:	4798      	blx	r3
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b51      	cmp	r3, #81	@ 0x51
 8004e9c:	d110      	bne.n	8004ec0 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004edc <BSP_TS_Init+0x74>)
 8004ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <BSP_TS_Init+0x70>)
 8004ea2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee0 <BSP_TS_Init+0x78>)
 8004ea6:	2270      	movs	r2, #112	@ 0x70
 8004ea8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee4 <BSP_TS_Init+0x7c>)
 8004eac:	2208      	movs	r2, #8
 8004eae:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <BSP_TS_Init+0x74>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee0 <BSP_TS_Init+0x78>)
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4798      	blx	r3
 8004ebe:	e001      	b.n	8004ec4 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000af8 	.word	0x20000af8
 8004ed4:	20000afa 	.word	0x20000afa
 8004ed8:	20000010 	.word	0x20000010
 8004edc:	20000af4 	.word	0x20000af4
 8004ee0:	20000afd 	.word	0x20000afd
 8004ee4:	20000afc 	.word	0x20000afc

08004ee8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b097      	sub	sp, #92	@ 0x5c
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004f02:	4bb8      	ldr	r3, [pc, #736]	@ (80051e4 <BSP_TS_GetState+0x2fc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	4ab7      	ldr	r2, [pc, #732]	@ (80051e8 <BSP_TS_GetState+0x300>)
 8004f0a:	7812      	ldrb	r2, [r2, #0]
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	4798      	blx	r3
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 8198 	beq.w	8005252 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f26:	e187      	b.n	8005238 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004f28:	4bae      	ldr	r3, [pc, #696]	@ (80051e4 <BSP_TS_GetState+0x2fc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	4aae      	ldr	r2, [pc, #696]	@ (80051e8 <BSP_TS_GetState+0x300>)
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	4614      	mov	r4, r2
 8004f34:	f107 0120 	add.w	r1, r7, #32
 8004f38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f3a:	0052      	lsls	r2, r2, #1
 8004f3c:	1888      	adds	r0, r1, r2
 8004f3e:	f107 0114 	add.w	r1, r7, #20
 8004f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f44:	0052      	lsls	r2, r2, #1
 8004f46:	440a      	add	r2, r1
 8004f48:	4601      	mov	r1, r0
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004f4e:	4ba7      	ldr	r3, [pc, #668]	@ (80051ec <BSP_TS_GetState+0x304>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d117      	bne.n	8004f86 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	3350      	adds	r3, #80	@ 0x50
 8004f5c:	443b      	add	r3, r7
 8004f5e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	3350      	adds	r3, #80	@ 0x50
 8004f68:	443b      	add	r3, r7
 8004f6a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	3350      	adds	r3, #80	@ 0x50
 8004f74:	443b      	add	r3, r7
 8004f76:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004f7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	3350      	adds	r3, #80	@ 0x50
 8004f80:	443b      	add	r3, r7
 8004f82:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004f86:	4b99      	ldr	r3, [pc, #612]	@ (80051ec <BSP_TS_GetState+0x304>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00e      	beq.n	8004fb0 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	3350      	adds	r3, #80	@ 0x50
 8004f98:	443b      	add	r3, r7
 8004f9a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004f9e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	3350      	adds	r3, #80	@ 0x50
 8004faa:	443b      	add	r3, r7
 8004fac:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004fb0:	4b8e      	ldr	r3, [pc, #568]	@ (80051ec <BSP_TS_GetState+0x304>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	3350      	adds	r3, #80	@ 0x50
 8004fc2:	443b      	add	r3, r7
 8004fc4:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004fc8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	3350      	adds	r3, #80	@ 0x50
 8004fd4:	443b      	add	r3, r7
 8004fd6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004fda:	4b84      	ldr	r3, [pc, #528]	@ (80051ec <BSP_TS_GetState+0x304>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d017      	beq.n	8005016 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	3350      	adds	r3, #80	@ 0x50
 8004fec:	443b      	add	r3, r7
 8004fee:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	3350      	adds	r3, #80	@ 0x50
 8004ff8:	443b      	add	r3, r7
 8004ffa:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	3350      	adds	r3, #80	@ 0x50
 8005004:	443b      	add	r3, r7
 8005006:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800500a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	3350      	adds	r3, #80	@ 0x50
 8005010:	443b      	add	r3, r7
 8005012:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8005016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	3350      	adds	r3, #80	@ 0x50
 800501c:	443b      	add	r3, r7
 800501e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005022:	4619      	mov	r1, r3
 8005024:	4a72      	ldr	r2, [pc, #456]	@ (80051f0 <BSP_TS_GetState+0x308>)
 8005026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502c:	4299      	cmp	r1, r3
 800502e:	d90d      	bls.n	800504c <BSP_TS_GetState+0x164>
 8005030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	3350      	adds	r3, #80	@ 0x50
 8005036:	443b      	add	r3, r7
 8005038:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800503c:	496c      	ldr	r1, [pc, #432]	@ (80051f0 <BSP_TS_GetState+0x308>)
 800503e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005040:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005044:	b29b      	uxth	r3, r3
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	b29b      	uxth	r3, r3
 800504a:	e00c      	b.n	8005066 <BSP_TS_GetState+0x17e>
 800504c:	4a68      	ldr	r2, [pc, #416]	@ (80051f0 <BSP_TS_GetState+0x308>)
 800504e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005054:	b29a      	uxth	r2, r3
 8005056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	3350      	adds	r3, #80	@ 0x50
 800505c:	443b      	add	r3, r7
 800505e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	b29b      	uxth	r3, r3
 8005066:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800506a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	3350      	adds	r3, #80	@ 0x50
 8005070:	443b      	add	r3, r7
 8005072:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005076:	4619      	mov	r1, r3
 8005078:	4a5e      	ldr	r2, [pc, #376]	@ (80051f4 <BSP_TS_GetState+0x30c>)
 800507a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	4299      	cmp	r1, r3
 8005082:	d90d      	bls.n	80050a0 <BSP_TS_GetState+0x1b8>
 8005084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	3350      	adds	r3, #80	@ 0x50
 800508a:	443b      	add	r3, r7
 800508c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8005090:	4958      	ldr	r1, [pc, #352]	@ (80051f4 <BSP_TS_GetState+0x30c>)
 8005092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005094:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005098:	b29b      	uxth	r3, r3
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	b29b      	uxth	r3, r3
 800509e:	e00c      	b.n	80050ba <BSP_TS_GetState+0x1d2>
 80050a0:	4a54      	ldr	r2, [pc, #336]	@ (80051f4 <BSP_TS_GetState+0x30c>)
 80050a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ac:	005b      	lsls	r3, r3, #1
 80050ae:	3350      	adds	r3, #80	@ 0x50
 80050b0:	443b      	add	r3, r7
 80050b2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 80050be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80050c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80050c6:	4413      	add	r3, r2
 80050c8:	2b05      	cmp	r3, #5
 80050ca:	dd15      	ble.n	80050f8 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80050cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	3350      	adds	r3, #80	@ 0x50
 80050d2:	443b      	add	r3, r7
 80050d4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80050d8:	4619      	mov	r1, r3
 80050da:	4a45      	ldr	r2, [pc, #276]	@ (80051f0 <BSP_TS_GetState+0x308>)
 80050dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80050e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	3350      	adds	r3, #80	@ 0x50
 80050e8:	443b      	add	r3, r7
 80050ea:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80050ee:	4619      	mov	r1, r3
 80050f0:	4a40      	ldr	r2, [pc, #256]	@ (80051f4 <BSP_TS_GetState+0x30c>)
 80050f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80050f8:	4b3b      	ldr	r3, [pc, #236]	@ (80051e8 <BSP_TS_GetState+0x300>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b70      	cmp	r3, #112	@ 0x70
 80050fe:	d119      	bne.n	8005134 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	3350      	adds	r3, #80	@ 0x50
 8005106:	443b      	add	r3, r7
 8005108:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	4413      	add	r3, r2
 8005114:	460a      	mov	r2, r1
 8005116:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8005118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	3350      	adds	r3, #80	@ 0x50
 800511e:	443b      	add	r3, r7
 8005120:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005128:	3304      	adds	r3, #4
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	4413      	add	r3, r2
 800512e:	460a      	mov	r2, r1
 8005130:	809a      	strh	r2, [r3, #4]
 8005132:	e022      	b.n	800517a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005134:	4b30      	ldr	r3, [pc, #192]	@ (80051f8 <BSP_TS_GetState+0x310>)
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	4619      	mov	r1, r3
 800513a:	4a2d      	ldr	r2, [pc, #180]	@ (80051f0 <BSP_TS_GetState+0x308>)
 800513c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800513e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005142:	fb01 f303 	mul.w	r3, r1, r3
 8005146:	0b1b      	lsrs	r3, r3, #12
 8005148:	b299      	uxth	r1, r3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	460a      	mov	r2, r1
 8005154:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8005156:	4b29      	ldr	r3, [pc, #164]	@ (80051fc <BSP_TS_GetState+0x314>)
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	4619      	mov	r1, r3
 800515c:	4a25      	ldr	r2, [pc, #148]	@ (80051f4 <BSP_TS_GetState+0x30c>)
 800515e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005164:	fb01 f303 	mul.w	r3, r1, r3
 8005168:	0b1b      	lsrs	r3, r3, #12
 800516a:	b299      	uxth	r1, r3
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005170:	3304      	adds	r3, #4
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4413      	add	r3, r2
 8005176:	460a      	mov	r2, r1
 8005178:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800517a:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <BSP_TS_GetState+0x300>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f107 010c 	add.w	r1, r7, #12
 8005184:	f107 0210 	add.w	r2, r7, #16
 8005188:	f107 0308 	add.w	r3, r7, #8
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	460b      	mov	r3, r1
 8005190:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005192:	f7fd fb63 	bl	800285c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	b2d9      	uxtb	r1, r3
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800519e:	4413      	add	r3, r2
 80051a0:	3316      	adds	r3, #22
 80051a2:	460a      	mov	r2, r1
 80051a4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	b2d9      	uxtb	r1, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051ae:	4413      	add	r3, r2
 80051b0:	3320      	adds	r3, #32
 80051b2:	460a      	mov	r2, r1
 80051b4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d836      	bhi.n	800522a <BSP_TS_GetState+0x342>
 80051bc:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <BSP_TS_GetState+0x2dc>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	080051d5 	.word	0x080051d5
 80051c8:	08005201 	.word	0x08005201
 80051cc:	0800520f 	.word	0x0800520f
 80051d0:	0800521d 	.word	0x0800521d
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051d8:	4413      	add	r3, r2
 80051da:	331b      	adds	r3, #27
 80051dc:	2201      	movs	r2, #1
 80051de:	701a      	strb	r2, [r3, #0]
          break;
 80051e0:	e027      	b.n	8005232 <BSP_TS_GetState+0x34a>
 80051e2:	bf00      	nop
 80051e4:	20000af4 	.word	0x20000af4
 80051e8:	20000afd 	.word	0x20000afd
 80051ec:	20000afc 	.word	0x20000afc
 80051f0:	20000b00 	.word	0x20000b00
 80051f4:	20000b14 	.word	0x20000b14
 80051f8:	20000af8 	.word	0x20000af8
 80051fc:	20000afa 	.word	0x20000afa
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005204:	4413      	add	r3, r2
 8005206:	331b      	adds	r3, #27
 8005208:	2202      	movs	r2, #2
 800520a:	701a      	strb	r2, [r3, #0]
          break;
 800520c:	e011      	b.n	8005232 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005212:	4413      	add	r3, r2
 8005214:	331b      	adds	r3, #27
 8005216:	2203      	movs	r2, #3
 8005218:	701a      	strb	r2, [r3, #0]
          break;
 800521a:	e00a      	b.n	8005232 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005220:	4413      	add	r3, r2
 8005222:	331b      	adds	r3, #27
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
          break;
 8005228:	e003      	b.n	8005232 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8005230:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005234:	3301      	adds	r3, #1
 8005236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	461a      	mov	r2, r3
 800523e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005240:	4293      	cmp	r3, r2
 8005242:	f4ff ae71 	bcc.w	8004f28 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f80a 	bl	8005260 <BSP_TS_Get_GestureId>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005252:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8005256:	4618      	mov	r0, r3
 8005258:	3754      	adds	r7, #84	@ 0x54
 800525a:	46bd      	mov	sp, r7
 800525c:	bd90      	pop	{r4, r7, pc}
 800525e:	bf00      	nop

08005260 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800526c:	2300      	movs	r3, #0
 800526e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005270:	4b3b      	ldr	r3, [pc, #236]	@ (8005360 <BSP_TS_Get_GestureId+0x100>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	461a      	mov	r2, r3
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f7fd fad4 	bl	800282a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b49      	cmp	r3, #73	@ 0x49
 8005286:	d05e      	beq.n	8005346 <BSP_TS_Get_GestureId+0xe6>
 8005288:	2b49      	cmp	r3, #73	@ 0x49
 800528a:	d860      	bhi.n	800534e <BSP_TS_Get_GestureId+0xee>
 800528c:	2b1c      	cmp	r3, #28
 800528e:	d83f      	bhi.n	8005310 <BSP_TS_Get_GestureId+0xb0>
 8005290:	2b1c      	cmp	r3, #28
 8005292:	d85c      	bhi.n	800534e <BSP_TS_Get_GestureId+0xee>
 8005294:	a201      	add	r2, pc, #4	@ (adr r2, 800529c <BSP_TS_Get_GestureId+0x3c>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	08005317 	.word	0x08005317
 80052a0:	0800534f 	.word	0x0800534f
 80052a4:	0800534f 	.word	0x0800534f
 80052a8:	0800534f 	.word	0x0800534f
 80052ac:	0800534f 	.word	0x0800534f
 80052b0:	0800534f 	.word	0x0800534f
 80052b4:	0800534f 	.word	0x0800534f
 80052b8:	0800534f 	.word	0x0800534f
 80052bc:	0800534f 	.word	0x0800534f
 80052c0:	0800534f 	.word	0x0800534f
 80052c4:	0800534f 	.word	0x0800534f
 80052c8:	0800534f 	.word	0x0800534f
 80052cc:	0800534f 	.word	0x0800534f
 80052d0:	0800534f 	.word	0x0800534f
 80052d4:	0800534f 	.word	0x0800534f
 80052d8:	0800534f 	.word	0x0800534f
 80052dc:	0800531f 	.word	0x0800531f
 80052e0:	0800534f 	.word	0x0800534f
 80052e4:	0800534f 	.word	0x0800534f
 80052e8:	0800534f 	.word	0x0800534f
 80052ec:	08005327 	.word	0x08005327
 80052f0:	0800534f 	.word	0x0800534f
 80052f4:	0800534f 	.word	0x0800534f
 80052f8:	0800534f 	.word	0x0800534f
 80052fc:	0800532f 	.word	0x0800532f
 8005300:	0800534f 	.word	0x0800534f
 8005304:	0800534f 	.word	0x0800534f
 8005308:	0800534f 	.word	0x0800534f
 800530c:	08005337 	.word	0x08005337
 8005310:	2b40      	cmp	r3, #64	@ 0x40
 8005312:	d014      	beq.n	800533e <BSP_TS_Get_GestureId+0xde>
 8005314:	e01b      	b.n	800534e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800531c:	e01a      	b.n	8005354 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005324:	e016      	b.n	8005354 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800532c:	e012      	b.n	8005354 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2203      	movs	r2, #3
 8005332:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005334:	e00e      	b.n	8005354 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2204      	movs	r2, #4
 800533a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800533c:	e00a      	b.n	8005354 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2205      	movs	r2, #5
 8005342:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005344:	e006      	b.n	8005354 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2206      	movs	r2, #6
 800534a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800534c:	e002      	b.n	8005354 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
      break;
 8005352:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20000afd 	.word	0x20000afd

08005364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800536a:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <HAL_MspInit+0x4c>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536e:	4a10      	ldr	r2, [pc, #64]	@ (80053b0 <HAL_MspInit+0x4c>)
 8005370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005374:	6413      	str	r3, [r2, #64]	@ 0x40
 8005376:	4b0e      	ldr	r3, [pc, #56]	@ (80053b0 <HAL_MspInit+0x4c>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005382:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <HAL_MspInit+0x4c>)
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	4a0a      	ldr	r2, [pc, #40]	@ (80053b0 <HAL_MspInit+0x4c>)
 8005388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800538c:	6453      	str	r3, [r2, #68]	@ 0x44
 800538e:	4b08      	ldr	r3, [pc, #32]	@ (80053b0 <HAL_MspInit+0x4c>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800539a:	2200      	movs	r2, #0
 800539c:	210f      	movs	r1, #15
 800539e:	f06f 0001 	mvn.w	r0, #1
 80053a2:	f001 fa8d 	bl	80068c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800

080053b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08e      	sub	sp, #56	@ 0x38
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80053c4:	4b33      	ldr	r3, [pc, #204]	@ (8005494 <HAL_InitTick+0xe0>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c8:	4a32      	ldr	r2, [pc, #200]	@ (8005494 <HAL_InitTick+0xe0>)
 80053ca:	f043 0310 	orr.w	r3, r3, #16
 80053ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80053d0:	4b30      	ldr	r3, [pc, #192]	@ (8005494 <HAL_InitTick+0xe0>)
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80053dc:	f107 0210 	add.w	r2, r7, #16
 80053e0:	f107 0314 	add.w	r3, r7, #20
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f004 fa30 	bl	800984c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80053f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d103      	bne.n	80053fe <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80053f6:	f004 fa01 	bl	80097fc <HAL_RCC_GetPCLK1Freq>
 80053fa:	6378      	str	r0, [r7, #52]	@ 0x34
 80053fc:	e004      	b.n	8005408 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80053fe:	f004 f9fd 	bl	80097fc <HAL_RCC_GetPCLK1Freq>
 8005402:	4603      	mov	r3, r0
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540a:	4a23      	ldr	r2, [pc, #140]	@ (8005498 <HAL_InitTick+0xe4>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	0c9b      	lsrs	r3, r3, #18
 8005412:	3b01      	subs	r3, #1
 8005414:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005416:	4b21      	ldr	r3, [pc, #132]	@ (800549c <HAL_InitTick+0xe8>)
 8005418:	4a21      	ldr	r2, [pc, #132]	@ (80054a0 <HAL_InitTick+0xec>)
 800541a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800541c:	4b1f      	ldr	r3, [pc, #124]	@ (800549c <HAL_InitTick+0xe8>)
 800541e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005422:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005424:	4a1d      	ldr	r2, [pc, #116]	@ (800549c <HAL_InitTick+0xe8>)
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800542a:	4b1c      	ldr	r3, [pc, #112]	@ (800549c <HAL_InitTick+0xe8>)
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005430:	4b1a      	ldr	r3, [pc, #104]	@ (800549c <HAL_InitTick+0xe8>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005436:	4b19      	ldr	r3, [pc, #100]	@ (800549c <HAL_InitTick+0xe8>)
 8005438:	2200      	movs	r2, #0
 800543a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800543c:	4817      	ldr	r0, [pc, #92]	@ (800549c <HAL_InitTick+0xe8>)
 800543e:	f005 fb39 	bl	800aab4 <HAL_TIM_Base_Init>
 8005442:	4603      	mov	r3, r0
 8005444:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800544c:	2b00      	cmp	r3, #0
 800544e:	d11b      	bne.n	8005488 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005450:	4812      	ldr	r0, [pc, #72]	@ (800549c <HAL_InitTick+0xe8>)
 8005452:	f005 fb87 	bl	800ab64 <HAL_TIM_Base_Start_IT>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800545c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005460:	2b00      	cmp	r3, #0
 8005462:	d111      	bne.n	8005488 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005464:	2036      	movs	r0, #54	@ 0x36
 8005466:	f001 fa47 	bl	80068f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b0f      	cmp	r3, #15
 800546e:	d808      	bhi.n	8005482 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005470:	2200      	movs	r2, #0
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	2036      	movs	r0, #54	@ 0x36
 8005476:	f001 fa23 	bl	80068c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800547a:	4a0a      	ldr	r2, [pc, #40]	@ (80054a4 <HAL_InitTick+0xf0>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	e002      	b.n	8005488 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005488:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800548c:	4618      	mov	r0, r3
 800548e:	3738      	adds	r7, #56	@ 0x38
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40023800 	.word	0x40023800
 8005498:	431bde83 	.word	0x431bde83
 800549c:	20000b28 	.word	0x20000b28
 80054a0:	40001000 	.word	0x40001000
 80054a4:	20000050 	.word	0x20000050

080054a8 <NMI_Handler>:
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <NMI_Handler+0x4>

080054b0 <HardFault_Handler>:
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	bf00      	nop
 80054b6:	e7fd      	b.n	80054b4 <HardFault_Handler+0x4>

080054b8 <MemManage_Handler>:
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	bf00      	nop
 80054be:	e7fd      	b.n	80054bc <MemManage_Handler+0x4>

080054c0 <BusFault_Handler>:
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <BusFault_Handler+0x4>

080054c8 <UsageFault_Handler>:
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <UsageFault_Handler+0x4>

080054d0 <DebugMon_Handler>:
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
	...

080054e0 <TIM6_DAC_IRQHandler>:
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <TIM6_DAC_IRQHandler+0x20>)
 80054e6:	791b      	ldrb	r3, [r3, #4]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <TIM6_DAC_IRQHandler+0x14>
 80054ee:	4804      	ldr	r0, [pc, #16]	@ (8005500 <TIM6_DAC_IRQHandler+0x20>)
 80054f0:	f001 fa32 	bl	8006958 <HAL_DAC_IRQHandler>
 80054f4:	4803      	ldr	r0, [pc, #12]	@ (8005504 <TIM6_DAC_IRQHandler+0x24>)
 80054f6:	f005 fbad 	bl	800ac54 <HAL_TIM_IRQHandler>
 80054fa:	bf00      	nop
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	20000164 	.word	0x20000164
 8005504:	20000b28 	.word	0x20000b28

08005508 <LTDC_IRQHandler>:
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
 800550c:	4802      	ldr	r0, [pc, #8]	@ (8005518 <LTDC_IRQHandler+0x10>)
 800550e:	f003 fa0b 	bl	8008928 <HAL_LTDC_IRQHandler>
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	2000071c 	.word	0x2000071c

0800551c <DMA2D_IRQHandler>:
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
 8005520:	4802      	ldr	r0, [pc, #8]	@ (800552c <DMA2D_IRQHandler+0x10>)
 8005522:	f001 fdf3 	bl	800710c <HAL_DMA2D_IRQHandler>
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000178 	.word	0x20000178

08005530 <_getpid>:
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
 8005534:	2301      	movs	r3, #1
 8005536:	4618      	mov	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <_kill>:
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
 800554a:	f009 f9c9 	bl	800e8e0 <__errno>
 800554e:	4603      	mov	r3, r0
 8005550:	2216      	movs	r2, #22
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <_exit>:
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7ff ffe7 	bl	8005540 <_kill>
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <_exit+0x12>

08005576 <_read>:
 8005576:	b580      	push	{r7, lr}
 8005578:	b086      	sub	sp, #24
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	2300      	movs	r3, #0
 8005584:	617b      	str	r3, [r7, #20]
 8005586:	e00a      	b.n	800559e <_read+0x28>
 8005588:	f3af 8000 	nop.w
 800558c:	4601      	mov	r1, r0
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	60ba      	str	r2, [r7, #8]
 8005594:	b2ca      	uxtb	r2, r1
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	3301      	adds	r3, #1
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	dbf0      	blt.n	8005588 <_read+0x12>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <_write>:
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	2300      	movs	r3, #0
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	e009      	b.n	80055d6 <_write+0x26>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	60ba      	str	r2, [r7, #8]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f3af 8000 	nop.w
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3301      	adds	r3, #1
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	429a      	cmp	r2, r3
 80055dc:	dbf1      	blt.n	80055c2 <_write+0x12>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_close>:
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <_fstat>:
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	2300      	movs	r3, #0
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <_isatty>:
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	2301      	movs	r3, #1
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_lseek>:
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	60f8      	str	r0, [r7, #12]
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	2300      	movs	r3, #0
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <_sbrk>:
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	4a14      	ldr	r2, [pc, #80]	@ (80056ac <_sbrk+0x5c>)
 800565a:	4b15      	ldr	r3, [pc, #84]	@ (80056b0 <_sbrk+0x60>)
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	4b13      	ldr	r3, [pc, #76]	@ (80056b4 <_sbrk+0x64>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <_sbrk+0x22>
 800566c:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <_sbrk+0x64>)
 800566e:	4a12      	ldr	r2, [pc, #72]	@ (80056b8 <_sbrk+0x68>)
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	4b10      	ldr	r3, [pc, #64]	@ (80056b4 <_sbrk+0x64>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	429a      	cmp	r2, r3
 800567e:	d207      	bcs.n	8005690 <_sbrk+0x40>
 8005680:	f009 f92e 	bl	800e8e0 <__errno>
 8005684:	4603      	mov	r3, r0
 8005686:	220c      	movs	r2, #12
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800568e:	e009      	b.n	80056a4 <_sbrk+0x54>
 8005690:	4b08      	ldr	r3, [pc, #32]	@ (80056b4 <_sbrk+0x64>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	4b07      	ldr	r3, [pc, #28]	@ (80056b4 <_sbrk+0x64>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	4a05      	ldr	r2, [pc, #20]	@ (80056b4 <_sbrk+0x64>)
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20050000 	.word	0x20050000
 80056b0:	00000400 	.word	0x00000400
 80056b4:	20000b74 	.word	0x20000b74
 80056b8:	20004d28 	.word	0x20004d28

080056bc <SystemInit>:
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
 80056c0:	4b06      	ldr	r3, [pc, #24]	@ (80056dc <SystemInit+0x20>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c6:	4a05      	ldr	r2, [pc, #20]	@ (80056dc <SystemInit+0x20>)
 80056c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80056cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80056d0:	bf00      	nop
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	e000ed00 	.word	0xe000ed00

080056e0 <MX_TIM1_Init>:
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	f107 0310 	add.w	r3, r7, #16
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
 80056f0:	609a      	str	r2, [r3, #8]
 80056f2:	60da      	str	r2, [r3, #12]
 80056f4:	1d3b      	adds	r3, r7, #4
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	605a      	str	r2, [r3, #4]
 80056fc:	609a      	str	r2, [r3, #8]
 80056fe:	4b20      	ldr	r3, [pc, #128]	@ (8005780 <MX_TIM1_Init+0xa0>)
 8005700:	4a20      	ldr	r2, [pc, #128]	@ (8005784 <MX_TIM1_Init+0xa4>)
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	4b1e      	ldr	r3, [pc, #120]	@ (8005780 <MX_TIM1_Init+0xa0>)
 8005706:	2200      	movs	r2, #0
 8005708:	605a      	str	r2, [r3, #4]
 800570a:	4b1d      	ldr	r3, [pc, #116]	@ (8005780 <MX_TIM1_Init+0xa0>)
 800570c:	2200      	movs	r2, #0
 800570e:	609a      	str	r2, [r3, #8]
 8005710:	4b1b      	ldr	r3, [pc, #108]	@ (8005780 <MX_TIM1_Init+0xa0>)
 8005712:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <MX_TIM1_Init+0xa0>)
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
 800571e:	4b18      	ldr	r3, [pc, #96]	@ (8005780 <MX_TIM1_Init+0xa0>)
 8005720:	2200      	movs	r2, #0
 8005722:	615a      	str	r2, [r3, #20]
 8005724:	4b16      	ldr	r3, [pc, #88]	@ (8005780 <MX_TIM1_Init+0xa0>)
 8005726:	2200      	movs	r2, #0
 8005728:	619a      	str	r2, [r3, #24]
 800572a:	4815      	ldr	r0, [pc, #84]	@ (8005780 <MX_TIM1_Init+0xa0>)
 800572c:	f005 f9c2 	bl	800aab4 <HAL_TIM_Base_Init>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <MX_TIM1_Init+0x5a>
 8005736:	f7fe f80f 	bl	8003758 <Error_Handler>
 800573a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	f107 0310 	add.w	r3, r7, #16
 8005744:	4619      	mov	r1, r3
 8005746:	480e      	ldr	r0, [pc, #56]	@ (8005780 <MX_TIM1_Init+0xa0>)
 8005748:	f005 fba4 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <MX_TIM1_Init+0x76>
 8005752:	f7fe f801 	bl	8003758 <Error_Handler>
 8005756:	2300      	movs	r3, #0
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4806      	ldr	r0, [pc, #24]	@ (8005780 <MX_TIM1_Init+0xa0>)
 8005768:	f005 fdc0 	bl	800b2ec <HAL_TIMEx_MasterConfigSynchronization>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <MX_TIM1_Init+0x96>
 8005772:	f7fd fff1 	bl	8003758 <Error_Handler>
 8005776:	bf00      	nop
 8005778:	3720      	adds	r7, #32
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	20000b78 	.word	0x20000b78
 8005784:	40010000 	.word	0x40010000

08005788 <MX_TIM2_Init>:
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	f107 0310 	add.w	r3, r7, #16
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	609a      	str	r2, [r3, #8]
 800579a:	60da      	str	r2, [r3, #12]
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	605a      	str	r2, [r3, #4]
 80057a4:	609a      	str	r2, [r3, #8]
 80057a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005820 <MX_TIM2_Init+0x98>)
 80057a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005820 <MX_TIM2_Init+0x98>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	605a      	str	r2, [r3, #4]
 80057b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005820 <MX_TIM2_Init+0x98>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	609a      	str	r2, [r3, #8]
 80057ba:	4b19      	ldr	r3, [pc, #100]	@ (8005820 <MX_TIM2_Init+0x98>)
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057c0:	60da      	str	r2, [r3, #12]
 80057c2:	4b17      	ldr	r3, [pc, #92]	@ (8005820 <MX_TIM2_Init+0x98>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	611a      	str	r2, [r3, #16]
 80057c8:	4b15      	ldr	r3, [pc, #84]	@ (8005820 <MX_TIM2_Init+0x98>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	619a      	str	r2, [r3, #24]
 80057ce:	4814      	ldr	r0, [pc, #80]	@ (8005820 <MX_TIM2_Init+0x98>)
 80057d0:	f005 f970 	bl	800aab4 <HAL_TIM_Base_Init>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <MX_TIM2_Init+0x56>
 80057da:	f7fd ffbd 	bl	8003758 <Error_Handler>
 80057de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	4619      	mov	r1, r3
 80057ea:	480d      	ldr	r0, [pc, #52]	@ (8005820 <MX_TIM2_Init+0x98>)
 80057ec:	f005 fb52 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <MX_TIM2_Init+0x72>
 80057f6:	f7fd ffaf 	bl	8003758 <Error_Handler>
 80057fa:	2300      	movs	r3, #0
 80057fc:	607b      	str	r3, [r7, #4]
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	4619      	mov	r1, r3
 8005806:	4806      	ldr	r0, [pc, #24]	@ (8005820 <MX_TIM2_Init+0x98>)
 8005808:	f005 fd70 	bl	800b2ec <HAL_TIMEx_MasterConfigSynchronization>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <MX_TIM2_Init+0x8e>
 8005812:	f7fd ffa1 	bl	8003758 <Error_Handler>
 8005816:	bf00      	nop
 8005818:	3720      	adds	r7, #32
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20000bc4 	.word	0x20000bc4

08005824 <MX_TIM3_Init>:
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	f107 0310 	add.w	r3, r7, #16
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	609a      	str	r2, [r3, #8]
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	1d3b      	adds	r3, r7, #4
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	4b1d      	ldr	r3, [pc, #116]	@ (80058b8 <MX_TIM3_Init+0x94>)
 8005844:	4a1d      	ldr	r2, [pc, #116]	@ (80058bc <MX_TIM3_Init+0x98>)
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	4b1b      	ldr	r3, [pc, #108]	@ (80058b8 <MX_TIM3_Init+0x94>)
 800584a:	2200      	movs	r2, #0
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	4b1a      	ldr	r3, [pc, #104]	@ (80058b8 <MX_TIM3_Init+0x94>)
 8005850:	2200      	movs	r2, #0
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	4b18      	ldr	r3, [pc, #96]	@ (80058b8 <MX_TIM3_Init+0x94>)
 8005856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	4b16      	ldr	r3, [pc, #88]	@ (80058b8 <MX_TIM3_Init+0x94>)
 800585e:	2200      	movs	r2, #0
 8005860:	611a      	str	r2, [r3, #16]
 8005862:	4b15      	ldr	r3, [pc, #84]	@ (80058b8 <MX_TIM3_Init+0x94>)
 8005864:	2200      	movs	r2, #0
 8005866:	619a      	str	r2, [r3, #24]
 8005868:	4813      	ldr	r0, [pc, #76]	@ (80058b8 <MX_TIM3_Init+0x94>)
 800586a:	f005 f923 	bl	800aab4 <HAL_TIM_Base_Init>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <MX_TIM3_Init+0x54>
 8005874:	f7fd ff70 	bl	8003758 <Error_Handler>
 8005878:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	f107 0310 	add.w	r3, r7, #16
 8005882:	4619      	mov	r1, r3
 8005884:	480c      	ldr	r0, [pc, #48]	@ (80058b8 <MX_TIM3_Init+0x94>)
 8005886:	f005 fb05 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <MX_TIM3_Init+0x70>
 8005890:	f7fd ff62 	bl	8003758 <Error_Handler>
 8005894:	2300      	movs	r3, #0
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	4805      	ldr	r0, [pc, #20]	@ (80058b8 <MX_TIM3_Init+0x94>)
 80058a2:	f005 fd23 	bl	800b2ec <HAL_TIMEx_MasterConfigSynchronization>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <MX_TIM3_Init+0x8c>
 80058ac:	f7fd ff54 	bl	8003758 <Error_Handler>
 80058b0:	bf00      	nop
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20000c10 	.word	0x20000c10
 80058bc:	40000400 	.word	0x40000400

080058c0 <MX_TIM5_Init>:
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b088      	sub	sp, #32
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	f107 0310 	add.w	r3, r7, #16
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	605a      	str	r2, [r3, #4]
 80058d0:	609a      	str	r2, [r3, #8]
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	1d3b      	adds	r3, r7, #4
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	605a      	str	r2, [r3, #4]
 80058dc:	609a      	str	r2, [r3, #8]
 80058de:	4b1d      	ldr	r3, [pc, #116]	@ (8005954 <MX_TIM5_Init+0x94>)
 80058e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005958 <MX_TIM5_Init+0x98>)
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <MX_TIM5_Init+0x94>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005954 <MX_TIM5_Init+0x94>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	4b18      	ldr	r3, [pc, #96]	@ (8005954 <MX_TIM5_Init+0x94>)
 80058f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	4b16      	ldr	r3, [pc, #88]	@ (8005954 <MX_TIM5_Init+0x94>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	611a      	str	r2, [r3, #16]
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <MX_TIM5_Init+0x94>)
 8005900:	2200      	movs	r2, #0
 8005902:	619a      	str	r2, [r3, #24]
 8005904:	4813      	ldr	r0, [pc, #76]	@ (8005954 <MX_TIM5_Init+0x94>)
 8005906:	f005 f8d5 	bl	800aab4 <HAL_TIM_Base_Init>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <MX_TIM5_Init+0x54>
 8005910:	f7fd ff22 	bl	8003758 <Error_Handler>
 8005914:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	f107 0310 	add.w	r3, r7, #16
 800591e:	4619      	mov	r1, r3
 8005920:	480c      	ldr	r0, [pc, #48]	@ (8005954 <MX_TIM5_Init+0x94>)
 8005922:	f005 fab7 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <MX_TIM5_Init+0x70>
 800592c:	f7fd ff14 	bl	8003758 <Error_Handler>
 8005930:	2300      	movs	r3, #0
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4805      	ldr	r0, [pc, #20]	@ (8005954 <MX_TIM5_Init+0x94>)
 800593e:	f005 fcd5 	bl	800b2ec <HAL_TIMEx_MasterConfigSynchronization>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <MX_TIM5_Init+0x8c>
 8005948:	f7fd ff06 	bl	8003758 <Error_Handler>
 800594c:	bf00      	nop
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000c5c 	.word	0x20000c5c
 8005958:	40000c00 	.word	0x40000c00

0800595c <MX_TIM8_Init>:
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	f107 0310 	add.w	r3, r7, #16
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	609a      	str	r2, [r3, #8]
 800596e:	60da      	str	r2, [r3, #12]
 8005970:	1d3b      	adds	r3, r7, #4
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	609a      	str	r2, [r3, #8]
 800597a:	4b20      	ldr	r3, [pc, #128]	@ (80059fc <MX_TIM8_Init+0xa0>)
 800597c:	4a20      	ldr	r2, [pc, #128]	@ (8005a00 <MX_TIM8_Init+0xa4>)
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	4b1e      	ldr	r3, [pc, #120]	@ (80059fc <MX_TIM8_Init+0xa0>)
 8005982:	2200      	movs	r2, #0
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	4b1d      	ldr	r3, [pc, #116]	@ (80059fc <MX_TIM8_Init+0xa0>)
 8005988:	2200      	movs	r2, #0
 800598a:	609a      	str	r2, [r3, #8]
 800598c:	4b1b      	ldr	r3, [pc, #108]	@ (80059fc <MX_TIM8_Init+0xa0>)
 800598e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	4b19      	ldr	r3, [pc, #100]	@ (80059fc <MX_TIM8_Init+0xa0>)
 8005996:	2200      	movs	r2, #0
 8005998:	611a      	str	r2, [r3, #16]
 800599a:	4b18      	ldr	r3, [pc, #96]	@ (80059fc <MX_TIM8_Init+0xa0>)
 800599c:	2200      	movs	r2, #0
 800599e:	615a      	str	r2, [r3, #20]
 80059a0:	4b16      	ldr	r3, [pc, #88]	@ (80059fc <MX_TIM8_Init+0xa0>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	619a      	str	r2, [r3, #24]
 80059a6:	4815      	ldr	r0, [pc, #84]	@ (80059fc <MX_TIM8_Init+0xa0>)
 80059a8:	f005 f884 	bl	800aab4 <HAL_TIM_Base_Init>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <MX_TIM8_Init+0x5a>
 80059b2:	f7fd fed1 	bl	8003758 <Error_Handler>
 80059b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	f107 0310 	add.w	r3, r7, #16
 80059c0:	4619      	mov	r1, r3
 80059c2:	480e      	ldr	r0, [pc, #56]	@ (80059fc <MX_TIM8_Init+0xa0>)
 80059c4:	f005 fa66 	bl	800ae94 <HAL_TIM_ConfigClockSource>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <MX_TIM8_Init+0x76>
 80059ce:	f7fd fec3 	bl	8003758 <Error_Handler>
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	2300      	movs	r3, #0
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4806      	ldr	r0, [pc, #24]	@ (80059fc <MX_TIM8_Init+0xa0>)
 80059e4:	f005 fc82 	bl	800b2ec <HAL_TIMEx_MasterConfigSynchronization>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <MX_TIM8_Init+0x96>
 80059ee:	f7fd feb3 	bl	8003758 <Error_Handler>
 80059f2:	bf00      	nop
 80059f4:	3720      	adds	r7, #32
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000ca8 	.word	0x20000ca8
 8005a00:	40010400 	.word	0x40010400

08005a04 <HAL_TIM_Base_MspInit>:
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08e      	sub	sp, #56	@ 0x38
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	611a      	str	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a3b      	ldr	r2, [pc, #236]	@ (8005b10 <HAL_TIM_Base_MspInit+0x10c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d10c      	bne.n	8005a40 <HAL_TIM_Base_MspInit+0x3c>
 8005a26:	4b3b      	ldr	r3, [pc, #236]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a32:	4b38      	ldr	r3, [pc, #224]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	e062      	b.n	8005b06 <HAL_TIM_Base_MspInit+0x102>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a48:	d10c      	bne.n	8005a64 <HAL_TIM_Base_MspInit+0x60>
 8005a4a:	4b32      	ldr	r3, [pc, #200]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	4a31      	ldr	r2, [pc, #196]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a56:	4b2f      	ldr	r3, [pc, #188]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	e050      	b.n	8005b06 <HAL_TIM_Base_MspInit+0x102>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a2b      	ldr	r2, [pc, #172]	@ (8005b18 <HAL_TIM_Base_MspInit+0x114>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10c      	bne.n	8005a88 <HAL_TIM_Base_MspInit+0x84>
 8005a6e:	4b29      	ldr	r3, [pc, #164]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a72:	4a28      	ldr	r2, [pc, #160]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a74:	f043 0302 	orr.w	r3, r3, #2
 8005a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a7a:	4b26      	ldr	r3, [pc, #152]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	e03e      	b.n	8005b06 <HAL_TIM_Base_MspInit+0x102>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a23      	ldr	r2, [pc, #140]	@ (8005b1c <HAL_TIM_Base_MspInit+0x118>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d10c      	bne.n	8005aac <HAL_TIM_Base_MspInit+0xa8>
 8005a92:	4b20      	ldr	r3, [pc, #128]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	4a1f      	ldr	r2, [pc, #124]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005a98:	f043 0308 	orr.w	r3, r3, #8
 8005a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	e02c      	b.n	8005b06 <HAL_TIM_Base_MspInit+0x102>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8005b20 <HAL_TIM_Base_MspInit+0x11c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d127      	bne.n	8005b06 <HAL_TIM_Base_MspInit+0x102>
 8005ab6:	4b17      	ldr	r3, [pc, #92]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aba:	4a16      	ldr	r2, [pc, #88]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005abc:	f043 0302 	orr.w	r3, r3, #2
 8005ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ac2:	4b14      	ldr	r3, [pc, #80]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	4b11      	ldr	r3, [pc, #68]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad2:	4a10      	ldr	r2, [pc, #64]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ada:	4b0e      	ldr	r3, [pc, #56]	@ (8005b14 <HAL_TIM_Base_MspInit+0x110>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2304      	movs	r3, #4
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aea:	2302      	movs	r3, #2
 8005aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aee:	2300      	movs	r3, #0
 8005af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005af2:	2300      	movs	r3, #0
 8005af4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005af6:	2303      	movs	r3, #3
 8005af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005afe:	4619      	mov	r1, r3
 8005b00:	4808      	ldr	r0, [pc, #32]	@ (8005b24 <HAL_TIM_Base_MspInit+0x120>)
 8005b02:	f001 fd41 	bl	8007588 <HAL_GPIO_Init>
 8005b06:	bf00      	nop
 8005b08:	3738      	adds	r7, #56	@ 0x38
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40023800 	.word	0x40023800
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000c00 	.word	0x40000c00
 8005b20:	40010400 	.word	0x40010400
 8005b24:	40022000 	.word	0x40022000

08005b28 <MX_UART7_Init>:
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	4b14      	ldr	r3, [pc, #80]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b2e:	4a15      	ldr	r2, [pc, #84]	@ (8005b84 <MX_UART7_Init+0x5c>)
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	4b13      	ldr	r3, [pc, #76]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	4b11      	ldr	r3, [pc, #68]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	609a      	str	r2, [r3, #8]
 8005b40:	4b0f      	ldr	r3, [pc, #60]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	4b0e      	ldr	r3, [pc, #56]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	611a      	str	r2, [r3, #16]
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b4e:	220c      	movs	r2, #12
 8005b50:	615a      	str	r2, [r3, #20]
 8005b52:	4b0b      	ldr	r3, [pc, #44]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	619a      	str	r2, [r3, #24]
 8005b58:	4b09      	ldr	r3, [pc, #36]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	61da      	str	r2, [r3, #28]
 8005b5e:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	621a      	str	r2, [r3, #32]
 8005b64:	4b06      	ldr	r3, [pc, #24]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b6a:	4805      	ldr	r0, [pc, #20]	@ (8005b80 <MX_UART7_Init+0x58>)
 8005b6c:	f005 fc6a 	bl	800b444 <HAL_UART_Init>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_UART7_Init+0x52>
 8005b76:	f7fd fdef 	bl	8003758 <Error_Handler>
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000cf4 	.word	0x20000cf4
 8005b84:	40007800 	.word	0x40007800

08005b88 <MX_USART1_UART_Init>:
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	4b14      	ldr	r3, [pc, #80]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005b8e:	4a15      	ldr	r2, [pc, #84]	@ (8005be4 <MX_USART1_UART_Init+0x5c>)
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	4b13      	ldr	r3, [pc, #76]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	4b11      	ldr	r3, [pc, #68]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	60da      	str	r2, [r3, #12]
 8005ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	611a      	str	r2, [r3, #16]
 8005bac:	4b0c      	ldr	r3, [pc, #48]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005bae:	220c      	movs	r2, #12
 8005bb0:	615a      	str	r2, [r3, #20]
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	619a      	str	r2, [r3, #24]
 8005bb8:	4b09      	ldr	r3, [pc, #36]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	61da      	str	r2, [r3, #28]
 8005bbe:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	621a      	str	r2, [r3, #32]
 8005bc4:	4b06      	ldr	r3, [pc, #24]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bca:	4805      	ldr	r0, [pc, #20]	@ (8005be0 <MX_USART1_UART_Init+0x58>)
 8005bcc:	f005 fc3a 	bl	800b444 <HAL_UART_Init>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <MX_USART1_UART_Init+0x52>
 8005bd6:	f7fd fdbf 	bl	8003758 <Error_Handler>
 8005bda:	bf00      	nop
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20000d7c 	.word	0x20000d7c
 8005be4:	40011000 	.word	0x40011000

08005be8 <MX_USART6_UART_Init>:
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	4b14      	ldr	r3, [pc, #80]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005bee:	4a15      	ldr	r2, [pc, #84]	@ (8005c44 <MX_USART6_UART_Init+0x5c>)
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	4b11      	ldr	r3, [pc, #68]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	609a      	str	r2, [r3, #8]
 8005c00:	4b0f      	ldr	r3, [pc, #60]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	60da      	str	r2, [r3, #12]
 8005c06:	4b0e      	ldr	r3, [pc, #56]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	611a      	str	r2, [r3, #16]
 8005c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005c0e:	220c      	movs	r2, #12
 8005c10:	615a      	str	r2, [r3, #20]
 8005c12:	4b0b      	ldr	r3, [pc, #44]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	619a      	str	r2, [r3, #24]
 8005c18:	4b09      	ldr	r3, [pc, #36]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	61da      	str	r2, [r3, #28]
 8005c1e:	4b08      	ldr	r3, [pc, #32]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	621a      	str	r2, [r3, #32]
 8005c24:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c2a:	4805      	ldr	r0, [pc, #20]	@ (8005c40 <MX_USART6_UART_Init+0x58>)
 8005c2c:	f005 fc0a 	bl	800b444 <HAL_UART_Init>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <MX_USART6_UART_Init+0x52>
 8005c36:	f7fd fd8f 	bl	8003758 <Error_Handler>
 8005c3a:	bf00      	nop
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000e04 	.word	0x20000e04
 8005c44:	40011400 	.word	0x40011400

08005c48 <HAL_UART_MspInit>:
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b0b0      	sub	sp, #192	@ 0xc0
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	605a      	str	r2, [r3, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
 8005c5c:	60da      	str	r2, [r3, #12]
 8005c5e:	611a      	str	r2, [r3, #16]
 8005c60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c64:	2284      	movs	r2, #132	@ 0x84
 8005c66:	2100      	movs	r1, #0
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f008 fd94 	bl	800e796 <memset>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a75      	ldr	r2, [pc, #468]	@ (8005e48 <HAL_UART_MspInit+0x200>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d13d      	bne.n	8005cf4 <HAL_UART_MspInit+0xac>
 8005c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 fe11 	bl	80098b0 <HAL_RCCEx_PeriphCLKConfig>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <HAL_UART_MspInit+0x50>
 8005c94:	f7fd fd60 	bl	8003758 <Error_Handler>
 8005c98:	4b6c      	ldr	r3, [pc, #432]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9c:	4a6b      	ldr	r2, [pc, #428]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005c9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ca4:	4b69      	ldr	r3, [pc, #420]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	4b66      	ldr	r3, [pc, #408]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb4:	4a65      	ldr	r2, [pc, #404]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005cb6:	f043 0320 	orr.w	r3, r3, #32
 8005cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cbc:	4b63      	ldr	r3, [pc, #396]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc0:	f003 0320 	and.w	r3, r3, #32
 8005cc4:	623b      	str	r3, [r7, #32]
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	23c0      	movs	r3, #192	@ 0xc0
 8005cca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005cce:	2302      	movs	r3, #2
 8005cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cda:	2303      	movs	r3, #3
 8005cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ce6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005cea:	4619      	mov	r1, r3
 8005cec:	4858      	ldr	r0, [pc, #352]	@ (8005e50 <HAL_UART_MspInit+0x208>)
 8005cee:	f001 fc4b 	bl	8007588 <HAL_GPIO_Init>
 8005cf2:	e0a4      	b.n	8005e3e <HAL_UART_MspInit+0x1f6>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a56      	ldr	r2, [pc, #344]	@ (8005e54 <HAL_UART_MspInit+0x20c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d15d      	bne.n	8005dba <HAL_UART_MspInit+0x172>
 8005cfe:	2340      	movs	r3, #64	@ 0x40
 8005d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d02:	2300      	movs	r3, #0
 8005d04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f003 fdd0 	bl	80098b0 <HAL_RCCEx_PeriphCLKConfig>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_UART_MspInit+0xd2>
 8005d16:	f7fd fd1f 	bl	8003758 <Error_Handler>
 8005d1a:	4b4c      	ldr	r3, [pc, #304]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	4a4b      	ldr	r2, [pc, #300]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d20:	f043 0310 	orr.w	r3, r3, #16
 8005d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d26:	4b49      	ldr	r3, [pc, #292]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	61fb      	str	r3, [r7, #28]
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4b46      	ldr	r3, [pc, #280]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	4a45      	ldr	r2, [pc, #276]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d38:	f043 0302 	orr.w	r3, r3, #2
 8005d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d3e:	4b43      	ldr	r3, [pc, #268]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	4b40      	ldr	r3, [pc, #256]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d4e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d50:	f043 0301 	orr.w	r3, r3, #1
 8005d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d56:	4b3d      	ldr	r3, [pc, #244]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2380      	movs	r3, #128	@ 0x80
 8005d64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d74:	2300      	movs	r3, #0
 8005d76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d7a:	2307      	movs	r3, #7
 8005d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d80:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005d84:	4619      	mov	r1, r3
 8005d86:	4834      	ldr	r0, [pc, #208]	@ (8005e58 <HAL_UART_MspInit+0x210>)
 8005d88:	f001 fbfe 	bl	8007588 <HAL_GPIO_Init>
 8005d8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005d94:	2302      	movs	r3, #2
 8005d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005da6:	2307      	movs	r3, #7
 8005da8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005dac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005db0:	4619      	mov	r1, r3
 8005db2:	482a      	ldr	r0, [pc, #168]	@ (8005e5c <HAL_UART_MspInit+0x214>)
 8005db4:	f001 fbe8 	bl	8007588 <HAL_GPIO_Init>
 8005db8:	e041      	b.n	8005e3e <HAL_UART_MspInit+0x1f6>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a28      	ldr	r2, [pc, #160]	@ (8005e60 <HAL_UART_MspInit+0x218>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d13c      	bne.n	8005e3e <HAL_UART_MspInit+0x1f6>
 8005dc4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005dd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f003 fd6b 	bl	80098b0 <HAL_RCCEx_PeriphCLKConfig>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_UART_MspInit+0x19c>
 8005de0:	f7fd fcba 	bl	8003758 <Error_Handler>
 8005de4:	4b19      	ldr	r3, [pc, #100]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005de8:	4a18      	ldr	r2, [pc, #96]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005dea:	f043 0320 	orr.w	r3, r3, #32
 8005dee:	6453      	str	r3, [r2, #68]	@ 0x44
 8005df0:	4b16      	ldr	r3, [pc, #88]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4b13      	ldr	r3, [pc, #76]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e00:	4a12      	ldr	r2, [pc, #72]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005e02:	f043 0304 	orr.w	r3, r3, #4
 8005e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e08:	4b10      	ldr	r3, [pc, #64]	@ (8005e4c <HAL_UART_MspInit+0x204>)
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	23c0      	movs	r3, #192	@ 0xc0
 8005e16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e20:	2300      	movs	r3, #0
 8005e22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e26:	2303      	movs	r3, #3
 8005e28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e32:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005e36:	4619      	mov	r1, r3
 8005e38:	480a      	ldr	r0, [pc, #40]	@ (8005e64 <HAL_UART_MspInit+0x21c>)
 8005e3a:	f001 fba5 	bl	8007588 <HAL_GPIO_Init>
 8005e3e:	bf00      	nop
 8005e40:	37c0      	adds	r7, #192	@ 0xc0
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40007800 	.word	0x40007800
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	40021400 	.word	0x40021400
 8005e54:	40011000 	.word	0x40011000
 8005e58:	40020400 	.word	0x40020400
 8005e5c:	40020000 	.word	0x40020000
 8005e60:	40011400 	.word	0x40011400
 8005e64:	40020800 	.word	0x40020800

08005e68 <Reset_Handler>:
 8005e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005ea0 <LoopFillZerobss+0x12>
 8005e6c:	480d      	ldr	r0, [pc, #52]	@ (8005ea4 <LoopFillZerobss+0x16>)
 8005e6e:	490e      	ldr	r1, [pc, #56]	@ (8005ea8 <LoopFillZerobss+0x1a>)
 8005e70:	4a0e      	ldr	r2, [pc, #56]	@ (8005eac <LoopFillZerobss+0x1e>)
 8005e72:	2300      	movs	r3, #0
 8005e74:	e002      	b.n	8005e7c <LoopCopyDataInit>

08005e76 <CopyDataInit>:
 8005e76:	58d4      	ldr	r4, [r2, r3]
 8005e78:	50c4      	str	r4, [r0, r3]
 8005e7a:	3304      	adds	r3, #4

08005e7c <LoopCopyDataInit>:
 8005e7c:	18c4      	adds	r4, r0, r3
 8005e7e:	428c      	cmp	r4, r1
 8005e80:	d3f9      	bcc.n	8005e76 <CopyDataInit>
 8005e82:	4a0b      	ldr	r2, [pc, #44]	@ (8005eb0 <LoopFillZerobss+0x22>)
 8005e84:	4c0b      	ldr	r4, [pc, #44]	@ (8005eb4 <LoopFillZerobss+0x26>)
 8005e86:	2300      	movs	r3, #0
 8005e88:	e001      	b.n	8005e8e <LoopFillZerobss>

08005e8a <FillZerobss>:
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	3204      	adds	r2, #4

08005e8e <LoopFillZerobss>:
 8005e8e:	42a2      	cmp	r2, r4
 8005e90:	d3fb      	bcc.n	8005e8a <FillZerobss>
 8005e92:	f7ff fc13 	bl	80056bc <SystemInit>
 8005e96:	f008 fd29 	bl	800e8ec <__libc_init_array>
 8005e9a:	f7fd fb5f 	bl	800355c <main>
 8005e9e:	4770      	bx	lr
 8005ea0:	20050000 	.word	0x20050000
 8005ea4:	20000000 	.word	0x20000000
 8005ea8:	200000b8 	.word	0x200000b8
 8005eac:	0801dea0 	.word	0x0801dea0
 8005eb0:	200000b8 	.word	0x200000b8
 8005eb4:	20004d28 	.word	0x20004d28

08005eb8 <ADC_IRQHandler>:
 8005eb8:	e7fe      	b.n	8005eb8 <ADC_IRQHandler>

08005eba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ebe:	2003      	movs	r0, #3
 8005ec0:	f000 fcf3 	bl	80068aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ec4:	200f      	movs	r0, #15
 8005ec6:	f7ff fa75 	bl	80053b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005eca:	f7ff fa4b 	bl	8005364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ed8:	4b06      	ldr	r3, [pc, #24]	@ (8005ef4 <HAL_IncTick+0x20>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <HAL_IncTick+0x24>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	4a04      	ldr	r2, [pc, #16]	@ (8005ef8 <HAL_IncTick+0x24>)
 8005ee6:	6013      	str	r3, [r2, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000054 	.word	0x20000054
 8005ef8:	20000e8c 	.word	0x20000e8c

08005efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  return uwTick;
 8005f00:	4b03      	ldr	r3, [pc, #12]	@ (8005f10 <HAL_GetTick+0x14>)
 8005f02:	681b      	ldr	r3, [r3, #0]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	20000e8c 	.word	0x20000e8c

08005f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f1c:	f7ff ffee 	bl	8005efc <HAL_GetTick>
 8005f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f2c:	d005      	beq.n	8005f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <HAL_Delay+0x44>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f3a:	bf00      	nop
 8005f3c:	f7ff ffde 	bl	8005efc <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d8f7      	bhi.n	8005f3c <HAL_Delay+0x28>
  {
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000054 	.word	0x20000054

08005f5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e031      	b.n	8005fd6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d109      	bne.n	8005f8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fa ffa2 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f92:	f003 0310 	and.w	r3, r3, #16
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d116      	bne.n	8005fc8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f9e:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <HAL_ADC_Init+0x84>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	f043 0202 	orr.w	r2, r3, #2
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fad6 	bl	800655c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	f023 0303 	bic.w	r3, r3, #3
 8005fbe:	f043 0201 	orr.w	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fc6:	e001      	b.n	8005fcc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	ffffeefd 	.word	0xffffeefd

08005fe4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_ADC_Start+0x1a>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e0ad      	b.n	800615a <HAL_ADC_Start+0x176>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b01      	cmp	r3, #1
 8006012:	d018      	beq.n	8006046 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006024:	4b50      	ldr	r3, [pc, #320]	@ (8006168 <HAL_ADC_Start+0x184>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a50      	ldr	r2, [pc, #320]	@ (800616c <HAL_ADC_Start+0x188>)
 800602a:	fba2 2303 	umull	r2, r3, r2, r3
 800602e:	0c9a      	lsrs	r2, r3, #18
 8006030:	4613      	mov	r3, r2
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	4413      	add	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006038:	e002      	b.n	8006040 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3b01      	subs	r3, #1
 800603e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f9      	bne.n	800603a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b01      	cmp	r3, #1
 8006052:	d175      	bne.n	8006140 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006058:	4b45      	ldr	r3, [pc, #276]	@ (8006170 <HAL_ADC_Start+0x18c>)
 800605a:	4013      	ands	r3, r2
 800605c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800606e:	2b00      	cmp	r3, #0
 8006070:	d007      	beq.n	8006082 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800607a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800608e:	d106      	bne.n	800609e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006094:	f023 0206 	bic.w	r2, r3, #6
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	645a      	str	r2, [r3, #68]	@ 0x44
 800609c:	e002      	b.n	80060a4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80060b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80060b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006174 <HAL_ADC_Start+0x190>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10f      	bne.n	80060e2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d143      	bne.n	8006158 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80060de:	609a      	str	r2, [r3, #8]
 80060e0:	e03a      	b.n	8006158 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a24      	ldr	r2, [pc, #144]	@ (8006178 <HAL_ADC_Start+0x194>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d10e      	bne.n	800610a <HAL_ADC_Start+0x126>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d107      	bne.n	800610a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006108:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800610a:	4b1a      	ldr	r3, [pc, #104]	@ (8006174 <HAL_ADC_Start+0x190>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	d120      	bne.n	8006158 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a18      	ldr	r2, [pc, #96]	@ (800617c <HAL_ADC_Start+0x198>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d11b      	bne.n	8006158 <HAL_ADC_Start+0x174>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d114      	bne.n	8006158 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800613c:	609a      	str	r2, [r3, #8]
 800613e:	e00b      	b.n	8006158 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	f043 0210 	orr.w	r2, r3, #16
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006150:	f043 0201 	orr.w	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	2000004c 	.word	0x2000004c
 800616c:	431bde83 	.word	0x431bde83
 8006170:	fffff8fe 	.word	0xfffff8fe
 8006174:	40012300 	.word	0x40012300
 8006178:	40012000 	.word	0x40012000
 800617c:	40012200 	.word	0x40012200

08006180 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800619c:	d113      	bne.n	80061c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80061a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061ac:	d10b      	bne.n	80061c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e063      	b.n	800628e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80061c6:	f7ff fe99 	bl	8005efc <HAL_GetTick>
 80061ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80061cc:	e021      	b.n	8006212 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061d4:	d01d      	beq.n	8006212 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <HAL_ADC_PollForConversion+0x6c>
 80061dc:	f7ff fe8e 	bl	8005efc <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d212      	bcs.n	8006212 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d00b      	beq.n	8006212 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061fe:	f043 0204 	orr.w	r2, r3, #4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e03d      	b.n	800628e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b02      	cmp	r3, #2
 800621e:	d1d6      	bne.n	80061ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0212 	mvn.w	r2, #18
 8006228:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d123      	bne.n	800628c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11f      	bne.n	800628c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006252:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006256:	2b00      	cmp	r3, #0
 8006258:	d006      	beq.n	8006268 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006264:	2b00      	cmp	r3, #0
 8006266:	d111      	bne.n	800628c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d105      	bne.n	800628c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006284:	f043 0201 	orr.w	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_ADC_ConfigChannel+0x1c>
 80062c8:	2302      	movs	r3, #2
 80062ca:	e136      	b.n	800653a <HAL_ADC_ConfigChannel+0x28a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b09      	cmp	r3, #9
 80062da:	d93a      	bls.n	8006352 <HAL_ADC_ConfigChannel+0xa2>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062e4:	d035      	beq.n	8006352 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68d9      	ldr	r1, [r3, #12]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	4613      	mov	r3, r2
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	4413      	add	r3, r2
 80062fa:	3b1e      	subs	r3, #30
 80062fc:	2207      	movs	r2, #7
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43da      	mvns	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	400a      	ands	r2, r1
 800630a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a8d      	ldr	r2, [pc, #564]	@ (8006548 <HAL_ADC_ConfigChannel+0x298>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10a      	bne.n	800632c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68d9      	ldr	r1, [r3, #12]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	061a      	lsls	r2, r3, #24
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800632a:	e035      	b.n	8006398 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68d9      	ldr	r1, [r3, #12]
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	b29b      	uxth	r3, r3
 800633c:	4618      	mov	r0, r3
 800633e:	4603      	mov	r3, r0
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4403      	add	r3, r0
 8006344:	3b1e      	subs	r3, #30
 8006346:	409a      	lsls	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006350:	e022      	b.n	8006398 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6919      	ldr	r1, [r3, #16]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	461a      	mov	r2, r3
 8006360:	4613      	mov	r3, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	4413      	add	r3, r2
 8006366:	2207      	movs	r2, #7
 8006368:	fa02 f303 	lsl.w	r3, r2, r3
 800636c:	43da      	mvns	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	400a      	ands	r2, r1
 8006374:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6919      	ldr	r1, [r3, #16]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	b29b      	uxth	r3, r3
 8006386:	4618      	mov	r0, r3
 8006388:	4603      	mov	r3, r0
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	4403      	add	r3, r0
 800638e:	409a      	lsls	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b06      	cmp	r3, #6
 800639e:	d824      	bhi.n	80063ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	3b05      	subs	r3, #5
 80063b2:	221f      	movs	r2, #31
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	43da      	mvns	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	400a      	ands	r2, r1
 80063c0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	4618      	mov	r0, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685a      	ldr	r2, [r3, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	3b05      	subs	r3, #5
 80063dc:	fa00 f203 	lsl.w	r2, r0, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	635a      	str	r2, [r3, #52]	@ 0x34
 80063e8:	e04c      	b.n	8006484 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b0c      	cmp	r3, #12
 80063f0:	d824      	bhi.n	800643c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	3b23      	subs	r3, #35	@ 0x23
 8006404:	221f      	movs	r2, #31
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	43da      	mvns	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	400a      	ands	r2, r1
 8006412:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	b29b      	uxth	r3, r3
 8006420:	4618      	mov	r0, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	3b23      	subs	r3, #35	@ 0x23
 800642e:	fa00 f203 	lsl.w	r2, r0, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	631a      	str	r2, [r3, #48]	@ 0x30
 800643a:	e023      	b.n	8006484 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	3b41      	subs	r3, #65	@ 0x41
 800644e:	221f      	movs	r2, #31
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	43da      	mvns	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	400a      	ands	r2, r1
 800645c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	4618      	mov	r0, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	3b41      	subs	r3, #65	@ 0x41
 8006478:	fa00 f203 	lsl.w	r2, r0, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a30      	ldr	r2, [pc, #192]	@ (800654c <HAL_ADC_ConfigChannel+0x29c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d10a      	bne.n	80064a4 <HAL_ADC_ConfigChannel+0x1f4>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006496:	d105      	bne.n	80064a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006498:	4b2d      	ldr	r3, [pc, #180]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a2c      	ldr	r2, [pc, #176]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 800649e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80064a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a28      	ldr	r2, [pc, #160]	@ (800654c <HAL_ADC_ConfigChannel+0x29c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10f      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x21e>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b12      	cmp	r3, #18
 80064b4:	d10b      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80064b6:	4b26      	ldr	r3, [pc, #152]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	4a25      	ldr	r2, [pc, #148]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 80064bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80064c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80064c2:	4b23      	ldr	r3, [pc, #140]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	4a22      	ldr	r2, [pc, #136]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 80064c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1e      	ldr	r2, [pc, #120]	@ (800654c <HAL_ADC_ConfigChannel+0x29c>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d12b      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x280>
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006548 <HAL_ADC_ConfigChannel+0x298>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d003      	beq.n	80064ea <HAL_ADC_ConfigChannel+0x23a>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b11      	cmp	r3, #17
 80064e8:	d122      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80064ea:	4b19      	ldr	r3, [pc, #100]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	4a18      	ldr	r2, [pc, #96]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 80064f0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80064f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80064f6:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <HAL_ADC_ConfigChannel+0x2a0>)
 80064fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006500:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a10      	ldr	r2, [pc, #64]	@ (8006548 <HAL_ADC_ConfigChannel+0x298>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d111      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800650c:	4b11      	ldr	r3, [pc, #68]	@ (8006554 <HAL_ADC_ConfigChannel+0x2a4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a11      	ldr	r2, [pc, #68]	@ (8006558 <HAL_ADC_ConfigChannel+0x2a8>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	0c9a      	lsrs	r2, r3, #18
 8006518:	4613      	mov	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006522:	e002      	b.n	800652a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3b01      	subs	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1f9      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	10000012 	.word	0x10000012
 800654c:	40012000 	.word	0x40012000
 8006550:	40012300 	.word	0x40012300
 8006554:	2000004c 	.word	0x2000004c
 8006558:	431bde83 	.word	0x431bde83

0800655c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006564:	4b78      	ldr	r3, [pc, #480]	@ (8006748 <ADC_Init+0x1ec>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a77      	ldr	r2, [pc, #476]	@ (8006748 <ADC_Init+0x1ec>)
 800656a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800656e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006570:	4b75      	ldr	r3, [pc, #468]	@ (8006748 <ADC_Init+0x1ec>)
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	4973      	ldr	r1, [pc, #460]	@ (8006748 <ADC_Init+0x1ec>)
 800657a:	4313      	orrs	r3, r2
 800657c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800658c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6859      	ldr	r1, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	021a      	lsls	r2, r3, #8
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80065b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6859      	ldr	r1, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6899      	ldr	r1, [r3, #8]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ea:	4a58      	ldr	r2, [pc, #352]	@ (800674c <ADC_Init+0x1f0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d022      	beq.n	8006636 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80065fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6899      	ldr	r1, [r3, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6899      	ldr	r1, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	609a      	str	r2, [r3, #8]
 8006634:	e00f      	b.n	8006656 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0202 	bic.w	r2, r2, #2
 8006664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6899      	ldr	r1, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	005a      	lsls	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01b      	beq.n	80066bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80066a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6859      	ldr	r1, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	3b01      	subs	r3, #1
 80066b0:	035a      	lsls	r2, r3, #13
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	e007      	b.n	80066cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80066da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	051a      	lsls	r2, r3, #20
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6899      	ldr	r1, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800670e:	025a      	lsls	r2, r3, #9
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689a      	ldr	r2, [r3, #8]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6899      	ldr	r1, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	029a      	lsls	r2, r3, #10
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	609a      	str	r2, [r3, #8]
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	40012300 	.word	0x40012300
 800674c:	0f000001 	.word	0x0f000001

08006750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006760:	4b0b      	ldr	r3, [pc, #44]	@ (8006790 <__NVIC_SetPriorityGrouping+0x40>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800676c:	4013      	ands	r3, r2
 800676e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006778:	4b06      	ldr	r3, [pc, #24]	@ (8006794 <__NVIC_SetPriorityGrouping+0x44>)
 800677a:	4313      	orrs	r3, r2
 800677c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800677e:	4a04      	ldr	r2, [pc, #16]	@ (8006790 <__NVIC_SetPriorityGrouping+0x40>)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	60d3      	str	r3, [r2, #12]
}
 8006784:	bf00      	nop
 8006786:	3714      	adds	r7, #20
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	e000ed00 	.word	0xe000ed00
 8006794:	05fa0000 	.word	0x05fa0000

08006798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800679c:	4b04      	ldr	r3, [pc, #16]	@ (80067b0 <__NVIC_GetPriorityGrouping+0x18>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	0a1b      	lsrs	r3, r3, #8
 80067a2:	f003 0307 	and.w	r3, r3, #7
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr
 80067b0:	e000ed00 	.word	0xe000ed00

080067b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	db0b      	blt.n	80067de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	f003 021f 	and.w	r2, r3, #31
 80067cc:	4907      	ldr	r1, [pc, #28]	@ (80067ec <__NVIC_EnableIRQ+0x38>)
 80067ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	2001      	movs	r0, #1
 80067d6:	fa00 f202 	lsl.w	r2, r0, r2
 80067da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067de:	bf00      	nop
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	e000e100 	.word	0xe000e100

080067f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	6039      	str	r1, [r7, #0]
 80067fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006800:	2b00      	cmp	r3, #0
 8006802:	db0a      	blt.n	800681a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	b2da      	uxtb	r2, r3
 8006808:	490c      	ldr	r1, [pc, #48]	@ (800683c <__NVIC_SetPriority+0x4c>)
 800680a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680e:	0112      	lsls	r2, r2, #4
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	440b      	add	r3, r1
 8006814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006818:	e00a      	b.n	8006830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	b2da      	uxtb	r2, r3
 800681e:	4908      	ldr	r1, [pc, #32]	@ (8006840 <__NVIC_SetPriority+0x50>)
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	3b04      	subs	r3, #4
 8006828:	0112      	lsls	r2, r2, #4
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	440b      	add	r3, r1
 800682e:	761a      	strb	r2, [r3, #24]
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	e000e100 	.word	0xe000e100
 8006840:	e000ed00 	.word	0xe000ed00

08006844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006844:	b480      	push	{r7}
 8006846:	b089      	sub	sp, #36	@ 0x24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	f1c3 0307 	rsb	r3, r3, #7
 800685e:	2b04      	cmp	r3, #4
 8006860:	bf28      	it	cs
 8006862:	2304      	movcs	r3, #4
 8006864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3304      	adds	r3, #4
 800686a:	2b06      	cmp	r3, #6
 800686c:	d902      	bls.n	8006874 <NVIC_EncodePriority+0x30>
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	3b03      	subs	r3, #3
 8006872:	e000      	b.n	8006876 <NVIC_EncodePriority+0x32>
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	fa02 f303 	lsl.w	r3, r2, r3
 8006882:	43da      	mvns	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	401a      	ands	r2, r3
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800688c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	fa01 f303 	lsl.w	r3, r1, r3
 8006896:	43d9      	mvns	r1, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800689c:	4313      	orrs	r3, r2
         );
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3724      	adds	r7, #36	@ 0x24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff ff4c 	bl	8006750 <__NVIC_SetPriorityGrouping>
}
 80068b8:	bf00      	nop
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068d2:	f7ff ff61 	bl	8006798 <__NVIC_GetPriorityGrouping>
 80068d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	6978      	ldr	r0, [r7, #20]
 80068de:	f7ff ffb1 	bl	8006844 <NVIC_EncodePriority>
 80068e2:	4602      	mov	r2, r0
 80068e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e8:	4611      	mov	r1, r2
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff ff80 	bl	80067f0 <__NVIC_SetPriority>
}
 80068f0:	bf00      	nop
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff ff54 	bl	80067b4 <__NVIC_EnableIRQ>
}
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e014      	b.n	8006950 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	791b      	ldrb	r3, [r3, #4]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	2b00      	cmp	r3, #0
 800692e:	d105      	bne.n	800693c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fa fb5c 	bl	8000ff4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2202      	movs	r2, #2
 8006940:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800696a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800696e:	d120      	bne.n	80069b2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800697a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800697e:	d118      	bne.n	80069b2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2204      	movs	r2, #4
 8006984:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f043 0201 	orr.w	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800699a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80069aa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f82d 	bl	8006a0c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069c0:	d120      	bne.n	8006a04 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069d0:	d118      	bne.n	8006a04 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2204      	movs	r2, #4
 80069d6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f043 0202 	orr.w	r2, r3, #2
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80069ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80069fc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f85d 	bl	8006abe <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	795b      	ldrb	r3, [r3, #5]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_DAC_ConfigChannel+0x18>
 8006a34:	2302      	movs	r3, #2
 8006a36:	e03c      	b.n	8006ab2 <HAL_DAC_ConfigChannel+0x92>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2202      	movs	r2, #2
 8006a42:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f003 0310 	and.w	r3, r3, #16
 8006a52:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006a56:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5a:	43db      	mvns	r3, r3
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6819      	ldr	r1, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	22c0      	movs	r2, #192	@ 0xc0
 8006a96:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9a:	43da      	mvns	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	400a      	ands	r2, r1
 8006aa2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
	...

08006ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ae0:	f7ff fa0c 	bl	8005efc <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e099      	b.n	8006c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b10:	e00f      	b.n	8006b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b12:	f7ff f9f3 	bl	8005efc <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	2b05      	cmp	r3, #5
 8006b1e:	d908      	bls.n	8006b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2220      	movs	r2, #32
 8006b24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e078      	b.n	8006c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e8      	bne.n	8006b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4b38      	ldr	r3, [pc, #224]	@ (8006c2c <HAL_DMA_Init+0x158>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d107      	bne.n	8006b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b94:	4313      	orrs	r3, r2
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f023 0307 	bic.w	r3, r3, #7
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d117      	bne.n	8006bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00e      	beq.n	8006bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f8bd 	bl	8006d58 <DMA_CheckFifoParam>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2240      	movs	r2, #64	@ 0x40
 8006be8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e016      	b.n	8006c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f874 	bl	8006cec <DMA_CalcBaseAndBitshift>
 8006c04:	4603      	mov	r3, r0
 8006c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0c:	223f      	movs	r2, #63	@ 0x3f
 8006c0e:	409a      	lsls	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	f010803f 	.word	0xf010803f

08006c30 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e050      	b.n	8006ce4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d101      	bne.n	8006c52 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006c4e:	2302      	movs	r3, #2
 8006c50:	e048      	b.n	8006ce4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2200      	movs	r2, #0
 8006c78:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2200      	movs	r2, #0
 8006c88:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2221      	movs	r2, #33	@ 0x21
 8006c90:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f82a 	bl	8006cec <DMA_CalcBaseAndBitshift>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ca0:	223f      	movs	r2, #63	@ 0x3f
 8006ca2:	409a      	lsls	r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	3b10      	subs	r3, #16
 8006cfc:	4a13      	ldr	r2, [pc, #76]	@ (8006d4c <DMA_CalcBaseAndBitshift+0x60>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	091b      	lsrs	r3, r3, #4
 8006d04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d06:	4a12      	ldr	r2, [pc, #72]	@ (8006d50 <DMA_CalcBaseAndBitshift+0x64>)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2b03      	cmp	r3, #3
 8006d18:	d908      	bls.n	8006d2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4b0c      	ldr	r3, [pc, #48]	@ (8006d54 <DMA_CalcBaseAndBitshift+0x68>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	1d1a      	adds	r2, r3, #4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d2a:	e006      	b.n	8006d3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	4b08      	ldr	r3, [pc, #32]	@ (8006d54 <DMA_CalcBaseAndBitshift+0x68>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	aaaaaaab 	.word	0xaaaaaaab
 8006d50:	0801dda8 	.word	0x0801dda8
 8006d54:	fffffc00 	.word	0xfffffc00

08006d58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d11f      	bne.n	8006db2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d856      	bhi.n	8006e26 <DMA_CheckFifoParam+0xce>
 8006d78:	a201      	add	r2, pc, #4	@ (adr r2, 8006d80 <DMA_CheckFifoParam+0x28>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006d91 	.word	0x08006d91
 8006d84:	08006da3 	.word	0x08006da3
 8006d88:	08006d91 	.word	0x08006d91
 8006d8c:	08006e27 	.word	0x08006e27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d046      	beq.n	8006e2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006da0:	e043      	b.n	8006e2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006daa:	d140      	bne.n	8006e2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006db0:	e03d      	b.n	8006e2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dba:	d121      	bne.n	8006e00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d837      	bhi.n	8006e32 <DMA_CheckFifoParam+0xda>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <DMA_CheckFifoParam+0x70>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006ddf 	.word	0x08006ddf
 8006dd0:	08006dd9 	.word	0x08006dd9
 8006dd4:	08006df1 	.word	0x08006df1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	73fb      	strb	r3, [r7, #15]
      break;
 8006ddc:	e030      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d025      	beq.n	8006e36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dee:	e022      	b.n	8006e36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006df8:	d11f      	bne.n	8006e3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006dfe:	e01c      	b.n	8006e3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d903      	bls.n	8006e0e <DMA_CheckFifoParam+0xb6>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d003      	beq.n	8006e14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e0c:	e018      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	73fb      	strb	r3, [r7, #15]
      break;
 8006e12:	e015      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00e      	beq.n	8006e3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
      break;
 8006e24:	e00b      	b.n	8006e3e <DMA_CheckFifoParam+0xe6>
      break;
 8006e26:	bf00      	nop
 8006e28:	e00a      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
      break;
 8006e2a:	bf00      	nop
 8006e2c:	e008      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e006      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
      break;
 8006e32:	bf00      	nop
 8006e34:	e004      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
      break;
 8006e36:	bf00      	nop
 8006e38:	e002      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <DMA_CheckFifoParam+0xe8>
      break;
 8006e3e:	bf00      	nop
    }
  } 
  
  return status; 
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop

08006e50 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e039      	b.n	8006ed6 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f7fa f936 	bl	80010e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	430a      	orrs	r2, r1
 8006e98:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea0:	f023 0107 	bic.w	r1, r3, #7
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee0 <HAL_DMA2D_Init+0x90>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	68d1      	ldr	r1, [r2, #12]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6812      	ldr	r2, [r2, #0]
 8006ec2:	430b      	orrs	r3, r1
 8006ec4:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	ffffc000 	.word	0xffffc000

08006ee4 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_DMA2D_Start+0x1c>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e018      	b.n	8006f32 <HAL_DMA2D_Start+0x4e>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	9300      	str	r3, [sp, #0]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	68b9      	ldr	r1, [r7, #8]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fa98 	bl	8007450 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b086      	sub	sp, #24
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d056      	beq.n	8007004 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f56:	f7fe ffd1 	bl	8005efc <HAL_GetTick>
 8006f5a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006f5c:	e04b      	b.n	8006ff6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d023      	beq.n	8006fb8 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f003 0320 	and.w	r3, r3, #32
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f7e:	f043 0202 	orr.w	r2, r3, #2
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f94:	f043 0201 	orr.w	r2, r3, #1
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2221      	movs	r2, #33	@ 0x21
 8006fa2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2204      	movs	r2, #4
 8006fa8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0a5      	b.n	8007104 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fbe:	d01a      	beq.n	8006ff6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fc0:	f7fe ff9c 	bl	8005efc <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d302      	bcc.n	8006fd6 <HAL_DMA2D_PollForTransfer+0x9c>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10f      	bne.n	8006ff6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fda:	f043 0220 	orr.w	r2, r3, #32
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e086      	b.n	8007104 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0ac      	beq.n	8006f5e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d061      	beq.n	80070ea <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007026:	f7fe ff69 	bl	8005efc <HAL_GetTick>
 800702a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800702c:	e056      	b.n	80070dc <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800703c:	2b00      	cmp	r3, #0
 800703e:	d02e      	beq.n	800709e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0308 	and.w	r3, r3, #8
 8007046:	2b00      	cmp	r3, #0
 8007048:	d005      	beq.n	8007056 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800704e:	f043 0204 	orr.w	r2, r3, #4
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007064:	f043 0202 	orr.w	r2, r3, #2
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707a:	f043 0201 	orr.w	r2, r3, #1
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2229      	movs	r2, #41	@ 0x29
 8007088:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2204      	movs	r2, #4
 800708e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e032      	b.n	8007104 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070a4:	d01a      	beq.n	80070dc <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070a6:	f7fe ff29 	bl	8005efc <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d302      	bcc.n	80070bc <HAL_DMA2D_PollForTransfer+0x182>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10f      	bne.n	80070dc <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c0:	f043 0220 	orr.w	r2, r3, #32
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2203      	movs	r2, #3
 80070cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e013      	b.n	8007104 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0a1      	beq.n	800702e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2212      	movs	r2, #18
 80070f0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3718      	adds	r7, #24
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d026      	beq.n	800717c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d021      	beq.n	800717c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007146:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714c:	f043 0201 	orr.w	r2, r3, #1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2201      	movs	r2, #1
 800715a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2204      	movs	r2, #4
 8007160:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d026      	beq.n	80071d4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d021      	beq.n	80071d4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800719e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2220      	movs	r2, #32
 80071a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ac:	f043 0202 	orr.w	r2, r3, #2
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2204      	movs	r2, #4
 80071b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d026      	beq.n	800722c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d021      	beq.n	800722c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071f6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2208      	movs	r2, #8
 80071fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007204:	f043 0204 	orr.w	r2, r3, #4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2204      	movs	r2, #4
 8007210:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	695b      	ldr	r3, [r3, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d013      	beq.n	800725e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00e      	beq.n	800725e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800724e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2204      	movs	r2, #4
 8007256:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f853 	bl	8007304 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d024      	beq.n	80072b2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01f      	beq.n	80072b2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007280:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2202      	movs	r2, #2
 8007288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01f      	beq.n	80072fc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01a      	beq.n	80072fc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072d4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2210      	movs	r2, #16
 80072dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f80e 	bl	8007318 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_DMA2D_ConfigLayer+0x20>
 8007348:	2302      	movs	r3, #2
 800734a:	e079      	b.n	8007440 <HAL_DMA2D_ConfigLayer+0x114>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	3318      	adds	r3, #24
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	4313      	orrs	r3, r2
 8007374:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007376:	4b35      	ldr	r3, [pc, #212]	@ (800744c <HAL_DMA2D_ConfigLayer+0x120>)
 8007378:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b0a      	cmp	r3, #10
 8007380:	d003      	beq.n	800738a <HAL_DMA2D_ConfigLayer+0x5e>
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b09      	cmp	r3, #9
 8007388:	d107      	bne.n	800739a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]
 8007398:	e005      	b.n	80073a6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	061b      	lsls	r3, r3, #24
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d120      	bne.n	80073ee <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	43db      	mvns	r3, r3
 80073b6:	ea02 0103 	and.w	r1, r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	697a      	ldr	r2, [r7, #20]
 80073c0:	430a      	orrs	r2, r1
 80073c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b0a      	cmp	r3, #10
 80073d4:	d003      	beq.n	80073de <HAL_DMA2D_ConfigLayer+0xb2>
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d127      	bne.n	800742e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80073ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80073ec:	e01f      	b.n	800742e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69da      	ldr	r2, [r3, #28]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	43db      	mvns	r3, r3
 80073f8:	ea02 0103 	and.w	r1, r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	430a      	orrs	r2, r1
 8007404:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	6812      	ldr	r2, [r2, #0]
 800740e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	2b0a      	cmp	r3, #10
 8007416:	d003      	beq.n	8007420 <HAL_DMA2D_ConfigLayer+0xf4>
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	2b09      	cmp	r3, #9
 800741e:	d106      	bne.n	800742e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800742c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	371c      	adds	r7, #28
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	ff03000f 	.word	0xff03000f

08007450 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007450:	b480      	push	{r7}
 8007452:	b08b      	sub	sp, #44	@ 0x2c
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007464:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	041a      	lsls	r2, r3, #16
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	431a      	orrs	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007488:	d174      	bne.n	8007574 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007490:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007498:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80074a0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d108      	bne.n	80074c2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	4313      	orrs	r3, r2
 80074be:	627b      	str	r3, [r7, #36]	@ 0x24
 80074c0:	e053      	b.n	800756a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d106      	bne.n	80074d8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80074d6:	e048      	b.n	800756a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d111      	bne.n	8007504 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	0cdb      	lsrs	r3, r3, #19
 80074e4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	0a9b      	lsrs	r3, r3, #10
 80074ea:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	08db      	lsrs	r3, r3, #3
 80074f0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	02db      	lsls	r3, r3, #11
 80074fa:	4313      	orrs	r3, r2
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	627b      	str	r3, [r7, #36]	@ 0x24
 8007502:	e032      	b.n	800756a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d117      	bne.n	800753c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	0fdb      	lsrs	r3, r3, #31
 8007510:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	0cdb      	lsrs	r3, r3, #19
 8007516:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	0adb      	lsrs	r3, r3, #11
 800751c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	08db      	lsrs	r3, r3, #3
 8007522:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	029b      	lsls	r3, r3, #10
 800752c:	431a      	orrs	r2, r3
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	03db      	lsls	r3, r3, #15
 8007532:	4313      	orrs	r3, r2
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
 800753a:	e016      	b.n	800756a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	0f1b      	lsrs	r3, r3, #28
 8007540:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	0d1b      	lsrs	r3, r3, #20
 8007546:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	0b1b      	lsrs	r3, r3, #12
 800754c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	091b      	lsrs	r3, r3, #4
 8007552:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	011a      	lsls	r2, r3, #4
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	431a      	orrs	r2, r3
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	031b      	lsls	r3, r3, #12
 8007562:	4313      	orrs	r3, r2
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4313      	orrs	r3, r2
 8007568:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007570:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007572:	e003      	b.n	800757c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	60da      	str	r2, [r3, #12]
}
 800757c:	bf00      	nop
 800757e:	372c      	adds	r7, #44	@ 0x2c
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007588:	b480      	push	{r7}
 800758a:	b089      	sub	sp, #36	@ 0x24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007592:	2300      	movs	r3, #0
 8007594:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007596:	2300      	movs	r3, #0
 8007598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800759e:	2300      	movs	r3, #0
 80075a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	61fb      	str	r3, [r7, #28]
 80075a6:	e175      	b.n	8007894 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80075a8:	2201      	movs	r2, #1
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4013      	ands	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	f040 8164 	bne.w	800788e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d005      	beq.n	80075de <HAL_GPIO_Init+0x56>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d130      	bne.n	8007640 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	2203      	movs	r2, #3
 80075ea:	fa02 f303 	lsl.w	r3, r2, r3
 80075ee:	43db      	mvns	r3, r3
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	4013      	ands	r3, r2
 80075f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	4313      	orrs	r3, r2
 8007606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007614:	2201      	movs	r2, #1
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	43db      	mvns	r3, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4013      	ands	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	091b      	lsrs	r3, r3, #4
 800762a:	f003 0201 	and.w	r2, r3, #1
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	4313      	orrs	r3, r2
 8007638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f003 0303 	and.w	r3, r3, #3
 8007648:	2b03      	cmp	r3, #3
 800764a:	d017      	beq.n	800767c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	2203      	movs	r2, #3
 8007658:	fa02 f303 	lsl.w	r3, r2, r3
 800765c:	43db      	mvns	r3, r3
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	4013      	ands	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	689a      	ldr	r2, [r3, #8]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	fa02 f303 	lsl.w	r3, r2, r3
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	4313      	orrs	r3, r2
 8007674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69ba      	ldr	r2, [r7, #24]
 800767a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d123      	bne.n	80076d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	08da      	lsrs	r2, r3, #3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3208      	adds	r2, #8
 8007690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	220f      	movs	r2, #15
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	43db      	mvns	r3, r3
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	4013      	ands	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	4313      	orrs	r3, r2
 80076c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	08da      	lsrs	r2, r3, #3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3208      	adds	r2, #8
 80076ca:	69b9      	ldr	r1, [r7, #24]
 80076cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	2203      	movs	r2, #3
 80076dc:	fa02 f303 	lsl.w	r3, r2, r3
 80076e0:	43db      	mvns	r3, r3
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	4013      	ands	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f003 0203 	and.w	r2, r3, #3
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	fa02 f303 	lsl.w	r3, r2, r3
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 80be 	beq.w	800788e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007712:	4b66      	ldr	r3, [pc, #408]	@ (80078ac <HAL_GPIO_Init+0x324>)
 8007714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007716:	4a65      	ldr	r2, [pc, #404]	@ (80078ac <HAL_GPIO_Init+0x324>)
 8007718:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800771c:	6453      	str	r3, [r2, #68]	@ 0x44
 800771e:	4b63      	ldr	r3, [pc, #396]	@ (80078ac <HAL_GPIO_Init+0x324>)
 8007720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800772a:	4a61      	ldr	r2, [pc, #388]	@ (80078b0 <HAL_GPIO_Init+0x328>)
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	089b      	lsrs	r3, r3, #2
 8007730:	3302      	adds	r3, #2
 8007732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007736:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	220f      	movs	r2, #15
 8007742:	fa02 f303 	lsl.w	r3, r2, r3
 8007746:	43db      	mvns	r3, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4013      	ands	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a58      	ldr	r2, [pc, #352]	@ (80078b4 <HAL_GPIO_Init+0x32c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d037      	beq.n	80077c6 <HAL_GPIO_Init+0x23e>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a57      	ldr	r2, [pc, #348]	@ (80078b8 <HAL_GPIO_Init+0x330>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d031      	beq.n	80077c2 <HAL_GPIO_Init+0x23a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a56      	ldr	r2, [pc, #344]	@ (80078bc <HAL_GPIO_Init+0x334>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d02b      	beq.n	80077be <HAL_GPIO_Init+0x236>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a55      	ldr	r2, [pc, #340]	@ (80078c0 <HAL_GPIO_Init+0x338>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d025      	beq.n	80077ba <HAL_GPIO_Init+0x232>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a54      	ldr	r2, [pc, #336]	@ (80078c4 <HAL_GPIO_Init+0x33c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01f      	beq.n	80077b6 <HAL_GPIO_Init+0x22e>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a53      	ldr	r2, [pc, #332]	@ (80078c8 <HAL_GPIO_Init+0x340>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d019      	beq.n	80077b2 <HAL_GPIO_Init+0x22a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a52      	ldr	r2, [pc, #328]	@ (80078cc <HAL_GPIO_Init+0x344>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_GPIO_Init+0x226>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a51      	ldr	r2, [pc, #324]	@ (80078d0 <HAL_GPIO_Init+0x348>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00d      	beq.n	80077aa <HAL_GPIO_Init+0x222>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a50      	ldr	r2, [pc, #320]	@ (80078d4 <HAL_GPIO_Init+0x34c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d007      	beq.n	80077a6 <HAL_GPIO_Init+0x21e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a4f      	ldr	r2, [pc, #316]	@ (80078d8 <HAL_GPIO_Init+0x350>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d101      	bne.n	80077a2 <HAL_GPIO_Init+0x21a>
 800779e:	2309      	movs	r3, #9
 80077a0:	e012      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077a2:	230a      	movs	r3, #10
 80077a4:	e010      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077a6:	2308      	movs	r3, #8
 80077a8:	e00e      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077aa:	2307      	movs	r3, #7
 80077ac:	e00c      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077ae:	2306      	movs	r3, #6
 80077b0:	e00a      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077b2:	2305      	movs	r3, #5
 80077b4:	e008      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077b6:	2304      	movs	r3, #4
 80077b8:	e006      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077ba:	2303      	movs	r3, #3
 80077bc:	e004      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077be:	2302      	movs	r3, #2
 80077c0:	e002      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <HAL_GPIO_Init+0x240>
 80077c6:	2300      	movs	r3, #0
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	f002 0203 	and.w	r2, r2, #3
 80077ce:	0092      	lsls	r2, r2, #2
 80077d0:	4093      	lsls	r3, r2
 80077d2:	69ba      	ldr	r2, [r7, #24]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80077d8:	4935      	ldr	r1, [pc, #212]	@ (80078b0 <HAL_GPIO_Init+0x328>)
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	089b      	lsrs	r3, r3, #2
 80077de:	3302      	adds	r3, #2
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077e6:	4b3d      	ldr	r3, [pc, #244]	@ (80078dc <HAL_GPIO_Init+0x354>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	43db      	mvns	r3, r3
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	4013      	ands	r3, r2
 80077f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800780a:	4a34      	ldr	r2, [pc, #208]	@ (80078dc <HAL_GPIO_Init+0x354>)
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007810:	4b32      	ldr	r3, [pc, #200]	@ (80078dc <HAL_GPIO_Init+0x354>)
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	43db      	mvns	r3, r3
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	4013      	ands	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d003      	beq.n	8007834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007834:	4a29      	ldr	r2, [pc, #164]	@ (80078dc <HAL_GPIO_Init+0x354>)
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800783a:	4b28      	ldr	r3, [pc, #160]	@ (80078dc <HAL_GPIO_Init+0x354>)
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	43db      	mvns	r3, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	4013      	ands	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007856:	69ba      	ldr	r2, [r7, #24]
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4313      	orrs	r3, r2
 800785c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800785e:	4a1f      	ldr	r2, [pc, #124]	@ (80078dc <HAL_GPIO_Init+0x354>)
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007864:	4b1d      	ldr	r3, [pc, #116]	@ (80078dc <HAL_GPIO_Init+0x354>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	43db      	mvns	r3, r3
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	4013      	ands	r3, r2
 8007872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007880:	69ba      	ldr	r2, [r7, #24]
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4313      	orrs	r3, r2
 8007886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007888:	4a14      	ldr	r2, [pc, #80]	@ (80078dc <HAL_GPIO_Init+0x354>)
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	3301      	adds	r3, #1
 8007892:	61fb      	str	r3, [r7, #28]
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	2b0f      	cmp	r3, #15
 8007898:	f67f ae86 	bls.w	80075a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800789c:	bf00      	nop
 800789e:	bf00      	nop
 80078a0:	3724      	adds	r7, #36	@ 0x24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	40023800 	.word	0x40023800
 80078b0:	40013800 	.word	0x40013800
 80078b4:	40020000 	.word	0x40020000
 80078b8:	40020400 	.word	0x40020400
 80078bc:	40020800 	.word	0x40020800
 80078c0:	40020c00 	.word	0x40020c00
 80078c4:	40021000 	.word	0x40021000
 80078c8:	40021400 	.word	0x40021400
 80078cc:	40021800 	.word	0x40021800
 80078d0:	40021c00 	.word	0x40021c00
 80078d4:	40022000 	.word	0x40022000
 80078d8:	40022400 	.word	0x40022400
 80078dc:	40013c00 	.word	0x40013c00

080078e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
 80078fa:	e0d9      	b.n	8007ab0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80078fc:	2201      	movs	r2, #1
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	fa02 f303 	lsl.w	r3, r2, r3
 8007904:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4013      	ands	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	429a      	cmp	r2, r3
 8007914:	f040 80c9 	bne.w	8007aaa <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8007918:	4a6b      	ldr	r2, [pc, #428]	@ (8007ac8 <HAL_GPIO_DeInit+0x1e8>)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	089b      	lsrs	r3, r3, #2
 800791e:	3302      	adds	r3, #2
 8007920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007924:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	220f      	movs	r2, #15
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	4013      	ands	r3, r2
 8007938:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a63      	ldr	r2, [pc, #396]	@ (8007acc <HAL_GPIO_DeInit+0x1ec>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d037      	beq.n	80079b2 <HAL_GPIO_DeInit+0xd2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a62      	ldr	r2, [pc, #392]	@ (8007ad0 <HAL_GPIO_DeInit+0x1f0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d031      	beq.n	80079ae <HAL_GPIO_DeInit+0xce>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a61      	ldr	r2, [pc, #388]	@ (8007ad4 <HAL_GPIO_DeInit+0x1f4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d02b      	beq.n	80079aa <HAL_GPIO_DeInit+0xca>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a60      	ldr	r2, [pc, #384]	@ (8007ad8 <HAL_GPIO_DeInit+0x1f8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d025      	beq.n	80079a6 <HAL_GPIO_DeInit+0xc6>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a5f      	ldr	r2, [pc, #380]	@ (8007adc <HAL_GPIO_DeInit+0x1fc>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d01f      	beq.n	80079a2 <HAL_GPIO_DeInit+0xc2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a5e      	ldr	r2, [pc, #376]	@ (8007ae0 <HAL_GPIO_DeInit+0x200>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d019      	beq.n	800799e <HAL_GPIO_DeInit+0xbe>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ae4 <HAL_GPIO_DeInit+0x204>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d013      	beq.n	800799a <HAL_GPIO_DeInit+0xba>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a5c      	ldr	r2, [pc, #368]	@ (8007ae8 <HAL_GPIO_DeInit+0x208>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d00d      	beq.n	8007996 <HAL_GPIO_DeInit+0xb6>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a5b      	ldr	r2, [pc, #364]	@ (8007aec <HAL_GPIO_DeInit+0x20c>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d007      	beq.n	8007992 <HAL_GPIO_DeInit+0xb2>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a5a      	ldr	r2, [pc, #360]	@ (8007af0 <HAL_GPIO_DeInit+0x210>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d101      	bne.n	800798e <HAL_GPIO_DeInit+0xae>
 800798a:	2309      	movs	r3, #9
 800798c:	e012      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 800798e:	230a      	movs	r3, #10
 8007990:	e010      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 8007992:	2308      	movs	r3, #8
 8007994:	e00e      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 8007996:	2307      	movs	r3, #7
 8007998:	e00c      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 800799a:	2306      	movs	r3, #6
 800799c:	e00a      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 800799e:	2305      	movs	r3, #5
 80079a0:	e008      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 80079a2:	2304      	movs	r3, #4
 80079a4:	e006      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 80079a6:	2303      	movs	r3, #3
 80079a8:	e004      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 80079aa:	2302      	movs	r3, #2
 80079ac:	e002      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_GPIO_DeInit+0xd4>
 80079b2:	2300      	movs	r3, #0
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	f002 0203 	and.w	r2, r2, #3
 80079ba:	0092      	lsls	r2, r2, #2
 80079bc:	4093      	lsls	r3, r2
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d132      	bne.n	8007a2a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80079c4:	4b4b      	ldr	r3, [pc, #300]	@ (8007af4 <HAL_GPIO_DeInit+0x214>)
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	43db      	mvns	r3, r3
 80079cc:	4949      	ldr	r1, [pc, #292]	@ (8007af4 <HAL_GPIO_DeInit+0x214>)
 80079ce:	4013      	ands	r3, r2
 80079d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80079d2:	4b48      	ldr	r3, [pc, #288]	@ (8007af4 <HAL_GPIO_DeInit+0x214>)
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	43db      	mvns	r3, r3
 80079da:	4946      	ldr	r1, [pc, #280]	@ (8007af4 <HAL_GPIO_DeInit+0x214>)
 80079dc:	4013      	ands	r3, r2
 80079de:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80079e0:	4b44      	ldr	r3, [pc, #272]	@ (8007af4 <HAL_GPIO_DeInit+0x214>)
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	43db      	mvns	r3, r3
 80079e8:	4942      	ldr	r1, [pc, #264]	@ (8007af4 <HAL_GPIO_DeInit+0x214>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80079ee:	4b41      	ldr	r3, [pc, #260]	@ (8007af4 <HAL_GPIO_DeInit+0x214>)
 80079f0:	689a      	ldr	r2, [r3, #8]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	43db      	mvns	r3, r3
 80079f6:	493f      	ldr	r1, [pc, #252]	@ (8007af4 <HAL_GPIO_DeInit+0x214>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	220f      	movs	r2, #15
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ac8 <HAL_GPIO_DeInit+0x1e8>)
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	089b      	lsrs	r3, r3, #2
 8007a12:	3302      	adds	r3, #2
 8007a14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	43da      	mvns	r2, r3
 8007a1c:	482a      	ldr	r0, [pc, #168]	@ (8007ac8 <HAL_GPIO_DeInit+0x1e8>)
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	089b      	lsrs	r3, r3, #2
 8007a22:	400a      	ands	r2, r1
 8007a24:	3302      	adds	r3, #2
 8007a26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	2103      	movs	r1, #3
 8007a34:	fa01 f303 	lsl.w	r3, r1, r3
 8007a38:	43db      	mvns	r3, r3
 8007a3a:	401a      	ands	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	08da      	lsrs	r2, r3, #3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3208      	adds	r2, #8
 8007a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	220f      	movs	r2, #15
 8007a56:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5a:	43db      	mvns	r3, r3
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	08d2      	lsrs	r2, r2, #3
 8007a60:	4019      	ands	r1, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3208      	adds	r2, #8
 8007a66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	2103      	movs	r1, #3
 8007a74:	fa01 f303 	lsl.w	r3, r1, r3
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	2101      	movs	r1, #1
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	fa01 f303 	lsl.w	r3, r1, r3
 8007a8c:	43db      	mvns	r3, r3
 8007a8e:	401a      	ands	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689a      	ldr	r2, [r3, #8]
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	2103      	movs	r1, #3
 8007a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	401a      	ands	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	3301      	adds	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	2b0f      	cmp	r3, #15
 8007ab4:	f67f af22 	bls.w	80078fc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40013800 	.word	0x40013800
 8007acc:	40020000 	.word	0x40020000
 8007ad0:	40020400 	.word	0x40020400
 8007ad4:	40020800 	.word	0x40020800
 8007ad8:	40020c00 	.word	0x40020c00
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	40021400 	.word	0x40021400
 8007ae4:	40021800 	.word	0x40021800
 8007ae8:	40021c00 	.word	0x40021c00
 8007aec:	40022000 	.word	0x40022000
 8007af0:	40022400 	.word	0x40022400
 8007af4:	40013c00 	.word	0x40013c00

08007af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	807b      	strh	r3, [r7, #2]
 8007b04:	4613      	mov	r3, r2
 8007b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007b08:	787b      	ldrb	r3, [r7, #1]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b0e:	887a      	ldrh	r2, [r7, #2]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007b14:	e003      	b.n	8007b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007b16:	887b      	ldrh	r3, [r7, #2]
 8007b18:	041a      	lsls	r2, r3, #16
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	619a      	str	r2, [r3, #24]
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
	...

08007b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e07f      	b.n	8007c3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7fb fa9a 	bl	800308c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2224      	movs	r2, #36	@ 0x24
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007b7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d107      	bne.n	8007ba6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	e006      	b.n	8007bb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007bb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d104      	bne.n	8007bc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6859      	ldr	r1, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c48 <HAL_I2C_Init+0x11c>)
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007be4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	430a      	orrs	r2, r1
 8007bfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	69d9      	ldr	r1, [r3, #28]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1a      	ldr	r2, [r3, #32]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f042 0201 	orr.w	r2, r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	02008000 	.word	0x02008000

08007c4c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e021      	b.n	8007ca2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2224      	movs	r2, #36	@ 0x24
 8007c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 0201 	bic.w	r2, r2, #1
 8007c74:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fb fab0 	bl	80031dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af02      	add	r7, sp, #8
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	817b      	strh	r3, [r7, #10]
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	813b      	strh	r3, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b20      	cmp	r3, #32
 8007cd0:	f040 80f9 	bne.w	8007ec6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d002      	beq.n	8007ce0 <HAL_I2C_Mem_Write+0x34>
 8007cda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d105      	bne.n	8007cec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ce6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e0ed      	b.n	8007ec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_I2C_Mem_Write+0x4e>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e0e6      	b.n	8007ec8 <HAL_I2C_Mem_Write+0x21c>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d02:	f7fe f8fb 	bl	8005efc <HAL_GetTick>
 8007d06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	2319      	movs	r3, #25
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fad1 	bl	80082bc <I2C_WaitOnFlagUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e0d1      	b.n	8007ec8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2221      	movs	r2, #33	@ 0x21
 8007d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2240      	movs	r2, #64	@ 0x40
 8007d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2200      	movs	r2, #0
 8007d38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d4c:	88f8      	ldrh	r0, [r7, #6]
 8007d4e:	893a      	ldrh	r2, [r7, #8]
 8007d50:	8979      	ldrh	r1, [r7, #10]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	9301      	str	r3, [sp, #4]
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f9e1 	bl	8008124 <I2C_RequestMemoryWrite>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d005      	beq.n	8007d74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e0a9      	b.n	8007ec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2bff      	cmp	r3, #255	@ 0xff
 8007d7c:	d90e      	bls.n	8007d9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	22ff      	movs	r2, #255	@ 0xff
 8007d82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	8979      	ldrh	r1, [r7, #10]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 fc2d 	bl	80085f4 <I2C_TransferConfig>
 8007d9a:	e00f      	b.n	8007dbc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	8979      	ldrh	r1, [r7, #10]
 8007dae:	2300      	movs	r3, #0
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 fc1c 	bl	80085f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fabb 	bl	800833c <I2C_WaitOnTXISFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e07b      	b.n	8007ec8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd4:	781a      	ldrb	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d034      	beq.n	8007e74 <HAL_I2C_Mem_Write+0x1c8>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d130      	bne.n	8007e74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2180      	movs	r1, #128	@ 0x80
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fa4d 	bl	80082bc <I2C_WaitOnFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e04d      	b.n	8007ec8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2bff      	cmp	r3, #255	@ 0xff
 8007e34:	d90e      	bls.n	8007e54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	22ff      	movs	r2, #255	@ 0xff
 8007e3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	8979      	ldrh	r1, [r7, #10]
 8007e44:	2300      	movs	r3, #0
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 fbd1 	bl	80085f4 <I2C_TransferConfig>
 8007e52:	e00f      	b.n	8007e74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	8979      	ldrh	r1, [r7, #10]
 8007e66:	2300      	movs	r3, #0
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 fbc0 	bl	80085f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d19e      	bne.n	8007dbc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 fa9a 	bl	80083bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e01a      	b.n	8007ec8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2220      	movs	r2, #32
 8007e98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6859      	ldr	r1, [r3, #4]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed0 <HAL_I2C_Mem_Write+0x224>)
 8007ea6:	400b      	ands	r3, r1
 8007ea8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e000      	b.n	8007ec8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
  }
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	fe00e800 	.word	0xfe00e800

08007ed4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af02      	add	r7, sp, #8
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	4608      	mov	r0, r1
 8007ede:	4611      	mov	r1, r2
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	817b      	strh	r3, [r7, #10]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	813b      	strh	r3, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	f040 80fd 	bne.w	80080f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <HAL_I2C_Mem_Read+0x34>
 8007f02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d105      	bne.n	8007f14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e0f1      	b.n	80080f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_I2C_Mem_Read+0x4e>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e0ea      	b.n	80080f8 <HAL_I2C_Mem_Read+0x224>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007f2a:	f7fd ffe7 	bl	8005efc <HAL_GetTick>
 8007f2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	2319      	movs	r3, #25
 8007f36:	2201      	movs	r2, #1
 8007f38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f9bd 	bl	80082bc <I2C_WaitOnFlagUntilTimeout>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0d5      	b.n	80080f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2222      	movs	r2, #34	@ 0x22
 8007f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2240      	movs	r2, #64	@ 0x40
 8007f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a3a      	ldr	r2, [r7, #32]
 8007f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f74:	88f8      	ldrh	r0, [r7, #6]
 8007f76:	893a      	ldrh	r2, [r7, #8]
 8007f78:	8979      	ldrh	r1, [r7, #10]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	9301      	str	r3, [sp, #4]
 8007f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	4603      	mov	r3, r0
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f921 	bl	80081cc <I2C_RequestMemoryRead>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e0ad      	b.n	80080f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2bff      	cmp	r3, #255	@ 0xff
 8007fa4:	d90e      	bls.n	8007fc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	22ff      	movs	r2, #255	@ 0xff
 8007faa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	8979      	ldrh	r1, [r7, #10]
 8007fb4:	4b52      	ldr	r3, [pc, #328]	@ (8008100 <HAL_I2C_Mem_Read+0x22c>)
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 fb19 	bl	80085f4 <I2C_TransferConfig>
 8007fc2:	e00f      	b.n	8007fe4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	8979      	ldrh	r1, [r7, #10]
 8007fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8008100 <HAL_I2C_Mem_Read+0x22c>)
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 fb08 	bl	80085f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fea:	2200      	movs	r2, #0
 8007fec:	2104      	movs	r1, #4
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 f964 	bl	80082bc <I2C_WaitOnFlagUntilTimeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e07c      	b.n	80080f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008026:	b29b      	uxth	r3, r3
 8008028:	3b01      	subs	r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d034      	beq.n	80080a4 <HAL_I2C_Mem_Read+0x1d0>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800803e:	2b00      	cmp	r3, #0
 8008040:	d130      	bne.n	80080a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008048:	2200      	movs	r2, #0
 800804a:	2180      	movs	r1, #128	@ 0x80
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f935 	bl	80082bc <I2C_WaitOnFlagUntilTimeout>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e04d      	b.n	80080f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008060:	b29b      	uxth	r3, r3
 8008062:	2bff      	cmp	r3, #255	@ 0xff
 8008064:	d90e      	bls.n	8008084 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	22ff      	movs	r2, #255	@ 0xff
 800806a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008070:	b2da      	uxtb	r2, r3
 8008072:	8979      	ldrh	r1, [r7, #10]
 8008074:	2300      	movs	r3, #0
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fab9 	bl	80085f4 <I2C_TransferConfig>
 8008082:	e00f      	b.n	80080a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008088:	b29a      	uxth	r2, r3
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008092:	b2da      	uxtb	r2, r3
 8008094:	8979      	ldrh	r1, [r7, #10]
 8008096:	2300      	movs	r3, #0
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 faa8 	bl	80085f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a8:	b29b      	uxth	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d19a      	bne.n	8007fe4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f982 	bl	80083bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e01a      	b.n	80080f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2220      	movs	r2, #32
 80080c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	6859      	ldr	r1, [r3, #4]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008104 <HAL_I2C_Mem_Read+0x230>)
 80080d6:	400b      	ands	r3, r1
 80080d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2220      	movs	r2, #32
 80080de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	e000      	b.n	80080f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80080f6:	2302      	movs	r3, #2
  }
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	80002400 	.word	0x80002400
 8008104:	fe00e800 	.word	0xfe00e800

08008108 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008116:	b2db      	uxtb	r3, r3
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	4608      	mov	r0, r1
 800812e:	4611      	mov	r1, r2
 8008130:	461a      	mov	r2, r3
 8008132:	4603      	mov	r3, r0
 8008134:	817b      	strh	r3, [r7, #10]
 8008136:	460b      	mov	r3, r1
 8008138:	813b      	strh	r3, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	b2da      	uxtb	r2, r3
 8008142:	8979      	ldrh	r1, [r7, #10]
 8008144:	4b20      	ldr	r3, [pc, #128]	@ (80081c8 <I2C_RequestMemoryWrite+0xa4>)
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 fa51 	bl	80085f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008152:	69fa      	ldr	r2, [r7, #28]
 8008154:	69b9      	ldr	r1, [r7, #24]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 f8f0 	bl	800833c <I2C_WaitOnTXISFlagUntilTimeout>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e02c      	b.n	80081c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d105      	bne.n	8008178 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800816c:	893b      	ldrh	r3, [r7, #8]
 800816e:	b2da      	uxtb	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	629a      	str	r2, [r3, #40]	@ 0x28
 8008176:	e015      	b.n	80081a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008178:	893b      	ldrh	r3, [r7, #8]
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	b29b      	uxth	r3, r3
 800817e:	b2da      	uxtb	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008186:	69fa      	ldr	r2, [r7, #28]
 8008188:	69b9      	ldr	r1, [r7, #24]
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 f8d6 	bl	800833c <I2C_WaitOnTXISFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e012      	b.n	80081c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800819a:	893b      	ldrh	r3, [r7, #8]
 800819c:	b2da      	uxtb	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	2200      	movs	r2, #0
 80081ac:	2180      	movs	r1, #128	@ 0x80
 80081ae:	68f8      	ldr	r0, [r7, #12]
 80081b0:	f000 f884 	bl	80082bc <I2C_WaitOnFlagUntilTimeout>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e000      	b.n	80081c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	80002000 	.word	0x80002000

080081cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	4608      	mov	r0, r1
 80081d6:	4611      	mov	r1, r2
 80081d8:	461a      	mov	r2, r3
 80081da:	4603      	mov	r3, r0
 80081dc:	817b      	strh	r3, [r7, #10]
 80081de:	460b      	mov	r3, r1
 80081e0:	813b      	strh	r3, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80081e6:	88fb      	ldrh	r3, [r7, #6]
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	8979      	ldrh	r1, [r7, #10]
 80081ec:	4b20      	ldr	r3, [pc, #128]	@ (8008270 <I2C_RequestMemoryRead+0xa4>)
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	2300      	movs	r3, #0
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f9fe 	bl	80085f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081f8:	69fa      	ldr	r2, [r7, #28]
 80081fa:	69b9      	ldr	r1, [r7, #24]
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 f89d 	bl	800833c <I2C_WaitOnTXISFlagUntilTimeout>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e02c      	b.n	8008266 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d105      	bne.n	800821e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008212:	893b      	ldrh	r3, [r7, #8]
 8008214:	b2da      	uxtb	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	629a      	str	r2, [r3, #40]	@ 0x28
 800821c:	e015      	b.n	800824a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800821e:	893b      	ldrh	r3, [r7, #8]
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	b29b      	uxth	r3, r3
 8008224:	b2da      	uxtb	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	69b9      	ldr	r1, [r7, #24]
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 f883 	bl	800833c <I2C_WaitOnTXISFlagUntilTimeout>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e012      	b.n	8008266 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008240:	893b      	ldrh	r3, [r7, #8]
 8008242:	b2da      	uxtb	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	2200      	movs	r2, #0
 8008252:	2140      	movs	r1, #64	@ 0x40
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 f831 	bl	80082bc <I2C_WaitOnFlagUntilTimeout>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	80002000 	.word	0x80002000

08008274 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b02      	cmp	r3, #2
 8008288:	d103      	bne.n	8008292 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2200      	movs	r2, #0
 8008290:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b01      	cmp	r3, #1
 800829e:	d007      	beq.n	80082b0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699a      	ldr	r2, [r3, #24]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	619a      	str	r2, [r3, #24]
  }
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	603b      	str	r3, [r7, #0]
 80082c8:	4613      	mov	r3, r2
 80082ca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082cc:	e022      	b.n	8008314 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082d4:	d01e      	beq.n	8008314 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082d6:	f7fd fe11 	bl	8005efc <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	1ad3      	subs	r3, r2, r3
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d302      	bcc.n	80082ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d113      	bne.n	8008314 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f0:	f043 0220 	orr.w	r2, r3, #32
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2220      	movs	r2, #32
 80082fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e00f      	b.n	8008334 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	4013      	ands	r3, r2
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	429a      	cmp	r2, r3
 8008322:	bf0c      	ite	eq
 8008324:	2301      	moveq	r3, #1
 8008326:	2300      	movne	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	429a      	cmp	r2, r3
 8008330:	d0cd      	beq.n	80082ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008348:	e02c      	b.n	80083a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 f870 	bl	8008434 <I2C_IsErrorOccurred>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e02a      	b.n	80083b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008364:	d01e      	beq.n	80083a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008366:	f7fd fdc9 	bl	8005efc <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	d302      	bcc.n	800837c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d113      	bne.n	80083a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008380:	f043 0220 	orr.w	r2, r3, #32
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e007      	b.n	80083b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d1cb      	bne.n	800834a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083c8:	e028      	b.n	800841c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f830 	bl	8008434 <I2C_IsErrorOccurred>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e026      	b.n	800842c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083de:	f7fd fd8d 	bl	8005efc <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d302      	bcc.n	80083f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d113      	bne.n	800841c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f8:	f043 0220 	orr.w	r2, r3, #32
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e007      	b.n	800842c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	2b20      	cmp	r3, #32
 8008428:	d1cf      	bne.n	80083ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	@ 0x28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	2b00      	cmp	r3, #0
 800845e:	d068      	beq.n	8008532 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2210      	movs	r2, #16
 8008466:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008468:	e049      	b.n	80084fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008470:	d045      	beq.n	80084fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008472:	f7fd fd43 	bl	8005efc <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	429a      	cmp	r2, r3
 8008480:	d302      	bcc.n	8008488 <I2C_IsErrorOccurred+0x54>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d13a      	bne.n	80084fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008492:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800849a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084aa:	d121      	bne.n	80084f0 <I2C_IsErrorOccurred+0xbc>
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084b2:	d01d      	beq.n	80084f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80084b4:	7cfb      	ldrb	r3, [r7, #19]
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d01a      	beq.n	80084f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80084ca:	f7fd fd17 	bl	8005efc <HAL_GetTick>
 80084ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084d0:	e00e      	b.n	80084f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80084d2:	f7fd fd13 	bl	8005efc <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b19      	cmp	r3, #25
 80084de:	d907      	bls.n	80084f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	f043 0320 	orr.w	r3, r3, #32
 80084e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80084ee:	e006      	b.n	80084fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d1e9      	bne.n	80084d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	699b      	ldr	r3, [r3, #24]
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b20      	cmp	r3, #32
 800850a:	d003      	beq.n	8008514 <I2C_IsErrorOccurred+0xe0>
 800850c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0aa      	beq.n	800846a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008518:	2b00      	cmp	r3, #0
 800851a:	d103      	bne.n	8008524 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2220      	movs	r2, #32
 8008522:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	f043 0304 	orr.w	r3, r3, #4
 800852a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008554:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008566:	6a3b      	ldr	r3, [r7, #32]
 8008568:	f043 0308 	orr.w	r3, r3, #8
 800856c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008576:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008578:	2301      	movs	r3, #1
 800857a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	f043 0302 	orr.w	r3, r3, #2
 800858e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008598:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80085a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d01c      	beq.n	80085e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff fe63 	bl	8008274 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6859      	ldr	r1, [r3, #4]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	4b0d      	ldr	r3, [pc, #52]	@ (80085f0 <I2C_IsErrorOccurred+0x1bc>)
 80085ba:	400b      	ands	r3, r1
 80085bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	431a      	orrs	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80085e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3728      	adds	r7, #40	@ 0x28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	fe00e800 	.word	0xfe00e800

080085f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	607b      	str	r3, [r7, #4]
 80085fe:	460b      	mov	r3, r1
 8008600:	817b      	strh	r3, [r7, #10]
 8008602:	4613      	mov	r3, r2
 8008604:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008606:	897b      	ldrh	r3, [r7, #10]
 8008608:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800860c:	7a7b      	ldrb	r3, [r7, #9]
 800860e:	041b      	lsls	r3, r3, #16
 8008610:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008614:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	4313      	orrs	r3, r2
 800861e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008622:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	0d5b      	lsrs	r3, r3, #21
 800862e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008632:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <I2C_TransferConfig+0x60>)
 8008634:	430b      	orrs	r3, r1
 8008636:	43db      	mvns	r3, r3
 8008638:	ea02 0103 	and.w	r1, r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	430a      	orrs	r2, r1
 8008644:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008646:	bf00      	nop
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	03ff63ff 	.word	0x03ff63ff

08008658 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b20      	cmp	r3, #32
 800866c:	d138      	bne.n	80086e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008678:	2302      	movs	r3, #2
 800867a:	e032      	b.n	80086e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2224      	movs	r2, #36	@ 0x24
 8008688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f022 0201 	bic.w	r2, r2, #1
 800869a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80086aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6819      	ldr	r1, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f042 0201 	orr.w	r2, r2, #1
 80086ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	e000      	b.n	80086e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086e0:	2302      	movs	r3, #2
  }
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b20      	cmp	r3, #32
 8008702:	d139      	bne.n	8008778 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800870a:	2b01      	cmp	r3, #1
 800870c:	d101      	bne.n	8008712 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800870e:	2302      	movs	r3, #2
 8008710:	e033      	b.n	800877a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2224      	movs	r2, #36	@ 0x24
 800871e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 0201 	bic.w	r2, r2, #1
 8008730:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008740:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	021b      	lsls	r3, r3, #8
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4313      	orrs	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	e000      	b.n	800877a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008778:	2302      	movs	r3, #2
  }
}
 800877a:	4618      	mov	r0, r3
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
	...

08008788 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d101      	bne.n	800879a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e0bf      	b.n	800891a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d106      	bne.n	80087b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fa fdd2 	bl	8003358 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2202      	movs	r2, #2
 80087b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	699a      	ldr	r2, [r3, #24]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80087ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6999      	ldr	r1, [r3, #24]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80087e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6899      	ldr	r1, [r3, #8]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4b4a      	ldr	r3, [pc, #296]	@ (8008924 <HAL_LTDC_Init+0x19c>)
 80087fc:	400b      	ands	r3, r1
 80087fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	041b      	lsls	r3, r3, #16
 8008806:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6899      	ldr	r1, [r3, #8]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699a      	ldr	r2, [r3, #24]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	431a      	orrs	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68d9      	ldr	r1, [r3, #12]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	4b3e      	ldr	r3, [pc, #248]	@ (8008924 <HAL_LTDC_Init+0x19c>)
 800882a:	400b      	ands	r3, r1
 800882c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	041b      	lsls	r3, r3, #16
 8008834:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68d9      	ldr	r1, [r3, #12]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1a      	ldr	r2, [r3, #32]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6919      	ldr	r1, [r3, #16]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	4b33      	ldr	r3, [pc, #204]	@ (8008924 <HAL_LTDC_Init+0x19c>)
 8008858:	400b      	ands	r3, r1
 800885a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008860:	041b      	lsls	r3, r3, #16
 8008862:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6919      	ldr	r1, [r3, #16]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6959      	ldr	r1, [r3, #20]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	4b27      	ldr	r3, [pc, #156]	@ (8008924 <HAL_LTDC_Init+0x19c>)
 8008886:	400b      	ands	r3, r1
 8008888:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888e:	041b      	lsls	r3, r3, #16
 8008890:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6959      	ldr	r1, [r3, #20]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	430a      	orrs	r2, r1
 80088a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80088ae:	021b      	lsls	r3, r3, #8
 80088b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80088b8:	041b      	lsls	r3, r3, #16
 80088ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80088ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80088de:	431a      	orrs	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f042 0206 	orr.w	r2, r2, #6
 80088f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	f000f800 	.word	0xf000f800

08008928 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008936:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800893e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f003 0304 	and.w	r3, r3, #4
 8008946:	2b00      	cmp	r3, #0
 8008948:	d023      	beq.n	8008992 <HAL_LTDC_IRQHandler+0x6a>
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01e      	beq.n	8008992 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0204 	bic.w	r2, r2, #4
 8008962:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2204      	movs	r2, #4
 800896a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008972:	f043 0201 	orr.w	r2, r3, #1
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2204      	movs	r2, #4
 8008980:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f86f 	bl	8008a70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	2b00      	cmp	r3, #0
 800899a:	d023      	beq.n	80089e4 <HAL_LTDC_IRQHandler+0xbc>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01e      	beq.n	80089e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 0202 	bic.w	r2, r2, #2
 80089b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2202      	movs	r2, #2
 80089bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089c4:	f043 0202 	orr.w	r2, r3, #2
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2204      	movs	r2, #4
 80089d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f846 	bl	8008a70 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01b      	beq.n	8008a26 <HAL_LTDC_IRQHandler+0xfe>
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d016      	beq.n	8008a26 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f022 0201 	bic.w	r2, r2, #1
 8008a06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f82f 	bl	8008a84 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d01b      	beq.n	8008a68 <HAL_LTDC_IRQHandler+0x140>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0208 	bic.w	r2, r2, #8
 8008a48:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2208      	movs	r2, #8
 8008a50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f818 	bl	8008a98 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008a68:	bf00      	nop
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008aac:	b5b0      	push	{r4, r5, r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_LTDC_ConfigLayer+0x1a>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e02c      	b.n	8008b20 <HAL_LTDC_ConfigLayer+0x74>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2202      	movs	r2, #2
 8008ad2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2134      	movs	r1, #52	@ 0x34
 8008adc:	fb01 f303 	mul.w	r3, r1, r3
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	4614      	mov	r4, r2
 8008aea:	461d      	mov	r5, r3
 8008aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f81f 	bl	8008b44 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8008b1e:	2300      	movs	r3, #0
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bdb0      	pop	{r4, r5, r7, pc}

08008b28 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008b36:	b2db      	uxtb	r3, r3
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b089      	sub	sp, #36	@ 0x24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	0c1b      	lsrs	r3, r3, #16
 8008b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b60:	4413      	add	r3, r2
 8008b62:	041b      	lsls	r3, r3, #16
 8008b64:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	01db      	lsls	r3, r3, #7
 8008b70:	4413      	add	r3, r2
 8008b72:	3384      	adds	r3, #132	@ 0x84
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	6812      	ldr	r2, [r2, #0]
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	01d2      	lsls	r2, r2, #7
 8008b80:	440a      	add	r2, r1
 8008b82:	3284      	adds	r2, #132	@ 0x84
 8008b84:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008b88:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	0c1b      	lsrs	r3, r3, #16
 8008b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b9a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008b9c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	01db      	lsls	r3, r3, #7
 8008ba8:	440b      	add	r3, r1
 8008baa:	3384      	adds	r3, #132	@ 0x84
 8008bac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008bb2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bc2:	4413      	add	r3, r2
 8008bc4:	041b      	lsls	r3, r3, #16
 8008bc6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	461a      	mov	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	01db      	lsls	r3, r3, #7
 8008bd2:	4413      	add	r3, r2
 8008bd4:	3384      	adds	r3, #132	@ 0x84
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	6812      	ldr	r2, [r2, #0]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	01d2      	lsls	r2, r2, #7
 8008be2:	440a      	add	r2, r1
 8008be4:	3284      	adds	r2, #132	@ 0x84
 8008be6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008bea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008bfa:	4413      	add	r3, r2
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4619      	mov	r1, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	01db      	lsls	r3, r3, #7
 8008c08:	440b      	add	r3, r1
 8008c0a:	3384      	adds	r3, #132	@ 0x84
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	01db      	lsls	r3, r3, #7
 8008c1e:	4413      	add	r3, r2
 8008c20:	3384      	adds	r3, #132	@ 0x84
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	6812      	ldr	r2, [r2, #0]
 8008c28:	4611      	mov	r1, r2
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	01d2      	lsls	r2, r2, #7
 8008c2e:	440a      	add	r2, r1
 8008c30:	3284      	adds	r2, #132	@ 0x84
 8008c32:	f023 0307 	bic.w	r3, r3, #7
 8008c36:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	01db      	lsls	r3, r3, #7
 8008c42:	4413      	add	r3, r2
 8008c44:	3384      	adds	r3, #132	@ 0x84
 8008c46:	461a      	mov	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008c54:	021b      	lsls	r3, r3, #8
 8008c56:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008c5e:	041b      	lsls	r3, r3, #16
 8008c60:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	061b      	lsls	r3, r3, #24
 8008c68:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	01db      	lsls	r3, r3, #7
 8008c74:	4413      	add	r3, r2
 8008c76:	3384      	adds	r3, #132	@ 0x84
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	01db      	lsls	r3, r3, #7
 8008c84:	4413      	add	r3, r2
 8008c86:	3384      	adds	r3, #132	@ 0x84
 8008c88:	461a      	mov	r2, r3
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008c94:	461a      	mov	r2, r3
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	01db      	lsls	r3, r3, #7
 8008ca8:	440b      	add	r3, r1
 8008caa:	3384      	adds	r3, #132	@ 0x84
 8008cac:	4619      	mov	r1, r3
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	461a      	mov	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	01db      	lsls	r3, r3, #7
 8008cbe:	4413      	add	r3, r2
 8008cc0:	3384      	adds	r3, #132	@ 0x84
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	6812      	ldr	r2, [r2, #0]
 8008cc8:	4611      	mov	r1, r2
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	01d2      	lsls	r2, r2, #7
 8008cce:	440a      	add	r2, r1
 8008cd0:	3284      	adds	r2, #132	@ 0x84
 8008cd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008cd6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	461a      	mov	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	01db      	lsls	r3, r3, #7
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3384      	adds	r3, #132	@ 0x84
 8008ce6:	461a      	mov	r2, r3
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	01db      	lsls	r3, r3, #7
 8008cf8:	4413      	add	r3, r2
 8008cfa:	3384      	adds	r3, #132	@ 0x84
 8008cfc:	69da      	ldr	r2, [r3, #28]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	01db      	lsls	r3, r3, #7
 8008d08:	440b      	add	r3, r1
 8008d0a:	3384      	adds	r3, #132	@ 0x84
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	4b58      	ldr	r3, [pc, #352]	@ (8008e70 <LTDC_SetConfig+0x32c>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	69da      	ldr	r2, [r3, #28]
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	68f9      	ldr	r1, [r7, #12]
 8008d1e:	6809      	ldr	r1, [r1, #0]
 8008d20:	4608      	mov	r0, r1
 8008d22:	6879      	ldr	r1, [r7, #4]
 8008d24:	01c9      	lsls	r1, r1, #7
 8008d26:	4401      	add	r1, r0
 8008d28:	3184      	adds	r1, #132	@ 0x84
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	01db      	lsls	r3, r3, #7
 8008d38:	4413      	add	r3, r2
 8008d3a:	3384      	adds	r3, #132	@ 0x84
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	01db      	lsls	r3, r3, #7
 8008d48:	4413      	add	r3, r2
 8008d4a:	3384      	adds	r3, #132	@ 0x84
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2300      	movs	r3, #0
 8008d50:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	01db      	lsls	r3, r3, #7
 8008d5c:	4413      	add	r3, r2
 8008d5e:	3384      	adds	r3, #132	@ 0x84
 8008d60:	461a      	mov	r2, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d66:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d102      	bne.n	8008d76 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008d70:	2304      	movs	r3, #4
 8008d72:	61fb      	str	r3, [r7, #28]
 8008d74:	e01b      	b.n	8008dae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d102      	bne.n	8008d84 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	61fb      	str	r3, [r7, #28]
 8008d82:	e014      	b.n	8008dae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d00b      	beq.n	8008da4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d007      	beq.n	8008da4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d003      	beq.n	8008da4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008da0:	2b07      	cmp	r3, #7
 8008da2:	d102      	bne.n	8008daa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008da4:	2302      	movs	r3, #2
 8008da6:	61fb      	str	r3, [r7, #28]
 8008da8:	e001      	b.n	8008dae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008daa:	2301      	movs	r3, #1
 8008dac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	01db      	lsls	r3, r3, #7
 8008db8:	4413      	add	r3, r2
 8008dba:	3384      	adds	r3, #132	@ 0x84
 8008dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	6812      	ldr	r2, [r2, #0]
 8008dc2:	4611      	mov	r1, r2
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	01d2      	lsls	r2, r2, #7
 8008dc8:	440a      	add	r2, r1
 8008dca:	3284      	adds	r2, #132	@ 0x84
 8008dcc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	fb02 f303 	mul.w	r3, r2, r3
 8008ddc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6859      	ldr	r1, [r3, #4]
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	1acb      	subs	r3, r1, r3
 8008de8:	69f9      	ldr	r1, [r7, #28]
 8008dea:	fb01 f303 	mul.w	r3, r1, r3
 8008dee:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	6809      	ldr	r1, [r1, #0]
 8008df4:	4608      	mov	r0, r1
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	01c9      	lsls	r1, r1, #7
 8008dfa:	4401      	add	r1, r0
 8008dfc:	3184      	adds	r1, #132	@ 0x84
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	01db      	lsls	r3, r3, #7
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3384      	adds	r3, #132	@ 0x84
 8008e10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4619      	mov	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	01db      	lsls	r3, r3, #7
 8008e1c:	440b      	add	r3, r1
 8008e1e:	3384      	adds	r3, #132	@ 0x84
 8008e20:	4619      	mov	r1, r3
 8008e22:	4b14      	ldr	r3, [pc, #80]	@ (8008e74 <LTDC_SetConfig+0x330>)
 8008e24:	4013      	ands	r3, r2
 8008e26:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	01db      	lsls	r3, r3, #7
 8008e32:	4413      	add	r3, r2
 8008e34:	3384      	adds	r3, #132	@ 0x84
 8008e36:	461a      	mov	r2, r3
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	01db      	lsls	r3, r3, #7
 8008e48:	4413      	add	r3, r2
 8008e4a:	3384      	adds	r3, #132	@ 0x84
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	4611      	mov	r1, r2
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	01d2      	lsls	r2, r2, #7
 8008e58:	440a      	add	r2, r1
 8008e5a:	3284      	adds	r2, #132	@ 0x84
 8008e5c:	f043 0301 	orr.w	r3, r3, #1
 8008e60:	6013      	str	r3, [r2, #0]
}
 8008e62:	bf00      	nop
 8008e64:	3724      	adds	r7, #36	@ 0x24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	fffff8f8 	.word	0xfffff8f8
 8008e74:	fffff800 	.word	0xfffff800

08008e78 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e7c:	4b05      	ldr	r3, [pc, #20]	@ (8008e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a04      	ldr	r2, [pc, #16]	@ (8008e94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e86:	6013      	str	r3, [r2, #0]
}
 8008e88:	bf00      	nop
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40007000 	.word	0x40007000

08008e98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008ea2:	4b23      	ldr	r3, [pc, #140]	@ (8008f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea6:	4a22      	ldr	r2, [pc, #136]	@ (8008f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8008eae:	4b20      	ldr	r3, [pc, #128]	@ (8008f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8008eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008eb6:	603b      	str	r3, [r7, #0]
 8008eb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008eba:	4b1e      	ldr	r3, [pc, #120]	@ (8008f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8008f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ec4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008ec6:	f7fd f819 	bl	8005efc <HAL_GetTick>
 8008eca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008ecc:	e009      	b.n	8008ee2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008ece:	f7fd f815 	bl	8005efc <HAL_GetTick>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008edc:	d901      	bls.n	8008ee2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e022      	b.n	8008f28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008ee2:	4b14      	ldr	r3, [pc, #80]	@ (8008f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008eea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eee:	d1ee      	bne.n	8008ece <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008ef0:	4b10      	ldr	r3, [pc, #64]	@ (8008f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8008f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008efa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008efc:	f7fc fffe 	bl	8005efc <HAL_GetTick>
 8008f00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f02:	e009      	b.n	8008f18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f04:	f7fc fffa 	bl	8005efc <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f12:	d901      	bls.n	8008f18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	e007      	b.n	8008f28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f18:	4b06      	ldr	r3, [pc, #24]	@ (8008f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f24:	d1ee      	bne.n	8008f04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	40023800 	.word	0x40023800
 8008f34:	40007000 	.word	0x40007000

08008f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008f40:	2300      	movs	r3, #0
 8008f42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e291      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8087 	beq.w	800906a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f5c:	4b96      	ldr	r3, [pc, #600]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	f003 030c 	and.w	r3, r3, #12
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d00c      	beq.n	8008f82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f68:	4b93      	ldr	r3, [pc, #588]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 030c 	and.w	r3, r3, #12
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d112      	bne.n	8008f9a <HAL_RCC_OscConfig+0x62>
 8008f74:	4b90      	ldr	r3, [pc, #576]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f80:	d10b      	bne.n	8008f9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f82:	4b8d      	ldr	r3, [pc, #564]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d06c      	beq.n	8009068 <HAL_RCC_OscConfig+0x130>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d168      	bne.n	8009068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e26b      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fa2:	d106      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x7a>
 8008fa4:	4b84      	ldr	r3, [pc, #528]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a83      	ldr	r2, [pc, #524]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fae:	6013      	str	r3, [r2, #0]
 8008fb0:	e02e      	b.n	8009010 <HAL_RCC_OscConfig+0xd8>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10c      	bne.n	8008fd4 <HAL_RCC_OscConfig+0x9c>
 8008fba:	4b7f      	ldr	r3, [pc, #508]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008fc4:	6013      	str	r3, [r2, #0]
 8008fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a7b      	ldr	r2, [pc, #492]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	e01d      	b.n	8009010 <HAL_RCC_OscConfig+0xd8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fdc:	d10c      	bne.n	8008ff8 <HAL_RCC_OscConfig+0xc0>
 8008fde:	4b76      	ldr	r3, [pc, #472]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a75      	ldr	r2, [pc, #468]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	4b73      	ldr	r3, [pc, #460]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a72      	ldr	r2, [pc, #456]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	e00b      	b.n	8009010 <HAL_RCC_OscConfig+0xd8>
 8008ff8:	4b6f      	ldr	r3, [pc, #444]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8008ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	4b6c      	ldr	r3, [pc, #432]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a6b      	ldr	r2, [pc, #428]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 800900a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800900e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d013      	beq.n	8009040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009018:	f7fc ff70 	bl	8005efc <HAL_GetTick>
 800901c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800901e:	e008      	b.n	8009032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009020:	f7fc ff6c 	bl	8005efc <HAL_GetTick>
 8009024:	4602      	mov	r2, r0
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	2b64      	cmp	r3, #100	@ 0x64
 800902c:	d901      	bls.n	8009032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e21f      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009032:	4b61      	ldr	r3, [pc, #388]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d0f0      	beq.n	8009020 <HAL_RCC_OscConfig+0xe8>
 800903e:	e014      	b.n	800906a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009040:	f7fc ff5c 	bl	8005efc <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009048:	f7fc ff58 	bl	8005efc <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b64      	cmp	r3, #100	@ 0x64
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e20b      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800905a:	4b57      	ldr	r3, [pc, #348]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f0      	bne.n	8009048 <HAL_RCC_OscConfig+0x110>
 8009066:	e000      	b.n	800906a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d069      	beq.n	800914a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009076:	4b50      	ldr	r3, [pc, #320]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 030c 	and.w	r3, r3, #12
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009082:	4b4d      	ldr	r3, [pc, #308]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f003 030c 	and.w	r3, r3, #12
 800908a:	2b08      	cmp	r3, #8
 800908c:	d11c      	bne.n	80090c8 <HAL_RCC_OscConfig+0x190>
 800908e:	4b4a      	ldr	r3, [pc, #296]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d116      	bne.n	80090c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800909a:	4b47      	ldr	r3, [pc, #284]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d005      	beq.n	80090b2 <HAL_RCC_OscConfig+0x17a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d001      	beq.n	80090b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e1df      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090b2:	4b41      	ldr	r3, [pc, #260]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	493d      	ldr	r1, [pc, #244]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090c6:	e040      	b.n	800914a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d023      	beq.n	8009118 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80090d0:	4b39      	ldr	r3, [pc, #228]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a38      	ldr	r2, [pc, #224]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 80090d6:	f043 0301 	orr.w	r3, r3, #1
 80090da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090dc:	f7fc ff0e 	bl	8005efc <HAL_GetTick>
 80090e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090e2:	e008      	b.n	80090f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090e4:	f7fc ff0a 	bl	8005efc <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d901      	bls.n	80090f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e1bd      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090f6:	4b30      	ldr	r3, [pc, #192]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0f0      	beq.n	80090e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009102:	4b2d      	ldr	r3, [pc, #180]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	4929      	ldr	r1, [pc, #164]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009112:	4313      	orrs	r3, r2
 8009114:	600b      	str	r3, [r1, #0]
 8009116:	e018      	b.n	800914a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009118:	4b27      	ldr	r3, [pc, #156]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a26      	ldr	r2, [pc, #152]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 800911e:	f023 0301 	bic.w	r3, r3, #1
 8009122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009124:	f7fc feea 	bl	8005efc <HAL_GetTick>
 8009128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800912a:	e008      	b.n	800913e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800912c:	f7fc fee6 	bl	8005efc <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	2b02      	cmp	r3, #2
 8009138:	d901      	bls.n	800913e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e199      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800913e:	4b1e      	ldr	r3, [pc, #120]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b00      	cmp	r3, #0
 8009148:	d1f0      	bne.n	800912c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0308 	and.w	r3, r3, #8
 8009152:	2b00      	cmp	r3, #0
 8009154:	d038      	beq.n	80091c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d019      	beq.n	8009192 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800915e:	4b16      	ldr	r3, [pc, #88]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009162:	4a15      	ldr	r2, [pc, #84]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009164:	f043 0301 	orr.w	r3, r3, #1
 8009168:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800916a:	f7fc fec7 	bl	8005efc <HAL_GetTick>
 800916e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009170:	e008      	b.n	8009184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009172:	f7fc fec3 	bl	8005efc <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d901      	bls.n	8009184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e176      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009184:	4b0c      	ldr	r3, [pc, #48]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009186:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009188:	f003 0302 	and.w	r3, r3, #2
 800918c:	2b00      	cmp	r3, #0
 800918e:	d0f0      	beq.n	8009172 <HAL_RCC_OscConfig+0x23a>
 8009190:	e01a      	b.n	80091c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009192:	4b09      	ldr	r3, [pc, #36]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009196:	4a08      	ldr	r2, [pc, #32]	@ (80091b8 <HAL_RCC_OscConfig+0x280>)
 8009198:	f023 0301 	bic.w	r3, r3, #1
 800919c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800919e:	f7fc fead 	bl	8005efc <HAL_GetTick>
 80091a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091a4:	e00a      	b.n	80091bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80091a6:	f7fc fea9 	bl	8005efc <HAL_GetTick>
 80091aa:	4602      	mov	r2, r0
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d903      	bls.n	80091bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e15c      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
 80091b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091bc:	4b91      	ldr	r3, [pc, #580]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80091be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1ee      	bne.n	80091a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 80a4 	beq.w	800931e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091d6:	4b8b      	ldr	r3, [pc, #556]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80091d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10d      	bne.n	80091fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80091e2:	4b88      	ldr	r3, [pc, #544]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80091e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e6:	4a87      	ldr	r2, [pc, #540]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80091e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80091ee:	4b85      	ldr	r3, [pc, #532]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80091f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091f6:	60bb      	str	r3, [r7, #8]
 80091f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091fa:	2301      	movs	r3, #1
 80091fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091fe:	4b82      	ldr	r3, [pc, #520]	@ (8009408 <HAL_RCC_OscConfig+0x4d0>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009206:	2b00      	cmp	r3, #0
 8009208:	d118      	bne.n	800923c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800920a:	4b7f      	ldr	r3, [pc, #508]	@ (8009408 <HAL_RCC_OscConfig+0x4d0>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a7e      	ldr	r2, [pc, #504]	@ (8009408 <HAL_RCC_OscConfig+0x4d0>)
 8009210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009216:	f7fc fe71 	bl	8005efc <HAL_GetTick>
 800921a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800921c:	e008      	b.n	8009230 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800921e:	f7fc fe6d 	bl	8005efc <HAL_GetTick>
 8009222:	4602      	mov	r2, r0
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	2b64      	cmp	r3, #100	@ 0x64
 800922a:	d901      	bls.n	8009230 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e120      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009230:	4b75      	ldr	r3, [pc, #468]	@ (8009408 <HAL_RCC_OscConfig+0x4d0>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009238:	2b00      	cmp	r3, #0
 800923a:	d0f0      	beq.n	800921e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d106      	bne.n	8009252 <HAL_RCC_OscConfig+0x31a>
 8009244:	4b6f      	ldr	r3, [pc, #444]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009248:	4a6e      	ldr	r2, [pc, #440]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800924a:	f043 0301 	orr.w	r3, r3, #1
 800924e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009250:	e02d      	b.n	80092ae <HAL_RCC_OscConfig+0x376>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10c      	bne.n	8009274 <HAL_RCC_OscConfig+0x33c>
 800925a:	4b6a      	ldr	r3, [pc, #424]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800925c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925e:	4a69      	ldr	r2, [pc, #420]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009260:	f023 0301 	bic.w	r3, r3, #1
 8009264:	6713      	str	r3, [r2, #112]	@ 0x70
 8009266:	4b67      	ldr	r3, [pc, #412]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800926a:	4a66      	ldr	r2, [pc, #408]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800926c:	f023 0304 	bic.w	r3, r3, #4
 8009270:	6713      	str	r3, [r2, #112]	@ 0x70
 8009272:	e01c      	b.n	80092ae <HAL_RCC_OscConfig+0x376>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b05      	cmp	r3, #5
 800927a:	d10c      	bne.n	8009296 <HAL_RCC_OscConfig+0x35e>
 800927c:	4b61      	ldr	r3, [pc, #388]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800927e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009280:	4a60      	ldr	r2, [pc, #384]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009282:	f043 0304 	orr.w	r3, r3, #4
 8009286:	6713      	str	r3, [r2, #112]	@ 0x70
 8009288:	4b5e      	ldr	r3, [pc, #376]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800928c:	4a5d      	ldr	r2, [pc, #372]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800928e:	f043 0301 	orr.w	r3, r3, #1
 8009292:	6713      	str	r3, [r2, #112]	@ 0x70
 8009294:	e00b      	b.n	80092ae <HAL_RCC_OscConfig+0x376>
 8009296:	4b5b      	ldr	r3, [pc, #364]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800929a:	4a5a      	ldr	r2, [pc, #360]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800929c:	f023 0301 	bic.w	r3, r3, #1
 80092a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80092a2:	4b58      	ldr	r3, [pc, #352]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80092a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092a6:	4a57      	ldr	r2, [pc, #348]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80092a8:	f023 0304 	bic.w	r3, r3, #4
 80092ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d015      	beq.n	80092e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092b6:	f7fc fe21 	bl	8005efc <HAL_GetTick>
 80092ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092bc:	e00a      	b.n	80092d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092be:	f7fc fe1d 	bl	8005efc <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d901      	bls.n	80092d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e0ce      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092d4:	4b4b      	ldr	r3, [pc, #300]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0ee      	beq.n	80092be <HAL_RCC_OscConfig+0x386>
 80092e0:	e014      	b.n	800930c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e2:	f7fc fe0b 	bl	8005efc <HAL_GetTick>
 80092e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092e8:	e00a      	b.n	8009300 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ea:	f7fc fe07 	bl	8005efc <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d901      	bls.n	8009300 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e0b8      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009300:	4b40      	ldr	r3, [pc, #256]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1ee      	bne.n	80092ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d105      	bne.n	800931e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009312:	4b3c      	ldr	r3, [pc, #240]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009316:	4a3b      	ldr	r2, [pc, #236]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800931c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	2b00      	cmp	r3, #0
 8009324:	f000 80a4 	beq.w	8009470 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009328:	4b36      	ldr	r3, [pc, #216]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f003 030c 	and.w	r3, r3, #12
 8009330:	2b08      	cmp	r3, #8
 8009332:	d06b      	beq.n	800940c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	2b02      	cmp	r3, #2
 800933a:	d149      	bne.n	80093d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800933c:	4b31      	ldr	r3, [pc, #196]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a30      	ldr	r2, [pc, #192]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009342:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009348:	f7fc fdd8 	bl	8005efc <HAL_GetTick>
 800934c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800934e:	e008      	b.n	8009362 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009350:	f7fc fdd4 	bl	8005efc <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b02      	cmp	r3, #2
 800935c:	d901      	bls.n	8009362 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e087      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009362:	4b28      	ldr	r3, [pc, #160]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1f0      	bne.n	8009350 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	69da      	ldr	r2, [r3, #28]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	431a      	orrs	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800937c:	019b      	lsls	r3, r3, #6
 800937e:	431a      	orrs	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009384:	085b      	lsrs	r3, r3, #1
 8009386:	3b01      	subs	r3, #1
 8009388:	041b      	lsls	r3, r3, #16
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009390:	061b      	lsls	r3, r3, #24
 8009392:	4313      	orrs	r3, r2
 8009394:	4a1b      	ldr	r2, [pc, #108]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 8009396:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800939a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800939c:	4b19      	ldr	r3, [pc, #100]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a18      	ldr	r2, [pc, #96]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80093a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a8:	f7fc fda8 	bl	8005efc <HAL_GetTick>
 80093ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093ae:	e008      	b.n	80093c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093b0:	f7fc fda4 	bl	8005efc <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d901      	bls.n	80093c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e057      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093c2:	4b10      	ldr	r3, [pc, #64]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0f0      	beq.n	80093b0 <HAL_RCC_OscConfig+0x478>
 80093ce:	e04f      	b.n	8009470 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a0b      	ldr	r2, [pc, #44]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80093d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093dc:	f7fc fd8e 	bl	8005efc <HAL_GetTick>
 80093e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093e2:	e008      	b.n	80093f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093e4:	f7fc fd8a 	bl	8005efc <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d901      	bls.n	80093f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e03d      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093f6:	4b03      	ldr	r3, [pc, #12]	@ (8009404 <HAL_RCC_OscConfig+0x4cc>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1f0      	bne.n	80093e4 <HAL_RCC_OscConfig+0x4ac>
 8009402:	e035      	b.n	8009470 <HAL_RCC_OscConfig+0x538>
 8009404:	40023800 	.word	0x40023800
 8009408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800940c:	4b1b      	ldr	r3, [pc, #108]	@ (800947c <HAL_RCC_OscConfig+0x544>)
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d028      	beq.n	800946c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009424:	429a      	cmp	r2, r3
 8009426:	d121      	bne.n	800946c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009432:	429a      	cmp	r2, r3
 8009434:	d11a      	bne.n	800946c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800943c:	4013      	ands	r3, r2
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009442:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009444:	4293      	cmp	r3, r2
 8009446:	d111      	bne.n	800946c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009452:	085b      	lsrs	r3, r3, #1
 8009454:	3b01      	subs	r3, #1
 8009456:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009458:	429a      	cmp	r2, r3
 800945a:	d107      	bne.n	800946c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009468:	429a      	cmp	r2, r3
 800946a:	d001      	beq.n	8009470 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e000      	b.n	8009472 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009470:	2300      	movs	r3, #0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	40023800 	.word	0x40023800

08009480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e0d0      	b.n	800963a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009498:	4b6a      	ldr	r3, [pc, #424]	@ (8009644 <HAL_RCC_ClockConfig+0x1c4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	683a      	ldr	r2, [r7, #0]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d910      	bls.n	80094c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094a6:	4b67      	ldr	r3, [pc, #412]	@ (8009644 <HAL_RCC_ClockConfig+0x1c4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f023 020f 	bic.w	r2, r3, #15
 80094ae:	4965      	ldr	r1, [pc, #404]	@ (8009644 <HAL_RCC_ClockConfig+0x1c4>)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094b6:	4b63      	ldr	r3, [pc, #396]	@ (8009644 <HAL_RCC_ClockConfig+0x1c4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 030f 	and.w	r3, r3, #15
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d001      	beq.n	80094c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0b8      	b.n	800963a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0302 	and.w	r3, r3, #2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d020      	beq.n	8009516 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0304 	and.w	r3, r3, #4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d005      	beq.n	80094ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094e0:	4b59      	ldr	r3, [pc, #356]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	4a58      	ldr	r2, [pc, #352]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 80094e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80094ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094f8:	4b53      	ldr	r3, [pc, #332]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	4a52      	ldr	r2, [pc, #328]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 80094fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009502:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009504:	4b50      	ldr	r3, [pc, #320]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	494d      	ldr	r1, [pc, #308]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 8009512:	4313      	orrs	r3, r2
 8009514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d040      	beq.n	80095a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d107      	bne.n	800953a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800952a:	4b47      	ldr	r3, [pc, #284]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009532:	2b00      	cmp	r3, #0
 8009534:	d115      	bne.n	8009562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e07f      	b.n	800963a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	2b02      	cmp	r3, #2
 8009540:	d107      	bne.n	8009552 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009542:	4b41      	ldr	r3, [pc, #260]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	e073      	b.n	800963a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009552:	4b3d      	ldr	r3, [pc, #244]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d101      	bne.n	8009562 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e06b      	b.n	800963a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009562:	4b39      	ldr	r3, [pc, #228]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	f023 0203 	bic.w	r2, r3, #3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	4936      	ldr	r1, [pc, #216]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 8009570:	4313      	orrs	r3, r2
 8009572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009574:	f7fc fcc2 	bl	8005efc <HAL_GetTick>
 8009578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800957a:	e00a      	b.n	8009592 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800957c:	f7fc fcbe 	bl	8005efc <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800958a:	4293      	cmp	r3, r2
 800958c:	d901      	bls.n	8009592 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e053      	b.n	800963a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009592:	4b2d      	ldr	r3, [pc, #180]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f003 020c 	and.w	r2, r3, #12
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d1eb      	bne.n	800957c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80095a4:	4b27      	ldr	r3, [pc, #156]	@ (8009644 <HAL_RCC_ClockConfig+0x1c4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 030f 	and.w	r3, r3, #15
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d210      	bcs.n	80095d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095b2:	4b24      	ldr	r3, [pc, #144]	@ (8009644 <HAL_RCC_ClockConfig+0x1c4>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f023 020f 	bic.w	r2, r3, #15
 80095ba:	4922      	ldr	r1, [pc, #136]	@ (8009644 <HAL_RCC_ClockConfig+0x1c4>)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	4313      	orrs	r3, r2
 80095c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80095c2:	4b20      	ldr	r3, [pc, #128]	@ (8009644 <HAL_RCC_ClockConfig+0x1c4>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d001      	beq.n	80095d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e032      	b.n	800963a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d008      	beq.n	80095f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095e0:	4b19      	ldr	r3, [pc, #100]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	4916      	ldr	r1, [pc, #88]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 80095ee:	4313      	orrs	r3, r2
 80095f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0308 	and.w	r3, r3, #8
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d009      	beq.n	8009612 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80095fe:	4b12      	ldr	r3, [pc, #72]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	490e      	ldr	r1, [pc, #56]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 800960e:	4313      	orrs	r3, r2
 8009610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009612:	f000 f821 	bl	8009658 <HAL_RCC_GetSysClockFreq>
 8009616:	4602      	mov	r2, r0
 8009618:	4b0b      	ldr	r3, [pc, #44]	@ (8009648 <HAL_RCC_ClockConfig+0x1c8>)
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	091b      	lsrs	r3, r3, #4
 800961e:	f003 030f 	and.w	r3, r3, #15
 8009622:	490a      	ldr	r1, [pc, #40]	@ (800964c <HAL_RCC_ClockConfig+0x1cc>)
 8009624:	5ccb      	ldrb	r3, [r1, r3]
 8009626:	fa22 f303 	lsr.w	r3, r2, r3
 800962a:	4a09      	ldr	r2, [pc, #36]	@ (8009650 <HAL_RCC_ClockConfig+0x1d0>)
 800962c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800962e:	4b09      	ldr	r3, [pc, #36]	@ (8009654 <HAL_RCC_ClockConfig+0x1d4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4618      	mov	r0, r3
 8009634:	f7fb febe 	bl	80053b4 <HAL_InitTick>

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	40023c00 	.word	0x40023c00
 8009648:	40023800 	.word	0x40023800
 800964c:	0801dd90 	.word	0x0801dd90
 8009650:	2000004c 	.word	0x2000004c
 8009654:	20000050 	.word	0x20000050

08009658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800965c:	b090      	sub	sp, #64	@ 0x40
 800965e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	637b      	str	r3, [r7, #52]	@ 0x34
 8009664:	2300      	movs	r3, #0
 8009666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009668:	2300      	movs	r3, #0
 800966a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009670:	4b59      	ldr	r3, [pc, #356]	@ (80097d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 030c 	and.w	r3, r3, #12
 8009678:	2b08      	cmp	r3, #8
 800967a:	d00d      	beq.n	8009698 <HAL_RCC_GetSysClockFreq+0x40>
 800967c:	2b08      	cmp	r3, #8
 800967e:	f200 80a1 	bhi.w	80097c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <HAL_RCC_GetSysClockFreq+0x34>
 8009686:	2b04      	cmp	r3, #4
 8009688:	d003      	beq.n	8009692 <HAL_RCC_GetSysClockFreq+0x3a>
 800968a:	e09b      	b.n	80097c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800968c:	4b53      	ldr	r3, [pc, #332]	@ (80097dc <HAL_RCC_GetSysClockFreq+0x184>)
 800968e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009690:	e09b      	b.n	80097ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009692:	4b53      	ldr	r3, [pc, #332]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009694:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009696:	e098      	b.n	80097ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009698:	4b4f      	ldr	r3, [pc, #316]	@ (80097d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80096a2:	4b4d      	ldr	r3, [pc, #308]	@ (80097d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d028      	beq.n	8009700 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096ae:	4b4a      	ldr	r3, [pc, #296]	@ (80097d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	099b      	lsrs	r3, r3, #6
 80096b4:	2200      	movs	r2, #0
 80096b6:	623b      	str	r3, [r7, #32]
 80096b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80096c0:	2100      	movs	r1, #0
 80096c2:	4b47      	ldr	r3, [pc, #284]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80096c4:	fb03 f201 	mul.w	r2, r3, r1
 80096c8:	2300      	movs	r3, #0
 80096ca:	fb00 f303 	mul.w	r3, r0, r3
 80096ce:	4413      	add	r3, r2
 80096d0:	4a43      	ldr	r2, [pc, #268]	@ (80097e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80096d2:	fba0 1202 	umull	r1, r2, r0, r2
 80096d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096d8:	460a      	mov	r2, r1
 80096da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80096dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096de:	4413      	add	r3, r2
 80096e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096e4:	2200      	movs	r2, #0
 80096e6:	61bb      	str	r3, [r7, #24]
 80096e8:	61fa      	str	r2, [r7, #28]
 80096ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80096f2:	f7f7 f9cb 	bl	8000a8c <__aeabi_uldivmod>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4613      	mov	r3, r2
 80096fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096fe:	e053      	b.n	80097a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009700:	4b35      	ldr	r3, [pc, #212]	@ (80097d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	099b      	lsrs	r3, r3, #6
 8009706:	2200      	movs	r2, #0
 8009708:	613b      	str	r3, [r7, #16]
 800970a:	617a      	str	r2, [r7, #20]
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009712:	f04f 0b00 	mov.w	fp, #0
 8009716:	4652      	mov	r2, sl
 8009718:	465b      	mov	r3, fp
 800971a:	f04f 0000 	mov.w	r0, #0
 800971e:	f04f 0100 	mov.w	r1, #0
 8009722:	0159      	lsls	r1, r3, #5
 8009724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009728:	0150      	lsls	r0, r2, #5
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	ebb2 080a 	subs.w	r8, r2, sl
 8009732:	eb63 090b 	sbc.w	r9, r3, fp
 8009736:	f04f 0200 	mov.w	r2, #0
 800973a:	f04f 0300 	mov.w	r3, #0
 800973e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009742:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009746:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800974a:	ebb2 0408 	subs.w	r4, r2, r8
 800974e:	eb63 0509 	sbc.w	r5, r3, r9
 8009752:	f04f 0200 	mov.w	r2, #0
 8009756:	f04f 0300 	mov.w	r3, #0
 800975a:	00eb      	lsls	r3, r5, #3
 800975c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009760:	00e2      	lsls	r2, r4, #3
 8009762:	4614      	mov	r4, r2
 8009764:	461d      	mov	r5, r3
 8009766:	eb14 030a 	adds.w	r3, r4, sl
 800976a:	603b      	str	r3, [r7, #0]
 800976c:	eb45 030b 	adc.w	r3, r5, fp
 8009770:	607b      	str	r3, [r7, #4]
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	f04f 0300 	mov.w	r3, #0
 800977a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800977e:	4629      	mov	r1, r5
 8009780:	028b      	lsls	r3, r1, #10
 8009782:	4621      	mov	r1, r4
 8009784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009788:	4621      	mov	r1, r4
 800978a:	028a      	lsls	r2, r1, #10
 800978c:	4610      	mov	r0, r2
 800978e:	4619      	mov	r1, r3
 8009790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009792:	2200      	movs	r2, #0
 8009794:	60bb      	str	r3, [r7, #8]
 8009796:	60fa      	str	r2, [r7, #12]
 8009798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800979c:	f7f7 f976 	bl	8000a8c <__aeabi_uldivmod>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4613      	mov	r3, r2
 80097a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80097a8:	4b0b      	ldr	r3, [pc, #44]	@ (80097d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	0c1b      	lsrs	r3, r3, #16
 80097ae:	f003 0303 	and.w	r3, r3, #3
 80097b2:	3301      	adds	r3, #1
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80097b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80097ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80097c2:	e002      	b.n	80097ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097c4:	4b05      	ldr	r3, [pc, #20]	@ (80097dc <HAL_RCC_GetSysClockFreq+0x184>)
 80097c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80097c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80097ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3740      	adds	r7, #64	@ 0x40
 80097d0:	46bd      	mov	sp, r7
 80097d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097d6:	bf00      	nop
 80097d8:	40023800 	.word	0x40023800
 80097dc:	00f42400 	.word	0x00f42400
 80097e0:	017d7840 	.word	0x017d7840

080097e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097e8:	4b03      	ldr	r3, [pc, #12]	@ (80097f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80097ea:	681b      	ldr	r3, [r3, #0]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	2000004c 	.word	0x2000004c

080097fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009800:	f7ff fff0 	bl	80097e4 <HAL_RCC_GetHCLKFreq>
 8009804:	4602      	mov	r2, r0
 8009806:	4b05      	ldr	r3, [pc, #20]	@ (800981c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	0a9b      	lsrs	r3, r3, #10
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	4903      	ldr	r1, [pc, #12]	@ (8009820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009812:	5ccb      	ldrb	r3, [r1, r3]
 8009814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009818:	4618      	mov	r0, r3
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40023800 	.word	0x40023800
 8009820:	0801dda0 	.word	0x0801dda0

08009824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009828:	f7ff ffdc 	bl	80097e4 <HAL_RCC_GetHCLKFreq>
 800982c:	4602      	mov	r2, r0
 800982e:	4b05      	ldr	r3, [pc, #20]	@ (8009844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	0b5b      	lsrs	r3, r3, #13
 8009834:	f003 0307 	and.w	r3, r3, #7
 8009838:	4903      	ldr	r1, [pc, #12]	@ (8009848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800983a:	5ccb      	ldrb	r3, [r1, r3]
 800983c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009840:	4618      	mov	r0, r3
 8009842:	bd80      	pop	{r7, pc}
 8009844:	40023800 	.word	0x40023800
 8009848:	0801dda0 	.word	0x0801dda0

0800984c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	220f      	movs	r2, #15
 800985a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800985c:	4b12      	ldr	r3, [pc, #72]	@ (80098a8 <HAL_RCC_GetClockConfig+0x5c>)
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	f003 0203 	and.w	r2, r3, #3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009868:	4b0f      	ldr	r3, [pc, #60]	@ (80098a8 <HAL_RCC_GetClockConfig+0x5c>)
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009874:	4b0c      	ldr	r3, [pc, #48]	@ (80098a8 <HAL_RCC_GetClockConfig+0x5c>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009880:	4b09      	ldr	r3, [pc, #36]	@ (80098a8 <HAL_RCC_GetClockConfig+0x5c>)
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	08db      	lsrs	r3, r3, #3
 8009886:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800988e:	4b07      	ldr	r3, [pc, #28]	@ (80098ac <HAL_RCC_GetClockConfig+0x60>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f003 020f 	and.w	r2, r3, #15
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	601a      	str	r2, [r3, #0]
}
 800989a:	bf00      	nop
 800989c:	370c      	adds	r7, #12
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	40023800 	.word	0x40023800
 80098ac:	40023c00 	.word	0x40023c00

080098b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80098c8:	2300      	movs	r3, #0
 80098ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d012      	beq.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80098d8:	4b69      	ldr	r3, [pc, #420]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	4a68      	ldr	r2, [pc, #416]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80098e2:	6093      	str	r3, [r2, #8]
 80098e4:	4b66      	ldr	r3, [pc, #408]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ec:	4964      	ldr	r1, [pc, #400]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80098fa:	2301      	movs	r3, #1
 80098fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d017      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800990a:	4b5d      	ldr	r3, [pc, #372]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800990c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009910:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009918:	4959      	ldr	r1, [pc, #356]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800991a:	4313      	orrs	r3, r2
 800991c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009928:	d101      	bne.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800992a:	2301      	movs	r3, #1
 800992c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009936:	2301      	movs	r3, #1
 8009938:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d017      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009946:	4b4e      	ldr	r3, [pc, #312]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009948:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800994c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009954:	494a      	ldr	r1, [pc, #296]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009956:	4313      	orrs	r3, r2
 8009958:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009960:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009964:	d101      	bne.n	800996a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009966:	2301      	movs	r3, #1
 8009968:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009972:	2301      	movs	r3, #1
 8009974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009982:	2301      	movs	r3, #1
 8009984:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f003 0320 	and.w	r3, r3, #32
 800998e:	2b00      	cmp	r3, #0
 8009990:	f000 808b 	beq.w	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009994:	4b3a      	ldr	r3, [pc, #232]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009998:	4a39      	ldr	r2, [pc, #228]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800999a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800999e:	6413      	str	r3, [r2, #64]	@ 0x40
 80099a0:	4b37      	ldr	r3, [pc, #220]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80099ac:	4b35      	ldr	r3, [pc, #212]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a34      	ldr	r2, [pc, #208]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80099b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099b8:	f7fc faa0 	bl	8005efc <HAL_GetTick>
 80099bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80099be:	e008      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099c0:	f7fc fa9c 	bl	8005efc <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b64      	cmp	r3, #100	@ 0x64
 80099cc:	d901      	bls.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e357      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80099d2:	4b2c      	ldr	r3, [pc, #176]	@ (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f0      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80099de:	4b28      	ldr	r3, [pc, #160]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d035      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d02e      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099fc:	4b20      	ldr	r3, [pc, #128]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80099fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009a06:	4b1e      	ldr	r3, [pc, #120]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a10:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009a12:	4b1b      	ldr	r3, [pc, #108]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a16:	4a1a      	ldr	r2, [pc, #104]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009a1e:	4a18      	ldr	r2, [pc, #96]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009a24:	4b16      	ldr	r3, [pc, #88]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a28:	f003 0301 	and.w	r3, r3, #1
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d114      	bne.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a30:	f7fc fa64 	bl	8005efc <HAL_GetTick>
 8009a34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a36:	e00a      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a38:	f7fc fa60 	bl	8005efc <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d901      	bls.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e319      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d0ee      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a66:	d111      	bne.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009a68:	4b05      	ldr	r3, [pc, #20]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009a74:	4b04      	ldr	r3, [pc, #16]	@ (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009a76:	400b      	ands	r3, r1
 8009a78:	4901      	ldr	r1, [pc, #4]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	608b      	str	r3, [r1, #8]
 8009a7e:	e00b      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009a80:	40023800 	.word	0x40023800
 8009a84:	40007000 	.word	0x40007000
 8009a88:	0ffffcff 	.word	0x0ffffcff
 8009a8c:	4baa      	ldr	r3, [pc, #680]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a8e:	689b      	ldr	r3, [r3, #8]
 8009a90:	4aa9      	ldr	r2, [pc, #676]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a92:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009a96:	6093      	str	r3, [r2, #8]
 8009a98:	4ba7      	ldr	r3, [pc, #668]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009aa4:	49a4      	ldr	r1, [pc, #656]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0310 	and.w	r3, r3, #16
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d010      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ab6:	4ba0      	ldr	r3, [pc, #640]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009abc:	4a9e      	ldr	r2, [pc, #632]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009abe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009ac2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009ac6:	4b9c      	ldr	r3, [pc, #624]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ac8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad0:	4999      	ldr	r1, [pc, #612]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00a      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ae4:	4b94      	ldr	r3, [pc, #592]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009af2:	4991      	ldr	r1, [pc, #580]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009af4:	4313      	orrs	r3, r2
 8009af6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00a      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b06:	4b8c      	ldr	r3, [pc, #560]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009b14:	4988      	ldr	r1, [pc, #544]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00a      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b28:	4b83      	ldr	r3, [pc, #524]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b36:	4980      	ldr	r1, [pc, #512]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b58:	4977      	ldr	r1, [pc, #476]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00a      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b6c:	4b72      	ldr	r3, [pc, #456]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b72:	f023 0203 	bic.w	r2, r3, #3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b7a:	496f      	ldr	r1, [pc, #444]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b94:	f023 020c 	bic.w	r2, r3, #12
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b9c:	4966      	ldr	r1, [pc, #408]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00a      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009bb0:	4b61      	ldr	r3, [pc, #388]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bbe:	495e      	ldr	r1, [pc, #376]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009bd2:	4b59      	ldr	r3, [pc, #356]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009be0:	4955      	ldr	r1, [pc, #340]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009bf4:	4b50      	ldr	r3, [pc, #320]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c02:	494d      	ldr	r1, [pc, #308]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009c16:	4b48      	ldr	r3, [pc, #288]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c24:	4944      	ldr	r1, [pc, #272]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009c38:	4b3f      	ldr	r3, [pc, #252]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c46:	493c      	ldr	r1, [pc, #240]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009c5a:	4b37      	ldr	r3, [pc, #220]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c68:	4933      	ldr	r1, [pc, #204]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c8a:	492b      	ldr	r1, [pc, #172]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d011      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009c9e:	4b26      	ldr	r3, [pc, #152]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cac:	4922      	ldr	r1, [pc, #136]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cbc:	d101      	bne.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f003 0308 	and.w	r3, r3, #8
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009cde:	4b16      	ldr	r3, [pc, #88]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ce4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cec:	4912      	ldr	r1, [pc, #72]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009d00:	4b0d      	ldr	r3, [pc, #52]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d06:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d10:	4909      	ldr	r1, [pc, #36]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d12:	4313      	orrs	r3, r2
 8009d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d006      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 80d9 	beq.w	8009ede <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009d2c:	4b02      	ldr	r3, [pc, #8]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a01      	ldr	r2, [pc, #4]	@ (8009d38 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009d32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d36:	e001      	b.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009d38:	40023800 	.word	0x40023800
 8009d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d3e:	f7fc f8dd 	bl	8005efc <HAL_GetTick>
 8009d42:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d44:	e008      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d46:	f7fc f8d9 	bl	8005efc <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	2b64      	cmp	r3, #100	@ 0x64
 8009d52:	d901      	bls.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e194      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d58:	4b6c      	ldr	r3, [pc, #432]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1f0      	bne.n	8009d46 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0301 	and.w	r3, r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d021      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d11d      	bne.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009d78:	4b64      	ldr	r3, [pc, #400]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d7e:	0c1b      	lsrs	r3, r3, #16
 8009d80:	f003 0303 	and.w	r3, r3, #3
 8009d84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009d86:	4b61      	ldr	r3, [pc, #388]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d8c:	0e1b      	lsrs	r3, r3, #24
 8009d8e:	f003 030f 	and.w	r3, r3, #15
 8009d92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	019a      	lsls	r2, r3, #6
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	041b      	lsls	r3, r3, #16
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	061b      	lsls	r3, r3, #24
 8009da4:	431a      	orrs	r2, r3
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	071b      	lsls	r3, r3, #28
 8009dac:	4957      	ldr	r1, [pc, #348]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d004      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009dc8:	d00a      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d02e      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dde:	d129      	bne.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009de0:	4b4a      	ldr	r3, [pc, #296]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009de6:	0c1b      	lsrs	r3, r3, #16
 8009de8:	f003 0303 	and.w	r3, r3, #3
 8009dec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009dee:	4b47      	ldr	r3, [pc, #284]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009df4:	0f1b      	lsrs	r3, r3, #28
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	019a      	lsls	r2, r3, #6
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	041b      	lsls	r3, r3, #16
 8009e06:	431a      	orrs	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	061b      	lsls	r3, r3, #24
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	071b      	lsls	r3, r3, #28
 8009e14:	493d      	ldr	r1, [pc, #244]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e16:	4313      	orrs	r3, r2
 8009e18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e22:	f023 021f 	bic.w	r2, r3, #31
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	4937      	ldr	r1, [pc, #220]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01d      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009e40:	4b32      	ldr	r3, [pc, #200]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e46:	0e1b      	lsrs	r3, r3, #24
 8009e48:	f003 030f 	and.w	r3, r3, #15
 8009e4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e54:	0f1b      	lsrs	r3, r3, #28
 8009e56:	f003 0307 	and.w	r3, r3, #7
 8009e5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	019a      	lsls	r2, r3, #6
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	041b      	lsls	r3, r3, #16
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	061b      	lsls	r3, r3, #24
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	071b      	lsls	r3, r3, #28
 8009e74:	4925      	ldr	r1, [pc, #148]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d011      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	019a      	lsls	r2, r3, #6
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	041b      	lsls	r3, r3, #16
 8009e94:	431a      	orrs	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	061b      	lsls	r3, r3, #24
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	071b      	lsls	r3, r3, #28
 8009ea4:	4919      	ldr	r1, [pc, #100]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009eac:	4b17      	ldr	r3, [pc, #92]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a16      	ldr	r2, [pc, #88]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eb8:	f7fc f820 	bl	8005efc <HAL_GetTick>
 8009ebc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ebe:	e008      	b.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009ec0:	f7fc f81c 	bl	8005efc <HAL_GetTick>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	1ad3      	subs	r3, r2, r3
 8009eca:	2b64      	cmp	r3, #100	@ 0x64
 8009ecc:	d901      	bls.n	8009ed2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ece:	2303      	movs	r3, #3
 8009ed0:	e0d7      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0f0      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	f040 80cd 	bne.w	800a080 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009ee6:	4b09      	ldr	r3, [pc, #36]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a08      	ldr	r2, [pc, #32]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009eec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ef2:	f7fc f803 	bl	8005efc <HAL_GetTick>
 8009ef6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ef8:	e00a      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009efa:	f7fb ffff 	bl	8005efc <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b64      	cmp	r3, #100	@ 0x64
 8009f06:	d903      	bls.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e0ba      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009f0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009f10:	4b5e      	ldr	r3, [pc, #376]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f1c:	d0ed      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d009      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d02e      	beq.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d12a      	bne.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009f46:	4b51      	ldr	r3, [pc, #324]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f4c:	0c1b      	lsrs	r3, r3, #16
 8009f4e:	f003 0303 	and.w	r3, r3, #3
 8009f52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009f54:	4b4d      	ldr	r3, [pc, #308]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f5a:	0f1b      	lsrs	r3, r3, #28
 8009f5c:	f003 0307 	and.w	r3, r3, #7
 8009f60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	019a      	lsls	r2, r3, #6
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	041b      	lsls	r3, r3, #16
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	699b      	ldr	r3, [r3, #24]
 8009f72:	061b      	lsls	r3, r3, #24
 8009f74:	431a      	orrs	r2, r3
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	071b      	lsls	r3, r3, #28
 8009f7a:	4944      	ldr	r1, [pc, #272]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009f82:	4b42      	ldr	r3, [pc, #264]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f90:	3b01      	subs	r3, #1
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	493d      	ldr	r1, [pc, #244]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d022      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fb0:	d11d      	bne.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009fb2:	4b36      	ldr	r3, [pc, #216]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fb8:	0e1b      	lsrs	r3, r3, #24
 8009fba:	f003 030f 	and.w	r3, r3, #15
 8009fbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009fc0:	4b32      	ldr	r3, [pc, #200]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fc6:	0f1b      	lsrs	r3, r3, #28
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	019a      	lsls	r2, r3, #6
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	041b      	lsls	r3, r3, #16
 8009fda:	431a      	orrs	r2, r3
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	061b      	lsls	r3, r3, #24
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	071b      	lsls	r3, r3, #28
 8009fe6:	4929      	ldr	r1, [pc, #164]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0308 	and.w	r3, r3, #8
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d028      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009ffa:	4b24      	ldr	r3, [pc, #144]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a000:	0e1b      	lsrs	r3, r3, #24
 800a002:	f003 030f 	and.w	r3, r3, #15
 800a006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800a008:	4b20      	ldr	r3, [pc, #128]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a00e:	0c1b      	lsrs	r3, r3, #16
 800a010:	f003 0303 	and.w	r3, r3, #3
 800a014:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	019a      	lsls	r2, r3, #6
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	431a      	orrs	r2, r3
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	061b      	lsls	r3, r3, #24
 800a026:	431a      	orrs	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	071b      	lsls	r3, r3, #28
 800a02e:	4917      	ldr	r1, [pc, #92]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a030:	4313      	orrs	r3, r2
 800a032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a036:	4b15      	ldr	r3, [pc, #84]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a03c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a044:	4911      	ldr	r1, [pc, #68]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a046:	4313      	orrs	r3, r2
 800a048:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a04c:	4b0f      	ldr	r3, [pc, #60]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0e      	ldr	r2, [pc, #56]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a058:	f7fb ff50 	bl	8005efc <HAL_GetTick>
 800a05c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a05e:	e008      	b.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800a060:	f7fb ff4c 	bl	8005efc <HAL_GetTick>
 800a064:	4602      	mov	r2, r0
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	2b64      	cmp	r3, #100	@ 0x64
 800a06c:	d901      	bls.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a06e:	2303      	movs	r3, #3
 800a070:	e007      	b.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a072:	4b06      	ldr	r3, [pc, #24]	@ (800a08c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a07a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a07e:	d1ef      	bne.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800a080:	2300      	movs	r3, #0
}
 800a082:	4618      	mov	r0, r3
 800a084:	3720      	adds	r7, #32
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	40023800 	.word	0x40023800

0800a090 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e071      	b.n	800a18a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	7f5b      	ldrb	r3, [r3, #29]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d105      	bne.n	800a0bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7f9 fbf8 	bl	80038ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	f003 0310 	and.w	r3, r3, #16
 800a0cc:	2b10      	cmp	r3, #16
 800a0ce:	d053      	beq.n	800a178 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	22ca      	movs	r2, #202	@ 0xca
 800a0d6:	625a      	str	r2, [r3, #36]	@ 0x24
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2253      	movs	r2, #83	@ 0x53
 800a0de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 fac9 	bl	800a678 <RTC_EnterInitMode>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800a0ea:	7bfb      	ldrb	r3, [r7, #15]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d12a      	bne.n	800a146 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6899      	ldr	r1, [r3, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	4b26      	ldr	r3, [pc, #152]	@ (800a194 <HAL_RTC_Init+0x104>)
 800a0fc:	400b      	ands	r3, r1
 800a0fe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6899      	ldr	r1, [r3, #8]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	431a      	orrs	r2, r3
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	430a      	orrs	r2, r1
 800a11c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	68d2      	ldr	r2, [r2, #12]
 800a126:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6919      	ldr	r1, [r3, #16]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	041a      	lsls	r2, r3, #16
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 fad2 	bl	800a6e6 <RTC_ExitInitMode>
 800a142:	4603      	mov	r3, r0
 800a144:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d110      	bne.n	800a16e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f022 0208 	bic.w	r2, r2, #8
 800a15a:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699a      	ldr	r2, [r3, #24]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	22ff      	movs	r2, #255	@ 0xff
 800a174:	625a      	str	r2, [r3, #36]	@ 0x24
 800a176:	e001      	b.n	800a17c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d102      	bne.n	800a188 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2201      	movs	r2, #1
 800a186:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	ff8fffbf 	.word	0xff8fffbf

0800a198 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a198:	b590      	push	{r4, r7, lr}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	7f1b      	ldrb	r3, [r3, #28]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d101      	bne.n	800a1b4 <HAL_RTC_SetTime+0x1c>
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	e085      	b.n	800a2c0 <HAL_RTC_SetTime+0x128>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d126      	bne.n	800a214 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d102      	bne.n	800a1da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f000 faa6 	bl	800a730 <RTC_ByteToBcd2>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fa9f 	bl	800a730 <RTC_ByteToBcd2>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a1f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	789b      	ldrb	r3, [r3, #2]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 fa97 	bl	800a730 <RTC_ByteToBcd2>
 800a202:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a204:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	78db      	ldrb	r3, [r3, #3]
 800a20c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800a20e:	4313      	orrs	r3, r2
 800a210:	617b      	str	r3, [r7, #20]
 800a212:	e018      	b.n	800a246 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d102      	bne.n	800a228 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2200      	movs	r2, #0
 800a226:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	785b      	ldrb	r3, [r3, #1]
 800a232:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a234:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800a23a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	78db      	ldrb	r3, [r3, #3]
 800a240:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800a242:	4313      	orrs	r3, r2
 800a244:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	22ca      	movs	r2, #202	@ 0xca
 800a24c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2253      	movs	r2, #83	@ 0x53
 800a254:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 fa0e 	bl	800a678 <RTC_EnterInitMode>
 800a25c:	4603      	mov	r3, r0
 800a25e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a260:	7cfb      	ldrb	r3, [r7, #19]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d11e      	bne.n	800a2a4 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	6979      	ldr	r1, [r7, #20]
 800a26c:	4b16      	ldr	r3, [pc, #88]	@ (800a2c8 <HAL_RTC_SetTime+0x130>)
 800a26e:	400b      	ands	r3, r1
 800a270:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689a      	ldr	r2, [r3, #8]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a280:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6899      	ldr	r1, [r3, #8]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	431a      	orrs	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	430a      	orrs	r2, r1
 800a298:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a29a:	68f8      	ldr	r0, [r7, #12]
 800a29c:	f000 fa23 	bl	800a6e6 <RTC_ExitInitMode>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a2a4:	7cfb      	ldrb	r3, [r7, #19]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d102      	bne.n	800a2b0 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	22ff      	movs	r2, #255	@ 0xff
 800a2b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	771a      	strb	r2, [r3, #28]

  return status;
 800a2be:	7cfb      	ldrb	r3, [r7, #19]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd90      	pop	{r4, r7, pc}
 800a2c8:	007f7f7f 	.word	0x007f7f7f

0800a2cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a2cc:	b590      	push	{r4, r7, lr}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	7f1b      	ldrb	r3, [r3, #28]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d101      	bne.n	800a2e8 <HAL_RTC_SetDate+0x1c>
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	e06f      	b.n	800a3c8 <HAL_RTC_SetDate+0xfc>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10e      	bne.n	800a318 <HAL_RTC_SetDate+0x4c>
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	785b      	ldrb	r3, [r3, #1]
 800a2fe:	f003 0310 	and.w	r3, r3, #16
 800a302:	2b00      	cmp	r3, #0
 800a304:	d008      	beq.n	800a318 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	785b      	ldrb	r3, [r3, #1]
 800a30a:	f023 0310 	bic.w	r3, r3, #16
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	330a      	adds	r3, #10
 800a312:	b2da      	uxtb	r2, r3
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d11c      	bne.n	800a358 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	78db      	ldrb	r3, [r3, #3]
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fa04 	bl	800a730 <RTC_ByteToBcd2>
 800a328:	4603      	mov	r3, r0
 800a32a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 f9fd 	bl	800a730 <RTC_ByteToBcd2>
 800a336:	4603      	mov	r3, r0
 800a338:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a33a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	789b      	ldrb	r3, [r3, #2]
 800a340:	4618      	mov	r0, r3
 800a342:	f000 f9f5 	bl	800a730 <RTC_ByteToBcd2>
 800a346:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a348:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a352:	4313      	orrs	r3, r2
 800a354:	617b      	str	r3, [r7, #20]
 800a356:	e00e      	b.n	800a376 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	78db      	ldrb	r3, [r3, #3]
 800a35c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	785b      	ldrb	r3, [r3, #1]
 800a362:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a364:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a366:	68ba      	ldr	r2, [r7, #8]
 800a368:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a36a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a372:	4313      	orrs	r3, r2
 800a374:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	22ca      	movs	r2, #202	@ 0xca
 800a37c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2253      	movs	r2, #83	@ 0x53
 800a384:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a386:	68f8      	ldr	r0, [r7, #12]
 800a388:	f000 f976 	bl	800a678 <RTC_EnterInitMode>
 800a38c:	4603      	mov	r3, r0
 800a38e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a390:	7cfb      	ldrb	r3, [r7, #19]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10a      	bne.n	800a3ac <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	6979      	ldr	r1, [r7, #20]
 800a39c:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d0 <HAL_RTC_SetDate+0x104>)
 800a39e:	400b      	ands	r3, r1
 800a3a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 f99f 	bl	800a6e6 <RTC_ExitInitMode>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a3ac:	7cfb      	ldrb	r3, [r7, #19]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	22ff      	movs	r2, #255	@ 0xff
 800a3be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	771a      	strb	r2, [r3, #28]

  return status;
 800a3c6:	7cfb      	ldrb	r3, [r7, #19]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	371c      	adds	r7, #28
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd90      	pop	{r4, r7, pc}
 800a3d0:	00ffff3f 	.word	0x00ffff3f

0800a3d4 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a3d4:	b590      	push	{r4, r7, lr}
 800a3d6:	b089      	sub	sp, #36	@ 0x24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	7f1b      	ldrb	r3, [r3, #28]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_RTC_SetAlarm+0x24>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e113      	b.n	800a620 <HAL_RTC_SetAlarm+0x24c>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2202      	movs	r2, #2
 800a402:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d137      	bne.n	800a47a <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2200      	movs	r2, #0
 800a41c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 f984 	bl	800a730 <RTC_ByteToBcd2>
 800a428:	4603      	mov	r3, r0
 800a42a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	785b      	ldrb	r3, [r3, #1]
 800a430:	4618      	mov	r0, r3
 800a432:	f000 f97d 	bl	800a730 <RTC_ByteToBcd2>
 800a436:	4603      	mov	r3, r0
 800a438:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a43a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	789b      	ldrb	r3, [r3, #2]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f975 	bl	800a730 <RTC_ByteToBcd2>
 800a446:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a448:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	78db      	ldrb	r3, [r3, #3]
 800a450:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a452:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 f967 	bl	800a730 <RTC_ByteToBcd2>
 800a462:	4603      	mov	r3, r0
 800a464:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a466:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a46e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a474:	4313      	orrs	r3, r2
 800a476:	61fb      	str	r3, [r7, #28]
 800a478:	e023      	b.n	800a4c2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d102      	bne.n	800a48e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2200      	movs	r2, #0
 800a48c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	785b      	ldrb	r3, [r3, #1]
 800a498:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a49a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a4a0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	78db      	ldrb	r3, [r3, #3]
 800a4a6:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a4a8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a4b2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a4b8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	22ca      	movs	r2, #202	@ 0xca
 800a4d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2253      	movs	r2, #83	@ 0x53
 800a4dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4e6:	d148      	bne.n	800a57a <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	689a      	ldr	r2, [r3, #8]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a4f6:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a506:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800a518:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a51a:	f7fb fcef 	bl	8005efc <HAL_GetTick>
 800a51e:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a520:	e013      	b.n	800a54a <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a522:	f7fb fceb 	bl	8005efc <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a530:	d90b      	bls.n	800a54a <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	22ff      	movs	r2, #255	@ 0xff
 800a538:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2203      	movs	r2, #3
 800a53e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a546:	2303      	movs	r3, #3
 800a548:	e06a      	b.n	800a620 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	d0e4      	beq.n	800a522 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69fa      	ldr	r2, [r7, #28]
 800a55e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689a      	ldr	r2, [r3, #8]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a576:	609a      	str	r2, [r3, #8]
 800a578:	e047      	b.n	800a60a <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	689a      	ldr	r2, [r3, #8]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a588:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689a      	ldr	r2, [r3, #8]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a598:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800a5aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5ac:	f7fb fca6 	bl	8005efc <HAL_GetTick>
 800a5b0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a5b2:	e013      	b.n	800a5dc <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a5b4:	f7fb fca2 	bl	8005efc <HAL_GetTick>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	1ad3      	subs	r3, r2, r3
 800a5be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5c2:	d90b      	bls.n	800a5dc <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	22ff      	movs	r2, #255	@ 0xff
 800a5ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2203      	movs	r2, #3
 800a5d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e021      	b.n	800a620 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0e4      	beq.n	800a5b4 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	69fa      	ldr	r2, [r7, #28]
 800a5f0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a608:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	22ff      	movs	r2, #255	@ 0xff
 800a610:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2201      	movs	r2, #1
 800a616:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3724      	adds	r7, #36	@ 0x24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd90      	pop	{r4, r7, pc}

0800a628 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a630:	2300      	movs	r3, #0
 800a632:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a642:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a644:	f7fb fc5a 	bl	8005efc <HAL_GetTick>
 800a648:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a64a:	e009      	b.n	800a660 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a64c:	f7fb fc56 	bl	8005efc <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a65a:	d901      	bls.n	800a660 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e007      	b.n	800a670 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	f003 0320 	and.w	r3, r3, #32
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0ee      	beq.n	800a64c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a692:	2b00      	cmp	r3, #0
 800a694:	d122      	bne.n	800a6dc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	68da      	ldr	r2, [r3, #12]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a6a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a6a6:	f7fb fc29 	bl	8005efc <HAL_GetTick>
 800a6aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a6ac:	e00c      	b.n	800a6c8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6ae:	f7fb fc25 	bl	8005efc <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6bc:	d904      	bls.n	800a6c8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d102      	bne.n	800a6dc <RTC_EnterInitMode+0x64>
 800a6d6:	7bfb      	ldrb	r3, [r7, #15]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d1e8      	bne.n	800a6ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a700:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f003 0320 	and.w	r3, r3, #32
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10a      	bne.n	800a726 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff ff89 	bl	800a628 <HAL_RTC_WaitForSynchro>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d004      	beq.n	800a726 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2204      	movs	r2, #4
 800a720:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a726:	7bfb      	ldrb	r3, [r7, #15]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3710      	adds	r7, #16
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	4603      	mov	r3, r0
 800a738:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800a73e:	e005      	b.n	800a74c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	3301      	adds	r3, #1
 800a744:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	3b0a      	subs	r3, #10
 800a74a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	2b09      	cmp	r3, #9
 800a750:	d8f6      	bhi.n	800a740 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	b2db      	uxtb	r3, r3
 800a756:	011b      	lsls	r3, r3, #4
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	79fb      	ldrb	r3, [r7, #7]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	b2db      	uxtb	r3, r3
}
 800a760:	4618      	mov	r0, r3
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a778:	2300      	movs	r3, #0
 800a77a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	7f1b      	ldrb	r3, [r3, #28]
 800a780:	2b01      	cmp	r3, #1
 800a782:	d101      	bne.n	800a788 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a784:	2302      	movs	r3, #2
 800a786:	e050      	b.n	800a82a <HAL_RTCEx_SetTimeStamp+0xbe>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2201      	movs	r2, #1
 800a78c:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2202      	movs	r2, #2
 800a792:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 0206 	bic.w	r2, r2, #6
 800a7a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	4b1f      	ldr	r3, [pc, #124]	@ (800a838 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	22ca      	movs	r2, #202	@ 0xca
 800a7ce:	625a      	str	r2, [r3, #36]	@ 0x24
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2253      	movs	r2, #83	@ 0x53
 800a7d6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	b2da      	uxtb	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800a7f0:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800a802:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689a      	ldr	r2, [r3, #8]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a812:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	22ff      	movs	r2, #255	@ 0xff
 800a81a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2201      	movs	r2, #1
 800a820:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	fffff7f7 	.word	0xfffff7f7

0800a83c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e025      	b.n	800a89c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a856:	b2db      	uxtb	r3, r3
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d106      	bne.n	800a86a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7f6 fd45 	bl	80012f4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2202      	movs	r2, #2
 800a86e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3304      	adds	r3, #4
 800a87a:	4619      	mov	r1, r3
 800a87c:	4610      	mov	r0, r2
 800a87e:	f001 fa33 	bl	800bce8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6818      	ldr	r0, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	461a      	mov	r2, r3
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	f001 fa87 	bl	800bda0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a8b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d101      	bne.n	800a8c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a8be:	2302      	movs	r3, #2
 800a8c0:	e021      	b.n	800a906 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a8c2:	7dfb      	ldrb	r3, [r7, #23]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d002      	beq.n	800a8ce <HAL_SDRAM_SendCommand+0x2a>
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ca:	2b05      	cmp	r3, #5
 800a8cc:	d118      	bne.n	800a900 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f001 fac8 	bl	800be74 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b02      	cmp	r3, #2
 800a8ea:	d104      	bne.n	800a8f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2205      	movs	r2, #5
 800a8f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8f4:	e006      	b.n	800a904 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a8fe:	e001      	b.n	800a904 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e000      	b.n	800a906 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b02      	cmp	r3, #2
 800a922:	d101      	bne.n	800a928 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a924:	2302      	movs	r3, #2
 800a926:	e016      	b.n	800a956 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b01      	cmp	r3, #1
 800a932:	d10f      	bne.n	800a954 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2202      	movs	r2, #2
 800a938:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	4618      	mov	r0, r3
 800a944:	f001 faba 	bl	800bebc <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a950:	2300      	movs	r3, #0
 800a952:	e000      	b.n	800a956 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a954:	2301      	movs	r3, #1
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e09d      	b.n	800aaac <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	d108      	bne.n	800a98a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a980:	d009      	beq.n	800a996 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	61da      	str	r2, [r3, #28]
 800a988:	e005      	b.n	800a996 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d106      	bne.n	800a9b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7f8 ffe7 	bl	8003984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2202      	movs	r2, #2
 800a9ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a9cc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a9d6:	d902      	bls.n	800a9de <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	e002      	b.n	800a9e4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a9de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a9ec:	d007      	beq.n	800a9fe <HAL_SPI_Init+0xa0>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a9f6:	d002      	beq.n	800a9fe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800aa0e:	431a      	orrs	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 0302 	and.w	r3, r3, #2
 800aa18:	431a      	orrs	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	431a      	orrs	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa36:	431a      	orrs	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a1b      	ldr	r3, [r3, #32]
 800aa3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa40:	ea42 0103 	orr.w	r1, r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	0c1b      	lsrs	r3, r3, #16
 800aa5a:	f003 0204 	and.w	r2, r3, #4
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa62:	f003 0310 	and.w	r3, r3, #16
 800aa66:	431a      	orrs	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa6c:	f003 0308 	and.w	r3, r3, #8
 800aa70:	431a      	orrs	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800aa7a:	ea42 0103 	orr.w	r1, r2, r3
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	69da      	ldr	r2, [r3, #28]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aa9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e049      	b.n	800ab5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d106      	bne.n	800aae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7fa ff92 	bl	8005a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2202      	movs	r2, #2
 800aae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f000 fac0 	bl	800b078 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3708      	adds	r7, #8
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d001      	beq.n	800ab7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e054      	b.n	800ac26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68da      	ldr	r2, [r3, #12]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f042 0201 	orr.w	r2, r2, #1
 800ab92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a26      	ldr	r2, [pc, #152]	@ (800ac34 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d022      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x80>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aba6:	d01d      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x80>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a22      	ldr	r2, [pc, #136]	@ (800ac38 <HAL_TIM_Base_Start_IT+0xd4>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d018      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x80>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	4a21      	ldr	r2, [pc, #132]	@ (800ac3c <HAL_TIM_Base_Start_IT+0xd8>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d013      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x80>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a1f      	ldr	r2, [pc, #124]	@ (800ac40 <HAL_TIM_Base_Start_IT+0xdc>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d00e      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x80>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a1e      	ldr	r2, [pc, #120]	@ (800ac44 <HAL_TIM_Base_Start_IT+0xe0>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d009      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x80>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a1c      	ldr	r2, [pc, #112]	@ (800ac48 <HAL_TIM_Base_Start_IT+0xe4>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d004      	beq.n	800abe4 <HAL_TIM_Base_Start_IT+0x80>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	4a1b      	ldr	r2, [pc, #108]	@ (800ac4c <HAL_TIM_Base_Start_IT+0xe8>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d115      	bne.n	800ac10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	689a      	ldr	r2, [r3, #8]
 800abea:	4b19      	ldr	r3, [pc, #100]	@ (800ac50 <HAL_TIM_Base_Start_IT+0xec>)
 800abec:	4013      	ands	r3, r2
 800abee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b06      	cmp	r3, #6
 800abf4:	d015      	beq.n	800ac22 <HAL_TIM_Base_Start_IT+0xbe>
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abfc:	d011      	beq.n	800ac22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f042 0201 	orr.w	r2, r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac0e:	e008      	b.n	800ac22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f042 0201 	orr.w	r2, r2, #1
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	e000      	b.n	800ac24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	40010000 	.word	0x40010000
 800ac38:	40000400 	.word	0x40000400
 800ac3c:	40000800 	.word	0x40000800
 800ac40:	40000c00 	.word	0x40000c00
 800ac44:	40010400 	.word	0x40010400
 800ac48:	40014000 	.word	0x40014000
 800ac4c:	40001800 	.word	0x40001800
 800ac50:	00010007 	.word	0x00010007

0800ac54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d122      	bne.n	800acb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d11b      	bne.n	800acb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f06f 0202 	mvn.w	r2, #2
 800ac80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	699b      	ldr	r3, [r3, #24]
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f9d0 	bl	800b03c <HAL_TIM_IC_CaptureCallback>
 800ac9c:	e005      	b.n	800acaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f9c2 	bl	800b028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 f9d3 	bl	800b050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f003 0304 	and.w	r3, r3, #4
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d122      	bne.n	800ad04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	f003 0304 	and.w	r3, r3, #4
 800acc8:	2b04      	cmp	r3, #4
 800acca:	d11b      	bne.n	800ad04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f06f 0204 	mvn.w	r2, #4
 800acd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2202      	movs	r2, #2
 800acda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 f9a6 	bl	800b03c <HAL_TIM_IC_CaptureCallback>
 800acf0:	e005      	b.n	800acfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f998 	bl	800b028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f9a9 	bl	800b050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2200      	movs	r2, #0
 800ad02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f003 0308 	and.w	r3, r3, #8
 800ad0e:	2b08      	cmp	r3, #8
 800ad10:	d122      	bne.n	800ad58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f003 0308 	and.w	r3, r3, #8
 800ad1c:	2b08      	cmp	r3, #8
 800ad1e:	d11b      	bne.n	800ad58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f06f 0208 	mvn.w	r2, #8
 800ad28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2204      	movs	r2, #4
 800ad2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f97c 	bl	800b03c <HAL_TIM_IC_CaptureCallback>
 800ad44:	e005      	b.n	800ad52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f96e 	bl	800b028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f97f 	bl	800b050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	f003 0310 	and.w	r3, r3, #16
 800ad62:	2b10      	cmp	r3, #16
 800ad64:	d122      	bne.n	800adac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f003 0310 	and.w	r3, r3, #16
 800ad70:	2b10      	cmp	r3, #16
 800ad72:	d11b      	bne.n	800adac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f06f 0210 	mvn.w	r2, #16
 800ad7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2208      	movs	r2, #8
 800ad82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f952 	bl	800b03c <HAL_TIM_IC_CaptureCallback>
 800ad98:	e005      	b.n	800ada6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f944 	bl	800b028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f955 	bl	800b050 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d10e      	bne.n	800add8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	f003 0301 	and.w	r3, r3, #1
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d107      	bne.n	800add8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f06f 0201 	mvn.w	r2, #1
 800add0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7f8 fcae 	bl	8003734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade2:	2b80      	cmp	r3, #128	@ 0x80
 800ade4:	d10e      	bne.n	800ae04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adf0:	2b80      	cmp	r3, #128	@ 0x80
 800adf2:	d107      	bne.n	800ae04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800adfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fb0c 	bl	800b41c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae12:	d10e      	bne.n	800ae32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68db      	ldr	r3, [r3, #12]
 800ae1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae1e:	2b80      	cmp	r3, #128	@ 0x80
 800ae20:	d107      	bne.n	800ae32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 faff 	bl	800b430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae3c:	2b40      	cmp	r3, #64	@ 0x40
 800ae3e:	d10e      	bne.n	800ae5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae4a:	2b40      	cmp	r3, #64	@ 0x40
 800ae4c:	d107      	bne.n	800ae5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ae56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f903 	bl	800b064 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	d10e      	bne.n	800ae8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	f003 0320 	and.w	r3, r3, #32
 800ae76:	2b20      	cmp	r3, #32
 800ae78:	d107      	bne.n	800ae8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f06f 0220 	mvn.w	r2, #32
 800ae82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f000 fabf 	bl	800b408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae8a:	bf00      	nop
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d101      	bne.n	800aeb0 <HAL_TIM_ConfigClockSource+0x1c>
 800aeac:	2302      	movs	r3, #2
 800aeae:	e0b4      	b.n	800b01a <HAL_TIM_ConfigClockSource+0x186>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aec8:	68ba      	ldr	r2, [r7, #8]
 800aeca:	4b56      	ldr	r3, [pc, #344]	@ (800b024 <HAL_TIM_ConfigClockSource+0x190>)
 800aecc:	4013      	ands	r3, r2
 800aece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68ba      	ldr	r2, [r7, #8]
 800aede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aee8:	d03e      	beq.n	800af68 <HAL_TIM_ConfigClockSource+0xd4>
 800aeea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aeee:	f200 8087 	bhi.w	800b000 <HAL_TIM_ConfigClockSource+0x16c>
 800aef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aef6:	f000 8086 	beq.w	800b006 <HAL_TIM_ConfigClockSource+0x172>
 800aefa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aefe:	d87f      	bhi.n	800b000 <HAL_TIM_ConfigClockSource+0x16c>
 800af00:	2b70      	cmp	r3, #112	@ 0x70
 800af02:	d01a      	beq.n	800af3a <HAL_TIM_ConfigClockSource+0xa6>
 800af04:	2b70      	cmp	r3, #112	@ 0x70
 800af06:	d87b      	bhi.n	800b000 <HAL_TIM_ConfigClockSource+0x16c>
 800af08:	2b60      	cmp	r3, #96	@ 0x60
 800af0a:	d050      	beq.n	800afae <HAL_TIM_ConfigClockSource+0x11a>
 800af0c:	2b60      	cmp	r3, #96	@ 0x60
 800af0e:	d877      	bhi.n	800b000 <HAL_TIM_ConfigClockSource+0x16c>
 800af10:	2b50      	cmp	r3, #80	@ 0x50
 800af12:	d03c      	beq.n	800af8e <HAL_TIM_ConfigClockSource+0xfa>
 800af14:	2b50      	cmp	r3, #80	@ 0x50
 800af16:	d873      	bhi.n	800b000 <HAL_TIM_ConfigClockSource+0x16c>
 800af18:	2b40      	cmp	r3, #64	@ 0x40
 800af1a:	d058      	beq.n	800afce <HAL_TIM_ConfigClockSource+0x13a>
 800af1c:	2b40      	cmp	r3, #64	@ 0x40
 800af1e:	d86f      	bhi.n	800b000 <HAL_TIM_ConfigClockSource+0x16c>
 800af20:	2b30      	cmp	r3, #48	@ 0x30
 800af22:	d064      	beq.n	800afee <HAL_TIM_ConfigClockSource+0x15a>
 800af24:	2b30      	cmp	r3, #48	@ 0x30
 800af26:	d86b      	bhi.n	800b000 <HAL_TIM_ConfigClockSource+0x16c>
 800af28:	2b20      	cmp	r3, #32
 800af2a:	d060      	beq.n	800afee <HAL_TIM_ConfigClockSource+0x15a>
 800af2c:	2b20      	cmp	r3, #32
 800af2e:	d867      	bhi.n	800b000 <HAL_TIM_ConfigClockSource+0x16c>
 800af30:	2b00      	cmp	r3, #0
 800af32:	d05c      	beq.n	800afee <HAL_TIM_ConfigClockSource+0x15a>
 800af34:	2b10      	cmp	r3, #16
 800af36:	d05a      	beq.n	800afee <HAL_TIM_ConfigClockSource+0x15a>
 800af38:	e062      	b.n	800b000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af4a:	f000 f9af 	bl	800b2ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	609a      	str	r2, [r3, #8]
      break;
 800af66:	e04f      	b.n	800b008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af78:	f000 f998 	bl	800b2ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689a      	ldr	r2, [r3, #8]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af8a:	609a      	str	r2, [r3, #8]
      break;
 800af8c:	e03c      	b.n	800b008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af9a:	461a      	mov	r2, r3
 800af9c:	f000 f90c 	bl	800b1b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2150      	movs	r1, #80	@ 0x50
 800afa6:	4618      	mov	r0, r3
 800afa8:	f000 f965 	bl	800b276 <TIM_ITRx_SetConfig>
      break;
 800afac:	e02c      	b.n	800b008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800afba:	461a      	mov	r2, r3
 800afbc:	f000 f92b 	bl	800b216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2160      	movs	r1, #96	@ 0x60
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 f955 	bl	800b276 <TIM_ITRx_SetConfig>
      break;
 800afcc:	e01c      	b.n	800b008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afda:	461a      	mov	r2, r3
 800afdc:	f000 f8ec 	bl	800b1b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2140      	movs	r1, #64	@ 0x40
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 f945 	bl	800b276 <TIM_ITRx_SetConfig>
      break;
 800afec:	e00c      	b.n	800b008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4619      	mov	r1, r3
 800aff8:	4610      	mov	r0, r2
 800affa:	f000 f93c 	bl	800b276 <TIM_ITRx_SetConfig>
      break;
 800affe:	e003      	b.n	800b008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	73fb      	strb	r3, [r7, #15]
      break;
 800b004:	e000      	b.n	800b008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b018:	7bfb      	ldrb	r3, [r7, #15]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	fffeff88 	.word	0xfffeff88

0800b028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a40      	ldr	r2, [pc, #256]	@ (800b18c <TIM_Base_SetConfig+0x114>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d013      	beq.n	800b0b8 <TIM_Base_SetConfig+0x40>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b096:	d00f      	beq.n	800b0b8 <TIM_Base_SetConfig+0x40>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a3d      	ldr	r2, [pc, #244]	@ (800b190 <TIM_Base_SetConfig+0x118>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d00b      	beq.n	800b0b8 <TIM_Base_SetConfig+0x40>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a3c      	ldr	r2, [pc, #240]	@ (800b194 <TIM_Base_SetConfig+0x11c>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d007      	beq.n	800b0b8 <TIM_Base_SetConfig+0x40>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a3b      	ldr	r2, [pc, #236]	@ (800b198 <TIM_Base_SetConfig+0x120>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d003      	beq.n	800b0b8 <TIM_Base_SetConfig+0x40>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a3a      	ldr	r2, [pc, #232]	@ (800b19c <TIM_Base_SetConfig+0x124>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d108      	bne.n	800b0ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	68fa      	ldr	r2, [r7, #12]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a2f      	ldr	r2, [pc, #188]	@ (800b18c <TIM_Base_SetConfig+0x114>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d02b      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0d8:	d027      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a2c      	ldr	r2, [pc, #176]	@ (800b190 <TIM_Base_SetConfig+0x118>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d023      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a2b      	ldr	r2, [pc, #172]	@ (800b194 <TIM_Base_SetConfig+0x11c>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d01f      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a2a      	ldr	r2, [pc, #168]	@ (800b198 <TIM_Base_SetConfig+0x120>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d01b      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a29      	ldr	r2, [pc, #164]	@ (800b19c <TIM_Base_SetConfig+0x124>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d017      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a28      	ldr	r2, [pc, #160]	@ (800b1a0 <TIM_Base_SetConfig+0x128>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d013      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a27      	ldr	r2, [pc, #156]	@ (800b1a4 <TIM_Base_SetConfig+0x12c>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d00f      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a26      	ldr	r2, [pc, #152]	@ (800b1a8 <TIM_Base_SetConfig+0x130>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d00b      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a25      	ldr	r2, [pc, #148]	@ (800b1ac <TIM_Base_SetConfig+0x134>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d007      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a24      	ldr	r2, [pc, #144]	@ (800b1b0 <TIM_Base_SetConfig+0x138>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d003      	beq.n	800b12a <TIM_Base_SetConfig+0xb2>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a23      	ldr	r2, [pc, #140]	@ (800b1b4 <TIM_Base_SetConfig+0x13c>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d108      	bne.n	800b13c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	68fa      	ldr	r2, [r7, #12]
 800b138:	4313      	orrs	r3, r2
 800b13a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	4313      	orrs	r3, r2
 800b148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	689a      	ldr	r2, [r3, #8]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a0a      	ldr	r2, [pc, #40]	@ (800b18c <TIM_Base_SetConfig+0x114>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d003      	beq.n	800b170 <TIM_Base_SetConfig+0xf8>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a0c      	ldr	r2, [pc, #48]	@ (800b19c <TIM_Base_SetConfig+0x124>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d103      	bne.n	800b178 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	691a      	ldr	r2, [r3, #16]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	615a      	str	r2, [r3, #20]
}
 800b17e:	bf00      	nop
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	40010000 	.word	0x40010000
 800b190:	40000400 	.word	0x40000400
 800b194:	40000800 	.word	0x40000800
 800b198:	40000c00 	.word	0x40000c00
 800b19c:	40010400 	.word	0x40010400
 800b1a0:	40014000 	.word	0x40014000
 800b1a4:	40014400 	.word	0x40014400
 800b1a8:	40014800 	.word	0x40014800
 800b1ac:	40001800 	.word	0x40001800
 800b1b0:	40001c00 	.word	0x40001c00
 800b1b4:	40002000 	.word	0x40002000

0800b1b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6a1b      	ldr	r3, [r3, #32]
 800b1c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	f023 0201 	bic.w	r2, r3, #1
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b1e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	011b      	lsls	r3, r3, #4
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f023 030a 	bic.w	r3, r3, #10
 800b1f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1f6:	697a      	ldr	r2, [r7, #20]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	621a      	str	r2, [r3, #32]
}
 800b20a:	bf00      	nop
 800b20c:	371c      	adds	r7, #28
 800b20e:	46bd      	mov	sp, r7
 800b210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b214:	4770      	bx	lr

0800b216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b216:	b480      	push	{r7}
 800b218:	b087      	sub	sp, #28
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	f023 0210 	bic.w	r2, r3, #16
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	031b      	lsls	r3, r3, #12
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	4313      	orrs	r3, r2
 800b24a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	011b      	lsls	r3, r3, #4
 800b258:	693a      	ldr	r2, [r7, #16]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	621a      	str	r2, [r3, #32]
}
 800b26a:	bf00      	nop
 800b26c:	371c      	adds	r7, #28
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b276:	b480      	push	{r7}
 800b278:	b085      	sub	sp, #20
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b28c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	4313      	orrs	r3, r2
 800b294:	f043 0307 	orr.w	r3, r3, #7
 800b298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	609a      	str	r2, [r3, #8]
}
 800b2a0:	bf00      	nop
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	021a      	lsls	r2, r3, #8
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	697a      	ldr	r2, [r7, #20]
 800b2de:	609a      	str	r2, [r3, #8]
}
 800b2e0:	bf00      	nop
 800b2e2:	371c      	adds	r7, #28
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d101      	bne.n	800b304 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b300:	2302      	movs	r3, #2
 800b302:	e06d      	b.n	800b3e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2202      	movs	r2, #2
 800b310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a30      	ldr	r2, [pc, #192]	@ (800b3ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d004      	beq.n	800b338 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a2f      	ldr	r2, [pc, #188]	@ (800b3f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d108      	bne.n	800b34a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b33e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	4313      	orrs	r3, r2
 800b348:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b350:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	4313      	orrs	r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68fa      	ldr	r2, [r7, #12]
 800b362:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a20      	ldr	r2, [pc, #128]	@ (800b3ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d022      	beq.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b376:	d01d      	beq.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a1d      	ldr	r2, [pc, #116]	@ (800b3f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d018      	beq.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	4a1c      	ldr	r2, [pc, #112]	@ (800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d013      	beq.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a1a      	ldr	r2, [pc, #104]	@ (800b3fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d00e      	beq.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4a15      	ldr	r2, [pc, #84]	@ (800b3f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d009      	beq.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a16      	ldr	r2, [pc, #88]	@ (800b400 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d004      	beq.n	800b3b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a15      	ldr	r2, [pc, #84]	@ (800b404 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d10c      	bne.n	800b3ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b3ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68ba      	ldr	r2, [r7, #8]
 800b3cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	40010000 	.word	0x40010000
 800b3f0:	40010400 	.word	0x40010400
 800b3f4:	40000400 	.word	0x40000400
 800b3f8:	40000800 	.word	0x40000800
 800b3fc:	40000c00 	.word	0x40000c00
 800b400:	40014000 	.word	0x40014000
 800b404:	40001800 	.word	0x40001800

0800b408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e040      	b.n	800b4d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7fa fbee 	bl	8005c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2224      	movs	r2, #36	@ 0x24
 800b470:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f022 0201 	bic.w	r2, r2, #1
 800b480:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f82c 	bl	800b4e0 <UART_SetConfig>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d101      	bne.n	800b492 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e022      	b.n	800b4d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fa84 	bl	800b9a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b4ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689a      	ldr	r2, [r3, #8]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b4be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f042 0201 	orr.w	r2, r2, #1
 800b4ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 fb0b 	bl	800baec <UART_CheckIdleState>
 800b4d6:	4603      	mov	r3, r0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b088      	sub	sp, #32
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	689a      	ldr	r2, [r3, #8]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	431a      	orrs	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	69db      	ldr	r3, [r3, #28]
 800b500:	4313      	orrs	r3, r2
 800b502:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	4ba6      	ldr	r3, [pc, #664]	@ (800b7a4 <UART_SetConfig+0x2c4>)
 800b50c:	4013      	ands	r3, r2
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	6812      	ldr	r2, [r2, #0]
 800b512:	6979      	ldr	r1, [r7, #20]
 800b514:	430b      	orrs	r3, r1
 800b516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	430a      	orrs	r2, r1
 800b52c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	699b      	ldr	r3, [r3, #24]
 800b532:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a1b      	ldr	r3, [r3, #32]
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	430a      	orrs	r2, r1
 800b550:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a94      	ldr	r2, [pc, #592]	@ (800b7a8 <UART_SetConfig+0x2c8>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d120      	bne.n	800b59e <UART_SetConfig+0xbe>
 800b55c:	4b93      	ldr	r3, [pc, #588]	@ (800b7ac <UART_SetConfig+0x2cc>)
 800b55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b03      	cmp	r3, #3
 800b568:	d816      	bhi.n	800b598 <UART_SetConfig+0xb8>
 800b56a:	a201      	add	r2, pc, #4	@ (adr r2, 800b570 <UART_SetConfig+0x90>)
 800b56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b570:	0800b581 	.word	0x0800b581
 800b574:	0800b58d 	.word	0x0800b58d
 800b578:	0800b587 	.word	0x0800b587
 800b57c:	0800b593 	.word	0x0800b593
 800b580:	2301      	movs	r3, #1
 800b582:	77fb      	strb	r3, [r7, #31]
 800b584:	e150      	b.n	800b828 <UART_SetConfig+0x348>
 800b586:	2302      	movs	r3, #2
 800b588:	77fb      	strb	r3, [r7, #31]
 800b58a:	e14d      	b.n	800b828 <UART_SetConfig+0x348>
 800b58c:	2304      	movs	r3, #4
 800b58e:	77fb      	strb	r3, [r7, #31]
 800b590:	e14a      	b.n	800b828 <UART_SetConfig+0x348>
 800b592:	2308      	movs	r3, #8
 800b594:	77fb      	strb	r3, [r7, #31]
 800b596:	e147      	b.n	800b828 <UART_SetConfig+0x348>
 800b598:	2310      	movs	r3, #16
 800b59a:	77fb      	strb	r3, [r7, #31]
 800b59c:	e144      	b.n	800b828 <UART_SetConfig+0x348>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a83      	ldr	r2, [pc, #524]	@ (800b7b0 <UART_SetConfig+0x2d0>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d132      	bne.n	800b60e <UART_SetConfig+0x12e>
 800b5a8:	4b80      	ldr	r3, [pc, #512]	@ (800b7ac <UART_SetConfig+0x2cc>)
 800b5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ae:	f003 030c 	and.w	r3, r3, #12
 800b5b2:	2b0c      	cmp	r3, #12
 800b5b4:	d828      	bhi.n	800b608 <UART_SetConfig+0x128>
 800b5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5bc <UART_SetConfig+0xdc>)
 800b5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5bc:	0800b5f1 	.word	0x0800b5f1
 800b5c0:	0800b609 	.word	0x0800b609
 800b5c4:	0800b609 	.word	0x0800b609
 800b5c8:	0800b609 	.word	0x0800b609
 800b5cc:	0800b5fd 	.word	0x0800b5fd
 800b5d0:	0800b609 	.word	0x0800b609
 800b5d4:	0800b609 	.word	0x0800b609
 800b5d8:	0800b609 	.word	0x0800b609
 800b5dc:	0800b5f7 	.word	0x0800b5f7
 800b5e0:	0800b609 	.word	0x0800b609
 800b5e4:	0800b609 	.word	0x0800b609
 800b5e8:	0800b609 	.word	0x0800b609
 800b5ec:	0800b603 	.word	0x0800b603
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	77fb      	strb	r3, [r7, #31]
 800b5f4:	e118      	b.n	800b828 <UART_SetConfig+0x348>
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	77fb      	strb	r3, [r7, #31]
 800b5fa:	e115      	b.n	800b828 <UART_SetConfig+0x348>
 800b5fc:	2304      	movs	r3, #4
 800b5fe:	77fb      	strb	r3, [r7, #31]
 800b600:	e112      	b.n	800b828 <UART_SetConfig+0x348>
 800b602:	2308      	movs	r3, #8
 800b604:	77fb      	strb	r3, [r7, #31]
 800b606:	e10f      	b.n	800b828 <UART_SetConfig+0x348>
 800b608:	2310      	movs	r3, #16
 800b60a:	77fb      	strb	r3, [r7, #31]
 800b60c:	e10c      	b.n	800b828 <UART_SetConfig+0x348>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a68      	ldr	r2, [pc, #416]	@ (800b7b4 <UART_SetConfig+0x2d4>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d120      	bne.n	800b65a <UART_SetConfig+0x17a>
 800b618:	4b64      	ldr	r3, [pc, #400]	@ (800b7ac <UART_SetConfig+0x2cc>)
 800b61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b61e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b622:	2b30      	cmp	r3, #48	@ 0x30
 800b624:	d013      	beq.n	800b64e <UART_SetConfig+0x16e>
 800b626:	2b30      	cmp	r3, #48	@ 0x30
 800b628:	d814      	bhi.n	800b654 <UART_SetConfig+0x174>
 800b62a:	2b20      	cmp	r3, #32
 800b62c:	d009      	beq.n	800b642 <UART_SetConfig+0x162>
 800b62e:	2b20      	cmp	r3, #32
 800b630:	d810      	bhi.n	800b654 <UART_SetConfig+0x174>
 800b632:	2b00      	cmp	r3, #0
 800b634:	d002      	beq.n	800b63c <UART_SetConfig+0x15c>
 800b636:	2b10      	cmp	r3, #16
 800b638:	d006      	beq.n	800b648 <UART_SetConfig+0x168>
 800b63a:	e00b      	b.n	800b654 <UART_SetConfig+0x174>
 800b63c:	2300      	movs	r3, #0
 800b63e:	77fb      	strb	r3, [r7, #31]
 800b640:	e0f2      	b.n	800b828 <UART_SetConfig+0x348>
 800b642:	2302      	movs	r3, #2
 800b644:	77fb      	strb	r3, [r7, #31]
 800b646:	e0ef      	b.n	800b828 <UART_SetConfig+0x348>
 800b648:	2304      	movs	r3, #4
 800b64a:	77fb      	strb	r3, [r7, #31]
 800b64c:	e0ec      	b.n	800b828 <UART_SetConfig+0x348>
 800b64e:	2308      	movs	r3, #8
 800b650:	77fb      	strb	r3, [r7, #31]
 800b652:	e0e9      	b.n	800b828 <UART_SetConfig+0x348>
 800b654:	2310      	movs	r3, #16
 800b656:	77fb      	strb	r3, [r7, #31]
 800b658:	e0e6      	b.n	800b828 <UART_SetConfig+0x348>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a56      	ldr	r2, [pc, #344]	@ (800b7b8 <UART_SetConfig+0x2d8>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d120      	bne.n	800b6a6 <UART_SetConfig+0x1c6>
 800b664:	4b51      	ldr	r3, [pc, #324]	@ (800b7ac <UART_SetConfig+0x2cc>)
 800b666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b66a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b66e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b670:	d013      	beq.n	800b69a <UART_SetConfig+0x1ba>
 800b672:	2bc0      	cmp	r3, #192	@ 0xc0
 800b674:	d814      	bhi.n	800b6a0 <UART_SetConfig+0x1c0>
 800b676:	2b80      	cmp	r3, #128	@ 0x80
 800b678:	d009      	beq.n	800b68e <UART_SetConfig+0x1ae>
 800b67a:	2b80      	cmp	r3, #128	@ 0x80
 800b67c:	d810      	bhi.n	800b6a0 <UART_SetConfig+0x1c0>
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d002      	beq.n	800b688 <UART_SetConfig+0x1a8>
 800b682:	2b40      	cmp	r3, #64	@ 0x40
 800b684:	d006      	beq.n	800b694 <UART_SetConfig+0x1b4>
 800b686:	e00b      	b.n	800b6a0 <UART_SetConfig+0x1c0>
 800b688:	2300      	movs	r3, #0
 800b68a:	77fb      	strb	r3, [r7, #31]
 800b68c:	e0cc      	b.n	800b828 <UART_SetConfig+0x348>
 800b68e:	2302      	movs	r3, #2
 800b690:	77fb      	strb	r3, [r7, #31]
 800b692:	e0c9      	b.n	800b828 <UART_SetConfig+0x348>
 800b694:	2304      	movs	r3, #4
 800b696:	77fb      	strb	r3, [r7, #31]
 800b698:	e0c6      	b.n	800b828 <UART_SetConfig+0x348>
 800b69a:	2308      	movs	r3, #8
 800b69c:	77fb      	strb	r3, [r7, #31]
 800b69e:	e0c3      	b.n	800b828 <UART_SetConfig+0x348>
 800b6a0:	2310      	movs	r3, #16
 800b6a2:	77fb      	strb	r3, [r7, #31]
 800b6a4:	e0c0      	b.n	800b828 <UART_SetConfig+0x348>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a44      	ldr	r2, [pc, #272]	@ (800b7bc <UART_SetConfig+0x2dc>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d125      	bne.n	800b6fc <UART_SetConfig+0x21c>
 800b6b0:	4b3e      	ldr	r3, [pc, #248]	@ (800b7ac <UART_SetConfig+0x2cc>)
 800b6b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6be:	d017      	beq.n	800b6f0 <UART_SetConfig+0x210>
 800b6c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b6c4:	d817      	bhi.n	800b6f6 <UART_SetConfig+0x216>
 800b6c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ca:	d00b      	beq.n	800b6e4 <UART_SetConfig+0x204>
 800b6cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6d0:	d811      	bhi.n	800b6f6 <UART_SetConfig+0x216>
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <UART_SetConfig+0x1fe>
 800b6d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6da:	d006      	beq.n	800b6ea <UART_SetConfig+0x20a>
 800b6dc:	e00b      	b.n	800b6f6 <UART_SetConfig+0x216>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	77fb      	strb	r3, [r7, #31]
 800b6e2:	e0a1      	b.n	800b828 <UART_SetConfig+0x348>
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	77fb      	strb	r3, [r7, #31]
 800b6e8:	e09e      	b.n	800b828 <UART_SetConfig+0x348>
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	77fb      	strb	r3, [r7, #31]
 800b6ee:	e09b      	b.n	800b828 <UART_SetConfig+0x348>
 800b6f0:	2308      	movs	r3, #8
 800b6f2:	77fb      	strb	r3, [r7, #31]
 800b6f4:	e098      	b.n	800b828 <UART_SetConfig+0x348>
 800b6f6:	2310      	movs	r3, #16
 800b6f8:	77fb      	strb	r3, [r7, #31]
 800b6fa:	e095      	b.n	800b828 <UART_SetConfig+0x348>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a2f      	ldr	r2, [pc, #188]	@ (800b7c0 <UART_SetConfig+0x2e0>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d125      	bne.n	800b752 <UART_SetConfig+0x272>
 800b706:	4b29      	ldr	r3, [pc, #164]	@ (800b7ac <UART_SetConfig+0x2cc>)
 800b708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b70c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b710:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b714:	d017      	beq.n	800b746 <UART_SetConfig+0x266>
 800b716:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b71a:	d817      	bhi.n	800b74c <UART_SetConfig+0x26c>
 800b71c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b720:	d00b      	beq.n	800b73a <UART_SetConfig+0x25a>
 800b722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b726:	d811      	bhi.n	800b74c <UART_SetConfig+0x26c>
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d003      	beq.n	800b734 <UART_SetConfig+0x254>
 800b72c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b730:	d006      	beq.n	800b740 <UART_SetConfig+0x260>
 800b732:	e00b      	b.n	800b74c <UART_SetConfig+0x26c>
 800b734:	2301      	movs	r3, #1
 800b736:	77fb      	strb	r3, [r7, #31]
 800b738:	e076      	b.n	800b828 <UART_SetConfig+0x348>
 800b73a:	2302      	movs	r3, #2
 800b73c:	77fb      	strb	r3, [r7, #31]
 800b73e:	e073      	b.n	800b828 <UART_SetConfig+0x348>
 800b740:	2304      	movs	r3, #4
 800b742:	77fb      	strb	r3, [r7, #31]
 800b744:	e070      	b.n	800b828 <UART_SetConfig+0x348>
 800b746:	2308      	movs	r3, #8
 800b748:	77fb      	strb	r3, [r7, #31]
 800b74a:	e06d      	b.n	800b828 <UART_SetConfig+0x348>
 800b74c:	2310      	movs	r3, #16
 800b74e:	77fb      	strb	r3, [r7, #31]
 800b750:	e06a      	b.n	800b828 <UART_SetConfig+0x348>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a1b      	ldr	r2, [pc, #108]	@ (800b7c4 <UART_SetConfig+0x2e4>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d138      	bne.n	800b7ce <UART_SetConfig+0x2ee>
 800b75c:	4b13      	ldr	r3, [pc, #76]	@ (800b7ac <UART_SetConfig+0x2cc>)
 800b75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b762:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b766:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b76a:	d017      	beq.n	800b79c <UART_SetConfig+0x2bc>
 800b76c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b770:	d82a      	bhi.n	800b7c8 <UART_SetConfig+0x2e8>
 800b772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b776:	d00b      	beq.n	800b790 <UART_SetConfig+0x2b0>
 800b778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b77c:	d824      	bhi.n	800b7c8 <UART_SetConfig+0x2e8>
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <UART_SetConfig+0x2aa>
 800b782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b786:	d006      	beq.n	800b796 <UART_SetConfig+0x2b6>
 800b788:	e01e      	b.n	800b7c8 <UART_SetConfig+0x2e8>
 800b78a:	2300      	movs	r3, #0
 800b78c:	77fb      	strb	r3, [r7, #31]
 800b78e:	e04b      	b.n	800b828 <UART_SetConfig+0x348>
 800b790:	2302      	movs	r3, #2
 800b792:	77fb      	strb	r3, [r7, #31]
 800b794:	e048      	b.n	800b828 <UART_SetConfig+0x348>
 800b796:	2304      	movs	r3, #4
 800b798:	77fb      	strb	r3, [r7, #31]
 800b79a:	e045      	b.n	800b828 <UART_SetConfig+0x348>
 800b79c:	2308      	movs	r3, #8
 800b79e:	77fb      	strb	r3, [r7, #31]
 800b7a0:	e042      	b.n	800b828 <UART_SetConfig+0x348>
 800b7a2:	bf00      	nop
 800b7a4:	efff69f3 	.word	0xefff69f3
 800b7a8:	40011000 	.word	0x40011000
 800b7ac:	40023800 	.word	0x40023800
 800b7b0:	40004400 	.word	0x40004400
 800b7b4:	40004800 	.word	0x40004800
 800b7b8:	40004c00 	.word	0x40004c00
 800b7bc:	40005000 	.word	0x40005000
 800b7c0:	40011400 	.word	0x40011400
 800b7c4:	40007800 	.word	0x40007800
 800b7c8:	2310      	movs	r3, #16
 800b7ca:	77fb      	strb	r3, [r7, #31]
 800b7cc:	e02c      	b.n	800b828 <UART_SetConfig+0x348>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a72      	ldr	r2, [pc, #456]	@ (800b99c <UART_SetConfig+0x4bc>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d125      	bne.n	800b824 <UART_SetConfig+0x344>
 800b7d8:	4b71      	ldr	r3, [pc, #452]	@ (800b9a0 <UART_SetConfig+0x4c0>)
 800b7da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b7e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b7e6:	d017      	beq.n	800b818 <UART_SetConfig+0x338>
 800b7e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b7ec:	d817      	bhi.n	800b81e <UART_SetConfig+0x33e>
 800b7ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7f2:	d00b      	beq.n	800b80c <UART_SetConfig+0x32c>
 800b7f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7f8:	d811      	bhi.n	800b81e <UART_SetConfig+0x33e>
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <UART_SetConfig+0x326>
 800b7fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b802:	d006      	beq.n	800b812 <UART_SetConfig+0x332>
 800b804:	e00b      	b.n	800b81e <UART_SetConfig+0x33e>
 800b806:	2300      	movs	r3, #0
 800b808:	77fb      	strb	r3, [r7, #31]
 800b80a:	e00d      	b.n	800b828 <UART_SetConfig+0x348>
 800b80c:	2302      	movs	r3, #2
 800b80e:	77fb      	strb	r3, [r7, #31]
 800b810:	e00a      	b.n	800b828 <UART_SetConfig+0x348>
 800b812:	2304      	movs	r3, #4
 800b814:	77fb      	strb	r3, [r7, #31]
 800b816:	e007      	b.n	800b828 <UART_SetConfig+0x348>
 800b818:	2308      	movs	r3, #8
 800b81a:	77fb      	strb	r3, [r7, #31]
 800b81c:	e004      	b.n	800b828 <UART_SetConfig+0x348>
 800b81e:	2310      	movs	r3, #16
 800b820:	77fb      	strb	r3, [r7, #31]
 800b822:	e001      	b.n	800b828 <UART_SetConfig+0x348>
 800b824:	2310      	movs	r3, #16
 800b826:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	69db      	ldr	r3, [r3, #28]
 800b82c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b830:	d15b      	bne.n	800b8ea <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b832:	7ffb      	ldrb	r3, [r7, #31]
 800b834:	2b08      	cmp	r3, #8
 800b836:	d828      	bhi.n	800b88a <UART_SetConfig+0x3aa>
 800b838:	a201      	add	r2, pc, #4	@ (adr r2, 800b840 <UART_SetConfig+0x360>)
 800b83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b83e:	bf00      	nop
 800b840:	0800b865 	.word	0x0800b865
 800b844:	0800b86d 	.word	0x0800b86d
 800b848:	0800b875 	.word	0x0800b875
 800b84c:	0800b88b 	.word	0x0800b88b
 800b850:	0800b87b 	.word	0x0800b87b
 800b854:	0800b88b 	.word	0x0800b88b
 800b858:	0800b88b 	.word	0x0800b88b
 800b85c:	0800b88b 	.word	0x0800b88b
 800b860:	0800b883 	.word	0x0800b883
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b864:	f7fd ffca 	bl	80097fc <HAL_RCC_GetPCLK1Freq>
 800b868:	61b8      	str	r0, [r7, #24]
        break;
 800b86a:	e013      	b.n	800b894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b86c:	f7fd ffda 	bl	8009824 <HAL_RCC_GetPCLK2Freq>
 800b870:	61b8      	str	r0, [r7, #24]
        break;
 800b872:	e00f      	b.n	800b894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b874:	4b4b      	ldr	r3, [pc, #300]	@ (800b9a4 <UART_SetConfig+0x4c4>)
 800b876:	61bb      	str	r3, [r7, #24]
        break;
 800b878:	e00c      	b.n	800b894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b87a:	f7fd feed 	bl	8009658 <HAL_RCC_GetSysClockFreq>
 800b87e:	61b8      	str	r0, [r7, #24]
        break;
 800b880:	e008      	b.n	800b894 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b882:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b886:	61bb      	str	r3, [r7, #24]
        break;
 800b888:	e004      	b.n	800b894 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	77bb      	strb	r3, [r7, #30]
        break;
 800b892:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b894:	69bb      	ldr	r3, [r7, #24]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d074      	beq.n	800b984 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	005a      	lsls	r2, r3, #1
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	085b      	lsrs	r3, r3, #1
 800b8a4:	441a      	add	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	2b0f      	cmp	r3, #15
 800b8b4:	d916      	bls.n	800b8e4 <UART_SetConfig+0x404>
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8bc:	d212      	bcs.n	800b8e4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	f023 030f 	bic.w	r3, r3, #15
 800b8c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	085b      	lsrs	r3, r3, #1
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	89fb      	ldrh	r3, [r7, #14]
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	89fa      	ldrh	r2, [r7, #14]
 800b8e0:	60da      	str	r2, [r3, #12]
 800b8e2:	e04f      	b.n	800b984 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	77bb      	strb	r3, [r7, #30]
 800b8e8:	e04c      	b.n	800b984 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b8ea:	7ffb      	ldrb	r3, [r7, #31]
 800b8ec:	2b08      	cmp	r3, #8
 800b8ee:	d828      	bhi.n	800b942 <UART_SetConfig+0x462>
 800b8f0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f8 <UART_SetConfig+0x418>)
 800b8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f6:	bf00      	nop
 800b8f8:	0800b91d 	.word	0x0800b91d
 800b8fc:	0800b925 	.word	0x0800b925
 800b900:	0800b92d 	.word	0x0800b92d
 800b904:	0800b943 	.word	0x0800b943
 800b908:	0800b933 	.word	0x0800b933
 800b90c:	0800b943 	.word	0x0800b943
 800b910:	0800b943 	.word	0x0800b943
 800b914:	0800b943 	.word	0x0800b943
 800b918:	0800b93b 	.word	0x0800b93b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b91c:	f7fd ff6e 	bl	80097fc <HAL_RCC_GetPCLK1Freq>
 800b920:	61b8      	str	r0, [r7, #24]
        break;
 800b922:	e013      	b.n	800b94c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b924:	f7fd ff7e 	bl	8009824 <HAL_RCC_GetPCLK2Freq>
 800b928:	61b8      	str	r0, [r7, #24]
        break;
 800b92a:	e00f      	b.n	800b94c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b92c:	4b1d      	ldr	r3, [pc, #116]	@ (800b9a4 <UART_SetConfig+0x4c4>)
 800b92e:	61bb      	str	r3, [r7, #24]
        break;
 800b930:	e00c      	b.n	800b94c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b932:	f7fd fe91 	bl	8009658 <HAL_RCC_GetSysClockFreq>
 800b936:	61b8      	str	r0, [r7, #24]
        break;
 800b938:	e008      	b.n	800b94c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b93a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b93e:	61bb      	str	r3, [r7, #24]
        break;
 800b940:	e004      	b.n	800b94c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b942:	2300      	movs	r3, #0
 800b944:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b946:	2301      	movs	r3, #1
 800b948:	77bb      	strb	r3, [r7, #30]
        break;
 800b94a:	bf00      	nop
    }

    if (pclk != 0U)
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d018      	beq.n	800b984 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	085a      	lsrs	r2, r3, #1
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	441a      	add	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	fbb2 f3f3 	udiv	r3, r2, r3
 800b964:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	2b0f      	cmp	r3, #15
 800b96a:	d909      	bls.n	800b980 <UART_SetConfig+0x4a0>
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b972:	d205      	bcs.n	800b980 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	b29a      	uxth	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	60da      	str	r2, [r3, #12]
 800b97e:	e001      	b.n	800b984 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b990:	7fbb      	ldrb	r3, [r7, #30]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3720      	adds	r7, #32
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	40007c00 	.word	0x40007c00
 800b9a0:	40023800 	.word	0x40023800
 800b9a4:	00f42400 	.word	0x00f42400

0800b9a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00a      	beq.n	800b9d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9d6:	f003 0302 	and.w	r3, r3, #2
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	430a      	orrs	r2, r1
 800b9f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9f8:	f003 0304 	and.w	r3, r3, #4
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00a      	beq.n	800ba16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	430a      	orrs	r2, r1
 800ba14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba1a:	f003 0308 	and.w	r3, r3, #8
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d00a      	beq.n	800ba38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	430a      	orrs	r2, r1
 800ba36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba3c:	f003 0310 	and.w	r3, r3, #16
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d00a      	beq.n	800ba5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	430a      	orrs	r2, r1
 800ba58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	430a      	orrs	r2, r1
 800ba7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d01a      	beq.n	800babe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800baa6:	d10a      	bne.n	800babe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	430a      	orrs	r2, r1
 800bade:	605a      	str	r2, [r3, #4]
  }
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af02      	add	r7, sp, #8
 800baf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2200      	movs	r2, #0
 800baf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bafc:	f7fa f9fe 	bl	8005efc <HAL_GetTick>
 800bb00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 0308 	and.w	r3, r3, #8
 800bb0c:	2b08      	cmp	r3, #8
 800bb0e:	d10e      	bne.n	800bb2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f81b 	bl	800bb5a <UART_WaitOnFlagUntilTimeout>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e011      	b.n	800bb52 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2220      	movs	r2, #32
 800bb32:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2220      	movs	r2, #32
 800bb38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b09c      	sub	sp, #112	@ 0x70
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	60f8      	str	r0, [r7, #12]
 800bb62:	60b9      	str	r1, [r7, #8]
 800bb64:	603b      	str	r3, [r7, #0]
 800bb66:	4613      	mov	r3, r2
 800bb68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb6a:	e0a7      	b.n	800bcbc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb72:	f000 80a3 	beq.w	800bcbc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb76:	f7fa f9c1 	bl	8005efc <HAL_GetTick>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d302      	bcc.n	800bb8c <UART_WaitOnFlagUntilTimeout+0x32>
 800bb86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d13f      	bne.n	800bc0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb94:	e853 3f00 	ldrex	r3, [r3]
 800bb98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bb9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb9c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bba0:	667b      	str	r3, [r7, #100]	@ 0x64
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	461a      	mov	r2, r3
 800bba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bbaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bbac:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bbb0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bbb2:	e841 2300 	strex	r3, r2, [r1]
 800bbb6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bbb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1e6      	bne.n	800bb8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbc8:	e853 3f00 	ldrex	r3, [r3]
 800bbcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd0:	f023 0301 	bic.w	r3, r3, #1
 800bbd4:	663b      	str	r3, [r7, #96]	@ 0x60
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	3308      	adds	r3, #8
 800bbdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bbde:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bbe0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bbe4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bbe6:	e841 2300 	strex	r3, r2, [r1]
 800bbea:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bbec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d1e5      	bne.n	800bbbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2220      	movs	r2, #32
 800bbf6:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2220      	movs	r2, #32
 800bbfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e068      	b.n	800bcde <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0304 	and.w	r3, r3, #4
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d050      	beq.n	800bcbc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	69db      	ldr	r3, [r3, #28]
 800bc20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bc24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc28:	d148      	bne.n	800bcbc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bc32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc3c:	e853 3f00 	ldrex	r3, [r3]
 800bc40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc44:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bc48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bc52:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc54:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bc58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc5a:	e841 2300 	strex	r3, r2, [r1]
 800bc5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1e6      	bne.n	800bc34 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	613b      	str	r3, [r7, #16]
   return(result);
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	3308      	adds	r3, #8
 800bc84:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bc86:	623a      	str	r2, [r7, #32]
 800bc88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8a:	69f9      	ldr	r1, [r7, #28]
 800bc8c:	6a3a      	ldr	r2, [r7, #32]
 800bc8e:	e841 2300 	strex	r3, r2, [r1]
 800bc92:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1e5      	bne.n	800bc66 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2220      	movs	r2, #32
 800bca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2220      	movs	r2, #32
 800bcac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e010      	b.n	800bcde <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	69da      	ldr	r2, [r3, #28]
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	4013      	ands	r3, r2
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	bf0c      	ite	eq
 800bccc:	2301      	moveq	r3, #1
 800bcce:	2300      	movne	r3, #0
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	79fb      	ldrb	r3, [r7, #7]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	f43f af48 	beq.w	800bb6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3770      	adds	r7, #112	@ 0x70
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
	...

0800bce8 <FMC_SDRAM_Init>:
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	6039      	str	r1, [r7, #0]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d121      	bne.n	800bd3e <FMC_SDRAM_Init+0x56>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	4b27      	ldr	r3, [pc, #156]	@ (800bd9c <FMC_SDRAM_Init+0xb4>)
 800bd00:	4013      	ands	r3, r2
 800bd02:	683a      	ldr	r2, [r7, #0]
 800bd04:	6851      	ldr	r1, [r2, #4]
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	6892      	ldr	r2, [r2, #8]
 800bd0a:	4311      	orrs	r1, r2
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	68d2      	ldr	r2, [r2, #12]
 800bd10:	4311      	orrs	r1, r2
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	6912      	ldr	r2, [r2, #16]
 800bd16:	4311      	orrs	r1, r2
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	6952      	ldr	r2, [r2, #20]
 800bd1c:	4311      	orrs	r1, r2
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	6992      	ldr	r2, [r2, #24]
 800bd22:	4311      	orrs	r1, r2
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	69d2      	ldr	r2, [r2, #28]
 800bd28:	4311      	orrs	r1, r2
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	6a12      	ldr	r2, [r2, #32]
 800bd2e:	4311      	orrs	r1, r2
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bd34:	430a      	orrs	r2, r1
 800bd36:	431a      	orrs	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	e026      	b.n	800bd8c <FMC_SDRAM_Init+0xa4>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	69d9      	ldr	r1, [r3, #28]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	4319      	orrs	r1, r3
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd54:	430b      	orrs	r3, r1
 800bd56:	431a      	orrs	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	601a      	str	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	4b0e      	ldr	r3, [pc, #56]	@ (800bd9c <FMC_SDRAM_Init+0xb4>)
 800bd62:	4013      	ands	r3, r2
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	6851      	ldr	r1, [r2, #4]
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	6892      	ldr	r2, [r2, #8]
 800bd6c:	4311      	orrs	r1, r2
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	68d2      	ldr	r2, [r2, #12]
 800bd72:	4311      	orrs	r1, r2
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	6912      	ldr	r2, [r2, #16]
 800bd78:	4311      	orrs	r1, r2
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	6952      	ldr	r2, [r2, #20]
 800bd7e:	4311      	orrs	r1, r2
 800bd80:	683a      	ldr	r2, [r7, #0]
 800bd82:	6992      	ldr	r2, [r2, #24]
 800bd84:	430a      	orrs	r2, r1
 800bd86:	431a      	orrs	r2, r3
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	605a      	str	r2, [r3, #4]
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	4618      	mov	r0, r3
 800bd90:	370c      	adds	r7, #12
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	ffff8000 	.word	0xffff8000

0800bda0 <FMC_SDRAM_Timing_Init>:
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d128      	bne.n	800be04 <FMC_SDRAM_Timing_Init+0x64>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	1e59      	subs	r1, r3, #1
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	011b      	lsls	r3, r3, #4
 800bdc8:	4319      	orrs	r1, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	689b      	ldr	r3, [r3, #8]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	021b      	lsls	r3, r3, #8
 800bdd2:	4319      	orrs	r1, r3
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	3b01      	subs	r3, #1
 800bdda:	031b      	lsls	r3, r3, #12
 800bddc:	4319      	orrs	r1, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	3b01      	subs	r3, #1
 800bde4:	041b      	lsls	r3, r3, #16
 800bde6:	4319      	orrs	r1, r3
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	695b      	ldr	r3, [r3, #20]
 800bdec:	3b01      	subs	r3, #1
 800bdee:	051b      	lsls	r3, r3, #20
 800bdf0:	4319      	orrs	r1, r3
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	699b      	ldr	r3, [r3, #24]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	061b      	lsls	r3, r3, #24
 800bdfa:	430b      	orrs	r3, r1
 800bdfc:	431a      	orrs	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	609a      	str	r2, [r3, #8]
 800be02:	e02d      	b.n	800be60 <FMC_SDRAM_Timing_Init+0xc0>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	689a      	ldr	r2, [r3, #8]
 800be08:	4b19      	ldr	r3, [pc, #100]	@ (800be70 <FMC_SDRAM_Timing_Init+0xd0>)
 800be0a:	4013      	ands	r3, r2
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	68d2      	ldr	r2, [r2, #12]
 800be10:	3a01      	subs	r2, #1
 800be12:	0311      	lsls	r1, r2, #12
 800be14:	68ba      	ldr	r2, [r7, #8]
 800be16:	6952      	ldr	r2, [r2, #20]
 800be18:	3a01      	subs	r2, #1
 800be1a:	0512      	lsls	r2, r2, #20
 800be1c:	430a      	orrs	r2, r1
 800be1e:	431a      	orrs	r2, r3
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	609a      	str	r2, [r3, #8]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	68db      	ldr	r3, [r3, #12]
 800be28:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	1e59      	subs	r1, r3, #1
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	3b01      	subs	r3, #1
 800be38:	011b      	lsls	r3, r3, #4
 800be3a:	4319      	orrs	r1, r3
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	3b01      	subs	r3, #1
 800be42:	021b      	lsls	r3, r3, #8
 800be44:	4319      	orrs	r1, r3
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	041b      	lsls	r3, r3, #16
 800be4e:	4319      	orrs	r1, r3
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	3b01      	subs	r3, #1
 800be56:	061b      	lsls	r3, r3, #24
 800be58:	430b      	orrs	r3, r1
 800be5a:	431a      	orrs	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	60da      	str	r2, [r3, #12]
 800be60:	2300      	movs	r3, #0
 800be62:	4618      	mov	r0, r3
 800be64:	3714      	adds	r7, #20
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop
 800be70:	ff0f0fff 	.word	0xff0f0fff

0800be74 <FMC_SDRAM_SendCommand>:
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	691a      	ldr	r2, [r3, #16]
 800be84:	4b0c      	ldr	r3, [pc, #48]	@ (800beb8 <FMC_SDRAM_SendCommand+0x44>)
 800be86:	4013      	ands	r3, r2
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	6811      	ldr	r1, [r2, #0]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	6852      	ldr	r2, [r2, #4]
 800be90:	4311      	orrs	r1, r2
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	6892      	ldr	r2, [r2, #8]
 800be96:	3a01      	subs	r2, #1
 800be98:	0152      	lsls	r2, r2, #5
 800be9a:	4311      	orrs	r1, r2
 800be9c:	68ba      	ldr	r2, [r7, #8]
 800be9e:	68d2      	ldr	r2, [r2, #12]
 800bea0:	0252      	lsls	r2, r2, #9
 800bea2:	430a      	orrs	r2, r1
 800bea4:	431a      	orrs	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	611a      	str	r2, [r3, #16]
 800beaa:	2300      	movs	r3, #0
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr
 800beb8:	ffc00000 	.word	0xffc00000

0800bebc <FMC_SDRAM_ProgramRefreshRate>:
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	695a      	ldr	r2, [r3, #20]
 800beca:	4b07      	ldr	r3, [pc, #28]	@ (800bee8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800becc:	4013      	ands	r3, r2
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	0052      	lsls	r2, r2, #1
 800bed2:	431a      	orrs	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	615a      	str	r2, [r3, #20]
 800bed8:	2300      	movs	r3, #0
 800beda:	4618      	mov	r0, r3
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	ffffc001 	.word	0xffffc001

0800beec <makeFreeRtosPriority>:
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	4603      	mov	r3, r0
 800bef4:	80fb      	strh	r3, [r7, #6]
 800bef6:	2300      	movs	r3, #0
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800befe:	2b84      	cmp	r3, #132	@ 0x84
 800bf00:	d005      	beq.n	800bf0e <makeFreeRtosPriority+0x22>
 800bf02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	4413      	add	r3, r2
 800bf0a:	3303      	adds	r3, #3
 800bf0c:	60fb      	str	r3, [r7, #12]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	4618      	mov	r0, r3
 800bf12:	3714      	adds	r7, #20
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <osKernelStart>:
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	f001 f86c 	bl	800cffc <vTaskStartScheduler>
 800bf24:	2300      	movs	r3, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <osThreadCreate>:
 800bf2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf2c:	b089      	sub	sp, #36	@ 0x24
 800bf2e:	af04      	add	r7, sp, #16
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	6039      	str	r1, [r7, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	695b      	ldr	r3, [r3, #20]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d020      	beq.n	800bf7e <osThreadCreate+0x54>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d01c      	beq.n	800bf7e <osThreadCreate+0x54>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685c      	ldr	r4, [r3, #4]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681d      	ldr	r5, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	691e      	ldr	r6, [r3, #16]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7ff ffc8 	bl	800beec <makeFreeRtosPriority>
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	695b      	ldr	r3, [r3, #20]
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	6992      	ldr	r2, [r2, #24]
 800bf66:	9202      	str	r2, [sp, #8]
 800bf68:	9301      	str	r3, [sp, #4]
 800bf6a:	9100      	str	r1, [sp, #0]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	4632      	mov	r2, r6
 800bf70:	4629      	mov	r1, r5
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fdcc 	bl	800cb10 <xTaskCreateStatic>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e01c      	b.n	800bfb8 <osThreadCreate+0x8e>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	685c      	ldr	r4, [r3, #4]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681d      	ldr	r5, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	b29e      	uxth	r6, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7ff ffaa 	bl	800beec <makeFreeRtosPriority>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	f107 030c 	add.w	r3, r7, #12
 800bf9e:	9301      	str	r3, [sp, #4]
 800bfa0:	9200      	str	r2, [sp, #0]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	4632      	mov	r2, r6
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	4620      	mov	r0, r4
 800bfaa:	f000 fe17 	bl	800cbdc <xTaskCreate>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d001      	beq.n	800bfb8 <osThreadCreate+0x8e>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	e000      	b.n	800bfba <osThreadCreate+0x90>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfc2 <osDelay>:
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b084      	sub	sp, #16
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	60fb      	str	r3, [r7, #12]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d001      	beq.n	800bfd8 <osDelay+0x16>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	e000      	b.n	800bfda <osDelay+0x18>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f000 ffd6 	bl	800cf8c <vTaskDelay>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <osMutexCreate>:
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d007      	beq.n	800c00a <osMutexCreate+0x20>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	4619      	mov	r1, r3
 800c000:	2001      	movs	r0, #1
 800c002:	f000 fa46 	bl	800c492 <xQueueCreateMutexStatic>
 800c006:	4603      	mov	r3, r0
 800c008:	e003      	b.n	800c012 <osMutexCreate+0x28>
 800c00a:	2001      	movs	r0, #1
 800c00c:	f000 fa29 	bl	800c462 <xQueueCreateMutex>
 800c010:	4603      	mov	r3, r0
 800c012:	4618      	mov	r0, r3
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}

0800c01a <vListInitialise>:
 800c01a:	b480      	push	{r7}
 800c01c:	b083      	sub	sp, #12
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f103 0208 	add.w	r2, r3, #8
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	605a      	str	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c032:	609a      	str	r2, [r3, #8]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f103 0208 	add.w	r2, r3, #8
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	60da      	str	r2, [r3, #12]
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f103 0208 	add.w	r2, r3, #8
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	611a      	str	r2, [r3, #16]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	bf00      	nop
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <vListInitialiseItem>:
 800c05a:	b480      	push	{r7}
 800c05c:	b083      	sub	sp, #12
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	611a      	str	r2, [r3, #16]
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <vListInsertEnd>:
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	605a      	str	r2, [r3, #4]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	689a      	ldr	r2, [r3, #8]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	609a      	str	r2, [r3, #8]
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	605a      	str	r2, [r3, #4]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	609a      	str	r2, [r3, #8]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	611a      	str	r2, [r3, #16]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	601a      	str	r2, [r3, #0]
 800c0b0:	bf00      	nop
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <vListInsert>:
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	60bb      	str	r3, [r7, #8]
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0d2:	d103      	bne.n	800c0dc <vListInsert+0x20>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	60fb      	str	r3, [r7, #12]
 800c0da:	e00c      	b.n	800c0f6 <vListInsert+0x3a>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	3308      	adds	r3, #8
 800c0e0:	60fb      	str	r3, [r7, #12]
 800c0e2:	e002      	b.n	800c0ea <vListInsert+0x2e>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d2f6      	bcs.n	800c0e4 <vListInsert+0x28>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	685a      	ldr	r2, [r3, #4]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	605a      	str	r2, [r3, #4]
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	609a      	str	r2, [r3, #8]
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	609a      	str	r2, [r3, #8]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	605a      	str	r2, [r3, #4]
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	611a      	str	r2, [r3, #16]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	bf00      	nop
 800c124:	3714      	adds	r7, #20
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <uxListRemove>:
 800c12e:	b480      	push	{r7}
 800c130:	b085      	sub	sp, #20
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	60fb      	str	r3, [r7, #12]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	6892      	ldr	r2, [r2, #8]
 800c144:	609a      	str	r2, [r3, #8]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	6852      	ldr	r2, [r2, #4]
 800c14e:	605a      	str	r2, [r3, #4]
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d103      	bne.n	800c162 <uxListRemove+0x34>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	689a      	ldr	r2, [r3, #8]
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	605a      	str	r2, [r3, #4]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	611a      	str	r2, [r3, #16]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	1e5a      	subs	r2, r3, #1
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	601a      	str	r2, [r3, #0]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
	...

0800c184 <xQueueGenericReset>:
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10d      	bne.n	800c1b4 <xQueueGenericReset+0x30>
 800c198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c19c:	b672      	cpsid	i
 800c19e:	f383 8811 	msr	BASEPRI, r3
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	f3bf 8f4f 	dsb	sy
 800c1aa:	b662      	cpsie	i
 800c1ac:	60bb      	str	r3, [r7, #8]
 800c1ae:	bf00      	nop
 800c1b0:	bf00      	nop
 800c1b2:	e7fd      	b.n	800c1b0 <xQueueGenericReset+0x2c>
 800c1b4:	f001 feba 	bl	800df2c <vPortEnterCritical>
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1c0:	68f9      	ldr	r1, [r7, #12]
 800c1c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1c4:	fb01 f303 	mul.w	r3, r1, r3
 800c1c8:	441a      	add	r2, r3
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	609a      	str	r2, [r3, #8]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	639a      	str	r2, [r3, #56]	@ 0x38
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	605a      	str	r2, [r3, #4]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	68f9      	ldr	r1, [r7, #12]
 800c1e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c1ea:	fb01 f303 	mul.w	r3, r1, r3
 800c1ee:	441a      	add	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	60da      	str	r2, [r3, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	22ff      	movs	r2, #255	@ 0xff
 800c1f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	22ff      	movs	r2, #255	@ 0xff
 800c200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d114      	bne.n	800c234 <xQueueGenericReset+0xb0>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d01a      	beq.n	800c248 <xQueueGenericReset+0xc4>
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3310      	adds	r3, #16
 800c216:	4618      	mov	r0, r3
 800c218:	f001 f966 	bl	800d4e8 <xTaskRemoveFromEventList>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d012      	beq.n	800c248 <xQueueGenericReset+0xc4>
 800c222:	4b0d      	ldr	r3, [pc, #52]	@ (800c258 <xQueueGenericReset+0xd4>)
 800c224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c228:	601a      	str	r2, [r3, #0]
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	e009      	b.n	800c248 <xQueueGenericReset+0xc4>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	3310      	adds	r3, #16
 800c238:	4618      	mov	r0, r3
 800c23a:	f7ff feee 	bl	800c01a <vListInitialise>
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	3324      	adds	r3, #36	@ 0x24
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff fee9 	bl	800c01a <vListInitialise>
 800c248:	f001 fea6 	bl	800df98 <vPortExitCritical>
 800c24c:	2301      	movs	r3, #1
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	e000ed04 	.word	0xe000ed04

0800c25c <xQueueGenericCreateStatic>:
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b08e      	sub	sp, #56	@ 0x38
 800c260:	af02      	add	r7, sp, #8
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	607a      	str	r2, [r7, #4]
 800c268:	603b      	str	r3, [r7, #0]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10d      	bne.n	800c28c <xQueueGenericCreateStatic+0x30>
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	b672      	cpsid	i
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	b662      	cpsie	i
 800c284:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c286:	bf00      	nop
 800c288:	bf00      	nop
 800c28a:	e7fd      	b.n	800c288 <xQueueGenericCreateStatic+0x2c>
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10d      	bne.n	800c2ae <xQueueGenericCreateStatic+0x52>
 800c292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c296:	b672      	cpsid	i
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	b662      	cpsie	i
 800c2a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2a8:	bf00      	nop
 800c2aa:	bf00      	nop
 800c2ac:	e7fd      	b.n	800c2aa <xQueueGenericCreateStatic+0x4e>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <xQueueGenericCreateStatic+0x5e>
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d001      	beq.n	800c2be <xQueueGenericCreateStatic+0x62>
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e000      	b.n	800c2c0 <xQueueGenericCreateStatic+0x64>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d10d      	bne.n	800c2e0 <xQueueGenericCreateStatic+0x84>
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	b672      	cpsid	i
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	b662      	cpsie	i
 800c2d8:	623b      	str	r3, [r7, #32]
 800c2da:	bf00      	nop
 800c2dc:	bf00      	nop
 800c2de:	e7fd      	b.n	800c2dc <xQueueGenericCreateStatic+0x80>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d102      	bne.n	800c2ec <xQueueGenericCreateStatic+0x90>
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d101      	bne.n	800c2f0 <xQueueGenericCreateStatic+0x94>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e000      	b.n	800c2f2 <xQueueGenericCreateStatic+0x96>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10d      	bne.n	800c312 <xQueueGenericCreateStatic+0xb6>
 800c2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fa:	b672      	cpsid	i
 800c2fc:	f383 8811 	msr	BASEPRI, r3
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	b662      	cpsie	i
 800c30a:	61fb      	str	r3, [r7, #28]
 800c30c:	bf00      	nop
 800c30e:	bf00      	nop
 800c310:	e7fd      	b.n	800c30e <xQueueGenericCreateStatic+0xb2>
 800c312:	2348      	movs	r3, #72	@ 0x48
 800c314:	617b      	str	r3, [r7, #20]
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2b48      	cmp	r3, #72	@ 0x48
 800c31a:	d00d      	beq.n	800c338 <xQueueGenericCreateStatic+0xdc>
 800c31c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c320:	b672      	cpsid	i
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	b662      	cpsie	i
 800c330:	61bb      	str	r3, [r7, #24]
 800c332:	bf00      	nop
 800c334:	bf00      	nop
 800c336:	e7fd      	b.n	800c334 <xQueueGenericCreateStatic+0xd8>
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00d      	beq.n	800c360 <xQueueGenericCreateStatic+0x104>
 800c344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c34c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c352:	9300      	str	r3, [sp, #0]
 800c354:	4613      	mov	r3, r2
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	68b9      	ldr	r1, [r7, #8]
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f848 	bl	800c3f0 <prvInitialiseNewQueue>
 800c360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c362:	4618      	mov	r0, r3
 800c364:	3730      	adds	r7, #48	@ 0x30
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <xQueueGenericCreate>:
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b08a      	sub	sp, #40	@ 0x28
 800c36e:	af02      	add	r7, sp, #8
 800c370:	60f8      	str	r0, [r7, #12]
 800c372:	60b9      	str	r1, [r7, #8]
 800c374:	4613      	mov	r3, r2
 800c376:	71fb      	strb	r3, [r7, #7]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10d      	bne.n	800c39a <xQueueGenericCreate+0x30>
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	b672      	cpsid	i
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	b662      	cpsie	i
 800c392:	613b      	str	r3, [r7, #16]
 800c394:	bf00      	nop
 800c396:	bf00      	nop
 800c398:	e7fd      	b.n	800c396 <xQueueGenericCreate+0x2c>
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d102      	bne.n	800c3a6 <xQueueGenericCreate+0x3c>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	61fb      	str	r3, [r7, #28]
 800c3a4:	e004      	b.n	800c3b0 <xQueueGenericCreate+0x46>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	fb02 f303 	mul.w	r3, r2, r3
 800c3ae:	61fb      	str	r3, [r7, #28]
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	3348      	adds	r3, #72	@ 0x48
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f001 fea1 	bl	800e0fc <pvPortMalloc>
 800c3ba:	61b8      	str	r0, [r7, #24]
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d011      	beq.n	800c3e6 <xQueueGenericCreate+0x7c>
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	617b      	str	r3, [r7, #20]
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	3348      	adds	r3, #72	@ 0x48
 800c3ca:	617b      	str	r3, [r7, #20]
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c3d4:	79fa      	ldrb	r2, [r7, #7]
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	4613      	mov	r3, r2
 800c3dc:	697a      	ldr	r2, [r7, #20]
 800c3de:	68b9      	ldr	r1, [r7, #8]
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f000 f805 	bl	800c3f0 <prvInitialiseNewQueue>
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3720      	adds	r7, #32
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <prvInitialiseNewQueue>:
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	70fb      	strb	r3, [r7, #3]
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <prvInitialiseNewQueue+0x1c>
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	69ba      	ldr	r2, [r7, #24]
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	e002      	b.n	800c412 <prvInitialiseNewQueue+0x22>
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	601a      	str	r2, [r3, #0]
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	63da      	str	r2, [r3, #60]	@ 0x3c
 800c418:	69bb      	ldr	r3, [r7, #24]
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	641a      	str	r2, [r3, #64]	@ 0x40
 800c41e:	2101      	movs	r1, #1
 800c420:	69b8      	ldr	r0, [r7, #24]
 800c422:	f7ff feaf 	bl	800c184 <xQueueGenericReset>
 800c426:	bf00      	nop
 800c428:	3710      	adds	r7, #16
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}

0800c42e <prvInitialiseMutex>:
 800c42e:	b580      	push	{r7, lr}
 800c430:	b082      	sub	sp, #8
 800c432:	af00      	add	r7, sp, #0
 800c434:	6078      	str	r0, [r7, #4]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d00e      	beq.n	800c45a <prvInitialiseMutex+0x2c>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	609a      	str	r2, [r3, #8]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	601a      	str	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	60da      	str	r2, [r3, #12]
 800c44e:	2300      	movs	r3, #0
 800c450:	2200      	movs	r2, #0
 800c452:	2100      	movs	r1, #0
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 f837 	bl	800c4c8 <xQueueGenericSend>
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <xQueueCreateMutex>:
 800c462:	b580      	push	{r7, lr}
 800c464:	b086      	sub	sp, #24
 800c466:	af00      	add	r7, sp, #0
 800c468:	4603      	mov	r3, r0
 800c46a:	71fb      	strb	r3, [r7, #7]
 800c46c:	2301      	movs	r3, #1
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	2300      	movs	r3, #0
 800c472:	613b      	str	r3, [r7, #16]
 800c474:	79fb      	ldrb	r3, [r7, #7]
 800c476:	461a      	mov	r2, r3
 800c478:	6939      	ldr	r1, [r7, #16]
 800c47a:	6978      	ldr	r0, [r7, #20]
 800c47c:	f7ff ff75 	bl	800c36a <xQueueGenericCreate>
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	68f8      	ldr	r0, [r7, #12]
 800c484:	f7ff ffd3 	bl	800c42e <prvInitialiseMutex>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	4618      	mov	r0, r3
 800c48c:	3718      	adds	r7, #24
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <xQueueCreateMutexStatic>:
 800c492:	b580      	push	{r7, lr}
 800c494:	b088      	sub	sp, #32
 800c496:	af02      	add	r7, sp, #8
 800c498:	4603      	mov	r3, r0
 800c49a:	6039      	str	r1, [r7, #0]
 800c49c:	71fb      	strb	r3, [r7, #7]
 800c49e:	2301      	movs	r3, #1
 800c4a0:	617b      	str	r3, [r7, #20]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	613b      	str	r3, [r7, #16]
 800c4a6:	79fb      	ldrb	r3, [r7, #7]
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	6939      	ldr	r1, [r7, #16]
 800c4b0:	6978      	ldr	r0, [r7, #20]
 800c4b2:	f7ff fed3 	bl	800c25c <xQueueGenericCreateStatic>
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f7ff ffb8 	bl	800c42e <prvInitialiseMutex>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3718      	adds	r7, #24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <xQueueGenericSend>:
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b08e      	sub	sp, #56	@ 0x38
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10d      	bne.n	800c500 <xQueueGenericSend+0x38>
 800c4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e8:	b672      	cpsid	i
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	b662      	cpsie	i
 800c4f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4fa:	bf00      	nop
 800c4fc:	bf00      	nop
 800c4fe:	e7fd      	b.n	800c4fc <xQueueGenericSend+0x34>
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d103      	bne.n	800c50e <xQueueGenericSend+0x46>
 800c506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <xQueueGenericSend+0x4a>
 800c50e:	2301      	movs	r3, #1
 800c510:	e000      	b.n	800c514 <xQueueGenericSend+0x4c>
 800c512:	2300      	movs	r3, #0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10d      	bne.n	800c534 <xQueueGenericSend+0x6c>
 800c518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51c:	b672      	cpsid	i
 800c51e:	f383 8811 	msr	BASEPRI, r3
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	b662      	cpsie	i
 800c52c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c52e:	bf00      	nop
 800c530:	bf00      	nop
 800c532:	e7fd      	b.n	800c530 <xQueueGenericSend+0x68>
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	2b02      	cmp	r3, #2
 800c538:	d103      	bne.n	800c542 <xQueueGenericSend+0x7a>
 800c53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d101      	bne.n	800c546 <xQueueGenericSend+0x7e>
 800c542:	2301      	movs	r3, #1
 800c544:	e000      	b.n	800c548 <xQueueGenericSend+0x80>
 800c546:	2300      	movs	r3, #0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10d      	bne.n	800c568 <xQueueGenericSend+0xa0>
 800c54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c550:	b672      	cpsid	i
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	b662      	cpsie	i
 800c560:	623b      	str	r3, [r7, #32]
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	e7fd      	b.n	800c564 <xQueueGenericSend+0x9c>
 800c568:	f001 f98c 	bl	800d884 <xTaskGetSchedulerState>
 800c56c:	4603      	mov	r3, r0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d102      	bne.n	800c578 <xQueueGenericSend+0xb0>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d101      	bne.n	800c57c <xQueueGenericSend+0xb4>
 800c578:	2301      	movs	r3, #1
 800c57a:	e000      	b.n	800c57e <xQueueGenericSend+0xb6>
 800c57c:	2300      	movs	r3, #0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10d      	bne.n	800c59e <xQueueGenericSend+0xd6>
 800c582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c586:	b672      	cpsid	i
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	b662      	cpsie	i
 800c596:	61fb      	str	r3, [r7, #28]
 800c598:	bf00      	nop
 800c59a:	bf00      	nop
 800c59c:	e7fd      	b.n	800c59a <xQueueGenericSend+0xd2>
 800c59e:	f001 fcc5 	bl	800df2c <vPortEnterCritical>
 800c5a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5aa:	429a      	cmp	r2, r3
 800c5ac:	d302      	bcc.n	800c5b4 <xQueueGenericSend+0xec>
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d129      	bne.n	800c608 <xQueueGenericSend+0x140>
 800c5b4:	683a      	ldr	r2, [r7, #0]
 800c5b6:	68b9      	ldr	r1, [r7, #8]
 800c5b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5ba:	f000 f9bf 	bl	800c93c <prvCopyDataToQueue>
 800c5be:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d010      	beq.n	800c5ea <xQueueGenericSend+0x122>
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ca:	3324      	adds	r3, #36	@ 0x24
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 ff8b 	bl	800d4e8 <xTaskRemoveFromEventList>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d013      	beq.n	800c600 <xQueueGenericSend+0x138>
 800c5d8:	4b3f      	ldr	r3, [pc, #252]	@ (800c6d8 <xQueueGenericSend+0x210>)
 800c5da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5de:	601a      	str	r2, [r3, #0]
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	e00a      	b.n	800c600 <xQueueGenericSend+0x138>
 800c5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d007      	beq.n	800c600 <xQueueGenericSend+0x138>
 800c5f0:	4b39      	ldr	r3, [pc, #228]	@ (800c6d8 <xQueueGenericSend+0x210>)
 800c5f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5f6:	601a      	str	r2, [r3, #0]
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f001 fcca 	bl	800df98 <vPortExitCritical>
 800c604:	2301      	movs	r3, #1
 800c606:	e063      	b.n	800c6d0 <xQueueGenericSend+0x208>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d103      	bne.n	800c616 <xQueueGenericSend+0x14e>
 800c60e:	f001 fcc3 	bl	800df98 <vPortExitCritical>
 800c612:	2300      	movs	r3, #0
 800c614:	e05c      	b.n	800c6d0 <xQueueGenericSend+0x208>
 800c616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d106      	bne.n	800c62a <xQueueGenericSend+0x162>
 800c61c:	f107 0314 	add.w	r3, r7, #20
 800c620:	4618      	mov	r0, r3
 800c622:	f000 ffc7 	bl	800d5b4 <vTaskInternalSetTimeOutState>
 800c626:	2301      	movs	r3, #1
 800c628:	637b      	str	r3, [r7, #52]	@ 0x34
 800c62a:	f001 fcb5 	bl	800df98 <vPortExitCritical>
 800c62e:	f000 fd53 	bl	800d0d8 <vTaskSuspendAll>
 800c632:	f001 fc7b 	bl	800df2c <vPortEnterCritical>
 800c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c638:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c63c:	b25b      	sxtb	r3, r3
 800c63e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c642:	d103      	bne.n	800c64c <xQueueGenericSend+0x184>
 800c644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c646:	2200      	movs	r2, #0
 800c648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c652:	b25b      	sxtb	r3, r3
 800c654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c658:	d103      	bne.n	800c662 <xQueueGenericSend+0x19a>
 800c65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c662:	f001 fc99 	bl	800df98 <vPortExitCritical>
 800c666:	1d3a      	adds	r2, r7, #4
 800c668:	f107 0314 	add.w	r3, r7, #20
 800c66c:	4611      	mov	r1, r2
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 ffb6 	bl	800d5e0 <xTaskCheckForTimeOut>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d124      	bne.n	800c6c4 <xQueueGenericSend+0x1fc>
 800c67a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c67c:	f000 fa30 	bl	800cae0 <prvIsQueueFull>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d018      	beq.n	800c6b8 <xQueueGenericSend+0x1f0>
 800c686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c688:	3310      	adds	r3, #16
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	4611      	mov	r1, r2
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 ff02 	bl	800d498 <vTaskPlaceOnEventList>
 800c694:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c696:	f000 f9bb 	bl	800ca10 <prvUnlockQueue>
 800c69a:	f000 fd2b 	bl	800d0f4 <xTaskResumeAll>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f47f af7c 	bne.w	800c59e <xQueueGenericSend+0xd6>
 800c6a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c6d8 <xQueueGenericSend+0x210>)
 800c6a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	f3bf 8f4f 	dsb	sy
 800c6b2:	f3bf 8f6f 	isb	sy
 800c6b6:	e772      	b.n	800c59e <xQueueGenericSend+0xd6>
 800c6b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6ba:	f000 f9a9 	bl	800ca10 <prvUnlockQueue>
 800c6be:	f000 fd19 	bl	800d0f4 <xTaskResumeAll>
 800c6c2:	e76c      	b.n	800c59e <xQueueGenericSend+0xd6>
 800c6c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6c6:	f000 f9a3 	bl	800ca10 <prvUnlockQueue>
 800c6ca:	f000 fd13 	bl	800d0f4 <xTaskResumeAll>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3738      	adds	r7, #56	@ 0x38
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <xQueueSemaphoreTake>:
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08e      	sub	sp, #56	@ 0x38
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	6039      	str	r1, [r7, #0]
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10d      	bne.n	800c714 <xQueueSemaphoreTake+0x38>
 800c6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fc:	b672      	cpsid	i
 800c6fe:	f383 8811 	msr	BASEPRI, r3
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	b662      	cpsie	i
 800c70c:	623b      	str	r3, [r7, #32]
 800c70e:	bf00      	nop
 800c710:	bf00      	nop
 800c712:	e7fd      	b.n	800c710 <xQueueSemaphoreTake+0x34>
 800c714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00d      	beq.n	800c738 <xQueueSemaphoreTake+0x5c>
 800c71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c720:	b672      	cpsid	i
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	b662      	cpsie	i
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	bf00      	nop
 800c734:	bf00      	nop
 800c736:	e7fd      	b.n	800c734 <xQueueSemaphoreTake+0x58>
 800c738:	f001 f8a4 	bl	800d884 <xTaskGetSchedulerState>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d102      	bne.n	800c748 <xQueueSemaphoreTake+0x6c>
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <xQueueSemaphoreTake+0x70>
 800c748:	2301      	movs	r3, #1
 800c74a:	e000      	b.n	800c74e <xQueueSemaphoreTake+0x72>
 800c74c:	2300      	movs	r3, #0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d10d      	bne.n	800c76e <xQueueSemaphoreTake+0x92>
 800c752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c756:	b672      	cpsid	i
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	b662      	cpsie	i
 800c766:	61bb      	str	r3, [r7, #24]
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	e7fd      	b.n	800c76a <xQueueSemaphoreTake+0x8e>
 800c76e:	f001 fbdd 	bl	800df2c <vPortEnterCritical>
 800c772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c776:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d024      	beq.n	800c7c8 <xQueueSemaphoreTake+0xec>
 800c77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c780:	1e5a      	subs	r2, r3, #1
 800c782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c784:	639a      	str	r2, [r3, #56]	@ 0x38
 800c786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d104      	bne.n	800c798 <xQueueSemaphoreTake+0xbc>
 800c78e:	f001 fa43 	bl	800dc18 <pvTaskIncrementMutexHeldCount>
 800c792:	4602      	mov	r2, r0
 800c794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c796:	609a      	str	r2, [r3, #8]
 800c798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d00f      	beq.n	800c7c0 <xQueueSemaphoreTake+0xe4>
 800c7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a2:	3310      	adds	r3, #16
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 fe9f 	bl	800d4e8 <xTaskRemoveFromEventList>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d007      	beq.n	800c7c0 <xQueueSemaphoreTake+0xe4>
 800c7b0:	4b55      	ldr	r3, [pc, #340]	@ (800c908 <xQueueSemaphoreTake+0x22c>)
 800c7b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	f3bf 8f6f 	isb	sy
 800c7c0:	f001 fbea 	bl	800df98 <vPortExitCritical>
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e09a      	b.n	800c8fe <xQueueSemaphoreTake+0x222>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d114      	bne.n	800c7f8 <xQueueSemaphoreTake+0x11c>
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00d      	beq.n	800c7f0 <xQueueSemaphoreTake+0x114>
 800c7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d8:	b672      	cpsid	i
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	b662      	cpsie	i
 800c7e8:	617b      	str	r3, [r7, #20]
 800c7ea:	bf00      	nop
 800c7ec:	bf00      	nop
 800c7ee:	e7fd      	b.n	800c7ec <xQueueSemaphoreTake+0x110>
 800c7f0:	f001 fbd2 	bl	800df98 <vPortExitCritical>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	e082      	b.n	800c8fe <xQueueSemaphoreTake+0x222>
 800c7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d106      	bne.n	800c80c <xQueueSemaphoreTake+0x130>
 800c7fe:	f107 030c 	add.w	r3, r7, #12
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fed6 	bl	800d5b4 <vTaskInternalSetTimeOutState>
 800c808:	2301      	movs	r3, #1
 800c80a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c80c:	f001 fbc4 	bl	800df98 <vPortExitCritical>
 800c810:	f000 fc62 	bl	800d0d8 <vTaskSuspendAll>
 800c814:	f001 fb8a 	bl	800df2c <vPortEnterCritical>
 800c818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c81e:	b25b      	sxtb	r3, r3
 800c820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c824:	d103      	bne.n	800c82e <xQueueSemaphoreTake+0x152>
 800c826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c830:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c834:	b25b      	sxtb	r3, r3
 800c836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c83a:	d103      	bne.n	800c844 <xQueueSemaphoreTake+0x168>
 800c83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c844:	f001 fba8 	bl	800df98 <vPortExitCritical>
 800c848:	463a      	mov	r2, r7
 800c84a:	f107 030c 	add.w	r3, r7, #12
 800c84e:	4611      	mov	r1, r2
 800c850:	4618      	mov	r0, r3
 800c852:	f000 fec5 	bl	800d5e0 <xTaskCheckForTimeOut>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d132      	bne.n	800c8c2 <xQueueSemaphoreTake+0x1e6>
 800c85c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c85e:	f000 f929 	bl	800cab4 <prvIsQueueEmpty>
 800c862:	4603      	mov	r3, r0
 800c864:	2b00      	cmp	r3, #0
 800c866:	d026      	beq.n	800c8b6 <xQueueSemaphoreTake+0x1da>
 800c868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d109      	bne.n	800c884 <xQueueSemaphoreTake+0x1a8>
 800c870:	f001 fb5c 	bl	800df2c <vPortEnterCritical>
 800c874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c876:	689b      	ldr	r3, [r3, #8]
 800c878:	4618      	mov	r0, r3
 800c87a:	f001 f821 	bl	800d8c0 <xTaskPriorityInherit>
 800c87e:	6338      	str	r0, [r7, #48]	@ 0x30
 800c880:	f001 fb8a 	bl	800df98 <vPortExitCritical>
 800c884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c886:	3324      	adds	r3, #36	@ 0x24
 800c888:	683a      	ldr	r2, [r7, #0]
 800c88a:	4611      	mov	r1, r2
 800c88c:	4618      	mov	r0, r3
 800c88e:	f000 fe03 	bl	800d498 <vTaskPlaceOnEventList>
 800c892:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c894:	f000 f8bc 	bl	800ca10 <prvUnlockQueue>
 800c898:	f000 fc2c 	bl	800d0f4 <xTaskResumeAll>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	f47f af65 	bne.w	800c76e <xQueueSemaphoreTake+0x92>
 800c8a4:	4b18      	ldr	r3, [pc, #96]	@ (800c908 <xQueueSemaphoreTake+0x22c>)
 800c8a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8aa:	601a      	str	r2, [r3, #0]
 800c8ac:	f3bf 8f4f 	dsb	sy
 800c8b0:	f3bf 8f6f 	isb	sy
 800c8b4:	e75b      	b.n	800c76e <xQueueSemaphoreTake+0x92>
 800c8b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8b8:	f000 f8aa 	bl	800ca10 <prvUnlockQueue>
 800c8bc:	f000 fc1a 	bl	800d0f4 <xTaskResumeAll>
 800c8c0:	e755      	b.n	800c76e <xQueueSemaphoreTake+0x92>
 800c8c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8c4:	f000 f8a4 	bl	800ca10 <prvUnlockQueue>
 800c8c8:	f000 fc14 	bl	800d0f4 <xTaskResumeAll>
 800c8cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8ce:	f000 f8f1 	bl	800cab4 <prvIsQueueEmpty>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f43f af4a 	beq.w	800c76e <xQueueSemaphoreTake+0x92>
 800c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00d      	beq.n	800c8fc <xQueueSemaphoreTake+0x220>
 800c8e0:	f001 fb24 	bl	800df2c <vPortEnterCritical>
 800c8e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8e6:	f000 f811 	bl	800c90c <prvGetDisinheritPriorityAfterTimeout>
 800c8ea:	6278      	str	r0, [r7, #36]	@ 0x24
 800c8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ee:	689b      	ldr	r3, [r3, #8]
 800c8f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f001 f8f0 	bl	800dad8 <vTaskPriorityDisinheritAfterTimeout>
 800c8f8:	f001 fb4e 	bl	800df98 <vPortExitCritical>
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	4618      	mov	r0, r3
 800c900:	3738      	adds	r7, #56	@ 0x38
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <prvGetDisinheritPriorityAfterTimeout>:
 800c90c:	b480      	push	{r7}
 800c90e:	b085      	sub	sp, #20
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d006      	beq.n	800c92a <prvGetDisinheritPriorityAfterTimeout+0x1e>
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f1c3 0307 	rsb	r3, r3, #7
 800c926:	60fb      	str	r3, [r7, #12]
 800c928:	e001      	b.n	800c92e <prvGetDisinheritPriorityAfterTimeout+0x22>
 800c92a:	2300      	movs	r3, #0
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <prvCopyDataToQueue>:
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	2300      	movs	r3, #0
 800c94a:	617b      	str	r3, [r7, #20]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c950:	613b      	str	r3, [r7, #16]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c956:	2b00      	cmp	r3, #0
 800c958:	d10d      	bne.n	800c976 <prvCopyDataToQueue+0x3a>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d14d      	bne.n	800c9fe <prvCopyDataToQueue+0xc2>
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	689b      	ldr	r3, [r3, #8]
 800c966:	4618      	mov	r0, r3
 800c968:	f001 f82a 	bl	800d9c0 <xTaskPriorityDisinherit>
 800c96c:	6178      	str	r0, [r7, #20]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	609a      	str	r2, [r3, #8]
 800c974:	e043      	b.n	800c9fe <prvCopyDataToQueue+0xc2>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d119      	bne.n	800c9b0 <prvCopyDataToQueue+0x74>
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6858      	ldr	r0, [r3, #4]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c984:	461a      	mov	r2, r3
 800c986:	68b9      	ldr	r1, [r7, #8]
 800c988:	f001 ffd7 	bl	800e93a <memcpy>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	685a      	ldr	r2, [r3, #4]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c994:	441a      	add	r2, r3
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	605a      	str	r2, [r3, #4]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685a      	ldr	r2, [r3, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d32b      	bcc.n	800c9fe <prvCopyDataToQueue+0xc2>
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681a      	ldr	r2, [r3, #0]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	605a      	str	r2, [r3, #4]
 800c9ae:	e026      	b.n	800c9fe <prvCopyDataToQueue+0xc2>
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	68d8      	ldr	r0, [r3, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	68b9      	ldr	r1, [r7, #8]
 800c9bc:	f001 ffbd 	bl	800e93a <memcpy>
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	68da      	ldr	r2, [r3, #12]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9c8:	425b      	negs	r3, r3
 800c9ca:	441a      	add	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	60da      	str	r2, [r3, #12]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68da      	ldr	r2, [r3, #12]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d207      	bcs.n	800c9ec <prvCopyDataToQueue+0xb0>
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	689a      	ldr	r2, [r3, #8]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e4:	425b      	negs	r3, r3
 800c9e6:	441a      	add	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	60da      	str	r2, [r3, #12]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d105      	bne.n	800c9fe <prvCopyDataToQueue+0xc2>
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <prvCopyDataToQueue+0xc2>
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	613b      	str	r3, [r7, #16]
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	639a      	str	r2, [r3, #56]	@ 0x38
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <prvUnlockQueue>:
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	f001 fa88 	bl	800df2c <vPortEnterCritical>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca22:	73fb      	strb	r3, [r7, #15]
 800ca24:	e011      	b.n	800ca4a <prvUnlockQueue+0x3a>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d012      	beq.n	800ca54 <prvUnlockQueue+0x44>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	3324      	adds	r3, #36	@ 0x24
 800ca32:	4618      	mov	r0, r3
 800ca34:	f000 fd58 	bl	800d4e8 <xTaskRemoveFromEventList>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d001      	beq.n	800ca42 <prvUnlockQueue+0x32>
 800ca3e:	f000 fe37 	bl	800d6b0 <vTaskMissedYield>
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	73fb      	strb	r3, [r7, #15]
 800ca4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	dce9      	bgt.n	800ca26 <prvUnlockQueue+0x16>
 800ca52:	e000      	b.n	800ca56 <prvUnlockQueue+0x46>
 800ca54:	bf00      	nop
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	22ff      	movs	r2, #255	@ 0xff
 800ca5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ca5e:	f001 fa9b 	bl	800df98 <vPortExitCritical>
 800ca62:	f001 fa63 	bl	800df2c <vPortEnterCritical>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ca6c:	73bb      	strb	r3, [r7, #14]
 800ca6e:	e011      	b.n	800ca94 <prvUnlockQueue+0x84>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	691b      	ldr	r3, [r3, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d012      	beq.n	800ca9e <prvUnlockQueue+0x8e>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	3310      	adds	r3, #16
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f000 fd33 	bl	800d4e8 <xTaskRemoveFromEventList>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <prvUnlockQueue+0x7c>
 800ca88:	f000 fe12 	bl	800d6b0 <vTaskMissedYield>
 800ca8c:	7bbb      	ldrb	r3, [r7, #14]
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	73bb      	strb	r3, [r7, #14]
 800ca94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	dce9      	bgt.n	800ca70 <prvUnlockQueue+0x60>
 800ca9c:	e000      	b.n	800caa0 <prvUnlockQueue+0x90>
 800ca9e:	bf00      	nop
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	22ff      	movs	r2, #255	@ 0xff
 800caa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800caa8:	f001 fa76 	bl	800df98 <vPortExitCritical>
 800caac:	bf00      	nop
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <prvIsQueueEmpty>:
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	f001 fa36 	bl	800df2c <vPortEnterCritical>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d102      	bne.n	800cace <prvIsQueueEmpty+0x1a>
 800cac8:	2301      	movs	r3, #1
 800caca:	60fb      	str	r3, [r7, #12]
 800cacc:	e001      	b.n	800cad2 <prvIsQueueEmpty+0x1e>
 800cace:	2300      	movs	r3, #0
 800cad0:	60fb      	str	r3, [r7, #12]
 800cad2:	f001 fa61 	bl	800df98 <vPortExitCritical>
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <prvIsQueueFull>:
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	f001 fa20 	bl	800df2c <vPortEnterCritical>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d102      	bne.n	800cafe <prvIsQueueFull+0x1e>
 800caf8:	2301      	movs	r3, #1
 800cafa:	60fb      	str	r3, [r7, #12]
 800cafc:	e001      	b.n	800cb02 <prvIsQueueFull+0x22>
 800cafe:	2300      	movs	r3, #0
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	f001 fa49 	bl	800df98 <vPortExitCritical>
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3710      	adds	r7, #16
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <xTaskCreateStatic>:
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08e      	sub	sp, #56	@ 0x38
 800cb14:	af04      	add	r7, sp, #16
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	603b      	str	r3, [r7, #0]
 800cb1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10d      	bne.n	800cb40 <xTaskCreateStatic+0x30>
 800cb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb28:	b672      	cpsid	i
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	b662      	cpsie	i
 800cb38:	623b      	str	r3, [r7, #32]
 800cb3a:	bf00      	nop
 800cb3c:	bf00      	nop
 800cb3e:	e7fd      	b.n	800cb3c <xTaskCreateStatic+0x2c>
 800cb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10d      	bne.n	800cb62 <xTaskCreateStatic+0x52>
 800cb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4a:	b672      	cpsid	i
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	b662      	cpsie	i
 800cb5a:	61fb      	str	r3, [r7, #28]
 800cb5c:	bf00      	nop
 800cb5e:	bf00      	nop
 800cb60:	e7fd      	b.n	800cb5e <xTaskCreateStatic+0x4e>
 800cb62:	23a0      	movs	r3, #160	@ 0xa0
 800cb64:	613b      	str	r3, [r7, #16]
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	2ba0      	cmp	r3, #160	@ 0xa0
 800cb6a:	d00d      	beq.n	800cb88 <xTaskCreateStatic+0x78>
 800cb6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb70:	b672      	cpsid	i
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	b662      	cpsie	i
 800cb80:	61bb      	str	r3, [r7, #24]
 800cb82:	bf00      	nop
 800cb84:	bf00      	nop
 800cb86:	e7fd      	b.n	800cb84 <xTaskCreateStatic+0x74>
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d01e      	beq.n	800cbce <xTaskCreateStatic+0xbe>
 800cb90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d01b      	beq.n	800cbce <xTaskCreateStatic+0xbe>
 800cb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb98:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb9e:	631a      	str	r2, [r3, #48]	@ 0x30
 800cba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba2:	2202      	movs	r2, #2
 800cba4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 800cba8:	2300      	movs	r3, #0
 800cbaa:	9303      	str	r3, [sp, #12]
 800cbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbae:	9302      	str	r3, [sp, #8]
 800cbb0:	f107 0314 	add.w	r3, r7, #20
 800cbb4:	9301      	str	r3, [sp, #4]
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	68b9      	ldr	r1, [r7, #8]
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f000 f851 	bl	800cc68 <prvInitialiseNewTask>
 800cbc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cbc8:	f000 f8f0 	bl	800cdac <prvAddNewTaskToReadyList>
 800cbcc:	e001      	b.n	800cbd2 <xTaskCreateStatic+0xc2>
 800cbce:	2300      	movs	r3, #0
 800cbd0:	617b      	str	r3, [r7, #20]
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3728      	adds	r7, #40	@ 0x28
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <xTaskCreate>:
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08c      	sub	sp, #48	@ 0x30
 800cbe0:	af04      	add	r7, sp, #16
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	603b      	str	r3, [r7, #0]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	80fb      	strh	r3, [r7, #6]
 800cbec:	88fb      	ldrh	r3, [r7, #6]
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 fa83 	bl	800e0fc <pvPortMalloc>
 800cbf6:	6178      	str	r0, [r7, #20]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d00e      	beq.n	800cc1c <xTaskCreate+0x40>
 800cbfe:	20a0      	movs	r0, #160	@ 0xa0
 800cc00:	f001 fa7c 	bl	800e0fc <pvPortMalloc>
 800cc04:	61f8      	str	r0, [r7, #28]
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d003      	beq.n	800cc14 <xTaskCreate+0x38>
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	631a      	str	r2, [r3, #48]	@ 0x30
 800cc12:	e005      	b.n	800cc20 <xTaskCreate+0x44>
 800cc14:	6978      	ldr	r0, [r7, #20]
 800cc16:	f001 fb3f 	bl	800e298 <vPortFree>
 800cc1a:	e001      	b.n	800cc20 <xTaskCreate+0x44>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	61fb      	str	r3, [r7, #28]
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d017      	beq.n	800cc56 <xTaskCreate+0x7a>
 800cc26:	69fb      	ldr	r3, [r7, #28]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 800cc2e:	88fa      	ldrh	r2, [r7, #6]
 800cc30:	2300      	movs	r3, #0
 800cc32:	9303      	str	r3, [sp, #12]
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	9302      	str	r3, [sp, #8]
 800cc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3a:	9301      	str	r3, [sp, #4]
 800cc3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	68b9      	ldr	r1, [r7, #8]
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 f80f 	bl	800cc68 <prvInitialiseNewTask>
 800cc4a:	69f8      	ldr	r0, [r7, #28]
 800cc4c:	f000 f8ae 	bl	800cdac <prvAddNewTaskToReadyList>
 800cc50:	2301      	movs	r3, #1
 800cc52:	61bb      	str	r3, [r7, #24]
 800cc54:	e002      	b.n	800cc5c <xTaskCreate+0x80>
 800cc56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cc5a:	61bb      	str	r3, [r7, #24]
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3720      	adds	r7, #32
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
	...

0800cc68 <prvInitialiseNewTask>:
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
 800cc76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cc7a:	6879      	ldr	r1, [r7, #4]
 800cc7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cc80:	440b      	add	r3, r1
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	4413      	add	r3, r2
 800cc86:	61bb      	str	r3, [r7, #24]
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	f023 0307 	bic.w	r3, r3, #7
 800cc8e:	61bb      	str	r3, [r7, #24]
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	f003 0307 	and.w	r3, r3, #7
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00d      	beq.n	800ccb6 <prvInitialiseNewTask+0x4e>
 800cc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc9e:	b672      	cpsid	i
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	b662      	cpsie	i
 800ccae:	617b      	str	r3, [r7, #20]
 800ccb0:	bf00      	nop
 800ccb2:	bf00      	nop
 800ccb4:	e7fd      	b.n	800ccb2 <prvInitialiseNewTask+0x4a>
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d01f      	beq.n	800ccfc <prvInitialiseNewTask+0x94>
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	61fb      	str	r3, [r7, #28]
 800ccc0:	e012      	b.n	800cce8 <prvInitialiseNewTask+0x80>
 800ccc2:	68ba      	ldr	r2, [r7, #8]
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	7819      	ldrb	r1, [r3, #0]
 800ccca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	4413      	add	r3, r2
 800ccd0:	3334      	adds	r3, #52	@ 0x34
 800ccd2:	460a      	mov	r2, r1
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	68ba      	ldr	r2, [r7, #8]
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	4413      	add	r3, r2
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d006      	beq.n	800ccf0 <prvInitialiseNewTask+0x88>
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	3301      	adds	r3, #1
 800cce6:	61fb      	str	r3, [r7, #28]
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	2b0f      	cmp	r3, #15
 800ccec:	d9e9      	bls.n	800ccc2 <prvInitialiseNewTask+0x5a>
 800ccee:	e000      	b.n	800ccf2 <prvInitialiseNewTask+0x8a>
 800ccf0:	bf00      	nop
 800ccf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ccfa:	e003      	b.n	800cd04 <prvInitialiseNewTask+0x9c>
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 800cd04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd06:	2b06      	cmp	r3, #6
 800cd08:	d901      	bls.n	800cd0e <prvInitialiseNewTask+0xa6>
 800cd0a:	2306      	movs	r3, #6
 800cd0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd12:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd18:	645a      	str	r2, [r3, #68]	@ 0x44
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	649a      	str	r2, [r3, #72]	@ 0x48
 800cd20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd22:	3304      	adds	r3, #4
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7ff f998 	bl	800c05a <vListInitialiseItem>
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	3318      	adds	r3, #24
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7ff f993 	bl	800c05a <vListInitialiseItem>
 800cd34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd38:	611a      	str	r2, [r3, #16]
 800cd3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3c:	f1c3 0207 	rsb	r2, r3, #7
 800cd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd42:	619a      	str	r2, [r3, #24]
 800cd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd48:	625a      	str	r2, [r3, #36]	@ 0x24
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800cd52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd5c:	334c      	adds	r3, #76	@ 0x4c
 800cd5e:	224c      	movs	r2, #76	@ 0x4c
 800cd60:	2100      	movs	r1, #0
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 fd17 	bl	800e796 <memset>
 800cd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd6a:	4a0d      	ldr	r2, [pc, #52]	@ (800cda0 <prvInitialiseNewTask+0x138>)
 800cd6c:	651a      	str	r2, [r3, #80]	@ 0x50
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd70:	4a0c      	ldr	r2, [pc, #48]	@ (800cda4 <prvInitialiseNewTask+0x13c>)
 800cd72:	655a      	str	r2, [r3, #84]	@ 0x54
 800cd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd76:	4a0c      	ldr	r2, [pc, #48]	@ (800cda8 <prvInitialiseNewTask+0x140>)
 800cd78:	659a      	str	r2, [r3, #88]	@ 0x58
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	68f9      	ldr	r1, [r7, #12]
 800cd7e:	69b8      	ldr	r0, [r7, #24]
 800cd80:	f000 ffc4 	bl	800dd0c <pxPortInitialiseStack>
 800cd84:	4602      	mov	r2, r0
 800cd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <prvInitialiseNewTask+0x12e>
 800cd90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	bf00      	nop
 800cd98:	3720      	adds	r7, #32
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	20004bdc 	.word	0x20004bdc
 800cda4:	20004c44 	.word	0x20004c44
 800cda8:	20004cac 	.word	0x20004cac

0800cdac <prvAddNewTaskToReadyList>:
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	f001 f8ba 	bl	800df2c <vPortEnterCritical>
 800cdb8:	4b2a      	ldr	r3, [pc, #168]	@ (800ce64 <prvAddNewTaskToReadyList+0xb8>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	4a29      	ldr	r2, [pc, #164]	@ (800ce64 <prvAddNewTaskToReadyList+0xb8>)
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	4b29      	ldr	r3, [pc, #164]	@ (800ce68 <prvAddNewTaskToReadyList+0xbc>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d109      	bne.n	800cdde <prvAddNewTaskToReadyList+0x32>
 800cdca:	4a27      	ldr	r2, [pc, #156]	@ (800ce68 <prvAddNewTaskToReadyList+0xbc>)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6013      	str	r3, [r2, #0]
 800cdd0:	4b24      	ldr	r3, [pc, #144]	@ (800ce64 <prvAddNewTaskToReadyList+0xb8>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d110      	bne.n	800cdfa <prvAddNewTaskToReadyList+0x4e>
 800cdd8:	f000 fc8e 	bl	800d6f8 <prvInitialiseTaskLists>
 800cddc:	e00d      	b.n	800cdfa <prvAddNewTaskToReadyList+0x4e>
 800cdde:	4b23      	ldr	r3, [pc, #140]	@ (800ce6c <prvAddNewTaskToReadyList+0xc0>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d109      	bne.n	800cdfa <prvAddNewTaskToReadyList+0x4e>
 800cde6:	4b20      	ldr	r3, [pc, #128]	@ (800ce68 <prvAddNewTaskToReadyList+0xbc>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d802      	bhi.n	800cdfa <prvAddNewTaskToReadyList+0x4e>
 800cdf4:	4a1c      	ldr	r2, [pc, #112]	@ (800ce68 <prvAddNewTaskToReadyList+0xbc>)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	4b1d      	ldr	r3, [pc, #116]	@ (800ce70 <prvAddNewTaskToReadyList+0xc4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	4a1b      	ldr	r2, [pc, #108]	@ (800ce70 <prvAddNewTaskToReadyList+0xc4>)
 800ce02:	6013      	str	r3, [r2, #0]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce08:	2201      	movs	r2, #1
 800ce0a:	409a      	lsls	r2, r3
 800ce0c:	4b19      	ldr	r3, [pc, #100]	@ (800ce74 <prvAddNewTaskToReadyList+0xc8>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	4a18      	ldr	r2, [pc, #96]	@ (800ce74 <prvAddNewTaskToReadyList+0xc8>)
 800ce14:	6013      	str	r3, [r2, #0]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4a15      	ldr	r2, [pc, #84]	@ (800ce78 <prvAddNewTaskToReadyList+0xcc>)
 800ce24:	441a      	add	r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	3304      	adds	r3, #4
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	4610      	mov	r0, r2
 800ce2e:	f7ff f921 	bl	800c074 <vListInsertEnd>
 800ce32:	f001 f8b1 	bl	800df98 <vPortExitCritical>
 800ce36:	4b0d      	ldr	r3, [pc, #52]	@ (800ce6c <prvAddNewTaskToReadyList+0xc0>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00e      	beq.n	800ce5c <prvAddNewTaskToReadyList+0xb0>
 800ce3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce68 <prvAddNewTaskToReadyList+0xbc>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d207      	bcs.n	800ce5c <prvAddNewTaskToReadyList+0xb0>
 800ce4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce7c <prvAddNewTaskToReadyList+0xd0>)
 800ce4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce52:	601a      	str	r2, [r3, #0]
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	20000f90 	.word	0x20000f90
 800ce68:	20000e90 	.word	0x20000e90
 800ce6c:	20000f9c 	.word	0x20000f9c
 800ce70:	20000fac 	.word	0x20000fac
 800ce74:	20000f98 	.word	0x20000f98
 800ce78:	20000e94 	.word	0x20000e94
 800ce7c:	e000ed04 	.word	0xe000ed04

0800ce80 <vTaskDelayUntil>:
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08a      	sub	sp, #40	@ 0x28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10d      	bne.n	800ceb0 <vTaskDelayUntil+0x30>
 800ce94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce98:	b672      	cpsid	i
 800ce9a:	f383 8811 	msr	BASEPRI, r3
 800ce9e:	f3bf 8f6f 	isb	sy
 800cea2:	f3bf 8f4f 	dsb	sy
 800cea6:	b662      	cpsie	i
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	bf00      	nop
 800ceac:	bf00      	nop
 800ceae:	e7fd      	b.n	800ceac <vTaskDelayUntil+0x2c>
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10d      	bne.n	800ced2 <vTaskDelayUntil+0x52>
 800ceb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceba:	b672      	cpsid	i
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	b662      	cpsie	i
 800ceca:	613b      	str	r3, [r7, #16]
 800cecc:	bf00      	nop
 800cece:	bf00      	nop
 800ced0:	e7fd      	b.n	800cece <vTaskDelayUntil+0x4e>
 800ced2:	4b2b      	ldr	r3, [pc, #172]	@ (800cf80 <vTaskDelayUntil+0x100>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00d      	beq.n	800cef6 <vTaskDelayUntil+0x76>
 800ceda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cede:	b672      	cpsid	i
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	b662      	cpsie	i
 800ceee:	60fb      	str	r3, [r7, #12]
 800cef0:	bf00      	nop
 800cef2:	bf00      	nop
 800cef4:	e7fd      	b.n	800cef2 <vTaskDelayUntil+0x72>
 800cef6:	f000 f8ef 	bl	800d0d8 <vTaskSuspendAll>
 800cefa:	4b22      	ldr	r3, [pc, #136]	@ (800cf84 <vTaskDelayUntil+0x104>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	623b      	str	r3, [r7, #32]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	4413      	add	r3, r2
 800cf08:	61fb      	str	r3, [r7, #28]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	6a3a      	ldr	r2, [r7, #32]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d20b      	bcs.n	800cf2c <vTaskDelayUntil+0xac>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	69fa      	ldr	r2, [r7, #28]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d211      	bcs.n	800cf42 <vTaskDelayUntil+0xc2>
 800cf1e:	69fa      	ldr	r2, [r7, #28]
 800cf20:	6a3b      	ldr	r3, [r7, #32]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d90d      	bls.n	800cf42 <vTaskDelayUntil+0xc2>
 800cf26:	2301      	movs	r3, #1
 800cf28:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf2a:	e00a      	b.n	800cf42 <vTaskDelayUntil+0xc2>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	69fa      	ldr	r2, [r7, #28]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d303      	bcc.n	800cf3e <vTaskDelayUntil+0xbe>
 800cf36:	69fa      	ldr	r2, [r7, #28]
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d901      	bls.n	800cf42 <vTaskDelayUntil+0xc2>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	69fa      	ldr	r2, [r7, #28]
 800cf46:	601a      	str	r2, [r3, #0]
 800cf48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d006      	beq.n	800cf5c <vTaskDelayUntil+0xdc>
 800cf4e:	69fa      	ldr	r2, [r7, #28]
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	2100      	movs	r1, #0
 800cf56:	4618      	mov	r0, r3
 800cf58:	f000 fe72 	bl	800dc40 <prvAddCurrentTaskToDelayedList>
 800cf5c:	f000 f8ca 	bl	800d0f4 <xTaskResumeAll>
 800cf60:	61b8      	str	r0, [r7, #24]
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d107      	bne.n	800cf78 <vTaskDelayUntil+0xf8>
 800cf68:	4b07      	ldr	r3, [pc, #28]	@ (800cf88 <vTaskDelayUntil+0x108>)
 800cf6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf6e:	601a      	str	r2, [r3, #0]
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	bf00      	nop
 800cf7a:	3728      	adds	r7, #40	@ 0x28
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	20000fb8 	.word	0x20000fb8
 800cf84:	20000f94 	.word	0x20000f94
 800cf88:	e000ed04 	.word	0xe000ed04

0800cf8c <vTaskDelay>:
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	2300      	movs	r3, #0
 800cf96:	60fb      	str	r3, [r7, #12]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d01a      	beq.n	800cfd4 <vTaskDelay+0x48>
 800cf9e:	4b15      	ldr	r3, [pc, #84]	@ (800cff4 <vTaskDelay+0x68>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00d      	beq.n	800cfc2 <vTaskDelay+0x36>
 800cfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfaa:	b672      	cpsid	i
 800cfac:	f383 8811 	msr	BASEPRI, r3
 800cfb0:	f3bf 8f6f 	isb	sy
 800cfb4:	f3bf 8f4f 	dsb	sy
 800cfb8:	b662      	cpsie	i
 800cfba:	60bb      	str	r3, [r7, #8]
 800cfbc:	bf00      	nop
 800cfbe:	bf00      	nop
 800cfc0:	e7fd      	b.n	800cfbe <vTaskDelay+0x32>
 800cfc2:	f000 f889 	bl	800d0d8 <vTaskSuspendAll>
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 fe39 	bl	800dc40 <prvAddCurrentTaskToDelayedList>
 800cfce:	f000 f891 	bl	800d0f4 <xTaskResumeAll>
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d107      	bne.n	800cfea <vTaskDelay+0x5e>
 800cfda:	4b07      	ldr	r3, [pc, #28]	@ (800cff8 <vTaskDelay+0x6c>)
 800cfdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfe0:	601a      	str	r2, [r3, #0]
 800cfe2:	f3bf 8f4f 	dsb	sy
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	bf00      	nop
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	20000fb8 	.word	0x20000fb8
 800cff8:	e000ed04 	.word	0xe000ed04

0800cffc <vTaskStartScheduler>:
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b08a      	sub	sp, #40	@ 0x28
 800d000:	af04      	add	r7, sp, #16
 800d002:	2300      	movs	r3, #0
 800d004:	60bb      	str	r3, [r7, #8]
 800d006:	2300      	movs	r3, #0
 800d008:	607b      	str	r3, [r7, #4]
 800d00a:	463a      	mov	r2, r7
 800d00c:	1d39      	adds	r1, r7, #4
 800d00e:	f107 0308 	add.w	r3, r7, #8
 800d012:	4618      	mov	r0, r3
 800d014:	f7f4 f978 	bl	8001308 <vApplicationGetIdleTaskMemory>
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68ba      	ldr	r2, [r7, #8]
 800d01e:	9202      	str	r2, [sp, #8]
 800d020:	9301      	str	r3, [sp, #4]
 800d022:	2300      	movs	r3, #0
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	2300      	movs	r3, #0
 800d028:	460a      	mov	r2, r1
 800d02a:	4923      	ldr	r1, [pc, #140]	@ (800d0b8 <vTaskStartScheduler+0xbc>)
 800d02c:	4823      	ldr	r0, [pc, #140]	@ (800d0bc <vTaskStartScheduler+0xc0>)
 800d02e:	f7ff fd6f 	bl	800cb10 <xTaskCreateStatic>
 800d032:	4603      	mov	r3, r0
 800d034:	4a22      	ldr	r2, [pc, #136]	@ (800d0c0 <vTaskStartScheduler+0xc4>)
 800d036:	6013      	str	r3, [r2, #0]
 800d038:	4b21      	ldr	r3, [pc, #132]	@ (800d0c0 <vTaskStartScheduler+0xc4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <vTaskStartScheduler+0x4a>
 800d040:	2301      	movs	r3, #1
 800d042:	617b      	str	r3, [r7, #20]
 800d044:	e001      	b.n	800d04a <vTaskStartScheduler+0x4e>
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d11d      	bne.n	800d08c <vTaskStartScheduler+0x90>
 800d050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d054:	b672      	cpsid	i
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	b662      	cpsie	i
 800d064:	613b      	str	r3, [r7, #16]
 800d066:	bf00      	nop
 800d068:	4b16      	ldr	r3, [pc, #88]	@ (800d0c4 <vTaskStartScheduler+0xc8>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	334c      	adds	r3, #76	@ 0x4c
 800d06e:	4a16      	ldr	r2, [pc, #88]	@ (800d0c8 <vTaskStartScheduler+0xcc>)
 800d070:	6013      	str	r3, [r2, #0]
 800d072:	4b16      	ldr	r3, [pc, #88]	@ (800d0cc <vTaskStartScheduler+0xd0>)
 800d074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	4b15      	ldr	r3, [pc, #84]	@ (800d0d0 <vTaskStartScheduler+0xd4>)
 800d07c:	2201      	movs	r2, #1
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	4b14      	ldr	r3, [pc, #80]	@ (800d0d4 <vTaskStartScheduler+0xd8>)
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]
 800d086:	f000 fed3 	bl	800de30 <xPortStartScheduler>
 800d08a:	e011      	b.n	800d0b0 <vTaskStartScheduler+0xb4>
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d092:	d10d      	bne.n	800d0b0 <vTaskStartScheduler+0xb4>
 800d094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d098:	b672      	cpsid	i
 800d09a:	f383 8811 	msr	BASEPRI, r3
 800d09e:	f3bf 8f6f 	isb	sy
 800d0a2:	f3bf 8f4f 	dsb	sy
 800d0a6:	b662      	cpsie	i
 800d0a8:	60fb      	str	r3, [r7, #12]
 800d0aa:	bf00      	nop
 800d0ac:	bf00      	nop
 800d0ae:	e7fd      	b.n	800d0ac <vTaskStartScheduler+0xb0>
 800d0b0:	bf00      	nop
 800d0b2:	3718      	adds	r7, #24
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	0800fab4 	.word	0x0800fab4
 800d0bc:	0800d6c9 	.word	0x0800d6c9
 800d0c0:	20000fb4 	.word	0x20000fb4
 800d0c4:	20000e90 	.word	0x20000e90
 800d0c8:	20000068 	.word	0x20000068
 800d0cc:	20000fb0 	.word	0x20000fb0
 800d0d0:	20000f9c 	.word	0x20000f9c
 800d0d4:	20000f94 	.word	0x20000f94

0800d0d8 <vTaskSuspendAll>:
 800d0d8:	b480      	push	{r7}
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	4b04      	ldr	r3, [pc, #16]	@ (800d0f0 <vTaskSuspendAll+0x18>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	4a03      	ldr	r2, [pc, #12]	@ (800d0f0 <vTaskSuspendAll+0x18>)
 800d0e4:	6013      	str	r3, [r2, #0]
 800d0e6:	bf00      	nop
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr
 800d0f0:	20000fb8 	.word	0x20000fb8

0800d0f4 <xTaskResumeAll>:
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	60fb      	str	r3, [r7, #12]
 800d0fe:	2300      	movs	r3, #0
 800d100:	60bb      	str	r3, [r7, #8]
 800d102:	4b43      	ldr	r3, [pc, #268]	@ (800d210 <xTaskResumeAll+0x11c>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10d      	bne.n	800d126 <xTaskResumeAll+0x32>
 800d10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10e:	b672      	cpsid	i
 800d110:	f383 8811 	msr	BASEPRI, r3
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	f3bf 8f4f 	dsb	sy
 800d11c:	b662      	cpsie	i
 800d11e:	603b      	str	r3, [r7, #0]
 800d120:	bf00      	nop
 800d122:	bf00      	nop
 800d124:	e7fd      	b.n	800d122 <xTaskResumeAll+0x2e>
 800d126:	f000 ff01 	bl	800df2c <vPortEnterCritical>
 800d12a:	4b39      	ldr	r3, [pc, #228]	@ (800d210 <xTaskResumeAll+0x11c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	3b01      	subs	r3, #1
 800d130:	4a37      	ldr	r2, [pc, #220]	@ (800d210 <xTaskResumeAll+0x11c>)
 800d132:	6013      	str	r3, [r2, #0]
 800d134:	4b36      	ldr	r3, [pc, #216]	@ (800d210 <xTaskResumeAll+0x11c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d161      	bne.n	800d200 <xTaskResumeAll+0x10c>
 800d13c:	4b35      	ldr	r3, [pc, #212]	@ (800d214 <xTaskResumeAll+0x120>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d05d      	beq.n	800d200 <xTaskResumeAll+0x10c>
 800d144:	e02e      	b.n	800d1a4 <xTaskResumeAll+0xb0>
 800d146:	4b34      	ldr	r3, [pc, #208]	@ (800d218 <xTaskResumeAll+0x124>)
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	60fb      	str	r3, [r7, #12]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	3318      	adds	r3, #24
 800d152:	4618      	mov	r0, r3
 800d154:	f7fe ffeb 	bl	800c12e <uxListRemove>
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe ffe6 	bl	800c12e <uxListRemove>
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d166:	2201      	movs	r2, #1
 800d168:	409a      	lsls	r2, r3
 800d16a:	4b2c      	ldr	r3, [pc, #176]	@ (800d21c <xTaskResumeAll+0x128>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4313      	orrs	r3, r2
 800d170:	4a2a      	ldr	r2, [pc, #168]	@ (800d21c <xTaskResumeAll+0x128>)
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d178:	4613      	mov	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4a27      	ldr	r2, [pc, #156]	@ (800d220 <xTaskResumeAll+0x12c>)
 800d182:	441a      	add	r2, r3
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	3304      	adds	r3, #4
 800d188:	4619      	mov	r1, r3
 800d18a:	4610      	mov	r0, r2
 800d18c:	f7fe ff72 	bl	800c074 <vListInsertEnd>
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d194:	4b23      	ldr	r3, [pc, #140]	@ (800d224 <xTaskResumeAll+0x130>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d302      	bcc.n	800d1a4 <xTaskResumeAll+0xb0>
 800d19e:	4b22      	ldr	r3, [pc, #136]	@ (800d228 <xTaskResumeAll+0x134>)
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	601a      	str	r2, [r3, #0]
 800d1a4:	4b1c      	ldr	r3, [pc, #112]	@ (800d218 <xTaskResumeAll+0x124>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1cc      	bne.n	800d146 <xTaskResumeAll+0x52>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <xTaskResumeAll+0xc2>
 800d1b2:	f000 fb47 	bl	800d844 <prvResetNextTaskUnblockTime>
 800d1b6:	4b1d      	ldr	r3, [pc, #116]	@ (800d22c <xTaskResumeAll+0x138>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	607b      	str	r3, [r7, #4]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d010      	beq.n	800d1e4 <xTaskResumeAll+0xf0>
 800d1c2:	f000 f847 	bl	800d254 <xTaskIncrementTick>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <xTaskResumeAll+0xde>
 800d1cc:	4b16      	ldr	r3, [pc, #88]	@ (800d228 <xTaskResumeAll+0x134>)
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	601a      	str	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	607b      	str	r3, [r7, #4]
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d1f1      	bne.n	800d1c2 <xTaskResumeAll+0xce>
 800d1de:	4b13      	ldr	r3, [pc, #76]	@ (800d22c <xTaskResumeAll+0x138>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	601a      	str	r2, [r3, #0]
 800d1e4:	4b10      	ldr	r3, [pc, #64]	@ (800d228 <xTaskResumeAll+0x134>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d009      	beq.n	800d200 <xTaskResumeAll+0x10c>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	60bb      	str	r3, [r7, #8]
 800d1f0:	4b0f      	ldr	r3, [pc, #60]	@ (800d230 <xTaskResumeAll+0x13c>)
 800d1f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f000 feca 	bl	800df98 <vPortExitCritical>
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	20000fb8 	.word	0x20000fb8
 800d214:	20000f90 	.word	0x20000f90
 800d218:	20000f50 	.word	0x20000f50
 800d21c:	20000f98 	.word	0x20000f98
 800d220:	20000e94 	.word	0x20000e94
 800d224:	20000e90 	.word	0x20000e90
 800d228:	20000fa4 	.word	0x20000fa4
 800d22c:	20000fa0 	.word	0x20000fa0
 800d230:	e000ed04 	.word	0xe000ed04

0800d234 <xTaskGetTickCount>:
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	4b05      	ldr	r3, [pc, #20]	@ (800d250 <xTaskGetTickCount+0x1c>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	607b      	str	r3, [r7, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	4618      	mov	r0, r3
 800d244:	370c      	adds	r7, #12
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	20000f94 	.word	0x20000f94

0800d254 <xTaskIncrementTick>:
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	4b50      	ldr	r3, [pc, #320]	@ (800d3a0 <xTaskIncrementTick+0x14c>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	f040 808b 	bne.w	800d37e <xTaskIncrementTick+0x12a>
 800d268:	4b4e      	ldr	r3, [pc, #312]	@ (800d3a4 <xTaskIncrementTick+0x150>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	3301      	adds	r3, #1
 800d26e:	613b      	str	r3, [r7, #16]
 800d270:	4a4c      	ldr	r2, [pc, #304]	@ (800d3a4 <xTaskIncrementTick+0x150>)
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	6013      	str	r3, [r2, #0]
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d123      	bne.n	800d2c4 <xTaskIncrementTick+0x70>
 800d27c:	4b4a      	ldr	r3, [pc, #296]	@ (800d3a8 <xTaskIncrementTick+0x154>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d00d      	beq.n	800d2a2 <xTaskIncrementTick+0x4e>
 800d286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d28a:	b672      	cpsid	i
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	b662      	cpsie	i
 800d29a:	603b      	str	r3, [r7, #0]
 800d29c:	bf00      	nop
 800d29e:	bf00      	nop
 800d2a0:	e7fd      	b.n	800d29e <xTaskIncrementTick+0x4a>
 800d2a2:	4b41      	ldr	r3, [pc, #260]	@ (800d3a8 <xTaskIncrementTick+0x154>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	60fb      	str	r3, [r7, #12]
 800d2a8:	4b40      	ldr	r3, [pc, #256]	@ (800d3ac <xTaskIncrementTick+0x158>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4a3e      	ldr	r2, [pc, #248]	@ (800d3a8 <xTaskIncrementTick+0x154>)
 800d2ae:	6013      	str	r3, [r2, #0]
 800d2b0:	4a3e      	ldr	r2, [pc, #248]	@ (800d3ac <xTaskIncrementTick+0x158>)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	4b3e      	ldr	r3, [pc, #248]	@ (800d3b0 <xTaskIncrementTick+0x15c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	4a3c      	ldr	r2, [pc, #240]	@ (800d3b0 <xTaskIncrementTick+0x15c>)
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	f000 fac0 	bl	800d844 <prvResetNextTaskUnblockTime>
 800d2c4:	4b3b      	ldr	r3, [pc, #236]	@ (800d3b4 <xTaskIncrementTick+0x160>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	693a      	ldr	r2, [r7, #16]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d348      	bcc.n	800d360 <xTaskIncrementTick+0x10c>
 800d2ce:	4b36      	ldr	r3, [pc, #216]	@ (800d3a8 <xTaskIncrementTick+0x154>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d104      	bne.n	800d2e2 <xTaskIncrementTick+0x8e>
 800d2d8:	4b36      	ldr	r3, [pc, #216]	@ (800d3b4 <xTaskIncrementTick+0x160>)
 800d2da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	e03e      	b.n	800d360 <xTaskIncrementTick+0x10c>
 800d2e2:	4b31      	ldr	r3, [pc, #196]	@ (800d3a8 <xTaskIncrementTick+0x154>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	60bb      	str	r3, [r7, #8]
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	607b      	str	r3, [r7, #4]
 800d2f2:	693a      	ldr	r2, [r7, #16]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	429a      	cmp	r2, r3
 800d2f8:	d203      	bcs.n	800d302 <xTaskIncrementTick+0xae>
 800d2fa:	4a2e      	ldr	r2, [pc, #184]	@ (800d3b4 <xTaskIncrementTick+0x160>)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	e02e      	b.n	800d360 <xTaskIncrementTick+0x10c>
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	3304      	adds	r3, #4
 800d306:	4618      	mov	r0, r3
 800d308:	f7fe ff11 	bl	800c12e <uxListRemove>
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d310:	2b00      	cmp	r3, #0
 800d312:	d004      	beq.n	800d31e <xTaskIncrementTick+0xca>
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	3318      	adds	r3, #24
 800d318:	4618      	mov	r0, r3
 800d31a:	f7fe ff08 	bl	800c12e <uxListRemove>
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d322:	2201      	movs	r2, #1
 800d324:	409a      	lsls	r2, r3
 800d326:	4b24      	ldr	r3, [pc, #144]	@ (800d3b8 <xTaskIncrementTick+0x164>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4313      	orrs	r3, r2
 800d32c:	4a22      	ldr	r2, [pc, #136]	@ (800d3b8 <xTaskIncrementTick+0x164>)
 800d32e:	6013      	str	r3, [r2, #0]
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d334:	4613      	mov	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4a1f      	ldr	r2, [pc, #124]	@ (800d3bc <xTaskIncrementTick+0x168>)
 800d33e:	441a      	add	r2, r3
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	3304      	adds	r3, #4
 800d344:	4619      	mov	r1, r3
 800d346:	4610      	mov	r0, r2
 800d348:	f7fe fe94 	bl	800c074 <vListInsertEnd>
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d350:	4b1b      	ldr	r3, [pc, #108]	@ (800d3c0 <xTaskIncrementTick+0x16c>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d356:	429a      	cmp	r2, r3
 800d358:	d3b9      	bcc.n	800d2ce <xTaskIncrementTick+0x7a>
 800d35a:	2301      	movs	r3, #1
 800d35c:	617b      	str	r3, [r7, #20]
 800d35e:	e7b6      	b.n	800d2ce <xTaskIncrementTick+0x7a>
 800d360:	4b17      	ldr	r3, [pc, #92]	@ (800d3c0 <xTaskIncrementTick+0x16c>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d366:	4915      	ldr	r1, [pc, #84]	@ (800d3bc <xTaskIncrementTick+0x168>)
 800d368:	4613      	mov	r3, r2
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	4413      	add	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	440b      	add	r3, r1
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d907      	bls.n	800d388 <xTaskIncrementTick+0x134>
 800d378:	2301      	movs	r3, #1
 800d37a:	617b      	str	r3, [r7, #20]
 800d37c:	e004      	b.n	800d388 <xTaskIncrementTick+0x134>
 800d37e:	4b11      	ldr	r3, [pc, #68]	@ (800d3c4 <xTaskIncrementTick+0x170>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3301      	adds	r3, #1
 800d384:	4a0f      	ldr	r2, [pc, #60]	@ (800d3c4 <xTaskIncrementTick+0x170>)
 800d386:	6013      	str	r3, [r2, #0]
 800d388:	4b0f      	ldr	r3, [pc, #60]	@ (800d3c8 <xTaskIncrementTick+0x174>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d001      	beq.n	800d394 <xTaskIncrementTick+0x140>
 800d390:	2301      	movs	r3, #1
 800d392:	617b      	str	r3, [r7, #20]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	4618      	mov	r0, r3
 800d398:	3718      	adds	r7, #24
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20000fb8 	.word	0x20000fb8
 800d3a4:	20000f94 	.word	0x20000f94
 800d3a8:	20000f48 	.word	0x20000f48
 800d3ac:	20000f4c 	.word	0x20000f4c
 800d3b0:	20000fa8 	.word	0x20000fa8
 800d3b4:	20000fb0 	.word	0x20000fb0
 800d3b8:	20000f98 	.word	0x20000f98
 800d3bc:	20000e94 	.word	0x20000e94
 800d3c0:	20000e90 	.word	0x20000e90
 800d3c4:	20000fa0 	.word	0x20000fa0
 800d3c8:	20000fa4 	.word	0x20000fa4

0800d3cc <vTaskSwitchContext>:
 800d3cc:	b480      	push	{r7}
 800d3ce:	b087      	sub	sp, #28
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	4b2b      	ldr	r3, [pc, #172]	@ (800d480 <vTaskSwitchContext+0xb4>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <vTaskSwitchContext+0x16>
 800d3da:	4b2a      	ldr	r3, [pc, #168]	@ (800d484 <vTaskSwitchContext+0xb8>)
 800d3dc:	2201      	movs	r2, #1
 800d3de:	601a      	str	r2, [r3, #0]
 800d3e0:	e047      	b.n	800d472 <vTaskSwitchContext+0xa6>
 800d3e2:	4b28      	ldr	r3, [pc, #160]	@ (800d484 <vTaskSwitchContext+0xb8>)
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	601a      	str	r2, [r3, #0]
 800d3e8:	4b27      	ldr	r3, [pc, #156]	@ (800d488 <vTaskSwitchContext+0xbc>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	60fb      	str	r3, [r7, #12]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	fab3 f383 	clz	r3, r3
 800d3f4:	72fb      	strb	r3, [r7, #11]
 800d3f6:	7afb      	ldrb	r3, [r7, #11]
 800d3f8:	f1c3 031f 	rsb	r3, r3, #31
 800d3fc:	617b      	str	r3, [r7, #20]
 800d3fe:	4923      	ldr	r1, [pc, #140]	@ (800d48c <vTaskSwitchContext+0xc0>)
 800d400:	697a      	ldr	r2, [r7, #20]
 800d402:	4613      	mov	r3, r2
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	4413      	add	r3, r2
 800d408:	009b      	lsls	r3, r3, #2
 800d40a:	440b      	add	r3, r1
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d10d      	bne.n	800d42e <vTaskSwitchContext+0x62>
 800d412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d416:	b672      	cpsid	i
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	b662      	cpsie	i
 800d426:	607b      	str	r3, [r7, #4]
 800d428:	bf00      	nop
 800d42a:	bf00      	nop
 800d42c:	e7fd      	b.n	800d42a <vTaskSwitchContext+0x5e>
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	4613      	mov	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4413      	add	r3, r2
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	4a14      	ldr	r2, [pc, #80]	@ (800d48c <vTaskSwitchContext+0xc0>)
 800d43a:	4413      	add	r3, r2
 800d43c:	613b      	str	r3, [r7, #16]
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	685a      	ldr	r2, [r3, #4]
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	605a      	str	r2, [r3, #4]
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	3308      	adds	r3, #8
 800d450:	429a      	cmp	r2, r3
 800d452:	d104      	bne.n	800d45e <vTaskSwitchContext+0x92>
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	685a      	ldr	r2, [r3, #4]
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	605a      	str	r2, [r3, #4]
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	4a0a      	ldr	r2, [pc, #40]	@ (800d490 <vTaskSwitchContext+0xc4>)
 800d466:	6013      	str	r3, [r2, #0]
 800d468:	4b09      	ldr	r3, [pc, #36]	@ (800d490 <vTaskSwitchContext+0xc4>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	334c      	adds	r3, #76	@ 0x4c
 800d46e:	4a09      	ldr	r2, [pc, #36]	@ (800d494 <vTaskSwitchContext+0xc8>)
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	bf00      	nop
 800d474:	371c      	adds	r7, #28
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	20000fb8 	.word	0x20000fb8
 800d484:	20000fa4 	.word	0x20000fa4
 800d488:	20000f98 	.word	0x20000f98
 800d48c:	20000e94 	.word	0x20000e94
 800d490:	20000e90 	.word	0x20000e90
 800d494:	20000068 	.word	0x20000068

0800d498 <vTaskPlaceOnEventList>:
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10d      	bne.n	800d4c4 <vTaskPlaceOnEventList+0x2c>
 800d4a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ac:	b672      	cpsid	i
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	b662      	cpsie	i
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	bf00      	nop
 800d4c0:	bf00      	nop
 800d4c2:	e7fd      	b.n	800d4c0 <vTaskPlaceOnEventList+0x28>
 800d4c4:	4b07      	ldr	r3, [pc, #28]	@ (800d4e4 <vTaskPlaceOnEventList+0x4c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	3318      	adds	r3, #24
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7fe fdf5 	bl	800c0bc <vListInsert>
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	6838      	ldr	r0, [r7, #0]
 800d4d6:	f000 fbb3 	bl	800dc40 <prvAddCurrentTaskToDelayedList>
 800d4da:	bf00      	nop
 800d4dc:	3710      	adds	r7, #16
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	20000e90 	.word	0x20000e90

0800d4e8 <xTaskRemoveFromEventList>:
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b086      	sub	sp, #24
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	68db      	ldr	r3, [r3, #12]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	613b      	str	r3, [r7, #16]
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d10d      	bne.n	800d51a <xTaskRemoveFromEventList+0x32>
 800d4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d502:	b672      	cpsid	i
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	b662      	cpsie	i
 800d512:	60fb      	str	r3, [r7, #12]
 800d514:	bf00      	nop
 800d516:	bf00      	nop
 800d518:	e7fd      	b.n	800d516 <xTaskRemoveFromEventList+0x2e>
 800d51a:	693b      	ldr	r3, [r7, #16]
 800d51c:	3318      	adds	r3, #24
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fe fe05 	bl	800c12e <uxListRemove>
 800d524:	4b1d      	ldr	r3, [pc, #116]	@ (800d59c <xTaskRemoveFromEventList+0xb4>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d11c      	bne.n	800d566 <xTaskRemoveFromEventList+0x7e>
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	3304      	adds	r3, #4
 800d530:	4618      	mov	r0, r3
 800d532:	f7fe fdfc 	bl	800c12e <uxListRemove>
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d53a:	2201      	movs	r2, #1
 800d53c:	409a      	lsls	r2, r3
 800d53e:	4b18      	ldr	r3, [pc, #96]	@ (800d5a0 <xTaskRemoveFromEventList+0xb8>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	4313      	orrs	r3, r2
 800d544:	4a16      	ldr	r2, [pc, #88]	@ (800d5a0 <xTaskRemoveFromEventList+0xb8>)
 800d546:	6013      	str	r3, [r2, #0]
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d54c:	4613      	mov	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	4413      	add	r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4a13      	ldr	r2, [pc, #76]	@ (800d5a4 <xTaskRemoveFromEventList+0xbc>)
 800d556:	441a      	add	r2, r3
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	3304      	adds	r3, #4
 800d55c:	4619      	mov	r1, r3
 800d55e:	4610      	mov	r0, r2
 800d560:	f7fe fd88 	bl	800c074 <vListInsertEnd>
 800d564:	e005      	b.n	800d572 <xTaskRemoveFromEventList+0x8a>
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	3318      	adds	r3, #24
 800d56a:	4619      	mov	r1, r3
 800d56c:	480e      	ldr	r0, [pc, #56]	@ (800d5a8 <xTaskRemoveFromEventList+0xc0>)
 800d56e:	f7fe fd81 	bl	800c074 <vListInsertEnd>
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d576:	4b0d      	ldr	r3, [pc, #52]	@ (800d5ac <xTaskRemoveFromEventList+0xc4>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d905      	bls.n	800d58c <xTaskRemoveFromEventList+0xa4>
 800d580:	2301      	movs	r3, #1
 800d582:	617b      	str	r3, [r7, #20]
 800d584:	4b0a      	ldr	r3, [pc, #40]	@ (800d5b0 <xTaskRemoveFromEventList+0xc8>)
 800d586:	2201      	movs	r2, #1
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	e001      	b.n	800d590 <xTaskRemoveFromEventList+0xa8>
 800d58c:	2300      	movs	r3, #0
 800d58e:	617b      	str	r3, [r7, #20]
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	4618      	mov	r0, r3
 800d594:	3718      	adds	r7, #24
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20000fb8 	.word	0x20000fb8
 800d5a0:	20000f98 	.word	0x20000f98
 800d5a4:	20000e94 	.word	0x20000e94
 800d5a8:	20000f50 	.word	0x20000f50
 800d5ac:	20000e90 	.word	0x20000e90
 800d5b0:	20000fa4 	.word	0x20000fa4

0800d5b4 <vTaskInternalSetTimeOutState>:
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	4b06      	ldr	r3, [pc, #24]	@ (800d5d8 <vTaskInternalSetTimeOutState+0x24>)
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	601a      	str	r2, [r3, #0]
 800d5c4:	4b05      	ldr	r3, [pc, #20]	@ (800d5dc <vTaskInternalSetTimeOutState+0x28>)
 800d5c6:	681a      	ldr	r2, [r3, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	605a      	str	r2, [r3, #4]
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	20000fa8 	.word	0x20000fa8
 800d5dc:	20000f94 	.word	0x20000f94

0800d5e0 <xTaskCheckForTimeOut>:
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10d      	bne.n	800d60c <xTaskCheckForTimeOut+0x2c>
 800d5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f4:	b672      	cpsid	i
 800d5f6:	f383 8811 	msr	BASEPRI, r3
 800d5fa:	f3bf 8f6f 	isb	sy
 800d5fe:	f3bf 8f4f 	dsb	sy
 800d602:	b662      	cpsie	i
 800d604:	613b      	str	r3, [r7, #16]
 800d606:	bf00      	nop
 800d608:	bf00      	nop
 800d60a:	e7fd      	b.n	800d608 <xTaskCheckForTimeOut+0x28>
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10d      	bne.n	800d62e <xTaskCheckForTimeOut+0x4e>
 800d612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d616:	b672      	cpsid	i
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	b662      	cpsie	i
 800d626:	60fb      	str	r3, [r7, #12]
 800d628:	bf00      	nop
 800d62a:	bf00      	nop
 800d62c:	e7fd      	b.n	800d62a <xTaskCheckForTimeOut+0x4a>
 800d62e:	f000 fc7d 	bl	800df2c <vPortEnterCritical>
 800d632:	4b1d      	ldr	r3, [pc, #116]	@ (800d6a8 <xTaskCheckForTimeOut+0xc8>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	61bb      	str	r3, [r7, #24]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	69ba      	ldr	r2, [r7, #24]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	617b      	str	r3, [r7, #20]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d64a:	d102      	bne.n	800d652 <xTaskCheckForTimeOut+0x72>
 800d64c:	2300      	movs	r3, #0
 800d64e:	61fb      	str	r3, [r7, #28]
 800d650:	e023      	b.n	800d69a <xTaskCheckForTimeOut+0xba>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	4b15      	ldr	r3, [pc, #84]	@ (800d6ac <xTaskCheckForTimeOut+0xcc>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d007      	beq.n	800d66e <xTaskCheckForTimeOut+0x8e>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	69ba      	ldr	r2, [r7, #24]
 800d664:	429a      	cmp	r2, r3
 800d666:	d302      	bcc.n	800d66e <xTaskCheckForTimeOut+0x8e>
 800d668:	2301      	movs	r3, #1
 800d66a:	61fb      	str	r3, [r7, #28]
 800d66c:	e015      	b.n	800d69a <xTaskCheckForTimeOut+0xba>
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	697a      	ldr	r2, [r7, #20]
 800d674:	429a      	cmp	r2, r3
 800d676:	d20b      	bcs.n	800d690 <xTaskCheckForTimeOut+0xb0>
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	1ad2      	subs	r2, r2, r3
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f7ff ff95 	bl	800d5b4 <vTaskInternalSetTimeOutState>
 800d68a:	2300      	movs	r3, #0
 800d68c:	61fb      	str	r3, [r7, #28]
 800d68e:	e004      	b.n	800d69a <xTaskCheckForTimeOut+0xba>
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	2200      	movs	r2, #0
 800d694:	601a      	str	r2, [r3, #0]
 800d696:	2301      	movs	r3, #1
 800d698:	61fb      	str	r3, [r7, #28]
 800d69a:	f000 fc7d 	bl	800df98 <vPortExitCritical>
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3720      	adds	r7, #32
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	20000f94 	.word	0x20000f94
 800d6ac:	20000fa8 	.word	0x20000fa8

0800d6b0 <vTaskMissedYield>:
 800d6b0:	b480      	push	{r7}
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	4b03      	ldr	r3, [pc, #12]	@ (800d6c4 <vTaskMissedYield+0x14>)
 800d6b6:	2201      	movs	r2, #1
 800d6b8:	601a      	str	r2, [r3, #0]
 800d6ba:	bf00      	nop
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr
 800d6c4:	20000fa4 	.word	0x20000fa4

0800d6c8 <prvIdleTask>:
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	f000 f852 	bl	800d778 <prvCheckTasksWaitingTermination>
 800d6d4:	4b06      	ldr	r3, [pc, #24]	@ (800d6f0 <prvIdleTask+0x28>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d9f9      	bls.n	800d6d0 <prvIdleTask+0x8>
 800d6dc:	4b05      	ldr	r3, [pc, #20]	@ (800d6f4 <prvIdleTask+0x2c>)
 800d6de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6e2:	601a      	str	r2, [r3, #0]
 800d6e4:	f3bf 8f4f 	dsb	sy
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	e7f0      	b.n	800d6d0 <prvIdleTask+0x8>
 800d6ee:	bf00      	nop
 800d6f0:	20000e94 	.word	0x20000e94
 800d6f4:	e000ed04 	.word	0xe000ed04

0800d6f8 <prvInitialiseTaskLists>:
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	2300      	movs	r3, #0
 800d700:	607b      	str	r3, [r7, #4]
 800d702:	e00c      	b.n	800d71e <prvInitialiseTaskLists+0x26>
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	4613      	mov	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4a12      	ldr	r2, [pc, #72]	@ (800d758 <prvInitialiseTaskLists+0x60>)
 800d710:	4413      	add	r3, r2
 800d712:	4618      	mov	r0, r3
 800d714:	f7fe fc81 	bl	800c01a <vListInitialise>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3301      	adds	r3, #1
 800d71c:	607b      	str	r3, [r7, #4]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2b06      	cmp	r3, #6
 800d722:	d9ef      	bls.n	800d704 <prvInitialiseTaskLists+0xc>
 800d724:	480d      	ldr	r0, [pc, #52]	@ (800d75c <prvInitialiseTaskLists+0x64>)
 800d726:	f7fe fc78 	bl	800c01a <vListInitialise>
 800d72a:	480d      	ldr	r0, [pc, #52]	@ (800d760 <prvInitialiseTaskLists+0x68>)
 800d72c:	f7fe fc75 	bl	800c01a <vListInitialise>
 800d730:	480c      	ldr	r0, [pc, #48]	@ (800d764 <prvInitialiseTaskLists+0x6c>)
 800d732:	f7fe fc72 	bl	800c01a <vListInitialise>
 800d736:	480c      	ldr	r0, [pc, #48]	@ (800d768 <prvInitialiseTaskLists+0x70>)
 800d738:	f7fe fc6f 	bl	800c01a <vListInitialise>
 800d73c:	480b      	ldr	r0, [pc, #44]	@ (800d76c <prvInitialiseTaskLists+0x74>)
 800d73e:	f7fe fc6c 	bl	800c01a <vListInitialise>
 800d742:	4b0b      	ldr	r3, [pc, #44]	@ (800d770 <prvInitialiseTaskLists+0x78>)
 800d744:	4a05      	ldr	r2, [pc, #20]	@ (800d75c <prvInitialiseTaskLists+0x64>)
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	4b0a      	ldr	r3, [pc, #40]	@ (800d774 <prvInitialiseTaskLists+0x7c>)
 800d74a:	4a05      	ldr	r2, [pc, #20]	@ (800d760 <prvInitialiseTaskLists+0x68>)
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	bf00      	nop
 800d750:	3708      	adds	r7, #8
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20000e94 	.word	0x20000e94
 800d75c:	20000f20 	.word	0x20000f20
 800d760:	20000f34 	.word	0x20000f34
 800d764:	20000f50 	.word	0x20000f50
 800d768:	20000f64 	.word	0x20000f64
 800d76c:	20000f7c 	.word	0x20000f7c
 800d770:	20000f48 	.word	0x20000f48
 800d774:	20000f4c 	.word	0x20000f4c

0800d778 <prvCheckTasksWaitingTermination>:
 800d778:	b580      	push	{r7, lr}
 800d77a:	b082      	sub	sp, #8
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	e019      	b.n	800d7b4 <prvCheckTasksWaitingTermination+0x3c>
 800d780:	f000 fbd4 	bl	800df2c <vPortEnterCritical>
 800d784:	4b10      	ldr	r3, [pc, #64]	@ (800d7c8 <prvCheckTasksWaitingTermination+0x50>)
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	607b      	str	r3, [r7, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3304      	adds	r3, #4
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe fccc 	bl	800c12e <uxListRemove>
 800d796:	4b0d      	ldr	r3, [pc, #52]	@ (800d7cc <prvCheckTasksWaitingTermination+0x54>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	3b01      	subs	r3, #1
 800d79c:	4a0b      	ldr	r2, [pc, #44]	@ (800d7cc <prvCheckTasksWaitingTermination+0x54>)
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d7d0 <prvCheckTasksWaitingTermination+0x58>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	4a0a      	ldr	r2, [pc, #40]	@ (800d7d0 <prvCheckTasksWaitingTermination+0x58>)
 800d7a8:	6013      	str	r3, [r2, #0]
 800d7aa:	f000 fbf5 	bl	800df98 <vPortExitCritical>
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 f810 	bl	800d7d4 <prvDeleteTCB>
 800d7b4:	4b06      	ldr	r3, [pc, #24]	@ (800d7d0 <prvCheckTasksWaitingTermination+0x58>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1e1      	bne.n	800d780 <prvCheckTasksWaitingTermination+0x8>
 800d7bc:	bf00      	nop
 800d7be:	bf00      	nop
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	20000f64 	.word	0x20000f64
 800d7cc:	20000f90 	.word	0x20000f90
 800d7d0:	20000f78 	.word	0x20000f78

0800d7d4 <prvDeleteTCB>:
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	334c      	adds	r3, #76	@ 0x4c
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f000 fff1 	bl	800e7c8 <_reclaim_reent>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d108      	bne.n	800d802 <prvDeleteTCB+0x2e>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f000 fd4f 	bl	800e298 <vPortFree>
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 fd4c 	bl	800e298 <vPortFree>
 800d800:	e01b      	b.n	800d83a <prvDeleteTCB+0x66>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d103      	bne.n	800d814 <prvDeleteTCB+0x40>
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 fd43 	bl	800e298 <vPortFree>
 800d812:	e012      	b.n	800d83a <prvDeleteTCB+0x66>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	d00d      	beq.n	800d83a <prvDeleteTCB+0x66>
 800d81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d822:	b672      	cpsid	i
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	b662      	cpsie	i
 800d832:	60fb      	str	r3, [r7, #12]
 800d834:	bf00      	nop
 800d836:	bf00      	nop
 800d838:	e7fd      	b.n	800d836 <prvDeleteTCB+0x62>
 800d83a:	bf00      	nop
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
	...

0800d844 <prvResetNextTaskUnblockTime>:
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	4b0c      	ldr	r3, [pc, #48]	@ (800d87c <prvResetNextTaskUnblockTime+0x38>)
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d104      	bne.n	800d85e <prvResetNextTaskUnblockTime+0x1a>
 800d854:	4b0a      	ldr	r3, [pc, #40]	@ (800d880 <prvResetNextTaskUnblockTime+0x3c>)
 800d856:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d85a:	601a      	str	r2, [r3, #0]
 800d85c:	e008      	b.n	800d870 <prvResetNextTaskUnblockTime+0x2c>
 800d85e:	4b07      	ldr	r3, [pc, #28]	@ (800d87c <prvResetNextTaskUnblockTime+0x38>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68db      	ldr	r3, [r3, #12]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	607b      	str	r3, [r7, #4]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	4a04      	ldr	r2, [pc, #16]	@ (800d880 <prvResetNextTaskUnblockTime+0x3c>)
 800d86e:	6013      	str	r3, [r2, #0]
 800d870:	bf00      	nop
 800d872:	370c      	adds	r7, #12
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr
 800d87c:	20000f48 	.word	0x20000f48
 800d880:	20000fb0 	.word	0x20000fb0

0800d884 <xTaskGetSchedulerState>:
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	4b0b      	ldr	r3, [pc, #44]	@ (800d8b8 <xTaskGetSchedulerState+0x34>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d102      	bne.n	800d898 <xTaskGetSchedulerState+0x14>
 800d892:	2301      	movs	r3, #1
 800d894:	607b      	str	r3, [r7, #4]
 800d896:	e008      	b.n	800d8aa <xTaskGetSchedulerState+0x26>
 800d898:	4b08      	ldr	r3, [pc, #32]	@ (800d8bc <xTaskGetSchedulerState+0x38>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d102      	bne.n	800d8a6 <xTaskGetSchedulerState+0x22>
 800d8a0:	2302      	movs	r3, #2
 800d8a2:	607b      	str	r3, [r7, #4]
 800d8a4:	e001      	b.n	800d8aa <xTaskGetSchedulerState+0x26>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	607b      	str	r3, [r7, #4]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	20000f9c 	.word	0x20000f9c
 800d8bc:	20000fb8 	.word	0x20000fb8

0800d8c0 <xTaskPriorityInherit>:
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	60bb      	str	r3, [r7, #8]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d069      	beq.n	800d9aa <xTaskPriorityInherit+0xea>
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8da:	4b36      	ldr	r3, [pc, #216]	@ (800d9b4 <xTaskPriorityInherit+0xf4>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d259      	bcs.n	800d998 <xTaskPriorityInherit+0xd8>
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	699b      	ldr	r3, [r3, #24]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	db06      	blt.n	800d8fa <xTaskPriorityInherit+0x3a>
 800d8ec:	4b31      	ldr	r3, [pc, #196]	@ (800d9b4 <xTaskPriorityInherit+0xf4>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8f2:	f1c3 0207 	rsb	r2, r3, #7
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	619a      	str	r2, [r3, #24]
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	6959      	ldr	r1, [r3, #20]
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d902:	4613      	mov	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4a2b      	ldr	r2, [pc, #172]	@ (800d9b8 <xTaskPriorityInherit+0xf8>)
 800d90c:	4413      	add	r3, r2
 800d90e:	4299      	cmp	r1, r3
 800d910:	d13a      	bne.n	800d988 <xTaskPriorityInherit+0xc8>
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	3304      	adds	r3, #4
 800d916:	4618      	mov	r0, r3
 800d918:	f7fe fc09 	bl	800c12e <uxListRemove>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d115      	bne.n	800d94e <xTaskPriorityInherit+0x8e>
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d926:	4924      	ldr	r1, [pc, #144]	@ (800d9b8 <xTaskPriorityInherit+0xf8>)
 800d928:	4613      	mov	r3, r2
 800d92a:	009b      	lsls	r3, r3, #2
 800d92c:	4413      	add	r3, r2
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	440b      	add	r3, r1
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10a      	bne.n	800d94e <xTaskPriorityInherit+0x8e>
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d93c:	2201      	movs	r2, #1
 800d93e:	fa02 f303 	lsl.w	r3, r2, r3
 800d942:	43da      	mvns	r2, r3
 800d944:	4b1d      	ldr	r3, [pc, #116]	@ (800d9bc <xTaskPriorityInherit+0xfc>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4013      	ands	r3, r2
 800d94a:	4a1c      	ldr	r2, [pc, #112]	@ (800d9bc <xTaskPriorityInherit+0xfc>)
 800d94c:	6013      	str	r3, [r2, #0]
 800d94e:	4b19      	ldr	r3, [pc, #100]	@ (800d9b4 <xTaskPriorityInherit+0xf4>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d95c:	2201      	movs	r2, #1
 800d95e:	409a      	lsls	r2, r3
 800d960:	4b16      	ldr	r3, [pc, #88]	@ (800d9bc <xTaskPriorityInherit+0xfc>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4313      	orrs	r3, r2
 800d966:	4a15      	ldr	r2, [pc, #84]	@ (800d9bc <xTaskPriorityInherit+0xfc>)
 800d968:	6013      	str	r3, [r2, #0]
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d96e:	4613      	mov	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4a10      	ldr	r2, [pc, #64]	@ (800d9b8 <xTaskPriorityInherit+0xf8>)
 800d978:	441a      	add	r2, r3
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	3304      	adds	r3, #4
 800d97e:	4619      	mov	r1, r3
 800d980:	4610      	mov	r0, r2
 800d982:	f7fe fb77 	bl	800c074 <vListInsertEnd>
 800d986:	e004      	b.n	800d992 <xTaskPriorityInherit+0xd2>
 800d988:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b4 <xTaskPriorityInherit+0xf4>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d992:	2301      	movs	r3, #1
 800d994:	60fb      	str	r3, [r7, #12]
 800d996:	e008      	b.n	800d9aa <xTaskPriorityInherit+0xea>
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d99c:	4b05      	ldr	r3, [pc, #20]	@ (800d9b4 <xTaskPriorityInherit+0xf4>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d201      	bcs.n	800d9aa <xTaskPriorityInherit+0xea>
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	60fb      	str	r3, [r7, #12]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	20000e90 	.word	0x20000e90
 800d9b8:	20000e94 	.word	0x20000e94
 800d9bc:	20000f98 	.word	0x20000f98

0800d9c0 <xTaskPriorityDisinherit>:
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b086      	sub	sp, #24
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	613b      	str	r3, [r7, #16]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d074      	beq.n	800dac0 <xTaskPriorityDisinherit+0x100>
 800d9d6:	4b3d      	ldr	r3, [pc, #244]	@ (800dacc <xTaskPriorityDisinherit+0x10c>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d00d      	beq.n	800d9fc <xTaskPriorityDisinherit+0x3c>
 800d9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9e4:	b672      	cpsid	i
 800d9e6:	f383 8811 	msr	BASEPRI, r3
 800d9ea:	f3bf 8f6f 	isb	sy
 800d9ee:	f3bf 8f4f 	dsb	sy
 800d9f2:	b662      	cpsie	i
 800d9f4:	60fb      	str	r3, [r7, #12]
 800d9f6:	bf00      	nop
 800d9f8:	bf00      	nop
 800d9fa:	e7fd      	b.n	800d9f8 <xTaskPriorityDisinherit+0x38>
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da00:	2b00      	cmp	r3, #0
 800da02:	d10d      	bne.n	800da20 <xTaskPriorityDisinherit+0x60>
 800da04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da08:	b672      	cpsid	i
 800da0a:	f383 8811 	msr	BASEPRI, r3
 800da0e:	f3bf 8f6f 	isb	sy
 800da12:	f3bf 8f4f 	dsb	sy
 800da16:	b662      	cpsie	i
 800da18:	60bb      	str	r3, [r7, #8]
 800da1a:	bf00      	nop
 800da1c:	bf00      	nop
 800da1e:	e7fd      	b.n	800da1c <xTaskPriorityDisinherit+0x5c>
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da24:	1e5a      	subs	r2, r3, #1
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	649a      	str	r2, [r3, #72]	@ 0x48
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da32:	429a      	cmp	r2, r3
 800da34:	d044      	beq.n	800dac0 <xTaskPriorityDisinherit+0x100>
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d140      	bne.n	800dac0 <xTaskPriorityDisinherit+0x100>
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	3304      	adds	r3, #4
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe fb73 	bl	800c12e <uxListRemove>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d115      	bne.n	800da7a <xTaskPriorityDisinherit+0xba>
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da52:	491f      	ldr	r1, [pc, #124]	@ (800dad0 <xTaskPriorityDisinherit+0x110>)
 800da54:	4613      	mov	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	440b      	add	r3, r1
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10a      	bne.n	800da7a <xTaskPriorityDisinherit+0xba>
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da68:	2201      	movs	r2, #1
 800da6a:	fa02 f303 	lsl.w	r3, r2, r3
 800da6e:	43da      	mvns	r2, r3
 800da70:	4b18      	ldr	r3, [pc, #96]	@ (800dad4 <xTaskPriorityDisinherit+0x114>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4013      	ands	r3, r2
 800da76:	4a17      	ldr	r2, [pc, #92]	@ (800dad4 <xTaskPriorityDisinherit+0x114>)
 800da78:	6013      	str	r3, [r2, #0]
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	62da      	str	r2, [r3, #44]	@ 0x2c
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da86:	f1c3 0207 	rsb	r2, r3, #7
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	619a      	str	r2, [r3, #24]
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da92:	2201      	movs	r2, #1
 800da94:	409a      	lsls	r2, r3
 800da96:	4b0f      	ldr	r3, [pc, #60]	@ (800dad4 <xTaskPriorityDisinherit+0x114>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	4a0d      	ldr	r2, [pc, #52]	@ (800dad4 <xTaskPriorityDisinherit+0x114>)
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daa4:	4613      	mov	r3, r2
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4413      	add	r3, r2
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4a08      	ldr	r2, [pc, #32]	@ (800dad0 <xTaskPriorityDisinherit+0x110>)
 800daae:	441a      	add	r2, r3
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	3304      	adds	r3, #4
 800dab4:	4619      	mov	r1, r3
 800dab6:	4610      	mov	r0, r2
 800dab8:	f7fe fadc 	bl	800c074 <vListInsertEnd>
 800dabc:	2301      	movs	r3, #1
 800dabe:	617b      	str	r3, [r7, #20]
 800dac0:	697b      	ldr	r3, [r7, #20]
 800dac2:	4618      	mov	r0, r3
 800dac4:	3718      	adds	r7, #24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	20000e90 	.word	0x20000e90
 800dad0:	20000e94 	.word	0x20000e94
 800dad4:	20000f98 	.word	0x20000f98

0800dad8 <vTaskPriorityDisinheritAfterTimeout>:
 800dad8:	b580      	push	{r7, lr}
 800dada:	b088      	sub	sp, #32
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	61bb      	str	r3, [r7, #24]
 800dae6:	2301      	movs	r3, #1
 800dae8:	617b      	str	r3, [r7, #20]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	f000 8089 	beq.w	800dc04 <vTaskPriorityDisinheritAfterTimeout+0x12c>
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10d      	bne.n	800db16 <vTaskPriorityDisinheritAfterTimeout+0x3e>
 800dafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafe:	b672      	cpsid	i
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	b662      	cpsie	i
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	bf00      	nop
 800db12:	bf00      	nop
 800db14:	e7fd      	b.n	800db12 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db1a:	683a      	ldr	r2, [r7, #0]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d902      	bls.n	800db26 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	61fb      	str	r3, [r7, #28]
 800db24:	e002      	b.n	800db2c <vTaskPriorityDisinheritAfterTimeout+0x54>
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db2a:	61fb      	str	r3, [r7, #28]
 800db2c:	69bb      	ldr	r3, [r7, #24]
 800db2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db30:	69fa      	ldr	r2, [r7, #28]
 800db32:	429a      	cmp	r2, r3
 800db34:	d066      	beq.n	800dc04 <vTaskPriorityDisinheritAfterTimeout+0x12c>
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db3a:	697a      	ldr	r2, [r7, #20]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d161      	bne.n	800dc04 <vTaskPriorityDisinheritAfterTimeout+0x12c>
 800db40:	4b32      	ldr	r3, [pc, #200]	@ (800dc0c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	69ba      	ldr	r2, [r7, #24]
 800db46:	429a      	cmp	r2, r3
 800db48:	d10d      	bne.n	800db66 <vTaskPriorityDisinheritAfterTimeout+0x8e>
 800db4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db4e:	b672      	cpsid	i
 800db50:	f383 8811 	msr	BASEPRI, r3
 800db54:	f3bf 8f6f 	isb	sy
 800db58:	f3bf 8f4f 	dsb	sy
 800db5c:	b662      	cpsie	i
 800db5e:	60bb      	str	r3, [r7, #8]
 800db60:	bf00      	nop
 800db62:	bf00      	nop
 800db64:	e7fd      	b.n	800db62 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db6a:	613b      	str	r3, [r7, #16]
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	69fa      	ldr	r2, [r7, #28]
 800db70:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	2b00      	cmp	r3, #0
 800db78:	db04      	blt.n	800db84 <vTaskPriorityDisinheritAfterTimeout+0xac>
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	f1c3 0207 	rsb	r2, r3, #7
 800db80:	69bb      	ldr	r3, [r7, #24]
 800db82:	619a      	str	r2, [r3, #24]
 800db84:	69bb      	ldr	r3, [r7, #24]
 800db86:	6959      	ldr	r1, [r3, #20]
 800db88:	693a      	ldr	r2, [r7, #16]
 800db8a:	4613      	mov	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4a1f      	ldr	r2, [pc, #124]	@ (800dc10 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800db94:	4413      	add	r3, r2
 800db96:	4299      	cmp	r1, r3
 800db98:	d134      	bne.n	800dc04 <vTaskPriorityDisinheritAfterTimeout+0x12c>
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	3304      	adds	r3, #4
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fe fac5 	bl	800c12e <uxListRemove>
 800dba4:	4603      	mov	r3, r0
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d115      	bne.n	800dbd6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbae:	4918      	ldr	r1, [pc, #96]	@ (800dc10 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	440b      	add	r3, r1
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10a      	bne.n	800dbd6 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbca:	43da      	mvns	r2, r3
 800dbcc:	4b11      	ldr	r3, [pc, #68]	@ (800dc14 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	4a10      	ldr	r2, [pc, #64]	@ (800dc14 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800dbd4:	6013      	str	r3, [r2, #0]
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbda:	2201      	movs	r2, #1
 800dbdc:	409a      	lsls	r2, r3
 800dbde:	4b0d      	ldr	r3, [pc, #52]	@ (800dc14 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	4a0b      	ldr	r2, [pc, #44]	@ (800dc14 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800dbe6:	6013      	str	r3, [r2, #0]
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbec:	4613      	mov	r3, r2
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4a06      	ldr	r2, [pc, #24]	@ (800dc10 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800dbf6:	441a      	add	r2, r3
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	4619      	mov	r1, r3
 800dbfe:	4610      	mov	r0, r2
 800dc00:	f7fe fa38 	bl	800c074 <vListInsertEnd>
 800dc04:	bf00      	nop
 800dc06:	3720      	adds	r7, #32
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	20000e90 	.word	0x20000e90
 800dc10:	20000e94 	.word	0x20000e94
 800dc14:	20000f98 	.word	0x20000f98

0800dc18 <pvTaskIncrementMutexHeldCount>:
 800dc18:	b480      	push	{r7}
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	4b07      	ldr	r3, [pc, #28]	@ (800dc3c <pvTaskIncrementMutexHeldCount+0x24>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d004      	beq.n	800dc2e <pvTaskIncrementMutexHeldCount+0x16>
 800dc24:	4b05      	ldr	r3, [pc, #20]	@ (800dc3c <pvTaskIncrementMutexHeldCount+0x24>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dc2a:	3201      	adds	r2, #1
 800dc2c:	649a      	str	r2, [r3, #72]	@ 0x48
 800dc2e:	4b03      	ldr	r3, [pc, #12]	@ (800dc3c <pvTaskIncrementMutexHeldCount+0x24>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4618      	mov	r0, r3
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	20000e90 	.word	0x20000e90

0800dc40 <prvAddCurrentTaskToDelayedList>:
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
 800dc4a:	4b29      	ldr	r3, [pc, #164]	@ (800dcf0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	60fb      	str	r3, [r7, #12]
 800dc50:	4b28      	ldr	r3, [pc, #160]	@ (800dcf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3304      	adds	r3, #4
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe fa69 	bl	800c12e <uxListRemove>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d10b      	bne.n	800dc7a <prvAddCurrentTaskToDelayedList+0x3a>
 800dc62:	4b24      	ldr	r3, [pc, #144]	@ (800dcf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc68:	2201      	movs	r2, #1
 800dc6a:	fa02 f303 	lsl.w	r3, r2, r3
 800dc6e:	43da      	mvns	r2, r3
 800dc70:	4b21      	ldr	r3, [pc, #132]	@ (800dcf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4013      	ands	r3, r2
 800dc76:	4a20      	ldr	r2, [pc, #128]	@ (800dcf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dc78:	6013      	str	r3, [r2, #0]
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc80:	d10a      	bne.n	800dc98 <prvAddCurrentTaskToDelayedList+0x58>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d007      	beq.n	800dc98 <prvAddCurrentTaskToDelayedList+0x58>
 800dc88:	4b1a      	ldr	r3, [pc, #104]	@ (800dcf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	3304      	adds	r3, #4
 800dc8e:	4619      	mov	r1, r3
 800dc90:	481a      	ldr	r0, [pc, #104]	@ (800dcfc <prvAddCurrentTaskToDelayedList+0xbc>)
 800dc92:	f7fe f9ef 	bl	800c074 <vListInsertEnd>
 800dc96:	e026      	b.n	800dce6 <prvAddCurrentTaskToDelayedList+0xa6>
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	60bb      	str	r3, [r7, #8]
 800dca0:	4b14      	ldr	r3, [pc, #80]	@ (800dcf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	605a      	str	r2, [r3, #4]
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d209      	bcs.n	800dcc4 <prvAddCurrentTaskToDelayedList+0x84>
 800dcb0:	4b13      	ldr	r3, [pc, #76]	@ (800dd00 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	4b0f      	ldr	r3, [pc, #60]	@ (800dcf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	3304      	adds	r3, #4
 800dcba:	4619      	mov	r1, r3
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	f7fe f9fd 	bl	800c0bc <vListInsert>
 800dcc2:	e010      	b.n	800dce6 <prvAddCurrentTaskToDelayedList+0xa6>
 800dcc4:	4b0f      	ldr	r3, [pc, #60]	@ (800dd04 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	4b0a      	ldr	r3, [pc, #40]	@ (800dcf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	3304      	adds	r3, #4
 800dcce:	4619      	mov	r1, r3
 800dcd0:	4610      	mov	r0, r2
 800dcd2:	f7fe f9f3 	bl	800c0bc <vListInsert>
 800dcd6:	4b0c      	ldr	r3, [pc, #48]	@ (800dd08 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	68ba      	ldr	r2, [r7, #8]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d202      	bcs.n	800dce6 <prvAddCurrentTaskToDelayedList+0xa6>
 800dce0:	4a09      	ldr	r2, [pc, #36]	@ (800dd08 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	6013      	str	r3, [r2, #0]
 800dce6:	bf00      	nop
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20000f94 	.word	0x20000f94
 800dcf4:	20000e90 	.word	0x20000e90
 800dcf8:	20000f98 	.word	0x20000f98
 800dcfc:	20000f7c 	.word	0x20000f7c
 800dd00:	20000f4c 	.word	0x20000f4c
 800dd04:	20000f48 	.word	0x20000f48
 800dd08:	20000fb0 	.word	0x20000fb0

0800dd0c <pxPortInitialiseStack>:
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3b04      	subs	r3, #4
 800dd1c:	60fb      	str	r3, [r7, #12]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dd24:	601a      	str	r2, [r3, #0]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	3b04      	subs	r3, #4
 800dd2a:	60fb      	str	r3, [r7, #12]
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	f023 0201 	bic.w	r2, r3, #1
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3b04      	subs	r3, #4
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	4a0c      	ldr	r2, [pc, #48]	@ (800dd70 <pxPortInitialiseStack+0x64>)
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	601a      	str	r2, [r3, #0]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3b14      	subs	r3, #20
 800dd46:	60fb      	str	r3, [r7, #12]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	601a      	str	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3b04      	subs	r3, #4
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f06f 0202 	mvn.w	r2, #2
 800dd5a:	601a      	str	r2, [r3, #0]
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3b20      	subs	r3, #32
 800dd60:	60fb      	str	r3, [r7, #12]
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	4618      	mov	r0, r3
 800dd66:	3714      	adds	r7, #20
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6e:	4770      	bx	lr
 800dd70:	0800dd75 	.word	0x0800dd75

0800dd74 <prvTaskExitError>:
 800dd74:	b480      	push	{r7}
 800dd76:	b085      	sub	sp, #20
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	607b      	str	r3, [r7, #4]
 800dd7e:	4b15      	ldr	r3, [pc, #84]	@ (800ddd4 <prvTaskExitError+0x60>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd86:	d00d      	beq.n	800dda4 <prvTaskExitError+0x30>
 800dd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8c:	b672      	cpsid	i
 800dd8e:	f383 8811 	msr	BASEPRI, r3
 800dd92:	f3bf 8f6f 	isb	sy
 800dd96:	f3bf 8f4f 	dsb	sy
 800dd9a:	b662      	cpsie	i
 800dd9c:	60fb      	str	r3, [r7, #12]
 800dd9e:	bf00      	nop
 800dda0:	bf00      	nop
 800dda2:	e7fd      	b.n	800dda0 <prvTaskExitError+0x2c>
 800dda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda8:	b672      	cpsid	i
 800ddaa:	f383 8811 	msr	BASEPRI, r3
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f3bf 8f4f 	dsb	sy
 800ddb6:	b662      	cpsie	i
 800ddb8:	60bb      	str	r3, [r7, #8]
 800ddba:	bf00      	nop
 800ddbc:	bf00      	nop
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d0fc      	beq.n	800ddbe <prvTaskExitError+0x4a>
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop
 800ddc8:	3714      	adds	r7, #20
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	20000058 	.word	0x20000058
	...

0800dde0 <SVC_Handler>:
 800dde0:	4b07      	ldr	r3, [pc, #28]	@ (800de00 <pxCurrentTCBConst2>)
 800dde2:	6819      	ldr	r1, [r3, #0]
 800dde4:	6808      	ldr	r0, [r1, #0]
 800dde6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddea:	f380 8809 	msr	PSP, r0
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f04f 0000 	mov.w	r0, #0
 800ddf6:	f380 8811 	msr	BASEPRI, r0
 800ddfa:	4770      	bx	lr
 800ddfc:	f3af 8000 	nop.w

0800de00 <pxCurrentTCBConst2>:
 800de00:	20000e90 	.word	0x20000e90
 800de04:	bf00      	nop
 800de06:	bf00      	nop

0800de08 <prvPortStartFirstTask>:
 800de08:	4808      	ldr	r0, [pc, #32]	@ (800de2c <prvPortStartFirstTask+0x24>)
 800de0a:	6800      	ldr	r0, [r0, #0]
 800de0c:	6800      	ldr	r0, [r0, #0]
 800de0e:	f380 8808 	msr	MSP, r0
 800de12:	f04f 0000 	mov.w	r0, #0
 800de16:	f380 8814 	msr	CONTROL, r0
 800de1a:	b662      	cpsie	i
 800de1c:	b661      	cpsie	f
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	df00      	svc	0
 800de28:	bf00      	nop
 800de2a:	bf00      	nop
 800de2c:	e000ed08 	.word	0xe000ed08

0800de30 <xPortStartScheduler>:
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	4b37      	ldr	r3, [pc, #220]	@ (800df14 <xPortStartScheduler+0xe4>)
 800de38:	60fb      	str	r3, [r7, #12]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	607b      	str	r3, [r7, #4]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	22ff      	movs	r2, #255	@ 0xff
 800de46:	701a      	strb	r2, [r3, #0]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	70fb      	strb	r3, [r7, #3]
 800de50:	78fb      	ldrb	r3, [r7, #3]
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800de58:	b2da      	uxtb	r2, r3
 800de5a:	4b2f      	ldr	r3, [pc, #188]	@ (800df18 <xPortStartScheduler+0xe8>)
 800de5c:	701a      	strb	r2, [r3, #0]
 800de5e:	4b2f      	ldr	r3, [pc, #188]	@ (800df1c <xPortStartScheduler+0xec>)
 800de60:	2207      	movs	r2, #7
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	e009      	b.n	800de7a <xPortStartScheduler+0x4a>
 800de66:	4b2d      	ldr	r3, [pc, #180]	@ (800df1c <xPortStartScheduler+0xec>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	3b01      	subs	r3, #1
 800de6c:	4a2b      	ldr	r2, [pc, #172]	@ (800df1c <xPortStartScheduler+0xec>)
 800de6e:	6013      	str	r3, [r2, #0]
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	b2db      	uxtb	r3, r3
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	b2db      	uxtb	r3, r3
 800de78:	70fb      	strb	r3, [r7, #3]
 800de7a:	78fb      	ldrb	r3, [r7, #3]
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de82:	2b80      	cmp	r3, #128	@ 0x80
 800de84:	d0ef      	beq.n	800de66 <xPortStartScheduler+0x36>
 800de86:	4b25      	ldr	r3, [pc, #148]	@ (800df1c <xPortStartScheduler+0xec>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f1c3 0307 	rsb	r3, r3, #7
 800de8e:	2b04      	cmp	r3, #4
 800de90:	d00d      	beq.n	800deae <xPortStartScheduler+0x7e>
 800de92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de96:	b672      	cpsid	i
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	b662      	cpsie	i
 800dea6:	60bb      	str	r3, [r7, #8]
 800dea8:	bf00      	nop
 800deaa:	bf00      	nop
 800deac:	e7fd      	b.n	800deaa <xPortStartScheduler+0x7a>
 800deae:	4b1b      	ldr	r3, [pc, #108]	@ (800df1c <xPortStartScheduler+0xec>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	021b      	lsls	r3, r3, #8
 800deb4:	4a19      	ldr	r2, [pc, #100]	@ (800df1c <xPortStartScheduler+0xec>)
 800deb6:	6013      	str	r3, [r2, #0]
 800deb8:	4b18      	ldr	r3, [pc, #96]	@ (800df1c <xPortStartScheduler+0xec>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800dec0:	4a16      	ldr	r2, [pc, #88]	@ (800df1c <xPortStartScheduler+0xec>)
 800dec2:	6013      	str	r3, [r2, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	b2da      	uxtb	r2, r3
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	701a      	strb	r2, [r3, #0]
 800decc:	4b14      	ldr	r3, [pc, #80]	@ (800df20 <xPortStartScheduler+0xf0>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a13      	ldr	r2, [pc, #76]	@ (800df20 <xPortStartScheduler+0xf0>)
 800ded2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	4b11      	ldr	r3, [pc, #68]	@ (800df20 <xPortStartScheduler+0xf0>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a10      	ldr	r2, [pc, #64]	@ (800df20 <xPortStartScheduler+0xf0>)
 800dede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800dee2:	6013      	str	r3, [r2, #0]
 800dee4:	f000 f8dc 	bl	800e0a0 <vPortSetupTimerInterrupt>
 800dee8:	4b0e      	ldr	r3, [pc, #56]	@ (800df24 <xPortStartScheduler+0xf4>)
 800deea:	2200      	movs	r2, #0
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	f000 f8fb 	bl	800e0e8 <vPortEnableVFP>
 800def2:	4b0d      	ldr	r3, [pc, #52]	@ (800df28 <xPortStartScheduler+0xf8>)
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4a0c      	ldr	r2, [pc, #48]	@ (800df28 <xPortStartScheduler+0xf8>)
 800def8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800defc:	6013      	str	r3, [r2, #0]
 800defe:	f7ff ff83 	bl	800de08 <prvPortStartFirstTask>
 800df02:	f7ff fa63 	bl	800d3cc <vTaskSwitchContext>
 800df06:	f7ff ff35 	bl	800dd74 <prvTaskExitError>
 800df0a:	2300      	movs	r3, #0
 800df0c:	4618      	mov	r0, r3
 800df0e:	3710      	adds	r7, #16
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	e000e400 	.word	0xe000e400
 800df18:	20000fbc 	.word	0x20000fbc
 800df1c:	20000fc0 	.word	0x20000fc0
 800df20:	e000ed20 	.word	0xe000ed20
 800df24:	20000058 	.word	0x20000058
 800df28:	e000ef34 	.word	0xe000ef34

0800df2c <vPortEnterCritical>:
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df36:	b672      	cpsid	i
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	b662      	cpsie	i
 800df46:	607b      	str	r3, [r7, #4]
 800df48:	bf00      	nop
 800df4a:	4b11      	ldr	r3, [pc, #68]	@ (800df90 <vPortEnterCritical+0x64>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	3301      	adds	r3, #1
 800df50:	4a0f      	ldr	r2, [pc, #60]	@ (800df90 <vPortEnterCritical+0x64>)
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	4b0e      	ldr	r3, [pc, #56]	@ (800df90 <vPortEnterCritical+0x64>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d112      	bne.n	800df82 <vPortEnterCritical+0x56>
 800df5c:	4b0d      	ldr	r3, [pc, #52]	@ (800df94 <vPortEnterCritical+0x68>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	d00d      	beq.n	800df82 <vPortEnterCritical+0x56>
 800df66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df6a:	b672      	cpsid	i
 800df6c:	f383 8811 	msr	BASEPRI, r3
 800df70:	f3bf 8f6f 	isb	sy
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	b662      	cpsie	i
 800df7a:	603b      	str	r3, [r7, #0]
 800df7c:	bf00      	nop
 800df7e:	bf00      	nop
 800df80:	e7fd      	b.n	800df7e <vPortEnterCritical+0x52>
 800df82:	bf00      	nop
 800df84:	370c      	adds	r7, #12
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	20000058 	.word	0x20000058
 800df94:	e000ed04 	.word	0xe000ed04

0800df98 <vPortExitCritical>:
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	4b13      	ldr	r3, [pc, #76]	@ (800dfec <vPortExitCritical+0x54>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10d      	bne.n	800dfc2 <vPortExitCritical+0x2a>
 800dfa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfaa:	b672      	cpsid	i
 800dfac:	f383 8811 	msr	BASEPRI, r3
 800dfb0:	f3bf 8f6f 	isb	sy
 800dfb4:	f3bf 8f4f 	dsb	sy
 800dfb8:	b662      	cpsie	i
 800dfba:	607b      	str	r3, [r7, #4]
 800dfbc:	bf00      	nop
 800dfbe:	bf00      	nop
 800dfc0:	e7fd      	b.n	800dfbe <vPortExitCritical+0x26>
 800dfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800dfec <vPortExitCritical+0x54>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	4a08      	ldr	r2, [pc, #32]	@ (800dfec <vPortExitCritical+0x54>)
 800dfca:	6013      	str	r3, [r2, #0]
 800dfcc:	4b07      	ldr	r3, [pc, #28]	@ (800dfec <vPortExitCritical+0x54>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d105      	bne.n	800dfe0 <vPortExitCritical+0x48>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	603b      	str	r3, [r7, #0]
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	f383 8811 	msr	BASEPRI, r3
 800dfde:	bf00      	nop
 800dfe0:	bf00      	nop
 800dfe2:	370c      	adds	r7, #12
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	20000058 	.word	0x20000058

0800dff0 <PendSV_Handler>:
 800dff0:	f3ef 8009 	mrs	r0, PSP
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	4b15      	ldr	r3, [pc, #84]	@ (800e050 <pxCurrentTCBConst>)
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	f01e 0f10 	tst.w	lr, #16
 800e000:	bf08      	it	eq
 800e002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00a:	6010      	str	r0, [r2, #0]
 800e00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e014:	b672      	cpsid	i
 800e016:	f380 8811 	msr	BASEPRI, r0
 800e01a:	f3bf 8f4f 	dsb	sy
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	b662      	cpsie	i
 800e024:	f7ff f9d2 	bl	800d3cc <vTaskSwitchContext>
 800e028:	f04f 0000 	mov.w	r0, #0
 800e02c:	f380 8811 	msr	BASEPRI, r0
 800e030:	bc09      	pop	{r0, r3}
 800e032:	6819      	ldr	r1, [r3, #0]
 800e034:	6808      	ldr	r0, [r1, #0]
 800e036:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03a:	f01e 0f10 	tst.w	lr, #16
 800e03e:	bf08      	it	eq
 800e040:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e044:	f380 8809 	msr	PSP, r0
 800e048:	f3bf 8f6f 	isb	sy
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop

0800e050 <pxCurrentTCBConst>:
 800e050:	20000e90 	.word	0x20000e90
 800e054:	bf00      	nop
 800e056:	bf00      	nop

0800e058 <SysTick_Handler>:
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	b672      	cpsid	i
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	b662      	cpsie	i
 800e072:	607b      	str	r3, [r7, #4]
 800e074:	bf00      	nop
 800e076:	f7ff f8ed 	bl	800d254 <xTaskIncrementTick>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d003      	beq.n	800e088 <SysTick_Handler+0x30>
 800e080:	4b06      	ldr	r3, [pc, #24]	@ (800e09c <SysTick_Handler+0x44>)
 800e082:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e086:	601a      	str	r2, [r3, #0]
 800e088:	2300      	movs	r3, #0
 800e08a:	603b      	str	r3, [r7, #0]
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	bf00      	nop
 800e094:	bf00      	nop
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	e000ed04 	.word	0xe000ed04

0800e0a0 <vPortSetupTimerInterrupt>:
 800e0a0:	b480      	push	{r7}
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d4 <vPortSetupTimerInterrupt+0x34>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d8 <vPortSetupTimerInterrupt+0x38>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	601a      	str	r2, [r3, #0]
 800e0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e0dc <vPortSetupTimerInterrupt+0x3c>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a0a      	ldr	r2, [pc, #40]	@ (800e0e0 <vPortSetupTimerInterrupt+0x40>)
 800e0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e0ba:	099b      	lsrs	r3, r3, #6
 800e0bc:	4a09      	ldr	r2, [pc, #36]	@ (800e0e4 <vPortSetupTimerInterrupt+0x44>)
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	6013      	str	r3, [r2, #0]
 800e0c2:	4b04      	ldr	r3, [pc, #16]	@ (800e0d4 <vPortSetupTimerInterrupt+0x34>)
 800e0c4:	2207      	movs	r2, #7
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	bf00      	nop
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	e000e010 	.word	0xe000e010
 800e0d8:	e000e018 	.word	0xe000e018
 800e0dc:	2000004c 	.word	0x2000004c
 800e0e0:	10624dd3 	.word	0x10624dd3
 800e0e4:	e000e014 	.word	0xe000e014

0800e0e8 <vPortEnableVFP>:
 800e0e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e0f8 <vPortEnableVFP+0x10>
 800e0ec:	6801      	ldr	r1, [r0, #0]
 800e0ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e0f2:	6001      	str	r1, [r0, #0]
 800e0f4:	4770      	bx	lr
 800e0f6:	bf00      	nop
 800e0f8:	e000ed88 	.word	0xe000ed88

0800e0fc <pvPortMalloc>:
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08a      	sub	sp, #40	@ 0x28
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	2300      	movs	r3, #0
 800e106:	61fb      	str	r3, [r7, #28]
 800e108:	f7fe ffe6 	bl	800d0d8 <vTaskSuspendAll>
 800e10c:	4b5d      	ldr	r3, [pc, #372]	@ (800e284 <pvPortMalloc+0x188>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d101      	bne.n	800e118 <pvPortMalloc+0x1c>
 800e114:	f000 f920 	bl	800e358 <prvHeapInit>
 800e118:	4b5b      	ldr	r3, [pc, #364]	@ (800e288 <pvPortMalloc+0x18c>)
 800e11a:	681a      	ldr	r2, [r3, #0]
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4013      	ands	r3, r2
 800e120:	2b00      	cmp	r3, #0
 800e122:	f040 8094 	bne.w	800e24e <pvPortMalloc+0x152>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d020      	beq.n	800e16e <pvPortMalloc+0x72>
 800e12c:	2208      	movs	r2, #8
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4413      	add	r3, r2
 800e132:	607b      	str	r3, [r7, #4]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d017      	beq.n	800e16e <pvPortMalloc+0x72>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f023 0307 	bic.w	r3, r3, #7
 800e144:	3308      	adds	r3, #8
 800e146:	607b      	str	r3, [r7, #4]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f003 0307 	and.w	r3, r3, #7
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00d      	beq.n	800e16e <pvPortMalloc+0x72>
 800e152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e156:	b672      	cpsid	i
 800e158:	f383 8811 	msr	BASEPRI, r3
 800e15c:	f3bf 8f6f 	isb	sy
 800e160:	f3bf 8f4f 	dsb	sy
 800e164:	b662      	cpsie	i
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	bf00      	nop
 800e16a:	bf00      	nop
 800e16c:	e7fd      	b.n	800e16a <pvPortMalloc+0x6e>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d06c      	beq.n	800e24e <pvPortMalloc+0x152>
 800e174:	4b45      	ldr	r3, [pc, #276]	@ (800e28c <pvPortMalloc+0x190>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d867      	bhi.n	800e24e <pvPortMalloc+0x152>
 800e17e:	4b44      	ldr	r3, [pc, #272]	@ (800e290 <pvPortMalloc+0x194>)
 800e180:	623b      	str	r3, [r7, #32]
 800e182:	4b43      	ldr	r3, [pc, #268]	@ (800e290 <pvPortMalloc+0x194>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	627b      	str	r3, [r7, #36]	@ 0x24
 800e188:	e004      	b.n	800e194 <pvPortMalloc+0x98>
 800e18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18c:	623b      	str	r3, [r7, #32]
 800e18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	627b      	str	r3, [r7, #36]	@ 0x24
 800e194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d903      	bls.n	800e1a6 <pvPortMalloc+0xaa>
 800e19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1f1      	bne.n	800e18a <pvPortMalloc+0x8e>
 800e1a6:	4b37      	ldr	r3, [pc, #220]	@ (800e284 <pvPortMalloc+0x188>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d04e      	beq.n	800e24e <pvPortMalloc+0x152>
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2208      	movs	r2, #8
 800e1b6:	4413      	add	r3, r2
 800e1b8:	61fb      	str	r3, [r7, #28]
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	601a      	str	r2, [r3, #0]
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c4:	685a      	ldr	r2, [r3, #4]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	1ad2      	subs	r2, r2, r3
 800e1ca:	2308      	movs	r3, #8
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	429a      	cmp	r2, r3
 800e1d0:	d922      	bls.n	800e218 <pvPortMalloc+0x11c>
 800e1d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	61bb      	str	r3, [r7, #24]
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	f003 0307 	and.w	r3, r3, #7
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00d      	beq.n	800e200 <pvPortMalloc+0x104>
 800e1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1e8:	b672      	cpsid	i
 800e1ea:	f383 8811 	msr	BASEPRI, r3
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	b662      	cpsie	i
 800e1f8:	613b      	str	r3, [r7, #16]
 800e1fa:	bf00      	nop
 800e1fc:	bf00      	nop
 800e1fe:	e7fd      	b.n	800e1fc <pvPortMalloc+0x100>
 800e200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e202:	685a      	ldr	r2, [r3, #4]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	1ad2      	subs	r2, r2, r3
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	605a      	str	r2, [r3, #4]
 800e20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	605a      	str	r2, [r3, #4]
 800e212:	69b8      	ldr	r0, [r7, #24]
 800e214:	f000 f902 	bl	800e41c <prvInsertBlockIntoFreeList>
 800e218:	4b1c      	ldr	r3, [pc, #112]	@ (800e28c <pvPortMalloc+0x190>)
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	1ad3      	subs	r3, r2, r3
 800e222:	4a1a      	ldr	r2, [pc, #104]	@ (800e28c <pvPortMalloc+0x190>)
 800e224:	6013      	str	r3, [r2, #0]
 800e226:	4b19      	ldr	r3, [pc, #100]	@ (800e28c <pvPortMalloc+0x190>)
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	4b1a      	ldr	r3, [pc, #104]	@ (800e294 <pvPortMalloc+0x198>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d203      	bcs.n	800e23a <pvPortMalloc+0x13e>
 800e232:	4b16      	ldr	r3, [pc, #88]	@ (800e28c <pvPortMalloc+0x190>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	4a17      	ldr	r2, [pc, #92]	@ (800e294 <pvPortMalloc+0x198>)
 800e238:	6013      	str	r3, [r2, #0]
 800e23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23c:	685a      	ldr	r2, [r3, #4]
 800e23e:	4b12      	ldr	r3, [pc, #72]	@ (800e288 <pvPortMalloc+0x18c>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	431a      	orrs	r2, r3
 800e244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e246:	605a      	str	r2, [r3, #4]
 800e248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24a:	2200      	movs	r2, #0
 800e24c:	601a      	str	r2, [r3, #0]
 800e24e:	f7fe ff51 	bl	800d0f4 <xTaskResumeAll>
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	f003 0307 	and.w	r3, r3, #7
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00d      	beq.n	800e278 <pvPortMalloc+0x17c>
 800e25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e260:	b672      	cpsid	i
 800e262:	f383 8811 	msr	BASEPRI, r3
 800e266:	f3bf 8f6f 	isb	sy
 800e26a:	f3bf 8f4f 	dsb	sy
 800e26e:	b662      	cpsie	i
 800e270:	60fb      	str	r3, [r7, #12]
 800e272:	bf00      	nop
 800e274:	bf00      	nop
 800e276:	e7fd      	b.n	800e274 <pvPortMalloc+0x178>
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	4618      	mov	r0, r3
 800e27c:	3728      	adds	r7, #40	@ 0x28
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	20004bcc 	.word	0x20004bcc
 800e288:	20004bd8 	.word	0x20004bd8
 800e28c:	20004bd0 	.word	0x20004bd0
 800e290:	20004bc4 	.word	0x20004bc4
 800e294:	20004bd4 	.word	0x20004bd4

0800e298 <vPortFree>:
 800e298:	b580      	push	{r7, lr}
 800e29a:	b086      	sub	sp, #24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	617b      	str	r3, [r7, #20]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d04e      	beq.n	800e348 <vPortFree+0xb0>
 800e2aa:	2308      	movs	r3, #8
 800e2ac:	425b      	negs	r3, r3
 800e2ae:	697a      	ldr	r2, [r7, #20]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	617b      	str	r3, [r7, #20]
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	613b      	str	r3, [r7, #16]
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	4b24      	ldr	r3, [pc, #144]	@ (800e350 <vPortFree+0xb8>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4013      	ands	r3, r2
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d10d      	bne.n	800e2e2 <vPortFree+0x4a>
 800e2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ca:	b672      	cpsid	i
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	b662      	cpsie	i
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	bf00      	nop
 800e2de:	bf00      	nop
 800e2e0:	e7fd      	b.n	800e2de <vPortFree+0x46>
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00d      	beq.n	800e306 <vPortFree+0x6e>
 800e2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ee:	b672      	cpsid	i
 800e2f0:	f383 8811 	msr	BASEPRI, r3
 800e2f4:	f3bf 8f6f 	isb	sy
 800e2f8:	f3bf 8f4f 	dsb	sy
 800e2fc:	b662      	cpsie	i
 800e2fe:	60bb      	str	r3, [r7, #8]
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	e7fd      	b.n	800e302 <vPortFree+0x6a>
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	685a      	ldr	r2, [r3, #4]
 800e30a:	4b11      	ldr	r3, [pc, #68]	@ (800e350 <vPortFree+0xb8>)
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4013      	ands	r3, r2
 800e310:	2b00      	cmp	r3, #0
 800e312:	d019      	beq.n	800e348 <vPortFree+0xb0>
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d115      	bne.n	800e348 <vPortFree+0xb0>
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	685a      	ldr	r2, [r3, #4]
 800e320:	4b0b      	ldr	r3, [pc, #44]	@ (800e350 <vPortFree+0xb8>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	43db      	mvns	r3, r3
 800e326:	401a      	ands	r2, r3
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	605a      	str	r2, [r3, #4]
 800e32c:	f7fe fed4 	bl	800d0d8 <vTaskSuspendAll>
 800e330:	693b      	ldr	r3, [r7, #16]
 800e332:	685a      	ldr	r2, [r3, #4]
 800e334:	4b07      	ldr	r3, [pc, #28]	@ (800e354 <vPortFree+0xbc>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4413      	add	r3, r2
 800e33a:	4a06      	ldr	r2, [pc, #24]	@ (800e354 <vPortFree+0xbc>)
 800e33c:	6013      	str	r3, [r2, #0]
 800e33e:	6938      	ldr	r0, [r7, #16]
 800e340:	f000 f86c 	bl	800e41c <prvInsertBlockIntoFreeList>
 800e344:	f7fe fed6 	bl	800d0f4 <xTaskResumeAll>
 800e348:	bf00      	nop
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	20004bd8 	.word	0x20004bd8
 800e354:	20004bd0 	.word	0x20004bd0

0800e358 <prvHeapInit>:
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e362:	60bb      	str	r3, [r7, #8]
 800e364:	4b27      	ldr	r3, [pc, #156]	@ (800e404 <prvHeapInit+0xac>)
 800e366:	60fb      	str	r3, [r7, #12]
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f003 0307 	and.w	r3, r3, #7
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00c      	beq.n	800e38c <prvHeapInit+0x34>
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	3307      	adds	r3, #7
 800e376:	60fb      	str	r3, [r7, #12]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f023 0307 	bic.w	r3, r3, #7
 800e37e:	60fb      	str	r3, [r7, #12]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	1ad3      	subs	r3, r2, r3
 800e386:	4a1f      	ldr	r2, [pc, #124]	@ (800e404 <prvHeapInit+0xac>)
 800e388:	4413      	add	r3, r2
 800e38a:	60bb      	str	r3, [r7, #8]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	607b      	str	r3, [r7, #4]
 800e390:	4a1d      	ldr	r2, [pc, #116]	@ (800e408 <prvHeapInit+0xb0>)
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6013      	str	r3, [r2, #0]
 800e396:	4b1c      	ldr	r3, [pc, #112]	@ (800e408 <prvHeapInit+0xb0>)
 800e398:	2200      	movs	r2, #0
 800e39a:	605a      	str	r2, [r3, #4]
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	68ba      	ldr	r2, [r7, #8]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	60fb      	str	r3, [r7, #12]
 800e3a4:	2208      	movs	r2, #8
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	1a9b      	subs	r3, r3, r2
 800e3aa:	60fb      	str	r3, [r7, #12]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f023 0307 	bic.w	r3, r3, #7
 800e3b2:	60fb      	str	r3, [r7, #12]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	4a15      	ldr	r2, [pc, #84]	@ (800e40c <prvHeapInit+0xb4>)
 800e3b8:	6013      	str	r3, [r2, #0]
 800e3ba:	4b14      	ldr	r3, [pc, #80]	@ (800e40c <prvHeapInit+0xb4>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	605a      	str	r2, [r3, #4]
 800e3c2:	4b12      	ldr	r3, [pc, #72]	@ (800e40c <prvHeapInit+0xb4>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	601a      	str	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	603b      	str	r3, [r7, #0]
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	1ad2      	subs	r2, r2, r3
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	605a      	str	r2, [r3, #4]
 800e3d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e40c <prvHeapInit+0xb4>)
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	4a0a      	ldr	r2, [pc, #40]	@ (800e410 <prvHeapInit+0xb8>)
 800e3e6:	6013      	str	r3, [r2, #0]
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	4a09      	ldr	r2, [pc, #36]	@ (800e414 <prvHeapInit+0xbc>)
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	4b09      	ldr	r3, [pc, #36]	@ (800e418 <prvHeapInit+0xc0>)
 800e3f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	bf00      	nop
 800e3fa:	3714      	adds	r7, #20
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr
 800e404:	20000fc4 	.word	0x20000fc4
 800e408:	20004bc4 	.word	0x20004bc4
 800e40c:	20004bcc 	.word	0x20004bcc
 800e410:	20004bd4 	.word	0x20004bd4
 800e414:	20004bd0 	.word	0x20004bd0
 800e418:	20004bd8 	.word	0x20004bd8

0800e41c <prvInsertBlockIntoFreeList>:
 800e41c:	b480      	push	{r7}
 800e41e:	b085      	sub	sp, #20
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	4b28      	ldr	r3, [pc, #160]	@ (800e4c8 <prvInsertBlockIntoFreeList+0xac>)
 800e426:	60fb      	str	r3, [r7, #12]
 800e428:	e002      	b.n	800e430 <prvInsertBlockIntoFreeList+0x14>
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	60fb      	str	r3, [r7, #12]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	429a      	cmp	r2, r3
 800e438:	d8f7      	bhi.n	800e42a <prvInsertBlockIntoFreeList+0xe>
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	60bb      	str	r3, [r7, #8]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	4413      	add	r3, r2
 800e446:	687a      	ldr	r2, [r7, #4]
 800e448:	429a      	cmp	r2, r3
 800e44a:	d108      	bne.n	800e45e <prvInsertBlockIntoFreeList+0x42>
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	685a      	ldr	r2, [r3, #4]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	441a      	add	r2, r3
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	605a      	str	r2, [r3, #4]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	607b      	str	r3, [r7, #4]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	60bb      	str	r3, [r7, #8]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	68ba      	ldr	r2, [r7, #8]
 800e468:	441a      	add	r2, r3
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d118      	bne.n	800e4a4 <prvInsertBlockIntoFreeList+0x88>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	4b15      	ldr	r3, [pc, #84]	@ (800e4cc <prvInsertBlockIntoFreeList+0xb0>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d00d      	beq.n	800e49a <prvInsertBlockIntoFreeList+0x7e>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	685a      	ldr	r2, [r3, #4]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	441a      	add	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	605a      	str	r2, [r3, #4]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	601a      	str	r2, [r3, #0]
 800e498:	e008      	b.n	800e4ac <prvInsertBlockIntoFreeList+0x90>
 800e49a:	4b0c      	ldr	r3, [pc, #48]	@ (800e4cc <prvInsertBlockIntoFreeList+0xb0>)
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	e003      	b.n	800e4ac <prvInsertBlockIntoFreeList+0x90>
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d002      	beq.n	800e4ba <prvInsertBlockIntoFreeList+0x9e>
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	601a      	str	r2, [r3, #0]
 800e4ba:	bf00      	nop
 800e4bc:	3714      	adds	r7, #20
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	20004bc4 	.word	0x20004bc4
 800e4cc:	20004bcc 	.word	0x20004bcc

0800e4d0 <rand>:
 800e4d0:	4b16      	ldr	r3, [pc, #88]	@ (800e52c <rand+0x5c>)
 800e4d2:	b510      	push	{r4, lr}
 800e4d4:	681c      	ldr	r4, [r3, #0]
 800e4d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e4d8:	b9b3      	cbnz	r3, 800e508 <rand+0x38>
 800e4da:	2018      	movs	r0, #24
 800e4dc:	f000 faa4 	bl	800ea28 <malloc>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	6320      	str	r0, [r4, #48]	@ 0x30
 800e4e4:	b920      	cbnz	r0, 800e4f0 <rand+0x20>
 800e4e6:	4b12      	ldr	r3, [pc, #72]	@ (800e530 <rand+0x60>)
 800e4e8:	4812      	ldr	r0, [pc, #72]	@ (800e534 <rand+0x64>)
 800e4ea:	2152      	movs	r1, #82	@ 0x52
 800e4ec:	f000 fa34 	bl	800e958 <__assert_func>
 800e4f0:	4911      	ldr	r1, [pc, #68]	@ (800e538 <rand+0x68>)
 800e4f2:	4b12      	ldr	r3, [pc, #72]	@ (800e53c <rand+0x6c>)
 800e4f4:	e9c0 1300 	strd	r1, r3, [r0]
 800e4f8:	4b11      	ldr	r3, [pc, #68]	@ (800e540 <rand+0x70>)
 800e4fa:	6083      	str	r3, [r0, #8]
 800e4fc:	230b      	movs	r3, #11
 800e4fe:	8183      	strh	r3, [r0, #12]
 800e500:	2100      	movs	r1, #0
 800e502:	2001      	movs	r0, #1
 800e504:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e508:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e50a:	480e      	ldr	r0, [pc, #56]	@ (800e544 <rand+0x74>)
 800e50c:	690b      	ldr	r3, [r1, #16]
 800e50e:	694c      	ldr	r4, [r1, #20]
 800e510:	4a0d      	ldr	r2, [pc, #52]	@ (800e548 <rand+0x78>)
 800e512:	4358      	muls	r0, r3
 800e514:	fb02 0004 	mla	r0, r2, r4, r0
 800e518:	fba3 3202 	umull	r3, r2, r3, r2
 800e51c:	3301      	adds	r3, #1
 800e51e:	eb40 0002 	adc.w	r0, r0, r2
 800e522:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e526:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e52a:	bd10      	pop	{r4, pc}
 800e52c:	20000068 	.word	0x20000068
 800e530:	0801ddb0 	.word	0x0801ddb0
 800e534:	0801ddc7 	.word	0x0801ddc7
 800e538:	abcd330e 	.word	0xabcd330e
 800e53c:	e66d1234 	.word	0xe66d1234
 800e540:	0005deec 	.word	0x0005deec
 800e544:	5851f42d 	.word	0x5851f42d
 800e548:	4c957f2d 	.word	0x4c957f2d

0800e54c <std>:
 800e54c:	2300      	movs	r3, #0
 800e54e:	b510      	push	{r4, lr}
 800e550:	4604      	mov	r4, r0
 800e552:	e9c0 3300 	strd	r3, r3, [r0]
 800e556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e55a:	6083      	str	r3, [r0, #8]
 800e55c:	8181      	strh	r1, [r0, #12]
 800e55e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e560:	81c2      	strh	r2, [r0, #14]
 800e562:	6183      	str	r3, [r0, #24]
 800e564:	4619      	mov	r1, r3
 800e566:	2208      	movs	r2, #8
 800e568:	305c      	adds	r0, #92	@ 0x5c
 800e56a:	f000 f914 	bl	800e796 <memset>
 800e56e:	4b0d      	ldr	r3, [pc, #52]	@ (800e5a4 <std+0x58>)
 800e570:	6263      	str	r3, [r4, #36]	@ 0x24
 800e572:	4b0d      	ldr	r3, [pc, #52]	@ (800e5a8 <std+0x5c>)
 800e574:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e576:	4b0d      	ldr	r3, [pc, #52]	@ (800e5ac <std+0x60>)
 800e578:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e57a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b0 <std+0x64>)
 800e57c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e57e:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b4 <std+0x68>)
 800e580:	6224      	str	r4, [r4, #32]
 800e582:	429c      	cmp	r4, r3
 800e584:	d006      	beq.n	800e594 <std+0x48>
 800e586:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e58a:	4294      	cmp	r4, r2
 800e58c:	d002      	beq.n	800e594 <std+0x48>
 800e58e:	33d0      	adds	r3, #208	@ 0xd0
 800e590:	429c      	cmp	r4, r3
 800e592:	d105      	bne.n	800e5a0 <std+0x54>
 800e594:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e59c:	f000 b9ca 	b.w	800e934 <__retarget_lock_init_recursive>
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	bf00      	nop
 800e5a4:	0800e711 	.word	0x0800e711
 800e5a8:	0800e733 	.word	0x0800e733
 800e5ac:	0800e76b 	.word	0x0800e76b
 800e5b0:	0800e78f 	.word	0x0800e78f
 800e5b4:	20004bdc 	.word	0x20004bdc

0800e5b8 <stdio_exit_handler>:
 800e5b8:	4a02      	ldr	r2, [pc, #8]	@ (800e5c4 <stdio_exit_handler+0xc>)
 800e5ba:	4903      	ldr	r1, [pc, #12]	@ (800e5c8 <stdio_exit_handler+0x10>)
 800e5bc:	4803      	ldr	r0, [pc, #12]	@ (800e5cc <stdio_exit_handler+0x14>)
 800e5be:	f000 b869 	b.w	800e694 <_fwalk_sglue>
 800e5c2:	bf00      	nop
 800e5c4:	2000005c 	.word	0x2000005c
 800e5c8:	0800f269 	.word	0x0800f269
 800e5cc:	2000006c 	.word	0x2000006c

0800e5d0 <cleanup_stdio>:
 800e5d0:	6841      	ldr	r1, [r0, #4]
 800e5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e604 <cleanup_stdio+0x34>)
 800e5d4:	4299      	cmp	r1, r3
 800e5d6:	b510      	push	{r4, lr}
 800e5d8:	4604      	mov	r4, r0
 800e5da:	d001      	beq.n	800e5e0 <cleanup_stdio+0x10>
 800e5dc:	f000 fe44 	bl	800f268 <_fflush_r>
 800e5e0:	68a1      	ldr	r1, [r4, #8]
 800e5e2:	4b09      	ldr	r3, [pc, #36]	@ (800e608 <cleanup_stdio+0x38>)
 800e5e4:	4299      	cmp	r1, r3
 800e5e6:	d002      	beq.n	800e5ee <cleanup_stdio+0x1e>
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f000 fe3d 	bl	800f268 <_fflush_r>
 800e5ee:	68e1      	ldr	r1, [r4, #12]
 800e5f0:	4b06      	ldr	r3, [pc, #24]	@ (800e60c <cleanup_stdio+0x3c>)
 800e5f2:	4299      	cmp	r1, r3
 800e5f4:	d004      	beq.n	800e600 <cleanup_stdio+0x30>
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5fc:	f000 be34 	b.w	800f268 <_fflush_r>
 800e600:	bd10      	pop	{r4, pc}
 800e602:	bf00      	nop
 800e604:	20004bdc 	.word	0x20004bdc
 800e608:	20004c44 	.word	0x20004c44
 800e60c:	20004cac 	.word	0x20004cac

0800e610 <global_stdio_init.part.0>:
 800e610:	b510      	push	{r4, lr}
 800e612:	4b0b      	ldr	r3, [pc, #44]	@ (800e640 <global_stdio_init.part.0+0x30>)
 800e614:	4c0b      	ldr	r4, [pc, #44]	@ (800e644 <global_stdio_init.part.0+0x34>)
 800e616:	4a0c      	ldr	r2, [pc, #48]	@ (800e648 <global_stdio_init.part.0+0x38>)
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	4620      	mov	r0, r4
 800e61c:	2200      	movs	r2, #0
 800e61e:	2104      	movs	r1, #4
 800e620:	f7ff ff94 	bl	800e54c <std>
 800e624:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e628:	2201      	movs	r2, #1
 800e62a:	2109      	movs	r1, #9
 800e62c:	f7ff ff8e 	bl	800e54c <std>
 800e630:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e634:	2202      	movs	r2, #2
 800e636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e63a:	2112      	movs	r1, #18
 800e63c:	f7ff bf86 	b.w	800e54c <std>
 800e640:	20004d14 	.word	0x20004d14
 800e644:	20004bdc 	.word	0x20004bdc
 800e648:	0800e5b9 	.word	0x0800e5b9

0800e64c <__sfp_lock_acquire>:
 800e64c:	4801      	ldr	r0, [pc, #4]	@ (800e654 <__sfp_lock_acquire+0x8>)
 800e64e:	f000 b972 	b.w	800e936 <__retarget_lock_acquire_recursive>
 800e652:	bf00      	nop
 800e654:	20004d1d 	.word	0x20004d1d

0800e658 <__sfp_lock_release>:
 800e658:	4801      	ldr	r0, [pc, #4]	@ (800e660 <__sfp_lock_release+0x8>)
 800e65a:	f000 b96d 	b.w	800e938 <__retarget_lock_release_recursive>
 800e65e:	bf00      	nop
 800e660:	20004d1d 	.word	0x20004d1d

0800e664 <__sinit>:
 800e664:	b510      	push	{r4, lr}
 800e666:	4604      	mov	r4, r0
 800e668:	f7ff fff0 	bl	800e64c <__sfp_lock_acquire>
 800e66c:	6a23      	ldr	r3, [r4, #32]
 800e66e:	b11b      	cbz	r3, 800e678 <__sinit+0x14>
 800e670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e674:	f7ff bff0 	b.w	800e658 <__sfp_lock_release>
 800e678:	4b04      	ldr	r3, [pc, #16]	@ (800e68c <__sinit+0x28>)
 800e67a:	6223      	str	r3, [r4, #32]
 800e67c:	4b04      	ldr	r3, [pc, #16]	@ (800e690 <__sinit+0x2c>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d1f5      	bne.n	800e670 <__sinit+0xc>
 800e684:	f7ff ffc4 	bl	800e610 <global_stdio_init.part.0>
 800e688:	e7f2      	b.n	800e670 <__sinit+0xc>
 800e68a:	bf00      	nop
 800e68c:	0800e5d1 	.word	0x0800e5d1
 800e690:	20004d14 	.word	0x20004d14

0800e694 <_fwalk_sglue>:
 800e694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e698:	4607      	mov	r7, r0
 800e69a:	4688      	mov	r8, r1
 800e69c:	4614      	mov	r4, r2
 800e69e:	2600      	movs	r6, #0
 800e6a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6a4:	f1b9 0901 	subs.w	r9, r9, #1
 800e6a8:	d505      	bpl.n	800e6b6 <_fwalk_sglue+0x22>
 800e6aa:	6824      	ldr	r4, [r4, #0]
 800e6ac:	2c00      	cmp	r4, #0
 800e6ae:	d1f7      	bne.n	800e6a0 <_fwalk_sglue+0xc>
 800e6b0:	4630      	mov	r0, r6
 800e6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6b6:	89ab      	ldrh	r3, [r5, #12]
 800e6b8:	2b01      	cmp	r3, #1
 800e6ba:	d907      	bls.n	800e6cc <_fwalk_sglue+0x38>
 800e6bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	d003      	beq.n	800e6cc <_fwalk_sglue+0x38>
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	4638      	mov	r0, r7
 800e6c8:	47c0      	blx	r8
 800e6ca:	4306      	orrs	r6, r0
 800e6cc:	3568      	adds	r5, #104	@ 0x68
 800e6ce:	e7e9      	b.n	800e6a4 <_fwalk_sglue+0x10>

0800e6d0 <siprintf>:
 800e6d0:	b40e      	push	{r1, r2, r3}
 800e6d2:	b500      	push	{lr}
 800e6d4:	b09c      	sub	sp, #112	@ 0x70
 800e6d6:	ab1d      	add	r3, sp, #116	@ 0x74
 800e6d8:	9002      	str	r0, [sp, #8]
 800e6da:	9006      	str	r0, [sp, #24]
 800e6dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e6e0:	4809      	ldr	r0, [pc, #36]	@ (800e708 <siprintf+0x38>)
 800e6e2:	9107      	str	r1, [sp, #28]
 800e6e4:	9104      	str	r1, [sp, #16]
 800e6e6:	4909      	ldr	r1, [pc, #36]	@ (800e70c <siprintf+0x3c>)
 800e6e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6ec:	9105      	str	r1, [sp, #20]
 800e6ee:	6800      	ldr	r0, [r0, #0]
 800e6f0:	9301      	str	r3, [sp, #4]
 800e6f2:	a902      	add	r1, sp, #8
 800e6f4:	f000 faaa 	bl	800ec4c <_svfiprintf_r>
 800e6f8:	9b02      	ldr	r3, [sp, #8]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	701a      	strb	r2, [r3, #0]
 800e6fe:	b01c      	add	sp, #112	@ 0x70
 800e700:	f85d eb04 	ldr.w	lr, [sp], #4
 800e704:	b003      	add	sp, #12
 800e706:	4770      	bx	lr
 800e708:	20000068 	.word	0x20000068
 800e70c:	ffff0208 	.word	0xffff0208

0800e710 <__sread>:
 800e710:	b510      	push	{r4, lr}
 800e712:	460c      	mov	r4, r1
 800e714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e718:	f000 f8be 	bl	800e898 <_read_r>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	bfab      	itete	ge
 800e720:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e722:	89a3      	ldrhlt	r3, [r4, #12]
 800e724:	181b      	addge	r3, r3, r0
 800e726:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e72a:	bfac      	ite	ge
 800e72c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e72e:	81a3      	strhlt	r3, [r4, #12]
 800e730:	bd10      	pop	{r4, pc}

0800e732 <__swrite>:
 800e732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e736:	461f      	mov	r7, r3
 800e738:	898b      	ldrh	r3, [r1, #12]
 800e73a:	05db      	lsls	r3, r3, #23
 800e73c:	4605      	mov	r5, r0
 800e73e:	460c      	mov	r4, r1
 800e740:	4616      	mov	r6, r2
 800e742:	d505      	bpl.n	800e750 <__swrite+0x1e>
 800e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e748:	2302      	movs	r3, #2
 800e74a:	2200      	movs	r2, #0
 800e74c:	f000 f892 	bl	800e874 <_lseek_r>
 800e750:	89a3      	ldrh	r3, [r4, #12]
 800e752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e75a:	81a3      	strh	r3, [r4, #12]
 800e75c:	4632      	mov	r2, r6
 800e75e:	463b      	mov	r3, r7
 800e760:	4628      	mov	r0, r5
 800e762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	f000 b8a9 	b.w	800e8bc <_write_r>

0800e76a <__sseek>:
 800e76a:	b510      	push	{r4, lr}
 800e76c:	460c      	mov	r4, r1
 800e76e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e772:	f000 f87f 	bl	800e874 <_lseek_r>
 800e776:	1c43      	adds	r3, r0, #1
 800e778:	89a3      	ldrh	r3, [r4, #12]
 800e77a:	bf15      	itete	ne
 800e77c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e77e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e782:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e786:	81a3      	strheq	r3, [r4, #12]
 800e788:	bf18      	it	ne
 800e78a:	81a3      	strhne	r3, [r4, #12]
 800e78c:	bd10      	pop	{r4, pc}

0800e78e <__sclose>:
 800e78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e792:	f000 b809 	b.w	800e7a8 <_close_r>

0800e796 <memset>:
 800e796:	4402      	add	r2, r0
 800e798:	4603      	mov	r3, r0
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d100      	bne.n	800e7a0 <memset+0xa>
 800e79e:	4770      	bx	lr
 800e7a0:	f803 1b01 	strb.w	r1, [r3], #1
 800e7a4:	e7f9      	b.n	800e79a <memset+0x4>
	...

0800e7a8 <_close_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4d06      	ldr	r5, [pc, #24]	@ (800e7c4 <_close_r+0x1c>)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	4608      	mov	r0, r1
 800e7b2:	602b      	str	r3, [r5, #0]
 800e7b4:	f7f6 ff18 	bl	80055e8 <_close>
 800e7b8:	1c43      	adds	r3, r0, #1
 800e7ba:	d102      	bne.n	800e7c2 <_close_r+0x1a>
 800e7bc:	682b      	ldr	r3, [r5, #0]
 800e7be:	b103      	cbz	r3, 800e7c2 <_close_r+0x1a>
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	bd38      	pop	{r3, r4, r5, pc}
 800e7c4:	20004d18 	.word	0x20004d18

0800e7c8 <_reclaim_reent>:
 800e7c8:	4b29      	ldr	r3, [pc, #164]	@ (800e870 <_reclaim_reent+0xa8>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4283      	cmp	r3, r0
 800e7ce:	b570      	push	{r4, r5, r6, lr}
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	d04b      	beq.n	800e86c <_reclaim_reent+0xa4>
 800e7d4:	69c3      	ldr	r3, [r0, #28]
 800e7d6:	b1ab      	cbz	r3, 800e804 <_reclaim_reent+0x3c>
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	b16b      	cbz	r3, 800e7f8 <_reclaim_reent+0x30>
 800e7dc:	2500      	movs	r5, #0
 800e7de:	69e3      	ldr	r3, [r4, #28]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	5959      	ldr	r1, [r3, r5]
 800e7e4:	2900      	cmp	r1, #0
 800e7e6:	d13b      	bne.n	800e860 <_reclaim_reent+0x98>
 800e7e8:	3504      	adds	r5, #4
 800e7ea:	2d80      	cmp	r5, #128	@ 0x80
 800e7ec:	d1f7      	bne.n	800e7de <_reclaim_reent+0x16>
 800e7ee:	69e3      	ldr	r3, [r4, #28]
 800e7f0:	4620      	mov	r0, r4
 800e7f2:	68d9      	ldr	r1, [r3, #12]
 800e7f4:	f000 f8ce 	bl	800e994 <_free_r>
 800e7f8:	69e3      	ldr	r3, [r4, #28]
 800e7fa:	6819      	ldr	r1, [r3, #0]
 800e7fc:	b111      	cbz	r1, 800e804 <_reclaim_reent+0x3c>
 800e7fe:	4620      	mov	r0, r4
 800e800:	f000 f8c8 	bl	800e994 <_free_r>
 800e804:	6961      	ldr	r1, [r4, #20]
 800e806:	b111      	cbz	r1, 800e80e <_reclaim_reent+0x46>
 800e808:	4620      	mov	r0, r4
 800e80a:	f000 f8c3 	bl	800e994 <_free_r>
 800e80e:	69e1      	ldr	r1, [r4, #28]
 800e810:	b111      	cbz	r1, 800e818 <_reclaim_reent+0x50>
 800e812:	4620      	mov	r0, r4
 800e814:	f000 f8be 	bl	800e994 <_free_r>
 800e818:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e81a:	b111      	cbz	r1, 800e822 <_reclaim_reent+0x5a>
 800e81c:	4620      	mov	r0, r4
 800e81e:	f000 f8b9 	bl	800e994 <_free_r>
 800e822:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e824:	b111      	cbz	r1, 800e82c <_reclaim_reent+0x64>
 800e826:	4620      	mov	r0, r4
 800e828:	f000 f8b4 	bl	800e994 <_free_r>
 800e82c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e82e:	b111      	cbz	r1, 800e836 <_reclaim_reent+0x6e>
 800e830:	4620      	mov	r0, r4
 800e832:	f000 f8af 	bl	800e994 <_free_r>
 800e836:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e838:	b111      	cbz	r1, 800e840 <_reclaim_reent+0x78>
 800e83a:	4620      	mov	r0, r4
 800e83c:	f000 f8aa 	bl	800e994 <_free_r>
 800e840:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e842:	b111      	cbz	r1, 800e84a <_reclaim_reent+0x82>
 800e844:	4620      	mov	r0, r4
 800e846:	f000 f8a5 	bl	800e994 <_free_r>
 800e84a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e84c:	b111      	cbz	r1, 800e854 <_reclaim_reent+0x8c>
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 f8a0 	bl	800e994 <_free_r>
 800e854:	6a23      	ldr	r3, [r4, #32]
 800e856:	b14b      	cbz	r3, 800e86c <_reclaim_reent+0xa4>
 800e858:	4620      	mov	r0, r4
 800e85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e85e:	4718      	bx	r3
 800e860:	680e      	ldr	r6, [r1, #0]
 800e862:	4620      	mov	r0, r4
 800e864:	f000 f896 	bl	800e994 <_free_r>
 800e868:	4631      	mov	r1, r6
 800e86a:	e7bb      	b.n	800e7e4 <_reclaim_reent+0x1c>
 800e86c:	bd70      	pop	{r4, r5, r6, pc}
 800e86e:	bf00      	nop
 800e870:	20000068 	.word	0x20000068

0800e874 <_lseek_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	4d07      	ldr	r5, [pc, #28]	@ (800e894 <_lseek_r+0x20>)
 800e878:	4604      	mov	r4, r0
 800e87a:	4608      	mov	r0, r1
 800e87c:	4611      	mov	r1, r2
 800e87e:	2200      	movs	r2, #0
 800e880:	602a      	str	r2, [r5, #0]
 800e882:	461a      	mov	r2, r3
 800e884:	f7f6 fed7 	bl	8005636 <_lseek>
 800e888:	1c43      	adds	r3, r0, #1
 800e88a:	d102      	bne.n	800e892 <_lseek_r+0x1e>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	b103      	cbz	r3, 800e892 <_lseek_r+0x1e>
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	bd38      	pop	{r3, r4, r5, pc}
 800e894:	20004d18 	.word	0x20004d18

0800e898 <_read_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4d07      	ldr	r5, [pc, #28]	@ (800e8b8 <_read_r+0x20>)
 800e89c:	4604      	mov	r4, r0
 800e89e:	4608      	mov	r0, r1
 800e8a0:	4611      	mov	r1, r2
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	602a      	str	r2, [r5, #0]
 800e8a6:	461a      	mov	r2, r3
 800e8a8:	f7f6 fe65 	bl	8005576 <_read>
 800e8ac:	1c43      	adds	r3, r0, #1
 800e8ae:	d102      	bne.n	800e8b6 <_read_r+0x1e>
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	b103      	cbz	r3, 800e8b6 <_read_r+0x1e>
 800e8b4:	6023      	str	r3, [r4, #0]
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
 800e8b8:	20004d18 	.word	0x20004d18

0800e8bc <_write_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d07      	ldr	r5, [pc, #28]	@ (800e8dc <_write_r+0x20>)
 800e8c0:	4604      	mov	r4, r0
 800e8c2:	4608      	mov	r0, r1
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	602a      	str	r2, [r5, #0]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	f7f6 fe70 	bl	80055b0 <_write>
 800e8d0:	1c43      	adds	r3, r0, #1
 800e8d2:	d102      	bne.n	800e8da <_write_r+0x1e>
 800e8d4:	682b      	ldr	r3, [r5, #0]
 800e8d6:	b103      	cbz	r3, 800e8da <_write_r+0x1e>
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	bd38      	pop	{r3, r4, r5, pc}
 800e8dc:	20004d18 	.word	0x20004d18

0800e8e0 <__errno>:
 800e8e0:	4b01      	ldr	r3, [pc, #4]	@ (800e8e8 <__errno+0x8>)
 800e8e2:	6818      	ldr	r0, [r3, #0]
 800e8e4:	4770      	bx	lr
 800e8e6:	bf00      	nop
 800e8e8:	20000068 	.word	0x20000068

0800e8ec <__libc_init_array>:
 800e8ec:	b570      	push	{r4, r5, r6, lr}
 800e8ee:	4d0d      	ldr	r5, [pc, #52]	@ (800e924 <__libc_init_array+0x38>)
 800e8f0:	4c0d      	ldr	r4, [pc, #52]	@ (800e928 <__libc_init_array+0x3c>)
 800e8f2:	1b64      	subs	r4, r4, r5
 800e8f4:	10a4      	asrs	r4, r4, #2
 800e8f6:	2600      	movs	r6, #0
 800e8f8:	42a6      	cmp	r6, r4
 800e8fa:	d109      	bne.n	800e910 <__libc_init_array+0x24>
 800e8fc:	4d0b      	ldr	r5, [pc, #44]	@ (800e92c <__libc_init_array+0x40>)
 800e8fe:	4c0c      	ldr	r4, [pc, #48]	@ (800e930 <__libc_init_array+0x44>)
 800e900:	f000 fff0 	bl	800f8e4 <_init>
 800e904:	1b64      	subs	r4, r4, r5
 800e906:	10a4      	asrs	r4, r4, #2
 800e908:	2600      	movs	r6, #0
 800e90a:	42a6      	cmp	r6, r4
 800e90c:	d105      	bne.n	800e91a <__libc_init_array+0x2e>
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	f855 3b04 	ldr.w	r3, [r5], #4
 800e914:	4798      	blx	r3
 800e916:	3601      	adds	r6, #1
 800e918:	e7ee      	b.n	800e8f8 <__libc_init_array+0xc>
 800e91a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e91e:	4798      	blx	r3
 800e920:	3601      	adds	r6, #1
 800e922:	e7f2      	b.n	800e90a <__libc_init_array+0x1e>
 800e924:	0801de98 	.word	0x0801de98
 800e928:	0801de98 	.word	0x0801de98
 800e92c:	0801de98 	.word	0x0801de98
 800e930:	0801de9c 	.word	0x0801de9c

0800e934 <__retarget_lock_init_recursive>:
 800e934:	4770      	bx	lr

0800e936 <__retarget_lock_acquire_recursive>:
 800e936:	4770      	bx	lr

0800e938 <__retarget_lock_release_recursive>:
 800e938:	4770      	bx	lr

0800e93a <memcpy>:
 800e93a:	440a      	add	r2, r1
 800e93c:	4291      	cmp	r1, r2
 800e93e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e942:	d100      	bne.n	800e946 <memcpy+0xc>
 800e944:	4770      	bx	lr
 800e946:	b510      	push	{r4, lr}
 800e948:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e94c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e950:	4291      	cmp	r1, r2
 800e952:	d1f9      	bne.n	800e948 <memcpy+0xe>
 800e954:	bd10      	pop	{r4, pc}
	...

0800e958 <__assert_func>:
 800e958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e95a:	4614      	mov	r4, r2
 800e95c:	461a      	mov	r2, r3
 800e95e:	4b09      	ldr	r3, [pc, #36]	@ (800e984 <__assert_func+0x2c>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4605      	mov	r5, r0
 800e964:	68d8      	ldr	r0, [r3, #12]
 800e966:	b954      	cbnz	r4, 800e97e <__assert_func+0x26>
 800e968:	4b07      	ldr	r3, [pc, #28]	@ (800e988 <__assert_func+0x30>)
 800e96a:	461c      	mov	r4, r3
 800e96c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e970:	9100      	str	r1, [sp, #0]
 800e972:	462b      	mov	r3, r5
 800e974:	4905      	ldr	r1, [pc, #20]	@ (800e98c <__assert_func+0x34>)
 800e976:	f000 fc9f 	bl	800f2b8 <fiprintf>
 800e97a:	f000 fcd9 	bl	800f330 <abort>
 800e97e:	4b04      	ldr	r3, [pc, #16]	@ (800e990 <__assert_func+0x38>)
 800e980:	e7f4      	b.n	800e96c <__assert_func+0x14>
 800e982:	bf00      	nop
 800e984:	20000068 	.word	0x20000068
 800e988:	0801de5a 	.word	0x0801de5a
 800e98c:	0801de2c 	.word	0x0801de2c
 800e990:	0801de1f 	.word	0x0801de1f

0800e994 <_free_r>:
 800e994:	b538      	push	{r3, r4, r5, lr}
 800e996:	4605      	mov	r5, r0
 800e998:	2900      	cmp	r1, #0
 800e99a:	d041      	beq.n	800ea20 <_free_r+0x8c>
 800e99c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9a0:	1f0c      	subs	r4, r1, #4
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	bfb8      	it	lt
 800e9a6:	18e4      	addlt	r4, r4, r3
 800e9a8:	f000 f8e8 	bl	800eb7c <__malloc_lock>
 800e9ac:	4a1d      	ldr	r2, [pc, #116]	@ (800ea24 <_free_r+0x90>)
 800e9ae:	6813      	ldr	r3, [r2, #0]
 800e9b0:	b933      	cbnz	r3, 800e9c0 <_free_r+0x2c>
 800e9b2:	6063      	str	r3, [r4, #4]
 800e9b4:	6014      	str	r4, [r2, #0]
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9bc:	f000 b8e4 	b.w	800eb88 <__malloc_unlock>
 800e9c0:	42a3      	cmp	r3, r4
 800e9c2:	d908      	bls.n	800e9d6 <_free_r+0x42>
 800e9c4:	6820      	ldr	r0, [r4, #0]
 800e9c6:	1821      	adds	r1, r4, r0
 800e9c8:	428b      	cmp	r3, r1
 800e9ca:	bf01      	itttt	eq
 800e9cc:	6819      	ldreq	r1, [r3, #0]
 800e9ce:	685b      	ldreq	r3, [r3, #4]
 800e9d0:	1809      	addeq	r1, r1, r0
 800e9d2:	6021      	streq	r1, [r4, #0]
 800e9d4:	e7ed      	b.n	800e9b2 <_free_r+0x1e>
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	b10b      	cbz	r3, 800e9e0 <_free_r+0x4c>
 800e9dc:	42a3      	cmp	r3, r4
 800e9de:	d9fa      	bls.n	800e9d6 <_free_r+0x42>
 800e9e0:	6811      	ldr	r1, [r2, #0]
 800e9e2:	1850      	adds	r0, r2, r1
 800e9e4:	42a0      	cmp	r0, r4
 800e9e6:	d10b      	bne.n	800ea00 <_free_r+0x6c>
 800e9e8:	6820      	ldr	r0, [r4, #0]
 800e9ea:	4401      	add	r1, r0
 800e9ec:	1850      	adds	r0, r2, r1
 800e9ee:	4283      	cmp	r3, r0
 800e9f0:	6011      	str	r1, [r2, #0]
 800e9f2:	d1e0      	bne.n	800e9b6 <_free_r+0x22>
 800e9f4:	6818      	ldr	r0, [r3, #0]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	6053      	str	r3, [r2, #4]
 800e9fa:	4408      	add	r0, r1
 800e9fc:	6010      	str	r0, [r2, #0]
 800e9fe:	e7da      	b.n	800e9b6 <_free_r+0x22>
 800ea00:	d902      	bls.n	800ea08 <_free_r+0x74>
 800ea02:	230c      	movs	r3, #12
 800ea04:	602b      	str	r3, [r5, #0]
 800ea06:	e7d6      	b.n	800e9b6 <_free_r+0x22>
 800ea08:	6820      	ldr	r0, [r4, #0]
 800ea0a:	1821      	adds	r1, r4, r0
 800ea0c:	428b      	cmp	r3, r1
 800ea0e:	bf04      	itt	eq
 800ea10:	6819      	ldreq	r1, [r3, #0]
 800ea12:	685b      	ldreq	r3, [r3, #4]
 800ea14:	6063      	str	r3, [r4, #4]
 800ea16:	bf04      	itt	eq
 800ea18:	1809      	addeq	r1, r1, r0
 800ea1a:	6021      	streq	r1, [r4, #0]
 800ea1c:	6054      	str	r4, [r2, #4]
 800ea1e:	e7ca      	b.n	800e9b6 <_free_r+0x22>
 800ea20:	bd38      	pop	{r3, r4, r5, pc}
 800ea22:	bf00      	nop
 800ea24:	20004d24 	.word	0x20004d24

0800ea28 <malloc>:
 800ea28:	4b02      	ldr	r3, [pc, #8]	@ (800ea34 <malloc+0xc>)
 800ea2a:	4601      	mov	r1, r0
 800ea2c:	6818      	ldr	r0, [r3, #0]
 800ea2e:	f000 b825 	b.w	800ea7c <_malloc_r>
 800ea32:	bf00      	nop
 800ea34:	20000068 	.word	0x20000068

0800ea38 <sbrk_aligned>:
 800ea38:	b570      	push	{r4, r5, r6, lr}
 800ea3a:	4e0f      	ldr	r6, [pc, #60]	@ (800ea78 <sbrk_aligned+0x40>)
 800ea3c:	460c      	mov	r4, r1
 800ea3e:	6831      	ldr	r1, [r6, #0]
 800ea40:	4605      	mov	r5, r0
 800ea42:	b911      	cbnz	r1, 800ea4a <sbrk_aligned+0x12>
 800ea44:	f000 fc64 	bl	800f310 <_sbrk_r>
 800ea48:	6030      	str	r0, [r6, #0]
 800ea4a:	4621      	mov	r1, r4
 800ea4c:	4628      	mov	r0, r5
 800ea4e:	f000 fc5f 	bl	800f310 <_sbrk_r>
 800ea52:	1c43      	adds	r3, r0, #1
 800ea54:	d103      	bne.n	800ea5e <sbrk_aligned+0x26>
 800ea56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	bd70      	pop	{r4, r5, r6, pc}
 800ea5e:	1cc4      	adds	r4, r0, #3
 800ea60:	f024 0403 	bic.w	r4, r4, #3
 800ea64:	42a0      	cmp	r0, r4
 800ea66:	d0f8      	beq.n	800ea5a <sbrk_aligned+0x22>
 800ea68:	1a21      	subs	r1, r4, r0
 800ea6a:	4628      	mov	r0, r5
 800ea6c:	f000 fc50 	bl	800f310 <_sbrk_r>
 800ea70:	3001      	adds	r0, #1
 800ea72:	d1f2      	bne.n	800ea5a <sbrk_aligned+0x22>
 800ea74:	e7ef      	b.n	800ea56 <sbrk_aligned+0x1e>
 800ea76:	bf00      	nop
 800ea78:	20004d20 	.word	0x20004d20

0800ea7c <_malloc_r>:
 800ea7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea80:	1ccd      	adds	r5, r1, #3
 800ea82:	f025 0503 	bic.w	r5, r5, #3
 800ea86:	3508      	adds	r5, #8
 800ea88:	2d0c      	cmp	r5, #12
 800ea8a:	bf38      	it	cc
 800ea8c:	250c      	movcc	r5, #12
 800ea8e:	2d00      	cmp	r5, #0
 800ea90:	4606      	mov	r6, r0
 800ea92:	db01      	blt.n	800ea98 <_malloc_r+0x1c>
 800ea94:	42a9      	cmp	r1, r5
 800ea96:	d904      	bls.n	800eaa2 <_malloc_r+0x26>
 800ea98:	230c      	movs	r3, #12
 800ea9a:	6033      	str	r3, [r6, #0]
 800ea9c:	2000      	movs	r0, #0
 800ea9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eb78 <_malloc_r+0xfc>
 800eaa6:	f000 f869 	bl	800eb7c <__malloc_lock>
 800eaaa:	f8d8 3000 	ldr.w	r3, [r8]
 800eaae:	461c      	mov	r4, r3
 800eab0:	bb44      	cbnz	r4, 800eb04 <_malloc_r+0x88>
 800eab2:	4629      	mov	r1, r5
 800eab4:	4630      	mov	r0, r6
 800eab6:	f7ff ffbf 	bl	800ea38 <sbrk_aligned>
 800eaba:	1c43      	adds	r3, r0, #1
 800eabc:	4604      	mov	r4, r0
 800eabe:	d158      	bne.n	800eb72 <_malloc_r+0xf6>
 800eac0:	f8d8 4000 	ldr.w	r4, [r8]
 800eac4:	4627      	mov	r7, r4
 800eac6:	2f00      	cmp	r7, #0
 800eac8:	d143      	bne.n	800eb52 <_malloc_r+0xd6>
 800eaca:	2c00      	cmp	r4, #0
 800eacc:	d04b      	beq.n	800eb66 <_malloc_r+0xea>
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	4639      	mov	r1, r7
 800ead2:	4630      	mov	r0, r6
 800ead4:	eb04 0903 	add.w	r9, r4, r3
 800ead8:	f000 fc1a 	bl	800f310 <_sbrk_r>
 800eadc:	4581      	cmp	r9, r0
 800eade:	d142      	bne.n	800eb66 <_malloc_r+0xea>
 800eae0:	6821      	ldr	r1, [r4, #0]
 800eae2:	1a6d      	subs	r5, r5, r1
 800eae4:	4629      	mov	r1, r5
 800eae6:	4630      	mov	r0, r6
 800eae8:	f7ff ffa6 	bl	800ea38 <sbrk_aligned>
 800eaec:	3001      	adds	r0, #1
 800eaee:	d03a      	beq.n	800eb66 <_malloc_r+0xea>
 800eaf0:	6823      	ldr	r3, [r4, #0]
 800eaf2:	442b      	add	r3, r5
 800eaf4:	6023      	str	r3, [r4, #0]
 800eaf6:	f8d8 3000 	ldr.w	r3, [r8]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	bb62      	cbnz	r2, 800eb58 <_malloc_r+0xdc>
 800eafe:	f8c8 7000 	str.w	r7, [r8]
 800eb02:	e00f      	b.n	800eb24 <_malloc_r+0xa8>
 800eb04:	6822      	ldr	r2, [r4, #0]
 800eb06:	1b52      	subs	r2, r2, r5
 800eb08:	d420      	bmi.n	800eb4c <_malloc_r+0xd0>
 800eb0a:	2a0b      	cmp	r2, #11
 800eb0c:	d917      	bls.n	800eb3e <_malloc_r+0xc2>
 800eb0e:	1961      	adds	r1, r4, r5
 800eb10:	42a3      	cmp	r3, r4
 800eb12:	6025      	str	r5, [r4, #0]
 800eb14:	bf18      	it	ne
 800eb16:	6059      	strne	r1, [r3, #4]
 800eb18:	6863      	ldr	r3, [r4, #4]
 800eb1a:	bf08      	it	eq
 800eb1c:	f8c8 1000 	streq.w	r1, [r8]
 800eb20:	5162      	str	r2, [r4, r5]
 800eb22:	604b      	str	r3, [r1, #4]
 800eb24:	4630      	mov	r0, r6
 800eb26:	f000 f82f 	bl	800eb88 <__malloc_unlock>
 800eb2a:	f104 000b 	add.w	r0, r4, #11
 800eb2e:	1d23      	adds	r3, r4, #4
 800eb30:	f020 0007 	bic.w	r0, r0, #7
 800eb34:	1ac2      	subs	r2, r0, r3
 800eb36:	bf1c      	itt	ne
 800eb38:	1a1b      	subne	r3, r3, r0
 800eb3a:	50a3      	strne	r3, [r4, r2]
 800eb3c:	e7af      	b.n	800ea9e <_malloc_r+0x22>
 800eb3e:	6862      	ldr	r2, [r4, #4]
 800eb40:	42a3      	cmp	r3, r4
 800eb42:	bf0c      	ite	eq
 800eb44:	f8c8 2000 	streq.w	r2, [r8]
 800eb48:	605a      	strne	r2, [r3, #4]
 800eb4a:	e7eb      	b.n	800eb24 <_malloc_r+0xa8>
 800eb4c:	4623      	mov	r3, r4
 800eb4e:	6864      	ldr	r4, [r4, #4]
 800eb50:	e7ae      	b.n	800eab0 <_malloc_r+0x34>
 800eb52:	463c      	mov	r4, r7
 800eb54:	687f      	ldr	r7, [r7, #4]
 800eb56:	e7b6      	b.n	800eac6 <_malloc_r+0x4a>
 800eb58:	461a      	mov	r2, r3
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	42a3      	cmp	r3, r4
 800eb5e:	d1fb      	bne.n	800eb58 <_malloc_r+0xdc>
 800eb60:	2300      	movs	r3, #0
 800eb62:	6053      	str	r3, [r2, #4]
 800eb64:	e7de      	b.n	800eb24 <_malloc_r+0xa8>
 800eb66:	230c      	movs	r3, #12
 800eb68:	6033      	str	r3, [r6, #0]
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f000 f80c 	bl	800eb88 <__malloc_unlock>
 800eb70:	e794      	b.n	800ea9c <_malloc_r+0x20>
 800eb72:	6005      	str	r5, [r0, #0]
 800eb74:	e7d6      	b.n	800eb24 <_malloc_r+0xa8>
 800eb76:	bf00      	nop
 800eb78:	20004d24 	.word	0x20004d24

0800eb7c <__malloc_lock>:
 800eb7c:	4801      	ldr	r0, [pc, #4]	@ (800eb84 <__malloc_lock+0x8>)
 800eb7e:	f7ff beda 	b.w	800e936 <__retarget_lock_acquire_recursive>
 800eb82:	bf00      	nop
 800eb84:	20004d1c 	.word	0x20004d1c

0800eb88 <__malloc_unlock>:
 800eb88:	4801      	ldr	r0, [pc, #4]	@ (800eb90 <__malloc_unlock+0x8>)
 800eb8a:	f7ff bed5 	b.w	800e938 <__retarget_lock_release_recursive>
 800eb8e:	bf00      	nop
 800eb90:	20004d1c 	.word	0x20004d1c

0800eb94 <__ssputs_r>:
 800eb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb98:	688e      	ldr	r6, [r1, #8]
 800eb9a:	461f      	mov	r7, r3
 800eb9c:	42be      	cmp	r6, r7
 800eb9e:	680b      	ldr	r3, [r1, #0]
 800eba0:	4682      	mov	sl, r0
 800eba2:	460c      	mov	r4, r1
 800eba4:	4690      	mov	r8, r2
 800eba6:	d82d      	bhi.n	800ec04 <__ssputs_r+0x70>
 800eba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ebb0:	d026      	beq.n	800ec00 <__ssputs_r+0x6c>
 800ebb2:	6965      	ldr	r5, [r4, #20]
 800ebb4:	6909      	ldr	r1, [r1, #16]
 800ebb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ebba:	eba3 0901 	sub.w	r9, r3, r1
 800ebbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ebc2:	1c7b      	adds	r3, r7, #1
 800ebc4:	444b      	add	r3, r9
 800ebc6:	106d      	asrs	r5, r5, #1
 800ebc8:	429d      	cmp	r5, r3
 800ebca:	bf38      	it	cc
 800ebcc:	461d      	movcc	r5, r3
 800ebce:	0553      	lsls	r3, r2, #21
 800ebd0:	d527      	bpl.n	800ec22 <__ssputs_r+0x8e>
 800ebd2:	4629      	mov	r1, r5
 800ebd4:	f7ff ff52 	bl	800ea7c <_malloc_r>
 800ebd8:	4606      	mov	r6, r0
 800ebda:	b360      	cbz	r0, 800ec36 <__ssputs_r+0xa2>
 800ebdc:	6921      	ldr	r1, [r4, #16]
 800ebde:	464a      	mov	r2, r9
 800ebe0:	f7ff feab 	bl	800e93a <memcpy>
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ebea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebee:	81a3      	strh	r3, [r4, #12]
 800ebf0:	6126      	str	r6, [r4, #16]
 800ebf2:	6165      	str	r5, [r4, #20]
 800ebf4:	444e      	add	r6, r9
 800ebf6:	eba5 0509 	sub.w	r5, r5, r9
 800ebfa:	6026      	str	r6, [r4, #0]
 800ebfc:	60a5      	str	r5, [r4, #8]
 800ebfe:	463e      	mov	r6, r7
 800ec00:	42be      	cmp	r6, r7
 800ec02:	d900      	bls.n	800ec06 <__ssputs_r+0x72>
 800ec04:	463e      	mov	r6, r7
 800ec06:	6820      	ldr	r0, [r4, #0]
 800ec08:	4632      	mov	r2, r6
 800ec0a:	4641      	mov	r1, r8
 800ec0c:	f000 fb66 	bl	800f2dc <memmove>
 800ec10:	68a3      	ldr	r3, [r4, #8]
 800ec12:	1b9b      	subs	r3, r3, r6
 800ec14:	60a3      	str	r3, [r4, #8]
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	4433      	add	r3, r6
 800ec1a:	6023      	str	r3, [r4, #0]
 800ec1c:	2000      	movs	r0, #0
 800ec1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec22:	462a      	mov	r2, r5
 800ec24:	f000 fb8b 	bl	800f33e <_realloc_r>
 800ec28:	4606      	mov	r6, r0
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d1e0      	bne.n	800ebf0 <__ssputs_r+0x5c>
 800ec2e:	6921      	ldr	r1, [r4, #16]
 800ec30:	4650      	mov	r0, sl
 800ec32:	f7ff feaf 	bl	800e994 <_free_r>
 800ec36:	230c      	movs	r3, #12
 800ec38:	f8ca 3000 	str.w	r3, [sl]
 800ec3c:	89a3      	ldrh	r3, [r4, #12]
 800ec3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec42:	81a3      	strh	r3, [r4, #12]
 800ec44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec48:	e7e9      	b.n	800ec1e <__ssputs_r+0x8a>
	...

0800ec4c <_svfiprintf_r>:
 800ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec50:	4698      	mov	r8, r3
 800ec52:	898b      	ldrh	r3, [r1, #12]
 800ec54:	061b      	lsls	r3, r3, #24
 800ec56:	b09d      	sub	sp, #116	@ 0x74
 800ec58:	4607      	mov	r7, r0
 800ec5a:	460d      	mov	r5, r1
 800ec5c:	4614      	mov	r4, r2
 800ec5e:	d510      	bpl.n	800ec82 <_svfiprintf_r+0x36>
 800ec60:	690b      	ldr	r3, [r1, #16]
 800ec62:	b973      	cbnz	r3, 800ec82 <_svfiprintf_r+0x36>
 800ec64:	2140      	movs	r1, #64	@ 0x40
 800ec66:	f7ff ff09 	bl	800ea7c <_malloc_r>
 800ec6a:	6028      	str	r0, [r5, #0]
 800ec6c:	6128      	str	r0, [r5, #16]
 800ec6e:	b930      	cbnz	r0, 800ec7e <_svfiprintf_r+0x32>
 800ec70:	230c      	movs	r3, #12
 800ec72:	603b      	str	r3, [r7, #0]
 800ec74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec78:	b01d      	add	sp, #116	@ 0x74
 800ec7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7e:	2340      	movs	r3, #64	@ 0x40
 800ec80:	616b      	str	r3, [r5, #20]
 800ec82:	2300      	movs	r3, #0
 800ec84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec86:	2320      	movs	r3, #32
 800ec88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec90:	2330      	movs	r3, #48	@ 0x30
 800ec92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ee30 <_svfiprintf_r+0x1e4>
 800ec96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec9a:	f04f 0901 	mov.w	r9, #1
 800ec9e:	4623      	mov	r3, r4
 800eca0:	469a      	mov	sl, r3
 800eca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eca6:	b10a      	cbz	r2, 800ecac <_svfiprintf_r+0x60>
 800eca8:	2a25      	cmp	r2, #37	@ 0x25
 800ecaa:	d1f9      	bne.n	800eca0 <_svfiprintf_r+0x54>
 800ecac:	ebba 0b04 	subs.w	fp, sl, r4
 800ecb0:	d00b      	beq.n	800ecca <_svfiprintf_r+0x7e>
 800ecb2:	465b      	mov	r3, fp
 800ecb4:	4622      	mov	r2, r4
 800ecb6:	4629      	mov	r1, r5
 800ecb8:	4638      	mov	r0, r7
 800ecba:	f7ff ff6b 	bl	800eb94 <__ssputs_r>
 800ecbe:	3001      	adds	r0, #1
 800ecc0:	f000 80a7 	beq.w	800ee12 <_svfiprintf_r+0x1c6>
 800ecc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecc6:	445a      	add	r2, fp
 800ecc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecca:	f89a 3000 	ldrb.w	r3, [sl]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	f000 809f 	beq.w	800ee12 <_svfiprintf_r+0x1c6>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ecda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecde:	f10a 0a01 	add.w	sl, sl, #1
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	9307      	str	r3, [sp, #28]
 800ece6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecea:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecec:	4654      	mov	r4, sl
 800ecee:	2205      	movs	r2, #5
 800ecf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecf4:	484e      	ldr	r0, [pc, #312]	@ (800ee30 <_svfiprintf_r+0x1e4>)
 800ecf6:	f7f1 fa8b 	bl	8000210 <memchr>
 800ecfa:	9a04      	ldr	r2, [sp, #16]
 800ecfc:	b9d8      	cbnz	r0, 800ed36 <_svfiprintf_r+0xea>
 800ecfe:	06d0      	lsls	r0, r2, #27
 800ed00:	bf44      	itt	mi
 800ed02:	2320      	movmi	r3, #32
 800ed04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed08:	0711      	lsls	r1, r2, #28
 800ed0a:	bf44      	itt	mi
 800ed0c:	232b      	movmi	r3, #43	@ 0x2b
 800ed0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed12:	f89a 3000 	ldrb.w	r3, [sl]
 800ed16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed18:	d015      	beq.n	800ed46 <_svfiprintf_r+0xfa>
 800ed1a:	9a07      	ldr	r2, [sp, #28]
 800ed1c:	4654      	mov	r4, sl
 800ed1e:	2000      	movs	r0, #0
 800ed20:	f04f 0c0a 	mov.w	ip, #10
 800ed24:	4621      	mov	r1, r4
 800ed26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed2a:	3b30      	subs	r3, #48	@ 0x30
 800ed2c:	2b09      	cmp	r3, #9
 800ed2e:	d94b      	bls.n	800edc8 <_svfiprintf_r+0x17c>
 800ed30:	b1b0      	cbz	r0, 800ed60 <_svfiprintf_r+0x114>
 800ed32:	9207      	str	r2, [sp, #28]
 800ed34:	e014      	b.n	800ed60 <_svfiprintf_r+0x114>
 800ed36:	eba0 0308 	sub.w	r3, r0, r8
 800ed3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	9304      	str	r3, [sp, #16]
 800ed42:	46a2      	mov	sl, r4
 800ed44:	e7d2      	b.n	800ecec <_svfiprintf_r+0xa0>
 800ed46:	9b03      	ldr	r3, [sp, #12]
 800ed48:	1d19      	adds	r1, r3, #4
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	9103      	str	r1, [sp, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	bfbb      	ittet	lt
 800ed52:	425b      	neglt	r3, r3
 800ed54:	f042 0202 	orrlt.w	r2, r2, #2
 800ed58:	9307      	strge	r3, [sp, #28]
 800ed5a:	9307      	strlt	r3, [sp, #28]
 800ed5c:	bfb8      	it	lt
 800ed5e:	9204      	strlt	r2, [sp, #16]
 800ed60:	7823      	ldrb	r3, [r4, #0]
 800ed62:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed64:	d10a      	bne.n	800ed7c <_svfiprintf_r+0x130>
 800ed66:	7863      	ldrb	r3, [r4, #1]
 800ed68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed6a:	d132      	bne.n	800edd2 <_svfiprintf_r+0x186>
 800ed6c:	9b03      	ldr	r3, [sp, #12]
 800ed6e:	1d1a      	adds	r2, r3, #4
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	9203      	str	r2, [sp, #12]
 800ed74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed78:	3402      	adds	r4, #2
 800ed7a:	9305      	str	r3, [sp, #20]
 800ed7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee40 <_svfiprintf_r+0x1f4>
 800ed80:	7821      	ldrb	r1, [r4, #0]
 800ed82:	2203      	movs	r2, #3
 800ed84:	4650      	mov	r0, sl
 800ed86:	f7f1 fa43 	bl	8000210 <memchr>
 800ed8a:	b138      	cbz	r0, 800ed9c <_svfiprintf_r+0x150>
 800ed8c:	9b04      	ldr	r3, [sp, #16]
 800ed8e:	eba0 000a 	sub.w	r0, r0, sl
 800ed92:	2240      	movs	r2, #64	@ 0x40
 800ed94:	4082      	lsls	r2, r0
 800ed96:	4313      	orrs	r3, r2
 800ed98:	3401      	adds	r4, #1
 800ed9a:	9304      	str	r3, [sp, #16]
 800ed9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eda0:	4824      	ldr	r0, [pc, #144]	@ (800ee34 <_svfiprintf_r+0x1e8>)
 800eda2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eda6:	2206      	movs	r2, #6
 800eda8:	f7f1 fa32 	bl	8000210 <memchr>
 800edac:	2800      	cmp	r0, #0
 800edae:	d036      	beq.n	800ee1e <_svfiprintf_r+0x1d2>
 800edb0:	4b21      	ldr	r3, [pc, #132]	@ (800ee38 <_svfiprintf_r+0x1ec>)
 800edb2:	bb1b      	cbnz	r3, 800edfc <_svfiprintf_r+0x1b0>
 800edb4:	9b03      	ldr	r3, [sp, #12]
 800edb6:	3307      	adds	r3, #7
 800edb8:	f023 0307 	bic.w	r3, r3, #7
 800edbc:	3308      	adds	r3, #8
 800edbe:	9303      	str	r3, [sp, #12]
 800edc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edc2:	4433      	add	r3, r6
 800edc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc6:	e76a      	b.n	800ec9e <_svfiprintf_r+0x52>
 800edc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800edcc:	460c      	mov	r4, r1
 800edce:	2001      	movs	r0, #1
 800edd0:	e7a8      	b.n	800ed24 <_svfiprintf_r+0xd8>
 800edd2:	2300      	movs	r3, #0
 800edd4:	3401      	adds	r4, #1
 800edd6:	9305      	str	r3, [sp, #20]
 800edd8:	4619      	mov	r1, r3
 800edda:	f04f 0c0a 	mov.w	ip, #10
 800edde:	4620      	mov	r0, r4
 800ede0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ede4:	3a30      	subs	r2, #48	@ 0x30
 800ede6:	2a09      	cmp	r2, #9
 800ede8:	d903      	bls.n	800edf2 <_svfiprintf_r+0x1a6>
 800edea:	2b00      	cmp	r3, #0
 800edec:	d0c6      	beq.n	800ed7c <_svfiprintf_r+0x130>
 800edee:	9105      	str	r1, [sp, #20]
 800edf0:	e7c4      	b.n	800ed7c <_svfiprintf_r+0x130>
 800edf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800edf6:	4604      	mov	r4, r0
 800edf8:	2301      	movs	r3, #1
 800edfa:	e7f0      	b.n	800edde <_svfiprintf_r+0x192>
 800edfc:	ab03      	add	r3, sp, #12
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	462a      	mov	r2, r5
 800ee02:	4b0e      	ldr	r3, [pc, #56]	@ (800ee3c <_svfiprintf_r+0x1f0>)
 800ee04:	a904      	add	r1, sp, #16
 800ee06:	4638      	mov	r0, r7
 800ee08:	f3af 8000 	nop.w
 800ee0c:	1c42      	adds	r2, r0, #1
 800ee0e:	4606      	mov	r6, r0
 800ee10:	d1d6      	bne.n	800edc0 <_svfiprintf_r+0x174>
 800ee12:	89ab      	ldrh	r3, [r5, #12]
 800ee14:	065b      	lsls	r3, r3, #25
 800ee16:	f53f af2d 	bmi.w	800ec74 <_svfiprintf_r+0x28>
 800ee1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee1c:	e72c      	b.n	800ec78 <_svfiprintf_r+0x2c>
 800ee1e:	ab03      	add	r3, sp, #12
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	462a      	mov	r2, r5
 800ee24:	4b05      	ldr	r3, [pc, #20]	@ (800ee3c <_svfiprintf_r+0x1f0>)
 800ee26:	a904      	add	r1, sp, #16
 800ee28:	4638      	mov	r0, r7
 800ee2a:	f000 f879 	bl	800ef20 <_printf_i>
 800ee2e:	e7ed      	b.n	800ee0c <_svfiprintf_r+0x1c0>
 800ee30:	0801de5b 	.word	0x0801de5b
 800ee34:	0801de65 	.word	0x0801de65
 800ee38:	00000000 	.word	0x00000000
 800ee3c:	0800eb95 	.word	0x0800eb95
 800ee40:	0801de61 	.word	0x0801de61

0800ee44 <_printf_common>:
 800ee44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee48:	4616      	mov	r6, r2
 800ee4a:	4698      	mov	r8, r3
 800ee4c:	688a      	ldr	r2, [r1, #8]
 800ee4e:	690b      	ldr	r3, [r1, #16]
 800ee50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee54:	4293      	cmp	r3, r2
 800ee56:	bfb8      	it	lt
 800ee58:	4613      	movlt	r3, r2
 800ee5a:	6033      	str	r3, [r6, #0]
 800ee5c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee60:	4607      	mov	r7, r0
 800ee62:	460c      	mov	r4, r1
 800ee64:	b10a      	cbz	r2, 800ee6a <_printf_common+0x26>
 800ee66:	3301      	adds	r3, #1
 800ee68:	6033      	str	r3, [r6, #0]
 800ee6a:	6823      	ldr	r3, [r4, #0]
 800ee6c:	0699      	lsls	r1, r3, #26
 800ee6e:	bf42      	ittt	mi
 800ee70:	6833      	ldrmi	r3, [r6, #0]
 800ee72:	3302      	addmi	r3, #2
 800ee74:	6033      	strmi	r3, [r6, #0]
 800ee76:	6825      	ldr	r5, [r4, #0]
 800ee78:	f015 0506 	ands.w	r5, r5, #6
 800ee7c:	d106      	bne.n	800ee8c <_printf_common+0x48>
 800ee7e:	f104 0a19 	add.w	sl, r4, #25
 800ee82:	68e3      	ldr	r3, [r4, #12]
 800ee84:	6832      	ldr	r2, [r6, #0]
 800ee86:	1a9b      	subs	r3, r3, r2
 800ee88:	42ab      	cmp	r3, r5
 800ee8a:	dc26      	bgt.n	800eeda <_printf_common+0x96>
 800ee8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee90:	6822      	ldr	r2, [r4, #0]
 800ee92:	3b00      	subs	r3, #0
 800ee94:	bf18      	it	ne
 800ee96:	2301      	movne	r3, #1
 800ee98:	0692      	lsls	r2, r2, #26
 800ee9a:	d42b      	bmi.n	800eef4 <_printf_common+0xb0>
 800ee9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eea0:	4641      	mov	r1, r8
 800eea2:	4638      	mov	r0, r7
 800eea4:	47c8      	blx	r9
 800eea6:	3001      	adds	r0, #1
 800eea8:	d01e      	beq.n	800eee8 <_printf_common+0xa4>
 800eeaa:	6823      	ldr	r3, [r4, #0]
 800eeac:	6922      	ldr	r2, [r4, #16]
 800eeae:	f003 0306 	and.w	r3, r3, #6
 800eeb2:	2b04      	cmp	r3, #4
 800eeb4:	bf02      	ittt	eq
 800eeb6:	68e5      	ldreq	r5, [r4, #12]
 800eeb8:	6833      	ldreq	r3, [r6, #0]
 800eeba:	1aed      	subeq	r5, r5, r3
 800eebc:	68a3      	ldr	r3, [r4, #8]
 800eebe:	bf0c      	ite	eq
 800eec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eec4:	2500      	movne	r5, #0
 800eec6:	4293      	cmp	r3, r2
 800eec8:	bfc4      	itt	gt
 800eeca:	1a9b      	subgt	r3, r3, r2
 800eecc:	18ed      	addgt	r5, r5, r3
 800eece:	2600      	movs	r6, #0
 800eed0:	341a      	adds	r4, #26
 800eed2:	42b5      	cmp	r5, r6
 800eed4:	d11a      	bne.n	800ef0c <_printf_common+0xc8>
 800eed6:	2000      	movs	r0, #0
 800eed8:	e008      	b.n	800eeec <_printf_common+0xa8>
 800eeda:	2301      	movs	r3, #1
 800eedc:	4652      	mov	r2, sl
 800eede:	4641      	mov	r1, r8
 800eee0:	4638      	mov	r0, r7
 800eee2:	47c8      	blx	r9
 800eee4:	3001      	adds	r0, #1
 800eee6:	d103      	bne.n	800eef0 <_printf_common+0xac>
 800eee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eeec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef0:	3501      	adds	r5, #1
 800eef2:	e7c6      	b.n	800ee82 <_printf_common+0x3e>
 800eef4:	18e1      	adds	r1, r4, r3
 800eef6:	1c5a      	adds	r2, r3, #1
 800eef8:	2030      	movs	r0, #48	@ 0x30
 800eefa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eefe:	4422      	add	r2, r4
 800ef00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ef04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ef08:	3302      	adds	r3, #2
 800ef0a:	e7c7      	b.n	800ee9c <_printf_common+0x58>
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	4622      	mov	r2, r4
 800ef10:	4641      	mov	r1, r8
 800ef12:	4638      	mov	r0, r7
 800ef14:	47c8      	blx	r9
 800ef16:	3001      	adds	r0, #1
 800ef18:	d0e6      	beq.n	800eee8 <_printf_common+0xa4>
 800ef1a:	3601      	adds	r6, #1
 800ef1c:	e7d9      	b.n	800eed2 <_printf_common+0x8e>
	...

0800ef20 <_printf_i>:
 800ef20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef24:	7e0f      	ldrb	r7, [r1, #24]
 800ef26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef28:	2f78      	cmp	r7, #120	@ 0x78
 800ef2a:	4691      	mov	r9, r2
 800ef2c:	4680      	mov	r8, r0
 800ef2e:	460c      	mov	r4, r1
 800ef30:	469a      	mov	sl, r3
 800ef32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef36:	d807      	bhi.n	800ef48 <_printf_i+0x28>
 800ef38:	2f62      	cmp	r7, #98	@ 0x62
 800ef3a:	d80a      	bhi.n	800ef52 <_printf_i+0x32>
 800ef3c:	2f00      	cmp	r7, #0
 800ef3e:	f000 80d2 	beq.w	800f0e6 <_printf_i+0x1c6>
 800ef42:	2f58      	cmp	r7, #88	@ 0x58
 800ef44:	f000 80b9 	beq.w	800f0ba <_printf_i+0x19a>
 800ef48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef50:	e03a      	b.n	800efc8 <_printf_i+0xa8>
 800ef52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef56:	2b15      	cmp	r3, #21
 800ef58:	d8f6      	bhi.n	800ef48 <_printf_i+0x28>
 800ef5a:	a101      	add	r1, pc, #4	@ (adr r1, 800ef60 <_printf_i+0x40>)
 800ef5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef60:	0800efb9 	.word	0x0800efb9
 800ef64:	0800efcd 	.word	0x0800efcd
 800ef68:	0800ef49 	.word	0x0800ef49
 800ef6c:	0800ef49 	.word	0x0800ef49
 800ef70:	0800ef49 	.word	0x0800ef49
 800ef74:	0800ef49 	.word	0x0800ef49
 800ef78:	0800efcd 	.word	0x0800efcd
 800ef7c:	0800ef49 	.word	0x0800ef49
 800ef80:	0800ef49 	.word	0x0800ef49
 800ef84:	0800ef49 	.word	0x0800ef49
 800ef88:	0800ef49 	.word	0x0800ef49
 800ef8c:	0800f0cd 	.word	0x0800f0cd
 800ef90:	0800eff7 	.word	0x0800eff7
 800ef94:	0800f087 	.word	0x0800f087
 800ef98:	0800ef49 	.word	0x0800ef49
 800ef9c:	0800ef49 	.word	0x0800ef49
 800efa0:	0800f0ef 	.word	0x0800f0ef
 800efa4:	0800ef49 	.word	0x0800ef49
 800efa8:	0800eff7 	.word	0x0800eff7
 800efac:	0800ef49 	.word	0x0800ef49
 800efb0:	0800ef49 	.word	0x0800ef49
 800efb4:	0800f08f 	.word	0x0800f08f
 800efb8:	6833      	ldr	r3, [r6, #0]
 800efba:	1d1a      	adds	r2, r3, #4
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	6032      	str	r2, [r6, #0]
 800efc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efc8:	2301      	movs	r3, #1
 800efca:	e09d      	b.n	800f108 <_printf_i+0x1e8>
 800efcc:	6833      	ldr	r3, [r6, #0]
 800efce:	6820      	ldr	r0, [r4, #0]
 800efd0:	1d19      	adds	r1, r3, #4
 800efd2:	6031      	str	r1, [r6, #0]
 800efd4:	0606      	lsls	r6, r0, #24
 800efd6:	d501      	bpl.n	800efdc <_printf_i+0xbc>
 800efd8:	681d      	ldr	r5, [r3, #0]
 800efda:	e003      	b.n	800efe4 <_printf_i+0xc4>
 800efdc:	0645      	lsls	r5, r0, #25
 800efde:	d5fb      	bpl.n	800efd8 <_printf_i+0xb8>
 800efe0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800efe4:	2d00      	cmp	r5, #0
 800efe6:	da03      	bge.n	800eff0 <_printf_i+0xd0>
 800efe8:	232d      	movs	r3, #45	@ 0x2d
 800efea:	426d      	negs	r5, r5
 800efec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eff0:	4859      	ldr	r0, [pc, #356]	@ (800f158 <_printf_i+0x238>)
 800eff2:	230a      	movs	r3, #10
 800eff4:	e011      	b.n	800f01a <_printf_i+0xfa>
 800eff6:	6821      	ldr	r1, [r4, #0]
 800eff8:	6833      	ldr	r3, [r6, #0]
 800effa:	0608      	lsls	r0, r1, #24
 800effc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f000:	d402      	bmi.n	800f008 <_printf_i+0xe8>
 800f002:	0649      	lsls	r1, r1, #25
 800f004:	bf48      	it	mi
 800f006:	b2ad      	uxthmi	r5, r5
 800f008:	2f6f      	cmp	r7, #111	@ 0x6f
 800f00a:	4853      	ldr	r0, [pc, #332]	@ (800f158 <_printf_i+0x238>)
 800f00c:	6033      	str	r3, [r6, #0]
 800f00e:	bf14      	ite	ne
 800f010:	230a      	movne	r3, #10
 800f012:	2308      	moveq	r3, #8
 800f014:	2100      	movs	r1, #0
 800f016:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f01a:	6866      	ldr	r6, [r4, #4]
 800f01c:	60a6      	str	r6, [r4, #8]
 800f01e:	2e00      	cmp	r6, #0
 800f020:	bfa2      	ittt	ge
 800f022:	6821      	ldrge	r1, [r4, #0]
 800f024:	f021 0104 	bicge.w	r1, r1, #4
 800f028:	6021      	strge	r1, [r4, #0]
 800f02a:	b90d      	cbnz	r5, 800f030 <_printf_i+0x110>
 800f02c:	2e00      	cmp	r6, #0
 800f02e:	d04b      	beq.n	800f0c8 <_printf_i+0x1a8>
 800f030:	4616      	mov	r6, r2
 800f032:	fbb5 f1f3 	udiv	r1, r5, r3
 800f036:	fb03 5711 	mls	r7, r3, r1, r5
 800f03a:	5dc7      	ldrb	r7, [r0, r7]
 800f03c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f040:	462f      	mov	r7, r5
 800f042:	42bb      	cmp	r3, r7
 800f044:	460d      	mov	r5, r1
 800f046:	d9f4      	bls.n	800f032 <_printf_i+0x112>
 800f048:	2b08      	cmp	r3, #8
 800f04a:	d10b      	bne.n	800f064 <_printf_i+0x144>
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	07df      	lsls	r7, r3, #31
 800f050:	d508      	bpl.n	800f064 <_printf_i+0x144>
 800f052:	6923      	ldr	r3, [r4, #16]
 800f054:	6861      	ldr	r1, [r4, #4]
 800f056:	4299      	cmp	r1, r3
 800f058:	bfde      	ittt	le
 800f05a:	2330      	movle	r3, #48	@ 0x30
 800f05c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f060:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f064:	1b92      	subs	r2, r2, r6
 800f066:	6122      	str	r2, [r4, #16]
 800f068:	f8cd a000 	str.w	sl, [sp]
 800f06c:	464b      	mov	r3, r9
 800f06e:	aa03      	add	r2, sp, #12
 800f070:	4621      	mov	r1, r4
 800f072:	4640      	mov	r0, r8
 800f074:	f7ff fee6 	bl	800ee44 <_printf_common>
 800f078:	3001      	adds	r0, #1
 800f07a:	d14a      	bne.n	800f112 <_printf_i+0x1f2>
 800f07c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f080:	b004      	add	sp, #16
 800f082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f086:	6823      	ldr	r3, [r4, #0]
 800f088:	f043 0320 	orr.w	r3, r3, #32
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	4833      	ldr	r0, [pc, #204]	@ (800f15c <_printf_i+0x23c>)
 800f090:	2778      	movs	r7, #120	@ 0x78
 800f092:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f096:	6823      	ldr	r3, [r4, #0]
 800f098:	6831      	ldr	r1, [r6, #0]
 800f09a:	061f      	lsls	r7, r3, #24
 800f09c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f0a0:	d402      	bmi.n	800f0a8 <_printf_i+0x188>
 800f0a2:	065f      	lsls	r7, r3, #25
 800f0a4:	bf48      	it	mi
 800f0a6:	b2ad      	uxthmi	r5, r5
 800f0a8:	6031      	str	r1, [r6, #0]
 800f0aa:	07d9      	lsls	r1, r3, #31
 800f0ac:	bf44      	itt	mi
 800f0ae:	f043 0320 	orrmi.w	r3, r3, #32
 800f0b2:	6023      	strmi	r3, [r4, #0]
 800f0b4:	b11d      	cbz	r5, 800f0be <_printf_i+0x19e>
 800f0b6:	2310      	movs	r3, #16
 800f0b8:	e7ac      	b.n	800f014 <_printf_i+0xf4>
 800f0ba:	4827      	ldr	r0, [pc, #156]	@ (800f158 <_printf_i+0x238>)
 800f0bc:	e7e9      	b.n	800f092 <_printf_i+0x172>
 800f0be:	6823      	ldr	r3, [r4, #0]
 800f0c0:	f023 0320 	bic.w	r3, r3, #32
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	e7f6      	b.n	800f0b6 <_printf_i+0x196>
 800f0c8:	4616      	mov	r6, r2
 800f0ca:	e7bd      	b.n	800f048 <_printf_i+0x128>
 800f0cc:	6833      	ldr	r3, [r6, #0]
 800f0ce:	6825      	ldr	r5, [r4, #0]
 800f0d0:	6961      	ldr	r1, [r4, #20]
 800f0d2:	1d18      	adds	r0, r3, #4
 800f0d4:	6030      	str	r0, [r6, #0]
 800f0d6:	062e      	lsls	r6, r5, #24
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	d501      	bpl.n	800f0e0 <_printf_i+0x1c0>
 800f0dc:	6019      	str	r1, [r3, #0]
 800f0de:	e002      	b.n	800f0e6 <_printf_i+0x1c6>
 800f0e0:	0668      	lsls	r0, r5, #25
 800f0e2:	d5fb      	bpl.n	800f0dc <_printf_i+0x1bc>
 800f0e4:	8019      	strh	r1, [r3, #0]
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	6123      	str	r3, [r4, #16]
 800f0ea:	4616      	mov	r6, r2
 800f0ec:	e7bc      	b.n	800f068 <_printf_i+0x148>
 800f0ee:	6833      	ldr	r3, [r6, #0]
 800f0f0:	1d1a      	adds	r2, r3, #4
 800f0f2:	6032      	str	r2, [r6, #0]
 800f0f4:	681e      	ldr	r6, [r3, #0]
 800f0f6:	6862      	ldr	r2, [r4, #4]
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	4630      	mov	r0, r6
 800f0fc:	f7f1 f888 	bl	8000210 <memchr>
 800f100:	b108      	cbz	r0, 800f106 <_printf_i+0x1e6>
 800f102:	1b80      	subs	r0, r0, r6
 800f104:	6060      	str	r0, [r4, #4]
 800f106:	6863      	ldr	r3, [r4, #4]
 800f108:	6123      	str	r3, [r4, #16]
 800f10a:	2300      	movs	r3, #0
 800f10c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f110:	e7aa      	b.n	800f068 <_printf_i+0x148>
 800f112:	6923      	ldr	r3, [r4, #16]
 800f114:	4632      	mov	r2, r6
 800f116:	4649      	mov	r1, r9
 800f118:	4640      	mov	r0, r8
 800f11a:	47d0      	blx	sl
 800f11c:	3001      	adds	r0, #1
 800f11e:	d0ad      	beq.n	800f07c <_printf_i+0x15c>
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	079b      	lsls	r3, r3, #30
 800f124:	d413      	bmi.n	800f14e <_printf_i+0x22e>
 800f126:	68e0      	ldr	r0, [r4, #12]
 800f128:	9b03      	ldr	r3, [sp, #12]
 800f12a:	4298      	cmp	r0, r3
 800f12c:	bfb8      	it	lt
 800f12e:	4618      	movlt	r0, r3
 800f130:	e7a6      	b.n	800f080 <_printf_i+0x160>
 800f132:	2301      	movs	r3, #1
 800f134:	4632      	mov	r2, r6
 800f136:	4649      	mov	r1, r9
 800f138:	4640      	mov	r0, r8
 800f13a:	47d0      	blx	sl
 800f13c:	3001      	adds	r0, #1
 800f13e:	d09d      	beq.n	800f07c <_printf_i+0x15c>
 800f140:	3501      	adds	r5, #1
 800f142:	68e3      	ldr	r3, [r4, #12]
 800f144:	9903      	ldr	r1, [sp, #12]
 800f146:	1a5b      	subs	r3, r3, r1
 800f148:	42ab      	cmp	r3, r5
 800f14a:	dcf2      	bgt.n	800f132 <_printf_i+0x212>
 800f14c:	e7eb      	b.n	800f126 <_printf_i+0x206>
 800f14e:	2500      	movs	r5, #0
 800f150:	f104 0619 	add.w	r6, r4, #25
 800f154:	e7f5      	b.n	800f142 <_printf_i+0x222>
 800f156:	bf00      	nop
 800f158:	0801de6c 	.word	0x0801de6c
 800f15c:	0801de7d 	.word	0x0801de7d

0800f160 <__sflush_r>:
 800f160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f168:	0716      	lsls	r6, r2, #28
 800f16a:	4605      	mov	r5, r0
 800f16c:	460c      	mov	r4, r1
 800f16e:	d454      	bmi.n	800f21a <__sflush_r+0xba>
 800f170:	684b      	ldr	r3, [r1, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	dc02      	bgt.n	800f17c <__sflush_r+0x1c>
 800f176:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f178:	2b00      	cmp	r3, #0
 800f17a:	dd48      	ble.n	800f20e <__sflush_r+0xae>
 800f17c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f17e:	2e00      	cmp	r6, #0
 800f180:	d045      	beq.n	800f20e <__sflush_r+0xae>
 800f182:	2300      	movs	r3, #0
 800f184:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f188:	682f      	ldr	r7, [r5, #0]
 800f18a:	6a21      	ldr	r1, [r4, #32]
 800f18c:	602b      	str	r3, [r5, #0]
 800f18e:	d030      	beq.n	800f1f2 <__sflush_r+0x92>
 800f190:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f192:	89a3      	ldrh	r3, [r4, #12]
 800f194:	0759      	lsls	r1, r3, #29
 800f196:	d505      	bpl.n	800f1a4 <__sflush_r+0x44>
 800f198:	6863      	ldr	r3, [r4, #4]
 800f19a:	1ad2      	subs	r2, r2, r3
 800f19c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f19e:	b10b      	cbz	r3, 800f1a4 <__sflush_r+0x44>
 800f1a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f1a2:	1ad2      	subs	r2, r2, r3
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1a8:	6a21      	ldr	r1, [r4, #32]
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	47b0      	blx	r6
 800f1ae:	1c43      	adds	r3, r0, #1
 800f1b0:	89a3      	ldrh	r3, [r4, #12]
 800f1b2:	d106      	bne.n	800f1c2 <__sflush_r+0x62>
 800f1b4:	6829      	ldr	r1, [r5, #0]
 800f1b6:	291d      	cmp	r1, #29
 800f1b8:	d82b      	bhi.n	800f212 <__sflush_r+0xb2>
 800f1ba:	4a2a      	ldr	r2, [pc, #168]	@ (800f264 <__sflush_r+0x104>)
 800f1bc:	410a      	asrs	r2, r1
 800f1be:	07d6      	lsls	r6, r2, #31
 800f1c0:	d427      	bmi.n	800f212 <__sflush_r+0xb2>
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	6062      	str	r2, [r4, #4]
 800f1c6:	04d9      	lsls	r1, r3, #19
 800f1c8:	6922      	ldr	r2, [r4, #16]
 800f1ca:	6022      	str	r2, [r4, #0]
 800f1cc:	d504      	bpl.n	800f1d8 <__sflush_r+0x78>
 800f1ce:	1c42      	adds	r2, r0, #1
 800f1d0:	d101      	bne.n	800f1d6 <__sflush_r+0x76>
 800f1d2:	682b      	ldr	r3, [r5, #0]
 800f1d4:	b903      	cbnz	r3, 800f1d8 <__sflush_r+0x78>
 800f1d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f1d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1da:	602f      	str	r7, [r5, #0]
 800f1dc:	b1b9      	cbz	r1, 800f20e <__sflush_r+0xae>
 800f1de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1e2:	4299      	cmp	r1, r3
 800f1e4:	d002      	beq.n	800f1ec <__sflush_r+0x8c>
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	f7ff fbd4 	bl	800e994 <_free_r>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1f0:	e00d      	b.n	800f20e <__sflush_r+0xae>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	4628      	mov	r0, r5
 800f1f6:	47b0      	blx	r6
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	1c50      	adds	r0, r2, #1
 800f1fc:	d1c9      	bne.n	800f192 <__sflush_r+0x32>
 800f1fe:	682b      	ldr	r3, [r5, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d0c6      	beq.n	800f192 <__sflush_r+0x32>
 800f204:	2b1d      	cmp	r3, #29
 800f206:	d001      	beq.n	800f20c <__sflush_r+0xac>
 800f208:	2b16      	cmp	r3, #22
 800f20a:	d11e      	bne.n	800f24a <__sflush_r+0xea>
 800f20c:	602f      	str	r7, [r5, #0]
 800f20e:	2000      	movs	r0, #0
 800f210:	e022      	b.n	800f258 <__sflush_r+0xf8>
 800f212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f216:	b21b      	sxth	r3, r3
 800f218:	e01b      	b.n	800f252 <__sflush_r+0xf2>
 800f21a:	690f      	ldr	r7, [r1, #16]
 800f21c:	2f00      	cmp	r7, #0
 800f21e:	d0f6      	beq.n	800f20e <__sflush_r+0xae>
 800f220:	0793      	lsls	r3, r2, #30
 800f222:	680e      	ldr	r6, [r1, #0]
 800f224:	bf08      	it	eq
 800f226:	694b      	ldreq	r3, [r1, #20]
 800f228:	600f      	str	r7, [r1, #0]
 800f22a:	bf18      	it	ne
 800f22c:	2300      	movne	r3, #0
 800f22e:	eba6 0807 	sub.w	r8, r6, r7
 800f232:	608b      	str	r3, [r1, #8]
 800f234:	f1b8 0f00 	cmp.w	r8, #0
 800f238:	dde9      	ble.n	800f20e <__sflush_r+0xae>
 800f23a:	6a21      	ldr	r1, [r4, #32]
 800f23c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f23e:	4643      	mov	r3, r8
 800f240:	463a      	mov	r2, r7
 800f242:	4628      	mov	r0, r5
 800f244:	47b0      	blx	r6
 800f246:	2800      	cmp	r0, #0
 800f248:	dc08      	bgt.n	800f25c <__sflush_r+0xfc>
 800f24a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f252:	81a3      	strh	r3, [r4, #12]
 800f254:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f25c:	4407      	add	r7, r0
 800f25e:	eba8 0800 	sub.w	r8, r8, r0
 800f262:	e7e7      	b.n	800f234 <__sflush_r+0xd4>
 800f264:	dfbffffe 	.word	0xdfbffffe

0800f268 <_fflush_r>:
 800f268:	b538      	push	{r3, r4, r5, lr}
 800f26a:	690b      	ldr	r3, [r1, #16]
 800f26c:	4605      	mov	r5, r0
 800f26e:	460c      	mov	r4, r1
 800f270:	b913      	cbnz	r3, 800f278 <_fflush_r+0x10>
 800f272:	2500      	movs	r5, #0
 800f274:	4628      	mov	r0, r5
 800f276:	bd38      	pop	{r3, r4, r5, pc}
 800f278:	b118      	cbz	r0, 800f282 <_fflush_r+0x1a>
 800f27a:	6a03      	ldr	r3, [r0, #32]
 800f27c:	b90b      	cbnz	r3, 800f282 <_fflush_r+0x1a>
 800f27e:	f7ff f9f1 	bl	800e664 <__sinit>
 800f282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d0f3      	beq.n	800f272 <_fflush_r+0xa>
 800f28a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f28c:	07d0      	lsls	r0, r2, #31
 800f28e:	d404      	bmi.n	800f29a <_fflush_r+0x32>
 800f290:	0599      	lsls	r1, r3, #22
 800f292:	d402      	bmi.n	800f29a <_fflush_r+0x32>
 800f294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f296:	f7ff fb4e 	bl	800e936 <__retarget_lock_acquire_recursive>
 800f29a:	4628      	mov	r0, r5
 800f29c:	4621      	mov	r1, r4
 800f29e:	f7ff ff5f 	bl	800f160 <__sflush_r>
 800f2a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f2a4:	07da      	lsls	r2, r3, #31
 800f2a6:	4605      	mov	r5, r0
 800f2a8:	d4e4      	bmi.n	800f274 <_fflush_r+0xc>
 800f2aa:	89a3      	ldrh	r3, [r4, #12]
 800f2ac:	059b      	lsls	r3, r3, #22
 800f2ae:	d4e1      	bmi.n	800f274 <_fflush_r+0xc>
 800f2b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2b2:	f7ff fb41 	bl	800e938 <__retarget_lock_release_recursive>
 800f2b6:	e7dd      	b.n	800f274 <_fflush_r+0xc>

0800f2b8 <fiprintf>:
 800f2b8:	b40e      	push	{r1, r2, r3}
 800f2ba:	b503      	push	{r0, r1, lr}
 800f2bc:	4601      	mov	r1, r0
 800f2be:	ab03      	add	r3, sp, #12
 800f2c0:	4805      	ldr	r0, [pc, #20]	@ (800f2d8 <fiprintf+0x20>)
 800f2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2c6:	6800      	ldr	r0, [r0, #0]
 800f2c8:	9301      	str	r3, [sp, #4]
 800f2ca:	f000 f88f 	bl	800f3ec <_vfiprintf_r>
 800f2ce:	b002      	add	sp, #8
 800f2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2d4:	b003      	add	sp, #12
 800f2d6:	4770      	bx	lr
 800f2d8:	20000068 	.word	0x20000068

0800f2dc <memmove>:
 800f2dc:	4288      	cmp	r0, r1
 800f2de:	b510      	push	{r4, lr}
 800f2e0:	eb01 0402 	add.w	r4, r1, r2
 800f2e4:	d902      	bls.n	800f2ec <memmove+0x10>
 800f2e6:	4284      	cmp	r4, r0
 800f2e8:	4623      	mov	r3, r4
 800f2ea:	d807      	bhi.n	800f2fc <memmove+0x20>
 800f2ec:	1e43      	subs	r3, r0, #1
 800f2ee:	42a1      	cmp	r1, r4
 800f2f0:	d008      	beq.n	800f304 <memmove+0x28>
 800f2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2fa:	e7f8      	b.n	800f2ee <memmove+0x12>
 800f2fc:	4402      	add	r2, r0
 800f2fe:	4601      	mov	r1, r0
 800f300:	428a      	cmp	r2, r1
 800f302:	d100      	bne.n	800f306 <memmove+0x2a>
 800f304:	bd10      	pop	{r4, pc}
 800f306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f30a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f30e:	e7f7      	b.n	800f300 <memmove+0x24>

0800f310 <_sbrk_r>:
 800f310:	b538      	push	{r3, r4, r5, lr}
 800f312:	4d06      	ldr	r5, [pc, #24]	@ (800f32c <_sbrk_r+0x1c>)
 800f314:	2300      	movs	r3, #0
 800f316:	4604      	mov	r4, r0
 800f318:	4608      	mov	r0, r1
 800f31a:	602b      	str	r3, [r5, #0]
 800f31c:	f7f6 f998 	bl	8005650 <_sbrk>
 800f320:	1c43      	adds	r3, r0, #1
 800f322:	d102      	bne.n	800f32a <_sbrk_r+0x1a>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	b103      	cbz	r3, 800f32a <_sbrk_r+0x1a>
 800f328:	6023      	str	r3, [r4, #0]
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	20004d18 	.word	0x20004d18

0800f330 <abort>:
 800f330:	b508      	push	{r3, lr}
 800f332:	2006      	movs	r0, #6
 800f334:	f000 fa2e 	bl	800f794 <raise>
 800f338:	2001      	movs	r0, #1
 800f33a:	f7f6 f911 	bl	8005560 <_exit>

0800f33e <_realloc_r>:
 800f33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f342:	4680      	mov	r8, r0
 800f344:	4615      	mov	r5, r2
 800f346:	460c      	mov	r4, r1
 800f348:	b921      	cbnz	r1, 800f354 <_realloc_r+0x16>
 800f34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f34e:	4611      	mov	r1, r2
 800f350:	f7ff bb94 	b.w	800ea7c <_malloc_r>
 800f354:	b92a      	cbnz	r2, 800f362 <_realloc_r+0x24>
 800f356:	f7ff fb1d 	bl	800e994 <_free_r>
 800f35a:	2400      	movs	r4, #0
 800f35c:	4620      	mov	r0, r4
 800f35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f362:	f000 fa33 	bl	800f7cc <_malloc_usable_size_r>
 800f366:	4285      	cmp	r5, r0
 800f368:	4606      	mov	r6, r0
 800f36a:	d802      	bhi.n	800f372 <_realloc_r+0x34>
 800f36c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f370:	d8f4      	bhi.n	800f35c <_realloc_r+0x1e>
 800f372:	4629      	mov	r1, r5
 800f374:	4640      	mov	r0, r8
 800f376:	f7ff fb81 	bl	800ea7c <_malloc_r>
 800f37a:	4607      	mov	r7, r0
 800f37c:	2800      	cmp	r0, #0
 800f37e:	d0ec      	beq.n	800f35a <_realloc_r+0x1c>
 800f380:	42b5      	cmp	r5, r6
 800f382:	462a      	mov	r2, r5
 800f384:	4621      	mov	r1, r4
 800f386:	bf28      	it	cs
 800f388:	4632      	movcs	r2, r6
 800f38a:	f7ff fad6 	bl	800e93a <memcpy>
 800f38e:	4621      	mov	r1, r4
 800f390:	4640      	mov	r0, r8
 800f392:	f7ff faff 	bl	800e994 <_free_r>
 800f396:	463c      	mov	r4, r7
 800f398:	e7e0      	b.n	800f35c <_realloc_r+0x1e>

0800f39a <__sfputc_r>:
 800f39a:	6893      	ldr	r3, [r2, #8]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	b410      	push	{r4}
 800f3a2:	6093      	str	r3, [r2, #8]
 800f3a4:	da08      	bge.n	800f3b8 <__sfputc_r+0x1e>
 800f3a6:	6994      	ldr	r4, [r2, #24]
 800f3a8:	42a3      	cmp	r3, r4
 800f3aa:	db01      	blt.n	800f3b0 <__sfputc_r+0x16>
 800f3ac:	290a      	cmp	r1, #10
 800f3ae:	d103      	bne.n	800f3b8 <__sfputc_r+0x1e>
 800f3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3b4:	f000 b932 	b.w	800f61c <__swbuf_r>
 800f3b8:	6813      	ldr	r3, [r2, #0]
 800f3ba:	1c58      	adds	r0, r3, #1
 800f3bc:	6010      	str	r0, [r2, #0]
 800f3be:	7019      	strb	r1, [r3, #0]
 800f3c0:	4608      	mov	r0, r1
 800f3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <__sfputs_r>:
 800f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ca:	4606      	mov	r6, r0
 800f3cc:	460f      	mov	r7, r1
 800f3ce:	4614      	mov	r4, r2
 800f3d0:	18d5      	adds	r5, r2, r3
 800f3d2:	42ac      	cmp	r4, r5
 800f3d4:	d101      	bne.n	800f3da <__sfputs_r+0x12>
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	e007      	b.n	800f3ea <__sfputs_r+0x22>
 800f3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3de:	463a      	mov	r2, r7
 800f3e0:	4630      	mov	r0, r6
 800f3e2:	f7ff ffda 	bl	800f39a <__sfputc_r>
 800f3e6:	1c43      	adds	r3, r0, #1
 800f3e8:	d1f3      	bne.n	800f3d2 <__sfputs_r+0xa>
 800f3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f3ec <_vfiprintf_r>:
 800f3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3f0:	460d      	mov	r5, r1
 800f3f2:	b09d      	sub	sp, #116	@ 0x74
 800f3f4:	4614      	mov	r4, r2
 800f3f6:	4698      	mov	r8, r3
 800f3f8:	4606      	mov	r6, r0
 800f3fa:	b118      	cbz	r0, 800f404 <_vfiprintf_r+0x18>
 800f3fc:	6a03      	ldr	r3, [r0, #32]
 800f3fe:	b90b      	cbnz	r3, 800f404 <_vfiprintf_r+0x18>
 800f400:	f7ff f930 	bl	800e664 <__sinit>
 800f404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f406:	07d9      	lsls	r1, r3, #31
 800f408:	d405      	bmi.n	800f416 <_vfiprintf_r+0x2a>
 800f40a:	89ab      	ldrh	r3, [r5, #12]
 800f40c:	059a      	lsls	r2, r3, #22
 800f40e:	d402      	bmi.n	800f416 <_vfiprintf_r+0x2a>
 800f410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f412:	f7ff fa90 	bl	800e936 <__retarget_lock_acquire_recursive>
 800f416:	89ab      	ldrh	r3, [r5, #12]
 800f418:	071b      	lsls	r3, r3, #28
 800f41a:	d501      	bpl.n	800f420 <_vfiprintf_r+0x34>
 800f41c:	692b      	ldr	r3, [r5, #16]
 800f41e:	b99b      	cbnz	r3, 800f448 <_vfiprintf_r+0x5c>
 800f420:	4629      	mov	r1, r5
 800f422:	4630      	mov	r0, r6
 800f424:	f000 f938 	bl	800f698 <__swsetup_r>
 800f428:	b170      	cbz	r0, 800f448 <_vfiprintf_r+0x5c>
 800f42a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f42c:	07dc      	lsls	r4, r3, #31
 800f42e:	d504      	bpl.n	800f43a <_vfiprintf_r+0x4e>
 800f430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f434:	b01d      	add	sp, #116	@ 0x74
 800f436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43a:	89ab      	ldrh	r3, [r5, #12]
 800f43c:	0598      	lsls	r0, r3, #22
 800f43e:	d4f7      	bmi.n	800f430 <_vfiprintf_r+0x44>
 800f440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f442:	f7ff fa79 	bl	800e938 <__retarget_lock_release_recursive>
 800f446:	e7f3      	b.n	800f430 <_vfiprintf_r+0x44>
 800f448:	2300      	movs	r3, #0
 800f44a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f44c:	2320      	movs	r3, #32
 800f44e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f452:	f8cd 800c 	str.w	r8, [sp, #12]
 800f456:	2330      	movs	r3, #48	@ 0x30
 800f458:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f608 <_vfiprintf_r+0x21c>
 800f45c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f460:	f04f 0901 	mov.w	r9, #1
 800f464:	4623      	mov	r3, r4
 800f466:	469a      	mov	sl, r3
 800f468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f46c:	b10a      	cbz	r2, 800f472 <_vfiprintf_r+0x86>
 800f46e:	2a25      	cmp	r2, #37	@ 0x25
 800f470:	d1f9      	bne.n	800f466 <_vfiprintf_r+0x7a>
 800f472:	ebba 0b04 	subs.w	fp, sl, r4
 800f476:	d00b      	beq.n	800f490 <_vfiprintf_r+0xa4>
 800f478:	465b      	mov	r3, fp
 800f47a:	4622      	mov	r2, r4
 800f47c:	4629      	mov	r1, r5
 800f47e:	4630      	mov	r0, r6
 800f480:	f7ff ffa2 	bl	800f3c8 <__sfputs_r>
 800f484:	3001      	adds	r0, #1
 800f486:	f000 80a7 	beq.w	800f5d8 <_vfiprintf_r+0x1ec>
 800f48a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f48c:	445a      	add	r2, fp
 800f48e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f490:	f89a 3000 	ldrb.w	r3, [sl]
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 809f 	beq.w	800f5d8 <_vfiprintf_r+0x1ec>
 800f49a:	2300      	movs	r3, #0
 800f49c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f4a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4a4:	f10a 0a01 	add.w	sl, sl, #1
 800f4a8:	9304      	str	r3, [sp, #16]
 800f4aa:	9307      	str	r3, [sp, #28]
 800f4ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4b2:	4654      	mov	r4, sl
 800f4b4:	2205      	movs	r2, #5
 800f4b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4ba:	4853      	ldr	r0, [pc, #332]	@ (800f608 <_vfiprintf_r+0x21c>)
 800f4bc:	f7f0 fea8 	bl	8000210 <memchr>
 800f4c0:	9a04      	ldr	r2, [sp, #16]
 800f4c2:	b9d8      	cbnz	r0, 800f4fc <_vfiprintf_r+0x110>
 800f4c4:	06d1      	lsls	r1, r2, #27
 800f4c6:	bf44      	itt	mi
 800f4c8:	2320      	movmi	r3, #32
 800f4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4ce:	0713      	lsls	r3, r2, #28
 800f4d0:	bf44      	itt	mi
 800f4d2:	232b      	movmi	r3, #43	@ 0x2b
 800f4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4de:	d015      	beq.n	800f50c <_vfiprintf_r+0x120>
 800f4e0:	9a07      	ldr	r2, [sp, #28]
 800f4e2:	4654      	mov	r4, sl
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	f04f 0c0a 	mov.w	ip, #10
 800f4ea:	4621      	mov	r1, r4
 800f4ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4f0:	3b30      	subs	r3, #48	@ 0x30
 800f4f2:	2b09      	cmp	r3, #9
 800f4f4:	d94b      	bls.n	800f58e <_vfiprintf_r+0x1a2>
 800f4f6:	b1b0      	cbz	r0, 800f526 <_vfiprintf_r+0x13a>
 800f4f8:	9207      	str	r2, [sp, #28]
 800f4fa:	e014      	b.n	800f526 <_vfiprintf_r+0x13a>
 800f4fc:	eba0 0308 	sub.w	r3, r0, r8
 800f500:	fa09 f303 	lsl.w	r3, r9, r3
 800f504:	4313      	orrs	r3, r2
 800f506:	9304      	str	r3, [sp, #16]
 800f508:	46a2      	mov	sl, r4
 800f50a:	e7d2      	b.n	800f4b2 <_vfiprintf_r+0xc6>
 800f50c:	9b03      	ldr	r3, [sp, #12]
 800f50e:	1d19      	adds	r1, r3, #4
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	9103      	str	r1, [sp, #12]
 800f514:	2b00      	cmp	r3, #0
 800f516:	bfbb      	ittet	lt
 800f518:	425b      	neglt	r3, r3
 800f51a:	f042 0202 	orrlt.w	r2, r2, #2
 800f51e:	9307      	strge	r3, [sp, #28]
 800f520:	9307      	strlt	r3, [sp, #28]
 800f522:	bfb8      	it	lt
 800f524:	9204      	strlt	r2, [sp, #16]
 800f526:	7823      	ldrb	r3, [r4, #0]
 800f528:	2b2e      	cmp	r3, #46	@ 0x2e
 800f52a:	d10a      	bne.n	800f542 <_vfiprintf_r+0x156>
 800f52c:	7863      	ldrb	r3, [r4, #1]
 800f52e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f530:	d132      	bne.n	800f598 <_vfiprintf_r+0x1ac>
 800f532:	9b03      	ldr	r3, [sp, #12]
 800f534:	1d1a      	adds	r2, r3, #4
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	9203      	str	r2, [sp, #12]
 800f53a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f53e:	3402      	adds	r4, #2
 800f540:	9305      	str	r3, [sp, #20]
 800f542:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f618 <_vfiprintf_r+0x22c>
 800f546:	7821      	ldrb	r1, [r4, #0]
 800f548:	2203      	movs	r2, #3
 800f54a:	4650      	mov	r0, sl
 800f54c:	f7f0 fe60 	bl	8000210 <memchr>
 800f550:	b138      	cbz	r0, 800f562 <_vfiprintf_r+0x176>
 800f552:	9b04      	ldr	r3, [sp, #16]
 800f554:	eba0 000a 	sub.w	r0, r0, sl
 800f558:	2240      	movs	r2, #64	@ 0x40
 800f55a:	4082      	lsls	r2, r0
 800f55c:	4313      	orrs	r3, r2
 800f55e:	3401      	adds	r4, #1
 800f560:	9304      	str	r3, [sp, #16]
 800f562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f566:	4829      	ldr	r0, [pc, #164]	@ (800f60c <_vfiprintf_r+0x220>)
 800f568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f56c:	2206      	movs	r2, #6
 800f56e:	f7f0 fe4f 	bl	8000210 <memchr>
 800f572:	2800      	cmp	r0, #0
 800f574:	d03f      	beq.n	800f5f6 <_vfiprintf_r+0x20a>
 800f576:	4b26      	ldr	r3, [pc, #152]	@ (800f610 <_vfiprintf_r+0x224>)
 800f578:	bb1b      	cbnz	r3, 800f5c2 <_vfiprintf_r+0x1d6>
 800f57a:	9b03      	ldr	r3, [sp, #12]
 800f57c:	3307      	adds	r3, #7
 800f57e:	f023 0307 	bic.w	r3, r3, #7
 800f582:	3308      	adds	r3, #8
 800f584:	9303      	str	r3, [sp, #12]
 800f586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f588:	443b      	add	r3, r7
 800f58a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f58c:	e76a      	b.n	800f464 <_vfiprintf_r+0x78>
 800f58e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f592:	460c      	mov	r4, r1
 800f594:	2001      	movs	r0, #1
 800f596:	e7a8      	b.n	800f4ea <_vfiprintf_r+0xfe>
 800f598:	2300      	movs	r3, #0
 800f59a:	3401      	adds	r4, #1
 800f59c:	9305      	str	r3, [sp, #20]
 800f59e:	4619      	mov	r1, r3
 800f5a0:	f04f 0c0a 	mov.w	ip, #10
 800f5a4:	4620      	mov	r0, r4
 800f5a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5aa:	3a30      	subs	r2, #48	@ 0x30
 800f5ac:	2a09      	cmp	r2, #9
 800f5ae:	d903      	bls.n	800f5b8 <_vfiprintf_r+0x1cc>
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d0c6      	beq.n	800f542 <_vfiprintf_r+0x156>
 800f5b4:	9105      	str	r1, [sp, #20]
 800f5b6:	e7c4      	b.n	800f542 <_vfiprintf_r+0x156>
 800f5b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5bc:	4604      	mov	r4, r0
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e7f0      	b.n	800f5a4 <_vfiprintf_r+0x1b8>
 800f5c2:	ab03      	add	r3, sp, #12
 800f5c4:	9300      	str	r3, [sp, #0]
 800f5c6:	462a      	mov	r2, r5
 800f5c8:	4b12      	ldr	r3, [pc, #72]	@ (800f614 <_vfiprintf_r+0x228>)
 800f5ca:	a904      	add	r1, sp, #16
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	f3af 8000 	nop.w
 800f5d2:	4607      	mov	r7, r0
 800f5d4:	1c78      	adds	r0, r7, #1
 800f5d6:	d1d6      	bne.n	800f586 <_vfiprintf_r+0x19a>
 800f5d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5da:	07d9      	lsls	r1, r3, #31
 800f5dc:	d405      	bmi.n	800f5ea <_vfiprintf_r+0x1fe>
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	059a      	lsls	r2, r3, #22
 800f5e2:	d402      	bmi.n	800f5ea <_vfiprintf_r+0x1fe>
 800f5e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5e6:	f7ff f9a7 	bl	800e938 <__retarget_lock_release_recursive>
 800f5ea:	89ab      	ldrh	r3, [r5, #12]
 800f5ec:	065b      	lsls	r3, r3, #25
 800f5ee:	f53f af1f 	bmi.w	800f430 <_vfiprintf_r+0x44>
 800f5f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5f4:	e71e      	b.n	800f434 <_vfiprintf_r+0x48>
 800f5f6:	ab03      	add	r3, sp, #12
 800f5f8:	9300      	str	r3, [sp, #0]
 800f5fa:	462a      	mov	r2, r5
 800f5fc:	4b05      	ldr	r3, [pc, #20]	@ (800f614 <_vfiprintf_r+0x228>)
 800f5fe:	a904      	add	r1, sp, #16
 800f600:	4630      	mov	r0, r6
 800f602:	f7ff fc8d 	bl	800ef20 <_printf_i>
 800f606:	e7e4      	b.n	800f5d2 <_vfiprintf_r+0x1e6>
 800f608:	0801de5b 	.word	0x0801de5b
 800f60c:	0801de65 	.word	0x0801de65
 800f610:	00000000 	.word	0x00000000
 800f614:	0800f3c9 	.word	0x0800f3c9
 800f618:	0801de61 	.word	0x0801de61

0800f61c <__swbuf_r>:
 800f61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f61e:	460e      	mov	r6, r1
 800f620:	4614      	mov	r4, r2
 800f622:	4605      	mov	r5, r0
 800f624:	b118      	cbz	r0, 800f62e <__swbuf_r+0x12>
 800f626:	6a03      	ldr	r3, [r0, #32]
 800f628:	b90b      	cbnz	r3, 800f62e <__swbuf_r+0x12>
 800f62a:	f7ff f81b 	bl	800e664 <__sinit>
 800f62e:	69a3      	ldr	r3, [r4, #24]
 800f630:	60a3      	str	r3, [r4, #8]
 800f632:	89a3      	ldrh	r3, [r4, #12]
 800f634:	071a      	lsls	r2, r3, #28
 800f636:	d501      	bpl.n	800f63c <__swbuf_r+0x20>
 800f638:	6923      	ldr	r3, [r4, #16]
 800f63a:	b943      	cbnz	r3, 800f64e <__swbuf_r+0x32>
 800f63c:	4621      	mov	r1, r4
 800f63e:	4628      	mov	r0, r5
 800f640:	f000 f82a 	bl	800f698 <__swsetup_r>
 800f644:	b118      	cbz	r0, 800f64e <__swbuf_r+0x32>
 800f646:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f64a:	4638      	mov	r0, r7
 800f64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	6922      	ldr	r2, [r4, #16]
 800f652:	1a98      	subs	r0, r3, r2
 800f654:	6963      	ldr	r3, [r4, #20]
 800f656:	b2f6      	uxtb	r6, r6
 800f658:	4283      	cmp	r3, r0
 800f65a:	4637      	mov	r7, r6
 800f65c:	dc05      	bgt.n	800f66a <__swbuf_r+0x4e>
 800f65e:	4621      	mov	r1, r4
 800f660:	4628      	mov	r0, r5
 800f662:	f7ff fe01 	bl	800f268 <_fflush_r>
 800f666:	2800      	cmp	r0, #0
 800f668:	d1ed      	bne.n	800f646 <__swbuf_r+0x2a>
 800f66a:	68a3      	ldr	r3, [r4, #8]
 800f66c:	3b01      	subs	r3, #1
 800f66e:	60a3      	str	r3, [r4, #8]
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	6022      	str	r2, [r4, #0]
 800f676:	701e      	strb	r6, [r3, #0]
 800f678:	6962      	ldr	r2, [r4, #20]
 800f67a:	1c43      	adds	r3, r0, #1
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d004      	beq.n	800f68a <__swbuf_r+0x6e>
 800f680:	89a3      	ldrh	r3, [r4, #12]
 800f682:	07db      	lsls	r3, r3, #31
 800f684:	d5e1      	bpl.n	800f64a <__swbuf_r+0x2e>
 800f686:	2e0a      	cmp	r6, #10
 800f688:	d1df      	bne.n	800f64a <__swbuf_r+0x2e>
 800f68a:	4621      	mov	r1, r4
 800f68c:	4628      	mov	r0, r5
 800f68e:	f7ff fdeb 	bl	800f268 <_fflush_r>
 800f692:	2800      	cmp	r0, #0
 800f694:	d0d9      	beq.n	800f64a <__swbuf_r+0x2e>
 800f696:	e7d6      	b.n	800f646 <__swbuf_r+0x2a>

0800f698 <__swsetup_r>:
 800f698:	b538      	push	{r3, r4, r5, lr}
 800f69a:	4b29      	ldr	r3, [pc, #164]	@ (800f740 <__swsetup_r+0xa8>)
 800f69c:	4605      	mov	r5, r0
 800f69e:	6818      	ldr	r0, [r3, #0]
 800f6a0:	460c      	mov	r4, r1
 800f6a2:	b118      	cbz	r0, 800f6ac <__swsetup_r+0x14>
 800f6a4:	6a03      	ldr	r3, [r0, #32]
 800f6a6:	b90b      	cbnz	r3, 800f6ac <__swsetup_r+0x14>
 800f6a8:	f7fe ffdc 	bl	800e664 <__sinit>
 800f6ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6b0:	0719      	lsls	r1, r3, #28
 800f6b2:	d422      	bmi.n	800f6fa <__swsetup_r+0x62>
 800f6b4:	06da      	lsls	r2, r3, #27
 800f6b6:	d407      	bmi.n	800f6c8 <__swsetup_r+0x30>
 800f6b8:	2209      	movs	r2, #9
 800f6ba:	602a      	str	r2, [r5, #0]
 800f6bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6c0:	81a3      	strh	r3, [r4, #12]
 800f6c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6c6:	e033      	b.n	800f730 <__swsetup_r+0x98>
 800f6c8:	0758      	lsls	r0, r3, #29
 800f6ca:	d512      	bpl.n	800f6f2 <__swsetup_r+0x5a>
 800f6cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6ce:	b141      	cbz	r1, 800f6e2 <__swsetup_r+0x4a>
 800f6d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6d4:	4299      	cmp	r1, r3
 800f6d6:	d002      	beq.n	800f6de <__swsetup_r+0x46>
 800f6d8:	4628      	mov	r0, r5
 800f6da:	f7ff f95b 	bl	800e994 <_free_r>
 800f6de:	2300      	movs	r3, #0
 800f6e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6e2:	89a3      	ldrh	r3, [r4, #12]
 800f6e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f6e8:	81a3      	strh	r3, [r4, #12]
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	6063      	str	r3, [r4, #4]
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	6023      	str	r3, [r4, #0]
 800f6f2:	89a3      	ldrh	r3, [r4, #12]
 800f6f4:	f043 0308 	orr.w	r3, r3, #8
 800f6f8:	81a3      	strh	r3, [r4, #12]
 800f6fa:	6923      	ldr	r3, [r4, #16]
 800f6fc:	b94b      	cbnz	r3, 800f712 <__swsetup_r+0x7a>
 800f6fe:	89a3      	ldrh	r3, [r4, #12]
 800f700:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f708:	d003      	beq.n	800f712 <__swsetup_r+0x7a>
 800f70a:	4621      	mov	r1, r4
 800f70c:	4628      	mov	r0, r5
 800f70e:	f000 f88b 	bl	800f828 <__smakebuf_r>
 800f712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f716:	f013 0201 	ands.w	r2, r3, #1
 800f71a:	d00a      	beq.n	800f732 <__swsetup_r+0x9a>
 800f71c:	2200      	movs	r2, #0
 800f71e:	60a2      	str	r2, [r4, #8]
 800f720:	6962      	ldr	r2, [r4, #20]
 800f722:	4252      	negs	r2, r2
 800f724:	61a2      	str	r2, [r4, #24]
 800f726:	6922      	ldr	r2, [r4, #16]
 800f728:	b942      	cbnz	r2, 800f73c <__swsetup_r+0xa4>
 800f72a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f72e:	d1c5      	bne.n	800f6bc <__swsetup_r+0x24>
 800f730:	bd38      	pop	{r3, r4, r5, pc}
 800f732:	0799      	lsls	r1, r3, #30
 800f734:	bf58      	it	pl
 800f736:	6962      	ldrpl	r2, [r4, #20]
 800f738:	60a2      	str	r2, [r4, #8]
 800f73a:	e7f4      	b.n	800f726 <__swsetup_r+0x8e>
 800f73c:	2000      	movs	r0, #0
 800f73e:	e7f7      	b.n	800f730 <__swsetup_r+0x98>
 800f740:	20000068 	.word	0x20000068

0800f744 <_raise_r>:
 800f744:	291f      	cmp	r1, #31
 800f746:	b538      	push	{r3, r4, r5, lr}
 800f748:	4605      	mov	r5, r0
 800f74a:	460c      	mov	r4, r1
 800f74c:	d904      	bls.n	800f758 <_raise_r+0x14>
 800f74e:	2316      	movs	r3, #22
 800f750:	6003      	str	r3, [r0, #0]
 800f752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f756:	bd38      	pop	{r3, r4, r5, pc}
 800f758:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f75a:	b112      	cbz	r2, 800f762 <_raise_r+0x1e>
 800f75c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f760:	b94b      	cbnz	r3, 800f776 <_raise_r+0x32>
 800f762:	4628      	mov	r0, r5
 800f764:	f000 f830 	bl	800f7c8 <_getpid_r>
 800f768:	4622      	mov	r2, r4
 800f76a:	4601      	mov	r1, r0
 800f76c:	4628      	mov	r0, r5
 800f76e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f772:	f000 b817 	b.w	800f7a4 <_kill_r>
 800f776:	2b01      	cmp	r3, #1
 800f778:	d00a      	beq.n	800f790 <_raise_r+0x4c>
 800f77a:	1c59      	adds	r1, r3, #1
 800f77c:	d103      	bne.n	800f786 <_raise_r+0x42>
 800f77e:	2316      	movs	r3, #22
 800f780:	6003      	str	r3, [r0, #0]
 800f782:	2001      	movs	r0, #1
 800f784:	e7e7      	b.n	800f756 <_raise_r+0x12>
 800f786:	2100      	movs	r1, #0
 800f788:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f78c:	4620      	mov	r0, r4
 800f78e:	4798      	blx	r3
 800f790:	2000      	movs	r0, #0
 800f792:	e7e0      	b.n	800f756 <_raise_r+0x12>

0800f794 <raise>:
 800f794:	4b02      	ldr	r3, [pc, #8]	@ (800f7a0 <raise+0xc>)
 800f796:	4601      	mov	r1, r0
 800f798:	6818      	ldr	r0, [r3, #0]
 800f79a:	f7ff bfd3 	b.w	800f744 <_raise_r>
 800f79e:	bf00      	nop
 800f7a0:	20000068 	.word	0x20000068

0800f7a4 <_kill_r>:
 800f7a4:	b538      	push	{r3, r4, r5, lr}
 800f7a6:	4d07      	ldr	r5, [pc, #28]	@ (800f7c4 <_kill_r+0x20>)
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	4608      	mov	r0, r1
 800f7ae:	4611      	mov	r1, r2
 800f7b0:	602b      	str	r3, [r5, #0]
 800f7b2:	f7f5 fec5 	bl	8005540 <_kill>
 800f7b6:	1c43      	adds	r3, r0, #1
 800f7b8:	d102      	bne.n	800f7c0 <_kill_r+0x1c>
 800f7ba:	682b      	ldr	r3, [r5, #0]
 800f7bc:	b103      	cbz	r3, 800f7c0 <_kill_r+0x1c>
 800f7be:	6023      	str	r3, [r4, #0]
 800f7c0:	bd38      	pop	{r3, r4, r5, pc}
 800f7c2:	bf00      	nop
 800f7c4:	20004d18 	.word	0x20004d18

0800f7c8 <_getpid_r>:
 800f7c8:	f7f5 beb2 	b.w	8005530 <_getpid>

0800f7cc <_malloc_usable_size_r>:
 800f7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7d0:	1f18      	subs	r0, r3, #4
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	bfbc      	itt	lt
 800f7d6:	580b      	ldrlt	r3, [r1, r0]
 800f7d8:	18c0      	addlt	r0, r0, r3
 800f7da:	4770      	bx	lr

0800f7dc <__swhatbuf_r>:
 800f7dc:	b570      	push	{r4, r5, r6, lr}
 800f7de:	460c      	mov	r4, r1
 800f7e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7e4:	2900      	cmp	r1, #0
 800f7e6:	b096      	sub	sp, #88	@ 0x58
 800f7e8:	4615      	mov	r5, r2
 800f7ea:	461e      	mov	r6, r3
 800f7ec:	da0d      	bge.n	800f80a <__swhatbuf_r+0x2e>
 800f7ee:	89a3      	ldrh	r3, [r4, #12]
 800f7f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f7f4:	f04f 0100 	mov.w	r1, #0
 800f7f8:	bf14      	ite	ne
 800f7fa:	2340      	movne	r3, #64	@ 0x40
 800f7fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f800:	2000      	movs	r0, #0
 800f802:	6031      	str	r1, [r6, #0]
 800f804:	602b      	str	r3, [r5, #0]
 800f806:	b016      	add	sp, #88	@ 0x58
 800f808:	bd70      	pop	{r4, r5, r6, pc}
 800f80a:	466a      	mov	r2, sp
 800f80c:	f000 f848 	bl	800f8a0 <_fstat_r>
 800f810:	2800      	cmp	r0, #0
 800f812:	dbec      	blt.n	800f7ee <__swhatbuf_r+0x12>
 800f814:	9901      	ldr	r1, [sp, #4]
 800f816:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f81a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f81e:	4259      	negs	r1, r3
 800f820:	4159      	adcs	r1, r3
 800f822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f826:	e7eb      	b.n	800f800 <__swhatbuf_r+0x24>

0800f828 <__smakebuf_r>:
 800f828:	898b      	ldrh	r3, [r1, #12]
 800f82a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f82c:	079d      	lsls	r5, r3, #30
 800f82e:	4606      	mov	r6, r0
 800f830:	460c      	mov	r4, r1
 800f832:	d507      	bpl.n	800f844 <__smakebuf_r+0x1c>
 800f834:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f838:	6023      	str	r3, [r4, #0]
 800f83a:	6123      	str	r3, [r4, #16]
 800f83c:	2301      	movs	r3, #1
 800f83e:	6163      	str	r3, [r4, #20]
 800f840:	b003      	add	sp, #12
 800f842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f844:	ab01      	add	r3, sp, #4
 800f846:	466a      	mov	r2, sp
 800f848:	f7ff ffc8 	bl	800f7dc <__swhatbuf_r>
 800f84c:	9f00      	ldr	r7, [sp, #0]
 800f84e:	4605      	mov	r5, r0
 800f850:	4639      	mov	r1, r7
 800f852:	4630      	mov	r0, r6
 800f854:	f7ff f912 	bl	800ea7c <_malloc_r>
 800f858:	b948      	cbnz	r0, 800f86e <__smakebuf_r+0x46>
 800f85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f85e:	059a      	lsls	r2, r3, #22
 800f860:	d4ee      	bmi.n	800f840 <__smakebuf_r+0x18>
 800f862:	f023 0303 	bic.w	r3, r3, #3
 800f866:	f043 0302 	orr.w	r3, r3, #2
 800f86a:	81a3      	strh	r3, [r4, #12]
 800f86c:	e7e2      	b.n	800f834 <__smakebuf_r+0xc>
 800f86e:	89a3      	ldrh	r3, [r4, #12]
 800f870:	6020      	str	r0, [r4, #0]
 800f872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f876:	81a3      	strh	r3, [r4, #12]
 800f878:	9b01      	ldr	r3, [sp, #4]
 800f87a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f87e:	b15b      	cbz	r3, 800f898 <__smakebuf_r+0x70>
 800f880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f884:	4630      	mov	r0, r6
 800f886:	f000 f81d 	bl	800f8c4 <_isatty_r>
 800f88a:	b128      	cbz	r0, 800f898 <__smakebuf_r+0x70>
 800f88c:	89a3      	ldrh	r3, [r4, #12]
 800f88e:	f023 0303 	bic.w	r3, r3, #3
 800f892:	f043 0301 	orr.w	r3, r3, #1
 800f896:	81a3      	strh	r3, [r4, #12]
 800f898:	89a3      	ldrh	r3, [r4, #12]
 800f89a:	431d      	orrs	r5, r3
 800f89c:	81a5      	strh	r5, [r4, #12]
 800f89e:	e7cf      	b.n	800f840 <__smakebuf_r+0x18>

0800f8a0 <_fstat_r>:
 800f8a0:	b538      	push	{r3, r4, r5, lr}
 800f8a2:	4d07      	ldr	r5, [pc, #28]	@ (800f8c0 <_fstat_r+0x20>)
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	4608      	mov	r0, r1
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	602b      	str	r3, [r5, #0]
 800f8ae:	f7f5 fea7 	bl	8005600 <_fstat>
 800f8b2:	1c43      	adds	r3, r0, #1
 800f8b4:	d102      	bne.n	800f8bc <_fstat_r+0x1c>
 800f8b6:	682b      	ldr	r3, [r5, #0]
 800f8b8:	b103      	cbz	r3, 800f8bc <_fstat_r+0x1c>
 800f8ba:	6023      	str	r3, [r4, #0]
 800f8bc:	bd38      	pop	{r3, r4, r5, pc}
 800f8be:	bf00      	nop
 800f8c0:	20004d18 	.word	0x20004d18

0800f8c4 <_isatty_r>:
 800f8c4:	b538      	push	{r3, r4, r5, lr}
 800f8c6:	4d06      	ldr	r5, [pc, #24]	@ (800f8e0 <_isatty_r+0x1c>)
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	4608      	mov	r0, r1
 800f8ce:	602b      	str	r3, [r5, #0]
 800f8d0:	f7f5 fea6 	bl	8005620 <_isatty>
 800f8d4:	1c43      	adds	r3, r0, #1
 800f8d6:	d102      	bne.n	800f8de <_isatty_r+0x1a>
 800f8d8:	682b      	ldr	r3, [r5, #0]
 800f8da:	b103      	cbz	r3, 800f8de <_isatty_r+0x1a>
 800f8dc:	6023      	str	r3, [r4, #0]
 800f8de:	bd38      	pop	{r3, r4, r5, pc}
 800f8e0:	20004d18 	.word	0x20004d18

0800f8e4 <_init>:
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e6:	bf00      	nop
 800f8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ea:	bc08      	pop	{r3}
 800f8ec:	469e      	mov	lr, r3
 800f8ee:	4770      	bx	lr

0800f8f0 <_fini>:
 800f8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8f2:	bf00      	nop
 800f8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8f6:	bc08      	pop	{r3}
 800f8f8:	469e      	mov	lr, r3
 800f8fa:	4770      	bx	lr
