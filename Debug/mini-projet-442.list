
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f48  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e5bc  08012118  08012118  00013118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080206d4  080206d4  000220b4  2**0
                  CONTENTS
  4 .ARM          00000008  080206d4  080206d4  000216d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080206dc  080206dc  000220b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080206dc  080206dc  000216dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080206e0  080206e0  000216e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  080206e4  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb8  200000b4  08020798  000220b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f6c  08020798  00022f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000220b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033a29  00000000  00000000  000220e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c88  00000000  00000000  00055b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b20  00000000  00000000  0005d798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002138  00000000  00000000  000602b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032a91  00000000  00000000  000623f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038c39  00000000  00000000  00094e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118819  00000000  00000000  000cdaba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e62d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000be64  00000000  00000000  001e6318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001f217c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012100 	.word	0x08012100

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	08012100 	.word	0x08012100

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f004 fdd1 	bl	8005984 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f002 fb3a 	bl	8003460 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f004 ff6b 	bl	8005cd8 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f002 fb2a 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_ADC3_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <MX_ADC3_Init+0xa0>)
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e82:	f004 fd7f 	bl	8005984 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f002 fae8 	bl	8003460 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e90:	2306      	movs	r3, #6
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000ea2:	f004 ff19 	bl	8005cd8 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000eac:	f002 fad8 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000118 	.word	0x20000118
 8000ebc:	40012200 	.word	0x40012200
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d124      	bne.n	8000f30 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	f006 f985 	bl	8007238 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2e:	e029      	b.n	8000f84 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d124      	bne.n	8000f84 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_ADC_MspInit+0xd8>)
 8000f80:	f006 f95a 	bl	8007238 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	203b      	movs	r0, #59	@ 0x3b
 8000fc4:	f005 f990 	bl	80062e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fc8:	203b      	movs	r0, #59	@ 0x3b
 8000fca:	f005 f9a9 	bl	8006320 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	203c      	movs	r0, #60	@ 0x3c
 8000fd4:	f005 f988 	bl	80062e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fd8:	203c      	movs	r0, #60	@ 0x3c
 8000fda:	f005 f9a1 	bl	8006320 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2045      	movs	r0, #69	@ 0x45
 8000fe4:	f005 f980 	bl	80062e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fe8:	2045      	movs	r0, #69	@ 0x45
 8000fea:	f005 f999 	bl	8006320 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	2046      	movs	r0, #70	@ 0x46
 8000ff4:	f005 f978 	bl	80062e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ff8:	2046      	movs	r0, #70	@ 0x46
 8000ffa:	f005 f991 	bl	8006320 <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <MX_DMA2D_Init+0x60>)
 8001014:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001042:	f005 fd5d 	bl	8006b00 <HAL_DMA2D_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800104c:	f002 fa08 	bl	8003460 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001050:	2101      	movs	r1, #1
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001054:	f005 ffc2 	bl	8006fdc <HAL_DMA2D_ConfigLayer>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800105e:	f002 f9ff 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000160 	.word	0x20000160
 800106c:	4002b000 	.word	0x4002b000

08001070 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <HAL_DMA2D_MspInit+0x44>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d113      	bne.n	80010aa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	205a      	movs	r0, #90	@ 0x5a
 80010a0:	f005 f922 	bl	80062e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010a4:	205a      	movs	r0, #90	@ 0x5a
 80010a6:	f005 f93b 	bl	8006320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	4002b000 	.word	0x4002b000
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_FMC_Init+0x98>)
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_FMC_Init+0x9c>)
 80010d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_FMC_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_FMC_Init+0x98>)
 80010ee:	2210      	movs	r2, #16
 80010f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_FMC_Init+0x98>)
 80010f4:	2240      	movs	r2, #64	@ 0x40
 80010f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_FMC_Init+0x98>)
 80010fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_FMC_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <MX_FMC_Init+0x98>)
 8001108:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800110c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_FMC_Init+0x98>)
 8001110:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_FMC_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001120:	2307      	movs	r3, #7
 8001122:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001128:	2307      	movs	r3, #7
 800112a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_FMC_Init+0x98>)
 800113e:	f009 fe1b 	bl	800ad78 <HAL_SDRAM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001148:	f002 f98a 	bl	8003460 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001a0 	.word	0x200001a0
 8001158:	a0000140 	.word	0xa0000140

0800115c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001170:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <HAL_FMC_MspInit+0x100>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d16d      	bne.n	8001254 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_FMC_MspInit+0x100>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001182:	4a37      	ldr	r2, [pc, #220]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6393      	str	r3, [r2, #56]	@ 0x38
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001196:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800119a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a8:	230c      	movs	r3, #12
 80011aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	482c      	ldr	r0, [pc, #176]	@ (8001264 <HAL_FMC_MspInit+0x108>)
 80011b2:	f006 f841 	bl	8007238 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80011b6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80011ba:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c8:	230c      	movs	r3, #12
 80011ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	@ (8001268 <HAL_FMC_MspInit+0x10c>)
 80011d2:	f006 f831 	bl	8007238 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80011d6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80011da:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e8:	230c      	movs	r3, #12
 80011ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	481e      	ldr	r0, [pc, #120]	@ (800126c <HAL_FMC_MspInit+0x110>)
 80011f2:	f006 f821 	bl	8007238 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80011f6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80011fa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001208:	230c      	movs	r3, #12
 800120a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <HAL_FMC_MspInit+0x114>)
 8001212:	f006 f811 	bl	8007238 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001216:	2328      	movs	r3, #40	@ 0x28
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <HAL_FMC_MspInit+0x118>)
 8001230:	f006 f802 	bl	8007238 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001234:	2308      	movs	r3, #8
 8001236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001244:	230c      	movs	r3, #12
 8001246:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <HAL_FMC_MspInit+0x11c>)
 800124e:	f005 fff3 	bl	8007238 <HAL_GPIO_Init>
 8001252:	e000      	b.n	8001256 <HAL_FMC_MspInit+0xfa>
    return;
 8001254:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001d4 	.word	0x200001d4
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40021800 	.word	0x40021800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021400 	.word	0x40021400
 8001274:	40021c00 	.word	0x40021c00
 8001278:	40020800 	.word	0x40020800

0800127c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001284:	f7ff ff6a 	bl	800115c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <vApplicationGetIdleTaskMemory+0x2c>)
 80012a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <vApplicationGetIdleTaskMemory+0x30>)
 80012a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200003b8 	.word	0x200003b8
 80012c0:	20000458 	.word	0x20000458

080012c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b0a6      	sub	sp, #152	@ 0x98
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 80012d6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012da:	4618      	mov	r0, r3
 80012dc:	f00c fd76 	bl	800ddcc <osMutexCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a31      	ldr	r2, [pc, #196]	@ (80013a8 <MX_FREERTOS_Init+0xe4>)
 80012e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <MX_FREERTOS_Init+0xe8>)
 80012e8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00c fd03 	bl	800dd0c <osThreadCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <MX_FREERTOS_Init+0xec>)
 800130a:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <MX_FREERTOS_Init+0xf0>)
 800130e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001312:	461d      	mov	r5, r3
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001320:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f00c fcf0 	bl	800dd0c <osThreadCreate>
 800132c:	4603      	mov	r3, r0
 800132e:	4a22      	ldr	r2, [pc, #136]	@ (80013b8 <MX_FREERTOS_Init+0xf4>)
 8001330:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <MX_FREERTOS_Init+0xf8>)
 8001334:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001338:	461d      	mov	r5, r3
 800133a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8001346:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00c fcdd 	bl	800dd0c <osThreadCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <MX_FREERTOS_Init+0xfc>)
 8001356:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_FREERTOS_Init+0x100>)
 800135a:	f107 0420 	add.w	r4, r7, #32
 800135e:	461d      	mov	r5, r3
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00c fcca 	bl	800dd0c <osThreadCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <MX_FREERTOS_Init+0x104>)
 800137c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_FREERTOS_Init+0x108>)
 8001380:	1d3c      	adds	r4, r7, #4
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f00c fcb9 	bl	800dd0c <osThreadCreate>
 800139a:	4603      	mov	r3, r0
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <MX_FREERTOS_Init+0x10c>)
 800139e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013a0:	bf00      	nop
 80013a2:	3798      	adds	r7, #152	@ 0x98
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdb0      	pop	{r4, r5, r7, pc}
 80013a8:	200003b4 	.word	0x200003b4
 80013ac:	08012124 	.word	0x08012124
 80013b0:	200003a0 	.word	0x200003a0
 80013b4:	0801214c 	.word	0x0801214c
 80013b8:	200003a4 	.word	0x200003a4
 80013bc:	08012178 	.word	0x08012178
 80013c0:	200003a8 	.word	0x200003a8
 80013c4:	080121a4 	.word	0x080121a4
 80013c8:	200003ac 	.word	0x200003ac
 80013cc:	080121d0 	.word	0x080121d0
 80013d0:	200003b0 	.word	0x200003b0

080013d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f00c fce1 	bl	800dda4 <osDelay>
 80013e2:	e7fb      	b.n	80013dc <StartDefaultTask+0x8>

080013e4 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0d0      	sub	sp, #320	@ 0x140
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013f2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 80013f4:	4bc0      	ldr	r3, [pc, #768]	@ (80016f8 <StartDisplayTask+0x314>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <StartDisplayTask+0x28>
 80013fc:	4bbf      	ldr	r3, [pc, #764]	@ (80016fc <StartDisplayTask+0x318>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <StartDisplayTask+0x28>
 8001404:	4bbe      	ldr	r3, [pc, #760]	@ (8001700 <StartDisplayTask+0x31c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d114      	bne.n	8001436 <StartDisplayTask+0x52>
 800140c:	4bbd      	ldr	r3, [pc, #756]	@ (8001704 <StartDisplayTask+0x320>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d110      	bne.n	8001436 <StartDisplayTask+0x52>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001414:	4bbc      	ldr	r3, [pc, #752]	@ (8001708 <StartDisplayTask+0x324>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800141c:	4618      	mov	r0, r3
 800141e:	f00d fc17 	bl	800ec50 <xQueueSemaphoreTake>
      displayGameStatus();
 8001422:	f000 ff7b 	bl	800231c <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 8001426:	4bb8      	ldr	r3, [pc, #736]	@ (8001708 <StartDisplayTask+0x324>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	f00d f8e0 	bl	800e5f4 <xQueueGenericSend>
 8001434:	e223      	b.n	800187e <StartDisplayTask+0x49a>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 8001436:	4bb5      	ldr	r3, [pc, #724]	@ (800170c <StartDisplayTask+0x328>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d826      	bhi.n	800148c <StartDisplayTask+0xa8>
 800143e:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <StartDisplayTask+0x60>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	08001463 	.word	0x08001463
 800144c:	08001471 	.word	0x08001471
 8001450:	0800147f 	.word	0x0800147f
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	49ad      	ldr	r1, [pc, #692]	@ (8001710 <StartDisplayTask+0x32c>)
 800145a:	4618      	mov	r0, r3
 800145c:	f00f fd46 	bl	8010eec <siprintf>
          break;
 8001460:	e014      	b.n	800148c <StartDisplayTask+0xa8>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	49ab      	ldr	r1, [pc, #684]	@ (8001714 <StartDisplayTask+0x330>)
 8001468:	4618      	mov	r0, r3
 800146a:	f00f fd3f 	bl	8010eec <siprintf>
          break;
 800146e:	e00d      	b.n	800148c <StartDisplayTask+0xa8>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	49a8      	ldr	r1, [pc, #672]	@ (8001718 <StartDisplayTask+0x334>)
 8001476:	4618      	mov	r0, r3
 8001478:	f00f fd38 	bl	8010eec <siprintf>
          break;
 800147c:	e006      	b.n	800148c <StartDisplayTask+0xa8>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	49a6      	ldr	r1, [pc, #664]	@ (800171c <StartDisplayTask+0x338>)
 8001484:	4618      	mov	r0, r3
 8001486:	f00f fd31 	bl	8010eec <siprintf>
          break;
 800148a:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 800148c:	4ba4      	ldr	r3, [pc, #656]	@ (8001720 <StartDisplayTask+0x33c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001496:	49a3      	ldr	r1, [pc, #652]	@ (8001724 <StartDisplayTask+0x340>)
 8001498:	4618      	mov	r0, r3
 800149a:	f00f fd27 	bl	8010eec <siprintf>

      // On convertit la vitesse en texte
      char speedText[100];
      sprintf(speedText, (char *)"Speed: %d Hz", speed);
 800149e:	4ba2      	ldr	r3, [pc, #648]	@ (8001728 <StartDisplayTask+0x344>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a8:	49a0      	ldr	r1, [pc, #640]	@ (800172c <StartDisplayTask+0x348>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00f fd1e 	bl	8010eec <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 80014b0:	4b95      	ldr	r3, [pc, #596]	@ (8001708 <StartDisplayTask+0x324>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00d fbc9 	bl	800ec50 <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80014be:	489c      	ldr	r0, [pc, #624]	@ (8001730 <StartDisplayTask+0x34c>)
 80014c0:	f002 fd08 	bl	8003ed4 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 80014c4:	f002 fc6e 	bl	8003da4 <BSP_LCD_GetXSize>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d2:	2000      	movs	r0, #0
 80014d4:	f002 fe7e 	bl	80041d4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 80014d8:	f002 fc64 	bl	8003da4 <BSP_LCD_GetXSize>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	f240 1101 	movw	r1, #257	@ 0x101
 80014e6:	2000      	movs	r0, #0
 80014e8:	f002 fe74 	bl	80041d4 <BSP_LCD_DrawHLine>

      // On affiche la direction, le score et la vitesse
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 80014ec:	f107 020c 	add.w	r2, r7, #12
 80014f0:	2303      	movs	r3, #3
 80014f2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80014f6:	2000      	movs	r0, #0
 80014f8:	f002 fda4 	bl	8004044 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 80014fc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001500:	2303      	movs	r3, #3
 8001502:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001506:	20c8      	movs	r0, #200	@ 0xc8
 8001508:	f002 fd9c 	bl	8004044 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(350, 8*32 + 2, (uint8_t *)speedText, LEFT_MODE);
 800150c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001510:	2303      	movs	r3, #3
 8001512:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001516:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800151a:	f002 fd93 	bl	8004044 <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      if (!lastMove)
 800151e:	4b79      	ldr	r3, [pc, #484]	@ (8001704 <StartDisplayTask+0x320>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d13e      	bne.n	80015a4 <StartDisplayTask+0x1c0>
        switch (headPart) {
 8001526:	4b83      	ldr	r3, [pc, #524]	@ (8001734 <StartDisplayTask+0x350>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d83a      	bhi.n	80015a4 <StartDisplayTask+0x1c0>
 800152e:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <StartDisplayTask+0x150>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	0800155d 	.word	0x0800155d
 8001538:	08001545 	.word	0x08001545
 800153c:	08001575 	.word	0x08001575
 8001540:	0800158d 	.word	0x0800158d
          case HeadBottom:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8001544:	4b7c      	ldr	r3, [pc, #496]	@ (8001738 <StartDisplayTask+0x354>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	4618      	mov	r0, r3
 800154c:	4b7a      	ldr	r3, [pc, #488]	@ (8001738 <StartDisplayTask+0x354>)
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	4a7a      	ldr	r2, [pc, #488]	@ (800173c <StartDisplayTask+0x358>)
 8001554:	4619      	mov	r1, r3
 8001556:	f002 fee3 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 800155a:	e023      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadTop:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 800155c:	4b76      	ldr	r3, [pc, #472]	@ (8001738 <StartDisplayTask+0x354>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	4618      	mov	r0, r3
 8001564:	4b74      	ldr	r3, [pc, #464]	@ (8001738 <StartDisplayTask+0x354>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	015b      	lsls	r3, r3, #5
 800156a:	4a75      	ldr	r2, [pc, #468]	@ (8001740 <StartDisplayTask+0x35c>)
 800156c:	4619      	mov	r1, r3
 800156e:	f002 fed7 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 8001572:	e017      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadLeft:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 8001574:	4b70      	ldr	r3, [pc, #448]	@ (8001738 <StartDisplayTask+0x354>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	4618      	mov	r0, r3
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <StartDisplayTask+0x354>)
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	015b      	lsls	r3, r3, #5
 8001582:	4a70      	ldr	r2, [pc, #448]	@ (8001744 <StartDisplayTask+0x360>)
 8001584:	4619      	mov	r1, r3
 8001586:	f002 fecb 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 800158a:	e00b      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadRight:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 800158c:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <StartDisplayTask+0x354>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	015b      	lsls	r3, r3, #5
 8001592:	4618      	mov	r0, r3
 8001594:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <StartDisplayTask+0x354>)
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	015b      	lsls	r3, r3, #5
 800159a:	4a6b      	ldr	r2, [pc, #428]	@ (8001748 <StartDisplayTask+0x364>)
 800159c:	4619      	mov	r1, r3
 800159e:	f002 febf 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 80015a2:	bf00      	nop
        }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80015aa:	e08e      	b.n	80016ca <StartDisplayTask+0x2e6>
        switch (snakeBodyParts[i]) {
 80015ac:	4a67      	ldr	r2, [pc, #412]	@ (800174c <StartDisplayTask+0x368>)
 80015ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	f200 8082 	bhi.w	80016c0 <StartDisplayTask+0x2dc>
 80015bc:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <StartDisplayTask+0x1e0>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015dd 	.word	0x080015dd
 80015c8:	08001603 	.word	0x08001603
 80015cc:	08001629 	.word	0x08001629
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	08001675 	.word	0x08001675
 80015d8:	0800169b 	.word	0x0800169b
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 80015dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001750 <StartDisplayTask+0x36c>)
 80015de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	4618      	mov	r0, r3
 80015ea:	4a59      	ldr	r2, [pc, #356]	@ (8001750 <StartDisplayTask+0x36c>)
 80015ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4a56      	ldr	r2, [pc, #344]	@ (8001754 <StartDisplayTask+0x370>)
 80015fa:	4619      	mov	r1, r3
 80015fc:	f002 fe90 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 8001600:	e05e      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8001602:	4a53      	ldr	r2, [pc, #332]	@ (8001750 <StartDisplayTask+0x36c>)
 8001604:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001608:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	4618      	mov	r0, r3
 8001610:	4a4f      	ldr	r2, [pc, #316]	@ (8001750 <StartDisplayTask+0x36c>)
 8001612:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	4a4e      	ldr	r2, [pc, #312]	@ (8001758 <StartDisplayTask+0x374>)
 8001620:	4619      	mov	r1, r3
 8001622:	f002 fe7d 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 8001626:	e04b      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8001628:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <StartDisplayTask+0x36c>)
 800162a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800162e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	4618      	mov	r0, r3
 8001636:	4a46      	ldr	r2, [pc, #280]	@ (8001750 <StartDisplayTask+0x36c>)
 8001638:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	015b      	lsls	r3, r3, #5
 8001644:	4a45      	ldr	r2, [pc, #276]	@ (800175c <StartDisplayTask+0x378>)
 8001646:	4619      	mov	r1, r3
 8001648:	f002 fe6a 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 800164c:	e038      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 800164e:	4a40      	ldr	r2, [pc, #256]	@ (8001750 <StartDisplayTask+0x36c>)
 8001650:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001654:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	4618      	mov	r0, r3
 800165c:	4a3c      	ldr	r2, [pc, #240]	@ (8001750 <StartDisplayTask+0x36c>)
 800165e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	785b      	ldrb	r3, [r3, #1]
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	4a3d      	ldr	r2, [pc, #244]	@ (8001760 <StartDisplayTask+0x37c>)
 800166c:	4619      	mov	r1, r3
 800166e:	f002 fe57 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 8001672:	e025      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 8001674:	4a36      	ldr	r2, [pc, #216]	@ (8001750 <StartDisplayTask+0x36c>)
 8001676:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800167a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	4618      	mov	r0, r3
 8001682:	4a33      	ldr	r2, [pc, #204]	@ (8001750 <StartDisplayTask+0x36c>)
 8001684:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	4a34      	ldr	r2, [pc, #208]	@ (8001764 <StartDisplayTask+0x380>)
 8001692:	4619      	mov	r1, r3
 8001694:	f002 fe44 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 8001698:	e012      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 800169a:	4a2d      	ldr	r2, [pc, #180]	@ (8001750 <StartDisplayTask+0x36c>)
 800169c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016a0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	4618      	mov	r0, r3
 80016a8:	4a29      	ldr	r2, [pc, #164]	@ (8001750 <StartDisplayTask+0x36c>)
 80016aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	015b      	lsls	r3, r3, #5
 80016b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001768 <StartDisplayTask+0x384>)
 80016b8:	4619      	mov	r1, r3
 80016ba:	f002 fe31 	bl	8004320 <BSP_LCD_DrawBitmap>
            break;
 80016be:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 80016c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016c4:	3301      	adds	r3, #1
 80016c6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <StartDisplayTask+0x33c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f6ff af69 	blt.w	80015ac <StartDisplayTask+0x1c8>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <StartDisplayTask+0x388>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d876      	bhi.n	80017d0 <StartDisplayTask+0x3ec>
 80016e2:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <StartDisplayTask+0x304>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001771 	.word	0x08001771
 80016ec:	08001789 	.word	0x08001789
 80016f0:	080017a1 	.word	0x080017a1
 80016f4:	080017b9 	.word	0x080017b9
 80016f8:	2000029c 	.word	0x2000029c
 80016fc:	20000298 	.word	0x20000298
 8001700:	20000294 	.word	0x20000294
 8001704:	200002a0 	.word	0x200002a0
 8001708:	200003b4 	.word	0x200003b4
 800170c:	20000210 	.word	0x20000210
 8001710:	080121ec 	.word	0x080121ec
 8001714:	08012200 	.word	0x08012200
 8001718:	08012214 	.word	0x08012214
 800171c:	08012228 	.word	0x08012228
 8001720:	2000028c 	.word	0x2000028c
 8001724:	0801223c 	.word	0x0801223c
 8001728:	20000000 	.word	0x20000000
 800172c:	08012248 	.word	0x08012248
 8001730:	ffa52a2a 	.word	0xffa52a2a
 8001734:	20000211 	.word	0x20000211
 8001738:	20000004 	.word	0x20000004
 800173c:	08015524 	.word	0x08015524
 8001740:	080161b0 	.word	0x080161b0
 8001744:	08016e3c 	.word	0x08016e3c
 8001748:	08017ac8 	.word	0x08017ac8
 800174c:	20000214 	.word	0x20000214
 8001750:	200002a4 	.word	0x200002a4
 8001754:	08012f80 	.word	0x08012f80
 8001758:	08013c0c 	.word	0x08013c0c
 800175c:	08014898 	.word	0x08014898
 8001760:	08018754 	.word	0x08018754
 8001764:	080193e0 	.word	0x080193e0
 8001768:	0801a06c 	.word	0x0801a06c
 800176c:	20000001 	.word	0x20000001
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 8001770:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <StartDisplayTask+0x4a4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	015b      	lsls	r3, r3, #5
 8001776:	4618      	mov	r0, r3
 8001778:	4b43      	ldr	r3, [pc, #268]	@ (8001888 <StartDisplayTask+0x4a4>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	4a43      	ldr	r2, [pc, #268]	@ (800188c <StartDisplayTask+0x4a8>)
 8001780:	4619      	mov	r1, r3
 8001782:	f002 fdcd 	bl	8004320 <BSP_LCD_DrawBitmap>
          break;
 8001786:	e023      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8001788:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <StartDisplayTask+0x4a4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	015b      	lsls	r3, r3, #5
 800178e:	4618      	mov	r0, r3
 8001790:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <StartDisplayTask+0x4a4>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	4a3e      	ldr	r2, [pc, #248]	@ (8001890 <StartDisplayTask+0x4ac>)
 8001798:	4619      	mov	r1, r3
 800179a:	f002 fdc1 	bl	8004320 <BSP_LCD_DrawBitmap>
          break;
 800179e:	e017      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 80017a0:	4b39      	ldr	r3, [pc, #228]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	015b      	lsls	r3, r3, #5
 80017a6:	4618      	mov	r0, r3
 80017a8:	4b37      	ldr	r3, [pc, #220]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017aa:	785b      	ldrb	r3, [r3, #1]
 80017ac:	015b      	lsls	r3, r3, #5
 80017ae:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <StartDisplayTask+0x4b0>)
 80017b0:	4619      	mov	r1, r3
 80017b2:	f002 fdb5 	bl	8004320 <BSP_LCD_DrawBitmap>
          break;
 80017b6:	e00b      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	4618      	mov	r0, r3
 80017c0:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	4a34      	ldr	r2, [pc, #208]	@ (8001898 <StartDisplayTask+0x4b4>)
 80017c8:	4619      	mov	r1, r3
 80017ca:	f002 fda9 	bl	8004320 <BSP_LCD_DrawBitmap>
          break;
 80017ce:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <StartDisplayTask+0x4b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11a      	bne.n	800180e <StartDisplayTask+0x42a>
 80017d8:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <StartDisplayTask+0x4bc>)
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d105      	bne.n	80017f0 <StartDisplayTask+0x40c>
 80017e4:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <StartDisplayTask+0x4bc>)
 80017e6:	785a      	ldrb	r2, [r3, #1]
 80017e8:	4b2e      	ldr	r3, [pc, #184]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d00e      	beq.n	800180e <StartDisplayTask+0x42a>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 80017f0:	482d      	ldr	r0, [pc, #180]	@ (80018a8 <StartDisplayTask+0x4c4>)
 80017f2:	f002 fb6f 	bl	8003ed4 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 80017f6:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	b298      	uxth	r0, r3
 80017fe:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <StartDisplayTask+0x4c0>)
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	015b      	lsls	r3, r3, #5
 8001804:	b299      	uxth	r1, r3
 8001806:	2320      	movs	r3, #32
 8001808:	2220      	movs	r2, #32
 800180a:	f002 fe3b 	bl	8004484 <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001814:	e01f      	b.n	8001856 <StartDisplayTask+0x472>
        if (applePosition[i][0] != -1)
 8001816:	4a25      	ldr	r2, [pc, #148]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001818:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800181c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001824:	d012      	beq.n	800184c <StartDisplayTask+0x468>
          BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001828:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	4618      	mov	r0, r3
 8001834:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001836:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <StartDisplayTask+0x4cc>)
 8001846:	4619      	mov	r1, r3
 8001848:	f002 fd6a 	bl	8004320 <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++)
 800184c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001856:	2304      	movs	r3, #4
 8001858:	461a      	mov	r2, r3
 800185a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800185e:	4293      	cmp	r3, r2
 8001860:	dbd9      	blt.n	8001816 <StartDisplayTask+0x432>
      xSemaphoreGive(displayMutexHandle);
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <StartDisplayTask+0x4d0>)
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	f00c fec2 	bl	800e5f4 <xQueueGenericSend>

      if (lastMove)
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <StartDisplayTask+0x4d4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <StartDisplayTask+0x49a>
        lastMove = 0;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <StartDisplayTask+0x4d4>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    }

    osDelay(100);
 800187e:	2064      	movs	r0, #100	@ 0x64
 8001880:	f00c fa90 	bl	800dda4 <osDelay>
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 8001884:	e5b6      	b.n	80013f4 <StartDisplayTask+0x10>
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	0801acf8 	.word	0x0801acf8
 8001890:	0801b984 	.word	0x0801b984
 8001894:	0801c610 	.word	0x0801c610
 8001898:	0801d29c 	.word	0x0801d29c
 800189c:	20000290 	.word	0x20000290
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000394 	.word	0x20000394
 80018a8:	ff81cd4b 	.word	0xff81cd4b
 80018ac:	20000398 	.word	0x20000398
 80018b0:	080122f4 	.word	0x080122f4
 80018b4:	200003b4 	.word	0x200003b4
 80018b8:	200002a0 	.word	0x200002a0

080018bc <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <StartJoystickTask+0xcc>)
 80018c6:	2208      	movs	r2, #8
 80018c8:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80018ca:	492f      	ldr	r1, [pc, #188]	@ (8001988 <StartJoystickTask+0xcc>)
 80018cc:	482f      	ldr	r0, [pc, #188]	@ (800198c <StartJoystickTask+0xd0>)
 80018ce:	f004 fa03 	bl	8005cd8 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 80018d2:	482e      	ldr	r0, [pc, #184]	@ (800198c <StartJoystickTask+0xd0>)
 80018d4:	f004 f89a 	bl	8005a0c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 80018d8:	bf00      	nop
 80018da:	2164      	movs	r1, #100	@ 0x64
 80018dc:	482b      	ldr	r0, [pc, #172]	@ (800198c <StartJoystickTask+0xd0>)
 80018de:	f004 f963 	bl	8005ba8 <HAL_ADC_PollForConversion>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f8      	bne.n	80018da <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 80018e8:	4828      	ldr	r0, [pc, #160]	@ (800198c <StartJoystickTask+0xd0>)
 80018ea:	f004 f9e8 	bl	8005cbe <HAL_ADC_GetValue>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <StartJoystickTask+0xd4>)
 80018f2:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 80018f4:	4827      	ldr	r0, [pc, #156]	@ (8001994 <StartJoystickTask+0xd8>)
 80018f6:	f004 f889 	bl	8005a0c <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80018fa:	bf00      	nop
 80018fc:	2164      	movs	r1, #100	@ 0x64
 80018fe:	4825      	ldr	r0, [pc, #148]	@ (8001994 <StartJoystickTask+0xd8>)
 8001900:	f004 f952 	bl	8005ba8 <HAL_ADC_PollForConversion>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f8      	bne.n	80018fc <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <StartJoystickTask+0xd8>)
 800190c:	f004 f9d7 	bl	8005cbe <HAL_ADC_GetValue>
 8001910:	4603      	mov	r3, r0
 8001912:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <StartJoystickTask+0xdc>)
 8001914:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <StartJoystickTask+0xd4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800191e:	d207      	bcs.n	8001930 <StartJoystickTask+0x74>
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <StartJoystickTask+0xe0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <StartJoystickTask+0x74>
      direction = Down;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <StartJoystickTask+0xe4>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e027      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001930:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <StartJoystickTask+0xd4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001938:	4293      	cmp	r3, r2
 800193a:	d907      	bls.n	800194c <StartJoystickTask+0x90>
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <StartJoystickTask+0xe0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d003      	beq.n	800194c <StartJoystickTask+0x90>
      direction = Up;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <StartJoystickTask+0xe4>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e019      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <StartJoystickTask+0xdc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001954:	d207      	bcs.n	8001966 <StartJoystickTask+0xaa>
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <StartJoystickTask+0xe0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <StartJoystickTask+0xaa>
      direction = Right;
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <StartJoystickTask+0xe4>)
 8001960:	2203      	movs	r2, #3
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e00c      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <StartJoystickTask+0xdc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800196e:	4293      	cmp	r3, r2
 8001970:	d906      	bls.n	8001980 <StartJoystickTask+0xc4>
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <StartJoystickTask+0xe0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d002      	beq.n	8001980 <StartJoystickTask+0xc4>
      direction = Left;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <StartJoystickTask+0xe4>)
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 8001980:	200a      	movs	r0, #10
 8001982:	f00c fa0f 	bl	800dda4 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 8001986:	e79d      	b.n	80018c4 <StartJoystickTask+0x8>
 8001988:	20000708 	.word	0x20000708
 800198c:	20000118 	.word	0x20000118
 8001990:	20000208 	.word	0x20000208
 8001994:	200000d0 	.word	0x200000d0
 8001998:	2000020c 	.word	0x2000020c
 800199c:	20000211 	.word	0x20000211
 80019a0:	20000210 	.word	0x20000210

080019a4 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b08e      	sub	sp, #56	@ 0x38
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80019ac:	f00d fffa 	bl	800f9a4 <xTaskGetTickCount>
 80019b0:	4603      	mov	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]
  const TickType_t delay = pdMS_TO_TICKS(1000. / speed);
 80019b4:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <StartManageBodyParts+0x210>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdcb 	bl	8000554 <__aeabi_i2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	497c      	ldr	r1, [pc, #496]	@ (8001bb8 <StartManageBodyParts+0x214>)
 80019c8:	f7fe ff58 	bl	800087c <__aeabi_ddiv>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f83a 	bl	8000a4c <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a76      	ldr	r2, [pc, #472]	@ (8001bbc <StartManageBodyParts+0x218>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 80019ec:	4b74      	ldr	r3, [pc, #464]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 82ad 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
 80019f6:	4b73      	ldr	r3, [pc, #460]	@ (8001bc4 <StartManageBodyParts+0x220>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 82a8 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
 8001a00:	4b71      	ldr	r3, [pc, #452]	@ (8001bc8 <StartManageBodyParts+0x224>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 82a3 	beq.w	8001f50 <StartManageBodyParts+0x5ac>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 8001a0a:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <StartManageBodyParts+0x228>)
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	4b70      	ldr	r3, [pc, #448]	@ (8001bd0 <StartManageBodyParts+0x22c>)
 8001a10:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001a12:	4b6e      	ldr	r3, [pc, #440]	@ (8001bcc <StartManageBodyParts+0x228>)
 8001a14:	785a      	ldrb	r2, [r3, #1]
 8001a16:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <StartManageBodyParts+0x22c>)
 8001a18:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	733b      	strb	r3, [r7, #12]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001a20:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	737b      	strb	r3, [r7, #13]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001a26:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <StartManageBodyParts+0x234>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d832      	bhi.n	8001a94 <StartManageBodyParts+0xf0>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <StartManageBodyParts+0x90>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a59 	.word	0x08001a59
 8001a3c:	08001a6d 	.word	0x08001a6d
 8001a40:	08001a81 	.word	0x08001a81
        case Up:
          headPart = HeadTop;
 8001a44:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 8001a4a:	4b62      	ldr	r3, [pc, #392]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a4c:	785b      	ldrb	r3, [r3, #1]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b60      	ldr	r3, [pc, #384]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a54:	705a      	strb	r2, [r3, #1]
          break;
 8001a56:	e01d      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Down:
          headPart = HeadBottom;
 8001a58:	4b60      	ldr	r3, [pc, #384]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a68:	705a      	strb	r2, [r3, #1]
          break;
 8001a6a:	e013      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Left:
          headPart = HeadLeft;
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001a72:	4b58      	ldr	r3, [pc, #352]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b56      	ldr	r3, [pc, #344]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a7c:	701a      	strb	r2, [r3, #0]
          break;
 8001a7e:	e009      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Right:
          headPart = HeadRight;
 8001a80:	4b56      	ldr	r3, [pc, #344]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a82:	2203      	movs	r2, #3
 8001a84:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b51      	ldr	r3, [pc, #324]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a90:	701a      	strb	r2, [r3, #0]
          break;
 8001a92:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001a94:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	220f      	movs	r2, #15
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d204      	bcs.n	8001aa8 <StartManageBodyParts+0x104>
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d306      	bcc.n	8001ab6 <StartManageBodyParts+0x112>
        // On a touché un mur
        gameOver = 1;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
        lastMove = 1;
 8001aae:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <StartManageBodyParts+0x23c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e022      	b.n	8001afc <StartManageBodyParts+0x158>
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aba:	e019      	b.n	8001af0 <StartManageBodyParts+0x14c>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 8001abc:	4b45      	ldr	r3, [pc, #276]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4948      	ldr	r1, [pc, #288]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d10e      	bne.n	8001aea <StartManageBodyParts+0x146>
 8001acc:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	4944      	ldr	r1, [pc, #272]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d105      	bne.n	8001aea <StartManageBodyParts+0x146>
            // On a touché notre corps
            gameOver = 1;
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
            lastMove = 1;
 8001ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8001be0 <StartManageBodyParts+0x23c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	3301      	adds	r3, #1
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af0:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	4293      	cmp	r3, r2
 8001afa:	dbdf      	blt.n	8001abc <StartManageBodyParts+0x118>
      }
      // Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001afc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <StartManageBodyParts+0x248>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b06:	e0fc      	b.n	8001d02 <StartManageBodyParts+0x35e>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001b08:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4a38      	ldr	r2, [pc, #224]	@ (8001bf0 <StartManageBodyParts+0x24c>)
 8001b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b12:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001b16:	4299      	cmp	r1, r3
 8001b18:	f040 80f0 	bne.w	8001cfc <StartManageBodyParts+0x358>
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4a33      	ldr	r2, [pc, #204]	@ (8001bf0 <StartManageBodyParts+0x24c>)
 8001b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b2e:	4299      	cmp	r1, r3
 8001b30:	f040 80e4 	bne.w	8001cfc <StartManageBodyParts+0x358>
          snakeSize++;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b3e:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <StartManageBodyParts+0x248>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b46:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b4e:	e020      	b.n	8001b92 <StartManageBodyParts+0x1ee>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <StartManageBodyParts+0x250>)
 8001b56:	5cd1      	ldrb	r1, [r2, r3]
 8001b58:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <StartManageBodyParts+0x250>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	4413      	add	r3, r2
 8001b5e:	460a      	mov	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3b01      	subs	r3, #1
 8001b66:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b68:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	3b01      	subs	r3, #1
 8001b78:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	7859      	ldrb	r1, [r3, #1]
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	460a      	mov	r2, r1
 8001b8a:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	dcdb      	bgt.n	8001b50 <StartManageBodyParts+0x1ac>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d92b      	bls.n	8001bf8 <StartManageBodyParts+0x254>
            backX = snakeBodyPosition[0][0];
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeBodyPosition[0][1];
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001bb0:	e02a      	b.n	8001c08 <StartManageBodyParts+0x264>
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	408f4000 	.word	0x408f4000
 8001bbc:	10624dd3 	.word	0x10624dd3
 8001bc0:	2000029c 	.word	0x2000029c
 8001bc4:	20000298 	.word	0x20000298
 8001bc8:	20000294 	.word	0x20000294
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000394 	.word	0x20000394
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	20000210 	.word	0x20000210
 8001bdc:	20000211 	.word	0x20000211
 8001be0:	200002a0 	.word	0x200002a0
 8001be4:	200002a4 	.word	0x200002a4
 8001be8:	2000028c 	.word	0x2000028c
 8001bec:	20000290 	.word	0x20000290
 8001bf0:	20000398 	.word	0x20000398
 8001bf4:	20000214 	.word	0x20000214
          }
          else {
            backX = snakeTailPosition[0];
 8001bf8:	4ba8      	ldr	r3, [pc, #672]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeTailPosition[1];
 8001c00:	4ba6      	ldr	r3, [pc, #664]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001c08:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001c0a:	7818      	ldrb	r0, [r3, #0]
 8001c0c:	4ba4      	ldr	r3, [pc, #656]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001c0e:	7859      	ldrb	r1, [r3, #1]
 8001c10:	7b3b      	ldrb	r3, [r7, #12]
 8001c12:	7b7a      	ldrb	r2, [r7, #13]
 8001c14:	f897 5022 	ldrb.w	r5, [r7, #34]	@ 0x22
 8001c18:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	462b      	mov	r3, r5
 8001c22:	4622      	mov	r2, r4
 8001c24:	f000 fa0c 	bl	8002040 <whatBodyPart>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001c2e:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001c30:	7b3a      	ldrb	r2, [r7, #12]
 8001c32:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001c34:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001c36:	7b7a      	ldrb	r2, [r7, #13]
 8001c38:	4b9b      	ldr	r3, [pc, #620]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001c3a:	705a      	strb	r2, [r3, #1]

          // Si on a de la place pour une nouvelle pomme
          uint8_t NBFreeCells = gridSizeX * gridSizeY - snakeSize - 1;
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	2308      	movs	r3, #8
 8001c40:	fb12 f303 	smulbb	r3, r2, r3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b99      	ldr	r3, [pc, #612]	@ (8001eac <StartManageBodyParts+0x508>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
          if (NBFreeCells > NBApple) {
 8001c52:	2204      	movs	r2, #4
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d945      	bls.n	8001ce6 <StartManageBodyParts+0x342>
            // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
            do {
              applePosition[i][0] = rand() % gridSizeX;
 8001c5a:	f00f f847 	bl	8010cec <rand>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	220f      	movs	r2, #15
 8001c62:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c66:	fb01 f202 	mul.w	r2, r1, r2
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	b259      	sxtb	r1, r3
 8001c6e:	4a90      	ldr	r2, [pc, #576]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c72:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
              applePosition[i][1] = rand() % gridSizeY;
 8001c76:	f00f f839 	bl	8010cec <rand>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c82:	fb01 f202 	mul.w	r2, r1, r2
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	b259      	sxtb	r1, r3
 8001c8a:	4a89      	ldr	r2, [pc, #548]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	460a      	mov	r2, r1
 8001c94:	705a      	strb	r2, [r3, #1]
            } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) 
 8001c96:	4a86      	ldr	r2, [pc, #536]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4983      	ldr	r1, [pc, #524]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f000 fa27 	bl	8002104 <isSnakePosition>
 8001cb6:	4603      	mov	r3, r0
                  || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ce      	bne.n	8001c5a <StartManageBodyParts+0x2b6>
 8001cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc0:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001cc4:	b2d8      	uxtb	r0, r3
 8001cc6:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f000 fa5f 	bl	800219c <isApplePosition>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ba      	bne.n	8001c5a <StartManageBodyParts+0x2b6>
 8001ce4:	e00a      	b.n	8001cfc <StartManageBodyParts+0x358>
          }
          else {
            applePosition[i][0] = -1;
 8001ce6:	4a72      	ldr	r2, [pc, #456]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cea:	21ff      	movs	r1, #255	@ 0xff
 8001cec:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = -1;
 8001cf0:	4a6f      	ldr	r2, [pc, #444]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	22ff      	movs	r2, #255	@ 0xff
 8001cfa:	705a      	strb	r2, [r3, #1]
      for (int i = 0; i < NBApple; i++) {
 8001cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfe:	3301      	adds	r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d02:	2304      	movs	r3, #4
 8001d04:	461a      	mov	r2, r3
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f6ff aefd 	blt.w	8001b08 <StartManageBodyParts+0x164>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 8001d0e:	4b69      	ldr	r3, [pc, #420]	@ (8001eb4 <StartManageBodyParts+0x510>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 811c 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001d18:	4b64      	ldr	r3, [pc, #400]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d011      	beq.n	8001d44 <StartManageBodyParts+0x3a0>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001d20:	4b62      	ldr	r3, [pc, #392]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	4a60      	ldr	r2, [pc, #384]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d28:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d2e:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001d30:	4b5e      	ldr	r3, [pc, #376]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	785a      	ldrb	r2, [r3, #1]
 8001d3e:	4b57      	ldr	r3, [pc, #348]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d40:	705a      	strb	r2, [r3, #1]
 8001d42:	e005      	b.n	8001d50 <StartManageBodyParts+0x3ac>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 8001d44:	7b3a      	ldrb	r2, [r7, #12]
 8001d46:	4b55      	ldr	r3, [pc, #340]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d48:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001d4a:	7b7a      	ldrb	r2, [r7, #13]
 8001d4c:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d4e:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d50:	4b56      	ldr	r3, [pc, #344]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	e020      	b.n	8001d9c <StartManageBodyParts+0x3f8>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a51      	ldr	r2, [pc, #324]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001d60:	5cd1      	ldrb	r1, [r2, r3]
 8001d62:	4a50      	ldr	r2, [pc, #320]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	460a      	mov	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d72:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001d76:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	4a49      	ldr	r2, [pc, #292]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	7859      	ldrb	r1, [r3, #1]
 8001d8a:	4a47      	ldr	r2, [pc, #284]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	460a      	mov	r2, r1
 8001d94:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dcdb      	bgt.n	8001d5a <StartManageBodyParts+0x3b6>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001da2:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <StartManageBodyParts+0x508>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80b2 	beq.w	8001f10 <StartManageBodyParts+0x56c>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001dac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001dae:	7818      	ldrb	r0, [r3, #0]
 8001db0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001db2:	7859      	ldrb	r1, [r3, #1]
 8001db4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001db6:	781c      	ldrb	r4, [r3, #0]
 8001db8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dba:	785d      	ldrb	r5, [r3, #1]
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	7b7a      	ldrb	r2, [r7, #13]
 8001dc0:	9201      	str	r2, [sp, #4]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	f000 f93a 	bl	8002040 <whatBodyPart>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001dd2:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001dd4:	7b3a      	ldrb	r2, [r7, #12]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dd8:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001dda:	7b7a      	ldrb	r2, [r7, #13]
 8001ddc:	4b32      	ldr	r3, [pc, #200]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dde:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <StartManageBodyParts+0x508>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	f200 80b0 	bhi.w	8001f50 <StartManageBodyParts+0x5ac>
 8001df0:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <StartManageBodyParts+0x454>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e35 	.word	0x08001e35
 8001e00:	08001e59 	.word	0x08001e59
 8001e04:	08001e7f 	.word	0x08001e7f
 8001e08:	08001ec5 	.word	0x08001ec5
 8001e0c:	08001eeb 	.word	0x08001eeb
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e10:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e18:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d103      	bne.n	8001e2c <StartManageBodyParts+0x488>
                tailPart = TailTop;
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e2a:	e091      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailRight;
 8001e2c:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e2e:	2203      	movs	r2, #3
 8001e30:	701a      	strb	r2, [r3, #0]
              break;
 8001e32:	e08d      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e3c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d103      	bne.n	8001e50 <StartManageBodyParts+0x4ac>
                tailPart = TailTop;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001e4e:	e07f      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailLeft;
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
              break;
 8001e56:	e07b      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	785a      	ldrb	r2, [r3, #1]
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d203      	bcs.n	8001e76 <StartManageBodyParts+0x4d2>
                tailPart = TailTop;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001e74:	e06c      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
              break;
 8001e7c:	e068      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e86:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d214      	bcs.n	8001ebc <StartManageBodyParts+0x518>
                tailPart = TailLeft;
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e98:	e05a      	b.n	8001f50 <StartManageBodyParts+0x5ac>
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	20000214 	.word	0x20000214
 8001ea8:	200002a4 	.word	0x200002a4
 8001eac:	2000028c 	.word	0x2000028c
 8001eb0:	20000398 	.word	0x20000398
 8001eb4:	20000290 	.word	0x20000290
 8001eb8:	20000001 	.word	0x20000001
                tailPart = TailRight;
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	701a      	strb	r2, [r3, #0]
              break;
 8001ec2:	e045      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <StartManageBodyParts+0x5c0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <StartManageBodyParts+0x5c4>)
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	785a      	ldrb	r2, [r3, #1]
 8001ed2:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <StartManageBodyParts+0x5c8>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d103      	bne.n	8001ee2 <StartManageBodyParts+0x53e>
                tailPart = TailRight;
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001edc:	2203      	movs	r2, #3
 8001ede:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001ee0:	e036      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
              break;
 8001ee8:	e032      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <StartManageBodyParts+0x5c0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <StartManageBodyParts+0x5c4>)
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	785a      	ldrb	r2, [r3, #1]
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <StartManageBodyParts+0x5c8>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d103      	bne.n	8001f08 <StartManageBodyParts+0x564>
                tailPart = TailLeft;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f02:	2202      	movs	r2, #2
 8001f04:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f06:	e023      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
              break;
 8001f0e:	e01f      	b.n	8001f50 <StartManageBodyParts+0x5ac>
          }
        }
        else {
          switch (headPart) {
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <StartManageBodyParts+0x5cc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d81b      	bhi.n	8001f50 <StartManageBodyParts+0x5ac>
 8001f18:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <StartManageBodyParts+0x57c>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f39 	.word	0x08001f39
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f49 	.word	0x08001f49
            case HeadTop:
              tailPart = TailTop;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
              break;
 8001f36:	e00b      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadBottom:
              tailPart = TailBottom;
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
              break;
 8001f3e:	e007      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadLeft:
              tailPart = TailLeft;
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
              break;
 8001f46:	e003      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadRight:
              tailPart = TailRight;
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	701a      	strb	r2, [r3, #0]
              break;
 8001f4e:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f00d fb4a 	bl	800f5f0 <vTaskDelayUntil>
    if (!gameOver && !gamePaused && gameStarted) {
 8001f5c:	e546      	b.n	80019ec <StartManageBodyParts+0x48>
 8001f5e:	bf00      	nop
 8001f60:	20000001 	.word	0x20000001
 8001f64:	2000028c 	.word	0x2000028c
 8001f68:	200002a4 	.word	0x200002a4
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000211 	.word	0x20000211

08001f74 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <StartTsHandlerTask+0x14>
      rand();
 8001f84:	f00e feb2 	bl	8010cec <rand>
    

    BSP_TS_GetState(&TS_State);
 8001f88:	4827      	ldr	r0, [pc, #156]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8001f8a:	f002 ff47 	bl	8004e1c <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 8001f8e:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d136      	bne.n	8002004 <StartTsHandlerTask+0x90>
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <StartTsHandlerTask+0xb8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d032      	beq.n	8002004 <StartTsHandlerTask+0x90>
      if (gameOver) {
 8001f9e:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <StartTsHandlerTask+0xbc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <StartTsHandlerTask+0x3e>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fa6:	4823      	ldr	r0, [pc, #140]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fa8:	f001 ffe0 	bl	8003f6c <BSP_LCD_Clear>
        restartGame();
 8001fac:	f000 f92a 	bl	8002204 <restartGame>
 8001fb0:	e028      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else if (gamePaused) {
 8001fb2:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d014      	beq.n	8001fe4 <StartTsHandlerTask+0x70>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <StartTsHandlerTask+0xc8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00c fe44 	bl	800ec50 <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fc8:	481a      	ldr	r0, [pc, #104]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fca:	f001 ffcf 	bl	8003f6c <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <StartTsHandlerTask+0xc8>)
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f00c fb0c 	bl	800e5f4 <xQueueGenericSend>
        gamePaused = 0;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e00f      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else if (!gameStarted) {
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d108      	bne.n	8001ffe <StartTsHandlerTask+0x8a>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fec:	4811      	ldr	r0, [pc, #68]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fee:	f001 ffbd 	bl	8003f6c <BSP_LCD_Clear>
        restartGame();
 8001ff2:	f000 f907 	bl	8002204 <restartGame>
        gameStarted = 1;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e002      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else {
        gamePaused = 1;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <StartTsHandlerTask+0xa0>
      screenPressed = 1;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <StartTsHandlerTask+0xb8>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e002      	b.n	800201a <StartTsHandlerTask+0xa6>
    }
    else {
      screenPressed = 0;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <StartTsHandlerTask+0xb8>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 800201a:	200a      	movs	r0, #10
 800201c:	f00b fec2 	bl	800dda4 <osDelay>
    if (!gameStarted)
 8002020:	e7ac      	b.n	8001f7c <StartTsHandlerTask+0x8>
 8002022:	bf00      	nop
 8002024:	20000294 	.word	0x20000294
 8002028:	200001d8 	.word	0x200001d8
 800202c:	20000204 	.word	0x20000204
 8002030:	2000029c 	.word	0x2000029c
 8002034:	ff81cd4b 	.word	0xff81cd4b
 8002038:	20000298 	.word	0x20000298
 800203c:	200003b4 	.word	0x200003b4

08002040 <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8002040:	b490      	push	{r4, r7}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4623      	mov	r3, r4
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	4603      	mov	r3, r0
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	460b      	mov	r3, r1
 8002058:	717b      	strb	r3, [r7, #5]
 800205a:	4613      	mov	r3, r2
 800205c:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	797b      	ldrb	r3, [r7, #5]
 8002062:	429a      	cmp	r2, r3
 8002064:	d101      	bne.n	800206a <whatBodyPart+0x2a>
    return BottomTop;
 8002066:	2302      	movs	r3, #2
 8002068:	e046      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 800206a:	79ba      	ldrb	r2, [r7, #6]
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d101      	bne.n	8002076 <whatBodyPart+0x36>
    return LeftRight;
 8002072:	2303      	movs	r3, #3
 8002074:	e040      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 8002076:	79fa      	ldrb	r2, [r7, #7]
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	429a      	cmp	r2, r3
 800207c:	d20b      	bcs.n	8002096 <whatBodyPart+0x56>
 800207e:	79ba      	ldrb	r2, [r7, #6]
 8002080:	793b      	ldrb	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d907      	bls.n	8002096 <whatBodyPart+0x56>
    if (missingX == frontX)
 8002086:	7c3a      	ldrb	r2, [r7, #16]
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	429a      	cmp	r2, r3
 800208c:	d101      	bne.n	8002092 <whatBodyPart+0x52>
      return BottomRight;
 800208e:	2301      	movs	r3, #1
 8002090:	e032      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return LeftTop;
 8002092:	2304      	movs	r3, #4
 8002094:	e030      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	797b      	ldrb	r3, [r7, #5]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20b      	bcs.n	80020b6 <whatBodyPart+0x76>
 800209e:	79ba      	ldrb	r2, [r7, #6]
 80020a0:	793b      	ldrb	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d207      	bcs.n	80020b6 <whatBodyPart+0x76>
    if (missingX == frontX)
 80020a6:	7c3a      	ldrb	r2, [r7, #16]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d101      	bne.n	80020b2 <whatBodyPart+0x72>
      return RightTop;
 80020ae:	2305      	movs	r3, #5
 80020b0:	e022      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return BottomLeft;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e020      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	797b      	ldrb	r3, [r7, #5]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d90b      	bls.n	80020d6 <whatBodyPart+0x96>
 80020be:	79ba      	ldrb	r2, [r7, #6]
 80020c0:	793b      	ldrb	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d207      	bcs.n	80020d6 <whatBodyPart+0x96>
    if (missingX == frontX)
 80020c6:	7c3a      	ldrb	r2, [r7, #16]
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d101      	bne.n	80020d2 <whatBodyPart+0x92>
      return LeftTop;
 80020ce:	2304      	movs	r3, #4
 80020d0:	e012      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return BottomRight;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e010      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90b      	bls.n	80020f6 <whatBodyPart+0xb6>
 80020de:	79ba      	ldrb	r2, [r7, #6]
 80020e0:	793b      	ldrb	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d907      	bls.n	80020f6 <whatBodyPart+0xb6>
    if (missingX == frontX)
 80020e6:	7c3a      	ldrb	r2, [r7, #16]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d101      	bne.n	80020f2 <whatBodyPart+0xb2>
      return BottomLeft;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e002      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return RightTop;
 80020f2:	2305      	movs	r3, #5
 80020f4:	e000      	b.n	80020f8 <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 80020f6:	2302      	movs	r3, #2
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc90      	pop	{r4, r7}
 8002100:	4770      	bx	lr
	...

08002104 <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	4613      	mov	r3, r2
 8002112:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <isSnakePosition+0x88>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	79fa      	ldrb	r2, [r7, #7]
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <isSnakePosition+0x28>
 800211e:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <isSnakePosition+0x88>)
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	79ba      	ldrb	r2, [r7, #6]
 8002124:	429a      	cmp	r2, r3
 8002126:	d101      	bne.n	800212c <isSnakePosition+0x28>
    return 1;
 8002128:	2301      	movs	r3, #1
 800212a:	e029      	b.n	8002180 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e013      	b.n	800215a <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 8002132:	4a17      	ldr	r2, [pc, #92]	@ (8002190 <isSnakePosition+0x8c>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d109      	bne.n	8002154 <isSnakePosition+0x50>
 8002140:	4a13      	ldr	r2, [pc, #76]	@ (8002190 <isSnakePosition+0x8c>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	79ba      	ldrb	r2, [r7, #6]
 800214c:	429a      	cmp	r2, r3
 800214e:	d101      	bne.n	8002154 <isSnakePosition+0x50>
      return 1;
 8002150:	2301      	movs	r3, #1
 8002152:	e015      	b.n	8002180 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <isSnakePosition+0x90>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4293      	cmp	r3, r2
 8002164:	dbe5      	blt.n	8002132 <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <isSnakePosition+0x94>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <isSnakePosition+0x7a>
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <isSnakePosition+0x94>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	79ba      	ldrb	r2, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d101      	bne.n	800217e <isSnakePosition+0x7a>
    return 1;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <isSnakePosition+0x7c>

  return 0;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	20000004 	.word	0x20000004
 8002190:	200002a4 	.word	0x200002a4
 8002194:	2000028c 	.word	0x2000028c
 8002198:	20000008 	.word	0x20000008

0800219c <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
 80021a6:	460b      	mov	r3, r1
 80021a8:	71bb      	strb	r3, [r7, #6]
 80021aa:	4613      	mov	r3, r2
 80021ac:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e019      	b.n	80021e8 <isApplePosition+0x4c>
    if (i == appleIndex)
 80021b4:	797b      	ldrb	r3, [r7, #5]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d011      	beq.n	80021e0 <isApplePosition+0x44>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4910      	ldr	r1, [pc, #64]	@ (8002200 <isApplePosition+0x64>)
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10b      	bne.n	80021e2 <isApplePosition+0x46>
 80021ca:	79ba      	ldrb	r2, [r7, #6]
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <isApplePosition+0x64>)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	440b      	add	r3, r1
 80021d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d102      	bne.n	80021e2 <isApplePosition+0x46>
      return 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	e009      	b.n	80021f4 <isApplePosition+0x58>
      continue;
 80021e0:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	2304      	movs	r3, #4
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4293      	cmp	r3, r2
 80021f0:	dbe0      	blt.n	80021b4 <isApplePosition+0x18>
  }

  return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	20000398 	.word	0x20000398

08002204 <restartGame>:

void restartGame()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  gameOver = 0;
 800220a:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <restartGame+0xf0>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
  lastMove = 0;
 8002210:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <restartGame+0xf4>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
  snakeSize = 0;
 8002216:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <restartGame+0xf8>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 800221c:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <restartGame+0xfc>)
 800221e:	2207      	movs	r2, #7
 8002220:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 8002222:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <restartGame+0xfc>)
 8002224:	2206      	movs	r2, #6
 8002226:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <restartGame+0x100>)
 800222a:	2207      	movs	r2, #7
 800222c:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 800222e:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <restartGame+0x100>)
 8002230:	2207      	movs	r2, #7
 8002232:	705a      	strb	r2, [r3, #1]
  direction = Up;
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <restartGame+0x104>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 800223a:	4b34      	ldr	r3, [pc, #208]	@ (800230c <restartGame+0x108>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <restartGame+0x10c>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	e047      	b.n	80022dc <restartGame+0xd8>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 800224c:	f00e fd4e 	bl	8010cec <rand>
 8002250:	4603      	mov	r3, r0
 8002252:	220f      	movs	r2, #15
 8002254:	fb93 f1f2 	sdiv	r1, r3, r2
 8002258:	fb01 f202 	mul.w	r2, r1, r2
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	b259      	sxtb	r1, r3
 8002260:	4a2c      	ldr	r2, [pc, #176]	@ (8002314 <restartGame+0x110>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 8002268:	f00e fd40 	bl	8010cec <rand>
 800226c:	4603      	mov	r3, r0
 800226e:	2208      	movs	r2, #8
 8002270:	fb93 f1f2 	sdiv	r1, r3, r2
 8002274:	fb01 f202 	mul.w	r2, r1, r2
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	b259      	sxtb	r1, r3
 800227c:	4a25      	ldr	r2, [pc, #148]	@ (8002314 <restartGame+0x110>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	460a      	mov	r2, r1
 8002286:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <restartGame+0x110>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4920      	ldr	r1, [pc, #128]	@ (8002314 <restartGame+0x110>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff ff2e 	bl	8002104 <isSnakePosition>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ce      	bne.n	800224c <restartGame+0x48>
 80022ae:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <restartGame+0x110>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <restartGame+0x110>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7ff ff66 	bl	800219c <isApplePosition>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ba      	bne.n	800224c <restartGame+0x48>
  for (int i = 0; i < NBApple; i++) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3301      	adds	r3, #1
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	2304      	movs	r3, #4
 80022de:	461a      	mov	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	dbb2      	blt.n	800224c <restartGame+0x48>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80022e6:	480c      	ldr	r0, [pc, #48]	@ (8002318 <restartGame+0x114>)
 80022e8:	f001 fe40 	bl	8003f6c <BSP_LCD_Clear>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000029c 	.word	0x2000029c
 80022f8:	200002a0 	.word	0x200002a0
 80022fc:	2000028c 	.word	0x2000028c
 8002300:	20000004 	.word	0x20000004
 8002304:	20000008 	.word	0x20000008
 8002308:	20000210 	.word	0x20000210
 800230c:	20000211 	.word	0x20000211
 8002310:	20000001 	.word	0x20000001
 8002314:	20000398 	.word	0x20000398
 8002318:	ff81cd4b 	.word	0xff81cd4b

0800231c <displayGameStatus>:

void displayGameStatus()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  if (gameOver) {
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <displayGameStatus+0xa4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002328:	4826      	ldr	r0, [pc, #152]	@ (80023c4 <displayGameStatus+0xa8>)
 800232a:	f001 fdd3 	bl	8003ed4 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800232e:	4826      	ldr	r0, [pc, #152]	@ (80023c8 <displayGameStatus+0xac>)
 8002330:	f001 fe02 	bl	8003f38 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8002334:	2301      	movs	r3, #1
 8002336:	4a25      	ldr	r2, [pc, #148]	@ (80023cc <displayGameStatus+0xb0>)
 8002338:	2164      	movs	r1, #100	@ 0x64
 800233a:	2000      	movs	r0, #0
 800233c:	f001 fe82 	bl	8004044 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002340:	4823      	ldr	r0, [pc, #140]	@ (80023d0 <displayGameStatus+0xb4>)
 8002342:	f001 fdf9 	bl	8003f38 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8002346:	2301      	movs	r3, #1
 8002348:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <displayGameStatus+0xb8>)
 800234a:	2182      	movs	r1, #130	@ 0x82
 800234c:	2000      	movs	r0, #0
 800234e:	f001 fe79 	bl	8004044 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 8002352:	e032      	b.n	80023ba <displayGameStatus+0x9e>
  else if (gamePaused) {
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <displayGameStatus+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800235c:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <displayGameStatus+0xa8>)
 800235e:	f001 fdb9 	bl	8003ed4 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002362:	4819      	ldr	r0, [pc, #100]	@ (80023c8 <displayGameStatus+0xac>)
 8002364:	f001 fde8 	bl	8003f38 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8002368:	2301      	movs	r3, #1
 800236a:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <displayGameStatus+0xc0>)
 800236c:	2164      	movs	r1, #100	@ 0x64
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fe68 	bl	8004044 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002374:	4816      	ldr	r0, [pc, #88]	@ (80023d0 <displayGameStatus+0xb4>)
 8002376:	f001 fddf 	bl	8003f38 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 800237a:	2301      	movs	r3, #1
 800237c:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <displayGameStatus+0xc4>)
 800237e:	2182      	movs	r1, #130	@ 0x82
 8002380:	2000      	movs	r0, #0
 8002382:	f001 fe5f 	bl	8004044 <BSP_LCD_DisplayStringAt>
}
 8002386:	e018      	b.n	80023ba <displayGameStatus+0x9e>
  else if (!gameStarted) {
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <displayGameStatus+0xc8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <displayGameStatus+0xa8>)
 8002392:	f001 fd9f 	bl	8003ed4 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002396:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <displayGameStatus+0xac>)
 8002398:	f001 fdce 	bl	8003f38 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 800239c:	2301      	movs	r3, #1
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <displayGameStatus+0xcc>)
 80023a0:	2164      	movs	r1, #100	@ 0x64
 80023a2:	2000      	movs	r0, #0
 80023a4:	f001 fe4e 	bl	8004044 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80023a8:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <displayGameStatus+0xb4>)
 80023aa:	f001 fdc5 	bl	8003f38 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 80023ae:	2301      	movs	r3, #1
 80023b0:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <displayGameStatus+0xd0>)
 80023b2:	2182      	movs	r1, #130	@ 0x82
 80023b4:	2000      	movs	r0, #0
 80023b6:	f001 fe45 	bl	8004044 <BSP_LCD_DisplayStringAt>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000029c 	.word	0x2000029c
 80023c4:	ffa52a2a 	.word	0xffa52a2a
 80023c8:	20000034 	.word	0x20000034
 80023cc:	08012258 	.word	0x08012258
 80023d0:	2000003c 	.word	0x2000003c
 80023d4:	08012264 	.word	0x08012264
 80023d8:	20000298 	.word	0x20000298
 80023dc:	08012280 	.word	0x08012280
 80023e0:	0801228c 	.word	0x0801228c
 80023e4:	20000294 	.word	0x20000294
 80023e8:	080122a8 	.word	0x080122a8
 80023ec:	080122b4 	.word	0x080122b4

080023f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80023fa:	20c8      	movs	r0, #200	@ 0xc8
 80023fc:	f001 fc56 	bl	8003cac <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002400:	f000 fa7a 	bl	80028f8 <ft5336_I2C_InitializeIfRequired>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002434:	2300      	movs	r3, #0
 8002436:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002438:	f000 fa5e 	bl	80028f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e010      	b.n	8002464 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	21a8      	movs	r1, #168	@ 0xa8
 8002448:	4618      	mov	r0, r3
 800244a:	f001 fc11 	bl	8003c70 <TS_IO_Read>
 800244e:	4603      	mov	r3, r0
 8002450:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b51      	cmp	r3, #81	@ 0x51
 8002458:	d101      	bne.n	800245e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d802      	bhi.n	8002470 <ft5336_ReadID+0x4e>
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0e8      	beq.n	8002442 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002470:	7b7b      	ldrb	r3, [r7, #13]
 8002472:	b2db      	uxtb	r3, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fa45 	bl	8002918 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f933 	bl	80026fc <ft5336_TS_DisableIT>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fbdb 	bl	8003c70 <TS_IO_Read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d901      	bls.n	80024d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <ft5336_TS_DetectTouch+0x50>)
 80024dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <ft5336_TS_DetectTouch+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000658 	.word	0x20000658

080024f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002516:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 8002518:	789a      	ldrb	r2, [r3, #2]
 800251a:	4b6c      	ldr	r3, [pc, #432]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	429a      	cmp	r2, r3
 8002520:	f080 80cf 	bcs.w	80026c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002524:	4b69      	ldr	r3, [pc, #420]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d871      	bhi.n	8002610 <ft5336_TS_GetXY+0x11c>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <ft5336_TS_GetXY+0x40>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	0800255d 	.word	0x0800255d
 8002538:	0800256f 	.word	0x0800256f
 800253c:	08002581 	.word	0x08002581
 8002540:	08002593 	.word	0x08002593
 8002544:	080025a5 	.word	0x080025a5
 8002548:	080025b7 	.word	0x080025b7
 800254c:	080025c9 	.word	0x080025c9
 8002550:	080025db 	.word	0x080025db
 8002554:	080025ed 	.word	0x080025ed
 8002558:	080025ff 	.word	0x080025ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800255c:	2304      	movs	r3, #4
 800255e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002560:	2303      	movs	r3, #3
 8002562:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002564:	2306      	movs	r3, #6
 8002566:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002568:	2305      	movs	r3, #5
 800256a:	753b      	strb	r3, [r7, #20]
      break;
 800256c:	e051      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800256e:	230a      	movs	r3, #10
 8002570:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002572:	2309      	movs	r3, #9
 8002574:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002576:	230c      	movs	r3, #12
 8002578:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800257a:	230b      	movs	r3, #11
 800257c:	753b      	strb	r3, [r7, #20]
      break;
 800257e:	e048      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002580:	2310      	movs	r3, #16
 8002582:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002584:	230f      	movs	r3, #15
 8002586:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002588:	2312      	movs	r3, #18
 800258a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800258c:	2311      	movs	r3, #17
 800258e:	753b      	strb	r3, [r7, #20]
      break;
 8002590:	e03f      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8002592:	2316      	movs	r3, #22
 8002594:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8002596:	2315      	movs	r3, #21
 8002598:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800259a:	2318      	movs	r3, #24
 800259c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800259e:	2317      	movs	r3, #23
 80025a0:	753b      	strb	r3, [r7, #20]
      break;
 80025a2:	e036      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80025a4:	231c      	movs	r3, #28
 80025a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80025a8:	231b      	movs	r3, #27
 80025aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80025ac:	231e      	movs	r3, #30
 80025ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80025b0:	231d      	movs	r3, #29
 80025b2:	753b      	strb	r3, [r7, #20]
      break;
 80025b4:	e02d      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80025b6:	2322      	movs	r3, #34	@ 0x22
 80025b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80025ba:	2321      	movs	r3, #33	@ 0x21
 80025bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80025be:	2324      	movs	r3, #36	@ 0x24
 80025c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80025c2:	2323      	movs	r3, #35	@ 0x23
 80025c4:	753b      	strb	r3, [r7, #20]
      break;
 80025c6:	e024      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80025c8:	2328      	movs	r3, #40	@ 0x28
 80025ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80025cc:	2327      	movs	r3, #39	@ 0x27
 80025ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80025d0:	232a      	movs	r3, #42	@ 0x2a
 80025d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80025d4:	2329      	movs	r3, #41	@ 0x29
 80025d6:	753b      	strb	r3, [r7, #20]
      break;
 80025d8:	e01b      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80025da:	232e      	movs	r3, #46	@ 0x2e
 80025dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80025de:	232d      	movs	r3, #45	@ 0x2d
 80025e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80025e2:	2330      	movs	r3, #48	@ 0x30
 80025e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80025e6:	232f      	movs	r3, #47	@ 0x2f
 80025e8:	753b      	strb	r3, [r7, #20]
      break;
 80025ea:	e012      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80025ec:	2334      	movs	r3, #52	@ 0x34
 80025ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80025f0:	2333      	movs	r3, #51	@ 0x33
 80025f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80025f4:	2336      	movs	r3, #54	@ 0x36
 80025f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80025f8:	2335      	movs	r3, #53	@ 0x35
 80025fa:	753b      	strb	r3, [r7, #20]
      break;
 80025fc:	e009      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80025fe:	233a      	movs	r3, #58	@ 0x3a
 8002600:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8002602:	2339      	movs	r3, #57	@ 0x39
 8002604:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8002606:	233c      	movs	r3, #60	@ 0x3c
 8002608:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800260a:	233b      	movs	r3, #59	@ 0x3b
 800260c:	753b      	strb	r3, [r7, #20]
      break;
 800260e:	e000      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002610:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	7dfa      	ldrb	r2, [r7, #23]
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fb28 	bl	8003c70 <TS_IO_Read>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800262c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	7dba      	ldrb	r2, [r7, #22]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f001 fb1a 	bl	8003c70 <TS_IO_Read>
 800263c:	4603      	mov	r3, r0
 800263e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800264a:	b21a      	sxth	r2, r3
 800264c:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21b      	sxth	r3, r3
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800265a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800265c:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	7d7a      	ldrb	r2, [r7, #21]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f001 faff 	bl	8003c70 <TS_IO_Read>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800267e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	7d3a      	ldrb	r2, [r7, #20]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f001 faf1 	bl	8003c70 <TS_IO_Read>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800269c:	b21a      	sxth	r2, r3
 800269e:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	3301      	adds	r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 80026c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000658 	.word	0x20000658
 80026d0:	2000065c 	.word	0x2000065c

080026d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	21a4      	movs	r1, #164	@ 0xa4
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 faa4 	bl	8003c3c <TS_IO_Write>
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	21a4      	movs	r1, #164	@ 0xa4
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fa90 	bl	8003c3c <TS_IO_Write>
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	6039      	str	r1, [r7, #0]
 800275c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fa81 	bl	8003c70 <TS_IO_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4603      	mov	r3, r0
 8002792:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80027a4:	4b4d      	ldr	r3, [pc, #308]	@ (80028dc <ft5336_TS_GetTouchInfo+0x158>)
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	f080 8090 	bcs.w	80028d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d85d      	bhi.n	8002874 <ft5336_TS_GetTouchInfo+0xf0>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	080027f7 	.word	0x080027f7
 80027c8:	08002805 	.word	0x08002805
 80027cc:	08002813 	.word	0x08002813
 80027d0:	08002821 	.word	0x08002821
 80027d4:	0800282f 	.word	0x0800282f
 80027d8:	0800283d 	.word	0x0800283d
 80027dc:	0800284b 	.word	0x0800284b
 80027e0:	08002859 	.word	0x08002859
 80027e4:	08002867 	.word	0x08002867
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80027e8:	2303      	movs	r3, #3
 80027ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80027ec:	2307      	movs	r3, #7
 80027ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80027f0:	2308      	movs	r3, #8
 80027f2:	757b      	strb	r3, [r7, #21]
      break;
 80027f4:	e03f      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80027f6:	2309      	movs	r3, #9
 80027f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80027fa:	230d      	movs	r3, #13
 80027fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80027fe:	230e      	movs	r3, #14
 8002800:	757b      	strb	r3, [r7, #21]
      break;
 8002802:	e038      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002804:	230f      	movs	r3, #15
 8002806:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002808:	2313      	movs	r3, #19
 800280a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800280c:	2314      	movs	r3, #20
 800280e:	757b      	strb	r3, [r7, #21]
      break;
 8002810:	e031      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8002812:	2315      	movs	r3, #21
 8002814:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002816:	2319      	movs	r3, #25
 8002818:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800281a:	231a      	movs	r3, #26
 800281c:	757b      	strb	r3, [r7, #21]
      break;
 800281e:	e02a      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002820:	231b      	movs	r3, #27
 8002822:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002824:	231f      	movs	r3, #31
 8002826:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002828:	2320      	movs	r3, #32
 800282a:	757b      	strb	r3, [r7, #21]
      break;
 800282c:	e023      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800282e:	2321      	movs	r3, #33	@ 0x21
 8002830:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002832:	2325      	movs	r3, #37	@ 0x25
 8002834:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002836:	2326      	movs	r3, #38	@ 0x26
 8002838:	757b      	strb	r3, [r7, #21]
      break;
 800283a:	e01c      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800283c:	2327      	movs	r3, #39	@ 0x27
 800283e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002840:	232b      	movs	r3, #43	@ 0x2b
 8002842:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002844:	232c      	movs	r3, #44	@ 0x2c
 8002846:	757b      	strb	r3, [r7, #21]
      break;
 8002848:	e015      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800284a:	232d      	movs	r3, #45	@ 0x2d
 800284c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800284e:	2331      	movs	r3, #49	@ 0x31
 8002850:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002852:	2332      	movs	r3, #50	@ 0x32
 8002854:	757b      	strb	r3, [r7, #21]
      break;
 8002856:	e00e      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002858:	2333      	movs	r3, #51	@ 0x33
 800285a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800285c:	2337      	movs	r3, #55	@ 0x37
 800285e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002860:	2338      	movs	r3, #56	@ 0x38
 8002862:	757b      	strb	r3, [r7, #21]
      break;
 8002864:	e007      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002866:	2339      	movs	r3, #57	@ 0x39
 8002868:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800286a:	233d      	movs	r3, #61	@ 0x3d
 800286c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800286e:	233e      	movs	r3, #62	@ 0x3e
 8002870:	757b      	strb	r3, [r7, #21]
      break;
 8002872:	e000      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002874:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002876:	89fb      	ldrh	r3, [r7, #14]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	7dfa      	ldrb	r2, [r7, #23]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f9f6 	bl	8003c70 <TS_IO_Read>
 8002884:	4603      	mov	r3, r0
 8002886:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002888:	7d3b      	ldrb	r3, [r7, #20]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	119b      	asrs	r3, r3, #6
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	7dba      	ldrb	r2, [r7, #22]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 f9e6 	bl	8003c70 <TS_IO_Read>
 80028a4:	4603      	mov	r3, r0
 80028a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80028a8:	7d3b      	ldrb	r3, [r7, #20]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	7d7a      	ldrb	r2, [r7, #21]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 f9d8 	bl	8003c70 <TS_IO_Read>
 80028c0:	4603      	mov	r3, r0
 80028c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80028c4:	7d3b      	ldrb	r3, [r7, #20]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	111b      	asrs	r3, r3, #4
 80028ca:	f003 0204 	and.w	r2, r3, #4
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000658 	.word	0x20000658

080028e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000658 	.word	0x20000658

080028f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80028fc:	f7ff fff0 	bl	80028e0 <ft5336_Get_I2C_InitializedStatus>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002906:	f001 f98f 	bl	8003c28 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800290a:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
  }
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000658 	.word	0x20000658

08002918 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	@ 0x40
 8002938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800294a:	4baf      	ldr	r3, [pc, #700]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4aae      	ldr	r2, [pc, #696]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002950:	f043 0310 	orr.w	r3, r3, #16
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4bac      	ldr	r3, [pc, #688]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002962:	4ba9      	ldr	r3, [pc, #676]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4aa8      	ldr	r2, [pc, #672]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4ba6      	ldr	r3, [pc, #664]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4ba3      	ldr	r3, [pc, #652]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4aa2      	ldr	r2, [pc, #648]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4ba0      	ldr	r3, [pc, #640]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	4b9d      	ldr	r3, [pc, #628]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a9c      	ldr	r2, [pc, #624]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b9a      	ldr	r3, [pc, #616]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	4b97      	ldr	r3, [pc, #604]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a96      	ldr	r2, [pc, #600]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b94      	ldr	r3, [pc, #592]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	4b91      	ldr	r3, [pc, #580]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a90      	ldr	r2, [pc, #576]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029da:	4b8b      	ldr	r3, [pc, #556]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a8a      	ldr	r2, [pc, #552]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b88      	ldr	r3, [pc, #544]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029f2:	4b85      	ldr	r3, [pc, #532]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a84      	ldr	r2, [pc, #528]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b82      	ldr	r3, [pc, #520]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b7c      	ldr	r3, [pc, #496]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a22:	4b79      	ldr	r3, [pc, #484]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a78      	ldr	r2, [pc, #480]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a28:	f043 0320 	orr.w	r3, r3, #32
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b76      	ldr	r3, [pc, #472]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3a:	4b73      	ldr	r3, [pc, #460]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a72      	ldr	r2, [pc, #456]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b70      	ldr	r3, [pc, #448]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2160      	movs	r1, #96	@ 0x60
 8002a56:	486d      	ldr	r0, [pc, #436]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002a58:	f004 fdb2 	bl	80075c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2120      	movs	r1, #32
 8002a60:	486b      	ldr	r0, [pc, #428]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002a62:	f004 fdad 	bl	80075c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2108      	movs	r1, #8
 8002a6a:	4869      	ldr	r0, [pc, #420]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002a6c:	f004 fda8 	bl	80075c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2108      	movs	r1, #8
 8002a74:	4867      	ldr	r0, [pc, #412]	@ (8002c14 <MX_GPIO_Init+0x2e0>)
 8002a76:	f004 fda3 	bl	80075c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a80:	4865      	ldr	r0, [pc, #404]	@ (8002c18 <MX_GPIO_Init+0x2e4>)
 8002a82:	f004 fd9d 	bl	80075c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002a86:	2200      	movs	r2, #0
 8002a88:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002a8c:	4863      	ldr	r0, [pc, #396]	@ (8002c1c <MX_GPIO_Init+0x2e8>)
 8002a8e:	f004 fd97 	bl	80075c0 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002a92:	2200      	movs	r2, #0
 8002a94:	21c8      	movs	r1, #200	@ 0xc8
 8002a96:	4862      	ldr	r0, [pc, #392]	@ (8002c20 <MX_GPIO_Init+0x2ec>)
 8002a98:	f004 fd92 	bl	80075c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aac:	4619      	mov	r1, r3
 8002aae:	4857      	ldr	r0, [pc, #348]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002ab0:	f004 fbc2 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002acc:	4619      	mov	r1, r3
 8002ace:	484f      	ldr	r0, [pc, #316]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002ad0:	f004 fbb2 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002ad4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ae6:	230b      	movs	r3, #11
 8002ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	484b      	ldr	r0, [pc, #300]	@ (8002c20 <MX_GPIO_Init+0x2ec>)
 8002af2:	f004 fba1 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002af6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afc:	2312      	movs	r3, #18
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4844      	ldr	r0, [pc, #272]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002b14:	f004 fb90 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002b18:	f643 0323 	movw	r3, #14371	@ 0x3823
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b32:	4619      	mov	r1, r3
 8002b34:	483b      	ldr	r0, [pc, #236]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002b36:	f004 fb7f 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b52:	4619      	mov	r1, r3
 8002b54:	482e      	ldr	r0, [pc, #184]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002b56:	f004 fb6f 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002b5a:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482e      	ldr	r0, [pc, #184]	@ (8002c28 <MX_GPIO_Init+0x2f4>)
 8002b70:	f004 fb62 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002b74:	2360      	movs	r3, #96	@ 0x60
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4820      	ldr	r0, [pc, #128]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002b8c:	f004 fb54 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002b90:	2340      	movs	r3, #64	@ 0x40
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ba0:	230a      	movs	r3, #10
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba8:	4619      	mov	r1, r3
 8002baa:	481e      	ldr	r0, [pc, #120]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002bac:	f004 fb44 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4819      	ldr	r0, [pc, #100]	@ (8002c2c <MX_GPIO_Init+0x2f8>)
 8002bc6:	f004 fb37 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002bca:	2340      	movs	r3, #64	@ 0x40
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480c      	ldr	r0, [pc, #48]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002be0:	f004 fb2a 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002be4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4809      	ldr	r0, [pc, #36]	@ (8002c28 <MX_GPIO_Init+0x2f4>)
 8002c02:	f004 fb19 	bl	8007238 <HAL_GPIO_Init>
 8002c06:	e013      	b.n	8002c30 <MX_GPIO_Init+0x2fc>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40022800 	.word	0x40022800
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002c30:	2328      	movs	r3, #40	@ 0x28
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c34:	2301      	movs	r3, #1
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c44:	4619      	mov	r1, r3
 8002c46:	48b0      	ldr	r0, [pc, #704]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002c48:	f004 faf6 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	48a9      	ldr	r0, [pc, #676]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002c68:	f004 fae6 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	48a3      	ldr	r0, [pc, #652]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002c82:	f004 fad9 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c86:	2308      	movs	r3, #8
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	489d      	ldr	r0, [pc, #628]	@ (8002f14 <MX_GPIO_Init+0x5e0>)
 8002c9e:	f004 facb 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002ca2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4898      	ldr	r0, [pc, #608]	@ (8002f18 <MX_GPIO_Init+0x5e4>)
 8002cb8:	f004 fabe 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ccc:	4619      	mov	r1, r3
 8002cce:	488e      	ldr	r0, [pc, #568]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002cd0:	f004 fab2 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002cd4:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	488c      	ldr	r0, [pc, #560]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002cea:	f004 faa5 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cfe:	2305      	movs	r3, #5
 8002d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d06:	4619      	mov	r1, r3
 8002d08:	4880      	ldr	r0, [pc, #512]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d0a:	f004 fa95 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d24:	4619      	mov	r1, r3
 8002d26:	4879      	ldr	r0, [pc, #484]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d28:	f004 fa86 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002d2c:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d42:	4619      	mov	r1, r3
 8002d44:	4875      	ldr	r0, [pc, #468]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002d46:	f004 fa77 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002d4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002d54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	486a      	ldr	r0, [pc, #424]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d62:	f004 fa69 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d66:	23c0      	movs	r3, #192	@ 0xc0
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d72:	2303      	movs	r3, #3
 8002d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d76:	2308      	movs	r3, #8
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4863      	ldr	r0, [pc, #396]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002d82:	f004 fa59 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d86:	2310      	movs	r3, #16
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d96:	230a      	movs	r3, #10
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	485e      	ldr	r0, [pc, #376]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002da2:	f004 fa49 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002da6:	23c8      	movs	r3, #200	@ 0xc8
 8002da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002daa:	2301      	movs	r3, #1
 8002dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4856      	ldr	r0, [pc, #344]	@ (8002f18 <MX_GPIO_Init+0x5e4>)
 8002dbe:	f004 fa3b 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002dc2:	23c0      	movs	r3, #192	@ 0xc0
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4850      	ldr	r0, [pc, #320]	@ (8002f20 <MX_GPIO_Init+0x5ec>)
 8002dde:	f004 fa2b 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002de2:	2305      	movs	r3, #5
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002df2:	230a      	movs	r3, #10
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4844      	ldr	r0, [pc, #272]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002dfe:	f004 fa1b 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002e02:	2332      	movs	r3, #50	@ 0x32
 8002e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e12:	230b      	movs	r3, #11
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	483c      	ldr	r0, [pc, #240]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002e1e:	f004 fa0b 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e22:	2304      	movs	r3, #4
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e32:	2309      	movs	r3, #9
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4839      	ldr	r0, [pc, #228]	@ (8002f24 <MX_GPIO_Init+0x5f0>)
 8002e3e:	f004 f9fb 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002e42:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e54:	2309      	movs	r3, #9
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	482a      	ldr	r0, [pc, #168]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002e60:	f004 f9ea 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e64:	2386      	movs	r3, #134	@ 0x86
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e74:	230b      	movs	r3, #11
 8002e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	482a      	ldr	r0, [pc, #168]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002e80:	f004 f9da 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e84:	2310      	movs	r3, #16
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e94:	4619      	mov	r1, r3
 8002e96:	4824      	ldr	r0, [pc, #144]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002e98:	f004 f9ce 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002e9c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea2:	2312      	movs	r3, #18
 8002ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4818      	ldr	r0, [pc, #96]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002eba:	f004 f9bd 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002ebe:	2328      	movs	r3, #40	@ 0x28
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ece:	230a      	movs	r3, #10
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4813      	ldr	r0, [pc, #76]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002eda:	f004 f9ad 	bl	8007238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ede:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480a      	ldr	r0, [pc, #40]	@ (8002f24 <MX_GPIO_Init+0x5f0>)
 8002efc:	f004 f99c 	bl	8007238 <HAL_GPIO_Init>

}
 8002f00:	bf00      	nop
 8002f02:	3740      	adds	r7, #64	@ 0x40
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40022800 	.word	0x40022800
 8002f18:	40021800 	.word	0x40021800
 8002f1c:	40021c00 	.word	0x40021c00
 8002f20:	40021400 	.word	0x40021400
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020000 	.word	0x40020000

08002f2c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2234      	movs	r2, #52	@ 0x34
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00e f83a 	bl	8010fb2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f40:	4a3a      	ldr	r2, [pc, #232]	@ (800302c <MX_LTDC_Init+0x100>)
 8002f42:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f44:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002f4a:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f5e:	2228      	movs	r2, #40	@ 0x28
 8002f60:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f64:	2209      	movs	r2, #9
 8002f66:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f6a:	2235      	movs	r2, #53	@ 0x35
 8002f6c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f70:	220b      	movs	r2, #11
 8002f72:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002f74:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f76:	f240 2215 	movw	r2, #533	@ 0x215
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f7e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002f84:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f86:	f240 2235 	movw	r2, #565	@ 0x235
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f8e:	f240 121d 	movw	r2, #285	@ 0x11d
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002f94:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002fa4:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002fac:	481e      	ldr	r0, [pc, #120]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002fae:	f005 f8cb 	bl	8008148 <HAL_LTDC_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002fb8:	f000 fa52 	bl	8003460 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002fc0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002fc4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002fca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002fce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002fd4:	23ff      	movs	r3, #255	@ 0xff
 8002fd6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002fdc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002fe0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002fe6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002fec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002ff2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2200      	movs	r2, #0
 800300e:	4619      	mov	r1, r3
 8003010:	4805      	ldr	r0, [pc, #20]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8003012:	f005 fa2b 	bl	800846c <HAL_LTDC_ConfigLayer>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800301c:	f000 fa20 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	3738      	adds	r7, #56	@ 0x38
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000660 	.word	0x20000660
 800302c:	40016800 	.word	0x40016800

08003030 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	@ 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a55      	ldr	r2, [pc, #340]	@ (80031a4 <HAL_LTDC_MspInit+0x174>)
 800304e:	4293      	cmp	r3, r2
 8003050:	f040 80a3 	bne.w	800319a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003054:	4b54      	ldr	r3, [pc, #336]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	4a53      	ldr	r2, [pc, #332]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800305a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800305e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003060:	4b51      	ldr	r3, [pc, #324]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800306c:	4b4e      	ldr	r3, [pc, #312]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	6313      	str	r3, [r2, #48]	@ 0x30
 8003078:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003084:	4b48      	ldr	r3, [pc, #288]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	4a47      	ldr	r2, [pc, #284]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800308e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003090:	4b45      	ldr	r3, [pc, #276]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800309c:	4b42      	ldr	r3, [pc, #264]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	4a41      	ldr	r2, [pc, #260]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a8:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030b4:	4b3c      	ldr	r3, [pc, #240]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	4a3b      	ldr	r2, [pc, #236]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030be:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030cc:	4b36      	ldr	r3, [pc, #216]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	4a35      	ldr	r2, [pc, #212]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d8:	4b33      	ldr	r3, [pc, #204]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80030e4:	2310      	movs	r3, #16
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030f4:	230e      	movs	r3, #14
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80030f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fc:	4619      	mov	r1, r3
 80030fe:	482b      	ldr	r0, [pc, #172]	@ (80031ac <HAL_LTDC_MspInit+0x17c>)
 8003100:	f004 f89a 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003104:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003116:	230e      	movs	r3, #14
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800311a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800311e:	4619      	mov	r1, r3
 8003120:	4823      	ldr	r0, [pc, #140]	@ (80031b0 <HAL_LTDC_MspInit+0x180>)
 8003122:	f004 f889 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003126:	23f7      	movs	r3, #247	@ 0xf7
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003136:	230e      	movs	r3, #14
 8003138:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800313a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800313e:	4619      	mov	r1, r3
 8003140:	481c      	ldr	r0, [pc, #112]	@ (80031b4 <HAL_LTDC_MspInit+0x184>)
 8003142:	f004 f879 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003158:	2309      	movs	r3, #9
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800315c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003160:	4619      	mov	r1, r3
 8003162:	4815      	ldr	r0, [pc, #84]	@ (80031b8 <HAL_LTDC_MspInit+0x188>)
 8003164:	f004 f868 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003168:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800317a:	230e      	movs	r3, #14
 800317c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800317e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003182:	4619      	mov	r1, r3
 8003184:	480d      	ldr	r0, [pc, #52]	@ (80031bc <HAL_LTDC_MspInit+0x18c>)
 8003186:	f004 f857 	bl	8007238 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2105      	movs	r1, #5
 800318e:	2058      	movs	r0, #88	@ 0x58
 8003190:	f003 f8aa 	bl	80062e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003194:	2058      	movs	r0, #88	@ 0x58
 8003196:	f003 f8c3 	bl	8006320 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800319a:	bf00      	nop
 800319c:	3738      	adds	r7, #56	@ 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40016800 	.word	0x40016800
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40022400 	.word	0x40022400
 80031b4:	40022800 	.word	0x40022800
 80031b8:	40021800 	.word	0x40021800
 80031bc:	40022000 	.word	0x40022000

080031c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031c4:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <main+0x64>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031ca:	4b16      	ldr	r3, [pc, #88]	@ (8003224 <main+0x64>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d0:	f002 fb87 	bl	80058e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031d4:	f000 f828 	bl	8003228 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80031d8:	f000 f896 	bl	8003308 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031dc:	f7ff fbaa 	bl	8002934 <MX_GPIO_Init>
  MX_DMA_Init();
 80031e0:	f7fd fede 	bl	8000fa0 <MX_DMA_Init>
  MX_DMA2D_Init();
 80031e4:	f7fd ff12 	bl	800100c <MX_DMA2D_Init>
  MX_FMC_Init();
 80031e8:	f7fd ff68 	bl	80010bc <MX_FMC_Init>
  MX_LTDC_Init();
 80031ec:	f7ff fe9e 	bl	8002f2c <MX_LTDC_Init>
  MX_TIM5_Init();
 80031f0:	f002 fa2e 	bl	8005650 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80031f4:	f002 fa9a 	bl	800572c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80031f8:	f7fd fdc0 	bl	8000d7c <MX_ADC1_Init>
  MX_SAI2_Init();
 80031fc:	f000 f936 	bl	800346c <MX_SAI2_Init>
  MX_ADC3_Init();
 8003200:	f7fd fe0e 	bl	8000e20 <MX_ADC3_Init>
  MX_SDMMC1_SD_Init();
 8003204:	f000 fab8 	bl	8003778 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8003208:	f009 fd76 	bl	800ccf8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  initDisplay();
 800320c:	f000 f8ae 	bl	800336c <initDisplay>
  initSD();
 8003210:	f000 f8f0 	bl	80033f4 <initSD>
  initAudio();
 8003214:	f000 f90a 	bl	800342c <initAudio>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003218:	f7fe f854 	bl	80012c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800321c:	f00a fd53 	bl	800dcc6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003220:	bf00      	nop
 8003222:	e7fd      	b.n	8003220 <main+0x60>
 8003224:	20000708 	.word	0x20000708

08003228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b094      	sub	sp, #80	@ 0x50
 800322c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800322e:	f107 0320 	add.w	r3, r7, #32
 8003232:	2230      	movs	r2, #48	@ 0x30
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f00d febb 	bl	8010fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800324c:	f005 faf4 	bl	8008838 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003250:	4b2b      	ldr	r3, [pc, #172]	@ (8003300 <SystemClock_Config+0xd8>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	4a2a      	ldr	r2, [pc, #168]	@ (8003300 <SystemClock_Config+0xd8>)
 8003256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	@ 0x40
 800325c:	4b28      	ldr	r3, [pc, #160]	@ (8003300 <SystemClock_Config+0xd8>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003268:	4b26      	ldr	r3, [pc, #152]	@ (8003304 <SystemClock_Config+0xdc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a25      	ldr	r2, [pc, #148]	@ (8003304 <SystemClock_Config+0xdc>)
 800326e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b23      	ldr	r3, [pc, #140]	@ (8003304 <SystemClock_Config+0xdc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003280:	2301      	movs	r3, #1
 8003282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003284:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800328a:	2302      	movs	r3, #2
 800328c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800328e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003294:	2319      	movs	r3, #25
 8003296:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003298:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800329c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800329e:	2302      	movs	r3, #2
 80032a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80032a2:	2309      	movs	r3, #9
 80032a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032a6:	f107 0320 	add.w	r3, r7, #32
 80032aa:	4618      	mov	r0, r3
 80032ac:	f005 fb24 	bl	80088f8 <HAL_RCC_OscConfig>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80032b6:	f000 f8d3 	bl	8003460 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032ba:	f005 facd 	bl	8008858 <HAL_PWREx_EnableOverDrive>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80032c4:	f000 f8cc 	bl	8003460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032c8:	230f      	movs	r3, #15
 80032ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032cc:	2302      	movs	r3, #2
 80032ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80032e0:	f107 030c 	add.w	r3, r7, #12
 80032e4:	2106      	movs	r1, #6
 80032e6:	4618      	mov	r0, r3
 80032e8:	f005 fdaa 	bl	8008e40 <HAL_RCC_ClockConfig>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80032f2:	f000 f8b5 	bl	8003460 <Error_Handler>
  }
}
 80032f6:	bf00      	nop
 80032f8:	3750      	adds	r7, #80	@ 0x50
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000

08003308 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0a2      	sub	sp, #136	@ 0x88
 800330c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	2284      	movs	r2, #132	@ 0x84
 8003312:	2100      	movs	r1, #0
 8003314:	4618      	mov	r0, r3
 8003316:	f00d fe4c 	bl	8010fb2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800331a:	4b13      	ldr	r3, [pc, #76]	@ (8003368 <PeriphCommonClock_Config+0x60>)
 800331c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800331e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003322:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003324:	2305      	movs	r3, #5
 8003326:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003328:	2302      	movs	r3, #2
 800332a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800332c:	2303      	movs	r3, #3
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003330:	2301      	movs	r3, #1
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003334:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003338:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800333a:	2300      	movs	r3, #0
 800333c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800333e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003342:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003346:	2300      	movs	r3, #0
 8003348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f005 ff8e 	bl	8009270 <HAL_RCCEx_PeriphCLKConfig>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800335a:	f000 f881 	bl	8003460 <Error_Handler>
  }
}
 800335e:	bf00      	nop
 8003360:	3788      	adds	r7, #136	@ 0x88
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	00b00008 	.word	0x00b00008

0800336c <initDisplay>:

/* USER CODE BEGIN 4 */
void initDisplay()
{
 800336c:	b598      	push	{r3, r4, r7, lr}
 800336e:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 8003370:	f000 fca8 	bl	8003cc4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8003374:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003378:	2000      	movs	r0, #0
 800337a:	f000 fd3b 	bl	8003df4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 800337e:	f000 fd11 	bl	8003da4 <BSP_LCD_GetXSize>
 8003382:	4604      	mov	r4, r0
 8003384:	f000 fd22 	bl	8003dcc <BSP_LCD_GetYSize>
 8003388:	4603      	mov	r3, r0
 800338a:	fb04 f303 	mul.w	r3, r4, r3
 800338e:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4619      	mov	r1, r3
 8003396:	2001      	movs	r0, #1
 8003398:	f000 fd2c 	bl	8003df4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 800339c:	f001 f8ec 	bl	8004578 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f000 fd87 	bl	8003eb4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80033a6:	4810      	ldr	r0, [pc, #64]	@ (80033e8 <initDisplay+0x7c>)
 80033a8:	f000 fde0 	bl	8003f6c <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f000 fd81 	bl	8003eb4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f000 fdda 	bl	8003f6c <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 80033b8:	480c      	ldr	r0, [pc, #48]	@ (80033ec <initDisplay+0x80>)
 80033ba:	f000 fdbd 	bl	8003f38 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80033be:	480c      	ldr	r0, [pc, #48]	@ (80033f0 <initDisplay+0x84>)
 80033c0:	f000 fd88 	bl	8003ed4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f000 fd9d 	bl	8003f04 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80033ca:	f000 fceb 	bl	8003da4 <BSP_LCD_GetXSize>
 80033ce:	4603      	mov	r3, r0
 80033d0:	b29c      	uxth	r4, r3
 80033d2:	f000 fcfb 	bl	8003dcc <BSP_LCD_GetYSize>
 80033d6:	4603      	mov	r3, r0
 80033d8:	b29b      	uxth	r3, r3
 80033da:	4619      	mov	r1, r3
 80033dc:	4620      	mov	r0, r4
 80033de:	f001 fcdd 	bl	8004d9c <BSP_TS_Init>
}
 80033e2:	bf00      	nop
 80033e4:	bd98      	pop	{r3, r4, r7, pc}
 80033e6:	bf00      	nop
 80033e8:	ff81cd4b 	.word	0xff81cd4b
 80033ec:	2000003c 	.word	0x2000003c
 80033f0:	ffa52a2a 	.word	0xffa52a2a

080033f4 <initSD>:

void initSD()
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK) {
 80033f8:	2200      	movs	r2, #0
 80033fa:	4909      	ldr	r1, [pc, #36]	@ (8003420 <initSD+0x2c>)
 80033fc:	4809      	ldr	r0, [pc, #36]	@ (8003424 <initSD+0x30>)
 80033fe:	f00a fb2d 	bl	800da5c <f_mount>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <initSD+0x1a>
		Error_Handler();
 8003408:	f000 f82a 	bl	8003460 <Error_Handler>
	}
	else {
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SD mounted", CENTER_MODE);
	}
}
 800340c:	e005      	b.n	800341a <initSD+0x26>
		BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"SD mounted", CENTER_MODE);
 800340e:	2301      	movs	r3, #1
 8003410:	4a05      	ldr	r2, [pc, #20]	@ (8003428 <initSD+0x34>)
 8003412:	2100      	movs	r1, #0
 8003414:	2000      	movs	r0, #0
 8003416:	f000 fe15 	bl	8004044 <BSP_LCD_DisplayStringAt>
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000e24 	.word	0x20000e24
 8003424:	20000e28 	.word	0x20000e28
 8003428:	080122d0 	.word	0x080122d0

0800342c <initAudio>:

void initAudio()
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0

}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a04      	ldr	r2, [pc, #16]	@ (800345c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d101      	bne.n	8003452 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800344e:	f002 fa55 	bl	80058fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40001000 	.word	0x40001000

08003460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003464:	b672      	cpsid	i
}
 8003466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003468:	bf00      	nop
 800346a:	e7fd      	b.n	8003468 <Error_Handler+0x8>

0800346c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8003470:	4b4e      	ldr	r3, [pc, #312]	@ (80035ac <MX_SAI2_Init+0x140>)
 8003472:	4a4f      	ldr	r2, [pc, #316]	@ (80035b0 <MX_SAI2_Init+0x144>)
 8003474:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003476:	4b4d      	ldr	r3, [pc, #308]	@ (80035ac <MX_SAI2_Init+0x140>)
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800347c:	4b4b      	ldr	r3, [pc, #300]	@ (80035ac <MX_SAI2_Init+0x140>)
 800347e:	2200      	movs	r2, #0
 8003480:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8003482:	4b4a      	ldr	r3, [pc, #296]	@ (80035ac <MX_SAI2_Init+0x140>)
 8003484:	2240      	movs	r2, #64	@ 0x40
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003488:	4b48      	ldr	r3, [pc, #288]	@ (80035ac <MX_SAI2_Init+0x140>)
 800348a:	2200      	movs	r2, #0
 800348c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800348e:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <MX_SAI2_Init+0x140>)
 8003490:	2200      	movs	r2, #0
 8003492:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003494:	4b45      	ldr	r3, [pc, #276]	@ (80035ac <MX_SAI2_Init+0x140>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800349a:	4b44      	ldr	r3, [pc, #272]	@ (80035ac <MX_SAI2_Init+0x140>)
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80034a0:	4b42      	ldr	r3, [pc, #264]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80034a6:	4b41      	ldr	r3, [pc, #260]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80034ac:	4b3f      	ldr	r3, [pc, #252]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034ae:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80034b2:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80034b4:	4b3d      	ldr	r3, [pc, #244]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80034ba:	4b3c      	ldr	r3, [pc, #240]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034bc:	2200      	movs	r2, #0
 80034be:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80034c0:	4b3a      	ldr	r3, [pc, #232]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80034c6:	4b39      	ldr	r3, [pc, #228]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80034cc:	4b37      	ldr	r3, [pc, #220]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034ce:	2208      	movs	r2, #8
 80034d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80034d2:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80034d8:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034da:	2200      	movs	r2, #0
 80034dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80034de:	4b33      	ldr	r3, [pc, #204]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80034e4:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80034ea:	4b30      	ldr	r3, [pc, #192]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80034f0:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80034f6:	4b2d      	ldr	r3, [pc, #180]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80034fc:	4b2b      	ldr	r3, [pc, #172]	@ (80035ac <MX_SAI2_Init+0x140>)
 80034fe:	2200      	movs	r2, #0
 8003500:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8003502:	482a      	ldr	r0, [pc, #168]	@ (80035ac <MX_SAI2_Init+0x140>)
 8003504:	f006 fbe4 	bl	8009cd0 <HAL_SAI_Init>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 800350e:	f7ff ffa7 	bl	8003460 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8003512:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003514:	4a28      	ldr	r2, [pc, #160]	@ (80035b8 <MX_SAI2_Init+0x14c>)
 8003516:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003518:	4b26      	ldr	r3, [pc, #152]	@ (80035b4 <MX_SAI2_Init+0x148>)
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800351e:	4b25      	ldr	r3, [pc, #148]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003520:	2203      	movs	r2, #3
 8003522:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8003524:	4b23      	ldr	r3, [pc, #140]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003526:	2240      	movs	r2, #64	@ 0x40
 8003528:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800352a:	4b22      	ldr	r3, [pc, #136]	@ (80035b4 <MX_SAI2_Init+0x148>)
 800352c:	2200      	movs	r2, #0
 800352e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003530:	4b20      	ldr	r3, [pc, #128]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003532:	2200      	movs	r2, #0
 8003534:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8003536:	4b1f      	ldr	r3, [pc, #124]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003538:	2201      	movs	r2, #1
 800353a:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800353c:	4b1d      	ldr	r3, [pc, #116]	@ (80035b4 <MX_SAI2_Init+0x148>)
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003542:	4b1c      	ldr	r3, [pc, #112]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003544:	2200      	movs	r2, #0
 8003546:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003548:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <MX_SAI2_Init+0x148>)
 800354a:	2200      	movs	r2, #0
 800354c:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800354e:	4b19      	ldr	r3, [pc, #100]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003550:	2200      	movs	r2, #0
 8003552:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003554:	4b17      	ldr	r3, [pc, #92]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003556:	2200      	movs	r2, #0
 8003558:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800355a:	4b16      	ldr	r3, [pc, #88]	@ (80035b4 <MX_SAI2_Init+0x148>)
 800355c:	2200      	movs	r2, #0
 800355e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003562:	2208      	movs	r2, #8
 8003564:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8003566:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003568:	2201      	movs	r2, #1
 800356a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800356c:	4b11      	ldr	r3, [pc, #68]	@ (80035b4 <MX_SAI2_Init+0x148>)
 800356e:	2200      	movs	r2, #0
 8003570:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003574:	2200      	movs	r2, #0
 8003576:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003578:	4b0e      	ldr	r3, [pc, #56]	@ (80035b4 <MX_SAI2_Init+0x148>)
 800357a:	2200      	movs	r2, #0
 800357c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003580:	2200      	movs	r2, #0
 8003582:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003584:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003586:	2200      	movs	r2, #0
 8003588:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <MX_SAI2_Init+0x148>)
 800358c:	2201      	movs	r2, #1
 800358e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8003590:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003592:	2200      	movs	r2, #0
 8003594:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8003596:	4807      	ldr	r0, [pc, #28]	@ (80035b4 <MX_SAI2_Init+0x148>)
 8003598:	f006 fb9a 	bl	8009cd0 <HAL_SAI_Init>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 80035a2:	f7ff ff5d 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000718 	.word	0x20000718
 80035b0:	40015c04 	.word	0x40015c04
 80035b4:	2000079c 	.word	0x2000079c
 80035b8:	40015c24 	.word	0x40015c24

080035bc <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	@ 0x28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a61      	ldr	r2, [pc, #388]	@ (8003750 <HAL_SAI_MspInit+0x194>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d15b      	bne.n	8003686 <HAL_SAI_MspInit+0xca>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 80035ce:	4b61      	ldr	r3, [pc, #388]	@ (8003754 <HAL_SAI_MspInit+0x198>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10b      	bne.n	80035ee <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80035d6:	4b60      	ldr	r3, [pc, #384]	@ (8003758 <HAL_SAI_MspInit+0x19c>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	4a5f      	ldr	r2, [pc, #380]	@ (8003758 <HAL_SAI_MspInit+0x19c>)
 80035dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003758 <HAL_SAI_MspInit+0x19c>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80035ee:	4b59      	ldr	r3, [pc, #356]	@ (8003754 <HAL_SAI_MspInit+0x198>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3301      	adds	r3, #1
 80035f4:	4a57      	ldr	r2, [pc, #348]	@ (8003754 <HAL_SAI_MspInit+0x198>)
 80035f6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80035f8:	23f0      	movs	r3, #240	@ 0xf0
 80035fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003608:	230a      	movs	r3, #10
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	4619      	mov	r1, r3
 8003612:	4852      	ldr	r0, [pc, #328]	@ (800375c <HAL_SAI_MspInit+0x1a0>)
 8003614:	f003 fe10 	bl	8007238 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8003618:	4b51      	ldr	r3, [pc, #324]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 800361a:	4a52      	ldr	r2, [pc, #328]	@ (8003764 <HAL_SAI_MspInit+0x1a8>)
 800361c:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 800361e:	4b50      	ldr	r3, [pc, #320]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003620:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003624:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003626:	4b4e      	ldr	r3, [pc, #312]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003628:	2240      	movs	r2, #64	@ 0x40
 800362a:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800362c:	4b4c      	ldr	r3, [pc, #304]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 800362e:	2200      	movs	r2, #0
 8003630:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8003632:	4b4b      	ldr	r3, [pc, #300]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003634:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003638:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800363a:	4b49      	ldr	r3, [pc, #292]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 800363c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003640:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003642:	4b47      	ldr	r3, [pc, #284]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003648:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800364a:	4b45      	ldr	r3, [pc, #276]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 800364c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003650:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8003652:	4b43      	ldr	r3, [pc, #268]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003654:	2200      	movs	r2, #0
 8003656:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003658:	4b41      	ldr	r3, [pc, #260]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 800365a:	2200      	movs	r2, #0
 800365c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800365e:	4840      	ldr	r0, [pc, #256]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003660:	f002 fe6c 	bl	800633c <HAL_DMA_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 800366a:	f7ff fef9 	bl	8003460 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a3b      	ldr	r2, [pc, #236]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003672:	671a      	str	r2, [r3, #112]	@ 0x70
 8003674:	4a3a      	ldr	r2, [pc, #232]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a38      	ldr	r2, [pc, #224]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 800367e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003680:	4a37      	ldr	r2, [pc, #220]	@ (8003760 <HAL_SAI_MspInit+0x1a4>)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a37      	ldr	r2, [pc, #220]	@ (8003768 <HAL_SAI_MspInit+0x1ac>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d15b      	bne.n	8003748 <HAL_SAI_MspInit+0x18c>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8003690:	4b30      	ldr	r3, [pc, #192]	@ (8003754 <HAL_SAI_MspInit+0x198>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003698:	4b2f      	ldr	r3, [pc, #188]	@ (8003758 <HAL_SAI_MspInit+0x19c>)
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	4a2e      	ldr	r2, [pc, #184]	@ (8003758 <HAL_SAI_MspInit+0x19c>)
 800369e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80036a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80036a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003758 <HAL_SAI_MspInit+0x19c>)
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80036b0:	4b28      	ldr	r3, [pc, #160]	@ (8003754 <HAL_SAI_MspInit+0x198>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	4a27      	ldr	r2, [pc, #156]	@ (8003754 <HAL_SAI_MspInit+0x198>)
 80036b8:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80036ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	2302      	movs	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036cc:	230a      	movs	r3, #10
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	4619      	mov	r1, r3
 80036d6:	4825      	ldr	r0, [pc, #148]	@ (800376c <HAL_SAI_MspInit+0x1b0>)
 80036d8:	f003 fdae 	bl	8007238 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80036dc:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 80036de:	4a25      	ldr	r2, [pc, #148]	@ (8003774 <HAL_SAI_MspInit+0x1b8>)
 80036e0:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036e8:	4b21      	ldr	r3, [pc, #132]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80036ee:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80036f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 80036f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036fa:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 80036fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003702:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003704:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 8003706:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800370a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800370c:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 800370e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003712:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8003714:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 8003716:	2200      	movs	r2, #0
 8003718:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 800371c:	2200      	movs	r2, #0
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8003720:	4813      	ldr	r0, [pc, #76]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 8003722:	f002 fe0b 	bl	800633c <HAL_DMA_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 800372c:	f7ff fe98 	bl	8003460 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a0f      	ldr	r2, [pc, #60]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 8003734:	671a      	str	r2, [r3, #112]	@ 0x70
 8003736:	4a0e      	ldr	r2, [pc, #56]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0c      	ldr	r2, [pc, #48]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 8003740:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003742:	4a0b      	ldr	r2, [pc, #44]	@ (8003770 <HAL_SAI_MspInit+0x1b4>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8003748:	bf00      	nop
 800374a:	3728      	adds	r7, #40	@ 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40015c04 	.word	0x40015c04
 8003754:	200008e0 	.word	0x200008e0
 8003758:	40023800 	.word	0x40023800
 800375c:	40022000 	.word	0x40022000
 8003760:	20000820 	.word	0x20000820
 8003764:	40026470 	.word	0x40026470
 8003768:	40015c24 	.word	0x40015c24
 800376c:	40021800 	.word	0x40021800
 8003770:	20000880 	.word	0x20000880
 8003774:	400264b8 	.word	0x400264b8

08003778 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800377c:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <MX_SDMMC1_SD_Init+0x38>)
 800377e:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <MX_SDMMC1_SD_Init+0x3c>)
 8003780:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003782:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <MX_SDMMC1_SD_Init+0x38>)
 8003784:	2200      	movs	r2, #0
 8003786:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003788:	4b09      	ldr	r3, [pc, #36]	@ (80037b0 <MX_SDMMC1_SD_Init+0x38>)
 800378a:	2200      	movs	r2, #0
 800378c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800378e:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <MX_SDMMC1_SD_Init+0x38>)
 8003790:	2200      	movs	r2, #0
 8003792:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003794:	4b06      	ldr	r3, [pc, #24]	@ (80037b0 <MX_SDMMC1_SD_Init+0x38>)
 8003796:	2200      	movs	r2, #0
 8003798:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800379a:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <MX_SDMMC1_SD_Init+0x38>)
 800379c:	2200      	movs	r2, #0
 800379e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80037a0:	4b03      	ldr	r3, [pc, #12]	@ (80037b0 <MX_SDMMC1_SD_Init+0x38>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80037a6:	bf00      	nop
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	200008e4 	.word	0x200008e4
 80037b4:	40012c00 	.word	0x40012c00

080037b8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08a      	sub	sp, #40	@ 0x28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c0:	f107 0314 	add.w	r3, r7, #20
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	60da      	str	r2, [r3, #12]
 80037ce:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a61      	ldr	r2, [pc, #388]	@ (800395c <HAL_SD_MspInit+0x1a4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f040 80bb 	bne.w	8003952 <HAL_SD_MspInit+0x19a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80037dc:	4b60      	ldr	r3, [pc, #384]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 80037de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 80037e2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80037e8:	4b5d      	ldr	r3, [pc, #372]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 80037ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f8:	4a59      	ldr	r2, [pc, #356]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003800:	4b57      	ldr	r3, [pc, #348]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 8003802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800380c:	4b54      	ldr	r3, [pc, #336]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	4a53      	ldr	r2, [pc, #332]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 8003812:	f043 0308 	orr.w	r3, r3, #8
 8003816:	6313      	str	r3, [r2, #48]	@ 0x30
 8003818:	4b51      	ldr	r3, [pc, #324]	@ (8003960 <HAL_SD_MspInit+0x1a8>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	60bb      	str	r3, [r7, #8]
 8003822:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003824:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003828:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382a:	2302      	movs	r3, #2
 800382c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003832:	2303      	movs	r3, #3
 8003834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003836:	230c      	movs	r3, #12
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	4619      	mov	r1, r3
 8003840:	4848      	ldr	r0, [pc, #288]	@ (8003964 <HAL_SD_MspInit+0x1ac>)
 8003842:	f003 fcf9 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003846:	2304      	movs	r3, #4
 8003848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003852:	2303      	movs	r3, #3
 8003854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003856:	230c      	movs	r3, #12
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800385a:	f107 0314 	add.w	r3, r7, #20
 800385e:	4619      	mov	r1, r3
 8003860:	4841      	ldr	r0, [pc, #260]	@ (8003968 <HAL_SD_MspInit+0x1b0>)
 8003862:	f003 fce9 	bl	8007238 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003866:	4b41      	ldr	r3, [pc, #260]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 8003868:	4a41      	ldr	r2, [pc, #260]	@ (8003970 <HAL_SD_MspInit+0x1b8>)
 800386a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800386c:	4b3f      	ldr	r3, [pc, #252]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 800386e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003872:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003874:	4b3d      	ldr	r3, [pc, #244]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800387a:	4b3c      	ldr	r3, [pc, #240]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003880:	4b3a      	ldr	r3, [pc, #232]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 8003882:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003886:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003888:	4b38      	ldr	r3, [pc, #224]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 800388a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800388e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003890:	4b36      	ldr	r3, [pc, #216]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 8003892:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003896:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003898:	4b34      	ldr	r3, [pc, #208]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 800389a:	2220      	movs	r2, #32
 800389c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800389e:	4b33      	ldr	r3, [pc, #204]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038a4:	4b31      	ldr	r3, [pc, #196]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 80038a6:	2204      	movs	r2, #4
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80038aa:	4b30      	ldr	r3, [pc, #192]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 80038ac:	2203      	movs	r2, #3
 80038ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80038b0:	4b2e      	ldr	r3, [pc, #184]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 80038b2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80038b8:	4b2c      	ldr	r3, [pc, #176]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 80038ba:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80038be:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80038c0:	482a      	ldr	r0, [pc, #168]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 80038c2:	f002 fd3b 	bl	800633c <HAL_DMA_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80038cc:	f7ff fdc8 	bl	8003460 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a26      	ldr	r2, [pc, #152]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 80038d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80038d6:	4a25      	ldr	r2, [pc, #148]	@ (800396c <HAL_SD_MspInit+0x1b4>)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80038dc:	4b25      	ldr	r3, [pc, #148]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 80038de:	4a26      	ldr	r2, [pc, #152]	@ (8003978 <HAL_SD_MspInit+0x1c0>)
 80038e0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80038e2:	4b24      	ldr	r3, [pc, #144]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 80038e4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80038e8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038ea:	4b22      	ldr	r3, [pc, #136]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 80038ec:	2240      	movs	r2, #64	@ 0x40
 80038ee:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038f0:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 80038f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038fc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 8003900:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003904:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003906:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 8003908:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800390c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800390e:	4b19      	ldr	r3, [pc, #100]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 8003910:	2220      	movs	r2, #32
 8003912:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003914:	4b17      	ldr	r3, [pc, #92]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 8003916:	2200      	movs	r2, #0
 8003918:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800391a:	4b16      	ldr	r3, [pc, #88]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 800391c:	2204      	movs	r2, #4
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003920:	4b14      	ldr	r3, [pc, #80]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 8003922:	2203      	movs	r2, #3
 8003924:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003926:	4b13      	ldr	r3, [pc, #76]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 8003928:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800392c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800392e:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 8003930:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003934:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003936:	480f      	ldr	r0, [pc, #60]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 8003938:	f002 fd00 	bl	800633c <HAL_DMA_Init>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8003942:	f7ff fd8d 	bl	8003460 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a0a      	ldr	r2, [pc, #40]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800394c:	4a09      	ldr	r2, [pc, #36]	@ (8003974 <HAL_SD_MspInit+0x1bc>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003952:	bf00      	nop
 8003954:	3728      	adds	r7, #40	@ 0x28
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40012c00 	.word	0x40012c00
 8003960:	40023800 	.word	0x40023800
 8003964:	40020800 	.word	0x40020800
 8003968:	40020c00 	.word	0x40020c00
 800396c:	20000968 	.word	0x20000968
 8003970:	40026458 	.word	0x40026458
 8003974:	200009c8 	.word	0x200009c8
 8003978:	400264a0 	.word	0x400264a0

0800397c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	@ 0x30
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a51      	ldr	r2, [pc, #324]	@ (8003acc <I2Cx_MspInit+0x150>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d14d      	bne.n	8003a28 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800398c:	4b50      	ldr	r3, [pc, #320]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	4a4f      	ldr	r2, [pc, #316]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003996:	6313      	str	r3, [r2, #48]	@ 0x30
 8003998:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80039a8:	2312      	movs	r3, #18
 80039aa:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80039b0:	2302      	movs	r3, #2
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80039b4:	2304      	movs	r3, #4
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039b8:	f107 031c 	add.w	r3, r7, #28
 80039bc:	4619      	mov	r1, r3
 80039be:	4845      	ldr	r0, [pc, #276]	@ (8003ad4 <I2Cx_MspInit+0x158>)
 80039c0:	f003 fc3a 	bl	8007238 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80039c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80039ca:	f107 031c 	add.w	r3, r7, #28
 80039ce:	4619      	mov	r1, r3
 80039d0:	4840      	ldr	r0, [pc, #256]	@ (8003ad4 <I2Cx_MspInit+0x158>)
 80039d2:	f003 fc31 	bl	8007238 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80039d6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	4a3d      	ldr	r2, [pc, #244]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 80039dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80039e2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80039ee:	4b38      	ldr	r3, [pc, #224]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4a37      	ldr	r2, [pc, #220]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 80039f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039f8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80039fa:	4b35      	ldr	r3, [pc, #212]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4a34      	ldr	r2, [pc, #208]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003a04:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	210f      	movs	r1, #15
 8003a0a:	2048      	movs	r0, #72	@ 0x48
 8003a0c:	f002 fc6c 	bl	80062e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003a10:	2048      	movs	r0, #72	@ 0x48
 8003a12:	f002 fc85 	bl	8006320 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	210f      	movs	r1, #15
 8003a1a:	2049      	movs	r0, #73	@ 0x49
 8003a1c:	f002 fc64 	bl	80062e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003a20:	2049      	movs	r0, #73	@ 0x49
 8003a22:	f002 fc7d 	bl	8006320 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003a26:	e04d      	b.n	8003ac4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003a28:	4b29      	ldr	r3, [pc, #164]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2c:	4a28      	ldr	r2, [pc, #160]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a2e:	f043 0302 	orr.w	r3, r3, #2
 8003a32:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a34:	4b26      	ldr	r3, [pc, #152]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003a40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a44:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003a46:	2312      	movs	r3, #18
 8003a48:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003a52:	2304      	movs	r3, #4
 8003a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	481e      	ldr	r0, [pc, #120]	@ (8003ad8 <I2Cx_MspInit+0x15c>)
 8003a5e:	f003 fbeb 	bl	8007238 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003a62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a68:	f107 031c 	add.w	r3, r7, #28
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	481a      	ldr	r0, [pc, #104]	@ (8003ad8 <I2Cx_MspInit+0x15c>)
 8003a70:	f003 fbe2 	bl	8007238 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003a74:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a80:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003a8c:	4b10      	ldr	r3, [pc, #64]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a96:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003a98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad0 <I2Cx_MspInit+0x154>)
 8003a9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003aa2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	210f      	movs	r1, #15
 8003aa8:	201f      	movs	r0, #31
 8003aaa:	f002 fc1d 	bl	80062e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003aae:	201f      	movs	r0, #31
 8003ab0:	f002 fc36 	bl	8006320 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	210f      	movs	r1, #15
 8003ab8:	2020      	movs	r0, #32
 8003aba:	f002 fc15 	bl	80062e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003abe:	2020      	movs	r0, #32
 8003ac0:	f002 fc2e 	bl	8006320 <HAL_NVIC_EnableIRQ>
}
 8003ac4:	bf00      	nop
 8003ac6:	3730      	adds	r7, #48	@ 0x30
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000a28 	.word	0x20000a28
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40021c00 	.word	0x40021c00
 8003ad8:	40020400 	.word	0x40020400

08003adc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f004 f887 	bl	8007bf8 <HAL_I2C_GetState>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d125      	bne.n	8003b3c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a14      	ldr	r2, [pc, #80]	@ (8003b44 <I2Cx_Init+0x68>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d103      	bne.n	8003b00 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a13      	ldr	r2, [pc, #76]	@ (8003b48 <I2Cx_Init+0x6c>)
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a12      	ldr	r2, [pc, #72]	@ (8003b4c <I2Cx_Init+0x70>)
 8003b04:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a11      	ldr	r2, [pc, #68]	@ (8003b50 <I2Cx_Init+0x74>)
 8003b0a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ff23 	bl	800397c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f003 fd5c 	bl	80075f4 <HAL_I2C_Init>
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000a28 	.word	0x20000a28
 8003b48:	40005c00 	.word	0x40005c00
 8003b4c:	40005400 	.word	0x40005400
 8003b50:	40912732 	.word	0x40912732

08003b54 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af04      	add	r7, sp, #16
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	72fb      	strb	r3, [r7, #11]
 8003b66:	460b      	mov	r3, r1
 8003b68:	813b      	strh	r3, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b72:	7afb      	ldrb	r3, [r7, #11]
 8003b74:	b299      	uxth	r1, r3
 8003b76:	88f8      	ldrh	r0, [r7, #6]
 8003b78:	893a      	ldrh	r2, [r7, #8]
 8003b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b7e:	9302      	str	r3, [sp, #8]
 8003b80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	4603      	mov	r3, r0
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f003 ff1a 	bl	80079c4 <HAL_I2C_Mem_Read>
 8003b90:	4603      	mov	r3, r0
 8003b92:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f832 	bl	8003c08 <I2Cx_Error>
  }
  return status;    
 8003ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b08a      	sub	sp, #40	@ 0x28
 8003bb2:	af04      	add	r7, sp, #16
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	4608      	mov	r0, r1
 8003bb8:	4611      	mov	r1, r2
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	72fb      	strb	r3, [r7, #11]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	813b      	strh	r3, [r7, #8]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	b299      	uxth	r1, r3
 8003bd0:	88f8      	ldrh	r0, [r7, #6]
 8003bd2:	893a      	ldrh	r2, [r7, #8]
 8003bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	4603      	mov	r3, r0
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f003 fdd9 	bl	800779c <HAL_I2C_Mem_Write>
 8003bea:	4603      	mov	r3, r0
 8003bec:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003bee:	7dfb      	ldrb	r3, [r7, #23]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f805 	bl	8003c08 <I2Cx_Error>
  }
  return status;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f003 fd7d 	bl	8007714 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff ff5e 	bl	8003adc <I2Cx_Init>
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003c2c:	4802      	ldr	r0, [pc, #8]	@ (8003c38 <TS_IO_Init+0x10>)
 8003c2e:	f7ff ff55 	bl	8003adc <I2Cx_Init>
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000a28 	.word	0x20000a28

08003c3c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	460b      	mov	r3, r1
 8003c48:	71bb      	strb	r3, [r7, #6]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003c4e:	79bb      	ldrb	r3, [r7, #6]
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	79f9      	ldrb	r1, [r7, #7]
 8003c54:	2301      	movs	r3, #1
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	1d7b      	adds	r3, r7, #5
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4803      	ldr	r0, [pc, #12]	@ (8003c6c <TS_IO_Write+0x30>)
 8003c60:	f7ff ffa5 	bl	8003bae <I2Cx_WriteMultiple>
}
 8003c64:	bf00      	nop
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	20000a28 	.word	0x20000a28

08003c70 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	4603      	mov	r3, r0
 8003c78:	460a      	mov	r2, r1
 8003c7a:	71fb      	strb	r3, [r7, #7]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003c84:	79bb      	ldrb	r3, [r7, #6]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	79f9      	ldrb	r1, [r7, #7]
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	f107 030f 	add.w	r3, r7, #15
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2301      	movs	r3, #1
 8003c96:	4804      	ldr	r0, [pc, #16]	@ (8003ca8 <TS_IO_Read+0x38>)
 8003c98:	f7ff ff5c 	bl	8003b54 <I2Cx_ReadMultiple>

  return read_value;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000a28 	.word	0x20000a28

08003cac <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f001 fe41 	bl	800593c <HAL_Delay>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003cc8:	4b31      	ldr	r3, [pc, #196]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003cca:	2228      	movs	r2, #40	@ 0x28
 8003ccc:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003cce:	4b30      	ldr	r3, [pc, #192]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003cd0:	2209      	movs	r2, #9
 8003cd2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003cd4:	4b2e      	ldr	r3, [pc, #184]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003cd6:	2235      	movs	r2, #53	@ 0x35
 8003cd8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003cda:	4b2d      	ldr	r3, [pc, #180]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003cdc:	220b      	movs	r2, #11
 8003cde:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003ce2:	f240 121b 	movw	r2, #283	@ 0x11b
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003ce8:	4b29      	ldr	r3, [pc, #164]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003cea:	f240 2215 	movw	r2, #533	@ 0x215
 8003cee:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003cf0:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003cf2:	f240 121d 	movw	r2, #285	@ 0x11d
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003cf8:	4b25      	ldr	r3, [pc, #148]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003cfa:	f240 2235 	movw	r2, #565	@ 0x235
 8003cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003d00:	2100      	movs	r1, #0
 8003d02:	4823      	ldr	r0, [pc, #140]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d04:	f000 fd30 	bl	8004768 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003d08:	4b21      	ldr	r3, [pc, #132]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d0a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003d0e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003d10:	4b1f      	ldr	r3, [pc, #124]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d12:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003d16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003d18:	4b1d      	ldr	r3, [pc, #116]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003d20:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003d28:	4b19      	ldr	r3, [pc, #100]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003d30:	4b17      	ldr	r3, [pc, #92]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003d36:	4b16      	ldr	r3, [pc, #88]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003d3c:	4b14      	ldr	r3, [pc, #80]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003d48:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d4a:	4a12      	ldr	r2, [pc, #72]	@ (8003d94 <BSP_LCD_Init+0xd0>)
 8003d4c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003d4e:	4810      	ldr	r0, [pc, #64]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d50:	f004 fbca 	bl	80084e8 <HAL_LTDC_GetState>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	480c      	ldr	r0, [pc, #48]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d5e:	f000 fc29 	bl	80045b4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003d62:	480b      	ldr	r0, [pc, #44]	@ (8003d90 <BSP_LCD_Init+0xcc>)
 8003d64:	f004 f9f0 	bl	8008148 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d6e:	480a      	ldr	r0, [pc, #40]	@ (8003d98 <BSP_LCD_Init+0xd4>)
 8003d70:	f003 fc26 	bl	80075c0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003d74:	2201      	movs	r2, #1
 8003d76:	2108      	movs	r1, #8
 8003d78:	4808      	ldr	r0, [pc, #32]	@ (8003d9c <BSP_LCD_Init+0xd8>)
 8003d7a:	f003 fc21 	bl	80075c0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003d7e:	f000 fe57 	bl	8004a30 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003d82:	4807      	ldr	r0, [pc, #28]	@ (8003da0 <BSP_LCD_Init+0xdc>)
 8003d84:	f000 f8d8 	bl	8003f38 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	20000a7c 	.word	0x20000a7c
 8003d94:	40016800 	.word	0x40016800
 8003d98:	40022000 	.word	0x40022000
 8003d9c:	40022800 	.word	0x40022800
 8003da0:	20000034 	.word	0x20000034

08003da4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <BSP_LCD_GetXSize+0x20>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a06      	ldr	r2, [pc, #24]	@ (8003dc8 <BSP_LCD_GetXSize+0x24>)
 8003dae:	2134      	movs	r1, #52	@ 0x34
 8003db0:	fb01 f303 	mul.w	r3, r1, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	3360      	adds	r3, #96	@ 0x60
 8003db8:	681b      	ldr	r3, [r3, #0]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	20000b64 	.word	0x20000b64
 8003dc8:	20000a7c 	.word	0x20000a7c

08003dcc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <BSP_LCD_GetYSize+0x20>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a06      	ldr	r2, [pc, #24]	@ (8003df0 <BSP_LCD_GetYSize+0x24>)
 8003dd6:	2134      	movs	r1, #52	@ 0x34
 8003dd8:	fb01 f303 	mul.w	r3, r1, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	3364      	adds	r3, #100	@ 0x64
 8003de0:	681b      	ldr	r3, [r3, #0]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	20000b64 	.word	0x20000b64
 8003df0:	20000a7c 	.word	0x20000a7c

08003df4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b090      	sub	sp, #64	@ 0x40
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	6039      	str	r1, [r7, #0]
 8003dfe:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003e04:	f7ff ffce 	bl	8003da4 <BSP_LCD_GetXSize>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003e10:	f7ff ffdc 	bl	8003dcc <BSP_LCD_GetYSize>
 8003e14:	4603      	mov	r3, r0
 8003e16:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003e20:	23ff      	movs	r3, #255	@ 0xff
 8003e22:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003e24:	2300      	movs	r3, #0
 8003e26:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003e3a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003e40:	2307      	movs	r3, #7
 8003e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003e44:	f7ff ffae 	bl	8003da4 <BSP_LCD_GetXSize>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003e4c:	f7ff ffbe 	bl	8003dcc <BSP_LCD_GetYSize>
 8003e50:	4603      	mov	r3, r0
 8003e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	f107 030c 	add.w	r3, r7, #12
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4812      	ldr	r0, [pc, #72]	@ (8003ea8 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003e5e:	f004 fb05 	bl	800846c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	4911      	ldr	r1, [pc, #68]	@ (8003eac <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	3304      	adds	r3, #4
 8003e72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e76:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	490c      	ldr	r1, [pc, #48]	@ (8003eac <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	3308      	adds	r3, #8
 8003e88:	4a09      	ldr	r2, [pc, #36]	@ (8003eb0 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003e8a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003e8c:	88fa      	ldrh	r2, [r7, #6]
 8003e8e:	4907      	ldr	r1, [pc, #28]	@ (8003eac <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003e9e:	601a      	str	r2, [r3, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	3740      	adds	r7, #64	@ 0x40
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000a7c 	.word	0x20000a7c
 8003eac:	20000b68 	.word	0x20000b68
 8003eb0:	20000034 	.word	0x20000034

08003eb4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003ebc:	4a04      	ldr	r2, [pc, #16]	@ (8003ed0 <BSP_LCD_SelectLayer+0x1c>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6013      	str	r3, [r2, #0]
} 
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20000b64 	.word	0x20000b64

08003ed4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003edc:	4b07      	ldr	r3, [pc, #28]	@ (8003efc <BSP_LCD_SetTextColor+0x28>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4907      	ldr	r1, [pc, #28]	@ (8003f00 <BSP_LCD_SetTextColor+0x2c>)
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	20000b64 	.word	0x20000b64
 8003f00:	20000b68 	.word	0x20000b68

08003f04 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <BSP_LCD_SetBackColor+0x2c>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4908      	ldr	r1, [pc, #32]	@ (8003f34 <BSP_LCD_SetBackColor+0x30>)
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000b64 	.word	0x20000b64
 8003f34:	20000b68 	.word	0x20000b68

08003f38 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003f40:	4b08      	ldr	r3, [pc, #32]	@ (8003f64 <BSP_LCD_SetFont+0x2c>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4908      	ldr	r1, [pc, #32]	@ (8003f68 <BSP_LCD_SetFont+0x30>)
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	3308      	adds	r3, #8
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000b64 	.word	0x20000b64
 8003f68:	20000b68 	.word	0x20000b68

08003f6c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003f74:	4b0f      	ldr	r3, [pc, #60]	@ (8003fb4 <BSP_LCD_Clear+0x48>)
 8003f76:	681c      	ldr	r4, [r3, #0]
 8003f78:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb4 <BSP_LCD_Clear+0x48>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8003fb8 <BSP_LCD_Clear+0x4c>)
 8003f7e:	2134      	movs	r1, #52	@ 0x34
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	4413      	add	r3, r2
 8003f86:	335c      	adds	r3, #92	@ 0x5c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461e      	mov	r6, r3
 8003f8c:	f7ff ff0a 	bl	8003da4 <BSP_LCD_GetXSize>
 8003f90:	4605      	mov	r5, r0
 8003f92:	f7ff ff1b 	bl	8003dcc <BSP_LCD_GetYSize>
 8003f96:	4602      	mov	r2, r0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	462a      	mov	r2, r5
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f000 fcb2 	bl	8004910 <LL_FillBuffer>
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb4:	20000b64 	.word	0x20000b64
 8003fb8:	20000a7c 	.word	0x20000a7c

08003fbc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	80fb      	strh	r3, [r7, #6]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	80bb      	strh	r3, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <BSP_LCD_DisplayChar+0x80>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	491b      	ldr	r1, [pc, #108]	@ (8004040 <BSP_LCD_DisplayChar+0x84>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3308      	adds	r3, #8
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6819      	ldr	r1, [r3, #0]
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003fea:	4b14      	ldr	r3, [pc, #80]	@ (800403c <BSP_LCD_DisplayChar+0x80>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4c14      	ldr	r4, [pc, #80]	@ (8004040 <BSP_LCD_DisplayChar+0x84>)
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4423      	add	r3, r4
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004000:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004004:	4b0d      	ldr	r3, [pc, #52]	@ (800403c <BSP_LCD_DisplayChar+0x80>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	4c0d      	ldr	r4, [pc, #52]	@ (8004040 <BSP_LCD_DisplayChar+0x84>)
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4423      	add	r3, r4
 8004014:	3308      	adds	r3, #8
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	889b      	ldrh	r3, [r3, #4]
 800401a:	3307      	adds	r3, #7
 800401c:	2b00      	cmp	r3, #0
 800401e:	da00      	bge.n	8004022 <BSP_LCD_DisplayChar+0x66>
 8004020:	3307      	adds	r3, #7
 8004022:	10db      	asrs	r3, r3, #3
 8004024:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004028:	18ca      	adds	r2, r1, r3
 800402a:	88b9      	ldrh	r1, [r7, #4]
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fbb6 	bl	80047a0 <DrawChar>
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bd90      	pop	{r4, r7, pc}
 800403c:	20000b64 	.word	0x20000b64
 8004040:	20000b68 	.word	0x20000b68

08004044 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8004044:	b5b0      	push	{r4, r5, r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	60ba      	str	r2, [r7, #8]
 800404c:	461a      	mov	r2, r3
 800404e:	4603      	mov	r3, r0
 8004050:	81fb      	strh	r3, [r7, #14]
 8004052:	460b      	mov	r3, r1
 8004054:	81bb      	strh	r3, [r7, #12]
 8004056:	4613      	mov	r3, r2
 8004058:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800405a:	2301      	movs	r3, #1
 800405c:	83fb      	strh	r3, [r7, #30]
 800405e:	2300      	movs	r3, #0
 8004060:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800406e:	e002      	b.n	8004076 <BSP_LCD_DisplayStringAt+0x32>
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3301      	adds	r3, #1
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	617a      	str	r2, [r7, #20]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f6      	bne.n	8004070 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004082:	f7ff fe8f 	bl	8003da4 <BSP_LCD_GetXSize>
 8004086:	4601      	mov	r1, r0
 8004088:	4b50      	ldr	r3, [pc, #320]	@ (80041cc <BSP_LCD_DisplayStringAt+0x188>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4850      	ldr	r0, [pc, #320]	@ (80041d0 <BSP_LCD_DisplayStringAt+0x18c>)
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	4403      	add	r3, r0
 8004098:	3308      	adds	r3, #8
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	889b      	ldrh	r3, [r3, #4]
 800409e:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d01c      	beq.n	80040e4 <BSP_LCD_DisplayStringAt+0xa0>
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	dc33      	bgt.n	8004116 <BSP_LCD_DisplayStringAt+0xd2>
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d002      	beq.n	80040b8 <BSP_LCD_DisplayStringAt+0x74>
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d019      	beq.n	80040ea <BSP_LCD_DisplayStringAt+0xa6>
 80040b6:	e02e      	b.n	8004116 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	1ad1      	subs	r1, r2, r3
 80040be:	4b43      	ldr	r3, [pc, #268]	@ (80041cc <BSP_LCD_DisplayStringAt+0x188>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	4843      	ldr	r0, [pc, #268]	@ (80041d0 <BSP_LCD_DisplayStringAt+0x18c>)
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4403      	add	r3, r0
 80040ce:	3308      	adds	r3, #8
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	889b      	ldrh	r3, [r3, #4]
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	89fb      	ldrh	r3, [r7, #14]
 80040de:	4413      	add	r3, r2
 80040e0:	83fb      	strh	r3, [r7, #30]
      break;
 80040e2:	e01b      	b.n	800411c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80040e4:	89fb      	ldrh	r3, [r7, #14]
 80040e6:	83fb      	strh	r3, [r7, #30]
      break;
 80040e8:	e018      	b.n	800411c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	b299      	uxth	r1, r3
 80040f2:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <BSP_LCD_DisplayStringAt+0x188>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4836      	ldr	r0, [pc, #216]	@ (80041d0 <BSP_LCD_DisplayStringAt+0x18c>)
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4403      	add	r3, r0
 8004102:	3308      	adds	r3, #8
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	889b      	ldrh	r3, [r3, #4]
 8004108:	fb11 f303 	smulbb	r3, r1, r3
 800410c:	b29a      	uxth	r2, r3
 800410e:	89fb      	ldrh	r3, [r7, #14]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	83fb      	strh	r3, [r7, #30]
      break;
 8004114:	e002      	b.n	800411c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8004116:	89fb      	ldrh	r3, [r7, #14]
 8004118:	83fb      	strh	r3, [r7, #30]
      break;
 800411a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 800411c:	8bfb      	ldrh	r3, [r7, #30]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <BSP_LCD_DisplayStringAt+0xe6>
 8004122:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004126:	2b00      	cmp	r3, #0
 8004128:	da1d      	bge.n	8004166 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800412e:	e01a      	b.n	8004166 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	89b9      	ldrh	r1, [r7, #12]
 8004136:	8bfb      	ldrh	r3, [r7, #30]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff3f 	bl	8003fbc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800413e:	4b23      	ldr	r3, [pc, #140]	@ (80041cc <BSP_LCD_DisplayStringAt+0x188>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4923      	ldr	r1, [pc, #140]	@ (80041d0 <BSP_LCD_DisplayStringAt+0x18c>)
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3308      	adds	r3, #8
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	889a      	ldrh	r2, [r3, #4]
 8004154:	8bfb      	ldrh	r3, [r7, #30]
 8004156:	4413      	add	r3, r2
 8004158:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	3301      	adds	r3, #1
 800415e:	60bb      	str	r3, [r7, #8]
    i++;
 8004160:	8bbb      	ldrh	r3, [r7, #28]
 8004162:	3301      	adds	r3, #1
 8004164:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2dc      	uxtb	r4, r3
 8004174:	f7ff fe16 	bl	8003da4 <BSP_LCD_GetXSize>
 8004178:	8bb9      	ldrh	r1, [r7, #28]
 800417a:	4b14      	ldr	r3, [pc, #80]	@ (80041cc <BSP_LCD_DisplayStringAt+0x188>)
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4d14      	ldr	r5, [pc, #80]	@ (80041d0 <BSP_LCD_DisplayStringAt+0x18c>)
 8004180:	4613      	mov	r3, r2
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	442b      	add	r3, r5
 800418a:	3308      	adds	r3, #8
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	889b      	ldrh	r3, [r3, #4]
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ac3      	subs	r3, r0, r3
 8004196:	b299      	uxth	r1, r3
 8004198:	4b0c      	ldr	r3, [pc, #48]	@ (80041cc <BSP_LCD_DisplayStringAt+0x188>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	480c      	ldr	r0, [pc, #48]	@ (80041d0 <BSP_LCD_DisplayStringAt+0x18c>)
 800419e:	4613      	mov	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4403      	add	r3, r0
 80041a8:	3308      	adds	r3, #8
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	889b      	ldrh	r3, [r3, #4]
 80041ae:	4299      	cmp	r1, r3
 80041b0:	bf2c      	ite	cs
 80041b2:	2301      	movcs	r3, #1
 80041b4:	2300      	movcc	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	4023      	ands	r3, r4
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1b7      	bne.n	8004130 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3720      	adds	r7, #32
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bdb0      	pop	{r4, r5, r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000b64 	.word	0x20000b64
 80041d0:	20000b68 	.word	0x20000b68

080041d4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80041d4:	b5b0      	push	{r4, r5, r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	4603      	mov	r3, r0
 80041dc:	80fb      	strh	r3, [r7, #6]
 80041de:	460b      	mov	r3, r1
 80041e0:	80bb      	strh	r3, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80041ea:	4b26      	ldr	r3, [pc, #152]	@ (8004284 <BSP_LCD_DrawHLine+0xb0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <BSP_LCD_DrawHLine+0xb4>)
 80041f0:	2134      	movs	r1, #52	@ 0x34
 80041f2:	fb01 f303 	mul.w	r3, r1, r3
 80041f6:	4413      	add	r3, r2
 80041f8:	3348      	adds	r3, #72	@ 0x48
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d114      	bne.n	800422a <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004200:	4b20      	ldr	r3, [pc, #128]	@ (8004284 <BSP_LCD_DrawHLine+0xb0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a20      	ldr	r2, [pc, #128]	@ (8004288 <BSP_LCD_DrawHLine+0xb4>)
 8004206:	2134      	movs	r1, #52	@ 0x34
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	4413      	add	r3, r2
 800420e:	335c      	adds	r3, #92	@ 0x5c
 8004210:	681c      	ldr	r4, [r3, #0]
 8004212:	f7ff fdc7 	bl	8003da4 <BSP_LCD_GetXSize>
 8004216:	4602      	mov	r2, r0
 8004218:	88bb      	ldrh	r3, [r7, #4]
 800421a:	fb03 f202 	mul.w	r2, r3, r2
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	4413      	add	r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4423      	add	r3, r4
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e013      	b.n	8004252 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800422a:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <BSP_LCD_DrawHLine+0xb0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a16      	ldr	r2, [pc, #88]	@ (8004288 <BSP_LCD_DrawHLine+0xb4>)
 8004230:	2134      	movs	r1, #52	@ 0x34
 8004232:	fb01 f303 	mul.w	r3, r1, r3
 8004236:	4413      	add	r3, r2
 8004238:	335c      	adds	r3, #92	@ 0x5c
 800423a:	681c      	ldr	r4, [r3, #0]
 800423c:	f7ff fdb2 	bl	8003da4 <BSP_LCD_GetXSize>
 8004240:	4602      	mov	r2, r0
 8004242:	88bb      	ldrh	r3, [r7, #4]
 8004244:	fb03 f202 	mul.w	r2, r3, r2
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4423      	add	r3, r4
 8004250:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004252:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <BSP_LCD_DrawHLine+0xb0>)
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	887c      	ldrh	r4, [r7, #2]
 800425a:	4b0a      	ldr	r3, [pc, #40]	@ (8004284 <BSP_LCD_DrawHLine+0xb0>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4d0b      	ldr	r5, [pc, #44]	@ (800428c <BSP_LCD_DrawHLine+0xb8>)
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	442b      	add	r3, r5
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	2300      	movs	r3, #0
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2301      	movs	r3, #1
 8004274:	4622      	mov	r2, r4
 8004276:	f000 fb4b 	bl	8004910 <LL_FillBuffer>
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bdb0      	pop	{r4, r5, r7, pc}
 8004282:	bf00      	nop
 8004284:	20000b64 	.word	0x20000b64
 8004288:	20000a7c 	.word	0x20000a7c
 800428c:	20000b68 	.word	0x20000b68

08004290 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004290:	b5b0      	push	{r4, r5, r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	603a      	str	r2, [r7, #0]
 800429a:	80fb      	strh	r3, [r7, #6]
 800429c:	460b      	mov	r3, r1
 800429e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80042a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <BSP_LCD_DrawPixel+0x88>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <BSP_LCD_DrawPixel+0x8c>)
 80042a6:	2134      	movs	r1, #52	@ 0x34
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	3348      	adds	r3, #72	@ 0x48
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d116      	bne.n	80042e4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80042b6:	4b18      	ldr	r3, [pc, #96]	@ (8004318 <BSP_LCD_DrawPixel+0x88>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a18      	ldr	r2, [pc, #96]	@ (800431c <BSP_LCD_DrawPixel+0x8c>)
 80042bc:	2134      	movs	r1, #52	@ 0x34
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	335c      	adds	r3, #92	@ 0x5c
 80042c6:	681c      	ldr	r4, [r3, #0]
 80042c8:	88bd      	ldrh	r5, [r7, #4]
 80042ca:	f7ff fd6b 	bl	8003da4 <BSP_LCD_GetXSize>
 80042ce:	4603      	mov	r3, r0
 80042d0:	fb03 f205 	mul.w	r2, r3, r5
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	4413      	add	r3, r2
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4423      	add	r3, r4
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	b292      	uxth	r2, r2
 80042e0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80042e2:	e015      	b.n	8004310 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80042e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <BSP_LCD_DrawPixel+0x88>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0c      	ldr	r2, [pc, #48]	@ (800431c <BSP_LCD_DrawPixel+0x8c>)
 80042ea:	2134      	movs	r1, #52	@ 0x34
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	335c      	adds	r3, #92	@ 0x5c
 80042f4:	681c      	ldr	r4, [r3, #0]
 80042f6:	88bd      	ldrh	r5, [r7, #4]
 80042f8:	f7ff fd54 	bl	8003da4 <BSP_LCD_GetXSize>
 80042fc:	4603      	mov	r3, r0
 80042fe:	fb03 f205 	mul.w	r2, r3, r5
 8004302:	88fb      	ldrh	r3, [r7, #6]
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4423      	add	r3, r4
 800430a:	461a      	mov	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6013      	str	r3, [r2, #0]
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bdb0      	pop	{r4, r5, r7, pc}
 8004318:	20000b64 	.word	0x20000b64
 800431c:	20000a7c 	.word	0x20000a7c

08004320 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b08b      	sub	sp, #44	@ 0x2c
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004330:	2300      	movs	r3, #0
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	330a      	adds	r3, #10
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	330b      	adds	r3, #11
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	330c      	adds	r3, #12
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	330d      	adds	r3, #13
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	4413      	add	r3, r2
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3312      	adds	r3, #18
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3313      	adds	r3, #19
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3314      	adds	r3, #20
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	041b      	lsls	r3, r3, #16
 8004382:	441a      	add	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3315      	adds	r3, #21
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	4413      	add	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3316      	adds	r3, #22
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3317      	adds	r3, #23
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	441a      	add	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3318      	adds	r3, #24
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	041b      	lsls	r3, r3, #16
 80043aa:	441a      	add	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3319      	adds	r3, #25
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	4413      	add	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	331c      	adds	r3, #28
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	331d      	adds	r3, #29
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	4413      	add	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 80043cc:	4b2b      	ldr	r3, [pc, #172]	@ (800447c <BSP_LCD_DrawBitmap+0x15c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2b      	ldr	r2, [pc, #172]	@ (8004480 <BSP_LCD_DrawBitmap+0x160>)
 80043d2:	2134      	movs	r1, #52	@ 0x34
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	335c      	adds	r3, #92	@ 0x5c
 80043dc:	681c      	ldr	r4, [r3, #0]
 80043de:	f7ff fce1 	bl	8003da4 <BSP_LCD_GetXSize>
 80043e2:	4602      	mov	r2, r0
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	fb03 f202 	mul.w	r2, r3, r2
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4423      	add	r3, r4
 80043f2:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	3b20      	subs	r3, #32
 80043f8:	2b07      	cmp	r3, #7
 80043fa:	d802      	bhi.n	8004402 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	e008      	b.n	8004414 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	3b10      	subs	r3, #16
 8004406:	2b07      	cmp	r3, #7
 8004408:	d802      	bhi.n	8004410 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800440a:	2302      	movs	r3, #2
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e001      	b.n	8004414 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8004410:	2301      	movs	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3b01      	subs	r3, #1
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	08d2      	lsrs	r2, r2, #3
 8004422:	fb03 f202 	mul.w	r2, r3, r2
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	4413      	add	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8004430:	2300      	movs	r3, #0
 8004432:	627b      	str	r3, [r7, #36]	@ 0x24
 8004434:	e018      	b.n	8004468 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8004436:	6a39      	ldr	r1, [r7, #32]
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fab3 	bl	80049a8 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8004442:	f7ff fcaf 	bl	8003da4 <BSP_LCD_GetXSize>
 8004446:	4603      	mov	r3, r0
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	6a3a      	ldr	r2, [r7, #32]
 800444c:	4413      	add	r3, r2
 800444e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	08db      	lsrs	r3, r3, #3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	425b      	negs	r3, r3
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	3301      	adds	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
 8004468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	d3e2      	bcc.n	8004436 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	372c      	adds	r7, #44	@ 0x2c
 8004476:	46bd      	mov	sp, r7
 8004478:	bd90      	pop	{r4, r7, pc}
 800447a:	bf00      	nop
 800447c:	20000b64 	.word	0x20000b64
 8004480:	20000a7c 	.word	0x20000a7c

08004484 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af02      	add	r7, sp, #8
 800448c:	4604      	mov	r4, r0
 800448e:	4608      	mov	r0, r1
 8004490:	4611      	mov	r1, r2
 8004492:	461a      	mov	r2, r3
 8004494:	4623      	mov	r3, r4
 8004496:	80fb      	strh	r3, [r7, #6]
 8004498:	4603      	mov	r3, r0
 800449a:	80bb      	strh	r3, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
 80044a0:	4613      	mov	r3, r2
 80044a2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80044a8:	4b30      	ldr	r3, [pc, #192]	@ (800456c <BSP_LCD_FillRect+0xe8>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	4930      	ldr	r1, [pc, #192]	@ (8004570 <BSP_LCD_FillRect+0xec>)
 80044ae:	4613      	mov	r3, r2
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fd0a 	bl	8003ed4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80044c0:	4b2a      	ldr	r3, [pc, #168]	@ (800456c <BSP_LCD_FillRect+0xe8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004574 <BSP_LCD_FillRect+0xf0>)
 80044c6:	2134      	movs	r1, #52	@ 0x34
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	4413      	add	r3, r2
 80044ce:	3348      	adds	r3, #72	@ 0x48
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d114      	bne.n	8004500 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80044d6:	4b25      	ldr	r3, [pc, #148]	@ (800456c <BSP_LCD_FillRect+0xe8>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a26      	ldr	r2, [pc, #152]	@ (8004574 <BSP_LCD_FillRect+0xf0>)
 80044dc:	2134      	movs	r1, #52	@ 0x34
 80044de:	fb01 f303 	mul.w	r3, r1, r3
 80044e2:	4413      	add	r3, r2
 80044e4:	335c      	adds	r3, #92	@ 0x5c
 80044e6:	681c      	ldr	r4, [r3, #0]
 80044e8:	f7ff fc5c 	bl	8003da4 <BSP_LCD_GetXSize>
 80044ec:	4602      	mov	r2, r0
 80044ee:	88bb      	ldrh	r3, [r7, #4]
 80044f0:	fb03 f202 	mul.w	r2, r3, r2
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	4413      	add	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4423      	add	r3, r4
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	e013      	b.n	8004528 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004500:	4b1a      	ldr	r3, [pc, #104]	@ (800456c <BSP_LCD_FillRect+0xe8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1b      	ldr	r2, [pc, #108]	@ (8004574 <BSP_LCD_FillRect+0xf0>)
 8004506:	2134      	movs	r1, #52	@ 0x34
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	335c      	adds	r3, #92	@ 0x5c
 8004510:	681c      	ldr	r4, [r3, #0]
 8004512:	f7ff fc47 	bl	8003da4 <BSP_LCD_GetXSize>
 8004516:	4602      	mov	r2, r0
 8004518:	88bb      	ldrh	r3, [r7, #4]
 800451a:	fb03 f202 	mul.w	r2, r3, r2
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	4413      	add	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4423      	add	r3, r4
 8004526:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004528:	4b10      	ldr	r3, [pc, #64]	@ (800456c <BSP_LCD_FillRect+0xe8>)
 800452a:	681c      	ldr	r4, [r3, #0]
 800452c:	68fd      	ldr	r5, [r7, #12]
 800452e:	887e      	ldrh	r6, [r7, #2]
 8004530:	f8b7 8000 	ldrh.w	r8, [r7]
 8004534:	f7ff fc36 	bl	8003da4 <BSP_LCD_GetXSize>
 8004538:	4602      	mov	r2, r0
 800453a:	887b      	ldrh	r3, [r7, #2]
 800453c:	1ad1      	subs	r1, r2, r3
 800453e:	4b0b      	ldr	r3, [pc, #44]	@ (800456c <BSP_LCD_FillRect+0xe8>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	480b      	ldr	r0, [pc, #44]	@ (8004570 <BSP_LCD_FillRect+0xec>)
 8004544:	4613      	mov	r3, r2
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4403      	add	r3, r0
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	9301      	str	r3, [sp, #4]
 8004552:	9100      	str	r1, [sp, #0]
 8004554:	4643      	mov	r3, r8
 8004556:	4632      	mov	r2, r6
 8004558:	4629      	mov	r1, r5
 800455a:	4620      	mov	r0, r4
 800455c:	f000 f9d8 	bl	8004910 <LL_FillBuffer>
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456a:	bf00      	nop
 800456c:	20000b64 	.word	0x20000b64
 8004570:	20000b68 	.word	0x20000b68
 8004574:	20000a7c 	.word	0x20000a7c

08004578 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <BSP_LCD_DisplayOn+0x30>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699a      	ldr	r2, [r3, #24]
 8004582:	4b09      	ldr	r3, [pc, #36]	@ (80045a8 <BSP_LCD_DisplayOn+0x30>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800458c:	2201      	movs	r2, #1
 800458e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004592:	4806      	ldr	r0, [pc, #24]	@ (80045ac <BSP_LCD_DisplayOn+0x34>)
 8004594:	f003 f814 	bl	80075c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004598:	2201      	movs	r2, #1
 800459a:	2108      	movs	r1, #8
 800459c:	4804      	ldr	r0, [pc, #16]	@ (80045b0 <BSP_LCD_DisplayOn+0x38>)
 800459e:	f003 f80f 	bl	80075c0 <HAL_GPIO_WritePin>
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000a7c 	.word	0x20000a7c
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40022800 	.word	0x40022800

080045b4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b090      	sub	sp, #64	@ 0x40
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80045be:	4b64      	ldr	r3, [pc, #400]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c2:	4a63      	ldr	r2, [pc, #396]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045ca:	4b61      	ldr	r3, [pc, #388]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80045d6:	4b5e      	ldr	r3, [pc, #376]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045da:	4a5d      	ldr	r2, [pc, #372]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045ee:	4b58      	ldr	r3, [pc, #352]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	4a57      	ldr	r2, [pc, #348]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045f4:	f043 0310 	orr.w	r3, r3, #16
 80045f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fa:	4b55      	ldr	r3, [pc, #340]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004606:	4b52      	ldr	r3, [pc, #328]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	4a51      	ldr	r2, [pc, #324]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 800460c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004610:	6313      	str	r3, [r2, #48]	@ 0x30
 8004612:	4b4f      	ldr	r3, [pc, #316]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800461e:	4b4c      	ldr	r3, [pc, #304]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004622:	4a4b      	ldr	r2, [pc, #300]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004628:	6313      	str	r3, [r2, #48]	@ 0x30
 800462a:	4b49      	ldr	r3, [pc, #292]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 800462c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004632:	61bb      	str	r3, [r7, #24]
 8004634:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004636:	4b46      	ldr	r3, [pc, #280]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463a:	4a45      	ldr	r2, [pc, #276]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 800463c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004640:	6313      	str	r3, [r2, #48]	@ 0x30
 8004642:	4b43      	ldr	r3, [pc, #268]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800464e:	4b40      	ldr	r3, [pc, #256]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	4a3f      	ldr	r2, [pc, #252]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004654:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004658:	6313      	str	r3, [r2, #48]	@ 0x30
 800465a:	4b3d      	ldr	r3, [pc, #244]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004666:	4b3a      	ldr	r3, [pc, #232]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466a:	4a39      	ldr	r2, [pc, #228]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 800466c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004670:	6313      	str	r3, [r2, #48]	@ 0x30
 8004672:	4b37      	ldr	r3, [pc, #220]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800467e:	4b34      	ldr	r3, [pc, #208]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	4a33      	ldr	r2, [pc, #204]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 8004684:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004688:	6313      	str	r3, [r2, #48]	@ 0x30
 800468a:	4b31      	ldr	r3, [pc, #196]	@ (8004750 <BSP_LCD_MspInit+0x19c>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004696:	2310      	movs	r3, #16
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800469a:	2302      	movs	r3, #2
 800469c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80046a2:	2302      	movs	r3, #2
 80046a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80046a6:	230e      	movs	r3, #14
 80046a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80046aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046ae:	4619      	mov	r1, r3
 80046b0:	4828      	ldr	r0, [pc, #160]	@ (8004754 <BSP_LCD_MspInit+0x1a0>)
 80046b2:	f002 fdc1 	bl	8007238 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80046b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046bc:	2302      	movs	r3, #2
 80046be:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80046c0:	2309      	movs	r3, #9
 80046c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80046c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046c8:	4619      	mov	r1, r3
 80046ca:	4823      	ldr	r0, [pc, #140]	@ (8004758 <BSP_LCD_MspInit+0x1a4>)
 80046cc:	f002 fdb4 	bl	8007238 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80046d0:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80046d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046d6:	2302      	movs	r3, #2
 80046d8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046da:	230e      	movs	r3, #14
 80046dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80046de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046e2:	4619      	mov	r1, r3
 80046e4:	481d      	ldr	r0, [pc, #116]	@ (800475c <BSP_LCD_MspInit+0x1a8>)
 80046e6:	f002 fda7 	bl	8007238 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80046ea:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80046ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046f0:	2302      	movs	r3, #2
 80046f2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046f4:	230e      	movs	r3, #14
 80046f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80046f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046fc:	4619      	mov	r1, r3
 80046fe:	4818      	ldr	r0, [pc, #96]	@ (8004760 <BSP_LCD_MspInit+0x1ac>)
 8004700:	f002 fd9a 	bl	8007238 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8004704:	23f7      	movs	r3, #247	@ 0xf7
 8004706:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004708:	2302      	movs	r3, #2
 800470a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800470c:	230e      	movs	r3, #14
 800470e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004710:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004714:	4619      	mov	r1, r3
 8004716:	4813      	ldr	r0, [pc, #76]	@ (8004764 <BSP_LCD_MspInit+0x1b0>)
 8004718:	f002 fd8e 	bl	8007238 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800471c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004722:	2301      	movs	r3, #1
 8004724:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8004726:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800472a:	4619      	mov	r1, r3
 800472c:	480b      	ldr	r0, [pc, #44]	@ (800475c <BSP_LCD_MspInit+0x1a8>)
 800472e:	f002 fd83 	bl	8007238 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8004732:	2308      	movs	r3, #8
 8004734:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004736:	2301      	movs	r3, #1
 8004738:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800473a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800473e:	4619      	mov	r1, r3
 8004740:	4808      	ldr	r0, [pc, #32]	@ (8004764 <BSP_LCD_MspInit+0x1b0>)
 8004742:	f002 fd79 	bl	8007238 <HAL_GPIO_Init>
}
 8004746:	bf00      	nop
 8004748:	3740      	adds	r7, #64	@ 0x40
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	40021000 	.word	0x40021000
 8004758:	40021800 	.word	0x40021800
 800475c:	40022000 	.word	0x40022000
 8004760:	40022400 	.word	0x40022400
 8004764:	40022800 	.word	0x40022800

08004768 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004772:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <BSP_LCD_ClockConfig+0x34>)
 8004774:	2208      	movs	r2, #8
 8004776:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004778:	4b08      	ldr	r3, [pc, #32]	@ (800479c <BSP_LCD_ClockConfig+0x34>)
 800477a:	22c0      	movs	r2, #192	@ 0xc0
 800477c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800477e:	4b07      	ldr	r3, [pc, #28]	@ (800479c <BSP_LCD_ClockConfig+0x34>)
 8004780:	2205      	movs	r2, #5
 8004782:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004784:	4b05      	ldr	r3, [pc, #20]	@ (800479c <BSP_LCD_ClockConfig+0x34>)
 8004786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800478a:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800478c:	4803      	ldr	r0, [pc, #12]	@ (800479c <BSP_LCD_ClockConfig+0x34>)
 800478e:	f004 fd6f 	bl	8009270 <HAL_RCCEx_PeriphCLKConfig>
}
 8004792:	bf00      	nop
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	20000b80 	.word	0x20000b80

080047a0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	603a      	str	r2, [r7, #0]
 80047aa:	80fb      	strh	r3, [r7, #6]
 80047ac:	460b      	mov	r3, r1
 80047ae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80047b8:	4b53      	ldr	r3, [pc, #332]	@ (8004908 <DrawChar+0x168>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4953      	ldr	r1, [pc, #332]	@ (800490c <DrawChar+0x16c>)
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	3308      	adds	r3, #8
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	88db      	ldrh	r3, [r3, #6]
 80047ce:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80047d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004908 <DrawChar+0x168>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	494d      	ldr	r1, [pc, #308]	@ (800490c <DrawChar+0x16c>)
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	3308      	adds	r3, #8
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	889b      	ldrh	r3, [r3, #4]
 80047e6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80047e8:	8a3b      	ldrh	r3, [r7, #16]
 80047ea:	3307      	adds	r3, #7
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	da00      	bge.n	80047f2 <DrawChar+0x52>
 80047f0:	3307      	adds	r3, #7
 80047f2:	10db      	asrs	r3, r3, #3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	8a3b      	ldrh	r3, [r7, #16]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	e076      	b.n	80048f6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004808:	8a3b      	ldrh	r3, [r7, #16]
 800480a:	3307      	adds	r3, #7
 800480c:	2b00      	cmp	r3, #0
 800480e:	da00      	bge.n	8004812 <DrawChar+0x72>
 8004810:	3307      	adds	r3, #7
 8004812:	10db      	asrs	r3, r3, #3
 8004814:	461a      	mov	r2, r3
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	4413      	add	r3, r2
 8004820:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004822:	8a3b      	ldrh	r3, [r7, #16]
 8004824:	3307      	adds	r3, #7
 8004826:	2b00      	cmp	r3, #0
 8004828:	da00      	bge.n	800482c <DrawChar+0x8c>
 800482a:	3307      	adds	r3, #7
 800482c:	10db      	asrs	r3, r3, #3
 800482e:	2b01      	cmp	r3, #1
 8004830:	d002      	beq.n	8004838 <DrawChar+0x98>
 8004832:	2b02      	cmp	r3, #2
 8004834:	d004      	beq.n	8004840 <DrawChar+0xa0>
 8004836:	e00c      	b.n	8004852 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	617b      	str	r3, [r7, #20]
      break;
 800483e:	e016      	b.n	800486e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	3201      	adds	r2, #1
 800484a:	7812      	ldrb	r2, [r2, #0]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
      break;
 8004850:	e00d      	b.n	800486e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	041a      	lsls	r2, r3, #16
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	3301      	adds	r3, #1
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	4313      	orrs	r3, r2
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	3202      	adds	r2, #2
 8004866:	7812      	ldrb	r2, [r2, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]
      break;
 800486c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e036      	b.n	80048e2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004874:	8a3a      	ldrh	r2, [r7, #16]
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	1ad2      	subs	r2, r2, r3
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	4413      	add	r3, r2
 800487e:	3b01      	subs	r3, #1
 8004880:	2201      	movs	r2, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	461a      	mov	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4013      	ands	r3, r2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d012      	beq.n	80048b6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	b29a      	uxth	r2, r3
 8004894:	88fb      	ldrh	r3, [r7, #6]
 8004896:	4413      	add	r3, r2
 8004898:	b298      	uxth	r0, r3
 800489a:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <DrawChar+0x168>)
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	491b      	ldr	r1, [pc, #108]	@ (800490c <DrawChar+0x16c>)
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	88bb      	ldrh	r3, [r7, #4]
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7ff fcee 	bl	8004290 <BSP_LCD_DrawPixel>
 80048b4:	e012      	b.n	80048dc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	4413      	add	r3, r2
 80048be:	b298      	uxth	r0, r3
 80048c0:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <DrawChar+0x168>)
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4911      	ldr	r1, [pc, #68]	@ (800490c <DrawChar+0x16c>)
 80048c6:	4613      	mov	r3, r2
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	3304      	adds	r3, #4
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	88bb      	ldrh	r3, [r7, #4]
 80048d6:	4619      	mov	r1, r3
 80048d8:	f7ff fcda 	bl	8004290 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	3301      	adds	r3, #1
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	8a3b      	ldrh	r3, [r7, #16]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d3c4      	bcc.n	8004874 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80048ea:	88bb      	ldrh	r3, [r7, #4]
 80048ec:	3301      	adds	r3, #1
 80048ee:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	3301      	adds	r3, #1
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	8a7b      	ldrh	r3, [r7, #18]
 80048f8:	69fa      	ldr	r2, [r7, #28]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d384      	bcc.n	8004808 <DrawChar+0x68>
  }
}
 80048fe:	bf00      	nop
 8004900:	bf00      	nop
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000b64 	.word	0x20000b64
 800490c:	20000b68 	.word	0x20000b68

08004910 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800491e:	4b1e      	ldr	r3, [pc, #120]	@ (8004998 <LL_FillBuffer+0x88>)
 8004920:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004924:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004926:	4b1d      	ldr	r3, [pc, #116]	@ (800499c <LL_FillBuffer+0x8c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1d      	ldr	r2, [pc, #116]	@ (80049a0 <LL_FillBuffer+0x90>)
 800492c:	2134      	movs	r1, #52	@ 0x34
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	3348      	adds	r3, #72	@ 0x48
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d103      	bne.n	8004944 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800493c:	4b16      	ldr	r3, [pc, #88]	@ (8004998 <LL_FillBuffer+0x88>)
 800493e:	2202      	movs	r2, #2
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	e002      	b.n	800494a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004944:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <LL_FillBuffer+0x88>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800494a:	4a13      	ldr	r2, [pc, #76]	@ (8004998 <LL_FillBuffer+0x88>)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004950:	4b11      	ldr	r3, [pc, #68]	@ (8004998 <LL_FillBuffer+0x88>)
 8004952:	4a14      	ldr	r2, [pc, #80]	@ (80049a4 <LL_FillBuffer+0x94>)
 8004954:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004956:	4810      	ldr	r0, [pc, #64]	@ (8004998 <LL_FillBuffer+0x88>)
 8004958:	f002 f8d2 	bl	8006b00 <HAL_DMA2D_Init>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d115      	bne.n	800498e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	480c      	ldr	r0, [pc, #48]	@ (8004998 <LL_FillBuffer+0x88>)
 8004966:	f002 fb39 	bl	8006fdc <HAL_DMA2D_ConfigLayer>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10e      	bne.n	800498e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69f9      	ldr	r1, [r7, #28]
 800497a:	4807      	ldr	r0, [pc, #28]	@ (8004998 <LL_FillBuffer+0x88>)
 800497c:	f002 f90a 	bl	8006b94 <HAL_DMA2D_Start>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004986:	210a      	movs	r1, #10
 8004988:	4803      	ldr	r0, [pc, #12]	@ (8004998 <LL_FillBuffer+0x88>)
 800498a:	f002 f92e 	bl	8006bea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000b24 	.word	0x20000b24
 800499c:	20000b64 	.word	0x20000b64
 80049a0:	20000a7c 	.word	0x20000a7c
 80049a4:	4002b000 	.word	0x4002b000

080049a8 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80049b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80049bc:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80049be:	4b1a      	ldr	r3, [pc, #104]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80049c4:	4b18      	ldr	r3, [pc, #96]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80049ca:	4b17      	ldr	r3, [pc, #92]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80049d0:	4b15      	ldr	r3, [pc, #84]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049d2:	22ff      	movs	r2, #255	@ 0xff
 80049d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80049d6:	4a14      	ldr	r2, [pc, #80]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049de:	2200      	movs	r2, #0
 80049e0:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80049e2:	4b11      	ldr	r3, [pc, #68]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049e4:	4a11      	ldr	r2, [pc, #68]	@ (8004a2c <LL_ConvertLineToARGB8888+0x84>)
 80049e6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80049e8:	480f      	ldr	r0, [pc, #60]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049ea:	f002 f889 	bl	8006b00 <HAL_DMA2D_Init>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d115      	bne.n	8004a20 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80049f4:	2101      	movs	r1, #1
 80049f6:	480c      	ldr	r0, [pc, #48]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 80049f8:	f002 faf0 	bl	8006fdc <HAL_DMA2D_ConfigLayer>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10e      	bne.n	8004a20 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	2301      	movs	r3, #1
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4806      	ldr	r0, [pc, #24]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 8004a0e:	f002 f8c1 	bl	8006b94 <HAL_DMA2D_Start>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004a18:	210a      	movs	r1, #10
 8004a1a:	4803      	ldr	r0, [pc, #12]	@ (8004a28 <LL_ConvertLineToARGB8888+0x80>)
 8004a1c:	f002 f8e5 	bl	8006bea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004a20:	bf00      	nop
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000b24 	.word	0x20000b24
 8004a2c:	4002b000 	.word	0x4002b000

08004a30 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004a34:	4b29      	ldr	r3, [pc, #164]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a36:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <BSP_SDRAM_Init+0xb0>)
 8004a38:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ae4 <BSP_SDRAM_Init+0xb4>)
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004a40:	4b28      	ldr	r3, [pc, #160]	@ (8004ae4 <BSP_SDRAM_Init+0xb4>)
 8004a42:	2207      	movs	r2, #7
 8004a44:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004a46:	4b27      	ldr	r3, [pc, #156]	@ (8004ae4 <BSP_SDRAM_Init+0xb4>)
 8004a48:	2204      	movs	r2, #4
 8004a4a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004a4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ae4 <BSP_SDRAM_Init+0xb4>)
 8004a4e:	2207      	movs	r2, #7
 8004a50:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004a52:	4b24      	ldr	r3, [pc, #144]	@ (8004ae4 <BSP_SDRAM_Init+0xb4>)
 8004a54:	2202      	movs	r2, #2
 8004a56:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004a58:	4b22      	ldr	r3, [pc, #136]	@ (8004ae4 <BSP_SDRAM_Init+0xb4>)
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004a5e:	4b21      	ldr	r3, [pc, #132]	@ (8004ae4 <BSP_SDRAM_Init+0xb4>)
 8004a60:	2202      	movs	r2, #2
 8004a62:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004a64:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004a70:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a72:	2204      	movs	r2, #4
 8004a74:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004a76:	4b19      	ldr	r3, [pc, #100]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a78:	2210      	movs	r2, #16
 8004a7a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004a7c:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a7e:	2240      	movs	r2, #64	@ 0x40
 8004a80:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004a82:	4b16      	ldr	r3, [pc, #88]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a88:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004a8a:	4b14      	ldr	r3, [pc, #80]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004a90:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a96:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004a9a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a9e:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	480c      	ldr	r0, [pc, #48]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004aaa:	f000 f87f 	bl	8004bac <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004aae:	490d      	ldr	r1, [pc, #52]	@ (8004ae4 <BSP_SDRAM_Init+0xb4>)
 8004ab0:	480a      	ldr	r0, [pc, #40]	@ (8004adc <BSP_SDRAM_Init+0xac>)
 8004ab2:	f006 f961 	bl	800ad78 <HAL_SDRAM_Init>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <BSP_SDRAM_Init+0xb8>)
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e002      	b.n	8004aca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004ac4:	4b08      	ldr	r3, [pc, #32]	@ (8004ae8 <BSP_SDRAM_Init+0xb8>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004aca:	f240 6003 	movw	r0, #1539	@ 0x603
 8004ace:	f000 f80d 	bl	8004aec <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004ad2:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <BSP_SDRAM_Init+0xb8>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000c04 	.word	0x20000c04
 8004ae0:	a0000140 	.word	0xa0000140
 8004ae4:	20000c38 	.word	0x20000c38
 8004ae8:	20000044 	.word	0x20000044

08004aec <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004af8:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004afe:	4b29      	ldr	r3, [pc, #164]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b00:	2210      	movs	r2, #16
 8004b02:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b04:	4b27      	ldr	r3, [pc, #156]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b0a:	4b26      	ldr	r3, [pc, #152]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b14:	4923      	ldr	r1, [pc, #140]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b16:	4824      	ldr	r0, [pc, #144]	@ (8004ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b18:	f006 f962 	bl	800ade0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	f000 ff0d 	bl	800593c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004b22:	4b20      	ldr	r3, [pc, #128]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b24:	2202      	movs	r2, #2
 8004b26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b28:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004b3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b3e:	4919      	ldr	r1, [pc, #100]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b40:	4819      	ldr	r0, [pc, #100]	@ (8004ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b42:	f006 f94d 	bl	800ade0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004b46:	4b17      	ldr	r3, [pc, #92]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b48:	2203      	movs	r2, #3
 8004b4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b4e:	2210      	movs	r2, #16
 8004b50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004b52:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b54:	2208      	movs	r2, #8
 8004b56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b58:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b62:	4910      	ldr	r1, [pc, #64]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b64:	4810      	ldr	r0, [pc, #64]	@ (8004ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b66:	f006 f93b 	bl	800ade0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004b6a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004b6e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004b70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b72:	2204      	movs	r2, #4
 8004b74:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b78:	2210      	movs	r2, #16
 8004b7a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	4a07      	ldr	r2, [pc, #28]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b86:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b8c:	4905      	ldr	r1, [pc, #20]	@ (8004ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b8e:	4806      	ldr	r0, [pc, #24]	@ (8004ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b90:	f006 f926 	bl	800ade0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4804      	ldr	r0, [pc, #16]	@ (8004ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b98:	f006 f957 	bl	800ae4a <HAL_SDRAM_ProgramRefreshRate>
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000c54 	.word	0x20000c54
 8004ba8:	20000c04 	.word	0x20000c04

08004bac <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b090      	sub	sp, #64	@ 0x40
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004bb6:	4b70      	ldr	r3, [pc, #448]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bba:	4a6f      	ldr	r2, [pc, #444]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6393      	str	r3, [r2, #56]	@ 0x38
 8004bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004bce:	4b6a      	ldr	r3, [pc, #424]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd2:	4a69      	ldr	r2, [pc, #420]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004bd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bda:	4b67      	ldr	r3, [pc, #412]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004be6:	4b64      	ldr	r3, [pc, #400]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bea:	4a63      	ldr	r2, [pc, #396]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004bec:	f043 0304 	orr.w	r3, r3, #4
 8004bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bf2:	4b61      	ldr	r3, [pc, #388]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c02:	4a5d      	ldr	r2, [pc, #372]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c04:	f043 0308 	orr.w	r3, r3, #8
 8004c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c16:	4b58      	ldr	r3, [pc, #352]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1a:	4a57      	ldr	r2, [pc, #348]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c1c:	f043 0310 	orr.w	r3, r3, #16
 8004c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c22:	4b55      	ldr	r3, [pc, #340]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c2e:	4b52      	ldr	r3, [pc, #328]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	4a51      	ldr	r2, [pc, #324]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c34:	f043 0320 	orr.w	r3, r3, #32
 8004c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c46:	4b4c      	ldr	r3, [pc, #304]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	4a4b      	ldr	r2, [pc, #300]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c52:	4b49      	ldr	r3, [pc, #292]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5a:	613b      	str	r3, [r7, #16]
 8004c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c5e:	4b46      	ldr	r3, [pc, #280]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	4a45      	ldr	r2, [pc, #276]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c6a:	4b43      	ldr	r3, [pc, #268]	@ (8004d78 <BSP_SDRAM_MspInit+0x1cc>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c76:	2302      	movs	r3, #2
 8004c78:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004c82:	230c      	movs	r3, #12
 8004c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004c86:	2308      	movs	r3, #8
 8004c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004c8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c8e:	4619      	mov	r1, r3
 8004c90:	483a      	ldr	r0, [pc, #232]	@ (8004d7c <BSP_SDRAM_MspInit+0x1d0>)
 8004c92:	f002 fad1 	bl	8007238 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004c96:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004c9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4837      	ldr	r0, [pc, #220]	@ (8004d80 <BSP_SDRAM_MspInit+0x1d4>)
 8004ca4:	f002 fac8 	bl	8007238 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004ca8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004cae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4833      	ldr	r0, [pc, #204]	@ (8004d84 <BSP_SDRAM_MspInit+0x1d8>)
 8004cb6:	f002 fabf 	bl	8007238 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004cba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004cc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4830      	ldr	r0, [pc, #192]	@ (8004d88 <BSP_SDRAM_MspInit+0x1dc>)
 8004cc8:	f002 fab6 	bl	8007238 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004ccc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004cd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	482c      	ldr	r0, [pc, #176]	@ (8004d8c <BSP_SDRAM_MspInit+0x1e0>)
 8004cda:	f002 faad 	bl	8007238 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004cde:	2328      	movs	r3, #40	@ 0x28
 8004ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4829      	ldr	r0, [pc, #164]	@ (8004d90 <BSP_SDRAM_MspInit+0x1e4>)
 8004cea:	f002 faa5 	bl	8007238 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004cee:	4b29      	ldr	r3, [pc, #164]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004cf4:	4b27      	ldr	r3, [pc, #156]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004cf6:	2280      	movs	r2, #128	@ 0x80
 8004cf8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004cfa:	4b26      	ldr	r3, [pc, #152]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004cfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d00:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004d02:	4b24      	ldr	r3, [pc, #144]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d08:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004d10:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004d12:	4b20      	ldr	r3, [pc, #128]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d14:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004d18:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004d20:	4b1c      	ldr	r3, [pc, #112]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d22:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d26:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004d28:	4b1a      	ldr	r3, [pc, #104]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004d2e:	4b19      	ldr	r3, [pc, #100]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d30:	2203      	movs	r2, #3
 8004d32:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004d34:	4b17      	ldr	r3, [pc, #92]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004d3a:	4b16      	ldr	r3, [pc, #88]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004d40:	4b14      	ldr	r3, [pc, #80]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d42:	4a15      	ldr	r2, [pc, #84]	@ (8004d98 <BSP_SDRAM_MspInit+0x1ec>)
 8004d44:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a12      	ldr	r2, [pc, #72]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d4c:	4a11      	ldr	r2, [pc, #68]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004d52:	4810      	ldr	r0, [pc, #64]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d54:	f001 fba0 	bl	8006498 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004d58:	480e      	ldr	r0, [pc, #56]	@ (8004d94 <BSP_SDRAM_MspInit+0x1e8>)
 8004d5a:	f001 faef 	bl	800633c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004d5e:	2200      	movs	r2, #0
 8004d60:	210f      	movs	r1, #15
 8004d62:	2038      	movs	r0, #56	@ 0x38
 8004d64:	f001 fac0 	bl	80062e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004d68:	2038      	movs	r0, #56	@ 0x38
 8004d6a:	f001 fad9 	bl	8006320 <HAL_NVIC_EnableIRQ>
}
 8004d6e:	bf00      	nop
 8004d70:	3740      	adds	r7, #64	@ 0x40
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	40020800 	.word	0x40020800
 8004d80:	40020c00 	.word	0x40020c00
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40021400 	.word	0x40021400
 8004d8c:	40021800 	.word	0x40021800
 8004d90:	40021c00 	.word	0x40021c00
 8004d94:	20000c64 	.word	0x20000c64
 8004d98:	40026410 	.word	0x40026410

08004d9c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	460a      	mov	r2, r1
 8004da6:	80fb      	strh	r3, [r7, #6]
 8004da8:	4613      	mov	r3, r2
 8004daa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004db0:	4a14      	ldr	r2, [pc, #80]	@ (8004e04 <BSP_TS_Init+0x68>)
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004db6:	4a14      	ldr	r2, [pc, #80]	@ (8004e08 <BSP_TS_Init+0x6c>)
 8004db8:	88bb      	ldrh	r3, [r7, #4]
 8004dba:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004dbc:	4b13      	ldr	r3, [pc, #76]	@ (8004e0c <BSP_TS_Init+0x70>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2070      	movs	r0, #112	@ 0x70
 8004dc2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004dc4:	4b11      	ldr	r3, [pc, #68]	@ (8004e0c <BSP_TS_Init+0x70>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2070      	movs	r0, #112	@ 0x70
 8004dca:	4798      	blx	r3
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b51      	cmp	r3, #81	@ 0x51
 8004dd0:	d110      	bne.n	8004df4 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e10 <BSP_TS_Init+0x74>)
 8004dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8004e0c <BSP_TS_Init+0x70>)
 8004dd6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e14 <BSP_TS_Init+0x78>)
 8004dda:	2270      	movs	r2, #112	@ 0x70
 8004ddc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004dde:	4b0e      	ldr	r3, [pc, #56]	@ (8004e18 <BSP_TS_Init+0x7c>)
 8004de0:	2208      	movs	r2, #8
 8004de2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004de4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <BSP_TS_Init+0x74>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4a0a      	ldr	r2, [pc, #40]	@ (8004e14 <BSP_TS_Init+0x78>)
 8004dec:	7812      	ldrb	r2, [r2, #0]
 8004dee:	4610      	mov	r0, r2
 8004df0:	4798      	blx	r3
 8004df2:	e001      	b.n	8004df8 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004df4:	2303      	movs	r3, #3
 8004df6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000cc8 	.word	0x20000cc8
 8004e08:	20000cca 	.word	0x20000cca
 8004e0c:	2000000c 	.word	0x2000000c
 8004e10:	20000cc4 	.word	0x20000cc4
 8004e14:	20000ccd 	.word	0x20000ccd
 8004e18:	20000ccc 	.word	0x20000ccc

08004e1c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004e1c:	b590      	push	{r4, r7, lr}
 8004e1e:	b097      	sub	sp, #92	@ 0x5c
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004e36:	4bb8      	ldr	r3, [pc, #736]	@ (8005118 <BSP_TS_GetState+0x2fc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	4ab7      	ldr	r2, [pc, #732]	@ (800511c <BSP_TS_GetState+0x300>)
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	4610      	mov	r0, r2
 8004e42:	4798      	blx	r3
 8004e44:	4603      	mov	r3, r0
 8004e46:	461a      	mov	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8198 	beq.w	8005186 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004e56:	2300      	movs	r3, #0
 8004e58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e5a:	e187      	b.n	800516c <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004e5c:	4bae      	ldr	r3, [pc, #696]	@ (8005118 <BSP_TS_GetState+0x2fc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	4aae      	ldr	r2, [pc, #696]	@ (800511c <BSP_TS_GetState+0x300>)
 8004e64:	7812      	ldrb	r2, [r2, #0]
 8004e66:	4614      	mov	r4, r2
 8004e68:	f107 0120 	add.w	r1, r7, #32
 8004e6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e6e:	0052      	lsls	r2, r2, #1
 8004e70:	1888      	adds	r0, r1, r2
 8004e72:	f107 0114 	add.w	r1, r7, #20
 8004e76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e78:	0052      	lsls	r2, r2, #1
 8004e7a:	440a      	add	r2, r1
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4620      	mov	r0, r4
 8004e80:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004e82:	4ba7      	ldr	r3, [pc, #668]	@ (8005120 <BSP_TS_GetState+0x304>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d117      	bne.n	8004eba <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	3350      	adds	r3, #80	@ 0x50
 8004e90:	443b      	add	r3, r7
 8004e92:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	3350      	adds	r3, #80	@ 0x50
 8004e9c:	443b      	add	r3, r7
 8004e9e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	3350      	adds	r3, #80	@ 0x50
 8004ea8:	443b      	add	r3, r7
 8004eaa:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	3350      	adds	r3, #80	@ 0x50
 8004eb4:	443b      	add	r3, r7
 8004eb6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004eba:	4b99      	ldr	r3, [pc, #612]	@ (8005120 <BSP_TS_GetState+0x304>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	3350      	adds	r3, #80	@ 0x50
 8004ecc:	443b      	add	r3, r7
 8004ece:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004ed2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	3350      	adds	r3, #80	@ 0x50
 8004ede:	443b      	add	r3, r7
 8004ee0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8005120 <BSP_TS_GetState+0x304>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	3350      	adds	r3, #80	@ 0x50
 8004ef6:	443b      	add	r3, r7
 8004ef8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004efc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	3350      	adds	r3, #80	@ 0x50
 8004f08:	443b      	add	r3, r7
 8004f0a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004f0e:	4b84      	ldr	r3, [pc, #528]	@ (8005120 <BSP_TS_GetState+0x304>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d017      	beq.n	8004f4a <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004f1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	3350      	adds	r3, #80	@ 0x50
 8004f20:	443b      	add	r3, r7
 8004f22:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004f26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	3350      	adds	r3, #80	@ 0x50
 8004f2c:	443b      	add	r3, r7
 8004f2e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	3350      	adds	r3, #80	@ 0x50
 8004f38:	443b      	add	r3, r7
 8004f3a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	3350      	adds	r3, #80	@ 0x50
 8004f44:	443b      	add	r3, r7
 8004f46:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	3350      	adds	r3, #80	@ 0x50
 8004f50:	443b      	add	r3, r7
 8004f52:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f56:	4619      	mov	r1, r3
 8004f58:	4a72      	ldr	r2, [pc, #456]	@ (8005124 <BSP_TS_GetState+0x308>)
 8004f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f60:	4299      	cmp	r1, r3
 8004f62:	d90d      	bls.n	8004f80 <BSP_TS_GetState+0x164>
 8004f64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	3350      	adds	r3, #80	@ 0x50
 8004f6a:	443b      	add	r3, r7
 8004f6c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004f70:	496c      	ldr	r1, [pc, #432]	@ (8005124 <BSP_TS_GetState+0x308>)
 8004f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	e00c      	b.n	8004f9a <BSP_TS_GetState+0x17e>
 8004f80:	4a68      	ldr	r2, [pc, #416]	@ (8005124 <BSP_TS_GetState+0x308>)
 8004f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	3350      	adds	r3, #80	@ 0x50
 8004f90:	443b      	add	r3, r7
 8004f92:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	3350      	adds	r3, #80	@ 0x50
 8004fa4:	443b      	add	r3, r7
 8004fa6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004faa:	4619      	mov	r1, r3
 8004fac:	4a5e      	ldr	r2, [pc, #376]	@ (8005128 <BSP_TS_GetState+0x30c>)
 8004fae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb4:	4299      	cmp	r1, r3
 8004fb6:	d90d      	bls.n	8004fd4 <BSP_TS_GetState+0x1b8>
 8004fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	3350      	adds	r3, #80	@ 0x50
 8004fbe:	443b      	add	r3, r7
 8004fc0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004fc4:	4958      	ldr	r1, [pc, #352]	@ (8005128 <BSP_TS_GetState+0x30c>)
 8004fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	e00c      	b.n	8004fee <BSP_TS_GetState+0x1d2>
 8004fd4:	4a54      	ldr	r2, [pc, #336]	@ (8005128 <BSP_TS_GetState+0x30c>)
 8004fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	3350      	adds	r3, #80	@ 0x50
 8004fe4:	443b      	add	r3, r7
 8004fe6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8004ff2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004ff6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004ffa:	4413      	add	r3, r2
 8004ffc:	2b05      	cmp	r3, #5
 8004ffe:	dd15      	ble.n	800502c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8005000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	3350      	adds	r3, #80	@ 0x50
 8005006:	443b      	add	r3, r7
 8005008:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800500c:	4619      	mov	r1, r3
 800500e:	4a45      	ldr	r2, [pc, #276]	@ (8005124 <BSP_TS_GetState+0x308>)
 8005010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005012:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8005016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	3350      	adds	r3, #80	@ 0x50
 800501c:	443b      	add	r3, r7
 800501e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8005022:	4619      	mov	r1, r3
 8005024:	4a40      	ldr	r2, [pc, #256]	@ (8005128 <BSP_TS_GetState+0x30c>)
 8005026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005028:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800502c:	4b3b      	ldr	r3, [pc, #236]	@ (800511c <BSP_TS_GetState+0x300>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b70      	cmp	r3, #112	@ 0x70
 8005032:	d119      	bne.n	8005068 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8005034:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	3350      	adds	r3, #80	@ 0x50
 800503a:	443b      	add	r3, r7
 800503c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	4413      	add	r3, r2
 8005048:	460a      	mov	r2, r1
 800504a:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800504c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	3350      	adds	r3, #80	@ 0x50
 8005052:	443b      	add	r3, r7
 8005054:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800505c:	3304      	adds	r3, #4
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	460a      	mov	r2, r1
 8005064:	809a      	strh	r2, [r3, #4]
 8005066:	e022      	b.n	80050ae <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005068:	4b30      	ldr	r3, [pc, #192]	@ (800512c <BSP_TS_GetState+0x310>)
 800506a:	881b      	ldrh	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	4a2d      	ldr	r2, [pc, #180]	@ (8005124 <BSP_TS_GetState+0x308>)
 8005070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005076:	fb01 f303 	mul.w	r3, r1, r3
 800507a:	0b1b      	lsrs	r3, r3, #12
 800507c:	b299      	uxth	r1, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	460a      	mov	r2, r1
 8005088:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800508a:	4b29      	ldr	r3, [pc, #164]	@ (8005130 <BSP_TS_GetState+0x314>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	4619      	mov	r1, r3
 8005090:	4a25      	ldr	r2, [pc, #148]	@ (8005128 <BSP_TS_GetState+0x30c>)
 8005092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	0b1b      	lsrs	r3, r3, #12
 800509e:	b299      	uxth	r1, r3
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050a4:	3304      	adds	r3, #4
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	460a      	mov	r2, r1
 80050ac:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80050ae:	4b1b      	ldr	r3, [pc, #108]	@ (800511c <BSP_TS_GetState+0x300>)
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f107 010c 	add.w	r1, r7, #12
 80050b8:	f107 0210 	add.w	r2, r7, #16
 80050bc:	f107 0308 	add.w	r3, r7, #8
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	460b      	mov	r3, r1
 80050c4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80050c6:	f7fd fb5d 	bl	8002784 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	b2d9      	uxtb	r1, r3
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050d2:	4413      	add	r3, r2
 80050d4:	3316      	adds	r3, #22
 80050d6:	460a      	mov	r2, r1
 80050d8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	b2d9      	uxtb	r1, r3
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e2:	4413      	add	r3, r2
 80050e4:	3320      	adds	r3, #32
 80050e6:	460a      	mov	r2, r1
 80050e8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d836      	bhi.n	800515e <BSP_TS_GetState+0x342>
 80050f0:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <BSP_TS_GetState+0x2dc>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	08005109 	.word	0x08005109
 80050fc:	08005135 	.word	0x08005135
 8005100:	08005143 	.word	0x08005143
 8005104:	08005151 	.word	0x08005151
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800510c:	4413      	add	r3, r2
 800510e:	331b      	adds	r3, #27
 8005110:	2201      	movs	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
          break;
 8005114:	e027      	b.n	8005166 <BSP_TS_GetState+0x34a>
 8005116:	bf00      	nop
 8005118:	20000cc4 	.word	0x20000cc4
 800511c:	20000ccd 	.word	0x20000ccd
 8005120:	20000ccc 	.word	0x20000ccc
 8005124:	20000cd0 	.word	0x20000cd0
 8005128:	20000ce4 	.word	0x20000ce4
 800512c:	20000cc8 	.word	0x20000cc8
 8005130:	20000cca 	.word	0x20000cca
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005138:	4413      	add	r3, r2
 800513a:	331b      	adds	r3, #27
 800513c:	2202      	movs	r2, #2
 800513e:	701a      	strb	r2, [r3, #0]
          break;
 8005140:	e011      	b.n	8005166 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005146:	4413      	add	r3, r2
 8005148:	331b      	adds	r3, #27
 800514a:	2203      	movs	r2, #3
 800514c:	701a      	strb	r2, [r3, #0]
          break;
 800514e:	e00a      	b.n	8005166 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005154:	4413      	add	r3, r2
 8005156:	331b      	adds	r3, #27
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
          break;
 800515c:	e003      	b.n	8005166 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8005164:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005168:	3301      	adds	r3, #1
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005174:	4293      	cmp	r3, r2
 8005176:	f4ff ae71 	bcc.w	8004e5c <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f80a 	bl	8005194 <BSP_TS_Get_GestureId>
 8005180:	4603      	mov	r3, r0
 8005182:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005186:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800518a:	4618      	mov	r0, r3
 800518c:	3754      	adds	r7, #84	@ 0x54
 800518e:	46bd      	mov	sp, r7
 8005190:	bd90      	pop	{r4, r7, pc}
 8005192:	bf00      	nop

08005194 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800519c:	2300      	movs	r3, #0
 800519e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80051a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005294 <BSP_TS_Get_GestureId+0x100>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fd face 	bl	8002752 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2b49      	cmp	r3, #73	@ 0x49
 80051ba:	d05e      	beq.n	800527a <BSP_TS_Get_GestureId+0xe6>
 80051bc:	2b49      	cmp	r3, #73	@ 0x49
 80051be:	d860      	bhi.n	8005282 <BSP_TS_Get_GestureId+0xee>
 80051c0:	2b1c      	cmp	r3, #28
 80051c2:	d83f      	bhi.n	8005244 <BSP_TS_Get_GestureId+0xb0>
 80051c4:	2b1c      	cmp	r3, #28
 80051c6:	d85c      	bhi.n	8005282 <BSP_TS_Get_GestureId+0xee>
 80051c8:	a201      	add	r2, pc, #4	@ (adr r2, 80051d0 <BSP_TS_Get_GestureId+0x3c>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	0800524b 	.word	0x0800524b
 80051d4:	08005283 	.word	0x08005283
 80051d8:	08005283 	.word	0x08005283
 80051dc:	08005283 	.word	0x08005283
 80051e0:	08005283 	.word	0x08005283
 80051e4:	08005283 	.word	0x08005283
 80051e8:	08005283 	.word	0x08005283
 80051ec:	08005283 	.word	0x08005283
 80051f0:	08005283 	.word	0x08005283
 80051f4:	08005283 	.word	0x08005283
 80051f8:	08005283 	.word	0x08005283
 80051fc:	08005283 	.word	0x08005283
 8005200:	08005283 	.word	0x08005283
 8005204:	08005283 	.word	0x08005283
 8005208:	08005283 	.word	0x08005283
 800520c:	08005283 	.word	0x08005283
 8005210:	08005253 	.word	0x08005253
 8005214:	08005283 	.word	0x08005283
 8005218:	08005283 	.word	0x08005283
 800521c:	08005283 	.word	0x08005283
 8005220:	0800525b 	.word	0x0800525b
 8005224:	08005283 	.word	0x08005283
 8005228:	08005283 	.word	0x08005283
 800522c:	08005283 	.word	0x08005283
 8005230:	08005263 	.word	0x08005263
 8005234:	08005283 	.word	0x08005283
 8005238:	08005283 	.word	0x08005283
 800523c:	08005283 	.word	0x08005283
 8005240:	0800526b 	.word	0x0800526b
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	d014      	beq.n	8005272 <BSP_TS_Get_GestureId+0xde>
 8005248:	e01b      	b.n	8005282 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005250:	e01a      	b.n	8005288 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005258:	e016      	b.n	8005288 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005260:	e012      	b.n	8005288 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2203      	movs	r2, #3
 8005266:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005268:	e00e      	b.n	8005288 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2204      	movs	r2, #4
 800526e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005270:	e00a      	b.n	8005288 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2205      	movs	r2, #5
 8005276:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005278:	e006      	b.n	8005288 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2206      	movs	r2, #6
 800527e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005280:	e002      	b.n	8005288 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
      break;
 8005286:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005288:	7bfb      	ldrb	r3, [r7, #15]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000ccd 	.word	0x20000ccd

08005298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800529e:	4b11      	ldr	r3, [pc, #68]	@ (80052e4 <HAL_MspInit+0x4c>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a2:	4a10      	ldr	r2, [pc, #64]	@ (80052e4 <HAL_MspInit+0x4c>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80052aa:	4b0e      	ldr	r3, [pc, #56]	@ (80052e4 <HAL_MspInit+0x4c>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052b6:	4b0b      	ldr	r3, [pc, #44]	@ (80052e4 <HAL_MspInit+0x4c>)
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	4a0a      	ldr	r2, [pc, #40]	@ (80052e4 <HAL_MspInit+0x4c>)
 80052bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80052c2:	4b08      	ldr	r3, [pc, #32]	@ (80052e4 <HAL_MspInit+0x4c>)
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80052ce:	2200      	movs	r2, #0
 80052d0:	210f      	movs	r1, #15
 80052d2:	f06f 0001 	mvn.w	r0, #1
 80052d6:	f001 f807 	bl	80062e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800

080052e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	@ 0x38
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80052f8:	4b33      	ldr	r3, [pc, #204]	@ (80053c8 <HAL_InitTick+0xe0>)
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	4a32      	ldr	r2, [pc, #200]	@ (80053c8 <HAL_InitTick+0xe0>)
 80052fe:	f043 0310 	orr.w	r3, r3, #16
 8005302:	6413      	str	r3, [r2, #64]	@ 0x40
 8005304:	4b30      	ldr	r3, [pc, #192]	@ (80053c8 <HAL_InitTick+0xe0>)
 8005306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005310:	f107 0210 	add.w	r2, r7, #16
 8005314:	f107 0314 	add.w	r3, r7, #20
 8005318:	4611      	mov	r1, r2
 800531a:	4618      	mov	r0, r3
 800531c:	f003 ff76 	bl	800920c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d103      	bne.n	8005332 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800532a:	f003 ff47 	bl	80091bc <HAL_RCC_GetPCLK1Freq>
 800532e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005330:	e004      	b.n	800533c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005332:	f003 ff43 	bl	80091bc <HAL_RCC_GetPCLK1Freq>
 8005336:	4603      	mov	r3, r0
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800533c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533e:	4a23      	ldr	r2, [pc, #140]	@ (80053cc <HAL_InitTick+0xe4>)
 8005340:	fba2 2303 	umull	r2, r3, r2, r3
 8005344:	0c9b      	lsrs	r3, r3, #18
 8005346:	3b01      	subs	r3, #1
 8005348:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800534a:	4b21      	ldr	r3, [pc, #132]	@ (80053d0 <HAL_InitTick+0xe8>)
 800534c:	4a21      	ldr	r2, [pc, #132]	@ (80053d4 <HAL_InitTick+0xec>)
 800534e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005350:	4b1f      	ldr	r3, [pc, #124]	@ (80053d0 <HAL_InitTick+0xe8>)
 8005352:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005356:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005358:	4a1d      	ldr	r2, [pc, #116]	@ (80053d0 <HAL_InitTick+0xe8>)
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800535e:	4b1c      	ldr	r3, [pc, #112]	@ (80053d0 <HAL_InitTick+0xe8>)
 8005360:	2200      	movs	r2, #0
 8005362:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005364:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <HAL_InitTick+0xe8>)
 8005366:	2200      	movs	r2, #0
 8005368:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800536a:	4b19      	ldr	r3, [pc, #100]	@ (80053d0 <HAL_InitTick+0xe8>)
 800536c:	2200      	movs	r2, #0
 800536e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005370:	4817      	ldr	r0, [pc, #92]	@ (80053d0 <HAL_InitTick+0xe8>)
 8005372:	f005 fd92 	bl	800ae9a <HAL_TIM_Base_Init>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800537c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11b      	bne.n	80053bc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005384:	4812      	ldr	r0, [pc, #72]	@ (80053d0 <HAL_InitTick+0xe8>)
 8005386:	f005 fddf 	bl	800af48 <HAL_TIM_Base_Start_IT>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005390:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005394:	2b00      	cmp	r3, #0
 8005396:	d111      	bne.n	80053bc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005398:	2036      	movs	r0, #54	@ 0x36
 800539a:	f000 ffc1 	bl	8006320 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d808      	bhi.n	80053b6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80053a4:	2200      	movs	r2, #0
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	2036      	movs	r0, #54	@ 0x36
 80053aa:	f000 ff9d 	bl	80062e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053ae:	4a0a      	ldr	r2, [pc, #40]	@ (80053d8 <HAL_InitTick+0xf0>)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	e002      	b.n	80053bc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80053bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3738      	adds	r7, #56	@ 0x38
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	40023800 	.word	0x40023800
 80053cc:	431bde83 	.word	0x431bde83
 80053d0:	20000cf8 	.word	0x20000cf8
 80053d4:	40001000 	.word	0x40001000
 80053d8:	2000004c 	.word	0x2000004c

080053dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053e0:	bf00      	nop
 80053e2:	e7fd      	b.n	80053e0 <NMI_Handler+0x4>

080053e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <HardFault_Handler+0x4>

080053ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <MemManage_Handler+0x4>

080053f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053f8:	bf00      	nop
 80053fa:	e7fd      	b.n	80053f8 <BusFault_Handler+0x4>

080053fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <UsageFault_Handler+0x4>

08005404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005408:	bf00      	nop
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005418:	4802      	ldr	r0, [pc, #8]	@ (8005424 <TIM6_DAC_IRQHandler+0x10>)
 800541a:	f005 fe0d 	bl	800b038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000cf8 	.word	0x20000cf8

08005428 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800542c:	4802      	ldr	r0, [pc, #8]	@ (8005438 <DMA2_Stream3_IRQHandler+0x10>)
 800542e:	f001 f8f1 	bl	8006614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000968 	.word	0x20000968

0800543c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8005440:	4802      	ldr	r0, [pc, #8]	@ (800544c <DMA2_Stream4_IRQHandler+0x10>)
 8005442:	f001 f8e7 	bl	8006614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000820 	.word	0x20000820

08005450 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005454:	4802      	ldr	r0, [pc, #8]	@ (8005460 <DMA2_Stream6_IRQHandler+0x10>)
 8005456:	f001 f8dd 	bl	8006614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	200009c8 	.word	0x200009c8

08005464 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8005468:	4802      	ldr	r0, [pc, #8]	@ (8005474 <DMA2_Stream7_IRQHandler+0x10>)
 800546a:	f001 f8d3 	bl	8006614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800546e:	bf00      	nop
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000880 	.word	0x20000880

08005478 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800547c:	4802      	ldr	r0, [pc, #8]	@ (8005488 <LTDC_IRQHandler+0x10>)
 800547e:	f002 ff33 	bl	80082e8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005482:	bf00      	nop
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000660 	.word	0x20000660

0800548c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005490:	4802      	ldr	r0, [pc, #8]	@ (800549c <DMA2D_IRQHandler+0x10>)
 8005492:	f001 fc93 	bl	8006dbc <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000160 	.word	0x20000160

080054a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	return 1;
 80054a4:	2301      	movs	r3, #1
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <_kill>:

int _kill(int pid, int sig)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80054ba:	f00b fe1f 	bl	80110fc <__errno>
 80054be:	4603      	mov	r3, r0
 80054c0:	2216      	movs	r2, #22
 80054c2:	601a      	str	r2, [r3, #0]
	return -1;
 80054c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <_exit>:

void _exit (int status)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80054d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ffe7 	bl	80054b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <_exit+0x12>

080054e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b086      	sub	sp, #24
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e00a      	b.n	800550e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054f8:	f3af 8000 	nop.w
 80054fc:	4601      	mov	r1, r0
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	1c5a      	adds	r2, r3, #1
 8005502:	60ba      	str	r2, [r7, #8]
 8005504:	b2ca      	uxtb	r2, r1
 8005506:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	3301      	adds	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	dbf0      	blt.n	80054f8 <_read+0x12>
	}

return len;
 8005516:	687b      	ldr	r3, [r7, #4]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e009      	b.n	8005546 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	60ba      	str	r2, [r7, #8]
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	3301      	adds	r3, #1
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	429a      	cmp	r2, r3
 800554c:	dbf1      	blt.n	8005532 <_write+0x12>
	}
	return len;
 800554e:	687b      	ldr	r3, [r7, #4]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <_close>:

int _close(int file)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	return -1;
 8005560:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005580:	605a      	str	r2, [r3, #4]
	return 0;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <_isatty>:

int _isatty(int file)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	return 1;
 8005598:	2301      	movs	r3, #1
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
	return 0;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055c8:	4a14      	ldr	r2, [pc, #80]	@ (800561c <_sbrk+0x5c>)
 80055ca:	4b15      	ldr	r3, [pc, #84]	@ (8005620 <_sbrk+0x60>)
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055d4:	4b13      	ldr	r3, [pc, #76]	@ (8005624 <_sbrk+0x64>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055dc:	4b11      	ldr	r3, [pc, #68]	@ (8005624 <_sbrk+0x64>)
 80055de:	4a12      	ldr	r2, [pc, #72]	@ (8005628 <_sbrk+0x68>)
 80055e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055e2:	4b10      	ldr	r3, [pc, #64]	@ (8005624 <_sbrk+0x64>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4413      	add	r3, r2
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d207      	bcs.n	8005600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055f0:	f00b fd84 	bl	80110fc <__errno>
 80055f4:	4603      	mov	r3, r0
 80055f6:	220c      	movs	r2, #12
 80055f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055fe:	e009      	b.n	8005614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005600:	4b08      	ldr	r3, [pc, #32]	@ (8005624 <_sbrk+0x64>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005606:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <_sbrk+0x64>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	4a05      	ldr	r2, [pc, #20]	@ (8005624 <_sbrk+0x64>)
 8005610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005612:	68fb      	ldr	r3, [r7, #12]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20050000 	.word	0x20050000
 8005620:	00000400 	.word	0x00000400
 8005624:	20000d44 	.word	0x20000d44
 8005628:	20004f70 	.word	0x20004f70

0800562c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005630:	4b06      	ldr	r3, [pc, #24]	@ (800564c <SystemInit+0x20>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005636:	4a05      	ldr	r2, [pc, #20]	@ (800564c <SystemInit+0x20>)
 8005638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800563c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005640:	bf00      	nop
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	e000ed00 	.word	0xe000ed00

08005650 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b088      	sub	sp, #32
 8005654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005656:	f107 0310 	add.w	r3, r7, #16
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800566e:	4b1d      	ldr	r3, [pc, #116]	@ (80056e4 <MX_TIM5_Init+0x94>)
 8005670:	4a1d      	ldr	r2, [pc, #116]	@ (80056e8 <MX_TIM5_Init+0x98>)
 8005672:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005674:	4b1b      	ldr	r3, [pc, #108]	@ (80056e4 <MX_TIM5_Init+0x94>)
 8005676:	2200      	movs	r2, #0
 8005678:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800567a:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <MX_TIM5_Init+0x94>)
 800567c:	2200      	movs	r2, #0
 800567e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005680:	4b18      	ldr	r3, [pc, #96]	@ (80056e4 <MX_TIM5_Init+0x94>)
 8005682:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005686:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005688:	4b16      	ldr	r3, [pc, #88]	@ (80056e4 <MX_TIM5_Init+0x94>)
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800568e:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <MX_TIM5_Init+0x94>)
 8005690:	2200      	movs	r2, #0
 8005692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005694:	4813      	ldr	r0, [pc, #76]	@ (80056e4 <MX_TIM5_Init+0x94>)
 8005696:	f005 fc00 	bl	800ae9a <HAL_TIM_Base_Init>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80056a0:	f7fd fede 	bl	8003460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80056a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80056aa:	f107 0310 	add.w	r3, r7, #16
 80056ae:	4619      	mov	r1, r3
 80056b0:	480c      	ldr	r0, [pc, #48]	@ (80056e4 <MX_TIM5_Init+0x94>)
 80056b2:	f005 fde1 	bl	800b278 <HAL_TIM_ConfigClockSource>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80056bc:	f7fd fed0 	bl	8003460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056c0:	2300      	movs	r3, #0
 80056c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80056c8:	1d3b      	adds	r3, r7, #4
 80056ca:	4619      	mov	r1, r3
 80056cc:	4805      	ldr	r0, [pc, #20]	@ (80056e4 <MX_TIM5_Init+0x94>)
 80056ce:	f005 ffff 	bl	800b6d0 <HAL_TIMEx_MasterConfigSynchronization>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80056d8:	f7fd fec2 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80056dc:	bf00      	nop
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000d48 	.word	0x20000d48
 80056e8:	40000c00 	.word	0x40000c00

080056ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <HAL_TIM_Base_MspInit+0x38>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d10b      	bne.n	8005716 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80056fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005728 <HAL_TIM_Base_MspInit+0x3c>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	4a09      	ldr	r2, [pc, #36]	@ (8005728 <HAL_TIM_Base_MspInit+0x3c>)
 8005704:	f043 0308 	orr.w	r3, r3, #8
 8005708:	6413      	str	r3, [r2, #64]	@ 0x40
 800570a:	4b07      	ldr	r3, [pc, #28]	@ (8005728 <HAL_TIM_Base_MspInit+0x3c>)
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40023800 	.word	0x40023800

0800572c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005730:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 8005732:	4a15      	ldr	r2, [pc, #84]	@ (8005788 <MX_USART1_UART_Init+0x5c>)
 8005734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005736:	4b13      	ldr	r3, [pc, #76]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 8005738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800573c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800573e:	4b11      	ldr	r3, [pc, #68]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 8005740:	2200      	movs	r2, #0
 8005742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005744:	4b0f      	ldr	r3, [pc, #60]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 8005746:	2200      	movs	r2, #0
 8005748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800574a:	4b0e      	ldr	r3, [pc, #56]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 800574c:	2200      	movs	r2, #0
 800574e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005750:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 8005752:	220c      	movs	r2, #12
 8005754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 8005758:	2200      	movs	r2, #0
 800575a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800575c:	4b09      	ldr	r3, [pc, #36]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 800575e:	2200      	movs	r2, #0
 8005760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005762:	4b08      	ldr	r3, [pc, #32]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 8005764:	2200      	movs	r2, #0
 8005766:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005768:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 800576a:	2200      	movs	r2, #0
 800576c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800576e:	4805      	ldr	r0, [pc, #20]	@ (8005784 <MX_USART1_UART_Init+0x58>)
 8005770:	f006 f85a 	bl	800b828 <HAL_UART_Init>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800577a:	f7fd fe71 	bl	8003460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800577e:	bf00      	nop
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20000d94 	.word	0x20000d94
 8005788:	40011000 	.word	0x40011000

0800578c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b0ac      	sub	sp, #176	@ 0xb0
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005794:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	60da      	str	r2, [r3, #12]
 80057a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80057a4:	f107 0318 	add.w	r3, r7, #24
 80057a8:	2284      	movs	r2, #132	@ 0x84
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f00b fc00 	bl	8010fb2 <memset>
  if(uartHandle->Instance==USART1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a32      	ldr	r2, [pc, #200]	@ (8005880 <HAL_UART_MspInit+0xf4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d15c      	bne.n	8005876 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80057bc:	2340      	movs	r3, #64	@ 0x40
 80057be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80057c0:	2300      	movs	r3, #0
 80057c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057c4:	f107 0318 	add.w	r3, r7, #24
 80057c8:	4618      	mov	r0, r3
 80057ca:	f003 fd51 	bl	8009270 <HAL_RCCEx_PeriphCLKConfig>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80057d4:	f7fd fe44 	bl	8003460 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057d8:	4b2a      	ldr	r3, [pc, #168]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 80057da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057dc:	4a29      	ldr	r2, [pc, #164]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 80057de:	f043 0310 	orr.w	r3, r3, #16
 80057e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80057e4:	4b27      	ldr	r3, [pc, #156]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 80057e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057f0:	4b24      	ldr	r3, [pc, #144]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 80057f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f4:	4a23      	ldr	r2, [pc, #140]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 80057f6:	f043 0302 	orr.w	r3, r3, #2
 80057fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80057fc:	4b21      	ldr	r3, [pc, #132]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 80057fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005808:	4b1e      	ldr	r3, [pc, #120]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 800580a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580c:	4a1d      	ldr	r2, [pc, #116]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	6313      	str	r3, [r2, #48]	@ 0x30
 8005814:	4b1b      	ldr	r3, [pc, #108]	@ (8005884 <HAL_UART_MspInit+0xf8>)
 8005816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005820:	2380      	movs	r3, #128	@ 0x80
 8005822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005826:	2302      	movs	r3, #2
 8005828:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005832:	2300      	movs	r3, #0
 8005834:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005838:	2307      	movs	r3, #7
 800583a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800583e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005842:	4619      	mov	r1, r3
 8005844:	4810      	ldr	r0, [pc, #64]	@ (8005888 <HAL_UART_MspInit+0xfc>)
 8005846:	f001 fcf7 	bl	8007238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800584a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800584e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005852:	2302      	movs	r3, #2
 8005854:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800585e:	2300      	movs	r3, #0
 8005860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005864:	2307      	movs	r3, #7
 8005866:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800586a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800586e:	4619      	mov	r1, r3
 8005870:	4806      	ldr	r0, [pc, #24]	@ (800588c <HAL_UART_MspInit+0x100>)
 8005872:	f001 fce1 	bl	8007238 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005876:	bf00      	nop
 8005878:	37b0      	adds	r7, #176	@ 0xb0
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40011000 	.word	0x40011000
 8005884:	40023800 	.word	0x40023800
 8005888:	40020400 	.word	0x40020400
 800588c:	40020000 	.word	0x40020000

08005890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80058c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005894:	480d      	ldr	r0, [pc, #52]	@ (80058cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005896:	490e      	ldr	r1, [pc, #56]	@ (80058d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005898:	4a0e      	ldr	r2, [pc, #56]	@ (80058d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800589a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800589c:	e002      	b.n	80058a4 <LoopCopyDataInit>

0800589e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800589e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058a2:	3304      	adds	r3, #4

080058a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058a8:	d3f9      	bcc.n	800589e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058aa:	4a0b      	ldr	r2, [pc, #44]	@ (80058d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80058ac:	4c0b      	ldr	r4, [pc, #44]	@ (80058dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80058ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058b0:	e001      	b.n	80058b6 <LoopFillZerobss>

080058b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058b4:	3204      	adds	r2, #4

080058b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058b8:	d3fb      	bcc.n	80058b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80058ba:	f7ff feb7 	bl	800562c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058be:	f00b fc23 	bl	8011108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058c2:	f7fd fc7d 	bl	80031c0 <main>
  bx  lr    
 80058c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80058cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058d0:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80058d4:	080206e4 	.word	0x080206e4
  ldr r2, =_sbss
 80058d8:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80058dc:	20004f6c 	.word	0x20004f6c

080058e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058e0:	e7fe      	b.n	80058e0 <ADC_IRQHandler>

080058e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058e6:	2003      	movs	r0, #3
 80058e8:	f000 fcf3 	bl	80062d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058ec:	200f      	movs	r0, #15
 80058ee:	f7ff fcfb 	bl	80052e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058f2:	f7ff fcd1 	bl	8005298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005900:	4b06      	ldr	r3, [pc, #24]	@ (800591c <HAL_IncTick+0x20>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <HAL_IncTick+0x24>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4413      	add	r3, r2
 800590c:	4a04      	ldr	r2, [pc, #16]	@ (8005920 <HAL_IncTick+0x24>)
 800590e:	6013      	str	r3, [r2, #0]
}
 8005910:	bf00      	nop
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000050 	.word	0x20000050
 8005920:	20000e1c 	.word	0x20000e1c

08005924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return uwTick;
 8005928:	4b03      	ldr	r3, [pc, #12]	@ (8005938 <HAL_GetTick+0x14>)
 800592a:	681b      	ldr	r3, [r3, #0]
}
 800592c:	4618      	mov	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000e1c 	.word	0x20000e1c

0800593c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005944:	f7ff ffee 	bl	8005924 <HAL_GetTick>
 8005948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005954:	d005      	beq.n	8005962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005956:	4b0a      	ldr	r3, [pc, #40]	@ (8005980 <HAL_Delay+0x44>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005962:	bf00      	nop
 8005964:	f7ff ffde 	bl	8005924 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	429a      	cmp	r2, r3
 8005972:	d8f7      	bhi.n	8005964 <HAL_Delay+0x28>
  {
  }
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20000050 	.word	0x20000050

08005984 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e031      	b.n	80059fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fb fa8e 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d116      	bne.n	80059f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059c6:	4b10      	ldr	r3, [pc, #64]	@ (8005a08 <HAL_ADC_Init+0x84>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	f043 0202 	orr.w	r2, r3, #2
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fad6 	bl	8005f84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	f043 0201 	orr.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80059ee:	e001      	b.n	80059f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	ffffeefd 	.word	0xffffeefd

08005a0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_ADC_Start+0x1a>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e0ad      	b.n	8005b82 <HAL_ADC_Start+0x176>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d018      	beq.n	8005a6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005a4c:	4b50      	ldr	r3, [pc, #320]	@ (8005b90 <HAL_ADC_Start+0x184>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a50      	ldr	r2, [pc, #320]	@ (8005b94 <HAL_ADC_Start+0x188>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	0c9a      	lsrs	r2, r3, #18
 8005a58:	4613      	mov	r3, r2
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a60:	e002      	b.n	8005a68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1f9      	bne.n	8005a62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d175      	bne.n	8005b68 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a80:	4b45      	ldr	r3, [pc, #276]	@ (8005b98 <HAL_ADC_Start+0x18c>)
 8005a82:	4013      	ands	r3, r2
 8005a84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005aa2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab6:	d106      	bne.n	8005ac6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abc:	f023 0206 	bic.w	r2, r3, #6
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ac4:	e002      	b.n	8005acc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005adc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005ade:	4b2f      	ldr	r3, [pc, #188]	@ (8005b9c <HAL_ADC_Start+0x190>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10f      	bne.n	8005b0a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d143      	bne.n	8005b80 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b06:	609a      	str	r2, [r3, #8]
 8005b08:	e03a      	b.n	8005b80 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a24      	ldr	r2, [pc, #144]	@ (8005ba0 <HAL_ADC_Start+0x194>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10e      	bne.n	8005b32 <HAL_ADC_Start+0x126>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d107      	bne.n	8005b32 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689a      	ldr	r2, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b30:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005b32:	4b1a      	ldr	r3, [pc, #104]	@ (8005b9c <HAL_ADC_Start+0x190>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d120      	bne.n	8005b80 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a18      	ldr	r2, [pc, #96]	@ (8005ba4 <HAL_ADC_Start+0x198>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d11b      	bne.n	8005b80 <HAL_ADC_Start+0x174>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d114      	bne.n	8005b80 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b64:	609a      	str	r2, [r3, #8]
 8005b66:	e00b      	b.n	8005b80 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6c:	f043 0210 	orr.w	r2, r3, #16
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b78:	f043 0201 	orr.w	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	20000048 	.word	0x20000048
 8005b94:	431bde83 	.word	0x431bde83
 8005b98:	fffff8fe 	.word	0xfffff8fe
 8005b9c:	40012300 	.word	0x40012300
 8005ba0:	40012000 	.word	0x40012000
 8005ba4:	40012200 	.word	0x40012200

08005ba8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc4:	d113      	bne.n	8005bee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd4:	d10b      	bne.n	8005bee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bda:	f043 0220 	orr.w	r2, r3, #32
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e063      	b.n	8005cb6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005bee:	f7ff fe99 	bl	8005924 <HAL_GetTick>
 8005bf2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bf4:	e021      	b.n	8005c3a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bfc:	d01d      	beq.n	8005c3a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <HAL_ADC_PollForConversion+0x6c>
 8005c04:	f7ff fe8e 	bl	8005924 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d212      	bcs.n	8005c3a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d00b      	beq.n	8005c3a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	f043 0204 	orr.w	r2, r3, #4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e03d      	b.n	8005cb6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d1d6      	bne.n	8005bf6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0212 	mvn.w	r2, #18
 8005c50:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d123      	bne.n	8005cb4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11f      	bne.n	8005cb4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d006      	beq.n	8005c90 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d111      	bne.n	8005cb4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	f043 0201 	orr.w	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_ADC_ConfigChannel+0x1c>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e136      	b.n	8005f62 <HAL_ADC_ConfigChannel+0x28a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b09      	cmp	r3, #9
 8005d02:	d93a      	bls.n	8005d7a <HAL_ADC_ConfigChannel+0xa2>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d0c:	d035      	beq.n	8005d7a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68d9      	ldr	r1, [r3, #12]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	4413      	add	r3, r2
 8005d22:	3b1e      	subs	r3, #30
 8005d24:	2207      	movs	r2, #7
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43da      	mvns	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	400a      	ands	r2, r1
 8005d32:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a8d      	ldr	r2, [pc, #564]	@ (8005f70 <HAL_ADC_ConfigChannel+0x298>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d10a      	bne.n	8005d54 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68d9      	ldr	r1, [r3, #12]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	061a      	lsls	r2, r3, #24
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d52:	e035      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68d9      	ldr	r1, [r3, #12]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	4618      	mov	r0, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4403      	add	r3, r0
 8005d6c:	3b1e      	subs	r3, #30
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d78:	e022      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6919      	ldr	r1, [r3, #16]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	2207      	movs	r2, #7
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	43da      	mvns	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	400a      	ands	r2, r1
 8005d9c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6919      	ldr	r1, [r3, #16]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	4618      	mov	r0, r3
 8005db0:	4603      	mov	r3, r0
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4403      	add	r3, r0
 8005db6:	409a      	lsls	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d824      	bhi.n	8005e12 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	3b05      	subs	r3, #5
 8005dda:	221f      	movs	r2, #31
 8005ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8005de0:	43da      	mvns	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	400a      	ands	r2, r1
 8005de8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	4618      	mov	r0, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	3b05      	subs	r3, #5
 8005e04:	fa00 f203 	lsl.w	r2, r0, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e10:	e04c      	b.n	8005eac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b0c      	cmp	r3, #12
 8005e18:	d824      	bhi.n	8005e64 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	3b23      	subs	r3, #35	@ 0x23
 8005e2c:	221f      	movs	r2, #31
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	43da      	mvns	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	400a      	ands	r2, r1
 8005e3a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	4618      	mov	r0, r3
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	3b23      	subs	r3, #35	@ 0x23
 8005e56:	fa00 f203 	lsl.w	r2, r0, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e62:	e023      	b.n	8005eac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	3b41      	subs	r3, #65	@ 0x41
 8005e76:	221f      	movs	r2, #31
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43da      	mvns	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	400a      	ands	r2, r1
 8005e84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	4618      	mov	r0, r3
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	3b41      	subs	r3, #65	@ 0x41
 8005ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a30      	ldr	r2, [pc, #192]	@ (8005f74 <HAL_ADC_ConfigChannel+0x29c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10a      	bne.n	8005ecc <HAL_ADC_ConfigChannel+0x1f4>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ebe:	d105      	bne.n	8005ecc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ec6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005eca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a28      	ldr	r2, [pc, #160]	@ (8005f74 <HAL_ADC_ConfigChannel+0x29c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x21e>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b12      	cmp	r3, #18
 8005edc:	d10b      	bne.n	8005ef6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005ede:	4b26      	ldr	r3, [pc, #152]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4a25      	ldr	r2, [pc, #148]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ee4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ee8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005eea:	4b23      	ldr	r3, [pc, #140]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	4a22      	ldr	r2, [pc, #136]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ef4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1e      	ldr	r2, [pc, #120]	@ (8005f74 <HAL_ADC_ConfigChannel+0x29c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d12b      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x280>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1a      	ldr	r2, [pc, #104]	@ (8005f70 <HAL_ADC_ConfigChannel+0x298>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <HAL_ADC_ConfigChannel+0x23a>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b11      	cmp	r3, #17
 8005f10:	d122      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005f12:	4b19      	ldr	r3, [pc, #100]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	4a18      	ldr	r2, [pc, #96]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f18:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005f1c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005f1e:	4b16      	ldr	r3, [pc, #88]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4a15      	ldr	r2, [pc, #84]	@ (8005f78 <HAL_ADC_ConfigChannel+0x2a0>)
 8005f24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f28:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a10      	ldr	r2, [pc, #64]	@ (8005f70 <HAL_ADC_ConfigChannel+0x298>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d111      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005f34:	4b11      	ldr	r3, [pc, #68]	@ (8005f7c <HAL_ADC_ConfigChannel+0x2a4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a11      	ldr	r2, [pc, #68]	@ (8005f80 <HAL_ADC_ConfigChannel+0x2a8>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	0c9a      	lsrs	r2, r3, #18
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f4a:	e002      	b.n	8005f52 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f9      	bne.n	8005f4c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	10000012 	.word	0x10000012
 8005f74:	40012000 	.word	0x40012000
 8005f78:	40012300 	.word	0x40012300
 8005f7c:	20000048 	.word	0x20000048
 8005f80:	431bde83 	.word	0x431bde83

08005f84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005f8c:	4b78      	ldr	r3, [pc, #480]	@ (8006170 <ADC_Init+0x1ec>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a77      	ldr	r2, [pc, #476]	@ (8006170 <ADC_Init+0x1ec>)
 8005f92:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005f96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005f98:	4b75      	ldr	r3, [pc, #468]	@ (8006170 <ADC_Init+0x1ec>)
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4973      	ldr	r1, [pc, #460]	@ (8006170 <ADC_Init+0x1ec>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6859      	ldr	r1, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	021a      	lsls	r2, r3, #8
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6859      	ldr	r1, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ffa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6899      	ldr	r1, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006012:	4a58      	ldr	r2, [pc, #352]	@ (8006174 <ADC_Init+0x1f0>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d022      	beq.n	800605e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006026:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6899      	ldr	r1, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006048:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6899      	ldr	r1, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	e00f      	b.n	800607e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800606c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800607c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0202 	bic.w	r2, r2, #2
 800608c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6899      	ldr	r1, [r3, #8]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	005a      	lsls	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01b      	beq.n	80060e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80060ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d6:	3b01      	subs	r3, #1
 80060d8:	035a      	lsls	r2, r3, #13
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	e007      	b.n	80060f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	3b01      	subs	r3, #1
 8006110:	051a      	lsls	r2, r3, #20
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6899      	ldr	r1, [r3, #8]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006136:	025a      	lsls	r2, r3, #9
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800614e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6899      	ldr	r1, [r3, #8]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	029a      	lsls	r2, r3, #10
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	609a      	str	r2, [r3, #8]
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012300 	.word	0x40012300
 8006174:	0f000001 	.word	0x0f000001

08006178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006188:	4b0b      	ldr	r3, [pc, #44]	@ (80061b8 <__NVIC_SetPriorityGrouping+0x40>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006194:	4013      	ands	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80061a0:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <__NVIC_SetPriorityGrouping+0x44>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061a6:	4a04      	ldr	r2, [pc, #16]	@ (80061b8 <__NVIC_SetPriorityGrouping+0x40>)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	60d3      	str	r3, [r2, #12]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	e000ed00 	.word	0xe000ed00
 80061bc:	05fa0000 	.word	0x05fa0000

080061c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061c4:	4b04      	ldr	r3, [pc, #16]	@ (80061d8 <__NVIC_GetPriorityGrouping+0x18>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f003 0307 	and.w	r3, r3, #7
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	db0b      	blt.n	8006206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	f003 021f 	and.w	r2, r3, #31
 80061f4:	4907      	ldr	r1, [pc, #28]	@ (8006214 <__NVIC_EnableIRQ+0x38>)
 80061f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2001      	movs	r0, #1
 80061fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	e000e100 	.word	0xe000e100

08006218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	6039      	str	r1, [r7, #0]
 8006222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006228:	2b00      	cmp	r3, #0
 800622a:	db0a      	blt.n	8006242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	490c      	ldr	r1, [pc, #48]	@ (8006264 <__NVIC_SetPriority+0x4c>)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	0112      	lsls	r2, r2, #4
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	440b      	add	r3, r1
 800623c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006240:	e00a      	b.n	8006258 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	4908      	ldr	r1, [pc, #32]	@ (8006268 <__NVIC_SetPriority+0x50>)
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	3b04      	subs	r3, #4
 8006250:	0112      	lsls	r2, r2, #4
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	440b      	add	r3, r1
 8006256:	761a      	strb	r2, [r3, #24]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	e000e100 	.word	0xe000e100
 8006268:	e000ed00 	.word	0xe000ed00

0800626c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800626c:	b480      	push	{r7}
 800626e:	b089      	sub	sp, #36	@ 0x24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f1c3 0307 	rsb	r3, r3, #7
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf28      	it	cs
 800628a:	2304      	movcs	r3, #4
 800628c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3304      	adds	r3, #4
 8006292:	2b06      	cmp	r3, #6
 8006294:	d902      	bls.n	800629c <NVIC_EncodePriority+0x30>
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3b03      	subs	r3, #3
 800629a:	e000      	b.n	800629e <NVIC_EncodePriority+0x32>
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	43da      	mvns	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	401a      	ands	r2, r3
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	43d9      	mvns	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c4:	4313      	orrs	r3, r2
         );
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3724      	adds	r7, #36	@ 0x24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff ff4c 	bl	8006178 <__NVIC_SetPriorityGrouping>
}
 80062e0:	bf00      	nop
 80062e2:	3708      	adds	r7, #8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062fa:	f7ff ff61 	bl	80061c0 <__NVIC_GetPriorityGrouping>
 80062fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	6978      	ldr	r0, [r7, #20]
 8006306:	f7ff ffb1 	bl	800626c <NVIC_EncodePriority>
 800630a:	4602      	mov	r2, r0
 800630c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff ff80 	bl	8006218 <__NVIC_SetPriority>
}
 8006318:	bf00      	nop
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800632a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632e:	4618      	mov	r0, r3
 8006330:	f7ff ff54 	bl	80061dc <__NVIC_EnableIRQ>
}
 8006334:	bf00      	nop
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006348:	f7ff faec 	bl	8005924 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e099      	b.n	800648c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006378:	e00f      	b.n	800639a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800637a:	f7ff fad3 	bl	8005924 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b05      	cmp	r3, #5
 8006386:	d908      	bls.n	800639a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2203      	movs	r2, #3
 8006392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e078      	b.n	800648c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e8      	bne.n	800637a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4b38      	ldr	r3, [pc, #224]	@ (8006494 <HAL_DMA_Init+0x158>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d107      	bne.n	8006404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	4313      	orrs	r3, r2
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 0307 	bic.w	r3, r3, #7
 800641a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	2b04      	cmp	r3, #4
 800642c:	d117      	bne.n	800645e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fae1 	bl	8006a08 <DMA_CheckFifoParam>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2240      	movs	r2, #64	@ 0x40
 8006450:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800645a:	2301      	movs	r3, #1
 800645c:	e016      	b.n	800648c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa98 	bl	800699c <DMA_CalcBaseAndBitshift>
 800646c:	4603      	mov	r3, r0
 800646e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006474:	223f      	movs	r2, #63	@ 0x3f
 8006476:	409a      	lsls	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	f010803f 	.word	0xf010803f

08006498 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e050      	b.n	800654c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d101      	bne.n	80064ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80064b6:	2302      	movs	r3, #2
 80064b8:	e048      	b.n	800654c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0201 	bic.w	r2, r2, #1
 80064c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2200      	movs	r2, #0
 80064d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2200      	movs	r2, #0
 80064d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2200      	movs	r2, #0
 80064e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2200      	movs	r2, #0
 80064e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2200      	movs	r2, #0
 80064f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2221      	movs	r2, #33	@ 0x21
 80064f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa4e 	bl	800699c <DMA_CalcBaseAndBitshift>
 8006500:	4603      	mov	r3, r0
 8006502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006508:	223f      	movs	r2, #63	@ 0x3f
 800650a:	409a      	lsls	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_DMA_Start_IT+0x26>
 8006576:	2302      	movs	r3, #2
 8006578:	e048      	b.n	800660c <HAL_DMA_Start_IT+0xb8>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b01      	cmp	r3, #1
 800658c:	d137      	bne.n	80065fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f9cc 	bl	8006940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ac:	223f      	movs	r2, #63	@ 0x3f
 80065ae:	409a      	lsls	r2, r3
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0216 	orr.w	r2, r2, #22
 80065c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695a      	ldr	r2, [r3, #20]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0208 	orr.w	r2, r2, #8
 80065ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
 80065fc:	e005      	b.n	800660a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006606:	2302      	movs	r3, #2
 8006608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006620:	4b8e      	ldr	r3, [pc, #568]	@ (800685c <HAL_DMA_IRQHandler+0x248>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a8e      	ldr	r2, [pc, #568]	@ (8006860 <HAL_DMA_IRQHandler+0x24c>)
 8006626:	fba2 2303 	umull	r2, r3, r2, r3
 800662a:	0a9b      	lsrs	r3, r3, #10
 800662c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800663e:	2208      	movs	r2, #8
 8006640:	409a      	lsls	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4013      	ands	r3, r2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01a      	beq.n	8006680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d013      	beq.n	8006680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0204 	bic.w	r2, r2, #4
 8006666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666c:	2208      	movs	r2, #8
 800666e:	409a      	lsls	r2, r3
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006678:	f043 0201 	orr.w	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006684:	2201      	movs	r2, #1
 8006686:	409a      	lsls	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d012      	beq.n	80066b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a2:	2201      	movs	r2, #1
 80066a4:	409a      	lsls	r2, r3
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ae:	f043 0202 	orr.w	r2, r3, #2
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ba:	2204      	movs	r2, #4
 80066bc:	409a      	lsls	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d012      	beq.n	80066ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d8:	2204      	movs	r2, #4
 80066da:	409a      	lsls	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e4:	f043 0204 	orr.w	r2, r3, #4
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f0:	2210      	movs	r2, #16
 80066f2:	409a      	lsls	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d043      	beq.n	8006784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d03c      	beq.n	8006784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800670e:	2210      	movs	r2, #16
 8006710:	409a      	lsls	r2, r3
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d018      	beq.n	8006756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d108      	bne.n	8006744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006736:	2b00      	cmp	r3, #0
 8006738:	d024      	beq.n	8006784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	4798      	blx	r3
 8006742:	e01f      	b.n	8006784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01b      	beq.n	8006784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
 8006754:	e016      	b.n	8006784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d107      	bne.n	8006774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0208 	bic.w	r2, r2, #8
 8006772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006788:	2220      	movs	r2, #32
 800678a:	409a      	lsls	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4013      	ands	r3, r2
 8006790:	2b00      	cmp	r3, #0
 8006792:	f000 808f 	beq.w	80068b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8087 	beq.w	80068b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067aa:	2220      	movs	r2, #32
 80067ac:	409a      	lsls	r2, r3
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	d136      	bne.n	800682c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0216 	bic.w	r2, r2, #22
 80067cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695a      	ldr	r2, [r3, #20]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <HAL_DMA_IRQHandler+0x1da>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f022 0208 	bic.w	r2, r2, #8
 80067fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006802:	223f      	movs	r2, #63	@ 0x3f
 8006804:	409a      	lsls	r2, r3
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681e:	2b00      	cmp	r3, #0
 8006820:	d07e      	beq.n	8006920 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	4798      	blx	r3
        }
        return;
 800682a:	e079      	b.n	8006920 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01d      	beq.n	8006876 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10d      	bne.n	8006864 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684c:	2b00      	cmp	r3, #0
 800684e:	d031      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	4798      	blx	r3
 8006858:	e02c      	b.n	80068b4 <HAL_DMA_IRQHandler+0x2a0>
 800685a:	bf00      	nop
 800685c:	20000048 	.word	0x20000048
 8006860:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006868:	2b00      	cmp	r3, #0
 800686a:	d023      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
 8006874:	e01e      	b.n	80068b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10f      	bne.n	80068a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0210 	bic.w	r2, r2, #16
 8006892:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d032      	beq.n	8006922 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d022      	beq.n	800690e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2205      	movs	r2, #5
 80068cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0201 	bic.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d307      	bcc.n	80068fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f2      	bne.n	80068e0 <HAL_DMA_IRQHandler+0x2cc>
 80068fa:	e000      	b.n	80068fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80068fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	4798      	blx	r3
 800691e:	e000      	b.n	8006922 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006920:	bf00      	nop
    }
  }
}
 8006922:	3718      	adds	r7, #24
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800695c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	2b40      	cmp	r3, #64	@ 0x40
 800696c:	d108      	bne.n	8006980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800697e:	e007      	b.n	8006990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	60da      	str	r2, [r3, #12]
}
 8006990:	bf00      	nop
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	3b10      	subs	r3, #16
 80069ac:	4a13      	ldr	r2, [pc, #76]	@ (80069fc <DMA_CalcBaseAndBitshift+0x60>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	091b      	lsrs	r3, r3, #4
 80069b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80069b6:	4a12      	ldr	r2, [pc, #72]	@ (8006a00 <DMA_CalcBaseAndBitshift+0x64>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d908      	bls.n	80069dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <DMA_CalcBaseAndBitshift+0x68>)
 80069d2:	4013      	ands	r3, r2
 80069d4:	1d1a      	adds	r2, r3, #4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80069da:	e006      	b.n	80069ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	4b08      	ldr	r3, [pc, #32]	@ (8006a04 <DMA_CalcBaseAndBitshift+0x68>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	aaaaaaab 	.word	0xaaaaaaab
 8006a00:	080205d8 	.word	0x080205d8
 8006a04:	fffffc00 	.word	0xfffffc00

08006a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d11f      	bne.n	8006a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d856      	bhi.n	8006ad6 <DMA_CheckFifoParam+0xce>
 8006a28:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <DMA_CheckFifoParam+0x28>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a53 	.word	0x08006a53
 8006a38:	08006a41 	.word	0x08006a41
 8006a3c:	08006ad7 	.word	0x08006ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d046      	beq.n	8006ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a50:	e043      	b.n	8006ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a5a:	d140      	bne.n	8006ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a60:	e03d      	b.n	8006ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a6a:	d121      	bne.n	8006ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d837      	bhi.n	8006ae2 <DMA_CheckFifoParam+0xda>
 8006a72:	a201      	add	r2, pc, #4	@ (adr r2, 8006a78 <DMA_CheckFifoParam+0x70>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a89 	.word	0x08006a89
 8006a7c:	08006a8f 	.word	0x08006a8f
 8006a80:	08006a89 	.word	0x08006a89
 8006a84:	08006aa1 	.word	0x08006aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8c:	e030      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d025      	beq.n	8006ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a9e:	e022      	b.n	8006ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006aa8:	d11f      	bne.n	8006aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006aae:	e01c      	b.n	8006aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d903      	bls.n	8006abe <DMA_CheckFifoParam+0xb6>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d003      	beq.n	8006ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006abc:	e018      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac2:	e015      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00e      	beq.n	8006aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad4:	e00b      	b.n	8006aee <DMA_CheckFifoParam+0xe6>
      break;
 8006ad6:	bf00      	nop
 8006ad8:	e00a      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
      break;
 8006ada:	bf00      	nop
 8006adc:	e008      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
      break;
 8006ade:	bf00      	nop
 8006ae0:	e006      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e004      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <DMA_CheckFifoParam+0xe8>
      break;
 8006aee:	bf00      	nop
    }
  } 
  
  return status; 
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e039      	b.n	8006b86 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fa faa2 	bl	8001070 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b50:	f023 0107 	bic.w	r1, r3, #7
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b66:	4b0a      	ldr	r3, [pc, #40]	@ (8006b90 <HAL_DMA2D_Init+0x90>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68d1      	ldr	r1, [r2, #12]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6812      	ldr	r2, [r2, #0]
 8006b72:	430b      	orrs	r3, r1
 8006b74:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	ffffc000 	.word	0xffffc000

08006b94 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d101      	bne.n	8006bb0 <HAL_DMA2D_Start+0x1c>
 8006bac:	2302      	movs	r3, #2
 8006bae:	e018      	b.n	8006be2 <HAL_DMA2D_Start+0x4e>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fa98 	bl	8007100 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b086      	sub	sp, #24
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d056      	beq.n	8006cb4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c06:	f7fe fe8d 	bl	8005924 <HAL_GetTick>
 8006c0a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006c0c:	e04b      	b.n	8006ca6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d023      	beq.n	8006c68 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2e:	f043 0202 	orr.w	r2, r3, #2
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c44:	f043 0201 	orr.w	r2, r3, #1
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2221      	movs	r2, #33	@ 0x21
 8006c52:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2204      	movs	r2, #4
 8006c58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e0a5      	b.n	8006db4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c6e:	d01a      	beq.n	8006ca6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c70:	f7fe fe58 	bl	8005924 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <HAL_DMA2D_PollForTransfer+0x9c>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10f      	bne.n	8006ca6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c8a:	f043 0220 	orr.w	r2, r3, #32
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2203      	movs	r2, #3
 8006c96:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e086      	b.n	8006db4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d0ac      	beq.n	8006c0e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d061      	beq.n	8006d9a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cd6:	f7fe fe25 	bl	8005924 <HAL_GetTick>
 8006cda:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006cdc:	e056      	b.n	8006d8c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d02e      	beq.n	8006d4e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfe:	f043 0204 	orr.w	r2, r3, #4
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 0320 	and.w	r3, r3, #32
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d14:	f043 0202 	orr.w	r2, r3, #2
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d2a:	f043 0201 	orr.w	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2229      	movs	r2, #41	@ 0x29
 8006d38:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e032      	b.n	8006db4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d54:	d01a      	beq.n	8006d8c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d56:	f7fe fde5 	bl	8005924 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d302      	bcc.n	8006d6c <HAL_DMA2D_PollForTransfer+0x182>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10f      	bne.n	8006d8c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d70:	f043 0220 	orr.w	r2, r3, #32
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2203      	movs	r2, #3
 8006d7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e013      	b.n	8006db4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0a1      	beq.n	8006cde <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2212      	movs	r2, #18
 8006da0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2201      	movs	r2, #1
 8006da6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d026      	beq.n	8006e2c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d021      	beq.n	8006e2c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006df6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	f043 0201 	orr.w	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d003      	beq.n	8006e2c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d026      	beq.n	8006e84 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d021      	beq.n	8006e84 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e4e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2220      	movs	r2, #32
 8006e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e5c:	f043 0202 	orr.w	r2, r3, #2
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2204      	movs	r2, #4
 8006e68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d026      	beq.n	8006edc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d021      	beq.n	8006edc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ea6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2208      	movs	r2, #8
 8006eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb4:	f043 0204 	orr.w	r2, r3, #4
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	695b      	ldr	r3, [r3, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d003      	beq.n	8006edc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d013      	beq.n	8006f0e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00e      	beq.n	8006f0e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006efe:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2204      	movs	r2, #4
 8006f06:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f853 	bl	8006fb4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d024      	beq.n	8006f62 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d01f      	beq.n	8006f62 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006f30:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2202      	movs	r2, #2
 8006f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01f      	beq.n	8006fac <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01a      	beq.n	8006fac <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f84:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2210      	movs	r2, #16
 8006f8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f80e 	bl	8006fc8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_DMA2D_ConfigLayer+0x20>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e079      	b.n	80070f0 <HAL_DMA2D_ConfigLayer+0x114>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	3318      	adds	r3, #24
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	4413      	add	r3, r2
 8007016:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	041b      	lsls	r3, r3, #16
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007026:	4b35      	ldr	r3, [pc, #212]	@ (80070fc <HAL_DMA2D_ConfigLayer+0x120>)
 8007028:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2b0a      	cmp	r3, #10
 8007030:	d003      	beq.n	800703a <HAL_DMA2D_ConfigLayer+0x5e>
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b09      	cmp	r3, #9
 8007038:	d107      	bne.n	800704a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e005      	b.n	8007056 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	061b      	lsls	r3, r3, #24
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d120      	bne.n	800709e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	43db      	mvns	r3, r3
 8007066:	ea02 0103 	and.w	r1, r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	430a      	orrs	r2, r1
 8007072:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	6812      	ldr	r2, [r2, #0]
 800707c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b0a      	cmp	r3, #10
 8007084:	d003      	beq.n	800708e <HAL_DMA2D_ConfigLayer+0xb2>
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b09      	cmp	r3, #9
 800708c:	d127      	bne.n	80070de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800709a:	629a      	str	r2, [r3, #40]	@ 0x28
 800709c:	e01f      	b.n	80070de <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	69da      	ldr	r2, [r3, #28]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	43db      	mvns	r3, r3
 80070a8:	ea02 0103 	and.w	r1, r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	697a      	ldr	r2, [r7, #20]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	2b0a      	cmp	r3, #10
 80070c6:	d003      	beq.n	80070d0 <HAL_DMA2D_ConfigLayer+0xf4>
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d106      	bne.n	80070de <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80070dc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	ff03000f 	.word	0xff03000f

08007100 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007100:	b480      	push	{r7}
 8007102:	b08b      	sub	sp, #44	@ 0x2c
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007114:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	041a      	lsls	r2, r3, #16
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	431a      	orrs	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007138:	d174      	bne.n	8007224 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007140:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007148:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007150:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d108      	bne.n	8007172 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	431a      	orrs	r2, r3
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	4313      	orrs	r3, r2
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007170:	e053      	b.n	800721a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d106      	bne.n	8007188 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4313      	orrs	r3, r2
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	627b      	str	r3, [r7, #36]	@ 0x24
 8007186:	e048      	b.n	800721a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d111      	bne.n	80071b4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	0cdb      	lsrs	r3, r3, #19
 8007194:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	0a9b      	lsrs	r3, r3, #10
 800719a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	08db      	lsrs	r3, r3, #3
 80071a0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	02db      	lsls	r3, r3, #11
 80071aa:	4313      	orrs	r3, r2
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b2:	e032      	b.n	800721a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d117      	bne.n	80071ec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	0fdb      	lsrs	r3, r3, #31
 80071c0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	0cdb      	lsrs	r3, r3, #19
 80071c6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	0adb      	lsrs	r3, r3, #11
 80071cc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	08db      	lsrs	r3, r3, #3
 80071d2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	029b      	lsls	r3, r3, #10
 80071dc:	431a      	orrs	r2, r3
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	03db      	lsls	r3, r3, #15
 80071e2:	4313      	orrs	r3, r2
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071ea:	e016      	b.n	800721a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	0f1b      	lsrs	r3, r3, #28
 80071f0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	0d1b      	lsrs	r3, r3, #20
 80071f6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	0b1b      	lsrs	r3, r3, #12
 80071fc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	091b      	lsrs	r3, r3, #4
 8007202:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	011a      	lsls	r2, r3, #4
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	021b      	lsls	r3, r3, #8
 800720c:	431a      	orrs	r2, r3
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	031b      	lsls	r3, r3, #12
 8007212:	4313      	orrs	r3, r2
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	4313      	orrs	r3, r2
 8007218:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007220:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007222:	e003      	b.n	800722c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	60da      	str	r2, [r3, #12]
}
 800722c:	bf00      	nop
 800722e:	372c      	adds	r7, #44	@ 0x2c
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007238:	b480      	push	{r7}
 800723a:	b089      	sub	sp, #36	@ 0x24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800724a:	2300      	movs	r3, #0
 800724c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007252:	2300      	movs	r3, #0
 8007254:	61fb      	str	r3, [r7, #28]
 8007256:	e175      	b.n	8007544 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007258:	2201      	movs	r2, #1
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	fa02 f303 	lsl.w	r3, r2, r3
 8007260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4013      	ands	r3, r2
 800726a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	429a      	cmp	r2, r3
 8007272:	f040 8164 	bne.w	800753e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d005      	beq.n	800728e <HAL_GPIO_Init+0x56>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d130      	bne.n	80072f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	2203      	movs	r2, #3
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	43db      	mvns	r3, r3
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	4013      	ands	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	fa02 f303 	lsl.w	r3, r2, r3
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072c4:	2201      	movs	r2, #1
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	43db      	mvns	r3, r3
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	4013      	ands	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	091b      	lsrs	r3, r3, #4
 80072da:	f003 0201 	and.w	r2, r3, #1
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	fa02 f303 	lsl.w	r3, r2, r3
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 0303 	and.w	r3, r3, #3
 80072f8:	2b03      	cmp	r3, #3
 80072fa:	d017      	beq.n	800732c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	2203      	movs	r2, #3
 8007308:	fa02 f303 	lsl.w	r3, r2, r3
 800730c:	43db      	mvns	r3, r3
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	4013      	ands	r3, r2
 8007312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	4313      	orrs	r3, r2
 8007324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d123      	bne.n	8007380 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	08da      	lsrs	r2, r3, #3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3208      	adds	r2, #8
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	220f      	movs	r2, #15
 8007350:	fa02 f303 	lsl.w	r3, r2, r3
 8007354:	43db      	mvns	r3, r3
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	4013      	ands	r3, r2
 800735a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	fa02 f303 	lsl.w	r3, r2, r3
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	4313      	orrs	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	08da      	lsrs	r2, r3, #3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3208      	adds	r2, #8
 800737a:	69b9      	ldr	r1, [r7, #24]
 800737c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	2203      	movs	r2, #3
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	43db      	mvns	r3, r3
 8007392:	69ba      	ldr	r2, [r7, #24]
 8007394:	4013      	ands	r3, r2
 8007396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f003 0203 	and.w	r2, r3, #3
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	fa02 f303 	lsl.w	r3, r2, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 80be 	beq.w	800753e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073c2:	4b66      	ldr	r3, [pc, #408]	@ (800755c <HAL_GPIO_Init+0x324>)
 80073c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c6:	4a65      	ldr	r2, [pc, #404]	@ (800755c <HAL_GPIO_Init+0x324>)
 80073c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80073ce:	4b63      	ldr	r3, [pc, #396]	@ (800755c <HAL_GPIO_Init+0x324>)
 80073d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80073da:	4a61      	ldr	r2, [pc, #388]	@ (8007560 <HAL_GPIO_Init+0x328>)
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	089b      	lsrs	r3, r3, #2
 80073e0:	3302      	adds	r3, #2
 80073e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	220f      	movs	r2, #15
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	43db      	mvns	r3, r3
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	4013      	ands	r3, r2
 80073fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a58      	ldr	r2, [pc, #352]	@ (8007564 <HAL_GPIO_Init+0x32c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d037      	beq.n	8007476 <HAL_GPIO_Init+0x23e>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a57      	ldr	r2, [pc, #348]	@ (8007568 <HAL_GPIO_Init+0x330>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d031      	beq.n	8007472 <HAL_GPIO_Init+0x23a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a56      	ldr	r2, [pc, #344]	@ (800756c <HAL_GPIO_Init+0x334>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d02b      	beq.n	800746e <HAL_GPIO_Init+0x236>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a55      	ldr	r2, [pc, #340]	@ (8007570 <HAL_GPIO_Init+0x338>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d025      	beq.n	800746a <HAL_GPIO_Init+0x232>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a54      	ldr	r2, [pc, #336]	@ (8007574 <HAL_GPIO_Init+0x33c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01f      	beq.n	8007466 <HAL_GPIO_Init+0x22e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a53      	ldr	r2, [pc, #332]	@ (8007578 <HAL_GPIO_Init+0x340>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d019      	beq.n	8007462 <HAL_GPIO_Init+0x22a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a52      	ldr	r2, [pc, #328]	@ (800757c <HAL_GPIO_Init+0x344>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_GPIO_Init+0x226>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a51      	ldr	r2, [pc, #324]	@ (8007580 <HAL_GPIO_Init+0x348>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00d      	beq.n	800745a <HAL_GPIO_Init+0x222>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a50      	ldr	r2, [pc, #320]	@ (8007584 <HAL_GPIO_Init+0x34c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d007      	beq.n	8007456 <HAL_GPIO_Init+0x21e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a4f      	ldr	r2, [pc, #316]	@ (8007588 <HAL_GPIO_Init+0x350>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <HAL_GPIO_Init+0x21a>
 800744e:	2309      	movs	r3, #9
 8007450:	e012      	b.n	8007478 <HAL_GPIO_Init+0x240>
 8007452:	230a      	movs	r3, #10
 8007454:	e010      	b.n	8007478 <HAL_GPIO_Init+0x240>
 8007456:	2308      	movs	r3, #8
 8007458:	e00e      	b.n	8007478 <HAL_GPIO_Init+0x240>
 800745a:	2307      	movs	r3, #7
 800745c:	e00c      	b.n	8007478 <HAL_GPIO_Init+0x240>
 800745e:	2306      	movs	r3, #6
 8007460:	e00a      	b.n	8007478 <HAL_GPIO_Init+0x240>
 8007462:	2305      	movs	r3, #5
 8007464:	e008      	b.n	8007478 <HAL_GPIO_Init+0x240>
 8007466:	2304      	movs	r3, #4
 8007468:	e006      	b.n	8007478 <HAL_GPIO_Init+0x240>
 800746a:	2303      	movs	r3, #3
 800746c:	e004      	b.n	8007478 <HAL_GPIO_Init+0x240>
 800746e:	2302      	movs	r3, #2
 8007470:	e002      	b.n	8007478 <HAL_GPIO_Init+0x240>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <HAL_GPIO_Init+0x240>
 8007476:	2300      	movs	r3, #0
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	f002 0203 	and.w	r2, r2, #3
 800747e:	0092      	lsls	r2, r2, #2
 8007480:	4093      	lsls	r3, r2
 8007482:	69ba      	ldr	r2, [r7, #24]
 8007484:	4313      	orrs	r3, r2
 8007486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007488:	4935      	ldr	r1, [pc, #212]	@ (8007560 <HAL_GPIO_Init+0x328>)
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	089b      	lsrs	r3, r3, #2
 800748e:	3302      	adds	r3, #2
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007496:	4b3d      	ldr	r3, [pc, #244]	@ (800758c <HAL_GPIO_Init+0x354>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074ba:	4a34      	ldr	r2, [pc, #208]	@ (800758c <HAL_GPIO_Init+0x354>)
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074c0:	4b32      	ldr	r3, [pc, #200]	@ (800758c <HAL_GPIO_Init+0x354>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	43db      	mvns	r3, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4013      	ands	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074e4:	4a29      	ldr	r2, [pc, #164]	@ (800758c <HAL_GPIO_Init+0x354>)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80074ea:	4b28      	ldr	r3, [pc, #160]	@ (800758c <HAL_GPIO_Init+0x354>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	43db      	mvns	r3, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4013      	ands	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800750e:	4a1f      	ldr	r2, [pc, #124]	@ (800758c <HAL_GPIO_Init+0x354>)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007514:	4b1d      	ldr	r3, [pc, #116]	@ (800758c <HAL_GPIO_Init+0x354>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	43db      	mvns	r3, r3
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	4013      	ands	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	4313      	orrs	r3, r2
 8007536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007538:	4a14      	ldr	r2, [pc, #80]	@ (800758c <HAL_GPIO_Init+0x354>)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	3301      	adds	r3, #1
 8007542:	61fb      	str	r3, [r7, #28]
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2b0f      	cmp	r3, #15
 8007548:	f67f ae86 	bls.w	8007258 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	3724      	adds	r7, #36	@ 0x24
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	40023800 	.word	0x40023800
 8007560:	40013800 	.word	0x40013800
 8007564:	40020000 	.word	0x40020000
 8007568:	40020400 	.word	0x40020400
 800756c:	40020800 	.word	0x40020800
 8007570:	40020c00 	.word	0x40020c00
 8007574:	40021000 	.word	0x40021000
 8007578:	40021400 	.word	0x40021400
 800757c:	40021800 	.word	0x40021800
 8007580:	40021c00 	.word	0x40021c00
 8007584:	40022000 	.word	0x40022000
 8007588:	40022400 	.word	0x40022400
 800758c:	40013c00 	.word	0x40013c00

08007590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	887b      	ldrh	r3, [r7, #2]
 80075a2:	4013      	ands	r3, r2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075a8:	2301      	movs	r3, #1
 80075aa:	73fb      	strb	r3, [r7, #15]
 80075ac:	e001      	b.n	80075b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	807b      	strh	r3, [r7, #2]
 80075cc:	4613      	mov	r3, r2
 80075ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075d0:	787b      	ldrb	r3, [r7, #1]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075d6:	887a      	ldrh	r2, [r7, #2]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80075dc:	e003      	b.n	80075e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80075de:	887b      	ldrh	r3, [r7, #2]
 80075e0:	041a      	lsls	r2, r3, #16
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	619a      	str	r2, [r3, #24]
}
 80075e6:	bf00      	nop
 80075e8:	370c      	adds	r7, #12
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e07f      	b.n	8007706 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d106      	bne.n	8007620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f8a9 	bl	8007772 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2224      	movs	r2, #36	@ 0x24
 8007624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0201 	bic.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685a      	ldr	r2, [r3, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007644:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007654:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d107      	bne.n	800766e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800766a:	609a      	str	r2, [r3, #8]
 800766c:	e006      	b.n	800767c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800767a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d104      	bne.n	800768e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800768c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6859      	ldr	r1, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	4b1d      	ldr	r3, [pc, #116]	@ (8007710 <HAL_I2C_Init+0x11c>)
 800769a:	430b      	orrs	r3, r1
 800769c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691a      	ldr	r2, [r3, #16]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69d9      	ldr	r1, [r3, #28]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a1a      	ldr	r2, [r3, #32]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2220      	movs	r2, #32
 80076f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	02008000 	.word	0x02008000

08007714 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e021      	b.n	800776a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2224      	movs	r2, #36	@ 0x24
 800772a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0201 	bic.w	r2, r2, #1
 800773c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f821 	bl	8007786 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007786:	b480      	push	{r7}
 8007788:	b083      	sub	sp, #12
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	4608      	mov	r0, r1
 80077a6:	4611      	mov	r1, r2
 80077a8:	461a      	mov	r2, r3
 80077aa:	4603      	mov	r3, r0
 80077ac:	817b      	strh	r3, [r7, #10]
 80077ae:	460b      	mov	r3, r1
 80077b0:	813b      	strh	r3, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b20      	cmp	r3, #32
 80077c0:	f040 80f9 	bne.w	80079b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <HAL_I2C_Mem_Write+0x34>
 80077ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d105      	bne.n	80077dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e0ed      	b.n	80079b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d101      	bne.n	80077ea <HAL_I2C_Mem_Write+0x4e>
 80077e6:	2302      	movs	r3, #2
 80077e8:	e0e6      	b.n	80079b8 <HAL_I2C_Mem_Write+0x21c>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077f2:	f7fe f897 	bl	8005924 <HAL_GetTick>
 80077f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	2319      	movs	r3, #25
 80077fe:	2201      	movs	r2, #1
 8007800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fad1 	bl	8007dac <I2C_WaitOnFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e0d1      	b.n	80079b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2221      	movs	r2, #33	@ 0x21
 8007818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2240      	movs	r2, #64	@ 0x40
 8007820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6a3a      	ldr	r2, [r7, #32]
 800782e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800783c:	88f8      	ldrh	r0, [r7, #6]
 800783e:	893a      	ldrh	r2, [r7, #8]
 8007840:	8979      	ldrh	r1, [r7, #10]
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	4603      	mov	r3, r0
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 f9e1 	bl	8007c14 <I2C_RequestMemoryWrite>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e0a9      	b.n	80079b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007868:	b29b      	uxth	r3, r3
 800786a:	2bff      	cmp	r3, #255	@ 0xff
 800786c:	d90e      	bls.n	800788c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	22ff      	movs	r2, #255	@ 0xff
 8007872:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007878:	b2da      	uxtb	r2, r3
 800787a:	8979      	ldrh	r1, [r7, #10]
 800787c:	2300      	movs	r3, #0
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fc2d 	bl	80080e4 <I2C_TransferConfig>
 800788a:	e00f      	b.n	80078ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007890:	b29a      	uxth	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800789a:	b2da      	uxtb	r2, r3
 800789c:	8979      	ldrh	r1, [r7, #10]
 800789e:	2300      	movs	r3, #0
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 fc1c 	bl	80080e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fabb 	bl	8007e2c <I2C_WaitOnTXISFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e07b      	b.n	80079b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d0:	1c5a      	adds	r2, r3, #1
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078e8:	3b01      	subs	r3, #1
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d034      	beq.n	8007964 <HAL_I2C_Mem_Write+0x1c8>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d130      	bne.n	8007964 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	2200      	movs	r2, #0
 800790a:	2180      	movs	r1, #128	@ 0x80
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fa4d 	bl	8007dac <I2C_WaitOnFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007918:	2301      	movs	r3, #1
 800791a:	e04d      	b.n	80079b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007920:	b29b      	uxth	r3, r3
 8007922:	2bff      	cmp	r3, #255	@ 0xff
 8007924:	d90e      	bls.n	8007944 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	22ff      	movs	r2, #255	@ 0xff
 800792a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007930:	b2da      	uxtb	r2, r3
 8007932:	8979      	ldrh	r1, [r7, #10]
 8007934:	2300      	movs	r3, #0
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fbd1 	bl	80080e4 <I2C_TransferConfig>
 8007942:	e00f      	b.n	8007964 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007948:	b29a      	uxth	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007952:	b2da      	uxtb	r2, r3
 8007954:	8979      	ldrh	r1, [r7, #10]
 8007956:	2300      	movs	r3, #0
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fbc0 	bl	80080e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d19e      	bne.n	80078ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 fa9a 	bl	8007eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e01a      	b.n	80079b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2220      	movs	r2, #32
 8007988:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6859      	ldr	r1, [r3, #4]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	4b0a      	ldr	r3, [pc, #40]	@ (80079c0 <HAL_I2C_Mem_Write+0x224>)
 8007996:	400b      	ands	r3, r1
 8007998:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e000      	b.n	80079b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	fe00e800 	.word	0xfe00e800

080079c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	4608      	mov	r0, r1
 80079ce:	4611      	mov	r1, r2
 80079d0:	461a      	mov	r2, r3
 80079d2:	4603      	mov	r3, r0
 80079d4:	817b      	strh	r3, [r7, #10]
 80079d6:	460b      	mov	r3, r1
 80079d8:	813b      	strh	r3, [r7, #8]
 80079da:	4613      	mov	r3, r2
 80079dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	f040 80fd 	bne.w	8007be6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <HAL_I2C_Mem_Read+0x34>
 80079f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d105      	bne.n	8007a04 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e0f1      	b.n	8007be8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_I2C_Mem_Read+0x4e>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e0ea      	b.n	8007be8 <HAL_I2C_Mem_Read+0x224>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a1a:	f7fd ff83 	bl	8005924 <HAL_GetTick>
 8007a1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	2319      	movs	r3, #25
 8007a26:	2201      	movs	r2, #1
 8007a28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f9bd 	bl	8007dac <I2C_WaitOnFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e0d5      	b.n	8007be8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2222      	movs	r2, #34	@ 0x22
 8007a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2240      	movs	r2, #64	@ 0x40
 8007a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a64:	88f8      	ldrh	r0, [r7, #6]
 8007a66:	893a      	ldrh	r2, [r7, #8]
 8007a68:	8979      	ldrh	r1, [r7, #10]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	4603      	mov	r3, r0
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 f921 	bl	8007cbc <I2C_RequestMemoryRead>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0ad      	b.n	8007be8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2bff      	cmp	r3, #255	@ 0xff
 8007a94:	d90e      	bls.n	8007ab4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	22ff      	movs	r2, #255	@ 0xff
 8007a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	8979      	ldrh	r1, [r7, #10]
 8007aa4:	4b52      	ldr	r3, [pc, #328]	@ (8007bf0 <HAL_I2C_Mem_Read+0x22c>)
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 fb19 	bl	80080e4 <I2C_TransferConfig>
 8007ab2:	e00f      	b.n	8007ad4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab8:	b29a      	uxth	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	8979      	ldrh	r1, [r7, #10]
 8007ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8007bf0 <HAL_I2C_Mem_Read+0x22c>)
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 fb08 	bl	80080e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ada:	2200      	movs	r2, #0
 8007adc:	2104      	movs	r1, #4
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f964 	bl	8007dac <I2C_WaitOnFlagUntilTimeout>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e07c      	b.n	8007be8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007af8:	b2d2      	uxtb	r2, r2
 8007afa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	1c5a      	adds	r2, r3, #1
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d034      	beq.n	8007b94 <HAL_I2C_Mem_Read+0x1d0>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d130      	bne.n	8007b94 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2180      	movs	r1, #128	@ 0x80
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f935 	bl	8007dac <I2C_WaitOnFlagUntilTimeout>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e04d      	b.n	8007be8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2bff      	cmp	r3, #255	@ 0xff
 8007b54:	d90e      	bls.n	8007b74 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	22ff      	movs	r2, #255	@ 0xff
 8007b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	8979      	ldrh	r1, [r7, #10]
 8007b64:	2300      	movs	r3, #0
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 fab9 	bl	80080e4 <I2C_TransferConfig>
 8007b72:	e00f      	b.n	8007b94 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	8979      	ldrh	r1, [r7, #10]
 8007b86:	2300      	movs	r3, #0
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 faa8 	bl	80080e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d19a      	bne.n	8007ad4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 f982 	bl	8007eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e01a      	b.n	8007be8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2220      	movs	r2, #32
 8007bb8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6859      	ldr	r1, [r3, #4]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf4 <HAL_I2C_Mem_Read+0x230>)
 8007bc6:	400b      	ands	r3, r1
 8007bc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e000      	b.n	8007be8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007be6:	2302      	movs	r3, #2
  }
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	80002400 	.word	0x80002400
 8007bf4:	fe00e800 	.word	0xfe00e800

08007bf8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c06:	b2db      	uxtb	r3, r3
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af02      	add	r7, sp, #8
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	4608      	mov	r0, r1
 8007c1e:	4611      	mov	r1, r2
 8007c20:	461a      	mov	r2, r3
 8007c22:	4603      	mov	r3, r0
 8007c24:	817b      	strh	r3, [r7, #10]
 8007c26:	460b      	mov	r3, r1
 8007c28:	813b      	strh	r3, [r7, #8]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	8979      	ldrh	r1, [r7, #10]
 8007c34:	4b20      	ldr	r3, [pc, #128]	@ (8007cb8 <I2C_RequestMemoryWrite+0xa4>)
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fa51 	bl	80080e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	69b9      	ldr	r1, [r7, #24]
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 f8f0 	bl	8007e2c <I2C_WaitOnTXISFlagUntilTimeout>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e02c      	b.n	8007cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c56:	88fb      	ldrh	r3, [r7, #6]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d105      	bne.n	8007c68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c5c:	893b      	ldrh	r3, [r7, #8]
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c66:	e015      	b.n	8007c94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c68:	893b      	ldrh	r3, [r7, #8]
 8007c6a:	0a1b      	lsrs	r3, r3, #8
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	69b9      	ldr	r1, [r7, #24]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f8d6 	bl	8007e2c <I2C_WaitOnTXISFlagUntilTimeout>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	e012      	b.n	8007cb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c8a:	893b      	ldrh	r3, [r7, #8]
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2180      	movs	r1, #128	@ 0x80
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 f884 	bl	8007dac <I2C_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	80002000 	.word	0x80002000

08007cbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	817b      	strh	r3, [r7, #10]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	813b      	strh	r3, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007cd6:	88fb      	ldrh	r3, [r7, #6]
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	8979      	ldrh	r1, [r7, #10]
 8007cdc:	4b20      	ldr	r3, [pc, #128]	@ (8007d60 <I2C_RequestMemoryRead+0xa4>)
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f9fe 	bl	80080e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	69b9      	ldr	r1, [r7, #24]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f89d 	bl	8007e2c <I2C_WaitOnTXISFlagUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e02c      	b.n	8007d56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d105      	bne.n	8007d0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d02:	893b      	ldrh	r3, [r7, #8]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d0c:	e015      	b.n	8007d3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d0e:	893b      	ldrh	r3, [r7, #8]
 8007d10:	0a1b      	lsrs	r3, r3, #8
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	69b9      	ldr	r1, [r7, #24]
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f883 	bl	8007e2c <I2C_WaitOnTXISFlagUntilTimeout>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e012      	b.n	8007d56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d30:	893b      	ldrh	r3, [r7, #8]
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2200      	movs	r2, #0
 8007d42:	2140      	movs	r1, #64	@ 0x40
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 f831 	bl	8007dac <I2C_WaitOnFlagUntilTimeout>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d001      	beq.n	8007d54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	80002000 	.word	0x80002000

08007d64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f003 0302 	and.w	r3, r3, #2
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d103      	bne.n	8007d82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d007      	beq.n	8007da0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	619a      	str	r2, [r3, #24]
  }
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	4613      	mov	r3, r2
 8007dba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dbc:	e022      	b.n	8007e04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dc4:	d01e      	beq.n	8007e04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dc6:	f7fd fdad 	bl	8005924 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d302      	bcc.n	8007ddc <I2C_WaitOnFlagUntilTimeout+0x30>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d113      	bne.n	8007e04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de0:	f043 0220 	orr.w	r2, r3, #32
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2220      	movs	r2, #32
 8007dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e00f      	b.n	8007e24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	bf0c      	ite	eq
 8007e14:	2301      	moveq	r3, #1
 8007e16:	2300      	movne	r3, #0
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	79fb      	ldrb	r3, [r7, #7]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d0cd      	beq.n	8007dbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e38:	e02c      	b.n	8007e94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f870 	bl	8007f24 <I2C_IsErrorOccurred>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e02a      	b.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e54:	d01e      	beq.n	8007e94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e56:	f7fd fd65 	bl	8005924 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d302      	bcc.n	8007e6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d113      	bne.n	8007e94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e70:	f043 0220 	orr.w	r2, r3, #32
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	e007      	b.n	8007ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d1cb      	bne.n	8007e3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eb8:	e028      	b.n	8007f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 f830 	bl	8007f24 <I2C_IsErrorOccurred>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e026      	b.n	8007f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ece:	f7fd fd29 	bl	8005924 <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d302      	bcc.n	8007ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d113      	bne.n	8007f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ee8:	f043 0220 	orr.w	r2, r3, #32
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e007      	b.n	8007f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	f003 0320 	and.w	r3, r3, #32
 8007f16:	2b20      	cmp	r3, #32
 8007f18:	d1cf      	bne.n	8007eba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08a      	sub	sp, #40	@ 0x28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	f003 0310 	and.w	r3, r3, #16
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d068      	beq.n	8008022 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2210      	movs	r2, #16
 8007f56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f58:	e049      	b.n	8007fee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f60:	d045      	beq.n	8007fee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f62:	f7fd fcdf 	bl	8005924 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d302      	bcc.n	8007f78 <I2C_IsErrorOccurred+0x54>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d13a      	bne.n	8007fee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f9a:	d121      	bne.n	8007fe0 <I2C_IsErrorOccurred+0xbc>
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fa2:	d01d      	beq.n	8007fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007fa4:	7cfb      	ldrb	r3, [r7, #19]
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d01a      	beq.n	8007fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007fba:	f7fd fcb3 	bl	8005924 <HAL_GetTick>
 8007fbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fc0:	e00e      	b.n	8007fe0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007fc2:	f7fd fcaf 	bl	8005924 <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b19      	cmp	r3, #25
 8007fce:	d907      	bls.n	8007fe0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	f043 0320 	orr.w	r3, r3, #32
 8007fd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007fde:	e006      	b.n	8007fee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f003 0320 	and.w	r3, r3, #32
 8007fea:	2b20      	cmp	r3, #32
 8007fec:	d1e9      	bne.n	8007fc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b20      	cmp	r3, #32
 8007ffa:	d003      	beq.n	8008004 <I2C_IsErrorOccurred+0xe0>
 8007ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0aa      	beq.n	8007f5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2220      	movs	r2, #32
 8008012:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	f043 0304 	orr.w	r3, r3, #4
 800801a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00b      	beq.n	800804c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	f043 0301 	orr.w	r3, r3, #1
 800803a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00b      	beq.n	800806e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008078:	6a3b      	ldr	r3, [r7, #32]
 800807a:	f043 0302 	orr.w	r3, r3, #2
 800807e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01c      	beq.n	80080d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff fe63 	bl	8007d64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6859      	ldr	r1, [r3, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	4b0d      	ldr	r3, [pc, #52]	@ (80080e0 <I2C_IsErrorOccurred+0x1bc>)
 80080aa:	400b      	ands	r3, r1
 80080ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	431a      	orrs	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2220      	movs	r2, #32
 80080be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80080d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3728      	adds	r7, #40	@ 0x28
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	fe00e800 	.word	0xfe00e800

080080e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	817b      	strh	r3, [r7, #10]
 80080f2:	4613      	mov	r3, r2
 80080f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080f6:	897b      	ldrh	r3, [r7, #10]
 80080f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080fc:	7a7b      	ldrb	r3, [r7, #9]
 80080fe:	041b      	lsls	r3, r3, #16
 8008100:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008104:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	4313      	orrs	r3, r2
 800810e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008112:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	0d5b      	lsrs	r3, r3, #21
 800811e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008122:	4b08      	ldr	r3, [pc, #32]	@ (8008144 <I2C_TransferConfig+0x60>)
 8008124:	430b      	orrs	r3, r1
 8008126:	43db      	mvns	r3, r3
 8008128:	ea02 0103 	and.w	r1, r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	430a      	orrs	r2, r1
 8008134:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	03ff63ff 	.word	0x03ff63ff

08008148 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	e0bf      	b.n	80082da <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fa ff5e 	bl	8003030 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800818a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6999      	ldr	r1, [r3, #24]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081a0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	691b      	ldr	r3, [r3, #16]
 80081a6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	430a      	orrs	r2, r1
 80081ae:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6899      	ldr	r1, [r3, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	4b4a      	ldr	r3, [pc, #296]	@ (80082e4 <HAL_LTDC_Init+0x19c>)
 80081bc:	400b      	ands	r3, r1
 80081be:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6899      	ldr	r1, [r3, #8]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	431a      	orrs	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68d9      	ldr	r1, [r3, #12]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	4b3e      	ldr	r3, [pc, #248]	@ (80082e4 <HAL_LTDC_Init+0x19c>)
 80081ea:	400b      	ands	r3, r1
 80081ec:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	041b      	lsls	r3, r3, #16
 80081f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68d9      	ldr	r1, [r3, #12]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a1a      	ldr	r2, [r3, #32]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	431a      	orrs	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6919      	ldr	r1, [r3, #16]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	4b33      	ldr	r3, [pc, #204]	@ (80082e4 <HAL_LTDC_Init+0x19c>)
 8008218:	400b      	ands	r3, r1
 800821a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	041b      	lsls	r3, r3, #16
 8008222:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6919      	ldr	r1, [r3, #16]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	431a      	orrs	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6959      	ldr	r1, [r3, #20]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	4b27      	ldr	r3, [pc, #156]	@ (80082e4 <HAL_LTDC_Init+0x19c>)
 8008246:	400b      	ands	r3, r1
 8008248:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824e:	041b      	lsls	r3, r3, #16
 8008250:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6959      	ldr	r1, [r3, #20]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	431a      	orrs	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800826e:	021b      	lsls	r3, r3, #8
 8008270:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008278:	041b      	lsls	r3, r3, #16
 800827a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800828a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800829e:	431a      	orrs	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0206 	orr.w	r2, r2, #6
 80082b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f042 0201 	orr.w	r2, r2, #1
 80082c6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	f000f800 	.word	0xf000f800

080082e8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082fe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d023      	beq.n	8008352 <HAL_LTDC_IRQHandler+0x6a>
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01e      	beq.n	8008352 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0204 	bic.w	r2, r2, #4
 8008322:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2204      	movs	r2, #4
 800832a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008332:	f043 0201 	orr.w	r2, r3, #1
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2204      	movs	r2, #4
 8008340:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f86f 	bl	8008430 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b00      	cmp	r3, #0
 800835a:	d023      	beq.n	80083a4 <HAL_LTDC_IRQHandler+0xbc>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01e      	beq.n	80083a4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f022 0202 	bic.w	r2, r2, #2
 8008374:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2202      	movs	r2, #2
 800837c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008384:	f043 0202 	orr.w	r2, r3, #2
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2204      	movs	r2, #4
 8008392:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f846 	bl	8008430 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01b      	beq.n	80083e6 <HAL_LTDC_IRQHandler+0xfe>
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d016      	beq.n	80083e6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0201 	bic.w	r2, r2, #1
 80083c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2201      	movs	r2, #1
 80083ce:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f82f 	bl	8008444 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01b      	beq.n	8008428 <HAL_LTDC_IRQHandler+0x140>
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f003 0308 	and.w	r3, r3, #8
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d016      	beq.n	8008428 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0208 	bic.w	r2, r2, #8
 8008408:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2208      	movs	r2, #8
 8008410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f818 	bl	8008458 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008428:	bf00      	nop
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008438:	bf00      	nop
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800846c:	b5b0      	push	{r4, r5, r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800847e:	2b01      	cmp	r3, #1
 8008480:	d101      	bne.n	8008486 <HAL_LTDC_ConfigLayer+0x1a>
 8008482:	2302      	movs	r3, #2
 8008484:	e02c      	b.n	80084e0 <HAL_LTDC_ConfigLayer+0x74>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2202      	movs	r2, #2
 8008492:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2134      	movs	r1, #52	@ 0x34
 800849c:	fb01 f303 	mul.w	r3, r1, r3
 80084a0:	4413      	add	r3, r2
 80084a2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4614      	mov	r4, r2
 80084aa:	461d      	mov	r5, r3
 80084ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f000 f81f 	bl	8008504 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2201      	movs	r2, #1
 80084cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bdb0      	pop	{r4, r5, r7, pc}

080084e8 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80084f6:	b2db      	uxtb	r3, r3
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008504:	b480      	push	{r7}
 8008506:	b089      	sub	sp, #36	@ 0x24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	685a      	ldr	r2, [r3, #4]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	0c1b      	lsrs	r3, r3, #16
 800851c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008520:	4413      	add	r3, r2
 8008522:	041b      	lsls	r3, r3, #16
 8008524:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	01db      	lsls	r3, r3, #7
 8008530:	4413      	add	r3, r2
 8008532:	3384      	adds	r3, #132	@ 0x84
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	4611      	mov	r1, r2
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	01d2      	lsls	r2, r2, #7
 8008540:	440a      	add	r2, r1
 8008542:	3284      	adds	r2, #132	@ 0x84
 8008544:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008548:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	0c1b      	lsrs	r3, r3, #16
 8008556:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800855a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800855c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4619      	mov	r1, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	01db      	lsls	r3, r3, #7
 8008568:	440b      	add	r3, r1
 800856a:	3384      	adds	r3, #132	@ 0x84
 800856c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008572:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008582:	4413      	add	r3, r2
 8008584:	041b      	lsls	r3, r3, #16
 8008586:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	01db      	lsls	r3, r3, #7
 8008592:	4413      	add	r3, r2
 8008594:	3384      	adds	r3, #132	@ 0x84
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	6812      	ldr	r2, [r2, #0]
 800859c:	4611      	mov	r1, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	01d2      	lsls	r2, r2, #7
 80085a2:	440a      	add	r2, r1
 80085a4:	3284      	adds	r2, #132	@ 0x84
 80085a6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80085aa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085ba:	4413      	add	r3, r2
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4619      	mov	r1, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	01db      	lsls	r3, r3, #7
 80085c8:	440b      	add	r3, r1
 80085ca:	3384      	adds	r3, #132	@ 0x84
 80085cc:	4619      	mov	r1, r3
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	01db      	lsls	r3, r3, #7
 80085de:	4413      	add	r3, r2
 80085e0:	3384      	adds	r3, #132	@ 0x84
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	6812      	ldr	r2, [r2, #0]
 80085e8:	4611      	mov	r1, r2
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	01d2      	lsls	r2, r2, #7
 80085ee:	440a      	add	r2, r1
 80085f0:	3284      	adds	r2, #132	@ 0x84
 80085f2:	f023 0307 	bic.w	r3, r3, #7
 80085f6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	01db      	lsls	r3, r3, #7
 8008602:	4413      	add	r3, r2
 8008604:	3384      	adds	r3, #132	@ 0x84
 8008606:	461a      	mov	r2, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008614:	021b      	lsls	r3, r3, #8
 8008616:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800861e:	041b      	lsls	r3, r3, #16
 8008620:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	061b      	lsls	r3, r3, #24
 8008628:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	01db      	lsls	r3, r3, #7
 8008634:	4413      	add	r3, r2
 8008636:	3384      	adds	r3, #132	@ 0x84
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	01db      	lsls	r3, r3, #7
 8008644:	4413      	add	r3, r2
 8008646:	3384      	adds	r3, #132	@ 0x84
 8008648:	461a      	mov	r2, r3
 800864a:	2300      	movs	r3, #0
 800864c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008654:	461a      	mov	r2, r3
 8008656:	69fb      	ldr	r3, [r7, #28]
 8008658:	431a      	orrs	r2, r3
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	431a      	orrs	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4619      	mov	r1, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	01db      	lsls	r3, r3, #7
 8008668:	440b      	add	r3, r1
 800866a:	3384      	adds	r3, #132	@ 0x84
 800866c:	4619      	mov	r1, r3
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	01db      	lsls	r3, r3, #7
 800867e:	4413      	add	r3, r2
 8008680:	3384      	adds	r3, #132	@ 0x84
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	4611      	mov	r1, r2
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	01d2      	lsls	r2, r2, #7
 800868e:	440a      	add	r2, r1
 8008690:	3284      	adds	r2, #132	@ 0x84
 8008692:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008696:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	01db      	lsls	r3, r3, #7
 80086a2:	4413      	add	r3, r2
 80086a4:	3384      	adds	r3, #132	@ 0x84
 80086a6:	461a      	mov	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	01db      	lsls	r3, r3, #7
 80086b8:	4413      	add	r3, r2
 80086ba:	3384      	adds	r3, #132	@ 0x84
 80086bc:	69da      	ldr	r2, [r3, #28]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4619      	mov	r1, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	01db      	lsls	r3, r3, #7
 80086c8:	440b      	add	r3, r1
 80086ca:	3384      	adds	r3, #132	@ 0x84
 80086cc:	4619      	mov	r1, r3
 80086ce:	4b58      	ldr	r3, [pc, #352]	@ (8008830 <LTDC_SetConfig+0x32c>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	69da      	ldr	r2, [r3, #28]
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	6809      	ldr	r1, [r1, #0]
 80086e0:	4608      	mov	r0, r1
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	01c9      	lsls	r1, r1, #7
 80086e6:	4401      	add	r1, r0
 80086e8:	3184      	adds	r1, #132	@ 0x84
 80086ea:	4313      	orrs	r3, r2
 80086ec:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	01db      	lsls	r3, r3, #7
 80086f8:	4413      	add	r3, r2
 80086fa:	3384      	adds	r3, #132	@ 0x84
 80086fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	01db      	lsls	r3, r3, #7
 8008708:	4413      	add	r3, r2
 800870a:	3384      	adds	r3, #132	@ 0x84
 800870c:	461a      	mov	r2, r3
 800870e:	2300      	movs	r3, #0
 8008710:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	01db      	lsls	r3, r3, #7
 800871c:	4413      	add	r3, r2
 800871e:	3384      	adds	r3, #132	@ 0x84
 8008720:	461a      	mov	r2, r3
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008726:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d102      	bne.n	8008736 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008730:	2304      	movs	r3, #4
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	e01b      	b.n	800876e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d102      	bne.n	8008744 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800873e:	2303      	movs	r3, #3
 8008740:	61fb      	str	r3, [r7, #28]
 8008742:	e014      	b.n	800876e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	2b04      	cmp	r3, #4
 800874a:	d00b      	beq.n	8008764 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008750:	2b02      	cmp	r3, #2
 8008752:	d007      	beq.n	8008764 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008758:	2b03      	cmp	r3, #3
 800875a:	d003      	beq.n	8008764 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008760:	2b07      	cmp	r3, #7
 8008762:	d102      	bne.n	800876a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008764:	2302      	movs	r3, #2
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e001      	b.n	800876e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800876a:	2301      	movs	r3, #1
 800876c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	01db      	lsls	r3, r3, #7
 8008778:	4413      	add	r3, r2
 800877a:	3384      	adds	r3, #132	@ 0x84
 800877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	6812      	ldr	r2, [r2, #0]
 8008782:	4611      	mov	r1, r2
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	01d2      	lsls	r2, r2, #7
 8008788:	440a      	add	r2, r1
 800878a:	3284      	adds	r2, #132	@ 0x84
 800878c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008790:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	fb02 f303 	mul.w	r3, r2, r3
 800879c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	6859      	ldr	r1, [r3, #4]
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	1acb      	subs	r3, r1, r3
 80087a8:	69f9      	ldr	r1, [r7, #28]
 80087aa:	fb01 f303 	mul.w	r3, r1, r3
 80087ae:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80087b0:	68f9      	ldr	r1, [r7, #12]
 80087b2:	6809      	ldr	r1, [r1, #0]
 80087b4:	4608      	mov	r0, r1
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	01c9      	lsls	r1, r1, #7
 80087ba:	4401      	add	r1, r0
 80087bc:	3184      	adds	r1, #132	@ 0x84
 80087be:	4313      	orrs	r3, r2
 80087c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	01db      	lsls	r3, r3, #7
 80087cc:	4413      	add	r3, r2
 80087ce:	3384      	adds	r3, #132	@ 0x84
 80087d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4619      	mov	r1, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	01db      	lsls	r3, r3, #7
 80087dc:	440b      	add	r3, r1
 80087de:	3384      	adds	r3, #132	@ 0x84
 80087e0:	4619      	mov	r1, r3
 80087e2:	4b14      	ldr	r3, [pc, #80]	@ (8008834 <LTDC_SetConfig+0x330>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	461a      	mov	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	01db      	lsls	r3, r3, #7
 80087f2:	4413      	add	r3, r2
 80087f4:	3384      	adds	r3, #132	@ 0x84
 80087f6:	461a      	mov	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087fc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	01db      	lsls	r3, r3, #7
 8008808:	4413      	add	r3, r2
 800880a:	3384      	adds	r3, #132	@ 0x84
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	4611      	mov	r1, r2
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	01d2      	lsls	r2, r2, #7
 8008818:	440a      	add	r2, r1
 800881a:	3284      	adds	r2, #132	@ 0x84
 800881c:	f043 0301 	orr.w	r3, r3, #1
 8008820:	6013      	str	r3, [r2, #0]
}
 8008822:	bf00      	nop
 8008824:	3724      	adds	r7, #36	@ 0x24
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	fffff8f8 	.word	0xfffff8f8
 8008834:	fffff800 	.word	0xfffff800

08008838 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800883c:	4b05      	ldr	r3, [pc, #20]	@ (8008854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a04      	ldr	r2, [pc, #16]	@ (8008854 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008846:	6013      	str	r3, [r2, #0]
}
 8008848:	bf00      	nop
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40007000 	.word	0x40007000

08008858 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800885e:	2300      	movs	r3, #0
 8008860:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008862:	4b23      	ldr	r3, [pc, #140]	@ (80088f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008866:	4a22      	ldr	r2, [pc, #136]	@ (80088f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800886c:	6413      	str	r3, [r2, #64]	@ 0x40
 800886e:	4b20      	ldr	r3, [pc, #128]	@ (80088f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008876:	603b      	str	r3, [r7, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800887a:	4b1e      	ldr	r3, [pc, #120]	@ (80088f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a1d      	ldr	r2, [pc, #116]	@ (80088f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008884:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008886:	f7fd f84d 	bl	8005924 <HAL_GetTick>
 800888a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800888c:	e009      	b.n	80088a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800888e:	f7fd f849 	bl	8005924 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800889c:	d901      	bls.n	80088a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e022      	b.n	80088e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80088a2:	4b14      	ldr	r3, [pc, #80]	@ (80088f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088ae:	d1ee      	bne.n	800888e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80088b0:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a0f      	ldr	r2, [pc, #60]	@ (80088f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088bc:	f7fd f832 	bl	8005924 <HAL_GetTick>
 80088c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80088c2:	e009      	b.n	80088d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80088c4:	f7fd f82e 	bl	8005924 <HAL_GetTick>
 80088c8:	4602      	mov	r2, r0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088d2:	d901      	bls.n	80088d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e007      	b.n	80088e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80088d8:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088e4:	d1ee      	bne.n	80088c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	40023800 	.word	0x40023800
 80088f4:	40007000 	.word	0x40007000

080088f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008900:	2300      	movs	r3, #0
 8008902:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e291      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 8087 	beq.w	8008a2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800891c:	4b96      	ldr	r3, [pc, #600]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 030c 	and.w	r3, r3, #12
 8008924:	2b04      	cmp	r3, #4
 8008926:	d00c      	beq.n	8008942 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008928:	4b93      	ldr	r3, [pc, #588]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f003 030c 	and.w	r3, r3, #12
 8008930:	2b08      	cmp	r3, #8
 8008932:	d112      	bne.n	800895a <HAL_RCC_OscConfig+0x62>
 8008934:	4b90      	ldr	r3, [pc, #576]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800893c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008940:	d10b      	bne.n	800895a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008942:	4b8d      	ldr	r3, [pc, #564]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d06c      	beq.n	8008a28 <HAL_RCC_OscConfig+0x130>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d168      	bne.n	8008a28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e26b      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008962:	d106      	bne.n	8008972 <HAL_RCC_OscConfig+0x7a>
 8008964:	4b84      	ldr	r3, [pc, #528]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a83      	ldr	r2, [pc, #524]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 800896a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	e02e      	b.n	80089d0 <HAL_RCC_OscConfig+0xd8>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10c      	bne.n	8008994 <HAL_RCC_OscConfig+0x9c>
 800897a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008980:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	4b7c      	ldr	r3, [pc, #496]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a7b      	ldr	r2, [pc, #492]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 800898c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	e01d      	b.n	80089d0 <HAL_RCC_OscConfig+0xd8>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800899c:	d10c      	bne.n	80089b8 <HAL_RCC_OscConfig+0xc0>
 800899e:	4b76      	ldr	r3, [pc, #472]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a75      	ldr	r2, [pc, #468]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	4b73      	ldr	r3, [pc, #460]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a72      	ldr	r2, [pc, #456]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	e00b      	b.n	80089d0 <HAL_RCC_OscConfig+0xd8>
 80089b8:	4b6f      	ldr	r3, [pc, #444]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a6e      	ldr	r2, [pc, #440]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089c2:	6013      	str	r3, [r2, #0]
 80089c4:	4b6c      	ldr	r3, [pc, #432]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a6b      	ldr	r2, [pc, #428]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80089ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d013      	beq.n	8008a00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7fc ffa4 	bl	8005924 <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089e0:	f7fc ffa0 	bl	8005924 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b64      	cmp	r3, #100	@ 0x64
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e21f      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089f2:	4b61      	ldr	r3, [pc, #388]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0f0      	beq.n	80089e0 <HAL_RCC_OscConfig+0xe8>
 80089fe:	e014      	b.n	8008a2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a00:	f7fc ff90 	bl	8005924 <HAL_GetTick>
 8008a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a06:	e008      	b.n	8008a1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a08:	f7fc ff8c 	bl	8005924 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b64      	cmp	r3, #100	@ 0x64
 8008a14:	d901      	bls.n	8008a1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e20b      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a1a:	4b57      	ldr	r3, [pc, #348]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1f0      	bne.n	8008a08 <HAL_RCC_OscConfig+0x110>
 8008a26:	e000      	b.n	8008a2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d069      	beq.n	8008b0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a36:	4b50      	ldr	r3, [pc, #320]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f003 030c 	and.w	r3, r3, #12
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a42:	4b4d      	ldr	r3, [pc, #308]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f003 030c 	and.w	r3, r3, #12
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d11c      	bne.n	8008a88 <HAL_RCC_OscConfig+0x190>
 8008a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d116      	bne.n	8008a88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a5a:	4b47      	ldr	r3, [pc, #284]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0302 	and.w	r3, r3, #2
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <HAL_RCC_OscConfig+0x17a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d001      	beq.n	8008a72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e1df      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a72:	4b41      	ldr	r3, [pc, #260]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	493d      	ldr	r1, [pc, #244]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a86:	e040      	b.n	8008b0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d023      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a90:	4b39      	ldr	r3, [pc, #228]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a38      	ldr	r2, [pc, #224]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9c:	f7fc ff42 	bl	8005924 <HAL_GetTick>
 8008aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aa4:	f7fc ff3e 	bl	8005924 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e1bd      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ab6:	4b30      	ldr	r3, [pc, #192]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0f0      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	4929      	ldr	r1, [pc, #164]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	600b      	str	r3, [r1, #0]
 8008ad6:	e018      	b.n	8008b0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ad8:	4b27      	ldr	r3, [pc, #156]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a26      	ldr	r2, [pc, #152]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008ade:	f023 0301 	bic.w	r3, r3, #1
 8008ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae4:	f7fc ff1e 	bl	8005924 <HAL_GetTick>
 8008ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aec:	f7fc ff1a 	bl	8005924 <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e199      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008afe:	4b1e      	ldr	r3, [pc, #120]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1f0      	bne.n	8008aec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0308 	and.w	r3, r3, #8
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d038      	beq.n	8008b88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d019      	beq.n	8008b52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b1e:	4b16      	ldr	r3, [pc, #88]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b22:	4a15      	ldr	r2, [pc, #84]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008b24:	f043 0301 	orr.w	r3, r3, #1
 8008b28:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b2a:	f7fc fefb 	bl	8005924 <HAL_GetTick>
 8008b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b30:	e008      	b.n	8008b44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b32:	f7fc fef7 	bl	8005924 <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d901      	bls.n	8008b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e176      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b44:	4b0c      	ldr	r3, [pc, #48]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d0f0      	beq.n	8008b32 <HAL_RCC_OscConfig+0x23a>
 8008b50:	e01a      	b.n	8008b88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b52:	4b09      	ldr	r3, [pc, #36]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b56:	4a08      	ldr	r2, [pc, #32]	@ (8008b78 <HAL_RCC_OscConfig+0x280>)
 8008b58:	f023 0301 	bic.w	r3, r3, #1
 8008b5c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b5e:	f7fc fee1 	bl	8005924 <HAL_GetTick>
 8008b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b64:	e00a      	b.n	8008b7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b66:	f7fc fedd 	bl	8005924 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d903      	bls.n	8008b7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e15c      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
 8008b78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b7c:	4b91      	ldr	r3, [pc, #580]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1ee      	bne.n	8008b66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80a4 	beq.w	8008cde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b96:	4b8b      	ldr	r3, [pc, #556]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10d      	bne.n	8008bbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ba2:	4b88      	ldr	r3, [pc, #544]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba6:	4a87      	ldr	r2, [pc, #540]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8008bae:	4b85      	ldr	r3, [pc, #532]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bb6:	60bb      	str	r3, [r7, #8]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bbe:	4b82      	ldr	r3, [pc, #520]	@ (8008dc8 <HAL_RCC_OscConfig+0x4d0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d118      	bne.n	8008bfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008bca:	4b7f      	ldr	r3, [pc, #508]	@ (8008dc8 <HAL_RCC_OscConfig+0x4d0>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a7e      	ldr	r2, [pc, #504]	@ (8008dc8 <HAL_RCC_OscConfig+0x4d0>)
 8008bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bd6:	f7fc fea5 	bl	8005924 <HAL_GetTick>
 8008bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bdc:	e008      	b.n	8008bf0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bde:	f7fc fea1 	bl	8005924 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	2b64      	cmp	r3, #100	@ 0x64
 8008bea:	d901      	bls.n	8008bf0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e120      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008bf0:	4b75      	ldr	r3, [pc, #468]	@ (8008dc8 <HAL_RCC_OscConfig+0x4d0>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d0f0      	beq.n	8008bde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d106      	bne.n	8008c12 <HAL_RCC_OscConfig+0x31a>
 8008c04:	4b6f      	ldr	r3, [pc, #444]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c08:	4a6e      	ldr	r2, [pc, #440]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c0a:	f043 0301 	orr.w	r3, r3, #1
 8008c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c10:	e02d      	b.n	8008c6e <HAL_RCC_OscConfig+0x376>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10c      	bne.n	8008c34 <HAL_RCC_OscConfig+0x33c>
 8008c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c1e:	4a69      	ldr	r2, [pc, #420]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c20:	f023 0301 	bic.w	r3, r3, #1
 8008c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c26:	4b67      	ldr	r3, [pc, #412]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c2a:	4a66      	ldr	r2, [pc, #408]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c2c:	f023 0304 	bic.w	r3, r3, #4
 8008c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c32:	e01c      	b.n	8008c6e <HAL_RCC_OscConfig+0x376>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	2b05      	cmp	r3, #5
 8008c3a:	d10c      	bne.n	8008c56 <HAL_RCC_OscConfig+0x35e>
 8008c3c:	4b61      	ldr	r3, [pc, #388]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c40:	4a60      	ldr	r2, [pc, #384]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c42:	f043 0304 	orr.w	r3, r3, #4
 8008c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c48:	4b5e      	ldr	r3, [pc, #376]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c4c:	4a5d      	ldr	r2, [pc, #372]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c4e:	f043 0301 	orr.w	r3, r3, #1
 8008c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c54:	e00b      	b.n	8008c6e <HAL_RCC_OscConfig+0x376>
 8008c56:	4b5b      	ldr	r3, [pc, #364]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c5a:	4a5a      	ldr	r2, [pc, #360]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c5c:	f023 0301 	bic.w	r3, r3, #1
 8008c60:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c62:	4b58      	ldr	r3, [pc, #352]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c66:	4a57      	ldr	r2, [pc, #348]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c68:	f023 0304 	bic.w	r3, r3, #4
 8008c6c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d015      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c76:	f7fc fe55 	bl	8005924 <HAL_GetTick>
 8008c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c7c:	e00a      	b.n	8008c94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c7e:	f7fc fe51 	bl	8005924 <HAL_GetTick>
 8008c82:	4602      	mov	r2, r0
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d901      	bls.n	8008c94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e0ce      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c94:	4b4b      	ldr	r3, [pc, #300]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d0ee      	beq.n	8008c7e <HAL_RCC_OscConfig+0x386>
 8008ca0:	e014      	b.n	8008ccc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca2:	f7fc fe3f 	bl	8005924 <HAL_GetTick>
 8008ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ca8:	e00a      	b.n	8008cc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008caa:	f7fc fe3b 	bl	8005924 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d901      	bls.n	8008cc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	e0b8      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cc0:	4b40      	ldr	r3, [pc, #256]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cc4:	f003 0302 	and.w	r3, r3, #2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1ee      	bne.n	8008caa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d105      	bne.n	8008cde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cd2:	4b3c      	ldr	r3, [pc, #240]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd6:	4a3b      	ldr	r2, [pc, #236]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cdc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	f000 80a4 	beq.w	8008e30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ce8:	4b36      	ldr	r3, [pc, #216]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 030c 	and.w	r3, r3, #12
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d06b      	beq.n	8008dcc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d149      	bne.n	8008d90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cfc:	4b31      	ldr	r3, [pc, #196]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a30      	ldr	r2, [pc, #192]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008d02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d08:	f7fc fe0c 	bl	8005924 <HAL_GetTick>
 8008d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d10:	f7fc fe08 	bl	8005924 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e087      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d22:	4b28      	ldr	r3, [pc, #160]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	69da      	ldr	r2, [r3, #28]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	431a      	orrs	r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d3c:	019b      	lsls	r3, r3, #6
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d44:	085b      	lsrs	r3, r3, #1
 8008d46:	3b01      	subs	r3, #1
 8008d48:	041b      	lsls	r3, r3, #16
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d50:	061b      	lsls	r3, r3, #24
 8008d52:	4313      	orrs	r3, r2
 8008d54:	4a1b      	ldr	r2, [pc, #108]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008d56:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d5c:	4b19      	ldr	r3, [pc, #100]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a18      	ldr	r2, [pc, #96]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d68:	f7fc fddc 	bl	8005924 <HAL_GetTick>
 8008d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d6e:	e008      	b.n	8008d82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d70:	f7fc fdd8 	bl	8005924 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d901      	bls.n	8008d82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e057      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d82:	4b10      	ldr	r3, [pc, #64]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0f0      	beq.n	8008d70 <HAL_RCC_OscConfig+0x478>
 8008d8e:	e04f      	b.n	8008e30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d90:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a0b      	ldr	r2, [pc, #44]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008d96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d9c:	f7fc fdc2 	bl	8005924 <HAL_GetTick>
 8008da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008da2:	e008      	b.n	8008db6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008da4:	f7fc fdbe 	bl	8005924 <HAL_GetTick>
 8008da8:	4602      	mov	r2, r0
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d901      	bls.n	8008db6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e03d      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008db6:	4b03      	ldr	r3, [pc, #12]	@ (8008dc4 <HAL_RCC_OscConfig+0x4cc>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1f0      	bne.n	8008da4 <HAL_RCC_OscConfig+0x4ac>
 8008dc2:	e035      	b.n	8008e30 <HAL_RCC_OscConfig+0x538>
 8008dc4:	40023800 	.word	0x40023800
 8008dc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8008e3c <HAL_RCC_OscConfig+0x544>)
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d028      	beq.n	8008e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d121      	bne.n	8008e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d11a      	bne.n	8008e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d111      	bne.n	8008e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	3b01      	subs	r3, #1
 8008e16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d107      	bne.n	8008e2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d001      	beq.n	8008e30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e000      	b.n	8008e32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	40023800 	.word	0x40023800

08008e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e0d0      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e58:	4b6a      	ldr	r3, [pc, #424]	@ (8009004 <HAL_RCC_ClockConfig+0x1c4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 030f 	and.w	r3, r3, #15
 8008e60:	683a      	ldr	r2, [r7, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d910      	bls.n	8008e88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e66:	4b67      	ldr	r3, [pc, #412]	@ (8009004 <HAL_RCC_ClockConfig+0x1c4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f023 020f 	bic.w	r2, r3, #15
 8008e6e:	4965      	ldr	r1, [pc, #404]	@ (8009004 <HAL_RCC_ClockConfig+0x1c4>)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e76:	4b63      	ldr	r3, [pc, #396]	@ (8009004 <HAL_RCC_ClockConfig+0x1c4>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 030f 	and.w	r3, r3, #15
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d001      	beq.n	8008e88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e0b8      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d020      	beq.n	8008ed6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ea0:	4b59      	ldr	r3, [pc, #356]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	4a58      	ldr	r2, [pc, #352]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008ea6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008eaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0308 	and.w	r3, r3, #8
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d005      	beq.n	8008ec4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008eb8:	4b53      	ldr	r3, [pc, #332]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	4a52      	ldr	r2, [pc, #328]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008ebe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008ec2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ec4:	4b50      	ldr	r3, [pc, #320]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	494d      	ldr	r1, [pc, #308]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d040      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d107      	bne.n	8008efa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008eea:	4b47      	ldr	r3, [pc, #284]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d115      	bne.n	8008f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e07f      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d107      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f02:	4b41      	ldr	r3, [pc, #260]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e073      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f12:	4b3d      	ldr	r3, [pc, #244]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e06b      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f22:	4b39      	ldr	r3, [pc, #228]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f023 0203 	bic.w	r2, r3, #3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	4936      	ldr	r1, [pc, #216]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f34:	f7fc fcf6 	bl	8005924 <HAL_GetTick>
 8008f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f3a:	e00a      	b.n	8008f52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f3c:	f7fc fcf2 	bl	8005924 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d901      	bls.n	8008f52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008f4e:	2303      	movs	r3, #3
 8008f50:	e053      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f52:	4b2d      	ldr	r3, [pc, #180]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f003 020c 	and.w	r2, r3, #12
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d1eb      	bne.n	8008f3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f64:	4b27      	ldr	r3, [pc, #156]	@ (8009004 <HAL_RCC_ClockConfig+0x1c4>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 030f 	and.w	r3, r3, #15
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d210      	bcs.n	8008f94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f72:	4b24      	ldr	r3, [pc, #144]	@ (8009004 <HAL_RCC_ClockConfig+0x1c4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f023 020f 	bic.w	r2, r3, #15
 8008f7a:	4922      	ldr	r1, [pc, #136]	@ (8009004 <HAL_RCC_ClockConfig+0x1c4>)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f82:	4b20      	ldr	r3, [pc, #128]	@ (8009004 <HAL_RCC_ClockConfig+0x1c4>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d001      	beq.n	8008f94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e032      	b.n	8008ffa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0304 	and.w	r3, r3, #4
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d008      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fa0:	4b19      	ldr	r3, [pc, #100]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	4916      	ldr	r1, [pc, #88]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d009      	beq.n	8008fd2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008fbe:	4b12      	ldr	r3, [pc, #72]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	490e      	ldr	r1, [pc, #56]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008fd2:	f000 f821 	bl	8009018 <HAL_RCC_GetSysClockFreq>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8009008 <HAL_RCC_ClockConfig+0x1c8>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	091b      	lsrs	r3, r3, #4
 8008fde:	f003 030f 	and.w	r3, r3, #15
 8008fe2:	490a      	ldr	r1, [pc, #40]	@ (800900c <HAL_RCC_ClockConfig+0x1cc>)
 8008fe4:	5ccb      	ldrb	r3, [r1, r3]
 8008fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fea:	4a09      	ldr	r2, [pc, #36]	@ (8009010 <HAL_RCC_ClockConfig+0x1d0>)
 8008fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008fee:	4b09      	ldr	r3, [pc, #36]	@ (8009014 <HAL_RCC_ClockConfig+0x1d4>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fc f978 	bl	80052e8 <HAL_InitTick>

  return HAL_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	40023c00 	.word	0x40023c00
 8009008:	40023800 	.word	0x40023800
 800900c:	080205c0 	.word	0x080205c0
 8009010:	20000048 	.word	0x20000048
 8009014:	2000004c 	.word	0x2000004c

08009018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800901c:	b090      	sub	sp, #64	@ 0x40
 800901e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009020:	2300      	movs	r3, #0
 8009022:	637b      	str	r3, [r7, #52]	@ 0x34
 8009024:	2300      	movs	r3, #0
 8009026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009028:	2300      	movs	r3, #0
 800902a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009030:	4b59      	ldr	r3, [pc, #356]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x180>)
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	f003 030c 	and.w	r3, r3, #12
 8009038:	2b08      	cmp	r3, #8
 800903a:	d00d      	beq.n	8009058 <HAL_RCC_GetSysClockFreq+0x40>
 800903c:	2b08      	cmp	r3, #8
 800903e:	f200 80a1 	bhi.w	8009184 <HAL_RCC_GetSysClockFreq+0x16c>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <HAL_RCC_GetSysClockFreq+0x34>
 8009046:	2b04      	cmp	r3, #4
 8009048:	d003      	beq.n	8009052 <HAL_RCC_GetSysClockFreq+0x3a>
 800904a:	e09b      	b.n	8009184 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800904c:	4b53      	ldr	r3, [pc, #332]	@ (800919c <HAL_RCC_GetSysClockFreq+0x184>)
 800904e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009050:	e09b      	b.n	800918a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009052:	4b53      	ldr	r3, [pc, #332]	@ (80091a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009054:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009056:	e098      	b.n	800918a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009058:	4b4f      	ldr	r3, [pc, #316]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x180>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009060:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009062:	4b4d      	ldr	r3, [pc, #308]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x180>)
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d028      	beq.n	80090c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800906e:	4b4a      	ldr	r3, [pc, #296]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x180>)
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	099b      	lsrs	r3, r3, #6
 8009074:	2200      	movs	r2, #0
 8009076:	623b      	str	r3, [r7, #32]
 8009078:	627a      	str	r2, [r7, #36]	@ 0x24
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009080:	2100      	movs	r1, #0
 8009082:	4b47      	ldr	r3, [pc, #284]	@ (80091a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009084:	fb03 f201 	mul.w	r2, r3, r1
 8009088:	2300      	movs	r3, #0
 800908a:	fb00 f303 	mul.w	r3, r0, r3
 800908e:	4413      	add	r3, r2
 8009090:	4a43      	ldr	r2, [pc, #268]	@ (80091a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009092:	fba0 1202 	umull	r1, r2, r0, r2
 8009096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009098:	460a      	mov	r2, r1
 800909a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800909c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800909e:	4413      	add	r3, r2
 80090a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090a4:	2200      	movs	r2, #0
 80090a6:	61bb      	str	r3, [r7, #24]
 80090a8:	61fa      	str	r2, [r7, #28]
 80090aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80090b2:	f7f7 fceb 	bl	8000a8c <__aeabi_uldivmod>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4613      	mov	r3, r2
 80090bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090be:	e053      	b.n	8009168 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090c0:	4b35      	ldr	r3, [pc, #212]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x180>)
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	099b      	lsrs	r3, r3, #6
 80090c6:	2200      	movs	r2, #0
 80090c8:	613b      	str	r3, [r7, #16]
 80090ca:	617a      	str	r2, [r7, #20]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80090d2:	f04f 0b00 	mov.w	fp, #0
 80090d6:	4652      	mov	r2, sl
 80090d8:	465b      	mov	r3, fp
 80090da:	f04f 0000 	mov.w	r0, #0
 80090de:	f04f 0100 	mov.w	r1, #0
 80090e2:	0159      	lsls	r1, r3, #5
 80090e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090e8:	0150      	lsls	r0, r2, #5
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	ebb2 080a 	subs.w	r8, r2, sl
 80090f2:	eb63 090b 	sbc.w	r9, r3, fp
 80090f6:	f04f 0200 	mov.w	r2, #0
 80090fa:	f04f 0300 	mov.w	r3, #0
 80090fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009102:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009106:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800910a:	ebb2 0408 	subs.w	r4, r2, r8
 800910e:	eb63 0509 	sbc.w	r5, r3, r9
 8009112:	f04f 0200 	mov.w	r2, #0
 8009116:	f04f 0300 	mov.w	r3, #0
 800911a:	00eb      	lsls	r3, r5, #3
 800911c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009120:	00e2      	lsls	r2, r4, #3
 8009122:	4614      	mov	r4, r2
 8009124:	461d      	mov	r5, r3
 8009126:	eb14 030a 	adds.w	r3, r4, sl
 800912a:	603b      	str	r3, [r7, #0]
 800912c:	eb45 030b 	adc.w	r3, r5, fp
 8009130:	607b      	str	r3, [r7, #4]
 8009132:	f04f 0200 	mov.w	r2, #0
 8009136:	f04f 0300 	mov.w	r3, #0
 800913a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800913e:	4629      	mov	r1, r5
 8009140:	028b      	lsls	r3, r1, #10
 8009142:	4621      	mov	r1, r4
 8009144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009148:	4621      	mov	r1, r4
 800914a:	028a      	lsls	r2, r1, #10
 800914c:	4610      	mov	r0, r2
 800914e:	4619      	mov	r1, r3
 8009150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009152:	2200      	movs	r2, #0
 8009154:	60bb      	str	r3, [r7, #8]
 8009156:	60fa      	str	r2, [r7, #12]
 8009158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800915c:	f7f7 fc96 	bl	8000a8c <__aeabi_uldivmod>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4613      	mov	r3, r2
 8009166:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009168:	4b0b      	ldr	r3, [pc, #44]	@ (8009198 <HAL_RCC_GetSysClockFreq+0x180>)
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	0c1b      	lsrs	r3, r3, #16
 800916e:	f003 0303 	and.w	r3, r3, #3
 8009172:	3301      	adds	r3, #1
 8009174:	005b      	lsls	r3, r3, #1
 8009176:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009178:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009180:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009182:	e002      	b.n	800918a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009184:	4b05      	ldr	r3, [pc, #20]	@ (800919c <HAL_RCC_GetSysClockFreq+0x184>)
 8009186:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800918c:	4618      	mov	r0, r3
 800918e:	3740      	adds	r7, #64	@ 0x40
 8009190:	46bd      	mov	sp, r7
 8009192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009196:	bf00      	nop
 8009198:	40023800 	.word	0x40023800
 800919c:	00f42400 	.word	0x00f42400
 80091a0:	017d7840 	.word	0x017d7840

080091a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091a8:	4b03      	ldr	r3, [pc, #12]	@ (80091b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80091aa:	681b      	ldr	r3, [r3, #0]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	20000048 	.word	0x20000048

080091bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091c0:	f7ff fff0 	bl	80091a4 <HAL_RCC_GetHCLKFreq>
 80091c4:	4602      	mov	r2, r0
 80091c6:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	0a9b      	lsrs	r3, r3, #10
 80091cc:	f003 0307 	and.w	r3, r3, #7
 80091d0:	4903      	ldr	r1, [pc, #12]	@ (80091e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091d2:	5ccb      	ldrb	r3, [r1, r3]
 80091d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091d8:	4618      	mov	r0, r3
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	40023800 	.word	0x40023800
 80091e0:	080205d0 	.word	0x080205d0

080091e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80091e8:	f7ff ffdc 	bl	80091a4 <HAL_RCC_GetHCLKFreq>
 80091ec:	4602      	mov	r2, r0
 80091ee:	4b05      	ldr	r3, [pc, #20]	@ (8009204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	0b5b      	lsrs	r3, r3, #13
 80091f4:	f003 0307 	and.w	r3, r3, #7
 80091f8:	4903      	ldr	r1, [pc, #12]	@ (8009208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091fa:	5ccb      	ldrb	r3, [r1, r3]
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009200:	4618      	mov	r0, r3
 8009202:	bd80      	pop	{r7, pc}
 8009204:	40023800 	.word	0x40023800
 8009208:	080205d0 	.word	0x080205d0

0800920c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	220f      	movs	r2, #15
 800921a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800921c:	4b12      	ldr	r3, [pc, #72]	@ (8009268 <HAL_RCC_GetClockConfig+0x5c>)
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f003 0203 	and.w	r2, r3, #3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009228:	4b0f      	ldr	r3, [pc, #60]	@ (8009268 <HAL_RCC_GetClockConfig+0x5c>)
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009234:	4b0c      	ldr	r3, [pc, #48]	@ (8009268 <HAL_RCC_GetClockConfig+0x5c>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009240:	4b09      	ldr	r3, [pc, #36]	@ (8009268 <HAL_RCC_GetClockConfig+0x5c>)
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	08db      	lsrs	r3, r3, #3
 8009246:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800924e:	4b07      	ldr	r3, [pc, #28]	@ (800926c <HAL_RCC_GetClockConfig+0x60>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 020f 	and.w	r2, r3, #15
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	601a      	str	r2, [r3, #0]
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	40023800 	.word	0x40023800
 800926c:	40023c00 	.word	0x40023c00

08009270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009284:	2300      	movs	r3, #0
 8009286:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0301 	and.w	r3, r3, #1
 8009294:	2b00      	cmp	r3, #0
 8009296:	d012      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009298:	4b69      	ldr	r3, [pc, #420]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	4a68      	ldr	r2, [pc, #416]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800929e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80092a2:	6093      	str	r3, [r2, #8]
 80092a4:	4b66      	ldr	r3, [pc, #408]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ac:	4964      	ldr	r1, [pc, #400]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ae:	4313      	orrs	r3, r2
 80092b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80092ba:	2301      	movs	r3, #1
 80092bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d017      	beq.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092ca:	4b5d      	ldr	r3, [pc, #372]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d8:	4959      	ldr	r1, [pc, #356]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092da:	4313      	orrs	r3, r2
 80092dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e8:	d101      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80092ea:	2301      	movs	r3, #1
 80092ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80092f6:	2301      	movs	r3, #1
 80092f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d017      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009306:	4b4e      	ldr	r3, [pc, #312]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800930c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009314:	494a      	ldr	r1, [pc, #296]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009316:	4313      	orrs	r3, r2
 8009318:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009320:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009324:	d101      	bne.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009326:	2301      	movs	r3, #1
 8009328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009332:	2301      	movs	r3, #1
 8009334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009342:	2301      	movs	r3, #1
 8009344:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0320 	and.w	r3, r3, #32
 800934e:	2b00      	cmp	r3, #0
 8009350:	f000 808b 	beq.w	800946a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009354:	4b3a      	ldr	r3, [pc, #232]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009358:	4a39      	ldr	r2, [pc, #228]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800935a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800935e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009360:	4b37      	ldr	r3, [pc, #220]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009368:	60bb      	str	r3, [r7, #8]
 800936a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800936c:	4b35      	ldr	r3, [pc, #212]	@ (8009444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a34      	ldr	r2, [pc, #208]	@ (8009444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009378:	f7fc fad4 	bl	8005924 <HAL_GetTick>
 800937c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800937e:	e008      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009380:	f7fc fad0 	bl	8005924 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	2b64      	cmp	r3, #100	@ 0x64
 800938c:	d901      	bls.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e357      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009392:	4b2c      	ldr	r3, [pc, #176]	@ (8009444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0f0      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800939e:	4b28      	ldr	r3, [pc, #160]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d035      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d02e      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093bc:	4b20      	ldr	r3, [pc, #128]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80093c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093d0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80093d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d6:	4a1a      	ldr	r2, [pc, #104]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80093de:	4a18      	ldr	r2, [pc, #96]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80093e4:	4b16      	ldr	r3, [pc, #88]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d114      	bne.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f0:	f7fc fa98 	bl	8005924 <HAL_GetTick>
 80093f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093f6:	e00a      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093f8:	f7fc fa94 	bl	8005924 <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009406:	4293      	cmp	r3, r2
 8009408:	d901      	bls.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e319      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800940e:	4b0c      	ldr	r3, [pc, #48]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0ee      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800941e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009426:	d111      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009428:	4b05      	ldr	r3, [pc, #20]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009434:	4b04      	ldr	r3, [pc, #16]	@ (8009448 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009436:	400b      	ands	r3, r1
 8009438:	4901      	ldr	r1, [pc, #4]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800943a:	4313      	orrs	r3, r2
 800943c:	608b      	str	r3, [r1, #8]
 800943e:	e00b      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009440:	40023800 	.word	0x40023800
 8009444:	40007000 	.word	0x40007000
 8009448:	0ffffcff 	.word	0x0ffffcff
 800944c:	4baa      	ldr	r3, [pc, #680]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	4aa9      	ldr	r2, [pc, #676]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009452:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009456:	6093      	str	r3, [r2, #8]
 8009458:	4ba7      	ldr	r3, [pc, #668]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800945a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009464:	49a4      	ldr	r1, [pc, #656]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009466:	4313      	orrs	r3, r2
 8009468:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0310 	and.w	r3, r3, #16
 8009472:	2b00      	cmp	r3, #0
 8009474:	d010      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009476:	4ba0      	ldr	r3, [pc, #640]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800947c:	4a9e      	ldr	r2, [pc, #632]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800947e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009482:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009486:	4b9c      	ldr	r3, [pc, #624]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009488:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009490:	4999      	ldr	r1, [pc, #612]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009492:	4313      	orrs	r3, r2
 8009494:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00a      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094a4:	4b94      	ldr	r3, [pc, #592]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094b2:	4991      	ldr	r1, [pc, #580]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00a      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094c6:	4b8c      	ldr	r3, [pc, #560]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094d4:	4988      	ldr	r1, [pc, #544]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00a      	beq.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094e8:	4b83      	ldr	r3, [pc, #524]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094f6:	4980      	ldr	r1, [pc, #512]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800950a:	4b7b      	ldr	r3, [pc, #492]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800950c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009510:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009518:	4977      	ldr	r1, [pc, #476]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800951a:	4313      	orrs	r3, r2
 800951c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800952c:	4b72      	ldr	r3, [pc, #456]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800952e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009532:	f023 0203 	bic.w	r2, r3, #3
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800953a:	496f      	ldr	r1, [pc, #444]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800953c:	4313      	orrs	r3, r2
 800953e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800954e:	4b6a      	ldr	r3, [pc, #424]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009554:	f023 020c 	bic.w	r2, r3, #12
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800955c:	4966      	ldr	r1, [pc, #408]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800955e:	4313      	orrs	r3, r2
 8009560:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00a      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009570:	4b61      	ldr	r3, [pc, #388]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009576:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800957e:	495e      	ldr	r1, [pc, #376]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009580:	4313      	orrs	r3, r2
 8009582:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00a      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009592:	4b59      	ldr	r3, [pc, #356]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009598:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a0:	4955      	ldr	r1, [pc, #340]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00a      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80095b4:	4b50      	ldr	r3, [pc, #320]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095c2:	494d      	ldr	r1, [pc, #308]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00a      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80095d6:	4b48      	ldr	r3, [pc, #288]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095e4:	4944      	ldr	r1, [pc, #272]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e6:	4313      	orrs	r3, r2
 80095e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00a      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80095f8:	4b3f      	ldr	r3, [pc, #252]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095fe:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009606:	493c      	ldr	r1, [pc, #240]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009608:	4313      	orrs	r3, r2
 800960a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00a      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800961a:	4b37      	ldr	r3, [pc, #220]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800961c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009620:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009628:	4933      	ldr	r1, [pc, #204]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800962a:	4313      	orrs	r3, r2
 800962c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800963c:	4b2e      	ldr	r3, [pc, #184]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800963e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009642:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800964a:	492b      	ldr	r1, [pc, #172]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800964c:	4313      	orrs	r3, r2
 800964e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d011      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800965e:	4b26      	ldr	r3, [pc, #152]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009664:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800966c:	4922      	ldr	r1, [pc, #136]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800966e:	4313      	orrs	r3, r2
 8009670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009678:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800967c:	d101      	bne.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800967e:	2301      	movs	r3, #1
 8009680:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800968e:	2301      	movs	r3, #1
 8009690:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800969e:	4b16      	ldr	r3, [pc, #88]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ac:	4912      	ldr	r1, [pc, #72]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00b      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80096c0:	4b0d      	ldr	r3, [pc, #52]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096c6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096d0:	4909      	ldr	r1, [pc, #36]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d006      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 80d9 	beq.w	800989e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80096ec:	4b02      	ldr	r3, [pc, #8]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a01      	ldr	r2, [pc, #4]	@ (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096f6:	e001      	b.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80096f8:	40023800 	.word	0x40023800
 80096fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096fe:	f7fc f911 	bl	8005924 <HAL_GetTick>
 8009702:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009704:	e008      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009706:	f7fc f90d 	bl	8005924 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	2b64      	cmp	r3, #100	@ 0x64
 8009712:	d901      	bls.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e194      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009718:	4b6c      	ldr	r3, [pc, #432]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1f0      	bne.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	d021      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009734:	2b00      	cmp	r3, #0
 8009736:	d11d      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009738:	4b64      	ldr	r3, [pc, #400]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800973a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800973e:	0c1b      	lsrs	r3, r3, #16
 8009740:	f003 0303 	and.w	r3, r3, #3
 8009744:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009746:	4b61      	ldr	r3, [pc, #388]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800974c:	0e1b      	lsrs	r3, r3, #24
 800974e:	f003 030f 	and.w	r3, r3, #15
 8009752:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	019a      	lsls	r2, r3, #6
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	041b      	lsls	r3, r3, #16
 800975e:	431a      	orrs	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	061b      	lsls	r3, r3, #24
 8009764:	431a      	orrs	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	071b      	lsls	r3, r3, #28
 800976c:	4957      	ldr	r1, [pc, #348]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800976e:	4313      	orrs	r3, r2
 8009770:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009788:	d00a      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009792:	2b00      	cmp	r3, #0
 8009794:	d02e      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800979a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800979e:	d129      	bne.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80097a0:	4b4a      	ldr	r3, [pc, #296]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097a6:	0c1b      	lsrs	r3, r3, #16
 80097a8:	f003 0303 	and.w	r3, r3, #3
 80097ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097ae:	4b47      	ldr	r3, [pc, #284]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097b4:	0f1b      	lsrs	r3, r3, #28
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	019a      	lsls	r2, r3, #6
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	041b      	lsls	r3, r3, #16
 80097c6:	431a      	orrs	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	061b      	lsls	r3, r3, #24
 80097ce:	431a      	orrs	r2, r3
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	071b      	lsls	r3, r3, #28
 80097d4:	493d      	ldr	r1, [pc, #244]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80097dc:	4b3b      	ldr	r3, [pc, #236]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097e2:	f023 021f 	bic.w	r2, r3, #31
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ea:	3b01      	subs	r3, #1
 80097ec:	4937      	ldr	r1, [pc, #220]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d01d      	beq.n	800983c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009800:	4b32      	ldr	r3, [pc, #200]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009806:	0e1b      	lsrs	r3, r3, #24
 8009808:	f003 030f 	and.w	r3, r3, #15
 800980c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800980e:	4b2f      	ldr	r3, [pc, #188]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009814:	0f1b      	lsrs	r3, r3, #28
 8009816:	f003 0307 	and.w	r3, r3, #7
 800981a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	019a      	lsls	r2, r3, #6
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	041b      	lsls	r3, r3, #16
 8009828:	431a      	orrs	r2, r3
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	061b      	lsls	r3, r3, #24
 800982e:	431a      	orrs	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	071b      	lsls	r3, r3, #28
 8009834:	4925      	ldr	r1, [pc, #148]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009836:	4313      	orrs	r3, r2
 8009838:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d011      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	019a      	lsls	r2, r3, #6
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	041b      	lsls	r3, r3, #16
 8009854:	431a      	orrs	r2, r3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	061b      	lsls	r3, r3, #24
 800985c:	431a      	orrs	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	071b      	lsls	r3, r3, #28
 8009864:	4919      	ldr	r1, [pc, #100]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009866:	4313      	orrs	r3, r2
 8009868:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800986c:	4b17      	ldr	r3, [pc, #92]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a16      	ldr	r2, [pc, #88]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009872:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009878:	f7fc f854 	bl	8005924 <HAL_GetTick>
 800987c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800987e:	e008      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009880:	f7fc f850 	bl	8005924 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	2b64      	cmp	r3, #100	@ 0x64
 800988c:	d901      	bls.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e0d7      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009892:	4b0e      	ldr	r3, [pc, #56]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0f0      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	f040 80cd 	bne.w	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80098a6:	4b09      	ldr	r3, [pc, #36]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a08      	ldr	r2, [pc, #32]	@ (80098cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098b2:	f7fc f837 	bl	8005924 <HAL_GetTick>
 80098b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80098b8:	e00a      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80098ba:	f7fc f833 	bl	8005924 <HAL_GetTick>
 80098be:	4602      	mov	r2, r0
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	1ad3      	subs	r3, r2, r3
 80098c4:	2b64      	cmp	r3, #100	@ 0x64
 80098c6:	d903      	bls.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098c8:	2303      	movs	r3, #3
 80098ca:	e0ba      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80098cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80098d0:	4b5e      	ldr	r3, [pc, #376]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098dc:	d0ed      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d009      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d02e      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	d12a      	bne.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009906:	4b51      	ldr	r3, [pc, #324]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009914:	4b4d      	ldr	r3, [pc, #308]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800991a:	0f1b      	lsrs	r3, r3, #28
 800991c:	f003 0307 	and.w	r3, r3, #7
 8009920:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	019a      	lsls	r2, r3, #6
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	431a      	orrs	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	061b      	lsls	r3, r3, #24
 8009934:	431a      	orrs	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	071b      	lsls	r3, r3, #28
 800993a:	4944      	ldr	r1, [pc, #272]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800993c:	4313      	orrs	r3, r2
 800993e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009942:	4b42      	ldr	r3, [pc, #264]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009948:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009950:	3b01      	subs	r3, #1
 8009952:	021b      	lsls	r3, r3, #8
 8009954:	493d      	ldr	r1, [pc, #244]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009956:	4313      	orrs	r3, r2
 8009958:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d022      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800996c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009970:	d11d      	bne.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009972:	4b36      	ldr	r3, [pc, #216]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009978:	0e1b      	lsrs	r3, r3, #24
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009980:	4b32      	ldr	r3, [pc, #200]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009986:	0f1b      	lsrs	r3, r3, #28
 8009988:	f003 0307 	and.w	r3, r3, #7
 800998c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	019a      	lsls	r2, r3, #6
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	041b      	lsls	r3, r3, #16
 800999a:	431a      	orrs	r2, r3
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	061b      	lsls	r3, r3, #24
 80099a0:	431a      	orrs	r2, r3
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	071b      	lsls	r3, r3, #28
 80099a6:	4929      	ldr	r1, [pc, #164]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099a8:	4313      	orrs	r3, r2
 80099aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0308 	and.w	r3, r3, #8
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d028      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80099ba:	4b24      	ldr	r3, [pc, #144]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099c0:	0e1b      	lsrs	r3, r3, #24
 80099c2:	f003 030f 	and.w	r3, r3, #15
 80099c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80099c8:	4b20      	ldr	r3, [pc, #128]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ce:	0c1b      	lsrs	r3, r3, #16
 80099d0:	f003 0303 	and.w	r3, r3, #3
 80099d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	019a      	lsls	r2, r3, #6
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	431a      	orrs	r2, r3
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	061b      	lsls	r3, r3, #24
 80099e6:	431a      	orrs	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	071b      	lsls	r3, r3, #28
 80099ee:	4917      	ldr	r1, [pc, #92]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80099f6:	4b15      	ldr	r3, [pc, #84]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a04:	4911      	ldr	r1, [pc, #68]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a0e      	ldr	r2, [pc, #56]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a18:	f7fb ff84 	bl	8005924 <HAL_GetTick>
 8009a1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a1e:	e008      	b.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a20:	f7fb ff80 	bl	8005924 <HAL_GetTick>
 8009a24:	4602      	mov	r2, r0
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	2b64      	cmp	r3, #100	@ 0x64
 8009a2c:	d901      	bls.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e007      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a32:	4b06      	ldr	r3, [pc, #24]	@ (8009a4c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a3e:	d1ef      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40023800 	.word	0x40023800

08009a50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009a64:	2300      	movs	r3, #0
 8009a66:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a6e:	f040 808d 	bne.w	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009a72:	4b93      	ldr	r3, [pc, #588]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a78:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009a80:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a88:	d07c      	beq.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a90:	d87b      	bhi.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d004      	beq.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a9e:	d039      	beq.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009aa0:	e073      	b.n	8009b8a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009aa2:	4b87      	ldr	r3, [pc, #540]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d108      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009aae:	4b84      	ldr	r3, [pc, #528]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ab6:	4a83      	ldr	r2, [pc, #524]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abc:	613b      	str	r3, [r7, #16]
 8009abe:	e007      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009ac0:	4b7f      	ldr	r3, [pc, #508]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ac8:	4a7f      	ldr	r2, [pc, #508]	@ (8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ace:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009ad0:	4b7b      	ldr	r3, [pc, #492]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad6:	0e1b      	lsrs	r3, r3, #24
 8009ad8:	f003 030f 	and.w	r3, r3, #15
 8009adc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009ade:	4b78      	ldr	r3, [pc, #480]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ae4:	099b      	lsrs	r3, r3, #6
 8009ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aea:	693a      	ldr	r2, [r7, #16]
 8009aec:	fb03 f202 	mul.w	r2, r3, r2
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009af8:	4b71      	ldr	r3, [pc, #452]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009afe:	0a1b      	lsrs	r3, r3, #8
 8009b00:	f003 031f 	and.w	r3, r3, #31
 8009b04:	3301      	adds	r3, #1
 8009b06:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b10:	617b      	str	r3, [r7, #20]
        break;
 8009b12:	e03b      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009b14:	4b6a      	ldr	r3, [pc, #424]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d108      	bne.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009b20:	4b67      	ldr	r3, [pc, #412]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b28:	4a66      	ldr	r2, [pc, #408]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2e:	613b      	str	r3, [r7, #16]
 8009b30:	e007      	b.n	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009b32:	4b63      	ldr	r3, [pc, #396]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b3a:	4a63      	ldr	r2, [pc, #396]	@ (8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b40:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009b42:	4b5f      	ldr	r3, [pc, #380]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b48:	0e1b      	lsrs	r3, r3, #24
 8009b4a:	f003 030f 	and.w	r3, r3, #15
 8009b4e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009b50:	4b5b      	ldr	r3, [pc, #364]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b56:	099b      	lsrs	r3, r3, #6
 8009b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	fb03 f202 	mul.w	r2, r3, r2
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b68:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009b6a:	4b55      	ldr	r3, [pc, #340]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b70:	f003 031f 	and.w	r3, r3, #31
 8009b74:	3301      	adds	r3, #1
 8009b76:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b80:	617b      	str	r3, [r7, #20]
        break;
 8009b82:	e003      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b84:	4b51      	ldr	r3, [pc, #324]	@ (8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009b86:	617b      	str	r3, [r7, #20]
        break;
 8009b88:	e000      	b.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8009b8a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b92:	f040 808d 	bne.w	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009b96:	4b4a      	ldr	r3, [pc, #296]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b9c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009ba4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bac:	d07c      	beq.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bb4:	d87b      	bhi.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009bc2:	d039      	beq.n	8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009bc4:	e073      	b.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d108      	bne.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bda:	4a3a      	ldr	r2, [pc, #232]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	e007      	b.n	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009be4:	4b36      	ldr	r3, [pc, #216]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bec:	4a36      	ldr	r2, [pc, #216]	@ (8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009bf4:	4b32      	ldr	r3, [pc, #200]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bfa:	0e1b      	lsrs	r3, r3, #24
 8009bfc:	f003 030f 	and.w	r3, r3, #15
 8009c00:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009c02:	4b2f      	ldr	r3, [pc, #188]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c08:	099b      	lsrs	r3, r3, #6
 8009c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	fb03 f202 	mul.w	r2, r3, r2
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c1a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009c1c:	4b28      	ldr	r3, [pc, #160]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c22:	0a1b      	lsrs	r3, r3, #8
 8009c24:	f003 031f 	and.w	r3, r3, #31
 8009c28:	3301      	adds	r3, #1
 8009c2a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009c2c:	697a      	ldr	r2, [r7, #20]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c34:	617b      	str	r3, [r7, #20]
        break;
 8009c36:	e03b      	b.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009c38:	4b21      	ldr	r3, [pc, #132]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d108      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009c44:	4b1e      	ldr	r3, [pc, #120]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	e007      	b.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009c56:	4b1a      	ldr	r3, [pc, #104]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c64:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009c66:	4b16      	ldr	r3, [pc, #88]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c6c:	0e1b      	lsrs	r3, r3, #24
 8009c6e:	f003 030f 	and.w	r3, r3, #15
 8009c72:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009c74:	4b12      	ldr	r3, [pc, #72]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c7a:	099b      	lsrs	r3, r3, #6
 8009c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	fb03 f202 	mul.w	r2, r3, r2
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca4:	617b      	str	r3, [r7, #20]
        break;
 8009ca6:	e003      	b.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ca8:	4b08      	ldr	r3, [pc, #32]	@ (8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009caa:	617b      	str	r3, [r7, #20]
        break;
 8009cac:	e000      	b.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8009cae:	bf00      	nop
      }
    }
  }

  return frequency;
 8009cb0:	697b      	ldr	r3, [r7, #20]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40023800 	.word	0x40023800
 8009cc4:	00f42400 	.word	0x00f42400
 8009cc8:	017d7840 	.word	0x017d7840
 8009ccc:	00bb8000 	.word	0x00bb8000

08009cd0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e156      	b.n	8009f9c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d106      	bne.n	8009d08 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7f9 fc5a 	bl	80035bc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f95b 	bl	8009fcc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	2b02      	cmp	r3, #2
 8009d1c:	d00c      	beq.n	8009d38 <HAL_SAI_Init+0x68>
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d80d      	bhi.n	8009d3e <HAL_SAI_Init+0x6e>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <HAL_SAI_Init+0x5c>
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d003      	beq.n	8009d32 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009d2a:	e008      	b.n	8009d3e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	61fb      	str	r3, [r7, #28]
      break;
 8009d30:	e006      	b.n	8009d40 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009d32:	2310      	movs	r3, #16
 8009d34:	61fb      	str	r3, [r7, #28]
      break;
 8009d36:	e003      	b.n	8009d40 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009d38:	2320      	movs	r3, #32
 8009d3a:	61fb      	str	r3, [r7, #28]
      break;
 8009d3c:	e000      	b.n	8009d40 <HAL_SAI_Init+0x70>
      break;
 8009d3e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d81e      	bhi.n	8009d86 <HAL_SAI_Init+0xb6>
 8009d48:	a201      	add	r2, pc, #4	@ (adr r2, 8009d50 <HAL_SAI_Init+0x80>)
 8009d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d4e:	bf00      	nop
 8009d50:	08009d61 	.word	0x08009d61
 8009d54:	08009d67 	.word	0x08009d67
 8009d58:	08009d6f 	.word	0x08009d6f
 8009d5c:	08009d77 	.word	0x08009d77
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d64:	e010      	b.n	8009d88 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d6a:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d6c:	e00c      	b.n	8009d88 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009d6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d72:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d74:	e008      	b.n	8009d88 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009d76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d7a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	f043 0301 	orr.w	r3, r3, #1
 8009d82:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009d84:	e000      	b.n	8009d88 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009d86:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a85      	ldr	r2, [pc, #532]	@ (8009fa4 <HAL_SAI_Init+0x2d4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d004      	beq.n	8009d9c <HAL_SAI_Init+0xcc>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a84      	ldr	r2, [pc, #528]	@ (8009fa8 <HAL_SAI_Init+0x2d8>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d103      	bne.n	8009da4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009d9c:	4a83      	ldr	r2, [pc, #524]	@ (8009fac <HAL_SAI_Init+0x2dc>)
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	e002      	b.n	8009daa <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009da4:	4a82      	ldr	r2, [pc, #520]	@ (8009fb0 <HAL_SAI_Init+0x2e0>)
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	69db      	ldr	r3, [r3, #28]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d04c      	beq.n	8009e4c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a7a      	ldr	r2, [pc, #488]	@ (8009fa4 <HAL_SAI_Init+0x2d4>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d004      	beq.n	8009dca <HAL_SAI_Init+0xfa>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a78      	ldr	r2, [pc, #480]	@ (8009fa8 <HAL_SAI_Init+0x2d8>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d104      	bne.n	8009dd4 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009dca:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009dce:	f7ff fe3f 	bl	8009a50 <HAL_RCCEx_GetPeriphCLKFreq>
 8009dd2:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a76      	ldr	r2, [pc, #472]	@ (8009fb4 <HAL_SAI_Init+0x2e4>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d004      	beq.n	8009de8 <HAL_SAI_Init+0x118>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a75      	ldr	r2, [pc, #468]	@ (8009fb8 <HAL_SAI_Init+0x2e8>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d104      	bne.n	8009df2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009de8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009dec:	f7ff fe30 	bl	8009a50 <HAL_RCCEx_GetPeriphCLKFreq>
 8009df0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	025b      	lsls	r3, r3, #9
 8009e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e08:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4a6b      	ldr	r2, [pc, #428]	@ (8009fbc <HAL_SAI_Init+0x2ec>)
 8009e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e12:	08da      	lsrs	r2, r3, #3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009e18:	68f9      	ldr	r1, [r7, #12]
 8009e1a:	4b68      	ldr	r3, [pc, #416]	@ (8009fbc <HAL_SAI_Init+0x2ec>)
 8009e1c:	fba3 2301 	umull	r2, r3, r3, r1
 8009e20:	08da      	lsrs	r2, r3, #3
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	1aca      	subs	r2, r1, r3
 8009e2c:	2a08      	cmp	r2, #8
 8009e2e:	d904      	bls.n	8009e3a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6a1b      	ldr	r3, [r3, #32]
 8009e34:	1c5a      	adds	r2, r3, #1
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3e:	2b04      	cmp	r3, #4
 8009e40:	d104      	bne.n	8009e4c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	085a      	lsrs	r2, r3, #1
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <HAL_SAI_Init+0x18c>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d109      	bne.n	8009e70 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <HAL_SAI_Init+0x198>
 8009e64:	2300      	movs	r3, #0
 8009e66:	e001      	b.n	8009e6c <HAL_SAI_Init+0x19c>
 8009e68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e6c:	61bb      	str	r3, [r7, #24]
 8009e6e:	e008      	b.n	8009e82 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d102      	bne.n	8009e7e <HAL_SAI_Init+0x1ae>
 8009e78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e7c:	e000      	b.n	8009e80 <HAL_SAI_Init+0x1b0>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6819      	ldr	r1, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	4b4c      	ldr	r3, [pc, #304]	@ (8009fc0 <HAL_SAI_Init+0x2f0>)
 8009e8e:	400b      	ands	r3, r1
 8009e90:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6819      	ldr	r1, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ea6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eac:	431a      	orrs	r2, r3
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8009eba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ec6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a1b      	ldr	r3, [r3, #32]
 8009ecc:	051b      	lsls	r3, r3, #20
 8009ece:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6859      	ldr	r1, [r3, #4]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	4b38      	ldr	r3, [pc, #224]	@ (8009fc4 <HAL_SAI_Init+0x2f4>)
 8009ee4:	400b      	ands	r3, r1
 8009ee6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6859      	ldr	r1, [r3, #4]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	699a      	ldr	r2, [r3, #24]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009efc:	431a      	orrs	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6899      	ldr	r1, [r3, #8]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	4b2d      	ldr	r3, [pc, #180]	@ (8009fc8 <HAL_SAI_Init+0x2f8>)
 8009f12:	400b      	ands	r3, r1
 8009f14:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6899      	ldr	r1, [r3, #8]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f20:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009f26:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8009f2c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8009f32:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009f3c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68d9      	ldr	r1, [r3, #12]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009f54:	400b      	ands	r3, r1
 8009f56:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68d9      	ldr	r1, [r3, #12]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f66:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f6c:	041b      	lsls	r3, r3, #16
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f74:	3b01      	subs	r3, #1
 8009f76:	021b      	lsls	r3, r3, #8
 8009f78:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	430a      	orrs	r2, r1
 8009f80:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3720      	adds	r7, #32
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	40015804 	.word	0x40015804
 8009fa8:	40015824 	.word	0x40015824
 8009fac:	40015800 	.word	0x40015800
 8009fb0:	40015c00 	.word	0x40015c00
 8009fb4:	40015c04 	.word	0x40015c04
 8009fb8:	40015c24 	.word	0x40015c24
 8009fbc:	cccccccd 	.word	0xcccccccd
 8009fc0:	ff05c010 	.word	0xff05c010
 8009fc4:	ffff1ff0 	.word	0xffff1ff0
 8009fc8:	fff88000 	.word	0xfff88000

08009fcc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009fd4:	4b17      	ldr	r3, [pc, #92]	@ (800a034 <SAI_Disable+0x68>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a17      	ldr	r2, [pc, #92]	@ (800a038 <SAI_Disable+0x6c>)
 8009fda:	fba2 2303 	umull	r2, r3, r2, r3
 8009fde:	0b1b      	lsrs	r3, r3, #12
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009ff6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	1e5a      	subs	r2, r3, #1
 8009ffc:	60fa      	str	r2, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a008:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	72fb      	strb	r3, [r7, #11]
      break;
 800a016:	e006      	b.n	800a026 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e8      	bne.n	8009ff8 <SAI_Disable+0x2c>

  return status;
 800a026:	7afb      	ldrb	r3, [r7, #11]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20000048 	.word	0x20000048
 800a038:	95cbec1b 	.word	0x95cbec1b

0800a03c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e022      	b.n	800a094 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d105      	bne.n	800a066 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7f9 fba9 	bl	80037b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2203      	movs	r2, #3
 800a06a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f814 	bl	800a09c <HAL_SD_InitCard>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e00a      	b.n	800a094 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a09c:	b5b0      	push	{r4, r5, r7, lr}
 800a09e:	b08e      	sub	sp, #56	@ 0x38
 800a0a0:	af04      	add	r7, sp, #16
 800a0a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a0b8:	2376      	movs	r3, #118	@ 0x76
 800a0ba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681d      	ldr	r5, [r3, #0]
 800a0c0:	466c      	mov	r4, sp
 800a0c2:	f107 0314 	add.w	r3, r7, #20
 800a0c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0ce:	f107 0308 	add.w	r3, r7, #8
 800a0d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f002 f8fb 	bl	800c2d0 <SDMMC_Init>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d001      	beq.n	800a0ec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e059      	b.n	800a1a0 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0fa:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4618      	mov	r0, r3
 800a102:	f002 f911 	bl	800c328 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a114:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a116:	2002      	movs	r0, #2
 800a118:	f7fb fc10 	bl	800593c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fd75 	bl	800ac0c <SD_PowerON>
 800a122:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00b      	beq.n	800a142 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	431a      	orrs	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e02e      	b.n	800a1a0 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fc94 	bl	800aa70 <SD_InitCard>
 800a148:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a14a:	6a3b      	ldr	r3, [r7, #32]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	431a      	orrs	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e01b      	b.n	800a1a0 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a170:	4618      	mov	r0, r3
 800a172:	f002 f96b 	bl	800c44c <SDMMC_CmdBlockLength>
 800a176:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00f      	beq.n	800a19e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a09      	ldr	r2, [pc, #36]	@ (800a1a8 <HAL_SD_InitCard+0x10c>)
 800a184:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a18a:	6a3b      	ldr	r3, [r7, #32]
 800a18c:	431a      	orrs	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3728      	adds	r7, #40	@ 0x28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bdb0      	pop	{r4, r5, r7, pc}
 800a1a8:	004005ff 	.word	0x004005ff

0800a1ac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b08c      	sub	sp, #48	@ 0x30
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d107      	bne.n	800a1d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e0c3      	b.n	800a35c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	f040 80bc 	bne.w	800a35a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a1e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	441a      	add	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d907      	bls.n	800a206 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1fa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e0aa      	b.n	800a35c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2203      	movs	r2, #3
 800a20a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2200      	movs	r2, #0
 800a214:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a224:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22a:	4a4e      	ldr	r2, [pc, #312]	@ (800a364 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a22c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a232:	4a4d      	ldr	r2, [pc, #308]	@ (800a368 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a234:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a23a:	2200      	movs	r2, #0
 800a23c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a242:	2200      	movs	r2, #0
 800a244:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3380      	adds	r3, #128	@ 0x80
 800a26c:	4619      	mov	r1, r3
 800a26e:	68ba      	ldr	r2, [r7, #8]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	025b      	lsls	r3, r3, #9
 800a274:	089b      	lsrs	r3, r3, #2
 800a276:	f7fc f96d 	bl	8006554 <HAL_DMA_Start_IT>
 800a27a:	4603      	mov	r3, r0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d017      	beq.n	800a2b0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800a28e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4a35      	ldr	r2, [pc, #212]	@ (800a36c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a296:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e055      	b.n	800a35c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f042 0208 	orr.w	r2, r2, #8
 800a2be:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d002      	beq.n	800a2ce <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ca:	025b      	lsls	r3, r3, #9
 800a2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	025b      	lsls	r3, r3, #9
 800a2d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a2da:	2390      	movs	r3, #144	@ 0x90
 800a2dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f107 0210 	add.w	r2, r7, #16
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f002 f87d 	bl	800c3f4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d90a      	bls.n	800a316 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2282      	movs	r2, #130	@ 0x82
 800a304:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a30c:	4618      	mov	r0, r3
 800a30e:	f002 f8e1 	bl	800c4d4 <SDMMC_CmdReadMultiBlock>
 800a312:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a314:	e009      	b.n	800a32a <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2281      	movs	r2, #129	@ 0x81
 800a31a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a322:	4618      	mov	r0, r3
 800a324:	f002 f8b4 	bl	800c490 <SDMMC_CmdReadSingleBlock>
 800a328:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d012      	beq.n	800a356 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a0d      	ldr	r2, [pc, #52]	@ (800a36c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a336:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33e:	431a      	orrs	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e002      	b.n	800a35c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	e000      	b.n	800a35c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a35a:	2302      	movs	r3, #2
  }
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3730      	adds	r7, #48	@ 0x30
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}
 800a364:	0800a95b 	.word	0x0800a95b
 800a368:	0800a9cd 	.word	0x0800a9cd
 800a36c:	004005ff 	.word	0x004005ff

0800a370 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08c      	sub	sp, #48	@ 0x30
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d107      	bne.n	800a398 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a38c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e0c6      	b.n	800a526 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	f040 80bf 	bne.w	800a524 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a3ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d907      	bls.n	800a3ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3be:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e0ad      	b.n	800a526 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	2203      	movs	r2, #3
 800a3ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 021a 	orr.w	r2, r2, #26
 800a3e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ee:	4a50      	ldr	r2, [pc, #320]	@ (800a530 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a3f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3f6:	4a4f      	ldr	r2, [pc, #316]	@ (800a534 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a3f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3fe:	2200      	movs	r2, #0
 800a400:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a406:	2b01      	cmp	r3, #1
 800a408:	d002      	beq.n	800a410 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a40c:	025b      	lsls	r3, r3, #9
 800a40e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d90a      	bls.n	800a42c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	22a0      	movs	r2, #160	@ 0xa0
 800a41a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a422:	4618      	mov	r0, r3
 800a424:	f002 f89a 	bl	800c55c <SDMMC_CmdWriteMultiBlock>
 800a428:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a42a:	e009      	b.n	800a440 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2290      	movs	r2, #144	@ 0x90
 800a430:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a438:	4618      	mov	r0, r3
 800a43a:	f002 f86d 	bl	800c518 <SDMMC_CmdWriteSingleBlock>
 800a43e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d012      	beq.n	800a46c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a3b      	ldr	r2, [pc, #236]	@ (800a538 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a44c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a454:	431a      	orrs	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e05c      	b.n	800a526 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0208 	orr.w	r2, r2, #8
 800a47a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a480:	2240      	movs	r2, #64	@ 0x40
 800a482:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a4a4:	68b9      	ldr	r1, [r7, #8]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3380      	adds	r3, #128	@ 0x80
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	025b      	lsls	r3, r3, #9
 800a4b2:	089b      	lsrs	r3, r3, #2
 800a4b4:	f7fc f84e 	bl	8006554 <HAL_DMA_Start_IT>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d01a      	beq.n	800a4f4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 021a 	bic.w	r2, r2, #26
 800a4cc:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a19      	ldr	r2, [pc, #100]	@ (800a538 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a4d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	e018      	b.n	800a526 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4f8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	025b      	lsls	r3, r3, #9
 800a4fe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a500:	2390      	movs	r3, #144	@ 0x90
 800a502:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a504:	2300      	movs	r3, #0
 800a506:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a508:	2300      	movs	r3, #0
 800a50a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a50c:	2301      	movs	r3, #1
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f107 0210 	add.w	r2, r7, #16
 800a518:	4611      	mov	r1, r2
 800a51a:	4618      	mov	r0, r3
 800a51c:	f001 ff6a 	bl	800c3f4 <SDMMC_ConfigData>

      return HAL_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	e000      	b.n	800a526 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a524:	2302      	movs	r3, #2
  }
}
 800a526:	4618      	mov	r0, r3
 800a528:	3730      	adds	r7, #48	@ 0x30
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	0800a931 	.word	0x0800a931
 800a534:	0800a9cd 	.word	0x0800a9cd
 800a538:	004005ff 	.word	0x004005ff

0800a53c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a544:	bf00      	nop
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a55e:	0f9b      	lsrs	r3, r3, #30
 800a560:	b2da      	uxtb	r2, r3
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a56a:	0e9b      	lsrs	r3, r3, #26
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 030f 	and.w	r3, r3, #15
 800a572:	b2da      	uxtb	r2, r3
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a57c:	0e1b      	lsrs	r3, r3, #24
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	f003 0303 	and.w	r3, r3, #3
 800a584:	b2da      	uxtb	r2, r3
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a58e:	0c1b      	lsrs	r3, r3, #16
 800a590:	b2da      	uxtb	r2, r3
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a59a:	0a1b      	lsrs	r3, r3, #8
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5b0:	0d1b      	lsrs	r3, r3, #20
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5bc:	0c1b      	lsrs	r3, r3, #16
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	f003 030f 	and.w	r3, r3, #15
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5ce:	0bdb      	lsrs	r3, r3, #15
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5e0:	0b9b      	lsrs	r3, r3, #14
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5f2:	0b5b      	lsrs	r3, r3, #13
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a604:	0b1b      	lsrs	r3, r3, #12
 800a606:	b2db      	uxtb	r3, r3
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2200      	movs	r2, #0
 800a616:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d163      	bne.n	800a6e8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a624:	009a      	lsls	r2, r3, #2
 800a626:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a62a:	4013      	ands	r3, r2
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a630:	0f92      	lsrs	r2, r2, #30
 800a632:	431a      	orrs	r2, r3
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a63c:	0edb      	lsrs	r3, r3, #27
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	f003 0307 	and.w	r3, r3, #7
 800a644:	b2da      	uxtb	r2, r3
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a64e:	0e1b      	lsrs	r3, r3, #24
 800a650:	b2db      	uxtb	r3, r3
 800a652:	f003 0307 	and.w	r3, r3, #7
 800a656:	b2da      	uxtb	r2, r3
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a660:	0d5b      	lsrs	r3, r3, #21
 800a662:	b2db      	uxtb	r3, r3
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a672:	0c9b      	lsrs	r3, r3, #18
 800a674:	b2db      	uxtb	r3, r3
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a684:	0bdb      	lsrs	r3, r3, #15
 800a686:	b2db      	uxtb	r3, r3
 800a688:	f003 0307 	and.w	r3, r3, #7
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	1c5a      	adds	r2, r3, #1
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	7e1b      	ldrb	r3, [r3, #24]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f003 0307 	and.w	r3, r3, #7
 800a6a6:	3302      	adds	r3, #2
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a6b2:	fb03 f202 	mul.w	r2, r3, r2
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	7a1b      	ldrb	r3, [r3, #8]
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	f003 030f 	and.w	r3, r3, #15
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	409a      	lsls	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a6d4:	0a52      	lsrs	r2, r2, #9
 800a6d6:	fb03 f202 	mul.w	r2, r3, r2
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6e4:	661a      	str	r2, [r3, #96]	@ 0x60
 800a6e6:	e031      	b.n	800a74c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d11d      	bne.n	800a72c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6f4:	041b      	lsls	r3, r3, #16
 800a6f6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6fe:	0c1b      	lsrs	r3, r3, #16
 800a700:	431a      	orrs	r2, r3
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	3301      	adds	r3, #1
 800a70c:	029a      	lsls	r2, r3, #10
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a720:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	661a      	str	r2, [r3, #96]	@ 0x60
 800a72a:	e00f      	b.n	800a74c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a58      	ldr	r2, [pc, #352]	@ (800a894 <HAL_SD_GetCardCSD+0x344>)
 800a732:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a738:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e09d      	b.n	800a888 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a750:	0b9b      	lsrs	r3, r3, #14
 800a752:	b2db      	uxtb	r3, r3
 800a754:	f003 0301 	and.w	r3, r3, #1
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a762:	09db      	lsrs	r3, r3, #7
 800a764:	b2db      	uxtb	r3, r3
 800a766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a784:	0fdb      	lsrs	r3, r3, #31
 800a786:	b2da      	uxtb	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a790:	0f5b      	lsrs	r3, r3, #29
 800a792:	b2db      	uxtb	r3, r3
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7a2:	0e9b      	lsrs	r3, r3, #26
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0307 	and.w	r3, r3, #7
 800a7aa:	b2da      	uxtb	r2, r3
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7b4:	0d9b      	lsrs	r3, r3, #22
 800a7b6:	b2db      	uxtb	r3, r3
 800a7b8:	f003 030f 	and.w	r3, r3, #15
 800a7bc:	b2da      	uxtb	r2, r3
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7c6:	0d5b      	lsrs	r3, r3, #21
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	f003 0301 	and.w	r3, r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7e2:	0c1b      	lsrs	r3, r3, #16
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7f6:	0bdb      	lsrs	r3, r3, #15
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a80a:	0b9b      	lsrs	r3, r3, #14
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a81e:	0b5b      	lsrs	r3, r3, #13
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a832:	0b1b      	lsrs	r3, r3, #12
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a846:	0a9b      	lsrs	r3, r3, #10
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0303 	and.w	r3, r3, #3
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a85a:	0a1b      	lsrs	r3, r3, #8
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a86e:	085b      	lsrs	r3, r3, #1
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a876:	b2da      	uxtb	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr
 800a894:	004005ff 	.word	0x004005ff

0800a898 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a8fc:	f107 030c 	add.w	r3, r7, #12
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fa10 	bl	800ad28 <SD_SendStatus>
 800a908:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d005      	beq.n	800a91c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	431a      	orrs	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	0a5b      	lsrs	r3, r3, #9
 800a920:	f003 030f 	and.w	r3, r3, #15
 800a924:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a926:	693b      	ldr	r3, [r7, #16]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a93c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a94c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a94e:	bf00      	nop
 800a950:	3714      	adds	r7, #20
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a95a:	b580      	push	{r7, lr}
 800a95c:	b084      	sub	sp, #16
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a966:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a96c:	2b82      	cmp	r3, #130	@ 0x82
 800a96e:	d111      	bne.n	800a994 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4618      	mov	r0, r3
 800a976:	f001 fe13 	bl	800c5a0 <SDMMC_CmdStopTransfer>
 800a97a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d008      	beq.n	800a994 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	431a      	orrs	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7ff fdd4 	bl	800a53c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f022 0208 	bic.w	r2, r2, #8
 800a9a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a9ac:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f002 fa17 	bl	800cdf0 <HAL_SD_RxCpltCallback>
#endif
}
 800a9c2:	bf00      	nop
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fb ffa4 	bl	8006928 <HAL_DMA_GetError>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	d03e      	beq.n	800aa64 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d002      	beq.n	800aa02 <SD_DMAError+0x36>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d12d      	bne.n	800aa5e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a19      	ldr	r2, [pc, #100]	@ (800aa6c <SD_DMAError+0xa0>)
 800aa08:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800aa18:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa1e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aa26:	6978      	ldr	r0, [r7, #20]
 800aa28:	f7ff ff62 	bl	800a8f0 <HAL_SD_GetCardState>
 800aa2c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	2b06      	cmp	r3, #6
 800aa32:	d002      	beq.n	800aa3a <SD_DMAError+0x6e>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b05      	cmp	r3, #5
 800aa38:	d10a      	bne.n	800aa50 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f001 fdae 	bl	800c5a0 <SDMMC_CmdStopTransfer>
 800aa44:	4602      	mov	r2, r0
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa4a:	431a      	orrs	r2, r3
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aa5e:	6978      	ldr	r0, [r7, #20]
 800aa60:	f7ff fd6c 	bl	800a53c <HAL_SD_ErrorCallback>
#endif
  }
}
 800aa64:	bf00      	nop
 800aa66:	3718      	adds	r7, #24
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	004005ff 	.word	0x004005ff

0800aa70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa70:	b5b0      	push	{r4, r5, r7, lr}
 800aa72:	b094      	sub	sp, #80	@ 0x50
 800aa74:	af04      	add	r7, sp, #16
 800aa76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f001 fc5f 	bl	800c344 <SDMMC_GetPowerState>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d102      	bne.n	800aa92 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa8c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800aa90:	e0b8      	b.n	800ac04 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d02f      	beq.n	800aafa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f001 fe46 	bl	800c730 <SDMMC_CmdSendCID>
 800aaa4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <SD_InitCard+0x40>
    {
      return errorstate;
 800aaac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaae:	e0a9      	b.n	800ac04 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2100      	movs	r1, #0
 800aab6:	4618      	mov	r0, r3
 800aab8:	f001 fc89 	bl	800c3ce <SDMMC_GetResponse>
 800aabc:	4602      	mov	r2, r0
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2104      	movs	r1, #4
 800aac8:	4618      	mov	r0, r3
 800aaca:	f001 fc80 	bl	800c3ce <SDMMC_GetResponse>
 800aace:	4602      	mov	r2, r0
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2108      	movs	r1, #8
 800aada:	4618      	mov	r0, r3
 800aadc:	f001 fc77 	bl	800c3ce <SDMMC_GetResponse>
 800aae0:	4602      	mov	r2, r0
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	210c      	movs	r1, #12
 800aaec:	4618      	mov	r0, r3
 800aaee:	f001 fc6e 	bl	800c3ce <SDMMC_GetResponse>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aafe:	2b03      	cmp	r3, #3
 800ab00:	d00d      	beq.n	800ab1e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f107 020e 	add.w	r2, r7, #14
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 fe4c 	bl	800c7aa <SDMMC_CmdSetRelAdd>
 800ab12:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <SD_InitCard+0xae>
    {
      return errorstate;
 800ab1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab1c:	e072      	b.n	800ac04 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d036      	beq.n	800ab94 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ab26:	89fb      	ldrh	r3, [r7, #14]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab36:	041b      	lsls	r3, r3, #16
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	f001 fe16 	bl	800c76c <SDMMC_CmdSendCSD>
 800ab40:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <SD_InitCard+0xdc>
    {
      return errorstate;
 800ab48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab4a:	e05b      	b.n	800ac04 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2100      	movs	r1, #0
 800ab52:	4618      	mov	r0, r3
 800ab54:	f001 fc3b 	bl	800c3ce <SDMMC_GetResponse>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2104      	movs	r1, #4
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 fc32 	bl	800c3ce <SDMMC_GetResponse>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	2108      	movs	r1, #8
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 fc29 	bl	800c3ce <SDMMC_GetResponse>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	210c      	movs	r1, #12
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f001 fc20 	bl	800c3ce <SDMMC_GetResponse>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2104      	movs	r1, #4
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f001 fc17 	bl	800c3ce <SDMMC_GetResponse>
 800aba0:	4603      	mov	r3, r0
 800aba2:	0d1a      	lsrs	r2, r3, #20
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800aba8:	f107 0310 	add.w	r3, r7, #16
 800abac:	4619      	mov	r1, r3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f7ff fcce 	bl	800a550 <HAL_SD_GetCardCSD>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800abbe:	e021      	b.n	800ac04 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6819      	ldr	r1, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abc8:	041b      	lsls	r3, r3, #16
 800abca:	2200      	movs	r2, #0
 800abcc:	461c      	mov	r4, r3
 800abce:	4615      	mov	r5, r2
 800abd0:	4622      	mov	r2, r4
 800abd2:	462b      	mov	r3, r5
 800abd4:	4608      	mov	r0, r1
 800abd6:	f001 fd05 	bl	800c5e4 <SDMMC_CmdSelDesel>
 800abda:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800abdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <SD_InitCard+0x176>
  {
    return errorstate;
 800abe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abe4:	e00e      	b.n	800ac04 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681d      	ldr	r5, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	466c      	mov	r4, sp
 800abee:	f103 0210 	add.w	r2, r3, #16
 800abf2:	ca07      	ldmia	r2, {r0, r1, r2}
 800abf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800abf8:	3304      	adds	r3, #4
 800abfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abfc:	4628      	mov	r0, r5
 800abfe:	f001 fb67 	bl	800c2d0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3740      	adds	r7, #64	@ 0x40
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bdb0      	pop	{r4, r5, r7, pc}

0800ac0c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f001 fd00 	bl	800c62a <SDMMC_CmdGoIdleState>
 800ac2a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d001      	beq.n	800ac36 <SD_PowerON+0x2a>
  {
    return errorstate;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	e072      	b.n	800ad1c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 fd13 	bl	800c666 <SDMMC_CmdOperCond>
 800ac40:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00d      	beq.n	800ac64 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f001 fce9 	bl	800c62a <SDMMC_CmdGoIdleState>
 800ac58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d004      	beq.n	800ac6a <SD_PowerON+0x5e>
    {
      return errorstate;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	e05b      	b.n	800ad1c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d137      	bne.n	800ace2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f001 fd13 	bl	800c6a4 <SDMMC_CmdAppCommand>
 800ac7e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d02d      	beq.n	800ace2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac86:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ac8a:	e047      	b.n	800ad1c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2100      	movs	r1, #0
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 fd06 	bl	800c6a4 <SDMMC_CmdAppCommand>
 800ac98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <SD_PowerON+0x98>
    {
      return errorstate;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	e03b      	b.n	800ad1c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	491e      	ldr	r1, [pc, #120]	@ (800ad24 <SD_PowerON+0x118>)
 800acaa:	4618      	mov	r0, r3
 800acac:	f001 fd1c 	bl	800c6e8 <SDMMC_CmdAppOperCommand>
 800acb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d002      	beq.n	800acbe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acb8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800acbc:	e02e      	b.n	800ad1c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2100      	movs	r1, #0
 800acc4:	4618      	mov	r0, r3
 800acc6:	f001 fb82 	bl	800c3ce <SDMMC_GetResponse>
 800acca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	0fdb      	lsrs	r3, r3, #31
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d101      	bne.n	800acd8 <SD_PowerON+0xcc>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <SD_PowerON+0xce>
 800acd8:	2300      	movs	r3, #0
 800acda:	613b      	str	r3, [r7, #16]

    count++;
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	3301      	adds	r3, #1
 800ace0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ace8:	4293      	cmp	r3, r2
 800acea:	d802      	bhi.n	800acf2 <SD_PowerON+0xe6>
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d0cc      	beq.n	800ac8c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d902      	bls.n	800ad02 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800acfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad00:	e00c      	b.n	800ad1c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	645a      	str	r2, [r3, #68]	@ 0x44
 800ad12:	e002      	b.n	800ad1a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3718      	adds	r7, #24
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	c1100000 	.word	0xc1100000

0800ad28 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ad38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad3c:	e018      	b.n	800ad70 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad46:	041b      	lsls	r3, r3, #16
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f001 fd4e 	bl	800c7ec <SDMMC_CmdSendStatus>
 800ad50:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d001      	beq.n	800ad5c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	e009      	b.n	800ad70 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f001 fb33 	bl	800c3ce <SDMMC_GetResponse>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d101      	bne.n	800ad8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e025      	b.n	800add8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d106      	bne.n	800ada6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7f6 fa6b 	bl	800127c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2202      	movs	r2, #2
 800adaa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f001 f987 	bl	800c0cc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	461a      	mov	r2, r3
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	f001 f9db 	bl	800c184 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2201      	movs	r2, #1
 800add2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800add6:	2300      	movs	r3, #0
}
 800add8:	4618      	mov	r0, r3
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800adf2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800adf4:	7dfb      	ldrb	r3, [r7, #23]
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d101      	bne.n	800adfe <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800adfa:	2302      	movs	r3, #2
 800adfc:	e021      	b.n	800ae42 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800adfe:	7dfb      	ldrb	r3, [r7, #23]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d002      	beq.n	800ae0a <HAL_SDRAM_SendCommand+0x2a>
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
 800ae06:	2b05      	cmp	r3, #5
 800ae08:	d118      	bne.n	800ae3c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f001 fa1c 	bl	800c258 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d104      	bne.n	800ae32 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2205      	movs	r2, #5
 800ae2c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae30:	e006      	b.n	800ae40 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2201      	movs	r2, #1
 800ae36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ae3a:	e001      	b.n	800ae40 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e000      	b.n	800ae42 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d101      	bne.n	800ae64 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ae60:	2302      	movs	r3, #2
 800ae62:	e016      	b.n	800ae92 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d10f      	bne.n	800ae90 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2202      	movs	r2, #2
 800ae74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 fa0e 	bl	800c2a0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e000      	b.n	800ae92 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e049      	b.n	800af40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d106      	bne.n	800aec6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2200      	movs	r2, #0
 800aebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7fa fc13 	bl	80056ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2202      	movs	r2, #2
 800aeca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	3304      	adds	r3, #4
 800aed6:	4619      	mov	r1, r3
 800aed8:	4610      	mov	r0, r2
 800aeda:	f000 fabf 	bl	800b45c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2201      	movs	r2, #1
 800af12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af56:	b2db      	uxtb	r3, r3
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d001      	beq.n	800af60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	e054      	b.n	800b00a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2202      	movs	r2, #2
 800af64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	68da      	ldr	r2, [r3, #12]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0201 	orr.w	r2, r2, #1
 800af76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a26      	ldr	r2, [pc, #152]	@ (800b018 <HAL_TIM_Base_Start_IT+0xd0>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d022      	beq.n	800afc8 <HAL_TIM_Base_Start_IT+0x80>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af8a:	d01d      	beq.n	800afc8 <HAL_TIM_Base_Start_IT+0x80>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a22      	ldr	r2, [pc, #136]	@ (800b01c <HAL_TIM_Base_Start_IT+0xd4>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d018      	beq.n	800afc8 <HAL_TIM_Base_Start_IT+0x80>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a21      	ldr	r2, [pc, #132]	@ (800b020 <HAL_TIM_Base_Start_IT+0xd8>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d013      	beq.n	800afc8 <HAL_TIM_Base_Start_IT+0x80>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a1f      	ldr	r2, [pc, #124]	@ (800b024 <HAL_TIM_Base_Start_IT+0xdc>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d00e      	beq.n	800afc8 <HAL_TIM_Base_Start_IT+0x80>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a1e      	ldr	r2, [pc, #120]	@ (800b028 <HAL_TIM_Base_Start_IT+0xe0>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d009      	beq.n	800afc8 <HAL_TIM_Base_Start_IT+0x80>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a1c      	ldr	r2, [pc, #112]	@ (800b02c <HAL_TIM_Base_Start_IT+0xe4>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d004      	beq.n	800afc8 <HAL_TIM_Base_Start_IT+0x80>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a1b      	ldr	r2, [pc, #108]	@ (800b030 <HAL_TIM_Base_Start_IT+0xe8>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d115      	bne.n	800aff4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	4b19      	ldr	r3, [pc, #100]	@ (800b034 <HAL_TIM_Base_Start_IT+0xec>)
 800afd0:	4013      	ands	r3, r2
 800afd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2b06      	cmp	r3, #6
 800afd8:	d015      	beq.n	800b006 <HAL_TIM_Base_Start_IT+0xbe>
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afe0:	d011      	beq.n	800b006 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f042 0201 	orr.w	r2, r2, #1
 800aff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aff2:	e008      	b.n	800b006 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f042 0201 	orr.w	r2, r2, #1
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	e000      	b.n	800b008 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	40010000 	.word	0x40010000
 800b01c:	40000400 	.word	0x40000400
 800b020:	40000800 	.word	0x40000800
 800b024:	40000c00 	.word	0x40000c00
 800b028:	40010400 	.word	0x40010400
 800b02c:	40014000 	.word	0x40014000
 800b030:	40001800 	.word	0x40001800
 800b034:	00010007 	.word	0x00010007

0800b038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f003 0302 	and.w	r3, r3, #2
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d122      	bne.n	800b094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f003 0302 	and.w	r3, r3, #2
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d11b      	bne.n	800b094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f06f 0202 	mvn.w	r2, #2
 800b064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2201      	movs	r2, #1
 800b06a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	f003 0303 	and.w	r3, r3, #3
 800b076:	2b00      	cmp	r3, #0
 800b078:	d003      	beq.n	800b082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f9d0 	bl	800b420 <HAL_TIM_IC_CaptureCallback>
 800b080:	e005      	b.n	800b08e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f9c2 	bl	800b40c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f9d3 	bl	800b434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	f003 0304 	and.w	r3, r3, #4
 800b09e:	2b04      	cmp	r3, #4
 800b0a0:	d122      	bne.n	800b0e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	f003 0304 	and.w	r3, r3, #4
 800b0ac:	2b04      	cmp	r3, #4
 800b0ae:	d11b      	bne.n	800b0e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f06f 0204 	mvn.w	r2, #4
 800b0b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2202      	movs	r2, #2
 800b0be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d003      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f9a6 	bl	800b420 <HAL_TIM_IC_CaptureCallback>
 800b0d4:	e005      	b.n	800b0e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f998 	bl	800b40c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 f9a9 	bl	800b434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	691b      	ldr	r3, [r3, #16]
 800b0ee:	f003 0308 	and.w	r3, r3, #8
 800b0f2:	2b08      	cmp	r3, #8
 800b0f4:	d122      	bne.n	800b13c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68db      	ldr	r3, [r3, #12]
 800b0fc:	f003 0308 	and.w	r3, r3, #8
 800b100:	2b08      	cmp	r3, #8
 800b102:	d11b      	bne.n	800b13c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f06f 0208 	mvn.w	r2, #8
 800b10c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2204      	movs	r2, #4
 800b112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	f003 0303 	and.w	r3, r3, #3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f97c 	bl	800b420 <HAL_TIM_IC_CaptureCallback>
 800b128:	e005      	b.n	800b136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f96e 	bl	800b40c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f97f 	bl	800b434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f003 0310 	and.w	r3, r3, #16
 800b146:	2b10      	cmp	r3, #16
 800b148:	d122      	bne.n	800b190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f003 0310 	and.w	r3, r3, #16
 800b154:	2b10      	cmp	r3, #16
 800b156:	d11b      	bne.n	800b190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 0210 	mvn.w	r2, #16
 800b160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2208      	movs	r2, #8
 800b166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 f952 	bl	800b420 <HAL_TIM_IC_CaptureCallback>
 800b17c:	e005      	b.n	800b18a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f944 	bl	800b40c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f955 	bl	800b434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d10e      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d107      	bne.n	800b1bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f06f 0201 	mvn.w	r2, #1
 800b1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f7f8 f940 	bl	800343c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1c6:	2b80      	cmp	r3, #128	@ 0x80
 800b1c8:	d10e      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1d4:	2b80      	cmp	r3, #128	@ 0x80
 800b1d6:	d107      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b1e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fb0c 	bl	800b800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1f6:	d10e      	bne.n	800b216 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b202:	2b80      	cmp	r3, #128	@ 0x80
 800b204:	d107      	bne.n	800b216 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 faff 	bl	800b814 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b220:	2b40      	cmp	r3, #64	@ 0x40
 800b222:	d10e      	bne.n	800b242 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b22e:	2b40      	cmp	r3, #64	@ 0x40
 800b230:	d107      	bne.n	800b242 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f903 	bl	800b448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	691b      	ldr	r3, [r3, #16]
 800b248:	f003 0320 	and.w	r3, r3, #32
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	d10e      	bne.n	800b26e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	f003 0320 	and.w	r3, r3, #32
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	d107      	bne.n	800b26e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f06f 0220 	mvn.w	r2, #32
 800b266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f000 fabf 	bl	800b7ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b26e:	bf00      	nop
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d101      	bne.n	800b294 <HAL_TIM_ConfigClockSource+0x1c>
 800b290:	2302      	movs	r3, #2
 800b292:	e0b4      	b.n	800b3fe <HAL_TIM_ConfigClockSource+0x186>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2202      	movs	r2, #2
 800b2a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	4b56      	ldr	r3, [pc, #344]	@ (800b408 <HAL_TIM_ConfigClockSource+0x190>)
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b2ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2cc:	d03e      	beq.n	800b34c <HAL_TIM_ConfigClockSource+0xd4>
 800b2ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2d2:	f200 8087 	bhi.w	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2da:	f000 8086 	beq.w	800b3ea <HAL_TIM_ConfigClockSource+0x172>
 800b2de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2e2:	d87f      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2e4:	2b70      	cmp	r3, #112	@ 0x70
 800b2e6:	d01a      	beq.n	800b31e <HAL_TIM_ConfigClockSource+0xa6>
 800b2e8:	2b70      	cmp	r3, #112	@ 0x70
 800b2ea:	d87b      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2ec:	2b60      	cmp	r3, #96	@ 0x60
 800b2ee:	d050      	beq.n	800b392 <HAL_TIM_ConfigClockSource+0x11a>
 800b2f0:	2b60      	cmp	r3, #96	@ 0x60
 800b2f2:	d877      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2f4:	2b50      	cmp	r3, #80	@ 0x50
 800b2f6:	d03c      	beq.n	800b372 <HAL_TIM_ConfigClockSource+0xfa>
 800b2f8:	2b50      	cmp	r3, #80	@ 0x50
 800b2fa:	d873      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
 800b2fc:	2b40      	cmp	r3, #64	@ 0x40
 800b2fe:	d058      	beq.n	800b3b2 <HAL_TIM_ConfigClockSource+0x13a>
 800b300:	2b40      	cmp	r3, #64	@ 0x40
 800b302:	d86f      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
 800b304:	2b30      	cmp	r3, #48	@ 0x30
 800b306:	d064      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x15a>
 800b308:	2b30      	cmp	r3, #48	@ 0x30
 800b30a:	d86b      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
 800b30c:	2b20      	cmp	r3, #32
 800b30e:	d060      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x15a>
 800b310:	2b20      	cmp	r3, #32
 800b312:	d867      	bhi.n	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
 800b314:	2b00      	cmp	r3, #0
 800b316:	d05c      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x15a>
 800b318:	2b10      	cmp	r3, #16
 800b31a:	d05a      	beq.n	800b3d2 <HAL_TIM_ConfigClockSource+0x15a>
 800b31c:	e062      	b.n	800b3e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b32e:	f000 f9af 	bl	800b690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b340:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68ba      	ldr	r2, [r7, #8]
 800b348:	609a      	str	r2, [r3, #8]
      break;
 800b34a:	e04f      	b.n	800b3ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b35c:	f000 f998 	bl	800b690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689a      	ldr	r2, [r3, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b36e:	609a      	str	r2, [r3, #8]
      break;
 800b370:	e03c      	b.n	800b3ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b37e:	461a      	mov	r2, r3
 800b380:	f000 f90c 	bl	800b59c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2150      	movs	r1, #80	@ 0x50
 800b38a:	4618      	mov	r0, r3
 800b38c:	f000 f965 	bl	800b65a <TIM_ITRx_SetConfig>
      break;
 800b390:	e02c      	b.n	800b3ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f000 f92b 	bl	800b5fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2160      	movs	r1, #96	@ 0x60
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 f955 	bl	800b65a <TIM_ITRx_SetConfig>
      break;
 800b3b0:	e01c      	b.n	800b3ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f000 f8ec 	bl	800b59c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2140      	movs	r1, #64	@ 0x40
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 f945 	bl	800b65a <TIM_ITRx_SetConfig>
      break;
 800b3d0:	e00c      	b.n	800b3ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681a      	ldr	r2, [r3, #0]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f000 f93c 	bl	800b65a <TIM_ITRx_SetConfig>
      break;
 800b3e2:	e003      	b.n	800b3ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b3e8:	e000      	b.n	800b3ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b3ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	fffeff88 	.word	0xfffeff88

0800b40c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b414:	bf00      	nop
 800b416:	370c      	adds	r7, #12
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b428:	bf00      	nop
 800b42a:	370c      	adds	r7, #12
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr

0800b434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b434:	b480      	push	{r7}
 800b436:	b083      	sub	sp, #12
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	4a40      	ldr	r2, [pc, #256]	@ (800b570 <TIM_Base_SetConfig+0x114>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d013      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b47a:	d00f      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	4a3d      	ldr	r2, [pc, #244]	@ (800b574 <TIM_Base_SetConfig+0x118>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d00b      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	4a3c      	ldr	r2, [pc, #240]	@ (800b578 <TIM_Base_SetConfig+0x11c>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d007      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4a3b      	ldr	r2, [pc, #236]	@ (800b57c <TIM_Base_SetConfig+0x120>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d003      	beq.n	800b49c <TIM_Base_SetConfig+0x40>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a3a      	ldr	r2, [pc, #232]	@ (800b580 <TIM_Base_SetConfig+0x124>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d108      	bne.n	800b4ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a2f      	ldr	r2, [pc, #188]	@ (800b570 <TIM_Base_SetConfig+0x114>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d02b      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4bc:	d027      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4a2c      	ldr	r2, [pc, #176]	@ (800b574 <TIM_Base_SetConfig+0x118>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d023      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4a2b      	ldr	r2, [pc, #172]	@ (800b578 <TIM_Base_SetConfig+0x11c>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d01f      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a2a      	ldr	r2, [pc, #168]	@ (800b57c <TIM_Base_SetConfig+0x120>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d01b      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a29      	ldr	r2, [pc, #164]	@ (800b580 <TIM_Base_SetConfig+0x124>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d017      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a28      	ldr	r2, [pc, #160]	@ (800b584 <TIM_Base_SetConfig+0x128>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d013      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a27      	ldr	r2, [pc, #156]	@ (800b588 <TIM_Base_SetConfig+0x12c>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00f      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a26      	ldr	r2, [pc, #152]	@ (800b58c <TIM_Base_SetConfig+0x130>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d00b      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a25      	ldr	r2, [pc, #148]	@ (800b590 <TIM_Base_SetConfig+0x134>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d007      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a24      	ldr	r2, [pc, #144]	@ (800b594 <TIM_Base_SetConfig+0x138>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d003      	beq.n	800b50e <TIM_Base_SetConfig+0xb2>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a23      	ldr	r2, [pc, #140]	@ (800b598 <TIM_Base_SetConfig+0x13c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d108      	bne.n	800b520 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	695b      	ldr	r3, [r3, #20]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	689a      	ldr	r2, [r3, #8]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a0a      	ldr	r2, [pc, #40]	@ (800b570 <TIM_Base_SetConfig+0x114>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d003      	beq.n	800b554 <TIM_Base_SetConfig+0xf8>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a0c      	ldr	r2, [pc, #48]	@ (800b580 <TIM_Base_SetConfig+0x124>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d103      	bne.n	800b55c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	691a      	ldr	r2, [r3, #16]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	615a      	str	r2, [r3, #20]
}
 800b562:	bf00      	nop
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	40010000 	.word	0x40010000
 800b574:	40000400 	.word	0x40000400
 800b578:	40000800 	.word	0x40000800
 800b57c:	40000c00 	.word	0x40000c00
 800b580:	40010400 	.word	0x40010400
 800b584:	40014000 	.word	0x40014000
 800b588:	40014400 	.word	0x40014400
 800b58c:	40014800 	.word	0x40014800
 800b590:	40001800 	.word	0x40001800
 800b594:	40001c00 	.word	0x40001c00
 800b598:	40002000 	.word	0x40002000

0800b59c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6a1b      	ldr	r3, [r3, #32]
 800b5ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	f023 0201 	bic.w	r2, r3, #1
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b5c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	011b      	lsls	r3, r3, #4
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	f023 030a 	bic.w	r3, r3, #10
 800b5d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	621a      	str	r2, [r3, #32]
}
 800b5ee:	bf00      	nop
 800b5f0:	371c      	adds	r7, #28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b087      	sub	sp, #28
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6a1b      	ldr	r3, [r3, #32]
 800b60a:	f023 0210 	bic.w	r2, r3, #16
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	031b      	lsls	r3, r3, #12
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b636:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	011b      	lsls	r3, r3, #4
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	4313      	orrs	r3, r2
 800b640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	621a      	str	r2, [r3, #32]
}
 800b64e:	bf00      	nop
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b085      	sub	sp, #20
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
 800b662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	4313      	orrs	r3, r2
 800b678:	f043 0307 	orr.w	r3, r3, #7
 800b67c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	609a      	str	r2, [r3, #8]
}
 800b684:	bf00      	nop
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b690:	b480      	push	{r7}
 800b692:	b087      	sub	sp, #28
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	021a      	lsls	r2, r3, #8
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	431a      	orrs	r2, r3
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	697a      	ldr	r2, [r7, #20]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	609a      	str	r2, [r3, #8]
}
 800b6c4:	bf00      	nop
 800b6c6:	371c      	adds	r7, #28
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b085      	sub	sp, #20
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d101      	bne.n	800b6e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	e06d      	b.n	800b7c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2202      	movs	r2, #2
 800b6f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a30      	ldr	r2, [pc, #192]	@ (800b7d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d004      	beq.n	800b71c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a2f      	ldr	r2, [pc, #188]	@ (800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d108      	bne.n	800b72e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b722:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b734:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a20      	ldr	r2, [pc, #128]	@ (800b7d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d022      	beq.n	800b798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b75a:	d01d      	beq.n	800b798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a1d      	ldr	r2, [pc, #116]	@ (800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d018      	beq.n	800b798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a1c      	ldr	r2, [pc, #112]	@ (800b7dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d013      	beq.n	800b798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a1a      	ldr	r2, [pc, #104]	@ (800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d00e      	beq.n	800b798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a15      	ldr	r2, [pc, #84]	@ (800b7d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d009      	beq.n	800b798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a16      	ldr	r2, [pc, #88]	@ (800b7e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d004      	beq.n	800b798 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4a15      	ldr	r2, [pc, #84]	@ (800b7e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d10c      	bne.n	800b7b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b79e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	4313      	orrs	r3, r2
 800b7a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr
 800b7d0:	40010000 	.word	0x40010000
 800b7d4:	40010400 	.word	0x40010400
 800b7d8:	40000400 	.word	0x40000400
 800b7dc:	40000800 	.word	0x40000800
 800b7e0:	40000c00 	.word	0x40000c00
 800b7e4:	40014000 	.word	0x40014000
 800b7e8:	40001800 	.word	0x40001800

0800b7ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7f4:	bf00      	nop
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b808:	bf00      	nop
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b81c:	bf00      	nop
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e040      	b.n	800b8bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7f9 ff9e 	bl	800578c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2224      	movs	r2, #36	@ 0x24
 800b854:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f022 0201 	bic.w	r2, r2, #1
 800b864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f82c 	bl	800b8c4 <UART_SetConfig>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d101      	bne.n	800b876 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e022      	b.n	800b8bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fa84 	bl	800bd8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	689a      	ldr	r2, [r3, #8]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b8a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f042 0201 	orr.w	r2, r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fb0b 	bl	800bed0 <UART_CheckIdleState>
 800b8ba:	4603      	mov	r3, r0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b088      	sub	sp, #32
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	431a      	orrs	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	431a      	orrs	r2, r3
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	69db      	ldr	r3, [r3, #28]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4ba6      	ldr	r3, [pc, #664]	@ (800bb88 <UART_SetConfig+0x2c4>)
 800b8f0:	4013      	ands	r3, r2
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	6812      	ldr	r2, [r2, #0]
 800b8f6:	6979      	ldr	r1, [r7, #20]
 800b8f8:	430b      	orrs	r3, r1
 800b8fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6a1b      	ldr	r3, [r3, #32]
 800b91c:	697a      	ldr	r2, [r7, #20]
 800b91e:	4313      	orrs	r3, r2
 800b920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	689b      	ldr	r3, [r3, #8]
 800b928:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	430a      	orrs	r2, r1
 800b934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a94      	ldr	r2, [pc, #592]	@ (800bb8c <UART_SetConfig+0x2c8>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d120      	bne.n	800b982 <UART_SetConfig+0xbe>
 800b940:	4b93      	ldr	r3, [pc, #588]	@ (800bb90 <UART_SetConfig+0x2cc>)
 800b942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b946:	f003 0303 	and.w	r3, r3, #3
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d816      	bhi.n	800b97c <UART_SetConfig+0xb8>
 800b94e:	a201      	add	r2, pc, #4	@ (adr r2, 800b954 <UART_SetConfig+0x90>)
 800b950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b954:	0800b965 	.word	0x0800b965
 800b958:	0800b971 	.word	0x0800b971
 800b95c:	0800b96b 	.word	0x0800b96b
 800b960:	0800b977 	.word	0x0800b977
 800b964:	2301      	movs	r3, #1
 800b966:	77fb      	strb	r3, [r7, #31]
 800b968:	e150      	b.n	800bc0c <UART_SetConfig+0x348>
 800b96a:	2302      	movs	r3, #2
 800b96c:	77fb      	strb	r3, [r7, #31]
 800b96e:	e14d      	b.n	800bc0c <UART_SetConfig+0x348>
 800b970:	2304      	movs	r3, #4
 800b972:	77fb      	strb	r3, [r7, #31]
 800b974:	e14a      	b.n	800bc0c <UART_SetConfig+0x348>
 800b976:	2308      	movs	r3, #8
 800b978:	77fb      	strb	r3, [r7, #31]
 800b97a:	e147      	b.n	800bc0c <UART_SetConfig+0x348>
 800b97c:	2310      	movs	r3, #16
 800b97e:	77fb      	strb	r3, [r7, #31]
 800b980:	e144      	b.n	800bc0c <UART_SetConfig+0x348>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a83      	ldr	r2, [pc, #524]	@ (800bb94 <UART_SetConfig+0x2d0>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d132      	bne.n	800b9f2 <UART_SetConfig+0x12e>
 800b98c:	4b80      	ldr	r3, [pc, #512]	@ (800bb90 <UART_SetConfig+0x2cc>)
 800b98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b992:	f003 030c 	and.w	r3, r3, #12
 800b996:	2b0c      	cmp	r3, #12
 800b998:	d828      	bhi.n	800b9ec <UART_SetConfig+0x128>
 800b99a:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a0 <UART_SetConfig+0xdc>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9d5 	.word	0x0800b9d5
 800b9a4:	0800b9ed 	.word	0x0800b9ed
 800b9a8:	0800b9ed 	.word	0x0800b9ed
 800b9ac:	0800b9ed 	.word	0x0800b9ed
 800b9b0:	0800b9e1 	.word	0x0800b9e1
 800b9b4:	0800b9ed 	.word	0x0800b9ed
 800b9b8:	0800b9ed 	.word	0x0800b9ed
 800b9bc:	0800b9ed 	.word	0x0800b9ed
 800b9c0:	0800b9db 	.word	0x0800b9db
 800b9c4:	0800b9ed 	.word	0x0800b9ed
 800b9c8:	0800b9ed 	.word	0x0800b9ed
 800b9cc:	0800b9ed 	.word	0x0800b9ed
 800b9d0:	0800b9e7 	.word	0x0800b9e7
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	77fb      	strb	r3, [r7, #31]
 800b9d8:	e118      	b.n	800bc0c <UART_SetConfig+0x348>
 800b9da:	2302      	movs	r3, #2
 800b9dc:	77fb      	strb	r3, [r7, #31]
 800b9de:	e115      	b.n	800bc0c <UART_SetConfig+0x348>
 800b9e0:	2304      	movs	r3, #4
 800b9e2:	77fb      	strb	r3, [r7, #31]
 800b9e4:	e112      	b.n	800bc0c <UART_SetConfig+0x348>
 800b9e6:	2308      	movs	r3, #8
 800b9e8:	77fb      	strb	r3, [r7, #31]
 800b9ea:	e10f      	b.n	800bc0c <UART_SetConfig+0x348>
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	77fb      	strb	r3, [r7, #31]
 800b9f0:	e10c      	b.n	800bc0c <UART_SetConfig+0x348>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a68      	ldr	r2, [pc, #416]	@ (800bb98 <UART_SetConfig+0x2d4>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d120      	bne.n	800ba3e <UART_SetConfig+0x17a>
 800b9fc:	4b64      	ldr	r3, [pc, #400]	@ (800bb90 <UART_SetConfig+0x2cc>)
 800b9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba02:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ba06:	2b30      	cmp	r3, #48	@ 0x30
 800ba08:	d013      	beq.n	800ba32 <UART_SetConfig+0x16e>
 800ba0a:	2b30      	cmp	r3, #48	@ 0x30
 800ba0c:	d814      	bhi.n	800ba38 <UART_SetConfig+0x174>
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	d009      	beq.n	800ba26 <UART_SetConfig+0x162>
 800ba12:	2b20      	cmp	r3, #32
 800ba14:	d810      	bhi.n	800ba38 <UART_SetConfig+0x174>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <UART_SetConfig+0x15c>
 800ba1a:	2b10      	cmp	r3, #16
 800ba1c:	d006      	beq.n	800ba2c <UART_SetConfig+0x168>
 800ba1e:	e00b      	b.n	800ba38 <UART_SetConfig+0x174>
 800ba20:	2300      	movs	r3, #0
 800ba22:	77fb      	strb	r3, [r7, #31]
 800ba24:	e0f2      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba26:	2302      	movs	r3, #2
 800ba28:	77fb      	strb	r3, [r7, #31]
 800ba2a:	e0ef      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba2c:	2304      	movs	r3, #4
 800ba2e:	77fb      	strb	r3, [r7, #31]
 800ba30:	e0ec      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba32:	2308      	movs	r3, #8
 800ba34:	77fb      	strb	r3, [r7, #31]
 800ba36:	e0e9      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba38:	2310      	movs	r3, #16
 800ba3a:	77fb      	strb	r3, [r7, #31]
 800ba3c:	e0e6      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a56      	ldr	r2, [pc, #344]	@ (800bb9c <UART_SetConfig+0x2d8>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d120      	bne.n	800ba8a <UART_SetConfig+0x1c6>
 800ba48:	4b51      	ldr	r3, [pc, #324]	@ (800bb90 <UART_SetConfig+0x2cc>)
 800ba4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba52:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba54:	d013      	beq.n	800ba7e <UART_SetConfig+0x1ba>
 800ba56:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba58:	d814      	bhi.n	800ba84 <UART_SetConfig+0x1c0>
 800ba5a:	2b80      	cmp	r3, #128	@ 0x80
 800ba5c:	d009      	beq.n	800ba72 <UART_SetConfig+0x1ae>
 800ba5e:	2b80      	cmp	r3, #128	@ 0x80
 800ba60:	d810      	bhi.n	800ba84 <UART_SetConfig+0x1c0>
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d002      	beq.n	800ba6c <UART_SetConfig+0x1a8>
 800ba66:	2b40      	cmp	r3, #64	@ 0x40
 800ba68:	d006      	beq.n	800ba78 <UART_SetConfig+0x1b4>
 800ba6a:	e00b      	b.n	800ba84 <UART_SetConfig+0x1c0>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	77fb      	strb	r3, [r7, #31]
 800ba70:	e0cc      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba72:	2302      	movs	r3, #2
 800ba74:	77fb      	strb	r3, [r7, #31]
 800ba76:	e0c9      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba78:	2304      	movs	r3, #4
 800ba7a:	77fb      	strb	r3, [r7, #31]
 800ba7c:	e0c6      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba7e:	2308      	movs	r3, #8
 800ba80:	77fb      	strb	r3, [r7, #31]
 800ba82:	e0c3      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba84:	2310      	movs	r3, #16
 800ba86:	77fb      	strb	r3, [r7, #31]
 800ba88:	e0c0      	b.n	800bc0c <UART_SetConfig+0x348>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a44      	ldr	r2, [pc, #272]	@ (800bba0 <UART_SetConfig+0x2dc>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d125      	bne.n	800bae0 <UART_SetConfig+0x21c>
 800ba94:	4b3e      	ldr	r3, [pc, #248]	@ (800bb90 <UART_SetConfig+0x2cc>)
 800ba96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800baa2:	d017      	beq.n	800bad4 <UART_SetConfig+0x210>
 800baa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800baa8:	d817      	bhi.n	800bada <UART_SetConfig+0x216>
 800baaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baae:	d00b      	beq.n	800bac8 <UART_SetConfig+0x204>
 800bab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bab4:	d811      	bhi.n	800bada <UART_SetConfig+0x216>
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d003      	beq.n	800bac2 <UART_SetConfig+0x1fe>
 800baba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800babe:	d006      	beq.n	800bace <UART_SetConfig+0x20a>
 800bac0:	e00b      	b.n	800bada <UART_SetConfig+0x216>
 800bac2:	2300      	movs	r3, #0
 800bac4:	77fb      	strb	r3, [r7, #31]
 800bac6:	e0a1      	b.n	800bc0c <UART_SetConfig+0x348>
 800bac8:	2302      	movs	r3, #2
 800baca:	77fb      	strb	r3, [r7, #31]
 800bacc:	e09e      	b.n	800bc0c <UART_SetConfig+0x348>
 800bace:	2304      	movs	r3, #4
 800bad0:	77fb      	strb	r3, [r7, #31]
 800bad2:	e09b      	b.n	800bc0c <UART_SetConfig+0x348>
 800bad4:	2308      	movs	r3, #8
 800bad6:	77fb      	strb	r3, [r7, #31]
 800bad8:	e098      	b.n	800bc0c <UART_SetConfig+0x348>
 800bada:	2310      	movs	r3, #16
 800badc:	77fb      	strb	r3, [r7, #31]
 800bade:	e095      	b.n	800bc0c <UART_SetConfig+0x348>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	4a2f      	ldr	r2, [pc, #188]	@ (800bba4 <UART_SetConfig+0x2e0>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d125      	bne.n	800bb36 <UART_SetConfig+0x272>
 800baea:	4b29      	ldr	r3, [pc, #164]	@ (800bb90 <UART_SetConfig+0x2cc>)
 800baec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baf0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800baf4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800baf8:	d017      	beq.n	800bb2a <UART_SetConfig+0x266>
 800bafa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bafe:	d817      	bhi.n	800bb30 <UART_SetConfig+0x26c>
 800bb00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb04:	d00b      	beq.n	800bb1e <UART_SetConfig+0x25a>
 800bb06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb0a:	d811      	bhi.n	800bb30 <UART_SetConfig+0x26c>
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <UART_SetConfig+0x254>
 800bb10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb14:	d006      	beq.n	800bb24 <UART_SetConfig+0x260>
 800bb16:	e00b      	b.n	800bb30 <UART_SetConfig+0x26c>
 800bb18:	2301      	movs	r3, #1
 800bb1a:	77fb      	strb	r3, [r7, #31]
 800bb1c:	e076      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb1e:	2302      	movs	r3, #2
 800bb20:	77fb      	strb	r3, [r7, #31]
 800bb22:	e073      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb24:	2304      	movs	r3, #4
 800bb26:	77fb      	strb	r3, [r7, #31]
 800bb28:	e070      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb2a:	2308      	movs	r3, #8
 800bb2c:	77fb      	strb	r3, [r7, #31]
 800bb2e:	e06d      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb30:	2310      	movs	r3, #16
 800bb32:	77fb      	strb	r3, [r7, #31]
 800bb34:	e06a      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a1b      	ldr	r2, [pc, #108]	@ (800bba8 <UART_SetConfig+0x2e4>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d138      	bne.n	800bbb2 <UART_SetConfig+0x2ee>
 800bb40:	4b13      	ldr	r3, [pc, #76]	@ (800bb90 <UART_SetConfig+0x2cc>)
 800bb42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bb4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb4e:	d017      	beq.n	800bb80 <UART_SetConfig+0x2bc>
 800bb50:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb54:	d82a      	bhi.n	800bbac <UART_SetConfig+0x2e8>
 800bb56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb5a:	d00b      	beq.n	800bb74 <UART_SetConfig+0x2b0>
 800bb5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb60:	d824      	bhi.n	800bbac <UART_SetConfig+0x2e8>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <UART_SetConfig+0x2aa>
 800bb66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb6a:	d006      	beq.n	800bb7a <UART_SetConfig+0x2b6>
 800bb6c:	e01e      	b.n	800bbac <UART_SetConfig+0x2e8>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	77fb      	strb	r3, [r7, #31]
 800bb72:	e04b      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb74:	2302      	movs	r3, #2
 800bb76:	77fb      	strb	r3, [r7, #31]
 800bb78:	e048      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb7a:	2304      	movs	r3, #4
 800bb7c:	77fb      	strb	r3, [r7, #31]
 800bb7e:	e045      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb80:	2308      	movs	r3, #8
 800bb82:	77fb      	strb	r3, [r7, #31]
 800bb84:	e042      	b.n	800bc0c <UART_SetConfig+0x348>
 800bb86:	bf00      	nop
 800bb88:	efff69f3 	.word	0xefff69f3
 800bb8c:	40011000 	.word	0x40011000
 800bb90:	40023800 	.word	0x40023800
 800bb94:	40004400 	.word	0x40004400
 800bb98:	40004800 	.word	0x40004800
 800bb9c:	40004c00 	.word	0x40004c00
 800bba0:	40005000 	.word	0x40005000
 800bba4:	40011400 	.word	0x40011400
 800bba8:	40007800 	.word	0x40007800
 800bbac:	2310      	movs	r3, #16
 800bbae:	77fb      	strb	r3, [r7, #31]
 800bbb0:	e02c      	b.n	800bc0c <UART_SetConfig+0x348>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a72      	ldr	r2, [pc, #456]	@ (800bd80 <UART_SetConfig+0x4bc>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d125      	bne.n	800bc08 <UART_SetConfig+0x344>
 800bbbc:	4b71      	ldr	r3, [pc, #452]	@ (800bd84 <UART_SetConfig+0x4c0>)
 800bbbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbc2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bbc6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bbca:	d017      	beq.n	800bbfc <UART_SetConfig+0x338>
 800bbcc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bbd0:	d817      	bhi.n	800bc02 <UART_SetConfig+0x33e>
 800bbd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbd6:	d00b      	beq.n	800bbf0 <UART_SetConfig+0x32c>
 800bbd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbdc:	d811      	bhi.n	800bc02 <UART_SetConfig+0x33e>
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d003      	beq.n	800bbea <UART_SetConfig+0x326>
 800bbe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbe6:	d006      	beq.n	800bbf6 <UART_SetConfig+0x332>
 800bbe8:	e00b      	b.n	800bc02 <UART_SetConfig+0x33e>
 800bbea:	2300      	movs	r3, #0
 800bbec:	77fb      	strb	r3, [r7, #31]
 800bbee:	e00d      	b.n	800bc0c <UART_SetConfig+0x348>
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	77fb      	strb	r3, [r7, #31]
 800bbf4:	e00a      	b.n	800bc0c <UART_SetConfig+0x348>
 800bbf6:	2304      	movs	r3, #4
 800bbf8:	77fb      	strb	r3, [r7, #31]
 800bbfa:	e007      	b.n	800bc0c <UART_SetConfig+0x348>
 800bbfc:	2308      	movs	r3, #8
 800bbfe:	77fb      	strb	r3, [r7, #31]
 800bc00:	e004      	b.n	800bc0c <UART_SetConfig+0x348>
 800bc02:	2310      	movs	r3, #16
 800bc04:	77fb      	strb	r3, [r7, #31]
 800bc06:	e001      	b.n	800bc0c <UART_SetConfig+0x348>
 800bc08:	2310      	movs	r3, #16
 800bc0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	69db      	ldr	r3, [r3, #28]
 800bc10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc14:	d15b      	bne.n	800bcce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bc16:	7ffb      	ldrb	r3, [r7, #31]
 800bc18:	2b08      	cmp	r3, #8
 800bc1a:	d828      	bhi.n	800bc6e <UART_SetConfig+0x3aa>
 800bc1c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc24 <UART_SetConfig+0x360>)
 800bc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc22:	bf00      	nop
 800bc24:	0800bc49 	.word	0x0800bc49
 800bc28:	0800bc51 	.word	0x0800bc51
 800bc2c:	0800bc59 	.word	0x0800bc59
 800bc30:	0800bc6f 	.word	0x0800bc6f
 800bc34:	0800bc5f 	.word	0x0800bc5f
 800bc38:	0800bc6f 	.word	0x0800bc6f
 800bc3c:	0800bc6f 	.word	0x0800bc6f
 800bc40:	0800bc6f 	.word	0x0800bc6f
 800bc44:	0800bc67 	.word	0x0800bc67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc48:	f7fd fab8 	bl	80091bc <HAL_RCC_GetPCLK1Freq>
 800bc4c:	61b8      	str	r0, [r7, #24]
        break;
 800bc4e:	e013      	b.n	800bc78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc50:	f7fd fac8 	bl	80091e4 <HAL_RCC_GetPCLK2Freq>
 800bc54:	61b8      	str	r0, [r7, #24]
        break;
 800bc56:	e00f      	b.n	800bc78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc58:	4b4b      	ldr	r3, [pc, #300]	@ (800bd88 <UART_SetConfig+0x4c4>)
 800bc5a:	61bb      	str	r3, [r7, #24]
        break;
 800bc5c:	e00c      	b.n	800bc78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc5e:	f7fd f9db 	bl	8009018 <HAL_RCC_GetSysClockFreq>
 800bc62:	61b8      	str	r0, [r7, #24]
        break;
 800bc64:	e008      	b.n	800bc78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc6a:	61bb      	str	r3, [r7, #24]
        break;
 800bc6c:	e004      	b.n	800bc78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	77bb      	strb	r3, [r7, #30]
        break;
 800bc76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d074      	beq.n	800bd68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	005a      	lsls	r2, r3, #1
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	441a      	add	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	2b0f      	cmp	r3, #15
 800bc98:	d916      	bls.n	800bcc8 <UART_SetConfig+0x404>
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bca0:	d212      	bcs.n	800bcc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	f023 030f 	bic.w	r3, r3, #15
 800bcaa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	085b      	lsrs	r3, r3, #1
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f003 0307 	and.w	r3, r3, #7
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	89fb      	ldrh	r3, [r7, #14]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	89fa      	ldrh	r2, [r7, #14]
 800bcc4:	60da      	str	r2, [r3, #12]
 800bcc6:	e04f      	b.n	800bd68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	77bb      	strb	r3, [r7, #30]
 800bccc:	e04c      	b.n	800bd68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bcce:	7ffb      	ldrb	r3, [r7, #31]
 800bcd0:	2b08      	cmp	r3, #8
 800bcd2:	d828      	bhi.n	800bd26 <UART_SetConfig+0x462>
 800bcd4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcdc <UART_SetConfig+0x418>)
 800bcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcda:	bf00      	nop
 800bcdc:	0800bd01 	.word	0x0800bd01
 800bce0:	0800bd09 	.word	0x0800bd09
 800bce4:	0800bd11 	.word	0x0800bd11
 800bce8:	0800bd27 	.word	0x0800bd27
 800bcec:	0800bd17 	.word	0x0800bd17
 800bcf0:	0800bd27 	.word	0x0800bd27
 800bcf4:	0800bd27 	.word	0x0800bd27
 800bcf8:	0800bd27 	.word	0x0800bd27
 800bcfc:	0800bd1f 	.word	0x0800bd1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd00:	f7fd fa5c 	bl	80091bc <HAL_RCC_GetPCLK1Freq>
 800bd04:	61b8      	str	r0, [r7, #24]
        break;
 800bd06:	e013      	b.n	800bd30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd08:	f7fd fa6c 	bl	80091e4 <HAL_RCC_GetPCLK2Freq>
 800bd0c:	61b8      	str	r0, [r7, #24]
        break;
 800bd0e:	e00f      	b.n	800bd30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd10:	4b1d      	ldr	r3, [pc, #116]	@ (800bd88 <UART_SetConfig+0x4c4>)
 800bd12:	61bb      	str	r3, [r7, #24]
        break;
 800bd14:	e00c      	b.n	800bd30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd16:	f7fd f97f 	bl	8009018 <HAL_RCC_GetSysClockFreq>
 800bd1a:	61b8      	str	r0, [r7, #24]
        break;
 800bd1c:	e008      	b.n	800bd30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd22:	61bb      	str	r3, [r7, #24]
        break;
 800bd24:	e004      	b.n	800bd30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bd26:	2300      	movs	r3, #0
 800bd28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	77bb      	strb	r3, [r7, #30]
        break;
 800bd2e:	bf00      	nop
    }

    if (pclk != 0U)
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d018      	beq.n	800bd68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	085a      	lsrs	r2, r3, #1
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	441a      	add	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	2b0f      	cmp	r3, #15
 800bd4e:	d909      	bls.n	800bd64 <UART_SetConfig+0x4a0>
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd56:	d205      	bcs.n	800bd64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	60da      	str	r2, [r3, #12]
 800bd62:	e001      	b.n	800bd68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800bd74:	7fbb      	ldrb	r3, [r7, #30]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3720      	adds	r7, #32
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	40007c00 	.word	0x40007c00
 800bd84:	40023800 	.word	0x40023800
 800bd88:	00f42400 	.word	0x00f42400

0800bd8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00a      	beq.n	800bdb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdba:	f003 0302 	and.w	r3, r3, #2
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00a      	beq.n	800bdd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bddc:	f003 0304 	and.w	r3, r3, #4
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d00a      	beq.n	800bdfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	430a      	orrs	r2, r1
 800bdf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdfe:	f003 0308 	and.w	r3, r3, #8
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00a      	beq.n	800be1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	430a      	orrs	r2, r1
 800be1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be20:	f003 0310 	and.w	r3, r3, #16
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	430a      	orrs	r2, r1
 800be3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be42:	f003 0320 	and.w	r3, r3, #32
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	430a      	orrs	r2, r1
 800be5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d01a      	beq.n	800bea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be8a:	d10a      	bne.n	800bea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00a      	beq.n	800bec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	605a      	str	r2, [r3, #4]
  }
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b086      	sub	sp, #24
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bee0:	f7f9 fd20 	bl	8005924 <HAL_GetTick>
 800bee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f003 0308 	and.w	r3, r3, #8
 800bef0:	2b08      	cmp	r3, #8
 800bef2:	d10e      	bne.n	800bf12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bef8:	9300      	str	r3, [sp, #0]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 f81b 	bl	800bf3e <UART_WaitOnFlagUntilTimeout>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e011      	b.n	800bf36 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2220      	movs	r2, #32
 800bf16:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2220      	movs	r2, #32
 800bf1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2200      	movs	r2, #0
 800bf24:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}

0800bf3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf3e:	b580      	push	{r7, lr}
 800bf40:	b09c      	sub	sp, #112	@ 0x70
 800bf42:	af00      	add	r7, sp, #0
 800bf44:	60f8      	str	r0, [r7, #12]
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	603b      	str	r3, [r7, #0]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf4e:	e0a7      	b.n	800c0a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf56:	f000 80a3 	beq.w	800c0a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf5a:	f7f9 fce3 	bl	8005924 <HAL_GetTick>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d302      	bcc.n	800bf70 <UART_WaitOnFlagUntilTimeout+0x32>
 800bf6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d13f      	bne.n	800bff0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf78:	e853 3f00 	ldrex	r3, [r3]
 800bf7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bf7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf80:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bf84:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf90:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bf94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bf9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e6      	bne.n	800bf70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3308      	adds	r3, #8
 800bfa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfac:	e853 3f00 	ldrex	r3, [r3]
 800bfb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bfb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfb4:	f023 0301 	bic.w	r3, r3, #1
 800bfb8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bfc2:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bfc4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bfc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bfca:	e841 2300 	strex	r3, r2, [r1]
 800bfce:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bfd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1e5      	bne.n	800bfa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2220      	movs	r2, #32
 800bfda:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e068      	b.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0304 	and.w	r3, r3, #4
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d050      	beq.n	800c0a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	69db      	ldr	r3, [r3, #28]
 800c004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c00c:	d148      	bne.n	800c0a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c016:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c020:	e853 3f00 	ldrex	r3, [r3]
 800c024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c028:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800c02c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c036:	637b      	str	r3, [r7, #52]	@ 0x34
 800c038:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c03c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e6      	bne.n	800c018 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3308      	adds	r3, #8
 800c050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	e853 3f00 	ldrex	r3, [r3]
 800c058:	613b      	str	r3, [r7, #16]
   return(result);
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	f023 0301 	bic.w	r3, r3, #1
 800c060:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3308      	adds	r3, #8
 800c068:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c06a:	623a      	str	r2, [r7, #32]
 800c06c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	69f9      	ldr	r1, [r7, #28]
 800c070:	6a3a      	ldr	r2, [r7, #32]
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	61bb      	str	r3, [r7, #24]
   return(result);
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e5      	bne.n	800c04a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	2220      	movs	r2, #32
 800c082:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2220      	movs	r2, #32
 800c088:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2220      	movs	r2, #32
 800c090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e010      	b.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	69da      	ldr	r2, [r3, #28]
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	68ba      	ldr	r2, [r7, #8]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	bf0c      	ite	eq
 800c0b0:	2301      	moveq	r3, #1
 800c0b2:	2300      	movne	r3, #0
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	79fb      	ldrb	r3, [r7, #7]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	f43f af48 	beq.w	800bf50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3770      	adds	r7, #112	@ 0x70
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d121      	bne.n	800c122 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	4b27      	ldr	r3, [pc, #156]	@ (800c180 <FMC_SDRAM_Init+0xb4>)
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	6851      	ldr	r1, [r2, #4]
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	6892      	ldr	r2, [r2, #8]
 800c0ee:	4311      	orrs	r1, r2
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	68d2      	ldr	r2, [r2, #12]
 800c0f4:	4311      	orrs	r1, r2
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	6912      	ldr	r2, [r2, #16]
 800c0fa:	4311      	orrs	r1, r2
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	6952      	ldr	r2, [r2, #20]
 800c100:	4311      	orrs	r1, r2
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	6992      	ldr	r2, [r2, #24]
 800c106:	4311      	orrs	r1, r2
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	69d2      	ldr	r2, [r2, #28]
 800c10c:	4311      	orrs	r1, r2
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	6a12      	ldr	r2, [r2, #32]
 800c112:	4311      	orrs	r1, r2
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c118:	430a      	orrs	r2, r1
 800c11a:	431a      	orrs	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	e026      	b.n	800c170 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	69d9      	ldr	r1, [r3, #28]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	4319      	orrs	r1, r3
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c138:	430b      	orrs	r3, r1
 800c13a:	431a      	orrs	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685a      	ldr	r2, [r3, #4]
 800c144:	4b0e      	ldr	r3, [pc, #56]	@ (800c180 <FMC_SDRAM_Init+0xb4>)
 800c146:	4013      	ands	r3, r2
 800c148:	683a      	ldr	r2, [r7, #0]
 800c14a:	6851      	ldr	r1, [r2, #4]
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	6892      	ldr	r2, [r2, #8]
 800c150:	4311      	orrs	r1, r2
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	68d2      	ldr	r2, [r2, #12]
 800c156:	4311      	orrs	r1, r2
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	6912      	ldr	r2, [r2, #16]
 800c15c:	4311      	orrs	r1, r2
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	6952      	ldr	r2, [r2, #20]
 800c162:	4311      	orrs	r1, r2
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	6992      	ldr	r2, [r2, #24]
 800c168:	430a      	orrs	r2, r1
 800c16a:	431a      	orrs	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	ffff8000 	.word	0xffff8000

0800c184 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c184:	b480      	push	{r7}
 800c186:	b085      	sub	sp, #20
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d128      	bne.n	800c1e8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	1e59      	subs	r1, r3, #1
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	011b      	lsls	r3, r3, #4
 800c1ac:	4319      	orrs	r1, r3
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	021b      	lsls	r3, r3, #8
 800c1b6:	4319      	orrs	r1, r3
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	031b      	lsls	r3, r3, #12
 800c1c0:	4319      	orrs	r1, r3
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	041b      	lsls	r3, r3, #16
 800c1ca:	4319      	orrs	r1, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	051b      	lsls	r3, r3, #20
 800c1d4:	4319      	orrs	r1, r3
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	061b      	lsls	r3, r3, #24
 800c1de:	430b      	orrs	r3, r1
 800c1e0:	431a      	orrs	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	609a      	str	r2, [r3, #8]
 800c1e6:	e02d      	b.n	800c244 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	4b19      	ldr	r3, [pc, #100]	@ (800c254 <FMC_SDRAM_Timing_Init+0xd0>)
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	68d2      	ldr	r2, [r2, #12]
 800c1f4:	3a01      	subs	r2, #1
 800c1f6:	0311      	lsls	r1, r2, #12
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	6952      	ldr	r2, [r2, #20]
 800c1fc:	3a01      	subs	r2, #1
 800c1fe:	0512      	lsls	r2, r2, #20
 800c200:	430a      	orrs	r2, r1
 800c202:	431a      	orrs	r2, r3
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	1e59      	subs	r1, r3, #1
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	3b01      	subs	r3, #1
 800c21c:	011b      	lsls	r3, r3, #4
 800c21e:	4319      	orrs	r1, r3
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	3b01      	subs	r3, #1
 800c226:	021b      	lsls	r3, r3, #8
 800c228:	4319      	orrs	r1, r3
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	3b01      	subs	r3, #1
 800c230:	041b      	lsls	r3, r3, #16
 800c232:	4319      	orrs	r1, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	3b01      	subs	r3, #1
 800c23a:	061b      	lsls	r3, r3, #24
 800c23c:	430b      	orrs	r3, r1
 800c23e:	431a      	orrs	r2, r3
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	ff0f0fff 	.word	0xff0f0fff

0800c258 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	691a      	ldr	r2, [r3, #16]
 800c268:	4b0c      	ldr	r3, [pc, #48]	@ (800c29c <FMC_SDRAM_SendCommand+0x44>)
 800c26a:	4013      	ands	r3, r2
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	6811      	ldr	r1, [r2, #0]
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	6852      	ldr	r2, [r2, #4]
 800c274:	4311      	orrs	r1, r2
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	6892      	ldr	r2, [r2, #8]
 800c27a:	3a01      	subs	r2, #1
 800c27c:	0152      	lsls	r2, r2, #5
 800c27e:	4311      	orrs	r1, r2
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	68d2      	ldr	r2, [r2, #12]
 800c284:	0252      	lsls	r2, r2, #9
 800c286:	430a      	orrs	r2, r1
 800c288:	431a      	orrs	r2, r3
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c28e:	2300      	movs	r3, #0
}
 800c290:	4618      	mov	r0, r3
 800c292:	3714      	adds	r7, #20
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	ffc00000 	.word	0xffc00000

0800c2a0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	695a      	ldr	r2, [r3, #20]
 800c2ae:	4b07      	ldr	r3, [pc, #28]	@ (800c2cc <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	683a      	ldr	r2, [r7, #0]
 800c2b4:	0052      	lsls	r2, r2, #1
 800c2b6:	431a      	orrs	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	ffffc001 	.word	0xffffc001

0800c2d0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	b480      	push	{r7}
 800c2d4:	b085      	sub	sp, #20
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	f107 001c 	add.w	r0, r7, #28
 800c2de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c2e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c2ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c2ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c2f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c2f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c2fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	4b07      	ldr	r3, [pc, #28]	@ (800c324 <SDMMC_Init+0x54>)
 800c308:	4013      	ands	r3, r2
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	431a      	orrs	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	b004      	add	sp, #16
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	ffff8100 	.word	0xffff8100

0800c328 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2203      	movs	r2, #3
 800c334:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c344:	b480      	push	{r7}
 800c346:	b083      	sub	sp, #12
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0303 	and.w	r3, r3, #3
}
 800c354:	4618      	mov	r0, r3
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c36a:	2300      	movs	r3, #0
 800c36c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c37e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c384:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c38a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	4313      	orrs	r3, r2
 800c390:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68da      	ldr	r2, [r3, #12]
 800c396:	4b06      	ldr	r3, [pc, #24]	@ (800c3b0 <SDMMC_SendCommand+0x50>)
 800c398:	4013      	ands	r3, r2
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	431a      	orrs	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	fffff000 	.word	0xfffff000

0800c3b4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	691b      	ldr	r3, [r3, #16]
 800c3c0:	b2db      	uxtb	r3, r3
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	3314      	adds	r3, #20
 800c3dc:	461a      	mov	r2, r3
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
}  
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c41a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c420:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c426:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c428:	68fa      	ldr	r2, [r7, #12]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c432:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	431a      	orrs	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c43e:	2300      	movs	r3, #0

}
 800c440:	4618      	mov	r0, r3
 800c442:	3714      	adds	r7, #20
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c45a:	2310      	movs	r3, #16
 800c45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c45e:	2340      	movs	r3, #64	@ 0x40
 800c460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c46a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c46c:	f107 0308 	add.w	r3, r7, #8
 800c470:	4619      	mov	r1, r3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7ff ff74 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c47c:	2110      	movs	r1, #16
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f9d6 	bl	800c830 <SDMMC_GetCmdResp1>
 800c484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c486:	69fb      	ldr	r3, [r7, #28]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3720      	adds	r7, #32
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c49e:	2311      	movs	r3, #17
 800c4a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4a2:	2340      	movs	r3, #64	@ 0x40
 800c4a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4b0:	f107 0308 	add.w	r3, r7, #8
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff ff52 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c4bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4c0:	2111      	movs	r1, #17
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f9b4 	bl	800c830 <SDMMC_GetCmdResp1>
 800c4c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4ca:	69fb      	ldr	r3, [r7, #28]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3720      	adds	r7, #32
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c4e2:	2312      	movs	r3, #18
 800c4e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4e6:	2340      	movs	r3, #64	@ 0x40
 800c4e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4f4:	f107 0308 	add.w	r3, r7, #8
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff ff30 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c500:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c504:	2112      	movs	r1, #18
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f992 	bl	800c830 <SDMMC_GetCmdResp1>
 800c50c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c50e:	69fb      	ldr	r3, [r7, #28]
}
 800c510:	4618      	mov	r0, r3
 800c512:	3720      	adds	r7, #32
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c526:	2318      	movs	r3, #24
 800c528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c52a:	2340      	movs	r3, #64	@ 0x40
 800c52c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c52e:	2300      	movs	r3, #0
 800c530:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c536:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c538:	f107 0308 	add.w	r3, r7, #8
 800c53c:	4619      	mov	r1, r3
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff ff0e 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c544:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c548:	2118      	movs	r1, #24
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f970 	bl	800c830 <SDMMC_GetCmdResp1>
 800c550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c552:	69fb      	ldr	r3, [r7, #28]
}
 800c554:	4618      	mov	r0, r3
 800c556:	3720      	adds	r7, #32
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b088      	sub	sp, #32
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c56a:	2319      	movs	r3, #25
 800c56c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c56e:	2340      	movs	r3, #64	@ 0x40
 800c570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c572:	2300      	movs	r3, #0
 800c574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c57a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c57c:	f107 0308 	add.w	r3, r7, #8
 800c580:	4619      	mov	r1, r3
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f7ff feec 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c58c:	2119      	movs	r1, #25
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 f94e 	bl	800c830 <SDMMC_GetCmdResp1>
 800c594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c596:	69fb      	ldr	r3, [r7, #28]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b088      	sub	sp, #32
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c5ac:	230c      	movs	r3, #12
 800c5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5b0:	2340      	movs	r3, #64	@ 0x40
 800c5b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5be:	f107 0308 	add.w	r3, r7, #8
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff fecb 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c5ca:	4a05      	ldr	r2, [pc, #20]	@ (800c5e0 <SDMMC_CmdStopTransfer+0x40>)
 800c5cc:	210c      	movs	r1, #12
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f92e 	bl	800c830 <SDMMC_GetCmdResp1>
 800c5d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3720      	adds	r7, #32
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	05f5e100 	.word	0x05f5e100

0800c5e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08a      	sub	sp, #40	@ 0x28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c5f4:	2307      	movs	r3, #7
 800c5f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5f8:	2340      	movs	r3, #64	@ 0x40
 800c5fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c604:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c606:	f107 0310 	add.w	r3, r7, #16
 800c60a:	4619      	mov	r1, r3
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f7ff fea7 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c612:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c616:	2107      	movs	r1, #7
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f000 f909 	bl	800c830 <SDMMC_GetCmdResp1>
 800c61e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c622:	4618      	mov	r0, r3
 800c624:	3728      	adds	r7, #40	@ 0x28
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b088      	sub	sp, #32
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c632:	2300      	movs	r3, #0
 800c634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c636:	2300      	movs	r3, #0
 800c638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c63a:	2300      	movs	r3, #0
 800c63c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c63e:	2300      	movs	r3, #0
 800c640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c646:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c648:	f107 0308 	add.w	r3, r7, #8
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff fe86 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fb23 	bl	800cca0 <SDMMC_GetCmdError>
 800c65a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c65c:	69fb      	ldr	r3, [r7, #28]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3720      	adds	r7, #32
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b088      	sub	sp, #32
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c66e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c672:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c674:	2308      	movs	r3, #8
 800c676:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c678:	2340      	movs	r3, #64	@ 0x40
 800c67a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c67c:	2300      	movs	r3, #0
 800c67e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c680:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c684:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c686:	f107 0308 	add.w	r3, r7, #8
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff fe67 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 fab6 	bl	800cc04 <SDMMC_GetCmdResp7>
 800c698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c69a:	69fb      	ldr	r3, [r7, #28]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3720      	adds	r7, #32
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b088      	sub	sp, #32
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c6b2:	2337      	movs	r3, #55	@ 0x37
 800c6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6b6:	2340      	movs	r3, #64	@ 0x40
 800c6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6c4:	f107 0308 	add.w	r3, r7, #8
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fe48 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c6d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6d4:	2137      	movs	r1, #55	@ 0x37
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f8aa 	bl	800c830 <SDMMC_GetCmdResp1>
 800c6dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6de:	69fb      	ldr	r3, [r7, #28]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3720      	adds	r7, #32
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	4b0d      	ldr	r3, [pc, #52]	@ (800c72c <SDMMC_CmdAppOperCommand+0x44>)
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c6fa:	2329      	movs	r3, #41	@ 0x29
 800c6fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6fe:	2340      	movs	r3, #64	@ 0x40
 800c700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c702:	2300      	movs	r3, #0
 800c704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c706:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c70a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c70c:	f107 0308 	add.w	r3, r7, #8
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7ff fe24 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 f9bf 	bl	800ca9c <SDMMC_GetCmdResp3>
 800c71e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c720:	69fb      	ldr	r3, [r7, #28]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3720      	adds	r7, #32
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	80100000 	.word	0x80100000

0800c730 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b088      	sub	sp, #32
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c73c:	2302      	movs	r3, #2
 800c73e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c740:	23c0      	movs	r3, #192	@ 0xc0
 800c742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c744:	2300      	movs	r3, #0
 800c746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c748:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c74c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c74e:	f107 0308 	add.w	r3, r7, #8
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff fe03 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f956 	bl	800ca0c <SDMMC_GetCmdResp2>
 800c760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c762:	69fb      	ldr	r3, [r7, #28]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3720      	adds	r7, #32
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b088      	sub	sp, #32
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c77a:	2309      	movs	r3, #9
 800c77c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c77e:	23c0      	movs	r3, #192	@ 0xc0
 800c780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c782:	2300      	movs	r3, #0
 800c784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c78a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c78c:	f107 0308 	add.w	r3, r7, #8
 800c790:	4619      	mov	r1, r3
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f7ff fde4 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f937 	bl	800ca0c <SDMMC_GetCmdResp2>
 800c79e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7a0:	69fb      	ldr	r3, [r7, #28]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3720      	adds	r7, #32
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b088      	sub	sp, #32
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7bc:	2340      	movs	r3, #64	@ 0x40
 800c7be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7ca:	f107 0308 	add.w	r3, r7, #8
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7ff fdc5 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c7d6:	683a      	ldr	r2, [r7, #0]
 800c7d8:	2103      	movs	r1, #3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f99c 	bl	800cb18 <SDMMC_GetCmdResp6>
 800c7e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3720      	adds	r7, #32
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b088      	sub	sp, #32
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c7fa:	230d      	movs	r3, #13
 800c7fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7fe:	2340      	movs	r3, #64	@ 0x40
 800c800:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c802:	2300      	movs	r3, #0
 800c804:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c806:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c80a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c80c:	f107 0308 	add.w	r3, r7, #8
 800c810:	4619      	mov	r1, r3
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7ff fda4 	bl	800c360 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c81c:	210d      	movs	r1, #13
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f806 	bl	800c830 <SDMMC_GetCmdResp1>
 800c824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c826:	69fb      	ldr	r3, [r7, #28]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3720      	adds	r7, #32
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b088      	sub	sp, #32
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	460b      	mov	r3, r1
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c83e:	4b70      	ldr	r3, [pc, #448]	@ (800ca00 <SDMMC_GetCmdResp1+0x1d0>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a70      	ldr	r2, [pc, #448]	@ (800ca04 <SDMMC_GetCmdResp1+0x1d4>)
 800c844:	fba2 2303 	umull	r2, r3, r2, r3
 800c848:	0a5a      	lsrs	r2, r3, #9
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	fb02 f303 	mul.w	r3, r2, r3
 800c850:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	1e5a      	subs	r2, r3, #1
 800c856:	61fa      	str	r2, [r7, #28]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d102      	bne.n	800c862 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c85c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c860:	e0c9      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c866:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d0ef      	beq.n	800c852 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1ea      	bne.n	800c852 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c880:	f003 0304 	and.w	r3, r3, #4
 800c884:	2b00      	cmp	r3, #0
 800c886:	d004      	beq.n	800c892 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2204      	movs	r2, #4
 800c88c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c88e:	2304      	movs	r3, #4
 800c890:	e0b1      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c896:	f003 0301 	and.w	r3, r3, #1
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d004      	beq.n	800c8a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e0a6      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	22c5      	movs	r2, #197	@ 0xc5
 800c8ac:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f7ff fd80 	bl	800c3b4 <SDMMC_GetCommandResponse>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	7afb      	ldrb	r3, [r7, #11]
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d001      	beq.n	800c8c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e099      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7ff fd82 	bl	800c3ce <SDMMC_GetResponse>
 800c8ca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c8cc:	697a      	ldr	r2, [r7, #20]
 800c8ce:	4b4e      	ldr	r3, [pc, #312]	@ (800ca08 <SDMMC_GetCmdResp1+0x1d8>)
 800c8d0:	4013      	ands	r3, r2
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d101      	bne.n	800c8da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e08d      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	da02      	bge.n	800c8e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c8e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c8e4:	e087      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c8f0:	2340      	movs	r3, #64	@ 0x40
 800c8f2:	e080      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c8fe:	2380      	movs	r3, #128	@ 0x80
 800c900:	e079      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c90c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c910:	e071      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c91c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c920:	e069      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d002      	beq.n	800c932 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c92c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c930:	e061      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c93c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c940:	e059      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c94c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c950:	e051      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c95c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c960:	e049      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c96c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c970:	e041      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c97c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c980:	e039      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d002      	beq.n	800c992 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c98c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c990:	e031      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c99c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c9a0:	e029      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c9ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c9b0:	e021      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d002      	beq.n	800c9c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c9bc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c9c0:	e019      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d002      	beq.n	800c9d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c9cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c9d0:	e011      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c9dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c9e0:	e009      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f003 0308 	and.w	r3, r3, #8
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c9ec:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c9f0:	e001      	b.n	800c9f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c9f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3720      	adds	r7, #32
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20000048 	.word	0x20000048
 800ca04:	10624dd3 	.word	0x10624dd3
 800ca08:	fdffe008 	.word	0xfdffe008

0800ca0c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b085      	sub	sp, #20
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca14:	4b1f      	ldr	r3, [pc, #124]	@ (800ca94 <SDMMC_GetCmdResp2+0x88>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a1f      	ldr	r2, [pc, #124]	@ (800ca98 <SDMMC_GetCmdResp2+0x8c>)
 800ca1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca1e:	0a5b      	lsrs	r3, r3, #9
 800ca20:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca24:	fb02 f303 	mul.w	r3, r2, r3
 800ca28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	1e5a      	subs	r2, r3, #1
 800ca2e:	60fa      	str	r2, [r7, #12]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d102      	bne.n	800ca3a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca38:	e026      	b.n	800ca88 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d0ef      	beq.n	800ca2a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1ea      	bne.n	800ca2a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca58:	f003 0304 	and.w	r3, r3, #4
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2204      	movs	r2, #4
 800ca64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca66:	2304      	movs	r3, #4
 800ca68:	e00e      	b.n	800ca88 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca6e:	f003 0301 	and.w	r3, r3, #1
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d004      	beq.n	800ca80 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	e003      	b.n	800ca88 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	22c5      	movs	r2, #197	@ 0xc5
 800ca84:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3714      	adds	r7, #20
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr
 800ca94:	20000048 	.word	0x20000048
 800ca98:	10624dd3 	.word	0x10624dd3

0800ca9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800caa4:	4b1a      	ldr	r3, [pc, #104]	@ (800cb10 <SDMMC_GetCmdResp3+0x74>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a1a      	ldr	r2, [pc, #104]	@ (800cb14 <SDMMC_GetCmdResp3+0x78>)
 800caaa:	fba2 2303 	umull	r2, r3, r2, r3
 800caae:	0a5b      	lsrs	r3, r3, #9
 800cab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cab4:	fb02 f303 	mul.w	r3, r2, r3
 800cab8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	1e5a      	subs	r2, r3, #1
 800cabe:	60fa      	str	r2, [r7, #12]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cac4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cac8:	e01b      	b.n	800cb02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cace:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d0ef      	beq.n	800caba <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1ea      	bne.n	800caba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cae8:	f003 0304 	and.w	r3, r3, #4
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2204      	movs	r2, #4
 800caf4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800caf6:	2304      	movs	r3, #4
 800caf8:	e003      	b.n	800cb02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	22c5      	movs	r2, #197	@ 0xc5
 800cafe:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3714      	adds	r7, #20
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
 800cb0e:	bf00      	nop
 800cb10:	20000048 	.word	0x20000048
 800cb14:	10624dd3 	.word	0x10624dd3

0800cb18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b088      	sub	sp, #32
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60f8      	str	r0, [r7, #12]
 800cb20:	460b      	mov	r3, r1
 800cb22:	607a      	str	r2, [r7, #4]
 800cb24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb26:	4b35      	ldr	r3, [pc, #212]	@ (800cbfc <SDMMC_GetCmdResp6+0xe4>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a35      	ldr	r2, [pc, #212]	@ (800cc00 <SDMMC_GetCmdResp6+0xe8>)
 800cb2c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb30:	0a5b      	lsrs	r3, r3, #9
 800cb32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb36:	fb02 f303 	mul.w	r3, r2, r3
 800cb3a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	1e5a      	subs	r2, r3, #1
 800cb40:	61fa      	str	r2, [r7, #28]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d102      	bne.n	800cb4c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb46:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cb4a:	e052      	b.n	800cbf2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb50:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d0ef      	beq.n	800cb3c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1ea      	bne.n	800cb3c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb6a:	f003 0304 	and.w	r3, r3, #4
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d004      	beq.n	800cb7c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2204      	movs	r2, #4
 800cb76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb78:	2304      	movs	r3, #4
 800cb7a:	e03a      	b.n	800cbf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d004      	beq.n	800cb92 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e02f      	b.n	800cbf2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f7ff fc0e 	bl	800c3b4 <SDMMC_GetCommandResponse>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	7afb      	ldrb	r3, [r7, #11]
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d001      	beq.n	800cba6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cba2:	2301      	movs	r3, #1
 800cba4:	e025      	b.n	800cbf2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	22c5      	movs	r2, #197	@ 0xc5
 800cbaa:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cbac:	2100      	movs	r1, #0
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f7ff fc0d 	bl	800c3ce <SDMMC_GetResponse>
 800cbb4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d106      	bne.n	800cbce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	0c1b      	lsrs	r3, r3, #16
 800cbc4:	b29a      	uxth	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	e011      	b.n	800cbf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cbd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cbdc:	e009      	b.n	800cbf2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cbe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cbec:	e001      	b.n	800cbf2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cbee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3720      	adds	r7, #32
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20000048 	.word	0x20000048
 800cc00:	10624dd3 	.word	0x10624dd3

0800cc04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc0c:	4b22      	ldr	r3, [pc, #136]	@ (800cc98 <SDMMC_GetCmdResp7+0x94>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a22      	ldr	r2, [pc, #136]	@ (800cc9c <SDMMC_GetCmdResp7+0x98>)
 800cc12:	fba2 2303 	umull	r2, r3, r2, r3
 800cc16:	0a5b      	lsrs	r3, r3, #9
 800cc18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc1c:	fb02 f303 	mul.w	r3, r2, r3
 800cc20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	1e5a      	subs	r2, r3, #1
 800cc26:	60fa      	str	r2, [r7, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d102      	bne.n	800cc32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc30:	e02c      	b.n	800cc8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d0ef      	beq.n	800cc22 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1ea      	bne.n	800cc22 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc50:	f003 0304 	and.w	r3, r3, #4
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d004      	beq.n	800cc62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2204      	movs	r2, #4
 800cc5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc5e:	2304      	movs	r3, #4
 800cc60:	e014      	b.n	800cc8c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc66:	f003 0301 	and.w	r3, r3, #1
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d004      	beq.n	800cc78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2201      	movs	r2, #1
 800cc72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc74:	2301      	movs	r3, #1
 800cc76:	e009      	b.n	800cc8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2240      	movs	r2, #64	@ 0x40
 800cc88:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cc8a:	2300      	movs	r3, #0
  
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3714      	adds	r7, #20
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	20000048 	.word	0x20000048
 800cc9c:	10624dd3 	.word	0x10624dd3

0800cca0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cca8:	4b11      	ldr	r3, [pc, #68]	@ (800ccf0 <SDMMC_GetCmdError+0x50>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	4a11      	ldr	r2, [pc, #68]	@ (800ccf4 <SDMMC_GetCmdError+0x54>)
 800ccae:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb2:	0a5b      	lsrs	r3, r3, #9
 800ccb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ccb8:	fb02 f303 	mul.w	r3, r2, r3
 800ccbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	1e5a      	subs	r2, r3, #1
 800ccc2:	60fa      	str	r2, [r7, #12]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cccc:	e009      	b.n	800cce2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d0f1      	beq.n	800ccbe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	22c5      	movs	r2, #197	@ 0xc5
 800ccde:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3714      	adds	r7, #20
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	20000048 	.word	0x20000048
 800ccf4:	10624dd3 	.word	0x10624dd3

0800ccf8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ccfc:	4904      	ldr	r1, [pc, #16]	@ (800cd10 <MX_FATFS_Init+0x18>)
 800ccfe:	4805      	ldr	r0, [pc, #20]	@ (800cd14 <MX_FATFS_Init+0x1c>)
 800cd00:	f000 ff5c 	bl	800dbbc <FATFS_LinkDriver>
 800cd04:	4603      	mov	r3, r0
 800cd06:	461a      	mov	r2, r3
 800cd08:	4b03      	ldr	r3, [pc, #12]	@ (800cd18 <MX_FATFS_Init+0x20>)
 800cd0a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cd0c:	bf00      	nop
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	20000e24 	.word	0x20000e24
 800cd14:	080205e0 	.word	0x080205e0
 800cd18:	20000e20 	.word	0x20000e20

0800cd1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cd26:	f000 f86d 	bl	800ce04 <BSP_SD_IsDetected>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d001      	beq.n	800cd34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cd30:	2302      	movs	r3, #2
 800cd32:	e005      	b.n	800cd40 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cd34:	4804      	ldr	r0, [pc, #16]	@ (800cd48 <BSP_SD_Init+0x2c>)
 800cd36:	f7fd f981 	bl	800a03c <HAL_SD_Init>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cd3e:	79fb      	ldrb	r3, [r7, #7]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	200008e4 	.word	0x200008e4

0800cd4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	68f9      	ldr	r1, [r7, #12]
 800cd62:	4806      	ldr	r0, [pc, #24]	@ (800cd7c <BSP_SD_ReadBlocks_DMA+0x30>)
 800cd64:	f7fd fa22 	bl	800a1ac <HAL_SD_ReadBlocks_DMA>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d001      	beq.n	800cd72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3718      	adds	r7, #24
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	200008e4 	.word	0x200008e4

0800cd80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68ba      	ldr	r2, [r7, #8]
 800cd94:	68f9      	ldr	r1, [r7, #12]
 800cd96:	4806      	ldr	r0, [pc, #24]	@ (800cdb0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cd98:	f7fd faea 	bl	800a370 <HAL_SD_WriteBlocks_DMA>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d001      	beq.n	800cda6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3718      	adds	r7, #24
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}
 800cdb0:	200008e4 	.word	0x200008e4

0800cdb4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cdb8:	4805      	ldr	r0, [pc, #20]	@ (800cdd0 <BSP_SD_GetCardState+0x1c>)
 800cdba:	f7fd fd99 	bl	800a8f0 <HAL_SD_GetCardState>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b04      	cmp	r3, #4
 800cdc2:	bf14      	ite	ne
 800cdc4:	2301      	movne	r3, #1
 800cdc6:	2300      	moveq	r3, #0
 800cdc8:	b2db      	uxtb	r3, r3
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	200008e4 	.word	0x200008e4

0800cdd4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cddc:	6879      	ldr	r1, [r7, #4]
 800cdde:	4803      	ldr	r0, [pc, #12]	@ (800cdec <BSP_SD_GetCardInfo+0x18>)
 800cde0:	f7fd fd5a 	bl	800a898 <HAL_SD_GetCardInfo>
}
 800cde4:	bf00      	nop
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	200008e4 	.word	0x200008e4

0800cdf0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b082      	sub	sp, #8
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cdf8:	f000 f9b2 	bl	800d160 <BSP_SD_ReadCpltCallback>
}
 800cdfc:	bf00      	nop
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ce0e:	f000 f80b 	bl	800ce28 <BSP_PlatformIsDetected>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ce1c:	79fb      	ldrb	r3, [r7, #7]
 800ce1e:	b2db      	uxtb	r3, r3
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ce2e:	2301      	movs	r3, #1
 800ce30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ce32:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ce36:	4806      	ldr	r0, [pc, #24]	@ (800ce50 <BSP_PlatformIsDetected+0x28>)
 800ce38:	f7fa fbaa 	bl	8007590 <HAL_GPIO_ReadPin>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d001      	beq.n	800ce46 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ce42:	2300      	movs	r3, #0
 800ce44:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ce46:	79fb      	ldrb	r3, [r7, #7]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3708      	adds	r7, #8
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	40020800 	.word	0x40020800

0800ce54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ce5c:	f000 ff46 	bl	800dcec <osKernelSysTick>
 800ce60:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ce62:	e006      	b.n	800ce72 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce64:	f7ff ffa6 	bl	800cdb4 <BSP_SD_GetCardState>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e009      	b.n	800ce86 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ce72:	f000 ff3b 	bl	800dcec <osKernelSysTick>
 800ce76:	4602      	mov	r2, r0
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	1ad3      	subs	r3, r2, r3
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d8f0      	bhi.n	800ce64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ce82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
	...

0800ce90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ce9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cec8 <SD_CheckStatus+0x38>)
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cea0:	f7ff ff88 	bl	800cdb4 <BSP_SD_GetCardState>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d107      	bne.n	800ceba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ceaa:	4b07      	ldr	r3, [pc, #28]	@ (800cec8 <SD_CheckStatus+0x38>)
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	f023 0301 	bic.w	r3, r3, #1
 800ceb4:	b2da      	uxtb	r2, r3
 800ceb6:	4b04      	ldr	r3, [pc, #16]	@ (800cec8 <SD_CheckStatus+0x38>)
 800ceb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ceba:	4b03      	ldr	r3, [pc, #12]	@ (800cec8 <SD_CheckStatus+0x38>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	b2db      	uxtb	r3, r3
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	20000051 	.word	0x20000051

0800cecc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cecc:	b590      	push	{r4, r7, lr}
 800cece:	b087      	sub	sp, #28
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ced6:	4b20      	ldr	r3, [pc, #128]	@ (800cf58 <SD_initialize+0x8c>)
 800ced8:	2201      	movs	r2, #1
 800ceda:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800cedc:	f000 fefa 	bl	800dcd4 <osKernelRunning>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d030      	beq.n	800cf48 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cee6:	f7ff ff19 	bl	800cd1c <BSP_SD_Init>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d107      	bne.n	800cf00 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cef0:	79fb      	ldrb	r3, [r7, #7]
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff ffcc 	bl	800ce90 <SD_CheckStatus>
 800cef8:	4603      	mov	r3, r0
 800cefa:	461a      	mov	r2, r3
 800cefc:	4b16      	ldr	r3, [pc, #88]	@ (800cf58 <SD_initialize+0x8c>)
 800cefe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cf00:	4b15      	ldr	r3, [pc, #84]	@ (800cf58 <SD_initialize+0x8c>)
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d01e      	beq.n	800cf48 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800cf0a:	4b14      	ldr	r3, [pc, #80]	@ (800cf5c <SD_initialize+0x90>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10e      	bne.n	800cf30 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800cf12:	4b13      	ldr	r3, [pc, #76]	@ (800cf60 <SD_initialize+0x94>)
 800cf14:	f107 0408 	add.w	r4, r7, #8
 800cf18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800cf1e:	f107 0308 	add.w	r3, r7, #8
 800cf22:	2100      	movs	r1, #0
 800cf24:	4618      	mov	r0, r3
 800cf26:	f001 f832 	bl	800df8e <osMessageCreate>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	4a0b      	ldr	r2, [pc, #44]	@ (800cf5c <SD_initialize+0x90>)
 800cf2e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800cf30:	4b0a      	ldr	r3, [pc, #40]	@ (800cf5c <SD_initialize+0x90>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d107      	bne.n	800cf48 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800cf38:	4b07      	ldr	r3, [pc, #28]	@ (800cf58 <SD_initialize+0x8c>)
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	f043 0301 	orr.w	r3, r3, #1
 800cf42:	b2da      	uxtb	r2, r3
 800cf44:	4b04      	ldr	r3, [pc, #16]	@ (800cf58 <SD_initialize+0x8c>)
 800cf46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cf48:	4b03      	ldr	r3, [pc, #12]	@ (800cf58 <SD_initialize+0x8c>)
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	b2db      	uxtb	r3, r3
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	371c      	adds	r7, #28
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd90      	pop	{r4, r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20000051 	.word	0x20000051
 800cf5c:	2000105c 	.word	0x2000105c
 800cf60:	080122dc 	.word	0x080122dc

0800cf64 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	4618      	mov	r0, r3
 800cf72:	f7ff ff8d 	bl	800ce90 <SD_CheckStatus>
 800cf76:	4603      	mov	r3, r0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08a      	sub	sp, #40	@ 0x28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60b9      	str	r1, [r7, #8]
 800cf88:	607a      	str	r2, [r7, #4]
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cf96:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cf9a:	f7ff ff5b 	bl	800ce54 <SD_CheckStatusWithTimeout>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	da02      	bge.n	800cfaa <SD_read+0x2a>
  {
    return res;
 800cfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfa8:	e032      	b.n	800d010 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cfaa:	683a      	ldr	r2, [r7, #0]
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	68b8      	ldr	r0, [r7, #8]
 800cfb0:	f7ff fecc 	bl	800cd4c <BSP_SD_ReadBlocks_DMA>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800cfba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d124      	bne.n	800d00c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cfc2:	4b15      	ldr	r3, [pc, #84]	@ (800d018 <SD_read+0x98>)
 800cfc4:	6819      	ldr	r1, [r3, #0]
 800cfc6:	f107 0314 	add.w	r3, r7, #20
 800cfca:	f247 5230 	movw	r2, #30000	@ 0x7530
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f001 f846 	bl	800e060 <osMessageGet>

    if (event.status == osEventMessage)
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	2b10      	cmp	r3, #16
 800cfd8:	d118      	bne.n	800d00c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d115      	bne.n	800d00c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800cfe0:	f000 fe84 	bl	800dcec <osKernelSysTick>
 800cfe4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cfe6:	e008      	b.n	800cffa <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cfe8:	f7ff fee4 	bl	800cdb4 <BSP_SD_GetCardState>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d103      	bne.n	800cffa <SD_read+0x7a>
              {
                res = RES_OK;
 800cff2:	2300      	movs	r3, #0
 800cff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cff8:	e008      	b.n	800d00c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cffa:	f000 fe77 	bl	800dcec <osKernelSysTick>
 800cffe:	4602      	mov	r2, r0
 800d000:	6a3b      	ldr	r3, [r7, #32]
 800d002:	1ad3      	subs	r3, r2, r3
 800d004:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d008:	4293      	cmp	r3, r2
 800d00a:	d9ed      	bls.n	800cfe8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d00c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d010:	4618      	mov	r0, r3
 800d012:	3728      	adds	r7, #40	@ 0x28
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2000105c 	.word	0x2000105c

0800d01c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08a      	sub	sp, #40	@ 0x28
 800d020:	af00      	add	r7, sp, #0
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	607a      	str	r2, [r7, #4]
 800d026:	603b      	str	r3, [r7, #0]
 800d028:	4603      	mov	r3, r0
 800d02a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d02c:	2301      	movs	r3, #1
 800d02e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d032:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d036:	f7ff ff0d 	bl	800ce54 <SD_CheckStatusWithTimeout>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	da02      	bge.n	800d046 <SD_write+0x2a>
  {
    return res;
 800d040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d044:	e02e      	b.n	800d0a4 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d046:	683a      	ldr	r2, [r7, #0]
 800d048:	6879      	ldr	r1, [r7, #4]
 800d04a:	68b8      	ldr	r0, [r7, #8]
 800d04c:	f7ff fe98 	bl	800cd80 <BSP_SD_WriteBlocks_DMA>
 800d050:	4603      	mov	r3, r0
 800d052:	2b00      	cmp	r3, #0
 800d054:	d124      	bne.n	800d0a0 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d056:	4b15      	ldr	r3, [pc, #84]	@ (800d0ac <SD_write+0x90>)
 800d058:	6819      	ldr	r1, [r3, #0]
 800d05a:	f107 0314 	add.w	r3, r7, #20
 800d05e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d062:	4618      	mov	r0, r3
 800d064:	f000 fffc 	bl	800e060 <osMessageGet>

    if (event.status == osEventMessage)
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	2b10      	cmp	r3, #16
 800d06c:	d118      	bne.n	800d0a0 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	2b02      	cmp	r3, #2
 800d072:	d115      	bne.n	800d0a0 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d074:	f000 fe3a 	bl	800dcec <osKernelSysTick>
 800d078:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d07a:	e008      	b.n	800d08e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d07c:	f7ff fe9a 	bl	800cdb4 <BSP_SD_GetCardState>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d103      	bne.n	800d08e <SD_write+0x72>
          {
            res = RES_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d08c:	e008      	b.n	800d0a0 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d08e:	f000 fe2d 	bl	800dcec <osKernelSysTick>
 800d092:	4602      	mov	r2, r0
 800d094:	6a3b      	ldr	r3, [r7, #32]
 800d096:	1ad3      	subs	r3, r2, r3
 800d098:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d9ed      	bls.n	800d07c <SD_write+0x60>
    }

  }
#endif

  return res;
 800d0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3728      	adds	r7, #40	@ 0x28
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	2000105c 	.word	0x2000105c

0800d0b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08c      	sub	sp, #48	@ 0x30
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	603a      	str	r2, [r7, #0]
 800d0ba:	71fb      	strb	r3, [r7, #7]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d0c6:	4b25      	ldr	r3, [pc, #148]	@ (800d15c <SD_ioctl+0xac>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <SD_ioctl+0x28>
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	e03c      	b.n	800d152 <SD_ioctl+0xa2>

  switch (cmd)
 800d0d8:	79bb      	ldrb	r3, [r7, #6]
 800d0da:	2b03      	cmp	r3, #3
 800d0dc:	d834      	bhi.n	800d148 <SD_ioctl+0x98>
 800d0de:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e4 <SD_ioctl+0x34>)
 800d0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e4:	0800d0f5 	.word	0x0800d0f5
 800d0e8:	0800d0fd 	.word	0x0800d0fd
 800d0ec:	0800d115 	.word	0x0800d115
 800d0f0:	0800d12f 	.word	0x0800d12f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d0fa:	e028      	b.n	800d14e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0fc:	f107 030c 	add.w	r3, r7, #12
 800d100:	4618      	mov	r0, r3
 800d102:	f7ff fe67 	bl	800cdd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d112:	e01c      	b.n	800d14e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d114:	f107 030c 	add.w	r3, r7, #12
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff fe5b 	bl	800cdd4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d120:	b29a      	uxth	r2, r3
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d126:	2300      	movs	r3, #0
 800d128:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d12c:	e00f      	b.n	800d14e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d12e:	f107 030c 	add.w	r3, r7, #12
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff fe4e 	bl	800cdd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d13a:	0a5a      	lsrs	r2, r3, #9
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d140:	2300      	movs	r3, #0
 800d142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d146:	e002      	b.n	800d14e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d148:	2304      	movs	r3, #4
 800d14a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d14e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d152:	4618      	mov	r0, r3
 800d154:	3730      	adds	r7, #48	@ 0x30
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	20000051 	.word	0x20000051

0800d160 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d164:	4b04      	ldr	r3, [pc, #16]	@ (800d178 <BSP_SD_ReadCpltCallback+0x18>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2200      	movs	r2, #0
 800d16a:	2101      	movs	r1, #1
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 ff37 	bl	800dfe0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800d172:	bf00      	nop
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	2000105c 	.word	0x2000105c

0800d17c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	4603      	mov	r3, r0
 800d184:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d186:	79fb      	ldrb	r3, [r7, #7]
 800d188:	4a08      	ldr	r2, [pc, #32]	@ (800d1ac <disk_status+0x30>)
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	4413      	add	r3, r2
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	79fa      	ldrb	r2, [r7, #7]
 800d194:	4905      	ldr	r1, [pc, #20]	@ (800d1ac <disk_status+0x30>)
 800d196:	440a      	add	r2, r1
 800d198:	7a12      	ldrb	r2, [r2, #8]
 800d19a:	4610      	mov	r0, r2
 800d19c:	4798      	blx	r3
 800d19e:	4603      	mov	r3, r0
 800d1a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	20001088 	.word	0x20001088

0800d1b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	4a0d      	ldr	r2, [pc, #52]	@ (800d1f8 <disk_initialize+0x48>)
 800d1c2:	5cd3      	ldrb	r3, [r2, r3]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d111      	bne.n	800d1ec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d1c8:	79fb      	ldrb	r3, [r7, #7]
 800d1ca:	4a0b      	ldr	r2, [pc, #44]	@ (800d1f8 <disk_initialize+0x48>)
 800d1cc:	2101      	movs	r1, #1
 800d1ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	4a09      	ldr	r2, [pc, #36]	@ (800d1f8 <disk_initialize+0x48>)
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	79fa      	ldrb	r2, [r7, #7]
 800d1de:	4906      	ldr	r1, [pc, #24]	@ (800d1f8 <disk_initialize+0x48>)
 800d1e0:	440a      	add	r2, r1
 800d1e2:	7a12      	ldrb	r2, [r2, #8]
 800d1e4:	4610      	mov	r0, r2
 800d1e6:	4798      	blx	r3
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	20001088 	.word	0x20001088

0800d1fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d1fc:	b590      	push	{r4, r7, lr}
 800d1fe:	b087      	sub	sp, #28
 800d200:	af00      	add	r7, sp, #0
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	607a      	str	r2, [r7, #4]
 800d206:	603b      	str	r3, [r7, #0]
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
 800d20e:	4a0a      	ldr	r2, [pc, #40]	@ (800d238 <disk_read+0x3c>)
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	4413      	add	r3, r2
 800d214:	685b      	ldr	r3, [r3, #4]
 800d216:	689c      	ldr	r4, [r3, #8]
 800d218:	7bfb      	ldrb	r3, [r7, #15]
 800d21a:	4a07      	ldr	r2, [pc, #28]	@ (800d238 <disk_read+0x3c>)
 800d21c:	4413      	add	r3, r2
 800d21e:	7a18      	ldrb	r0, [r3, #8]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	68b9      	ldr	r1, [r7, #8]
 800d226:	47a0      	blx	r4
 800d228:	4603      	mov	r3, r0
 800d22a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	371c      	adds	r7, #28
 800d232:	46bd      	mov	sp, r7
 800d234:	bd90      	pop	{r4, r7, pc}
 800d236:	bf00      	nop
 800d238:	20001088 	.word	0x20001088

0800d23c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d23c:	b590      	push	{r4, r7, lr}
 800d23e:	b087      	sub	sp, #28
 800d240:	af00      	add	r7, sp, #0
 800d242:	60b9      	str	r1, [r7, #8]
 800d244:	607a      	str	r2, [r7, #4]
 800d246:	603b      	str	r3, [r7, #0]
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	4a0a      	ldr	r2, [pc, #40]	@ (800d278 <disk_write+0x3c>)
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	685b      	ldr	r3, [r3, #4]
 800d256:	68dc      	ldr	r4, [r3, #12]
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	4a07      	ldr	r2, [pc, #28]	@ (800d278 <disk_write+0x3c>)
 800d25c:	4413      	add	r3, r2
 800d25e:	7a18      	ldrb	r0, [r3, #8]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	68b9      	ldr	r1, [r7, #8]
 800d266:	47a0      	blx	r4
 800d268:	4603      	mov	r3, r0
 800d26a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d26e:	4618      	mov	r0, r3
 800d270:	371c      	adds	r7, #28
 800d272:	46bd      	mov	sp, r7
 800d274:	bd90      	pop	{r4, r7, pc}
 800d276:	bf00      	nop
 800d278:	20001088 	.word	0x20001088

0800d27c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	3301      	adds	r3, #1
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d28c:	89fb      	ldrh	r3, [r7, #14]
 800d28e:	021b      	lsls	r3, r3, #8
 800d290:	b21a      	sxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	b21b      	sxth	r3, r3
 800d298:	4313      	orrs	r3, r2
 800d29a:	b21b      	sxth	r3, r3
 800d29c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d29e:	89fb      	ldrh	r3, [r7, #14]
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3714      	adds	r7, #20
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b085      	sub	sp, #20
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	3303      	adds	r3, #3
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	021b      	lsls	r3, r3, #8
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	3202      	adds	r2, #2
 800d2c4:	7812      	ldrb	r2, [r2, #0]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	021b      	lsls	r3, r3, #8
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	3201      	adds	r2, #1
 800d2d2:	7812      	ldrb	r2, [r2, #0]
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	021b      	lsls	r3, r3, #8
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	7812      	ldrb	r2, [r2, #0]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d009      	beq.n	800d314 <lock_fs+0x22>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	4618      	mov	r0, r3
 800d306:	f000 fc94 	bl	800dc32 <ff_req_grant>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d001      	beq.n	800d314 <lock_fs+0x22>
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <lock_fs+0x24>
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3708      	adds	r7, #8
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b082      	sub	sp, #8
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
 800d326:	460b      	mov	r3, r1
 800d328:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00d      	beq.n	800d34c <unlock_fs+0x2e>
 800d330:	78fb      	ldrb	r3, [r7, #3]
 800d332:	2b0c      	cmp	r3, #12
 800d334:	d00a      	beq.n	800d34c <unlock_fs+0x2e>
 800d336:	78fb      	ldrb	r3, [r7, #3]
 800d338:	2b0b      	cmp	r3, #11
 800d33a:	d007      	beq.n	800d34c <unlock_fs+0x2e>
 800d33c:	78fb      	ldrb	r3, [r7, #3]
 800d33e:	2b0f      	cmp	r3, #15
 800d340:	d004      	beq.n	800d34c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	4618      	mov	r0, r3
 800d348:	f000 fc88 	bl	800dc5c <ff_rel_grant>
	}
}
 800d34c:	bf00      	nop
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d35c:	2300      	movs	r3, #0
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	e010      	b.n	800d384 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d362:	4a0d      	ldr	r2, [pc, #52]	@ (800d398 <clear_lock+0x44>)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	011b      	lsls	r3, r3, #4
 800d368:	4413      	add	r3, r2
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	429a      	cmp	r2, r3
 800d370:	d105      	bne.n	800d37e <clear_lock+0x2a>
 800d372:	4a09      	ldr	r2, [pc, #36]	@ (800d398 <clear_lock+0x44>)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	011b      	lsls	r3, r3, #4
 800d378:	4413      	add	r3, r2
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3301      	adds	r3, #1
 800d382:	60fb      	str	r3, [r7, #12]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b01      	cmp	r3, #1
 800d388:	d9eb      	bls.n	800d362 <clear_lock+0xe>
	}
}
 800d38a:	bf00      	nop
 800d38c:	bf00      	nop
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	20001068 	.word	0x20001068

0800d39c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	78db      	ldrb	r3, [r3, #3]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d034      	beq.n	800d41a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	7858      	ldrb	r0, [r3, #1]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	697a      	ldr	r2, [r7, #20]
 800d3c4:	f7ff ff3a 	bl	800d23c <disk_write>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d002      	beq.n	800d3d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	73fb      	strb	r3, [r7, #15]
 800d3d2:	e022      	b.n	800d41a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3de:	697a      	ldr	r2, [r7, #20]
 800d3e0:	1ad2      	subs	r2, r2, r3
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	69db      	ldr	r3, [r3, #28]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d217      	bcs.n	800d41a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	789b      	ldrb	r3, [r3, #2]
 800d3ee:	613b      	str	r3, [r7, #16]
 800d3f0:	e010      	b.n	800d414 <sync_window+0x78>
					wsect += fs->fsize;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	69db      	ldr	r3, [r3, #28]
 800d3f6:	697a      	ldr	r2, [r7, #20]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	7858      	ldrb	r0, [r3, #1]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d406:	2301      	movs	r3, #1
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	f7ff ff17 	bl	800d23c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	3b01      	subs	r3, #1
 800d412:	613b      	str	r3, [r7, #16]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d8eb      	bhi.n	800d3f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3718      	adds	r7, #24
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b084      	sub	sp, #16
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
 800d42c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d42e:	2300      	movs	r3, #0
 800d430:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d01b      	beq.n	800d474 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f7ff ffad 	bl	800d39c <sync_window>
 800d442:	4603      	mov	r3, r0
 800d444:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d113      	bne.n	800d474 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7858      	ldrb	r0, [r3, #1]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d456:	2301      	movs	r3, #1
 800d458:	683a      	ldr	r2, [r7, #0]
 800d45a:	f7ff fecf 	bl	800d1fc <disk_read>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d004      	beq.n	800d46e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d464:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d468:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	683a      	ldr	r2, [r7, #0]
 800d472:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800d474:	7bfb      	ldrb	r3, [r7, #15]
}
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d47e:	b480      	push	{r7}
 800d480:	b087      	sub	sp, #28
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d486:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d48a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d031      	beq.n	800d4f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	617b      	str	r3, [r7, #20]
 800d49a:	e002      	b.n	800d4a2 <get_ldnumber+0x24>
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	617b      	str	r3, [r7, #20]
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	d903      	bls.n	800d4b2 <get_ldnumber+0x34>
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b3a      	cmp	r3, #58	@ 0x3a
 800d4b0:	d1f4      	bne.n	800d49c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2b3a      	cmp	r3, #58	@ 0x3a
 800d4b8:	d11c      	bne.n	800d4f4 <get_ldnumber+0x76>
			tp = *path;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	60fa      	str	r2, [r7, #12]
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	3b30      	subs	r3, #48	@ 0x30
 800d4ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	2b09      	cmp	r3, #9
 800d4d0:	d80e      	bhi.n	800d4f0 <get_ldnumber+0x72>
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d10a      	bne.n	800d4f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d107      	bne.n	800d4f0 <get_ldnumber+0x72>
					vol = (int)i;
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	617b      	str	r3, [r7, #20]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	697a      	ldr	r2, [r7, #20]
 800d4ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	e002      	b.n	800d4fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d4f8:	693b      	ldr	r3, [r7, #16]
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	371c      	adds	r7, #28
 800d4fe:	46bd      	mov	sp, r7
 800d500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d504:	4770      	bx	lr
	...

0800d508 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	70da      	strb	r2, [r3, #3]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d51e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f7ff ff7e 	bl	800d424 <move_window>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <check_fs+0x2a>
 800d52e:	2304      	movs	r3, #4
 800d530:	e038      	b.n	800d5a4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	3334      	adds	r3, #52	@ 0x34
 800d536:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7ff fe9e 	bl	800d27c <ld_word>
 800d540:	4603      	mov	r3, r0
 800d542:	461a      	mov	r2, r3
 800d544:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d548:	429a      	cmp	r2, r3
 800d54a:	d001      	beq.n	800d550 <check_fs+0x48>
 800d54c:	2303      	movs	r3, #3
 800d54e:	e029      	b.n	800d5a4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d556:	2be9      	cmp	r3, #233	@ 0xe9
 800d558:	d009      	beq.n	800d56e <check_fs+0x66>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d560:	2beb      	cmp	r3, #235	@ 0xeb
 800d562:	d11e      	bne.n	800d5a2 <check_fs+0x9a>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d56a:	2b90      	cmp	r3, #144	@ 0x90
 800d56c:	d119      	bne.n	800d5a2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	3334      	adds	r3, #52	@ 0x34
 800d572:	3336      	adds	r3, #54	@ 0x36
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fe99 	bl	800d2ac <ld_dword>
 800d57a:	4603      	mov	r3, r0
 800d57c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d580:	4a0a      	ldr	r2, [pc, #40]	@ (800d5ac <check_fs+0xa4>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d101      	bne.n	800d58a <check_fs+0x82>
 800d586:	2300      	movs	r3, #0
 800d588:	e00c      	b.n	800d5a4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	3334      	adds	r3, #52	@ 0x34
 800d58e:	3352      	adds	r3, #82	@ 0x52
 800d590:	4618      	mov	r0, r3
 800d592:	f7ff fe8b 	bl	800d2ac <ld_dword>
 800d596:	4603      	mov	r3, r0
 800d598:	4a05      	ldr	r2, [pc, #20]	@ (800d5b0 <check_fs+0xa8>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d101      	bne.n	800d5a2 <check_fs+0x9a>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e000      	b.n	800d5a4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d5a2:	2302      	movs	r3, #2
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	00544146 	.word	0x00544146
 800d5b0:	33544146 	.word	0x33544146

0800d5b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b096      	sub	sp, #88	@ 0x58
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f7ff ff58 	bl	800d47e <get_ldnumber>
 800d5ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	da01      	bge.n	800d5da <find_volume+0x26>
 800d5d6:	230b      	movs	r3, #11
 800d5d8:	e235      	b.n	800da46 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d5da:	4aa5      	ldr	r2, [pc, #660]	@ (800d870 <find_volume+0x2bc>)
 800d5dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <find_volume+0x3a>
 800d5ea:	230c      	movs	r3, #12
 800d5ec:	e22b      	b.n	800da46 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800d5ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d5f0:	f7ff fe7f 	bl	800d2f2 <lock_fs>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d101      	bne.n	800d5fe <find_volume+0x4a>
 800d5fa:	230f      	movs	r3, #15
 800d5fc:	e223      	b.n	800da46 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d602:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d604:	79fb      	ldrb	r3, [r7, #7]
 800d606:	f023 0301 	bic.w	r3, r3, #1
 800d60a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d01a      	beq.n	800d64a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d616:	785b      	ldrb	r3, [r3, #1]
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fdaf 	bl	800d17c <disk_status>
 800d61e:	4603      	mov	r3, r0
 800d620:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d624:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d628:	f003 0301 	and.w	r3, r3, #1
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10c      	bne.n	800d64a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d630:	79fb      	ldrb	r3, [r7, #7]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d007      	beq.n	800d646 <find_volume+0x92>
 800d636:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d63a:	f003 0304 	and.w	r3, r3, #4
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d642:	230a      	movs	r3, #10
 800d644:	e1ff      	b.n	800da46 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800d646:	2300      	movs	r3, #0
 800d648:	e1fd      	b.n	800da46 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64c:	2200      	movs	r2, #0
 800d64e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d652:	b2da      	uxtb	r2, r3
 800d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d656:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65a:	785b      	ldrb	r3, [r3, #1]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f7ff fda7 	bl	800d1b0 <disk_initialize>
 800d662:	4603      	mov	r3, r0
 800d664:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d674:	2303      	movs	r3, #3
 800d676:	e1e6      	b.n	800da46 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d678:	79fb      	ldrb	r3, [r7, #7]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d007      	beq.n	800d68e <find_volume+0xda>
 800d67e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d682:	f003 0304 	and.w	r3, r3, #4
 800d686:	2b00      	cmp	r3, #0
 800d688:	d001      	beq.n	800d68e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d68a:	230a      	movs	r3, #10
 800d68c:	e1db      	b.n	800da46 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d692:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d694:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d696:	f7ff ff37 	bl	800d508 <check_fs>
 800d69a:	4603      	mov	r3, r0
 800d69c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d6a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d149      	bne.n	800d73c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6ac:	e01e      	b.n	800d6ec <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d6b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6b6:	011b      	lsls	r3, r3, #4
 800d6b8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d6bc:	4413      	add	r3, r2
 800d6be:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c2:	3304      	adds	r3, #4
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d006      	beq.n	800d6d8 <find_volume+0x124>
 800d6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7ff fdec 	bl	800d2ac <ld_dword>
 800d6d4:	4602      	mov	r2, r0
 800d6d6:	e000      	b.n	800d6da <find_volume+0x126>
 800d6d8:	2200      	movs	r2, #0
 800d6da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	3358      	adds	r3, #88	@ 0x58
 800d6e0:	443b      	add	r3, r7
 800d6e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d9dd      	bls.n	800d6ae <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d6f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d002      	beq.n	800d702 <find_volume+0x14e>
 800d6fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6fe:	3b01      	subs	r3, #1
 800d700:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	3358      	adds	r3, #88	@ 0x58
 800d708:	443b      	add	r3, r7
 800d70a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d70e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d712:	2b00      	cmp	r3, #0
 800d714:	d005      	beq.n	800d722 <find_volume+0x16e>
 800d716:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d718:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d71a:	f7ff fef5 	bl	800d508 <check_fs>
 800d71e:	4603      	mov	r3, r0
 800d720:	e000      	b.n	800d724 <find_volume+0x170>
 800d722:	2303      	movs	r3, #3
 800d724:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d728:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d905      	bls.n	800d73c <find_volume+0x188>
 800d730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d732:	3301      	adds	r3, #1
 800d734:	643b      	str	r3, [r7, #64]	@ 0x40
 800d736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d738:	2b03      	cmp	r3, #3
 800d73a:	d9e2      	bls.n	800d702 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d73c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d740:	2b04      	cmp	r3, #4
 800d742:	d101      	bne.n	800d748 <find_volume+0x194>
 800d744:	2301      	movs	r3, #1
 800d746:	e17e      	b.n	800da46 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d748:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d901      	bls.n	800d754 <find_volume+0x1a0>
 800d750:	230d      	movs	r3, #13
 800d752:	e178      	b.n	800da46 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d756:	3334      	adds	r3, #52	@ 0x34
 800d758:	330b      	adds	r3, #11
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff fd8e 	bl	800d27c <ld_word>
 800d760:	4603      	mov	r3, r0
 800d762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d766:	d001      	beq.n	800d76c <find_volume+0x1b8>
 800d768:	230d      	movs	r3, #13
 800d76a:	e16c      	b.n	800da46 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76e:	3334      	adds	r3, #52	@ 0x34
 800d770:	3316      	adds	r3, #22
 800d772:	4618      	mov	r0, r3
 800d774:	f7ff fd82 	bl	800d27c <ld_word>
 800d778:	4603      	mov	r3, r0
 800d77a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d77c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <find_volume+0x1dc>
 800d782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d784:	3334      	adds	r3, #52	@ 0x34
 800d786:	3324      	adds	r3, #36	@ 0x24
 800d788:	4618      	mov	r0, r3
 800d78a:	f7ff fd8f 	bl	800d2ac <ld_dword>
 800d78e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d792:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d794:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d798:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a2:	789b      	ldrb	r3, [r3, #2]
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d005      	beq.n	800d7b4 <find_volume+0x200>
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7aa:	789b      	ldrb	r3, [r3, #2]
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d001      	beq.n	800d7b4 <find_volume+0x200>
 800d7b0:	230d      	movs	r3, #13
 800d7b2:	e148      	b.n	800da46 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b6:	789b      	ldrb	r3, [r3, #2]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7bc:	fb02 f303 	mul.w	r3, r2, r3
 800d7c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d0:	895b      	ldrh	r3, [r3, #10]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d008      	beq.n	800d7e8 <find_volume+0x234>
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d8:	895b      	ldrh	r3, [r3, #10]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7de:	895b      	ldrh	r3, [r3, #10]
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <find_volume+0x238>
 800d7e8:	230d      	movs	r3, #13
 800d7ea:	e12c      	b.n	800da46 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ee:	3334      	adds	r3, #52	@ 0x34
 800d7f0:	3311      	adds	r3, #17
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff fd42 	bl	800d27c <ld_word>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d802:	891b      	ldrh	r3, [r3, #8]
 800d804:	f003 030f 	and.w	r3, r3, #15
 800d808:	b29b      	uxth	r3, r3
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <find_volume+0x25e>
 800d80e:	230d      	movs	r3, #13
 800d810:	e119      	b.n	800da46 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d814:	3334      	adds	r3, #52	@ 0x34
 800d816:	3313      	adds	r3, #19
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff fd2f 	bl	800d27c <ld_word>
 800d81e:	4603      	mov	r3, r0
 800d820:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d824:	2b00      	cmp	r3, #0
 800d826:	d106      	bne.n	800d836 <find_volume+0x282>
 800d828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82a:	3334      	adds	r3, #52	@ 0x34
 800d82c:	3320      	adds	r3, #32
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff fd3c 	bl	800d2ac <ld_dword>
 800d834:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d838:	3334      	adds	r3, #52	@ 0x34
 800d83a:	330e      	adds	r3, #14
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7ff fd1d 	bl	800d27c <ld_word>
 800d842:	4603      	mov	r3, r0
 800d844:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d846:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d101      	bne.n	800d850 <find_volume+0x29c>
 800d84c:	230d      	movs	r3, #13
 800d84e:	e0fa      	b.n	800da46 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d850:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d854:	4413      	add	r3, r2
 800d856:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d858:	8912      	ldrh	r2, [r2, #8]
 800d85a:	0912      	lsrs	r2, r2, #4
 800d85c:	b292      	uxth	r2, r2
 800d85e:	4413      	add	r3, r2
 800d860:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d866:	429a      	cmp	r2, r3
 800d868:	d204      	bcs.n	800d874 <find_volume+0x2c0>
 800d86a:	230d      	movs	r3, #13
 800d86c:	e0eb      	b.n	800da46 <find_volume+0x492>
 800d86e:	bf00      	nop
 800d870:	20001060 	.word	0x20001060
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d878:	1ad3      	subs	r3, r2, r3
 800d87a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d87c:	8952      	ldrh	r2, [r2, #10]
 800d87e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d882:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <find_volume+0x2da>
 800d88a:	230d      	movs	r3, #13
 800d88c:	e0db      	b.n	800da46 <find_volume+0x492>
		fmt = FS_FAT32;
 800d88e:	2303      	movs	r3, #3
 800d890:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d896:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d802      	bhi.n	800d8a4 <find_volume+0x2f0>
 800d89e:	2302      	movs	r3, #2
 800d8a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d802      	bhi.n	800d8b4 <find_volume+0x300>
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b6:	1c9a      	adds	r2, r3, #2
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ba:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d8c0:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d8c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8c6:	441a      	add	r2, r3
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ca:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d8cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d0:	441a      	add	r2, r3
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800d8d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d11e      	bne.n	800d91c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e0:	3334      	adds	r3, #52	@ 0x34
 800d8e2:	332a      	adds	r3, #42	@ 0x2a
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7ff fcc9 	bl	800d27c <ld_word>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <find_volume+0x340>
 800d8f0:	230d      	movs	r3, #13
 800d8f2:	e0a8      	b.n	800da46 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f6:	891b      	ldrh	r3, [r3, #8]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <find_volume+0x34c>
 800d8fc:	230d      	movs	r3, #13
 800d8fe:	e0a2      	b.n	800da46 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d902:	3334      	adds	r3, #52	@ 0x34
 800d904:	332c      	adds	r3, #44	@ 0x2c
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fcd0 	bl	800d2ac <ld_dword>
 800d90c:	4602      	mov	r2, r0
 800d90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d910:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	647b      	str	r3, [r7, #68]	@ 0x44
 800d91a:	e01f      	b.n	800d95c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d91e:	891b      	ldrh	r3, [r3, #8]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <find_volume+0x374>
 800d924:	230d      	movs	r3, #13
 800d926:	e08e      	b.n	800da46 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d92c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d92e:	441a      	add	r2, r3
 800d930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d932:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d938:	2b02      	cmp	r3, #2
 800d93a:	d103      	bne.n	800d944 <find_volume+0x390>
 800d93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	005b      	lsls	r3, r3, #1
 800d942:	e00a      	b.n	800d95a <find_volume+0x3a6>
 800d944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d946:	699a      	ldr	r2, [r3, #24]
 800d948:	4613      	mov	r3, r2
 800d94a:	005b      	lsls	r3, r3, #1
 800d94c:	4413      	add	r3, r2
 800d94e:	085a      	lsrs	r2, r3, #1
 800d950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d952:	699b      	ldr	r3, [r3, #24]
 800d954:	f003 0301 	and.w	r3, r3, #1
 800d958:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d95a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d95e:	69da      	ldr	r2, [r3, #28]
 800d960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d962:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d966:	0a5b      	lsrs	r3, r3, #9
 800d968:	429a      	cmp	r2, r3
 800d96a:	d201      	bcs.n	800d970 <find_volume+0x3bc>
 800d96c:	230d      	movs	r3, #13
 800d96e:	e06a      	b.n	800da46 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d972:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d976:	615a      	str	r2, [r3, #20]
 800d978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97a:	695a      	ldr	r2, [r3, #20]
 800d97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d982:	2280      	movs	r2, #128	@ 0x80
 800d984:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d986:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d149      	bne.n	800da22 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d990:	3334      	adds	r3, #52	@ 0x34
 800d992:	3330      	adds	r3, #48	@ 0x30
 800d994:	4618      	mov	r0, r3
 800d996:	f7ff fc71 	bl	800d27c <ld_word>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d140      	bne.n	800da22 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d9a8:	f7ff fd3c 	bl	800d424 <move_window>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d137      	bne.n	800da22 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ba:	3334      	adds	r3, #52	@ 0x34
 800d9bc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f7ff fc5b 	bl	800d27c <ld_word>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	461a      	mov	r2, r3
 800d9ca:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d127      	bne.n	800da22 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d4:	3334      	adds	r3, #52	@ 0x34
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7ff fc68 	bl	800d2ac <ld_dword>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	4a1c      	ldr	r2, [pc, #112]	@ (800da50 <find_volume+0x49c>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d11e      	bne.n	800da22 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9e6:	3334      	adds	r3, #52	@ 0x34
 800d9e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7ff fc5d 	bl	800d2ac <ld_dword>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	4a17      	ldr	r2, [pc, #92]	@ (800da54 <find_volume+0x4a0>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d113      	bne.n	800da22 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9fc:	3334      	adds	r3, #52	@ 0x34
 800d9fe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff fc52 	bl	800d2ac <ld_dword>
 800da08:	4602      	mov	r2, r0
 800da0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da0c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da10:	3334      	adds	r3, #52	@ 0x34
 800da12:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800da16:	4618      	mov	r0, r3
 800da18:	f7ff fc48 	bl	800d2ac <ld_dword>
 800da1c:	4602      	mov	r2, r0
 800da1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da20:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da24:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800da28:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da2a:	4b0b      	ldr	r3, [pc, #44]	@ (800da58 <find_volume+0x4a4>)
 800da2c:	881b      	ldrh	r3, [r3, #0]
 800da2e:	3301      	adds	r3, #1
 800da30:	b29a      	uxth	r2, r3
 800da32:	4b09      	ldr	r3, [pc, #36]	@ (800da58 <find_volume+0x4a4>)
 800da34:	801a      	strh	r2, [r3, #0]
 800da36:	4b08      	ldr	r3, [pc, #32]	@ (800da58 <find_volume+0x4a4>)
 800da38:	881a      	ldrh	r2, [r3, #0]
 800da3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800da40:	f7ff fc88 	bl	800d354 <clear_lock>
#endif
	return FR_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3758      	adds	r7, #88	@ 0x58
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	41615252 	.word	0x41615252
 800da54:	61417272 	.word	0x61417272
 800da58:	20001064 	.word	0x20001064

0800da5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b088      	sub	sp, #32
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	4613      	mov	r3, r2
 800da68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800da6e:	f107 0310 	add.w	r3, r7, #16
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff fd03 	bl	800d47e <get_ldnumber>
 800da78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800da7a:	69fb      	ldr	r3, [r7, #28]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	da01      	bge.n	800da84 <f_mount+0x28>
 800da80:	230b      	movs	r3, #11
 800da82:	e048      	b.n	800db16 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800da84:	4a26      	ldr	r2, [pc, #152]	@ (800db20 <f_mount+0xc4>)
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00f      	beq.n	800dab4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800da94:	69b8      	ldr	r0, [r7, #24]
 800da96:	f7ff fc5d 	bl	800d354 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	68db      	ldr	r3, [r3, #12]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 f8bb 	bl	800dc1a <ff_del_syncobj>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <f_mount+0x52>
 800daaa:	2302      	movs	r3, #2
 800daac:	e033      	b.n	800db16 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	2200      	movs	r2, #0
 800dab2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00f      	beq.n	800dada <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2200      	movs	r2, #0
 800dabe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	330c      	adds	r3, #12
 800dac8:	4619      	mov	r1, r3
 800daca:	4610      	mov	r0, r2
 800dacc:	f000 f885 	bl	800dbda <ff_cre_syncobj>
 800dad0:	4603      	mov	r3, r0
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <f_mount+0x7e>
 800dad6:	2302      	movs	r3, #2
 800dad8:	e01d      	b.n	800db16 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	4910      	ldr	r1, [pc, #64]	@ (800db20 <f_mount+0xc4>)
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <f_mount+0x94>
 800daea:	79fb      	ldrb	r3, [r7, #7]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d001      	beq.n	800daf4 <f_mount+0x98>
 800daf0:	2300      	movs	r3, #0
 800daf2:	e010      	b.n	800db16 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800daf4:	f107 010c 	add.w	r1, r7, #12
 800daf8:	f107 0308 	add.w	r3, r7, #8
 800dafc:	2200      	movs	r2, #0
 800dafe:	4618      	mov	r0, r3
 800db00:	f7ff fd58 	bl	800d5b4 <find_volume>
 800db04:	4603      	mov	r3, r0
 800db06:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	7dfa      	ldrb	r2, [r7, #23]
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7ff fc05 	bl	800d31e <unlock_fs>
 800db14:	7dfb      	ldrb	r3, [r7, #23]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3720      	adds	r7, #32
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20001060 	.word	0x20001060

0800db24 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800db24:	b480      	push	{r7}
 800db26:	b087      	sub	sp, #28
 800db28:	af00      	add	r7, sp, #0
 800db2a:	60f8      	str	r0, [r7, #12]
 800db2c:	60b9      	str	r1, [r7, #8]
 800db2e:	4613      	mov	r3, r2
 800db30:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800db32:	2301      	movs	r3, #1
 800db34:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800db36:	2300      	movs	r3, #0
 800db38:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800db3a:	4b1f      	ldr	r3, [pc, #124]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db3c:	7a5b      	ldrb	r3, [r3, #9]
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	2b00      	cmp	r3, #0
 800db42:	d131      	bne.n	800dba8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800db44:	4b1c      	ldr	r3, [pc, #112]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db46:	7a5b      	ldrb	r3, [r3, #9]
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	461a      	mov	r2, r3
 800db4c:	4b1a      	ldr	r3, [pc, #104]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db4e:	2100      	movs	r1, #0
 800db50:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800db52:	4b19      	ldr	r3, [pc, #100]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db54:	7a5b      	ldrb	r3, [r3, #9]
 800db56:	b2db      	uxtb	r3, r3
 800db58:	4a17      	ldr	r2, [pc, #92]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db5a:	009b      	lsls	r3, r3, #2
 800db5c:	4413      	add	r3, r2
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800db62:	4b15      	ldr	r3, [pc, #84]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db64:	7a5b      	ldrb	r3, [r3, #9]
 800db66:	b2db      	uxtb	r3, r3
 800db68:	461a      	mov	r2, r3
 800db6a:	4b13      	ldr	r3, [pc, #76]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db6c:	4413      	add	r3, r2
 800db6e:	79fa      	ldrb	r2, [r7, #7]
 800db70:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800db72:	4b11      	ldr	r3, [pc, #68]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db74:	7a5b      	ldrb	r3, [r3, #9]
 800db76:	b2db      	uxtb	r3, r3
 800db78:	1c5a      	adds	r2, r3, #1
 800db7a:	b2d1      	uxtb	r1, r2
 800db7c:	4a0e      	ldr	r2, [pc, #56]	@ (800dbb8 <FATFS_LinkDriverEx+0x94>)
 800db7e:	7251      	strb	r1, [r2, #9]
 800db80:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800db82:	7dbb      	ldrb	r3, [r7, #22]
 800db84:	3330      	adds	r3, #48	@ 0x30
 800db86:	b2da      	uxtb	r2, r3
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	3301      	adds	r3, #1
 800db90:	223a      	movs	r2, #58	@ 0x3a
 800db92:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	3302      	adds	r3, #2
 800db98:	222f      	movs	r2, #47	@ 0x2f
 800db9a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	3303      	adds	r3, #3
 800dba0:	2200      	movs	r2, #0
 800dba2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dba4:	2300      	movs	r3, #0
 800dba6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	20001088 	.word	0x20001088

0800dbbc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff ffaa 	bl	800db24 <FATFS_LinkDriverEx>
 800dbd0:	4603      	mov	r3, r0
}
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b086      	sub	sp, #24
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	6039      	str	r1, [r7, #0]
 800dbe4:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	60fb      	str	r3, [r7, #12]
 800dbea:	2300      	movs	r3, #0
 800dbec:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800dbee:	f107 030c 	add.w	r3, r7, #12
 800dbf2:	2101      	movs	r1, #1
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 f901 	bl	800ddfc <osSemaphoreCreate>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	bf14      	ite	ne
 800dc08:	2301      	movne	r3, #1
 800dc0a:	2300      	moveq	r3, #0
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	617b      	str	r3, [r7, #20]

    return ret;
 800dc10:	697b      	ldr	r3, [r7, #20]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3718      	adds	r7, #24
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 f9a0 	bl	800df68 <osSemaphoreDelete>
#endif
    return 1;
 800dc28:	2301      	movs	r3, #1
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800dc3e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f000 f90c 	bl	800de60 <osSemaphoreWait>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d101      	bne.n	800dc52 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800dc52:	68fb      	ldr	r3, [r7, #12]
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b082      	sub	sp, #8
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 f949 	bl	800defc <osSemaphoreRelease>
#endif
}
 800dc6a:	bf00      	nop
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dc72:	b480      	push	{r7}
 800dc74:	b085      	sub	sp, #20
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	4603      	mov	r3, r0
 800dc7a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dc80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dc84:	2b84      	cmp	r3, #132	@ 0x84
 800dc86:	d005      	beq.n	800dc94 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dc88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	4413      	add	r3, r2
 800dc90:	3303      	adds	r3, #3
 800dc92:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dc94:	68fb      	ldr	r3, [r7, #12]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3714      	adds	r7, #20
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800dca2:	b480      	push	{r7}
 800dca4:	b083      	sub	sp, #12
 800dca6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dca8:	f3ef 8305 	mrs	r3, IPSR
 800dcac:	607b      	str	r3, [r7, #4]
  return(result);
 800dcae:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	bf14      	ite	ne
 800dcb4:	2301      	movne	r3, #1
 800dcb6:	2300      	moveq	r3, #0
 800dcb8:	b2db      	uxtb	r3, r3
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	370c      	adds	r7, #12
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc4:	4770      	bx	lr

0800dcc6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dcca:	f001 fd4f 	bl	800f76c <vTaskStartScheduler>
  
  return osOK;
 800dcce:	2300      	movs	r3, #0
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800dcd8:	f002 f99e 	bl	8010018 <xTaskGetSchedulerState>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d101      	bne.n	800dce6 <osKernelRunning+0x12>
    return 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	e000      	b.n	800dce8 <osKernelRunning+0x14>
  else
    return 1;
 800dce6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800dcf0:	f7ff ffd7 	bl	800dca2 <inHandlerMode>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d003      	beq.n	800dd02 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800dcfa:	f001 fe63 	bl	800f9c4 <xTaskGetTickCountFromISR>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	e002      	b.n	800dd08 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800dd02:	f001 fe4f 	bl	800f9a4 <xTaskGetTickCount>
 800dd06:	4603      	mov	r3, r0
  }
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd0e:	b089      	sub	sp, #36	@ 0x24
 800dd10:	af04      	add	r7, sp, #16
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	695b      	ldr	r3, [r3, #20]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d020      	beq.n	800dd60 <osThreadCreate+0x54>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	699b      	ldr	r3, [r3, #24]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d01c      	beq.n	800dd60 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685c      	ldr	r4, [r3, #4]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	691e      	ldr	r6, [r3, #16]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7ff ff9a 	bl	800dc72 <makeFreeRtosPriority>
 800dd3e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	695b      	ldr	r3, [r3, #20]
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd48:	9202      	str	r2, [sp, #8]
 800dd4a:	9301      	str	r3, [sp, #4]
 800dd4c:	9100      	str	r1, [sp, #0]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	4632      	mov	r2, r6
 800dd52:	4629      	mov	r1, r5
 800dd54:	4620      	mov	r0, r4
 800dd56:	f001 fa93 	bl	800f280 <xTaskCreateStatic>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	60fb      	str	r3, [r7, #12]
 800dd5e:	e01c      	b.n	800dd9a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	685c      	ldr	r4, [r3, #4]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd6c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7ff ff7c 	bl	800dc72 <makeFreeRtosPriority>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	f107 030c 	add.w	r3, r7, #12
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	9200      	str	r2, [sp, #0]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	4632      	mov	r2, r6
 800dd88:	4629      	mov	r1, r5
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f001 fade 	bl	800f34c <xTaskCreate>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d001      	beq.n	800dd9a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800dd96:	2300      	movs	r3, #0
 800dd98:	e000      	b.n	800dd9c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dda4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <osDelay+0x16>
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	e000      	b.n	800ddbc <osDelay+0x18>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f001 fc9d 	bl	800f6fc <vTaskDelay>
  
  return osOK;
 800ddc2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	685b      	ldr	r3, [r3, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d007      	beq.n	800ddec <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	4619      	mov	r1, r3
 800dde2:	2001      	movs	r0, #1
 800dde4:	f000 fbeb 	bl	800e5be <xQueueCreateMutexStatic>
 800dde8:	4603      	mov	r3, r0
 800ddea:	e003      	b.n	800ddf4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ddec:	2001      	movs	r0, #1
 800ddee:	f000 fbce 	bl	800e58e <xQueueCreateMutex>
 800ddf2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af02      	add	r7, sp, #8
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00f      	beq.n	800de2e <osSemaphoreCreate+0x32>
    if (count == 1) {
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d10a      	bne.n	800de2a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	2203      	movs	r2, #3
 800de1a:	9200      	str	r2, [sp, #0]
 800de1c:	2200      	movs	r2, #0
 800de1e:	2100      	movs	r1, #0
 800de20:	2001      	movs	r0, #1
 800de22:	f000 fab1 	bl	800e388 <xQueueGenericCreateStatic>
 800de26:	4603      	mov	r3, r0
 800de28:	e016      	b.n	800de58 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800de2a:	2300      	movs	r3, #0
 800de2c:	e014      	b.n	800de58 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d110      	bne.n	800de56 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800de34:	2203      	movs	r2, #3
 800de36:	2100      	movs	r1, #0
 800de38:	2001      	movs	r0, #1
 800de3a:	f000 fb2c 	bl	800e496 <xQueueGenericCreate>
 800de3e:	60f8      	str	r0, [r7, #12]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d005      	beq.n	800de52 <osSemaphoreCreate+0x56>
 800de46:	2300      	movs	r3, #0
 800de48:	2200      	movs	r2, #0
 800de4a:	2100      	movs	r1, #0
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f000 fbd1 	bl	800e5f4 <xQueueGenericSend>
      return sema;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	e000      	b.n	800de58 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800de56:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800de6a:	2300      	movs	r3, #0
 800de6c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d101      	bne.n	800de78 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800de74:	2380      	movs	r3, #128	@ 0x80
 800de76:	e03a      	b.n	800deee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de82:	d103      	bne.n	800de8c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800de84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	e009      	b.n	800dea0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d006      	beq.n	800dea0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d101      	bne.n	800dea0 <osSemaphoreWait+0x40>
      ticks = 1;
 800de9c:	2301      	movs	r3, #1
 800de9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dea0:	f7ff feff 	bl	800dca2 <inHandlerMode>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d017      	beq.n	800deda <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800deaa:	f107 0308 	add.w	r3, r7, #8
 800deae:	461a      	mov	r2, r3
 800deb0:	2100      	movs	r1, #0
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 ffe4 	bl	800ee80 <xQueueReceiveFromISR>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b01      	cmp	r3, #1
 800debc:	d001      	beq.n	800dec2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800debe:	23ff      	movs	r3, #255	@ 0xff
 800dec0:	e015      	b.n	800deee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d011      	beq.n	800deec <osSemaphoreWait+0x8c>
 800dec8:	4b0b      	ldr	r3, [pc, #44]	@ (800def8 <osSemaphoreWait+0x98>)
 800deca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dece:	601a      	str	r2, [r3, #0]
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	e008      	b.n	800deec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800deda:	68f9      	ldr	r1, [r7, #12]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 feb7 	bl	800ec50 <xQueueSemaphoreTake>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d001      	beq.n	800deec <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dee8:	23ff      	movs	r3, #255	@ 0xff
 800deea:	e000      	b.n	800deee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	e000ed04 	.word	0xe000ed04

0800defc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800df04:	2300      	movs	r3, #0
 800df06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800df08:	2300      	movs	r3, #0
 800df0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800df0c:	f7ff fec9 	bl	800dca2 <inHandlerMode>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d016      	beq.n	800df44 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800df16:	f107 0308 	add.w	r3, r7, #8
 800df1a:	4619      	mov	r1, r3
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fd16 	bl	800e94e <xQueueGiveFromISR>
 800df22:	4603      	mov	r3, r0
 800df24:	2b01      	cmp	r3, #1
 800df26:	d001      	beq.n	800df2c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800df28:	23ff      	movs	r3, #255	@ 0xff
 800df2a:	e017      	b.n	800df5c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d013      	beq.n	800df5a <osSemaphoreRelease+0x5e>
 800df32:	4b0c      	ldr	r3, [pc, #48]	@ (800df64 <osSemaphoreRelease+0x68>)
 800df34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	f3bf 8f6f 	isb	sy
 800df42:	e00a      	b.n	800df5a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800df44:	2300      	movs	r3, #0
 800df46:	2200      	movs	r2, #0
 800df48:	2100      	movs	r1, #0
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 fb52 	bl	800e5f4 <xQueueGenericSend>
 800df50:	4603      	mov	r3, r0
 800df52:	2b01      	cmp	r3, #1
 800df54:	d001      	beq.n	800df5a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800df56:	23ff      	movs	r3, #255	@ 0xff
 800df58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800df5a:	68fb      	ldr	r3, [r7, #12]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3710      	adds	r7, #16
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}
 800df64:	e000ed04 	.word	0xe000ed04

0800df68 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800df70:	f7ff fe97 	bl	800dca2 <inHandlerMode>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800df7a:	2382      	movs	r3, #130	@ 0x82
 800df7c:	e003      	b.n	800df86 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f001 f806 	bl	800ef90 <vQueueDelete>

  return osOK; 
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3708      	adds	r7, #8
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800df8e:	b590      	push	{r4, r7, lr}
 800df90:	b085      	sub	sp, #20
 800df92:	af02      	add	r7, sp, #8
 800df94:	6078      	str	r0, [r7, #4]
 800df96:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	689b      	ldr	r3, [r3, #8]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d011      	beq.n	800dfc4 <osMessageCreate+0x36>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d00d      	beq.n	800dfc4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6818      	ldr	r0, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6859      	ldr	r1, [r3, #4]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	689a      	ldr	r2, [r3, #8]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	2400      	movs	r4, #0
 800dfba:	9400      	str	r4, [sp, #0]
 800dfbc:	f000 f9e4 	bl	800e388 <xQueueGenericCreateStatic>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	e008      	b.n	800dfd6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4619      	mov	r1, r3
 800dfd0:	f000 fa61 	bl	800e496 <xQueueGenericCreate>
 800dfd4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	370c      	adds	r7, #12
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd90      	pop	{r4, r7, pc}
	...

0800dfe0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800dfec:	2300      	movs	r3, #0
 800dfee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d101      	bne.n	800dffe <osMessagePut+0x1e>
    ticks = 1;
 800dffa:	2301      	movs	r3, #1
 800dffc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800dffe:	f7ff fe50 	bl	800dca2 <inHandlerMode>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d018      	beq.n	800e03a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e008:	f107 0210 	add.w	r2, r7, #16
 800e00c:	f107 0108 	add.w	r1, r7, #8
 800e010:	2300      	movs	r3, #0
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f000 fbf8 	bl	800e808 <xQueueGenericSendFromISR>
 800e018:	4603      	mov	r3, r0
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d001      	beq.n	800e022 <osMessagePut+0x42>
      return osErrorOS;
 800e01e:	23ff      	movs	r3, #255	@ 0xff
 800e020:	e018      	b.n	800e054 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d014      	beq.n	800e052 <osMessagePut+0x72>
 800e028:	4b0c      	ldr	r3, [pc, #48]	@ (800e05c <osMessagePut+0x7c>)
 800e02a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e02e:	601a      	str	r2, [r3, #0]
 800e030:	f3bf 8f4f 	dsb	sy
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	e00b      	b.n	800e052 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e03a:	f107 0108 	add.w	r1, r7, #8
 800e03e:	2300      	movs	r3, #0
 800e040:	697a      	ldr	r2, [r7, #20]
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f000 fad6 	bl	800e5f4 <xQueueGenericSend>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d001      	beq.n	800e052 <osMessagePut+0x72>
      return osErrorOS;
 800e04e:	23ff      	movs	r3, #255	@ 0xff
 800e050:	e000      	b.n	800e054 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3718      	adds	r7, #24
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	e000ed04 	.word	0xe000ed04

0800e060 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e060:	b590      	push	{r4, r7, lr}
 800e062:	b08b      	sub	sp, #44	@ 0x2c
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10a      	bne.n	800e090 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e07a:	2380      	movs	r3, #128	@ 0x80
 800e07c:	617b      	str	r3, [r7, #20]
    return event;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	461c      	mov	r4, r3
 800e082:	f107 0314 	add.w	r3, r7, #20
 800e086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e08a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e08e:	e054      	b.n	800e13a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e090:	2300      	movs	r3, #0
 800e092:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e094:	2300      	movs	r3, #0
 800e096:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e09e:	d103      	bne.n	800e0a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e0a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0a6:	e009      	b.n	800e0bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d006      	beq.n	800e0bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d101      	bne.n	800e0bc <osMessageGet+0x5c>
      ticks = 1;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e0bc:	f7ff fdf1 	bl	800dca2 <inHandlerMode>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d01c      	beq.n	800e100 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e0c6:	f107 0220 	add.w	r2, r7, #32
 800e0ca:	f107 0314 	add.w	r3, r7, #20
 800e0ce:	3304      	adds	r3, #4
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	68b8      	ldr	r0, [r7, #8]
 800e0d4:	f000 fed4 	bl	800ee80 <xQueueReceiveFromISR>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d102      	bne.n	800e0e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e0de:	2310      	movs	r3, #16
 800e0e0:	617b      	str	r3, [r7, #20]
 800e0e2:	e001      	b.n	800e0e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e0e8:	6a3b      	ldr	r3, [r7, #32]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d01d      	beq.n	800e12a <osMessageGet+0xca>
 800e0ee:	4b15      	ldr	r3, [pc, #84]	@ (800e144 <osMessageGet+0xe4>)
 800e0f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	f3bf 8f4f 	dsb	sy
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	e014      	b.n	800e12a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e100:	f107 0314 	add.w	r3, r7, #20
 800e104:	3304      	adds	r3, #4
 800e106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e108:	4619      	mov	r1, r3
 800e10a:	68b8      	ldr	r0, [r7, #8]
 800e10c:	f000 fcb8 	bl	800ea80 <xQueueReceive>
 800e110:	4603      	mov	r3, r0
 800e112:	2b01      	cmp	r3, #1
 800e114:	d102      	bne.n	800e11c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e116:	2310      	movs	r3, #16
 800e118:	617b      	str	r3, [r7, #20]
 800e11a:	e006      	b.n	800e12a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d101      	bne.n	800e126 <osMessageGet+0xc6>
 800e122:	2300      	movs	r3, #0
 800e124:	e000      	b.n	800e128 <osMessageGet+0xc8>
 800e126:	2340      	movs	r3, #64	@ 0x40
 800e128:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	461c      	mov	r4, r3
 800e12e:	f107 0314 	add.w	r3, r7, #20
 800e132:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e136:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e13a:	68f8      	ldr	r0, [r7, #12]
 800e13c:	372c      	adds	r7, #44	@ 0x2c
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd90      	pop	{r4, r7, pc}
 800e142:	bf00      	nop
 800e144:	e000ed04 	.word	0xe000ed04

0800e148 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e148:	b480      	push	{r7}
 800e14a:	b083      	sub	sp, #12
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f103 0208 	add.w	r2, r3, #8
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e160:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f103 0208 	add.w	r2, r3, #8
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f103 0208 	add.w	r2, r3, #8
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2200      	movs	r2, #0
 800e17a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e17c:	bf00      	nop
 800e17e:	370c      	adds	r7, #12
 800e180:	46bd      	mov	sp, r7
 800e182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e186:	4770      	bx	lr

0800e188 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e188:	b480      	push	{r7}
 800e18a:	b083      	sub	sp, #12
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e196:	bf00      	nop
 800e198:	370c      	adds	r7, #12
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1a2:	b480      	push	{r7}
 800e1a4:	b085      	sub	sp, #20
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	68fa      	ldr	r2, [r7, #12]
 800e1b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	689a      	ldr	r2, [r3, #8]
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	1c5a      	adds	r2, r3, #1
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	601a      	str	r2, [r3, #0]
}
 800e1de:	bf00      	nop
 800e1e0:	3714      	adds	r7, #20
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr

0800e1ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1ea:	b480      	push	{r7}
 800e1ec:	b085      	sub	sp, #20
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
 800e1f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e200:	d103      	bne.n	800e20a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	60fb      	str	r3, [r7, #12]
 800e208:	e00c      	b.n	800e224 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	3308      	adds	r3, #8
 800e20e:	60fb      	str	r3, [r7, #12]
 800e210:	e002      	b.n	800e218 <vListInsert+0x2e>
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	60fb      	str	r3, [r7, #12]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	68ba      	ldr	r2, [r7, #8]
 800e220:	429a      	cmp	r2, r3
 800e222:	d2f6      	bcs.n	800e212 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	683a      	ldr	r2, [r7, #0]
 800e232:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	68fa      	ldr	r2, [r7, #12]
 800e238:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	1c5a      	adds	r2, r3, #1
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	601a      	str	r2, [r3, #0]
}
 800e250:	bf00      	nop
 800e252:	3714      	adds	r7, #20
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e25c:	b480      	push	{r7}
 800e25e:	b085      	sub	sp, #20
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	6892      	ldr	r2, [r2, #8]
 800e272:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	6852      	ldr	r2, [r2, #4]
 800e27c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	429a      	cmp	r2, r3
 800e286:	d103      	bne.n	800e290 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	689a      	ldr	r2, [r3, #8]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	1e5a      	subs	r2, r3, #1
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3714      	adds	r7, #20
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10d      	bne.n	800e2e0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c8:	b672      	cpsid	i
 800e2ca:	f383 8811 	msr	BASEPRI, r3
 800e2ce:	f3bf 8f6f 	isb	sy
 800e2d2:	f3bf 8f4f 	dsb	sy
 800e2d6:	b662      	cpsie	i
 800e2d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e2da:	bf00      	nop
 800e2dc:	bf00      	nop
 800e2de:	e7fd      	b.n	800e2dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e2e0:	f002 f9ec 	bl	80106bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2ec:	68f9      	ldr	r1, [r7, #12]
 800e2ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e2f0:	fb01 f303 	mul.w	r3, r1, r3
 800e2f4:	441a      	add	r2, r3
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e310:	3b01      	subs	r3, #1
 800e312:	68f9      	ldr	r1, [r7, #12]
 800e314:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e316:	fb01 f303 	mul.w	r3, r1, r3
 800e31a:	441a      	add	r2, r3
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	22ff      	movs	r2, #255	@ 0xff
 800e324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	22ff      	movs	r2, #255	@ 0xff
 800e32c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d114      	bne.n	800e360 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d01a      	beq.n	800e374 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	3310      	adds	r3, #16
 800e342:	4618      	mov	r0, r3
 800e344:	f001 fc9a 	bl	800fc7c <xTaskRemoveFromEventList>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d012      	beq.n	800e374 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e34e:	4b0d      	ldr	r3, [pc, #52]	@ (800e384 <xQueueGenericReset+0xd4>)
 800e350:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e354:	601a      	str	r2, [r3, #0]
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	f3bf 8f6f 	isb	sy
 800e35e:	e009      	b.n	800e374 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3310      	adds	r3, #16
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff feef 	bl	800e148 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	3324      	adds	r3, #36	@ 0x24
 800e36e:	4618      	mov	r0, r3
 800e370:	f7ff feea 	bl	800e148 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e374:	f002 f9d8 	bl	8010728 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e378:	2301      	movs	r3, #1
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3710      	adds	r7, #16
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}
 800e382:	bf00      	nop
 800e384:	e000ed04 	.word	0xe000ed04

0800e388 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b08e      	sub	sp, #56	@ 0x38
 800e38c:	af02      	add	r7, sp, #8
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
 800e394:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d10d      	bne.n	800e3b8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800e39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a0:	b672      	cpsid	i
 800e3a2:	f383 8811 	msr	BASEPRI, r3
 800e3a6:	f3bf 8f6f 	isb	sy
 800e3aa:	f3bf 8f4f 	dsb	sy
 800e3ae:	b662      	cpsie	i
 800e3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e3b2:	bf00      	nop
 800e3b4:	bf00      	nop
 800e3b6:	e7fd      	b.n	800e3b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d10d      	bne.n	800e3da <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800e3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3c2:	b672      	cpsid	i
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	b662      	cpsie	i
 800e3d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e3d4:	bf00      	nop
 800e3d6:	bf00      	nop
 800e3d8:	e7fd      	b.n	800e3d6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d002      	beq.n	800e3e6 <xQueueGenericCreateStatic+0x5e>
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d001      	beq.n	800e3ea <xQueueGenericCreateStatic+0x62>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	e000      	b.n	800e3ec <xQueueGenericCreateStatic+0x64>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10d      	bne.n	800e40c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f4:	b672      	cpsid	i
 800e3f6:	f383 8811 	msr	BASEPRI, r3
 800e3fa:	f3bf 8f6f 	isb	sy
 800e3fe:	f3bf 8f4f 	dsb	sy
 800e402:	b662      	cpsie	i
 800e404:	623b      	str	r3, [r7, #32]
}
 800e406:	bf00      	nop
 800e408:	bf00      	nop
 800e40a:	e7fd      	b.n	800e408 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d102      	bne.n	800e418 <xQueueGenericCreateStatic+0x90>
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d101      	bne.n	800e41c <xQueueGenericCreateStatic+0x94>
 800e418:	2301      	movs	r3, #1
 800e41a:	e000      	b.n	800e41e <xQueueGenericCreateStatic+0x96>
 800e41c:	2300      	movs	r3, #0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d10d      	bne.n	800e43e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e426:	b672      	cpsid	i
 800e428:	f383 8811 	msr	BASEPRI, r3
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	b662      	cpsie	i
 800e436:	61fb      	str	r3, [r7, #28]
}
 800e438:	bf00      	nop
 800e43a:	bf00      	nop
 800e43c:	e7fd      	b.n	800e43a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e43e:	2348      	movs	r3, #72	@ 0x48
 800e440:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	2b48      	cmp	r3, #72	@ 0x48
 800e446:	d00d      	beq.n	800e464 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44c:	b672      	cpsid	i
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	b662      	cpsie	i
 800e45c:	61bb      	str	r3, [r7, #24]
}
 800e45e:	bf00      	nop
 800e460:	bf00      	nop
 800e462:	e7fd      	b.n	800e460 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e464:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e46a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00d      	beq.n	800e48c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e472:	2201      	movs	r2, #1
 800e474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e478:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e47c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	4613      	mov	r3, r2
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	68b9      	ldr	r1, [r7, #8]
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f000 f848 	bl	800e51c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e48e:	4618      	mov	r0, r3
 800e490:	3730      	adds	r7, #48	@ 0x30
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e496:	b580      	push	{r7, lr}
 800e498:	b08a      	sub	sp, #40	@ 0x28
 800e49a:	af02      	add	r7, sp, #8
 800e49c:	60f8      	str	r0, [r7, #12]
 800e49e:	60b9      	str	r1, [r7, #8]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d10d      	bne.n	800e4c6 <xQueueGenericCreate+0x30>
	__asm volatile
 800e4aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ae:	b672      	cpsid	i
 800e4b0:	f383 8811 	msr	BASEPRI, r3
 800e4b4:	f3bf 8f6f 	isb	sy
 800e4b8:	f3bf 8f4f 	dsb	sy
 800e4bc:	b662      	cpsie	i
 800e4be:	613b      	str	r3, [r7, #16]
}
 800e4c0:	bf00      	nop
 800e4c2:	bf00      	nop
 800e4c4:	e7fd      	b.n	800e4c2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d102      	bne.n	800e4d2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	61fb      	str	r3, [r7, #28]
 800e4d0:	e004      	b.n	800e4dc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	68ba      	ldr	r2, [r7, #8]
 800e4d6:	fb02 f303 	mul.w	r3, r2, r3
 800e4da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	3348      	adds	r3, #72	@ 0x48
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f002 fa19 	bl	8010918 <pvPortMalloc>
 800e4e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e4e8:	69bb      	ldr	r3, [r7, #24]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d011      	beq.n	800e512 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e4ee:	69bb      	ldr	r3, [r7, #24]
 800e4f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	3348      	adds	r3, #72	@ 0x48
 800e4f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e500:	79fa      	ldrb	r2, [r7, #7]
 800e502:	69bb      	ldr	r3, [r7, #24]
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	4613      	mov	r3, r2
 800e508:	697a      	ldr	r2, [r7, #20]
 800e50a:	68b9      	ldr	r1, [r7, #8]
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f000 f805 	bl	800e51c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e512:	69bb      	ldr	r3, [r7, #24]
	}
 800e514:	4618      	mov	r0, r3
 800e516:	3720      	adds	r7, #32
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d103      	bne.n	800e538 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	69ba      	ldr	r2, [r7, #24]
 800e534:	601a      	str	r2, [r3, #0]
 800e536:	e002      	b.n	800e53e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e538:	69bb      	ldr	r3, [r7, #24]
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e54a:	2101      	movs	r1, #1
 800e54c:	69b8      	ldr	r0, [r7, #24]
 800e54e:	f7ff feaf 	bl	800e2b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e552:	bf00      	nop
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}

0800e55a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e55a:	b580      	push	{r7, lr}
 800e55c:	b082      	sub	sp, #8
 800e55e:	af00      	add	r7, sp, #0
 800e560:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00e      	beq.n	800e586 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e57a:	2300      	movs	r3, #0
 800e57c:	2200      	movs	r2, #0
 800e57e:	2100      	movs	r1, #0
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 f837 	bl	800e5f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e586:	bf00      	nop
 800e588:	3708      	adds	r7, #8
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b086      	sub	sp, #24
 800e592:	af00      	add	r7, sp, #0
 800e594:	4603      	mov	r3, r0
 800e596:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e598:	2301      	movs	r3, #1
 800e59a:	617b      	str	r3, [r7, #20]
 800e59c:	2300      	movs	r3, #0
 800e59e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	6939      	ldr	r1, [r7, #16]
 800e5a6:	6978      	ldr	r0, [r7, #20]
 800e5a8:	f7ff ff75 	bl	800e496 <xQueueGenericCreate>
 800e5ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f7ff ffd3 	bl	800e55a <prvInitialiseMutex>

		return xNewQueue;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
	}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3718      	adds	r7, #24
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b088      	sub	sp, #32
 800e5c2:	af02      	add	r7, sp, #8
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	6039      	str	r1, [r7, #0]
 800e5c8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	617b      	str	r3, [r7, #20]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	6939      	ldr	r1, [r7, #16]
 800e5dc:	6978      	ldr	r0, [r7, #20]
 800e5de:	f7ff fed3 	bl	800e388 <xQueueGenericCreateStatic>
 800e5e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f7ff ffb8 	bl	800e55a <prvInitialiseMutex>

		return xNewQueue;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
	}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b08e      	sub	sp, #56	@ 0x38
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	607a      	str	r2, [r7, #4]
 800e600:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e602:	2300      	movs	r3, #0
 800e604:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d10d      	bne.n	800e62c <xQueueGenericSend+0x38>
	__asm volatile
 800e610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e614:	b672      	cpsid	i
 800e616:	f383 8811 	msr	BASEPRI, r3
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	b662      	cpsie	i
 800e624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e626:	bf00      	nop
 800e628:	bf00      	nop
 800e62a:	e7fd      	b.n	800e628 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d103      	bne.n	800e63a <xQueueGenericSend+0x46>
 800e632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e636:	2b00      	cmp	r3, #0
 800e638:	d101      	bne.n	800e63e <xQueueGenericSend+0x4a>
 800e63a:	2301      	movs	r3, #1
 800e63c:	e000      	b.n	800e640 <xQueueGenericSend+0x4c>
 800e63e:	2300      	movs	r3, #0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d10d      	bne.n	800e660 <xQueueGenericSend+0x6c>
	__asm volatile
 800e644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e648:	b672      	cpsid	i
 800e64a:	f383 8811 	msr	BASEPRI, r3
 800e64e:	f3bf 8f6f 	isb	sy
 800e652:	f3bf 8f4f 	dsb	sy
 800e656:	b662      	cpsie	i
 800e658:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e65a:	bf00      	nop
 800e65c:	bf00      	nop
 800e65e:	e7fd      	b.n	800e65c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	2b02      	cmp	r3, #2
 800e664:	d103      	bne.n	800e66e <xQueueGenericSend+0x7a>
 800e666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d101      	bne.n	800e672 <xQueueGenericSend+0x7e>
 800e66e:	2301      	movs	r3, #1
 800e670:	e000      	b.n	800e674 <xQueueGenericSend+0x80>
 800e672:	2300      	movs	r3, #0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d10d      	bne.n	800e694 <xQueueGenericSend+0xa0>
	__asm volatile
 800e678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e67c:	b672      	cpsid	i
 800e67e:	f383 8811 	msr	BASEPRI, r3
 800e682:	f3bf 8f6f 	isb	sy
 800e686:	f3bf 8f4f 	dsb	sy
 800e68a:	b662      	cpsie	i
 800e68c:	623b      	str	r3, [r7, #32]
}
 800e68e:	bf00      	nop
 800e690:	bf00      	nop
 800e692:	e7fd      	b.n	800e690 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e694:	f001 fcc0 	bl	8010018 <xTaskGetSchedulerState>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d102      	bne.n	800e6a4 <xQueueGenericSend+0xb0>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d101      	bne.n	800e6a8 <xQueueGenericSend+0xb4>
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	e000      	b.n	800e6aa <xQueueGenericSend+0xb6>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10d      	bne.n	800e6ca <xQueueGenericSend+0xd6>
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b2:	b672      	cpsid	i
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	b662      	cpsie	i
 800e6c2:	61fb      	str	r3, [r7, #28]
}
 800e6c4:	bf00      	nop
 800e6c6:	bf00      	nop
 800e6c8:	e7fd      	b.n	800e6c6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6ca:	f001 fff7 	bl	80106bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d302      	bcc.n	800e6e0 <xQueueGenericSend+0xec>
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	d129      	bne.n	800e734 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	68b9      	ldr	r1, [r7, #8]
 800e6e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6e6:	f000 fc91 	bl	800f00c <prvCopyDataToQueue>
 800e6ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d010      	beq.n	800e716 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f6:	3324      	adds	r3, #36	@ 0x24
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f001 fabf 	bl	800fc7c <xTaskRemoveFromEventList>
 800e6fe:	4603      	mov	r3, r0
 800e700:	2b00      	cmp	r3, #0
 800e702:	d013      	beq.n	800e72c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e704:	4b3f      	ldr	r3, [pc, #252]	@ (800e804 <xQueueGenericSend+0x210>)
 800e706:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e70a:	601a      	str	r2, [r3, #0]
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	e00a      	b.n	800e72c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d007      	beq.n	800e72c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e71c:	4b39      	ldr	r3, [pc, #228]	@ (800e804 <xQueueGenericSend+0x210>)
 800e71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	f3bf 8f4f 	dsb	sy
 800e728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e72c:	f001 fffc 	bl	8010728 <vPortExitCritical>
				return pdPASS;
 800e730:	2301      	movs	r3, #1
 800e732:	e063      	b.n	800e7fc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d103      	bne.n	800e742 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e73a:	f001 fff5 	bl	8010728 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e73e:	2300      	movs	r3, #0
 800e740:	e05c      	b.n	800e7fc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e744:	2b00      	cmp	r3, #0
 800e746:	d106      	bne.n	800e756 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e748:	f107 0314 	add.w	r3, r7, #20
 800e74c:	4618      	mov	r0, r3
 800e74e:	f001 fafb 	bl	800fd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e752:	2301      	movs	r3, #1
 800e754:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e756:	f001 ffe7 	bl	8010728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e75a:	f001 f875 	bl	800f848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e75e:	f001 ffad 	bl	80106bc <vPortEnterCritical>
 800e762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e764:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e768:	b25b      	sxtb	r3, r3
 800e76a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e76e:	d103      	bne.n	800e778 <xQueueGenericSend+0x184>
 800e770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e772:	2200      	movs	r2, #0
 800e774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e784:	d103      	bne.n	800e78e <xQueueGenericSend+0x19a>
 800e786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e788:	2200      	movs	r2, #0
 800e78a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e78e:	f001 ffcb 	bl	8010728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e792:	1d3a      	adds	r2, r7, #4
 800e794:	f107 0314 	add.w	r3, r7, #20
 800e798:	4611      	mov	r1, r2
 800e79a:	4618      	mov	r0, r3
 800e79c:	f001 faea 	bl	800fd74 <xTaskCheckForTimeOut>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d124      	bne.n	800e7f0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e7a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7a8:	f000 fd28 	bl	800f1fc <prvIsQueueFull>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d018      	beq.n	800e7e4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7b4:	3310      	adds	r3, #16
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	4611      	mov	r1, r2
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f001 fa36 	bl	800fc2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e7c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7c2:	f000 fcb3 	bl	800f12c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e7c6:	f001 f84d 	bl	800f864 <xTaskResumeAll>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	f47f af7c 	bne.w	800e6ca <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e7d2:	4b0c      	ldr	r3, [pc, #48]	@ (800e804 <xQueueGenericSend+0x210>)
 800e7d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	e772      	b.n	800e6ca <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e7e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7e6:	f000 fca1 	bl	800f12c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7ea:	f001 f83b 	bl	800f864 <xTaskResumeAll>
 800e7ee:	e76c      	b.n	800e6ca <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e7f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7f2:	f000 fc9b 	bl	800f12c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7f6:	f001 f835 	bl	800f864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e7fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3738      	adds	r7, #56	@ 0x38
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	e000ed04 	.word	0xe000ed04

0800e808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b08e      	sub	sp, #56	@ 0x38
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	60f8      	str	r0, [r7, #12]
 800e810:	60b9      	str	r1, [r7, #8]
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e81a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10d      	bne.n	800e83c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e824:	b672      	cpsid	i
 800e826:	f383 8811 	msr	BASEPRI, r3
 800e82a:	f3bf 8f6f 	isb	sy
 800e82e:	f3bf 8f4f 	dsb	sy
 800e832:	b662      	cpsie	i
 800e834:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e836:	bf00      	nop
 800e838:	bf00      	nop
 800e83a:	e7fd      	b.n	800e838 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d103      	bne.n	800e84a <xQueueGenericSendFromISR+0x42>
 800e842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e846:	2b00      	cmp	r3, #0
 800e848:	d101      	bne.n	800e84e <xQueueGenericSendFromISR+0x46>
 800e84a:	2301      	movs	r3, #1
 800e84c:	e000      	b.n	800e850 <xQueueGenericSendFromISR+0x48>
 800e84e:	2300      	movs	r3, #0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d10d      	bne.n	800e870 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e858:	b672      	cpsid	i
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	b662      	cpsie	i
 800e868:	623b      	str	r3, [r7, #32]
}
 800e86a:	bf00      	nop
 800e86c:	bf00      	nop
 800e86e:	e7fd      	b.n	800e86c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	2b02      	cmp	r3, #2
 800e874:	d103      	bne.n	800e87e <xQueueGenericSendFromISR+0x76>
 800e876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d101      	bne.n	800e882 <xQueueGenericSendFromISR+0x7a>
 800e87e:	2301      	movs	r3, #1
 800e880:	e000      	b.n	800e884 <xQueueGenericSendFromISR+0x7c>
 800e882:	2300      	movs	r3, #0
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10d      	bne.n	800e8a4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e88c:	b672      	cpsid	i
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	b662      	cpsie	i
 800e89c:	61fb      	str	r3, [r7, #28]
}
 800e89e:	bf00      	nop
 800e8a0:	bf00      	nop
 800e8a2:	e7fd      	b.n	800e8a0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8a4:	f001 fff2 	bl	801088c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e8a8:	f3ef 8211 	mrs	r2, BASEPRI
 800e8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b0:	b672      	cpsid	i
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	b662      	cpsie	i
 800e8c0:	61ba      	str	r2, [r7, #24]
 800e8c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e8c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d302      	bcc.n	800e8da <xQueueGenericSendFromISR+0xd2>
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	2b02      	cmp	r3, #2
 800e8d8:	d12c      	bne.n	800e934 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e8e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e8e4:	683a      	ldr	r2, [r7, #0]
 800e8e6:	68b9      	ldr	r1, [r7, #8]
 800e8e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e8ea:	f000 fb8f 	bl	800f00c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e8ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e8f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e8f6:	d112      	bne.n	800e91e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d016      	beq.n	800e92e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e902:	3324      	adds	r3, #36	@ 0x24
 800e904:	4618      	mov	r0, r3
 800e906:	f001 f9b9 	bl	800fc7c <xTaskRemoveFromEventList>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00e      	beq.n	800e92e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d00b      	beq.n	800e92e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2201      	movs	r2, #1
 800e91a:	601a      	str	r2, [r3, #0]
 800e91c:	e007      	b.n	800e92e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e91e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e922:	3301      	adds	r3, #1
 800e924:	b2db      	uxtb	r3, r3
 800e926:	b25a      	sxtb	r2, r3
 800e928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e92a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e92e:	2301      	movs	r3, #1
 800e930:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e932:	e001      	b.n	800e938 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e934:	2300      	movs	r3, #0
 800e936:	637b      	str	r3, [r7, #52]	@ 0x34
 800e938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e942:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e946:	4618      	mov	r0, r3
 800e948:	3738      	adds	r7, #56	@ 0x38
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b08e      	sub	sp, #56	@ 0x38
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
 800e956:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d10d      	bne.n	800e97e <xQueueGiveFromISR+0x30>
	__asm volatile
 800e962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e966:	b672      	cpsid	i
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	b662      	cpsie	i
 800e976:	623b      	str	r3, [r7, #32]
}
 800e978:	bf00      	nop
 800e97a:	bf00      	nop
 800e97c:	e7fd      	b.n	800e97a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e97e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00d      	beq.n	800e9a2 <xQueueGiveFromISR+0x54>
	__asm volatile
 800e986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e98a:	b672      	cpsid	i
 800e98c:	f383 8811 	msr	BASEPRI, r3
 800e990:	f3bf 8f6f 	isb	sy
 800e994:	f3bf 8f4f 	dsb	sy
 800e998:	b662      	cpsie	i
 800e99a:	61fb      	str	r3, [r7, #28]
}
 800e99c:	bf00      	nop
 800e99e:	bf00      	nop
 800e9a0:	e7fd      	b.n	800e99e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d103      	bne.n	800e9b2 <xQueueGiveFromISR+0x64>
 800e9aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d101      	bne.n	800e9b6 <xQueueGiveFromISR+0x68>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e000      	b.n	800e9b8 <xQueueGiveFromISR+0x6a>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10d      	bne.n	800e9d8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9c0:	b672      	cpsid	i
 800e9c2:	f383 8811 	msr	BASEPRI, r3
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	f3bf 8f4f 	dsb	sy
 800e9ce:	b662      	cpsie	i
 800e9d0:	61bb      	str	r3, [r7, #24]
}
 800e9d2:	bf00      	nop
 800e9d4:	bf00      	nop
 800e9d6:	e7fd      	b.n	800e9d4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e9d8:	f001 ff58 	bl	801088c <vPortValidateInterruptPriority>
	__asm volatile
 800e9dc:	f3ef 8211 	mrs	r2, BASEPRI
 800e9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9e4:	b672      	cpsid	i
 800e9e6:	f383 8811 	msr	BASEPRI, r3
 800e9ea:	f3bf 8f6f 	isb	sy
 800e9ee:	f3bf 8f4f 	dsb	sy
 800e9f2:	b662      	cpsie	i
 800e9f4:	617a      	str	r2, [r7, #20]
 800e9f6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e9f8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea00:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ea02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d22b      	bcs.n	800ea64 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ea12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ea16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea18:	1c5a      	adds	r2, r3, #1
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea1c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ea1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ea22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea26:	d112      	bne.n	800ea4e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d016      	beq.n	800ea5e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea32:	3324      	adds	r3, #36	@ 0x24
 800ea34:	4618      	mov	r0, r3
 800ea36:	f001 f921 	bl	800fc7c <xTaskRemoveFromEventList>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00e      	beq.n	800ea5e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d00b      	beq.n	800ea5e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	601a      	str	r2, [r3, #0]
 800ea4c:	e007      	b.n	800ea5e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ea4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea52:	3301      	adds	r3, #1
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	b25a      	sxtb	r2, r3
 800ea58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea62:	e001      	b.n	800ea68 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ea64:	2300      	movs	r3, #0
 800ea66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f383 8811 	msr	BASEPRI, r3
}
 800ea72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3738      	adds	r7, #56	@ 0x38
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
	...

0800ea80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b08c      	sub	sp, #48	@ 0x30
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d10d      	bne.n	800eab6 <xQueueReceive+0x36>
	__asm volatile
 800ea9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea9e:	b672      	cpsid	i
 800eaa0:	f383 8811 	msr	BASEPRI, r3
 800eaa4:	f3bf 8f6f 	isb	sy
 800eaa8:	f3bf 8f4f 	dsb	sy
 800eaac:	b662      	cpsie	i
 800eaae:	623b      	str	r3, [r7, #32]
}
 800eab0:	bf00      	nop
 800eab2:	bf00      	nop
 800eab4:	e7fd      	b.n	800eab2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d103      	bne.n	800eac4 <xQueueReceive+0x44>
 800eabc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d101      	bne.n	800eac8 <xQueueReceive+0x48>
 800eac4:	2301      	movs	r3, #1
 800eac6:	e000      	b.n	800eaca <xQueueReceive+0x4a>
 800eac8:	2300      	movs	r3, #0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10d      	bne.n	800eaea <xQueueReceive+0x6a>
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead2:	b672      	cpsid	i
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	b662      	cpsie	i
 800eae2:	61fb      	str	r3, [r7, #28]
}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop
 800eae8:	e7fd      	b.n	800eae6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eaea:	f001 fa95 	bl	8010018 <xTaskGetSchedulerState>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d102      	bne.n	800eafa <xQueueReceive+0x7a>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <xQueueReceive+0x7e>
 800eafa:	2301      	movs	r3, #1
 800eafc:	e000      	b.n	800eb00 <xQueueReceive+0x80>
 800eafe:	2300      	movs	r3, #0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10d      	bne.n	800eb20 <xQueueReceive+0xa0>
	__asm volatile
 800eb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb08:	b672      	cpsid	i
 800eb0a:	f383 8811 	msr	BASEPRI, r3
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	f3bf 8f4f 	dsb	sy
 800eb16:	b662      	cpsie	i
 800eb18:	61bb      	str	r3, [r7, #24]
}
 800eb1a:	bf00      	nop
 800eb1c:	bf00      	nop
 800eb1e:	e7fd      	b.n	800eb1c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb20:	f001 fdcc 	bl	80106bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d01f      	beq.n	800eb70 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb30:	68b9      	ldr	r1, [r7, #8]
 800eb32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eb34:	f000 fad4 	bl	800f0e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb3a:	1e5a      	subs	r2, r3, #1
 800eb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d00f      	beq.n	800eb68 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb4a:	3310      	adds	r3, #16
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f001 f895 	bl	800fc7c <xTaskRemoveFromEventList>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d007      	beq.n	800eb68 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb58:	4b3c      	ldr	r3, [pc, #240]	@ (800ec4c <xQueueReceive+0x1cc>)
 800eb5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb5e:	601a      	str	r2, [r3, #0]
 800eb60:	f3bf 8f4f 	dsb	sy
 800eb64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb68:	f001 fdde 	bl	8010728 <vPortExitCritical>
				return pdPASS;
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e069      	b.n	800ec44 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d103      	bne.n	800eb7e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb76:	f001 fdd7 	bl	8010728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	e062      	b.n	800ec44 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d106      	bne.n	800eb92 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb84:	f107 0310 	add.w	r3, r7, #16
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f001 f8dd 	bl	800fd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb92:	f001 fdc9 	bl	8010728 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb96:	f000 fe57 	bl	800f848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb9a:	f001 fd8f 	bl	80106bc <vPortEnterCritical>
 800eb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eba4:	b25b      	sxtb	r3, r3
 800eba6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebaa:	d103      	bne.n	800ebb4 <xQueueReceive+0x134>
 800ebac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ebba:	b25b      	sxtb	r3, r3
 800ebbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebc0:	d103      	bne.n	800ebca <xQueueReceive+0x14a>
 800ebc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebca:	f001 fdad 	bl	8010728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebce:	1d3a      	adds	r2, r7, #4
 800ebd0:	f107 0310 	add.w	r3, r7, #16
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f001 f8cc 	bl	800fd74 <xTaskCheckForTimeOut>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d123      	bne.n	800ec2a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebe4:	f000 faf4 	bl	800f1d0 <prvIsQueueEmpty>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d017      	beq.n	800ec1e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebf0:	3324      	adds	r3, #36	@ 0x24
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f001 f818 	bl	800fc2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ebfe:	f000 fa95 	bl	800f12c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec02:	f000 fe2f 	bl	800f864 <xTaskResumeAll>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d189      	bne.n	800eb20 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800ec0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ec4c <xQueueReceive+0x1cc>)
 800ec0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec12:	601a      	str	r2, [r3, #0]
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	f3bf 8f6f 	isb	sy
 800ec1c:	e780      	b.n	800eb20 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ec1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec20:	f000 fa84 	bl	800f12c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec24:	f000 fe1e 	bl	800f864 <xTaskResumeAll>
 800ec28:	e77a      	b.n	800eb20 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ec2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec2c:	f000 fa7e 	bl	800f12c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec30:	f000 fe18 	bl	800f864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ec36:	f000 facb 	bl	800f1d0 <prvIsQueueEmpty>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f43f af6f 	beq.w	800eb20 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3730      	adds	r7, #48	@ 0x30
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	e000ed04 	.word	0xe000ed04

0800ec50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b08e      	sub	sp, #56	@ 0x38
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ec62:	2300      	movs	r3, #0
 800ec64:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ec66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d10d      	bne.n	800ec88 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ec6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec70:	b672      	cpsid	i
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	b662      	cpsie	i
 800ec80:	623b      	str	r3, [r7, #32]
}
 800ec82:	bf00      	nop
 800ec84:	bf00      	nop
 800ec86:	e7fd      	b.n	800ec84 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d00d      	beq.n	800ecac <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ec90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec94:	b672      	cpsid	i
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	b662      	cpsie	i
 800eca4:	61fb      	str	r3, [r7, #28]
}
 800eca6:	bf00      	nop
 800eca8:	bf00      	nop
 800ecaa:	e7fd      	b.n	800eca8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ecac:	f001 f9b4 	bl	8010018 <xTaskGetSchedulerState>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d102      	bne.n	800ecbc <xQueueSemaphoreTake+0x6c>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d101      	bne.n	800ecc0 <xQueueSemaphoreTake+0x70>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e000      	b.n	800ecc2 <xQueueSemaphoreTake+0x72>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10d      	bne.n	800ece2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800ecc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecca:	b672      	cpsid	i
 800eccc:	f383 8811 	msr	BASEPRI, r3
 800ecd0:	f3bf 8f6f 	isb	sy
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	b662      	cpsie	i
 800ecda:	61bb      	str	r3, [r7, #24]
}
 800ecdc:	bf00      	nop
 800ecde:	bf00      	nop
 800ece0:	e7fd      	b.n	800ecde <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ece2:	f001 fceb 	bl	80106bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ece6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ece8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ecec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d024      	beq.n	800ed3c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ecf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf4:	1e5a      	subs	r2, r3, #1
 800ecf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d104      	bne.n	800ed0c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ed02:	f001 fb53 	bl	80103ac <pvTaskIncrementMutexHeldCount>
 800ed06:	4602      	mov	r2, r0
 800ed08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed0a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed0e:	691b      	ldr	r3, [r3, #16]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d00f      	beq.n	800ed34 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed16:	3310      	adds	r3, #16
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f000 ffaf 	bl	800fc7c <xTaskRemoveFromEventList>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d007      	beq.n	800ed34 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ed24:	4b55      	ldr	r3, [pc, #340]	@ (800ee7c <xQueueSemaphoreTake+0x22c>)
 800ed26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed2a:	601a      	str	r2, [r3, #0]
 800ed2c:	f3bf 8f4f 	dsb	sy
 800ed30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ed34:	f001 fcf8 	bl	8010728 <vPortExitCritical>
				return pdPASS;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e09a      	b.n	800ee72 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d114      	bne.n	800ed6c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ed42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00d      	beq.n	800ed64 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800ed48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed4c:	b672      	cpsid	i
 800ed4e:	f383 8811 	msr	BASEPRI, r3
 800ed52:	f3bf 8f6f 	isb	sy
 800ed56:	f3bf 8f4f 	dsb	sy
 800ed5a:	b662      	cpsie	i
 800ed5c:	617b      	str	r3, [r7, #20]
}
 800ed5e:	bf00      	nop
 800ed60:	bf00      	nop
 800ed62:	e7fd      	b.n	800ed60 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ed64:	f001 fce0 	bl	8010728 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	e082      	b.n	800ee72 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ed6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d106      	bne.n	800ed80 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ed72:	f107 030c 	add.w	r3, r7, #12
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 ffe6 	bl	800fd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ed80:	f001 fcd2 	bl	8010728 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ed84:	f000 fd60 	bl	800f848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ed88:	f001 fc98 	bl	80106bc <vPortEnterCritical>
 800ed8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed92:	b25b      	sxtb	r3, r3
 800ed94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed98:	d103      	bne.n	800eda2 <xQueueSemaphoreTake+0x152>
 800ed9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eda8:	b25b      	sxtb	r3, r3
 800edaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800edae:	d103      	bne.n	800edb8 <xQueueSemaphoreTake+0x168>
 800edb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800edb8:	f001 fcb6 	bl	8010728 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800edbc:	463a      	mov	r2, r7
 800edbe:	f107 030c 	add.w	r3, r7, #12
 800edc2:	4611      	mov	r1, r2
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 ffd5 	bl	800fd74 <xTaskCheckForTimeOut>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d132      	bne.n	800ee36 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800edd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800edd2:	f000 f9fd 	bl	800f1d0 <prvIsQueueEmpty>
 800edd6:	4603      	mov	r3, r0
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d026      	beq.n	800ee2a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d109      	bne.n	800edf8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ede4:	f001 fc6a 	bl	80106bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ede8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edea:	689b      	ldr	r3, [r3, #8]
 800edec:	4618      	mov	r0, r3
 800edee:	f001 f931 	bl	8010054 <xTaskPriorityInherit>
 800edf2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800edf4:	f001 fc98 	bl	8010728 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800edf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edfa:	3324      	adds	r3, #36	@ 0x24
 800edfc:	683a      	ldr	r2, [r7, #0]
 800edfe:	4611      	mov	r1, r2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f000 ff13 	bl	800fc2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ee06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee08:	f000 f990 	bl	800f12c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ee0c:	f000 fd2a 	bl	800f864 <xTaskResumeAll>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f47f af65 	bne.w	800ece2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ee18:	4b18      	ldr	r3, [pc, #96]	@ (800ee7c <xQueueSemaphoreTake+0x22c>)
 800ee1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	f3bf 8f4f 	dsb	sy
 800ee24:	f3bf 8f6f 	isb	sy
 800ee28:	e75b      	b.n	800ece2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ee2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee2c:	f000 f97e 	bl	800f12c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ee30:	f000 fd18 	bl	800f864 <xTaskResumeAll>
 800ee34:	e755      	b.n	800ece2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ee36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee38:	f000 f978 	bl	800f12c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ee3c:	f000 fd12 	bl	800f864 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ee40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee42:	f000 f9c5 	bl	800f1d0 <prvIsQueueEmpty>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f43f af4a 	beq.w	800ece2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ee4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00d      	beq.n	800ee70 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ee54:	f001 fc32 	bl	80106bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ee58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee5a:	f000 f8bf 	bl	800efdc <prvGetDisinheritPriorityAfterTimeout>
 800ee5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ee60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee66:	4618      	mov	r0, r3
 800ee68:	f001 fa00 	bl	801026c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ee6c:	f001 fc5c 	bl	8010728 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ee70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3738      	adds	r7, #56	@ 0x38
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	e000ed04 	.word	0xe000ed04

0800ee80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b08e      	sub	sp, #56	@ 0x38
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ee90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10d      	bne.n	800eeb2 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800ee96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee9a:	b672      	cpsid	i
 800ee9c:	f383 8811 	msr	BASEPRI, r3
 800eea0:	f3bf 8f6f 	isb	sy
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	b662      	cpsie	i
 800eeaa:	623b      	str	r3, [r7, #32]
}
 800eeac:	bf00      	nop
 800eeae:	bf00      	nop
 800eeb0:	e7fd      	b.n	800eeae <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d103      	bne.n	800eec0 <xQueueReceiveFromISR+0x40>
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d101      	bne.n	800eec4 <xQueueReceiveFromISR+0x44>
 800eec0:	2301      	movs	r3, #1
 800eec2:	e000      	b.n	800eec6 <xQueueReceiveFromISR+0x46>
 800eec4:	2300      	movs	r3, #0
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10d      	bne.n	800eee6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800eeca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eece:	b672      	cpsid	i
 800eed0:	f383 8811 	msr	BASEPRI, r3
 800eed4:	f3bf 8f6f 	isb	sy
 800eed8:	f3bf 8f4f 	dsb	sy
 800eedc:	b662      	cpsie	i
 800eede:	61fb      	str	r3, [r7, #28]
}
 800eee0:	bf00      	nop
 800eee2:	bf00      	nop
 800eee4:	e7fd      	b.n	800eee2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eee6:	f001 fcd1 	bl	801088c <vPortValidateInterruptPriority>
	__asm volatile
 800eeea:	f3ef 8211 	mrs	r2, BASEPRI
 800eeee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eef2:	b672      	cpsid	i
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	b662      	cpsie	i
 800ef02:	61ba      	str	r2, [r7, #24]
 800ef04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ef06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef0e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d02f      	beq.n	800ef76 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ef16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef20:	68b9      	ldr	r1, [r7, #8]
 800ef22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ef24:	f000 f8dc 	bl	800f0e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef2a:	1e5a      	subs	r2, r3, #1
 800ef2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ef30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ef34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ef38:	d112      	bne.n	800ef60 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef3c:	691b      	ldr	r3, [r3, #16]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d016      	beq.n	800ef70 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef44:	3310      	adds	r3, #16
 800ef46:	4618      	mov	r0, r3
 800ef48:	f000 fe98 	bl	800fc7c <xTaskRemoveFromEventList>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00e      	beq.n	800ef70 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00b      	beq.n	800ef70 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	601a      	str	r2, [r3, #0]
 800ef5e:	e007      	b.n	800ef70 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ef60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef64:	3301      	adds	r3, #1
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	b25a      	sxtb	r2, r3
 800ef6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ef70:	2301      	movs	r3, #1
 800ef72:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef74:	e001      	b.n	800ef7a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ef76:	2300      	movs	r3, #0
 800ef78:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	f383 8811 	msr	BASEPRI, r3
}
 800ef84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ef86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3738      	adds	r7, #56	@ 0x38
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d10d      	bne.n	800efbe <vQueueDelete+0x2e>
	__asm volatile
 800efa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efa6:	b672      	cpsid	i
 800efa8:	f383 8811 	msr	BASEPRI, r3
 800efac:	f3bf 8f6f 	isb	sy
 800efb0:	f3bf 8f4f 	dsb	sy
 800efb4:	b662      	cpsie	i
 800efb6:	60bb      	str	r3, [r7, #8]
}
 800efb8:	bf00      	nop
 800efba:	bf00      	nop
 800efbc:	e7fd      	b.n	800efba <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f000 f934 	bl	800f22c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d102      	bne.n	800efd4 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f001 fd70 	bl	8010ab4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800efd4:	bf00      	nop
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d006      	beq.n	800effa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f1c3 0307 	rsb	r3, r3, #7
 800eff6:	60fb      	str	r3, [r7, #12]
 800eff8:	e001      	b.n	800effe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800effa:	2300      	movs	r3, #0
 800effc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800effe:	68fb      	ldr	r3, [r7, #12]
	}
 800f000:	4618      	mov	r0, r3
 800f002:	3714      	adds	r7, #20
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f018:	2300      	movs	r3, #0
 800f01a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10d      	bne.n	800f046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d14d      	bne.n	800f0ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	689b      	ldr	r3, [r3, #8]
 800f036:	4618      	mov	r0, r3
 800f038:	f001 f88c 	bl	8010154 <xTaskPriorityDisinherit>
 800f03c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2200      	movs	r2, #0
 800f042:	609a      	str	r2, [r3, #8]
 800f044:	e043      	b.n	800f0ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d119      	bne.n	800f080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	6858      	ldr	r0, [r3, #4]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f054:	461a      	mov	r2, r3
 800f056:	68b9      	ldr	r1, [r7, #8]
 800f058:	f002 f87d 	bl	8011156 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	685a      	ldr	r2, [r3, #4]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f064:	441a      	add	r2, r3
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	685a      	ldr	r2, [r3, #4]
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	689b      	ldr	r3, [r3, #8]
 800f072:	429a      	cmp	r2, r3
 800f074:	d32b      	bcc.n	800f0ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	605a      	str	r2, [r3, #4]
 800f07e:	e026      	b.n	800f0ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	68d8      	ldr	r0, [r3, #12]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f088:	461a      	mov	r2, r3
 800f08a:	68b9      	ldr	r1, [r7, #8]
 800f08c:	f002 f863 	bl	8011156 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	68da      	ldr	r2, [r3, #12]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f098:	425b      	negs	r3, r3
 800f09a:	441a      	add	r2, r3
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	68da      	ldr	r2, [r3, #12]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d207      	bcs.n	800f0bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	689a      	ldr	r2, [r3, #8]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0b4:	425b      	negs	r3, r3
 800f0b6:	441a      	add	r2, r3
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b02      	cmp	r3, #2
 800f0c0:	d105      	bne.n	800f0ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d002      	beq.n	800f0ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	3b01      	subs	r3, #1
 800f0cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	1c5a      	adds	r2, r3, #1
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800f0d6:	697b      	ldr	r3, [r7, #20]
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3718      	adds	r7, #24
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d018      	beq.n	800f124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	68da      	ldr	r2, [r3, #12]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f0fa:	441a      	add	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	68da      	ldr	r2, [r3, #12]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d303      	bcc.n	800f114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681a      	ldr	r2, [r3, #0]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	68d9      	ldr	r1, [r3, #12]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f11c:	461a      	mov	r2, r3
 800f11e:	6838      	ldr	r0, [r7, #0]
 800f120:	f002 f819 	bl	8011156 <memcpy>
	}
}
 800f124:	bf00      	nop
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f134:	f001 fac2 	bl	80106bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f13e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f140:	e011      	b.n	800f166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f146:	2b00      	cmp	r3, #0
 800f148:	d012      	beq.n	800f170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	3324      	adds	r3, #36	@ 0x24
 800f14e:	4618      	mov	r0, r3
 800f150:	f000 fd94 	bl	800fc7c <xTaskRemoveFromEventList>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f15a:	f000 fe73 	bl	800fe44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	3b01      	subs	r3, #1
 800f162:	b2db      	uxtb	r3, r3
 800f164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	dce9      	bgt.n	800f142 <prvUnlockQueue+0x16>
 800f16e:	e000      	b.n	800f172 <prvUnlockQueue+0x46>
					break;
 800f170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	22ff      	movs	r2, #255	@ 0xff
 800f176:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800f17a:	f001 fad5 	bl	8010728 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f17e:	f001 fa9d 	bl	80106bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f18a:	e011      	b.n	800f1b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d012      	beq.n	800f1ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	3310      	adds	r3, #16
 800f198:	4618      	mov	r0, r3
 800f19a:	f000 fd6f 	bl	800fc7c <xTaskRemoveFromEventList>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d001      	beq.n	800f1a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f1a4:	f000 fe4e 	bl	800fe44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f1a8:	7bbb      	ldrb	r3, [r7, #14]
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f1b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	dce9      	bgt.n	800f18c <prvUnlockQueue+0x60>
 800f1b8:	e000      	b.n	800f1bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f1ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	22ff      	movs	r2, #255	@ 0xff
 800f1c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f1c4:	f001 fab0 	bl	8010728 <vPortExitCritical>
}
 800f1c8:	bf00      	nop
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}

0800f1d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f1d8:	f001 fa70 	bl	80106bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d102      	bne.n	800f1ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	60fb      	str	r3, [r7, #12]
 800f1e8:	e001      	b.n	800f1ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f1ee:	f001 fa9b 	bl	8010728 <vPortExitCritical>

	return xReturn;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f204:	f001 fa5a 	bl	80106bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f210:	429a      	cmp	r2, r3
 800f212:	d102      	bne.n	800f21a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f214:	2301      	movs	r3, #1
 800f216:	60fb      	str	r3, [r7, #12]
 800f218:	e001      	b.n	800f21e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f21a:	2300      	movs	r3, #0
 800f21c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f21e:	f001 fa83 	bl	8010728 <vPortExitCritical>

	return xReturn;
 800f222:	68fb      	ldr	r3, [r7, #12]
}
 800f224:	4618      	mov	r0, r3
 800f226:	3710      	adds	r7, #16
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f22c:	b480      	push	{r7}
 800f22e:	b085      	sub	sp, #20
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f234:	2300      	movs	r3, #0
 800f236:	60fb      	str	r3, [r7, #12]
 800f238:	e016      	b.n	800f268 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f23a:	4a10      	ldr	r2, [pc, #64]	@ (800f27c <vQueueUnregisterQueue+0x50>)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	00db      	lsls	r3, r3, #3
 800f240:	4413      	add	r3, r2
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	429a      	cmp	r2, r3
 800f248:	d10b      	bne.n	800f262 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f24a:	4a0c      	ldr	r2, [pc, #48]	@ (800f27c <vQueueUnregisterQueue+0x50>)
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	2100      	movs	r1, #0
 800f250:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f254:	4a09      	ldr	r2, [pc, #36]	@ (800f27c <vQueueUnregisterQueue+0x50>)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	00db      	lsls	r3, r3, #3
 800f25a:	4413      	add	r3, r2
 800f25c:	2200      	movs	r2, #0
 800f25e:	605a      	str	r2, [r3, #4]
				break;
 800f260:	e006      	b.n	800f270 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	3301      	adds	r3, #1
 800f266:	60fb      	str	r3, [r7, #12]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2b07      	cmp	r3, #7
 800f26c:	d9e5      	bls.n	800f23a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f26e:	bf00      	nop
 800f270:	bf00      	nop
 800f272:	3714      	adds	r7, #20
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr
 800f27c:	20001094 	.word	0x20001094

0800f280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f280:	b580      	push	{r7, lr}
 800f282:	b08e      	sub	sp, #56	@ 0x38
 800f284:	af04      	add	r7, sp, #16
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
 800f28c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f290:	2b00      	cmp	r3, #0
 800f292:	d10d      	bne.n	800f2b0 <xTaskCreateStatic+0x30>
	__asm volatile
 800f294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f298:	b672      	cpsid	i
 800f29a:	f383 8811 	msr	BASEPRI, r3
 800f29e:	f3bf 8f6f 	isb	sy
 800f2a2:	f3bf 8f4f 	dsb	sy
 800f2a6:	b662      	cpsie	i
 800f2a8:	623b      	str	r3, [r7, #32]
}
 800f2aa:	bf00      	nop
 800f2ac:	bf00      	nop
 800f2ae:	e7fd      	b.n	800f2ac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10d      	bne.n	800f2d2 <xTaskCreateStatic+0x52>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2ba:	b672      	cpsid	i
 800f2bc:	f383 8811 	msr	BASEPRI, r3
 800f2c0:	f3bf 8f6f 	isb	sy
 800f2c4:	f3bf 8f4f 	dsb	sy
 800f2c8:	b662      	cpsie	i
 800f2ca:	61fb      	str	r3, [r7, #28]
}
 800f2cc:	bf00      	nop
 800f2ce:	bf00      	nop
 800f2d0:	e7fd      	b.n	800f2ce <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f2d2:	23a0      	movs	r3, #160	@ 0xa0
 800f2d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f2d6:	693b      	ldr	r3, [r7, #16]
 800f2d8:	2ba0      	cmp	r3, #160	@ 0xa0
 800f2da:	d00d      	beq.n	800f2f8 <xTaskCreateStatic+0x78>
	__asm volatile
 800f2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2e0:	b672      	cpsid	i
 800f2e2:	f383 8811 	msr	BASEPRI, r3
 800f2e6:	f3bf 8f6f 	isb	sy
 800f2ea:	f3bf 8f4f 	dsb	sy
 800f2ee:	b662      	cpsie	i
 800f2f0:	61bb      	str	r3, [r7, #24]
}
 800f2f2:	bf00      	nop
 800f2f4:	bf00      	nop
 800f2f6:	e7fd      	b.n	800f2f4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f2f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01e      	beq.n	800f33e <xTaskCreateStatic+0xbe>
 800f300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f302:	2b00      	cmp	r3, #0
 800f304:	d01b      	beq.n	800f33e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f308:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f30e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f312:	2202      	movs	r2, #2
 800f314:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f318:	2300      	movs	r3, #0
 800f31a:	9303      	str	r3, [sp, #12]
 800f31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31e:	9302      	str	r3, [sp, #8]
 800f320:	f107 0314 	add.w	r3, r7, #20
 800f324:	9301      	str	r3, [sp, #4]
 800f326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f328:	9300      	str	r3, [sp, #0]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	687a      	ldr	r2, [r7, #4]
 800f32e:	68b9      	ldr	r1, [r7, #8]
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f000 f851 	bl	800f3d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f336:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f338:	f000 f8f0 	bl	800f51c <prvAddNewTaskToReadyList>
 800f33c:	e001      	b.n	800f342 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f33e:	2300      	movs	r3, #0
 800f340:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f342:	697b      	ldr	r3, [r7, #20]
	}
 800f344:	4618      	mov	r0, r3
 800f346:	3728      	adds	r7, #40	@ 0x28
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}

0800f34c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b08c      	sub	sp, #48	@ 0x30
 800f350:	af04      	add	r7, sp, #16
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	603b      	str	r3, [r7, #0]
 800f358:	4613      	mov	r3, r2
 800f35a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f35c:	88fb      	ldrh	r3, [r7, #6]
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4618      	mov	r0, r3
 800f362:	f001 fad9 	bl	8010918 <pvPortMalloc>
 800f366:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d00e      	beq.n	800f38c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f36e:	20a0      	movs	r0, #160	@ 0xa0
 800f370:	f001 fad2 	bl	8010918 <pvPortMalloc>
 800f374:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f376:	69fb      	ldr	r3, [r7, #28]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d003      	beq.n	800f384 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	631a      	str	r2, [r3, #48]	@ 0x30
 800f382:	e005      	b.n	800f390 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f384:	6978      	ldr	r0, [r7, #20]
 800f386:	f001 fb95 	bl	8010ab4 <vPortFree>
 800f38a:	e001      	b.n	800f390 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f38c:	2300      	movs	r3, #0
 800f38e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d017      	beq.n	800f3c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	2200      	movs	r2, #0
 800f39a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f39e:	88fa      	ldrh	r2, [r7, #6]
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	9303      	str	r3, [sp, #12]
 800f3a4:	69fb      	ldr	r3, [r7, #28]
 800f3a6:	9302      	str	r3, [sp, #8]
 800f3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3aa:	9301      	str	r3, [sp, #4]
 800f3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ae:	9300      	str	r3, [sp, #0]
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	68b9      	ldr	r1, [r7, #8]
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f000 f80f 	bl	800f3d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f3ba:	69f8      	ldr	r0, [r7, #28]
 800f3bc:	f000 f8ae 	bl	800f51c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	61bb      	str	r3, [r7, #24]
 800f3c4:	e002      	b.n	800f3cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f3c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f3cc:	69bb      	ldr	r3, [r7, #24]
	}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3720      	adds	r7, #32
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
	...

0800f3d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b088      	sub	sp, #32
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
 800f3e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f3ea:	6879      	ldr	r1, [r7, #4]
 800f3ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f3f0:	440b      	add	r3, r1
 800f3f2:	009b      	lsls	r3, r3, #2
 800f3f4:	4413      	add	r3, r2
 800f3f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	f023 0307 	bic.w	r3, r3, #7
 800f3fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	f003 0307 	and.w	r3, r3, #7
 800f406:	2b00      	cmp	r3, #0
 800f408:	d00d      	beq.n	800f426 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800f40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f40e:	b672      	cpsid	i
 800f410:	f383 8811 	msr	BASEPRI, r3
 800f414:	f3bf 8f6f 	isb	sy
 800f418:	f3bf 8f4f 	dsb	sy
 800f41c:	b662      	cpsie	i
 800f41e:	617b      	str	r3, [r7, #20]
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	e7fd      	b.n	800f422 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d01f      	beq.n	800f46c <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f42c:	2300      	movs	r3, #0
 800f42e:	61fb      	str	r3, [r7, #28]
 800f430:	e012      	b.n	800f458 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f432:	68ba      	ldr	r2, [r7, #8]
 800f434:	69fb      	ldr	r3, [r7, #28]
 800f436:	4413      	add	r3, r2
 800f438:	7819      	ldrb	r1, [r3, #0]
 800f43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	4413      	add	r3, r2
 800f440:	3334      	adds	r3, #52	@ 0x34
 800f442:	460a      	mov	r2, r1
 800f444:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f446:	68ba      	ldr	r2, [r7, #8]
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	4413      	add	r3, r2
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d006      	beq.n	800f460 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	3301      	adds	r3, #1
 800f456:	61fb      	str	r3, [r7, #28]
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	2b0f      	cmp	r3, #15
 800f45c:	d9e9      	bls.n	800f432 <prvInitialiseNewTask+0x5a>
 800f45e:	e000      	b.n	800f462 <prvInitialiseNewTask+0x8a>
			{
				break;
 800f460:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f464:	2200      	movs	r2, #0
 800f466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f46a:	e003      	b.n	800f474 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f476:	2b06      	cmp	r3, #6
 800f478:	d901      	bls.n	800f47e <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f47a:	2306      	movs	r3, #6
 800f47c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f482:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f488:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f48c:	2200      	movs	r2, #0
 800f48e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f492:	3304      	adds	r3, #4
 800f494:	4618      	mov	r0, r3
 800f496:	f7fe fe77 	bl	800e188 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f49c:	3318      	adds	r3, #24
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fe72 	bl	800e188 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ac:	f1c3 0207 	rsb	r2, r3, #7
 800f4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4cc:	334c      	adds	r3, #76	@ 0x4c
 800f4ce:	224c      	movs	r2, #76	@ 0x4c
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f001 fd6d 	bl	8010fb2 <memset>
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4da:	4a0d      	ldr	r2, [pc, #52]	@ (800f510 <prvInitialiseNewTask+0x138>)
 800f4dc:	651a      	str	r2, [r3, #80]	@ 0x50
 800f4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e0:	4a0c      	ldr	r2, [pc, #48]	@ (800f514 <prvInitialiseNewTask+0x13c>)
 800f4e2:	655a      	str	r2, [r3, #84]	@ 0x54
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e6:	4a0c      	ldr	r2, [pc, #48]	@ (800f518 <prvInitialiseNewTask+0x140>)
 800f4e8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	68f9      	ldr	r1, [r7, #12]
 800f4ee:	69b8      	ldr	r0, [r7, #24]
 800f4f0:	f000 ffd6 	bl	80104a0 <pxPortInitialiseStack>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d002      	beq.n	800f506 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f504:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f506:	bf00      	nop
 800f508:	3720      	adds	r7, #32
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	20004e20 	.word	0x20004e20
 800f514:	20004e88 	.word	0x20004e88
 800f518:	20004ef0 	.word	0x20004ef0

0800f51c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f524:	f001 f8ca 	bl	80106bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f528:	4b2a      	ldr	r3, [pc, #168]	@ (800f5d4 <prvAddNewTaskToReadyList+0xb8>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	3301      	adds	r3, #1
 800f52e:	4a29      	ldr	r2, [pc, #164]	@ (800f5d4 <prvAddNewTaskToReadyList+0xb8>)
 800f530:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f532:	4b29      	ldr	r3, [pc, #164]	@ (800f5d8 <prvAddNewTaskToReadyList+0xbc>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d109      	bne.n	800f54e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f53a:	4a27      	ldr	r2, [pc, #156]	@ (800f5d8 <prvAddNewTaskToReadyList+0xbc>)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f540:	4b24      	ldr	r3, [pc, #144]	@ (800f5d4 <prvAddNewTaskToReadyList+0xb8>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d110      	bne.n	800f56a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f548:	f000 fca0 	bl	800fe8c <prvInitialiseTaskLists>
 800f54c:	e00d      	b.n	800f56a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f54e:	4b23      	ldr	r3, [pc, #140]	@ (800f5dc <prvAddNewTaskToReadyList+0xc0>)
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d109      	bne.n	800f56a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f556:	4b20      	ldr	r3, [pc, #128]	@ (800f5d8 <prvAddNewTaskToReadyList+0xbc>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f560:	429a      	cmp	r2, r3
 800f562:	d802      	bhi.n	800f56a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f564:	4a1c      	ldr	r2, [pc, #112]	@ (800f5d8 <prvAddNewTaskToReadyList+0xbc>)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f56a:	4b1d      	ldr	r3, [pc, #116]	@ (800f5e0 <prvAddNewTaskToReadyList+0xc4>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	3301      	adds	r3, #1
 800f570:	4a1b      	ldr	r2, [pc, #108]	@ (800f5e0 <prvAddNewTaskToReadyList+0xc4>)
 800f572:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f578:	2201      	movs	r2, #1
 800f57a:	409a      	lsls	r2, r3
 800f57c:	4b19      	ldr	r3, [pc, #100]	@ (800f5e4 <prvAddNewTaskToReadyList+0xc8>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	4313      	orrs	r3, r2
 800f582:	4a18      	ldr	r2, [pc, #96]	@ (800f5e4 <prvAddNewTaskToReadyList+0xc8>)
 800f584:	6013      	str	r3, [r2, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f58a:	4613      	mov	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	4a15      	ldr	r2, [pc, #84]	@ (800f5e8 <prvAddNewTaskToReadyList+0xcc>)
 800f594:	441a      	add	r2, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	3304      	adds	r3, #4
 800f59a:	4619      	mov	r1, r3
 800f59c:	4610      	mov	r0, r2
 800f59e:	f7fe fe00 	bl	800e1a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f5a2:	f001 f8c1 	bl	8010728 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5dc <prvAddNewTaskToReadyList+0xc0>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00e      	beq.n	800f5cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f5ae:	4b0a      	ldr	r3, [pc, #40]	@ (800f5d8 <prvAddNewTaskToReadyList+0xbc>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d207      	bcs.n	800f5cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f5bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f5ec <prvAddNewTaskToReadyList+0xd0>)
 800f5be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5c2:	601a      	str	r2, [r3, #0]
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f5cc:	bf00      	nop
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	200011d4 	.word	0x200011d4
 800f5d8:	200010d4 	.word	0x200010d4
 800f5dc:	200011e0 	.word	0x200011e0
 800f5e0:	200011f0 	.word	0x200011f0
 800f5e4:	200011dc 	.word	0x200011dc
 800f5e8:	200010d8 	.word	0x200010d8
 800f5ec:	e000ed04 	.word	0xe000ed04

0800f5f0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b08a      	sub	sp, #40	@ 0x28
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d10d      	bne.n	800f620 <vTaskDelayUntil+0x30>
	__asm volatile
 800f604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f608:	b672      	cpsid	i
 800f60a:	f383 8811 	msr	BASEPRI, r3
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	f3bf 8f4f 	dsb	sy
 800f616:	b662      	cpsie	i
 800f618:	617b      	str	r3, [r7, #20]
}
 800f61a:	bf00      	nop
 800f61c:	bf00      	nop
 800f61e:	e7fd      	b.n	800f61c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d10d      	bne.n	800f642 <vTaskDelayUntil+0x52>
	__asm volatile
 800f626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f62a:	b672      	cpsid	i
 800f62c:	f383 8811 	msr	BASEPRI, r3
 800f630:	f3bf 8f6f 	isb	sy
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	b662      	cpsie	i
 800f63a:	613b      	str	r3, [r7, #16]
}
 800f63c:	bf00      	nop
 800f63e:	bf00      	nop
 800f640:	e7fd      	b.n	800f63e <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800f642:	4b2b      	ldr	r3, [pc, #172]	@ (800f6f0 <vTaskDelayUntil+0x100>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00d      	beq.n	800f666 <vTaskDelayUntil+0x76>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64e:	b672      	cpsid	i
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	b662      	cpsie	i
 800f65e:	60fb      	str	r3, [r7, #12]
}
 800f660:	bf00      	nop
 800f662:	bf00      	nop
 800f664:	e7fd      	b.n	800f662 <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 800f666:	f000 f8ef 	bl	800f848 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800f66a:	4b22      	ldr	r3, [pc, #136]	@ (800f6f4 <vTaskDelayUntil+0x104>)
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	683a      	ldr	r2, [r7, #0]
 800f676:	4413      	add	r3, r2
 800f678:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	6a3a      	ldr	r2, [r7, #32]
 800f680:	429a      	cmp	r2, r3
 800f682:	d20b      	bcs.n	800f69c <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	69fa      	ldr	r2, [r7, #28]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d211      	bcs.n	800f6b2 <vTaskDelayUntil+0xc2>
 800f68e:	69fa      	ldr	r2, [r7, #28]
 800f690:	6a3b      	ldr	r3, [r7, #32]
 800f692:	429a      	cmp	r2, r3
 800f694:	d90d      	bls.n	800f6b2 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800f696:	2301      	movs	r3, #1
 800f698:	627b      	str	r3, [r7, #36]	@ 0x24
 800f69a:	e00a      	b.n	800f6b2 <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	69fa      	ldr	r2, [r7, #28]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d303      	bcc.n	800f6ae <vTaskDelayUntil+0xbe>
 800f6a6:	69fa      	ldr	r2, [r7, #28]
 800f6a8:	6a3b      	ldr	r3, [r7, #32]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d901      	bls.n	800f6b2 <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	69fa      	ldr	r2, [r7, #28]
 800f6b6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d006      	beq.n	800f6cc <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800f6be:	69fa      	ldr	r2, [r7, #28]
 800f6c0:	6a3b      	ldr	r3, [r7, #32]
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f000 fe84 	bl	80103d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800f6cc:	f000 f8ca 	bl	800f864 <xTaskResumeAll>
 800f6d0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f6d2:	69bb      	ldr	r3, [r7, #24]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d107      	bne.n	800f6e8 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 800f6d8:	4b07      	ldr	r3, [pc, #28]	@ (800f6f8 <vTaskDelayUntil+0x108>)
 800f6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6de:	601a      	str	r2, [r3, #0]
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f6e8:	bf00      	nop
 800f6ea:	3728      	adds	r7, #40	@ 0x28
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	200011fc 	.word	0x200011fc
 800f6f4:	200011d8 	.word	0x200011d8
 800f6f8:	e000ed04 	.word	0xe000ed04

0800f6fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f704:	2300      	movs	r3, #0
 800f706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d01a      	beq.n	800f744 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f70e:	4b15      	ldr	r3, [pc, #84]	@ (800f764 <vTaskDelay+0x68>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00d      	beq.n	800f732 <vTaskDelay+0x36>
	__asm volatile
 800f716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f71a:	b672      	cpsid	i
 800f71c:	f383 8811 	msr	BASEPRI, r3
 800f720:	f3bf 8f6f 	isb	sy
 800f724:	f3bf 8f4f 	dsb	sy
 800f728:	b662      	cpsie	i
 800f72a:	60bb      	str	r3, [r7, #8]
}
 800f72c:	bf00      	nop
 800f72e:	bf00      	nop
 800f730:	e7fd      	b.n	800f72e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f732:	f000 f889 	bl	800f848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f736:	2100      	movs	r1, #0
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 fe4b 	bl	80103d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f73e:	f000 f891 	bl	800f864 <xTaskResumeAll>
 800f742:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d107      	bne.n	800f75a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f74a:	4b07      	ldr	r3, [pc, #28]	@ (800f768 <vTaskDelay+0x6c>)
 800f74c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f750:	601a      	str	r2, [r3, #0]
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f75a:	bf00      	nop
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	200011fc 	.word	0x200011fc
 800f768:	e000ed04 	.word	0xe000ed04

0800f76c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b08a      	sub	sp, #40	@ 0x28
 800f770:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f772:	2300      	movs	r3, #0
 800f774:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f776:	2300      	movs	r3, #0
 800f778:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f77a:	463a      	mov	r2, r7
 800f77c:	1d39      	adds	r1, r7, #4
 800f77e:	f107 0308 	add.w	r3, r7, #8
 800f782:	4618      	mov	r0, r3
 800f784:	f7f1 fd84 	bl	8001290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f788:	6839      	ldr	r1, [r7, #0]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	9202      	str	r2, [sp, #8]
 800f790:	9301      	str	r3, [sp, #4]
 800f792:	2300      	movs	r3, #0
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	2300      	movs	r3, #0
 800f798:	460a      	mov	r2, r1
 800f79a:	4923      	ldr	r1, [pc, #140]	@ (800f828 <vTaskStartScheduler+0xbc>)
 800f79c:	4823      	ldr	r0, [pc, #140]	@ (800f82c <vTaskStartScheduler+0xc0>)
 800f79e:	f7ff fd6f 	bl	800f280 <xTaskCreateStatic>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	4a22      	ldr	r2, [pc, #136]	@ (800f830 <vTaskStartScheduler+0xc4>)
 800f7a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f7a8:	4b21      	ldr	r3, [pc, #132]	@ (800f830 <vTaskStartScheduler+0xc4>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d002      	beq.n	800f7b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	617b      	str	r3, [r7, #20]
 800f7b4:	e001      	b.n	800f7ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d11d      	bne.n	800f7fc <vTaskStartScheduler+0x90>
	__asm volatile
 800f7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c4:	b672      	cpsid	i
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	b662      	cpsie	i
 800f7d4:	613b      	str	r3, [r7, #16]
}
 800f7d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f7d8:	4b16      	ldr	r3, [pc, #88]	@ (800f834 <vTaskStartScheduler+0xc8>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	334c      	adds	r3, #76	@ 0x4c
 800f7de:	4a16      	ldr	r2, [pc, #88]	@ (800f838 <vTaskStartScheduler+0xcc>)
 800f7e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f7e2:	4b16      	ldr	r3, [pc, #88]	@ (800f83c <vTaskStartScheduler+0xd0>)
 800f7e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f7e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f7ea:	4b15      	ldr	r3, [pc, #84]	@ (800f840 <vTaskStartScheduler+0xd4>)
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f7f0:	4b14      	ldr	r3, [pc, #80]	@ (800f844 <vTaskStartScheduler+0xd8>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f7f6:	f000 fee3 	bl	80105c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f7fa:	e011      	b.n	800f820 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f802:	d10d      	bne.n	800f820 <vTaskStartScheduler+0xb4>
	__asm volatile
 800f804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f808:	b672      	cpsid	i
 800f80a:	f383 8811 	msr	BASEPRI, r3
 800f80e:	f3bf 8f6f 	isb	sy
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	b662      	cpsie	i
 800f818:	60fb      	str	r3, [r7, #12]
}
 800f81a:	bf00      	nop
 800f81c:	bf00      	nop
 800f81e:	e7fd      	b.n	800f81c <vTaskStartScheduler+0xb0>
}
 800f820:	bf00      	nop
 800f822:	3718      	adds	r7, #24
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	080122ec 	.word	0x080122ec
 800f82c:	0800fe5d 	.word	0x0800fe5d
 800f830:	200011f8 	.word	0x200011f8
 800f834:	200010d4 	.word	0x200010d4
 800f838:	20000064 	.word	0x20000064
 800f83c:	200011f4 	.word	0x200011f4
 800f840:	200011e0 	.word	0x200011e0
 800f844:	200011d8 	.word	0x200011d8

0800f848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f848:	b480      	push	{r7}
 800f84a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f84c:	4b04      	ldr	r3, [pc, #16]	@ (800f860 <vTaskSuspendAll+0x18>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	3301      	adds	r3, #1
 800f852:	4a03      	ldr	r2, [pc, #12]	@ (800f860 <vTaskSuspendAll+0x18>)
 800f854:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f856:	bf00      	nop
 800f858:	46bd      	mov	sp, r7
 800f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85e:	4770      	bx	lr
 800f860:	200011fc 	.word	0x200011fc

0800f864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f86a:	2300      	movs	r3, #0
 800f86c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f86e:	2300      	movs	r3, #0
 800f870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f872:	4b43      	ldr	r3, [pc, #268]	@ (800f980 <xTaskResumeAll+0x11c>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10d      	bne.n	800f896 <xTaskResumeAll+0x32>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f87e:	b672      	cpsid	i
 800f880:	f383 8811 	msr	BASEPRI, r3
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	b662      	cpsie	i
 800f88e:	603b      	str	r3, [r7, #0]
}
 800f890:	bf00      	nop
 800f892:	bf00      	nop
 800f894:	e7fd      	b.n	800f892 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f896:	f000 ff11 	bl	80106bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f89a:	4b39      	ldr	r3, [pc, #228]	@ (800f980 <xTaskResumeAll+0x11c>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	3b01      	subs	r3, #1
 800f8a0:	4a37      	ldr	r2, [pc, #220]	@ (800f980 <xTaskResumeAll+0x11c>)
 800f8a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f8a4:	4b36      	ldr	r3, [pc, #216]	@ (800f980 <xTaskResumeAll+0x11c>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d161      	bne.n	800f970 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f8ac:	4b35      	ldr	r3, [pc, #212]	@ (800f984 <xTaskResumeAll+0x120>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d05d      	beq.n	800f970 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f8b4:	e02e      	b.n	800f914 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8b6:	4b34      	ldr	r3, [pc, #208]	@ (800f988 <xTaskResumeAll+0x124>)
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	3318      	adds	r3, #24
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fe fcca 	bl	800e25c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fe fcc5 	bl	800e25c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	409a      	lsls	r2, r3
 800f8da:	4b2c      	ldr	r3, [pc, #176]	@ (800f98c <xTaskResumeAll+0x128>)
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	4a2a      	ldr	r2, [pc, #168]	@ (800f98c <xTaskResumeAll+0x128>)
 800f8e2:	6013      	str	r3, [r2, #0]
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8e8:	4613      	mov	r3, r2
 800f8ea:	009b      	lsls	r3, r3, #2
 800f8ec:	4413      	add	r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4a27      	ldr	r2, [pc, #156]	@ (800f990 <xTaskResumeAll+0x12c>)
 800f8f2:	441a      	add	r2, r3
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	f7fe fc51 	bl	800e1a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f904:	4b23      	ldr	r3, [pc, #140]	@ (800f994 <xTaskResumeAll+0x130>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d302      	bcc.n	800f914 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f90e:	4b22      	ldr	r3, [pc, #136]	@ (800f998 <xTaskResumeAll+0x134>)
 800f910:	2201      	movs	r2, #1
 800f912:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f914:	4b1c      	ldr	r3, [pc, #112]	@ (800f988 <xTaskResumeAll+0x124>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d1cc      	bne.n	800f8b6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d001      	beq.n	800f926 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f922:	f000 fb59 	bl	800ffd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f926:	4b1d      	ldr	r3, [pc, #116]	@ (800f99c <xTaskResumeAll+0x138>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d010      	beq.n	800f954 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f932:	f000 f859 	bl	800f9e8 <xTaskIncrementTick>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d002      	beq.n	800f942 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f93c:	4b16      	ldr	r3, [pc, #88]	@ (800f998 <xTaskResumeAll+0x134>)
 800f93e:	2201      	movs	r2, #1
 800f940:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	3b01      	subs	r3, #1
 800f946:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1f1      	bne.n	800f932 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f94e:	4b13      	ldr	r3, [pc, #76]	@ (800f99c <xTaskResumeAll+0x138>)
 800f950:	2200      	movs	r2, #0
 800f952:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f954:	4b10      	ldr	r3, [pc, #64]	@ (800f998 <xTaskResumeAll+0x134>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d009      	beq.n	800f970 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f95c:	2301      	movs	r3, #1
 800f95e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f960:	4b0f      	ldr	r3, [pc, #60]	@ (800f9a0 <xTaskResumeAll+0x13c>)
 800f962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f966:	601a      	str	r2, [r3, #0]
 800f968:	f3bf 8f4f 	dsb	sy
 800f96c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f970:	f000 feda 	bl	8010728 <vPortExitCritical>

	return xAlreadyYielded;
 800f974:	68bb      	ldr	r3, [r7, #8]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	200011fc 	.word	0x200011fc
 800f984:	200011d4 	.word	0x200011d4
 800f988:	20001194 	.word	0x20001194
 800f98c:	200011dc 	.word	0x200011dc
 800f990:	200010d8 	.word	0x200010d8
 800f994:	200010d4 	.word	0x200010d4
 800f998:	200011e8 	.word	0x200011e8
 800f99c:	200011e4 	.word	0x200011e4
 800f9a0:	e000ed04 	.word	0xe000ed04

0800f9a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f9aa:	4b05      	ldr	r3, [pc, #20]	@ (800f9c0 <xTaskGetTickCount+0x1c>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f9b0:	687b      	ldr	r3, [r7, #4]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	370c      	adds	r7, #12
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr
 800f9be:	bf00      	nop
 800f9c0:	200011d8 	.word	0x200011d8

0800f9c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f9ca:	f000 ff5f 	bl	801088c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f9d2:	4b04      	ldr	r3, [pc, #16]	@ (800f9e4 <xTaskGetTickCountFromISR+0x20>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f9d8:	683b      	ldr	r3, [r7, #0]
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	200011d8 	.word	0x200011d8

0800f9e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b086      	sub	sp, #24
 800f9ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9f2:	4b50      	ldr	r3, [pc, #320]	@ (800fb34 <xTaskIncrementTick+0x14c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f040 808b 	bne.w	800fb12 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f9fc:	4b4e      	ldr	r3, [pc, #312]	@ (800fb38 <xTaskIncrementTick+0x150>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	3301      	adds	r3, #1
 800fa02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fa04:	4a4c      	ldr	r2, [pc, #304]	@ (800fb38 <xTaskIncrementTick+0x150>)
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d123      	bne.n	800fa58 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800fa10:	4b4a      	ldr	r3, [pc, #296]	@ (800fb3c <xTaskIncrementTick+0x154>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00d      	beq.n	800fa36 <xTaskIncrementTick+0x4e>
	__asm volatile
 800fa1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1e:	b672      	cpsid	i
 800fa20:	f383 8811 	msr	BASEPRI, r3
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	b662      	cpsie	i
 800fa2e:	603b      	str	r3, [r7, #0]
}
 800fa30:	bf00      	nop
 800fa32:	bf00      	nop
 800fa34:	e7fd      	b.n	800fa32 <xTaskIncrementTick+0x4a>
 800fa36:	4b41      	ldr	r3, [pc, #260]	@ (800fb3c <xTaskIncrementTick+0x154>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	60fb      	str	r3, [r7, #12]
 800fa3c:	4b40      	ldr	r3, [pc, #256]	@ (800fb40 <xTaskIncrementTick+0x158>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	4a3e      	ldr	r2, [pc, #248]	@ (800fb3c <xTaskIncrementTick+0x154>)
 800fa42:	6013      	str	r3, [r2, #0]
 800fa44:	4a3e      	ldr	r2, [pc, #248]	@ (800fb40 <xTaskIncrementTick+0x158>)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6013      	str	r3, [r2, #0]
 800fa4a:	4b3e      	ldr	r3, [pc, #248]	@ (800fb44 <xTaskIncrementTick+0x15c>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	4a3c      	ldr	r2, [pc, #240]	@ (800fb44 <xTaskIncrementTick+0x15c>)
 800fa52:	6013      	str	r3, [r2, #0]
 800fa54:	f000 fac0 	bl	800ffd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fa58:	4b3b      	ldr	r3, [pc, #236]	@ (800fb48 <xTaskIncrementTick+0x160>)
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	693a      	ldr	r2, [r7, #16]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d348      	bcc.n	800faf4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa62:	4b36      	ldr	r3, [pc, #216]	@ (800fb3c <xTaskIncrementTick+0x154>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d104      	bne.n	800fa76 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa6c:	4b36      	ldr	r3, [pc, #216]	@ (800fb48 <xTaskIncrementTick+0x160>)
 800fa6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa72:	601a      	str	r2, [r3, #0]
					break;
 800fa74:	e03e      	b.n	800faf4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa76:	4b31      	ldr	r3, [pc, #196]	@ (800fb3c <xTaskIncrementTick+0x154>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	685b      	ldr	r3, [r3, #4]
 800fa84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fa86:	693a      	ldr	r2, [r7, #16]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d203      	bcs.n	800fa96 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fa8e:	4a2e      	ldr	r2, [pc, #184]	@ (800fb48 <xTaskIncrementTick+0x160>)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fa94:	e02e      	b.n	800faf4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	3304      	adds	r3, #4
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7fe fbde 	bl	800e25c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d004      	beq.n	800fab2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800faa8:	68bb      	ldr	r3, [r7, #8]
 800faaa:	3318      	adds	r3, #24
 800faac:	4618      	mov	r0, r3
 800faae:	f7fe fbd5 	bl	800e25c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fab6:	2201      	movs	r2, #1
 800fab8:	409a      	lsls	r2, r3
 800faba:	4b24      	ldr	r3, [pc, #144]	@ (800fb4c <xTaskIncrementTick+0x164>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	4313      	orrs	r3, r2
 800fac0:	4a22      	ldr	r2, [pc, #136]	@ (800fb4c <xTaskIncrementTick+0x164>)
 800fac2:	6013      	str	r3, [r2, #0]
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fac8:	4613      	mov	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	4413      	add	r3, r2
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	4a1f      	ldr	r2, [pc, #124]	@ (800fb50 <xTaskIncrementTick+0x168>)
 800fad2:	441a      	add	r2, r3
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	3304      	adds	r3, #4
 800fad8:	4619      	mov	r1, r3
 800fada:	4610      	mov	r0, r2
 800fadc:	f7fe fb61 	bl	800e1a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fae4:	4b1b      	ldr	r3, [pc, #108]	@ (800fb54 <xTaskIncrementTick+0x16c>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faea:	429a      	cmp	r2, r3
 800faec:	d3b9      	bcc.n	800fa62 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800faee:	2301      	movs	r3, #1
 800faf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800faf2:	e7b6      	b.n	800fa62 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800faf4:	4b17      	ldr	r3, [pc, #92]	@ (800fb54 <xTaskIncrementTick+0x16c>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fafa:	4915      	ldr	r1, [pc, #84]	@ (800fb50 <xTaskIncrementTick+0x168>)
 800fafc:	4613      	mov	r3, r2
 800fafe:	009b      	lsls	r3, r3, #2
 800fb00:	4413      	add	r3, r2
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	440b      	add	r3, r1
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d907      	bls.n	800fb1c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	617b      	str	r3, [r7, #20]
 800fb10:	e004      	b.n	800fb1c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fb12:	4b11      	ldr	r3, [pc, #68]	@ (800fb58 <xTaskIncrementTick+0x170>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3301      	adds	r3, #1
 800fb18:	4a0f      	ldr	r2, [pc, #60]	@ (800fb58 <xTaskIncrementTick+0x170>)
 800fb1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fb1c:	4b0f      	ldr	r3, [pc, #60]	@ (800fb5c <xTaskIncrementTick+0x174>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d001      	beq.n	800fb28 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800fb24:	2301      	movs	r3, #1
 800fb26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fb28:	697b      	ldr	r3, [r7, #20]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3718      	adds	r7, #24
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	200011fc 	.word	0x200011fc
 800fb38:	200011d8 	.word	0x200011d8
 800fb3c:	2000118c 	.word	0x2000118c
 800fb40:	20001190 	.word	0x20001190
 800fb44:	200011ec 	.word	0x200011ec
 800fb48:	200011f4 	.word	0x200011f4
 800fb4c:	200011dc 	.word	0x200011dc
 800fb50:	200010d8 	.word	0x200010d8
 800fb54:	200010d4 	.word	0x200010d4
 800fb58:	200011e4 	.word	0x200011e4
 800fb5c:	200011e8 	.word	0x200011e8

0800fb60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fb60:	b480      	push	{r7}
 800fb62:	b087      	sub	sp, #28
 800fb64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fb66:	4b2b      	ldr	r3, [pc, #172]	@ (800fc14 <vTaskSwitchContext+0xb4>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d003      	beq.n	800fb76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fb6e:	4b2a      	ldr	r3, [pc, #168]	@ (800fc18 <vTaskSwitchContext+0xb8>)
 800fb70:	2201      	movs	r2, #1
 800fb72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fb74:	e047      	b.n	800fc06 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800fb76:	4b28      	ldr	r3, [pc, #160]	@ (800fc18 <vTaskSwitchContext+0xb8>)
 800fb78:	2200      	movs	r2, #0
 800fb7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb7c:	4b27      	ldr	r3, [pc, #156]	@ (800fc1c <vTaskSwitchContext+0xbc>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	fab3 f383 	clz	r3, r3
 800fb88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fb8a:	7afb      	ldrb	r3, [r7, #11]
 800fb8c:	f1c3 031f 	rsb	r3, r3, #31
 800fb90:	617b      	str	r3, [r7, #20]
 800fb92:	4923      	ldr	r1, [pc, #140]	@ (800fc20 <vTaskSwitchContext+0xc0>)
 800fb94:	697a      	ldr	r2, [r7, #20]
 800fb96:	4613      	mov	r3, r2
 800fb98:	009b      	lsls	r3, r3, #2
 800fb9a:	4413      	add	r3, r2
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	440b      	add	r3, r1
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d10d      	bne.n	800fbc2 <vTaskSwitchContext+0x62>
	__asm volatile
 800fba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbaa:	b672      	cpsid	i
 800fbac:	f383 8811 	msr	BASEPRI, r3
 800fbb0:	f3bf 8f6f 	isb	sy
 800fbb4:	f3bf 8f4f 	dsb	sy
 800fbb8:	b662      	cpsie	i
 800fbba:	607b      	str	r3, [r7, #4]
}
 800fbbc:	bf00      	nop
 800fbbe:	bf00      	nop
 800fbc0:	e7fd      	b.n	800fbbe <vTaskSwitchContext+0x5e>
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4a14      	ldr	r2, [pc, #80]	@ (800fc20 <vTaskSwitchContext+0xc0>)
 800fbce:	4413      	add	r3, r2
 800fbd0:	613b      	str	r3, [r7, #16]
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	685a      	ldr	r2, [r3, #4]
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	605a      	str	r2, [r3, #4]
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	685a      	ldr	r2, [r3, #4]
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	3308      	adds	r3, #8
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d104      	bne.n	800fbf2 <vTaskSwitchContext+0x92>
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	685a      	ldr	r2, [r3, #4]
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	605a      	str	r2, [r3, #4]
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	68db      	ldr	r3, [r3, #12]
 800fbf8:	4a0a      	ldr	r2, [pc, #40]	@ (800fc24 <vTaskSwitchContext+0xc4>)
 800fbfa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fbfc:	4b09      	ldr	r3, [pc, #36]	@ (800fc24 <vTaskSwitchContext+0xc4>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	334c      	adds	r3, #76	@ 0x4c
 800fc02:	4a09      	ldr	r2, [pc, #36]	@ (800fc28 <vTaskSwitchContext+0xc8>)
 800fc04:	6013      	str	r3, [r2, #0]
}
 800fc06:	bf00      	nop
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
 800fc12:	bf00      	nop
 800fc14:	200011fc 	.word	0x200011fc
 800fc18:	200011e8 	.word	0x200011e8
 800fc1c:	200011dc 	.word	0x200011dc
 800fc20:	200010d8 	.word	0x200010d8
 800fc24:	200010d4 	.word	0x200010d4
 800fc28:	20000064 	.word	0x20000064

0800fc2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
 800fc34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d10d      	bne.n	800fc58 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800fc3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc40:	b672      	cpsid	i
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	b662      	cpsie	i
 800fc50:	60fb      	str	r3, [r7, #12]
}
 800fc52:	bf00      	nop
 800fc54:	bf00      	nop
 800fc56:	e7fd      	b.n	800fc54 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc58:	4b07      	ldr	r3, [pc, #28]	@ (800fc78 <vTaskPlaceOnEventList+0x4c>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3318      	adds	r3, #24
 800fc5e:	4619      	mov	r1, r3
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7fe fac2 	bl	800e1ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fc66:	2101      	movs	r1, #1
 800fc68:	6838      	ldr	r0, [r7, #0]
 800fc6a:	f000 fbb3 	bl	80103d4 <prvAddCurrentTaskToDelayedList>
}
 800fc6e:	bf00      	nop
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	200010d4 	.word	0x200010d4

0800fc7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	68db      	ldr	r3, [r3, #12]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10d      	bne.n	800fcae <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800fc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc96:	b672      	cpsid	i
 800fc98:	f383 8811 	msr	BASEPRI, r3
 800fc9c:	f3bf 8f6f 	isb	sy
 800fca0:	f3bf 8f4f 	dsb	sy
 800fca4:	b662      	cpsie	i
 800fca6:	60fb      	str	r3, [r7, #12]
}
 800fca8:	bf00      	nop
 800fcaa:	bf00      	nop
 800fcac:	e7fd      	b.n	800fcaa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fcae:	693b      	ldr	r3, [r7, #16]
 800fcb0:	3318      	adds	r3, #24
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fe fad2 	bl	800e25c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcb8:	4b1d      	ldr	r3, [pc, #116]	@ (800fd30 <xTaskRemoveFromEventList+0xb4>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d11c      	bne.n	800fcfa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	3304      	adds	r3, #4
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7fe fac9 	bl	800e25c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcce:	2201      	movs	r2, #1
 800fcd0:	409a      	lsls	r2, r3
 800fcd2:	4b18      	ldr	r3, [pc, #96]	@ (800fd34 <xTaskRemoveFromEventList+0xb8>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	4a16      	ldr	r2, [pc, #88]	@ (800fd34 <xTaskRemoveFromEventList+0xb8>)
 800fcda:	6013      	str	r3, [r2, #0]
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fce0:	4613      	mov	r3, r2
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	4413      	add	r3, r2
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	4a13      	ldr	r2, [pc, #76]	@ (800fd38 <xTaskRemoveFromEventList+0xbc>)
 800fcea:	441a      	add	r2, r3
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	3304      	adds	r3, #4
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	4610      	mov	r0, r2
 800fcf4:	f7fe fa55 	bl	800e1a2 <vListInsertEnd>
 800fcf8:	e005      	b.n	800fd06 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	3318      	adds	r3, #24
 800fcfe:	4619      	mov	r1, r3
 800fd00:	480e      	ldr	r0, [pc, #56]	@ (800fd3c <xTaskRemoveFromEventList+0xc0>)
 800fd02:	f7fe fa4e 	bl	800e1a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd40 <xTaskRemoveFromEventList+0xc4>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd10:	429a      	cmp	r2, r3
 800fd12:	d905      	bls.n	800fd20 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fd14:	2301      	movs	r3, #1
 800fd16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fd18:	4b0a      	ldr	r3, [pc, #40]	@ (800fd44 <xTaskRemoveFromEventList+0xc8>)
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	601a      	str	r2, [r3, #0]
 800fd1e:	e001      	b.n	800fd24 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800fd20:	2300      	movs	r3, #0
 800fd22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fd24:	697b      	ldr	r3, [r7, #20]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3718      	adds	r7, #24
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	200011fc 	.word	0x200011fc
 800fd34:	200011dc 	.word	0x200011dc
 800fd38:	200010d8 	.word	0x200010d8
 800fd3c:	20001194 	.word	0x20001194
 800fd40:	200010d4 	.word	0x200010d4
 800fd44:	200011e8 	.word	0x200011e8

0800fd48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd50:	4b06      	ldr	r3, [pc, #24]	@ (800fd6c <vTaskInternalSetTimeOutState+0x24>)
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd58:	4b05      	ldr	r3, [pc, #20]	@ (800fd70 <vTaskInternalSetTimeOutState+0x28>)
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	605a      	str	r2, [r3, #4]
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	200011ec 	.word	0x200011ec
 800fd70:	200011d8 	.word	0x200011d8

0800fd74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b088      	sub	sp, #32
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d10d      	bne.n	800fda0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800fd84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd88:	b672      	cpsid	i
 800fd8a:	f383 8811 	msr	BASEPRI, r3
 800fd8e:	f3bf 8f6f 	isb	sy
 800fd92:	f3bf 8f4f 	dsb	sy
 800fd96:	b662      	cpsie	i
 800fd98:	613b      	str	r3, [r7, #16]
}
 800fd9a:	bf00      	nop
 800fd9c:	bf00      	nop
 800fd9e:	e7fd      	b.n	800fd9c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d10d      	bne.n	800fdc2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800fda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdaa:	b672      	cpsid	i
 800fdac:	f383 8811 	msr	BASEPRI, r3
 800fdb0:	f3bf 8f6f 	isb	sy
 800fdb4:	f3bf 8f4f 	dsb	sy
 800fdb8:	b662      	cpsie	i
 800fdba:	60fb      	str	r3, [r7, #12]
}
 800fdbc:	bf00      	nop
 800fdbe:	bf00      	nop
 800fdc0:	e7fd      	b.n	800fdbe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800fdc2:	f000 fc7b 	bl	80106bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fdc6:	4b1d      	ldr	r3, [pc, #116]	@ (800fe3c <xTaskCheckForTimeOut+0xc8>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	69ba      	ldr	r2, [r7, #24]
 800fdd2:	1ad3      	subs	r3, r2, r3
 800fdd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdde:	d102      	bne.n	800fde6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fde0:	2300      	movs	r3, #0
 800fde2:	61fb      	str	r3, [r7, #28]
 800fde4:	e023      	b.n	800fe2e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	4b15      	ldr	r3, [pc, #84]	@ (800fe40 <xTaskCheckForTimeOut+0xcc>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d007      	beq.n	800fe02 <xTaskCheckForTimeOut+0x8e>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	69ba      	ldr	r2, [r7, #24]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d302      	bcc.n	800fe02 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	61fb      	str	r3, [r7, #28]
 800fe00:	e015      	b.n	800fe2e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	697a      	ldr	r2, [r7, #20]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d20b      	bcs.n	800fe24 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	1ad2      	subs	r2, r2, r3
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f7ff ff95 	bl	800fd48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	61fb      	str	r3, [r7, #28]
 800fe22:	e004      	b.n	800fe2e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2200      	movs	r2, #0
 800fe28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fe2e:	f000 fc7b 	bl	8010728 <vPortExitCritical>

	return xReturn;
 800fe32:	69fb      	ldr	r3, [r7, #28]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3720      	adds	r7, #32
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}
 800fe3c:	200011d8 	.word	0x200011d8
 800fe40:	200011ec 	.word	0x200011ec

0800fe44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe44:	b480      	push	{r7}
 800fe46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe48:	4b03      	ldr	r3, [pc, #12]	@ (800fe58 <vTaskMissedYield+0x14>)
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	601a      	str	r2, [r3, #0]
}
 800fe4e:	bf00      	nop
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr
 800fe58:	200011e8 	.word	0x200011e8

0800fe5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fe64:	f000 f852 	bl	800ff0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fe68:	4b06      	ldr	r3, [pc, #24]	@ (800fe84 <prvIdleTask+0x28>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d9f9      	bls.n	800fe64 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fe70:	4b05      	ldr	r3, [pc, #20]	@ (800fe88 <prvIdleTask+0x2c>)
 800fe72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe76:	601a      	str	r2, [r3, #0]
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fe80:	e7f0      	b.n	800fe64 <prvIdleTask+0x8>
 800fe82:	bf00      	nop
 800fe84:	200010d8 	.word	0x200010d8
 800fe88:	e000ed04 	.word	0xe000ed04

0800fe8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe92:	2300      	movs	r3, #0
 800fe94:	607b      	str	r3, [r7, #4]
 800fe96:	e00c      	b.n	800feb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	4413      	add	r3, r2
 800fea0:	009b      	lsls	r3, r3, #2
 800fea2:	4a12      	ldr	r2, [pc, #72]	@ (800feec <prvInitialiseTaskLists+0x60>)
 800fea4:	4413      	add	r3, r2
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fe f94e 	bl	800e148 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	3301      	adds	r3, #1
 800feb0:	607b      	str	r3, [r7, #4]
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2b06      	cmp	r3, #6
 800feb6:	d9ef      	bls.n	800fe98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800feb8:	480d      	ldr	r0, [pc, #52]	@ (800fef0 <prvInitialiseTaskLists+0x64>)
 800feba:	f7fe f945 	bl	800e148 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800febe:	480d      	ldr	r0, [pc, #52]	@ (800fef4 <prvInitialiseTaskLists+0x68>)
 800fec0:	f7fe f942 	bl	800e148 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fec4:	480c      	ldr	r0, [pc, #48]	@ (800fef8 <prvInitialiseTaskLists+0x6c>)
 800fec6:	f7fe f93f 	bl	800e148 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800feca:	480c      	ldr	r0, [pc, #48]	@ (800fefc <prvInitialiseTaskLists+0x70>)
 800fecc:	f7fe f93c 	bl	800e148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fed0:	480b      	ldr	r0, [pc, #44]	@ (800ff00 <prvInitialiseTaskLists+0x74>)
 800fed2:	f7fe f939 	bl	800e148 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fed6:	4b0b      	ldr	r3, [pc, #44]	@ (800ff04 <prvInitialiseTaskLists+0x78>)
 800fed8:	4a05      	ldr	r2, [pc, #20]	@ (800fef0 <prvInitialiseTaskLists+0x64>)
 800feda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fedc:	4b0a      	ldr	r3, [pc, #40]	@ (800ff08 <prvInitialiseTaskLists+0x7c>)
 800fede:	4a05      	ldr	r2, [pc, #20]	@ (800fef4 <prvInitialiseTaskLists+0x68>)
 800fee0:	601a      	str	r2, [r3, #0]
}
 800fee2:	bf00      	nop
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	200010d8 	.word	0x200010d8
 800fef0:	20001164 	.word	0x20001164
 800fef4:	20001178 	.word	0x20001178
 800fef8:	20001194 	.word	0x20001194
 800fefc:	200011a8 	.word	0x200011a8
 800ff00:	200011c0 	.word	0x200011c0
 800ff04:	2000118c 	.word	0x2000118c
 800ff08:	20001190 	.word	0x20001190

0800ff0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff12:	e019      	b.n	800ff48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ff14:	f000 fbd2 	bl	80106bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff18:	4b10      	ldr	r3, [pc, #64]	@ (800ff5c <prvCheckTasksWaitingTermination+0x50>)
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	3304      	adds	r3, #4
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fe f999 	bl	800e25c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ff2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ff60 <prvCheckTasksWaitingTermination+0x54>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	3b01      	subs	r3, #1
 800ff30:	4a0b      	ldr	r2, [pc, #44]	@ (800ff60 <prvCheckTasksWaitingTermination+0x54>)
 800ff32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ff34:	4b0b      	ldr	r3, [pc, #44]	@ (800ff64 <prvCheckTasksWaitingTermination+0x58>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	4a0a      	ldr	r2, [pc, #40]	@ (800ff64 <prvCheckTasksWaitingTermination+0x58>)
 800ff3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ff3e:	f000 fbf3 	bl	8010728 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f000 f810 	bl	800ff68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff48:	4b06      	ldr	r3, [pc, #24]	@ (800ff64 <prvCheckTasksWaitingTermination+0x58>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1e1      	bne.n	800ff14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff50:	bf00      	nop
 800ff52:	bf00      	nop
 800ff54:	3708      	adds	r7, #8
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	200011a8 	.word	0x200011a8
 800ff60:	200011d4 	.word	0x200011d4
 800ff64:	200011bc 	.word	0x200011bc

0800ff68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	334c      	adds	r3, #76	@ 0x4c
 800ff74:	4618      	mov	r0, r3
 800ff76:	f001 f835 	bl	8010fe4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d108      	bne.n	800ff96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f000 fd93 	bl	8010ab4 <vPortFree>
				vPortFree( pxTCB );
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 fd90 	bl	8010ab4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ff94:	e01b      	b.n	800ffce <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d103      	bne.n	800ffa8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 fd87 	bl	8010ab4 <vPortFree>
	}
 800ffa6:	e012      	b.n	800ffce <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d00d      	beq.n	800ffce <prvDeleteTCB+0x66>
	__asm volatile
 800ffb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffb6:	b672      	cpsid	i
 800ffb8:	f383 8811 	msr	BASEPRI, r3
 800ffbc:	f3bf 8f6f 	isb	sy
 800ffc0:	f3bf 8f4f 	dsb	sy
 800ffc4:	b662      	cpsie	i
 800ffc6:	60fb      	str	r3, [r7, #12]
}
 800ffc8:	bf00      	nop
 800ffca:	bf00      	nop
 800ffcc:	e7fd      	b.n	800ffca <prvDeleteTCB+0x62>
	}
 800ffce:	bf00      	nop
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
	...

0800ffd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffde:	4b0c      	ldr	r3, [pc, #48]	@ (8010010 <prvResetNextTaskUnblockTime+0x38>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d104      	bne.n	800fff2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ffe8:	4b0a      	ldr	r3, [pc, #40]	@ (8010014 <prvResetNextTaskUnblockTime+0x3c>)
 800ffea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fff0:	e008      	b.n	8010004 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fff2:	4b07      	ldr	r3, [pc, #28]	@ (8010010 <prvResetNextTaskUnblockTime+0x38>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	4a04      	ldr	r2, [pc, #16]	@ (8010014 <prvResetNextTaskUnblockTime+0x3c>)
 8010002:	6013      	str	r3, [r2, #0]
}
 8010004:	bf00      	nop
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr
 8010010:	2000118c 	.word	0x2000118c
 8010014:	200011f4 	.word	0x200011f4

08010018 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010018:	b480      	push	{r7}
 801001a:	b083      	sub	sp, #12
 801001c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801001e:	4b0b      	ldr	r3, [pc, #44]	@ (801004c <xTaskGetSchedulerState+0x34>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d102      	bne.n	801002c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010026:	2301      	movs	r3, #1
 8010028:	607b      	str	r3, [r7, #4]
 801002a:	e008      	b.n	801003e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801002c:	4b08      	ldr	r3, [pc, #32]	@ (8010050 <xTaskGetSchedulerState+0x38>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010034:	2302      	movs	r3, #2
 8010036:	607b      	str	r3, [r7, #4]
 8010038:	e001      	b.n	801003e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801003a:	2300      	movs	r3, #0
 801003c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801003e:	687b      	ldr	r3, [r7, #4]
	}
 8010040:	4618      	mov	r0, r3
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr
 801004c:	200011e0 	.word	0x200011e0
 8010050:	200011fc 	.word	0x200011fc

08010054 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010060:	2300      	movs	r3, #0
 8010062:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d069      	beq.n	801013e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801006e:	4b36      	ldr	r3, [pc, #216]	@ (8010148 <xTaskPriorityInherit+0xf4>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010074:	429a      	cmp	r2, r3
 8010076:	d259      	bcs.n	801012c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	699b      	ldr	r3, [r3, #24]
 801007c:	2b00      	cmp	r3, #0
 801007e:	db06      	blt.n	801008e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010080:	4b31      	ldr	r3, [pc, #196]	@ (8010148 <xTaskPriorityInherit+0xf4>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010086:	f1c3 0207 	rsb	r2, r3, #7
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	6959      	ldr	r1, [r3, #20]
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010096:	4613      	mov	r3, r2
 8010098:	009b      	lsls	r3, r3, #2
 801009a:	4413      	add	r3, r2
 801009c:	009b      	lsls	r3, r3, #2
 801009e:	4a2b      	ldr	r2, [pc, #172]	@ (801014c <xTaskPriorityInherit+0xf8>)
 80100a0:	4413      	add	r3, r2
 80100a2:	4299      	cmp	r1, r3
 80100a4:	d13a      	bne.n	801011c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	3304      	adds	r3, #4
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fe f8d6 	bl	800e25c <uxListRemove>
 80100b0:	4603      	mov	r3, r0
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d115      	bne.n	80100e2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100ba:	4924      	ldr	r1, [pc, #144]	@ (801014c <xTaskPriorityInherit+0xf8>)
 80100bc:	4613      	mov	r3, r2
 80100be:	009b      	lsls	r3, r3, #2
 80100c0:	4413      	add	r3, r2
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	440b      	add	r3, r1
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d10a      	bne.n	80100e2 <xTaskPriorityInherit+0x8e>
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100d0:	2201      	movs	r2, #1
 80100d2:	fa02 f303 	lsl.w	r3, r2, r3
 80100d6:	43da      	mvns	r2, r3
 80100d8:	4b1d      	ldr	r3, [pc, #116]	@ (8010150 <xTaskPriorityInherit+0xfc>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4013      	ands	r3, r2
 80100de:	4a1c      	ldr	r2, [pc, #112]	@ (8010150 <xTaskPriorityInherit+0xfc>)
 80100e0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100e2:	4b19      	ldr	r3, [pc, #100]	@ (8010148 <xTaskPriorityInherit+0xf4>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100f0:	2201      	movs	r2, #1
 80100f2:	409a      	lsls	r2, r3
 80100f4:	4b16      	ldr	r3, [pc, #88]	@ (8010150 <xTaskPriorityInherit+0xfc>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	4313      	orrs	r3, r2
 80100fa:	4a15      	ldr	r2, [pc, #84]	@ (8010150 <xTaskPriorityInherit+0xfc>)
 80100fc:	6013      	str	r3, [r2, #0]
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010102:	4613      	mov	r3, r2
 8010104:	009b      	lsls	r3, r3, #2
 8010106:	4413      	add	r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	4a10      	ldr	r2, [pc, #64]	@ (801014c <xTaskPriorityInherit+0xf8>)
 801010c:	441a      	add	r2, r3
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	3304      	adds	r3, #4
 8010112:	4619      	mov	r1, r3
 8010114:	4610      	mov	r0, r2
 8010116:	f7fe f844 	bl	800e1a2 <vListInsertEnd>
 801011a:	e004      	b.n	8010126 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801011c:	4b0a      	ldr	r3, [pc, #40]	@ (8010148 <xTaskPriorityInherit+0xf4>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010126:	2301      	movs	r3, #1
 8010128:	60fb      	str	r3, [r7, #12]
 801012a:	e008      	b.n	801013e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010130:	4b05      	ldr	r3, [pc, #20]	@ (8010148 <xTaskPriorityInherit+0xf4>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010136:	429a      	cmp	r2, r3
 8010138:	d201      	bcs.n	801013e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801013a:	2301      	movs	r3, #1
 801013c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801013e:	68fb      	ldr	r3, [r7, #12]
	}
 8010140:	4618      	mov	r0, r3
 8010142:	3710      	adds	r7, #16
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	200010d4 	.word	0x200010d4
 801014c:	200010d8 	.word	0x200010d8
 8010150:	200011dc 	.word	0x200011dc

08010154 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010154:	b580      	push	{r7, lr}
 8010156:	b086      	sub	sp, #24
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010160:	2300      	movs	r3, #0
 8010162:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d074      	beq.n	8010254 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801016a:	4b3d      	ldr	r3, [pc, #244]	@ (8010260 <xTaskPriorityDisinherit+0x10c>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	693a      	ldr	r2, [r7, #16]
 8010170:	429a      	cmp	r2, r3
 8010172:	d00d      	beq.n	8010190 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8010174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010178:	b672      	cpsid	i
 801017a:	f383 8811 	msr	BASEPRI, r3
 801017e:	f3bf 8f6f 	isb	sy
 8010182:	f3bf 8f4f 	dsb	sy
 8010186:	b662      	cpsie	i
 8010188:	60fb      	str	r3, [r7, #12]
}
 801018a:	bf00      	nop
 801018c:	bf00      	nop
 801018e:	e7fd      	b.n	801018c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010190:	693b      	ldr	r3, [r7, #16]
 8010192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010194:	2b00      	cmp	r3, #0
 8010196:	d10d      	bne.n	80101b4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8010198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019c:	b672      	cpsid	i
 801019e:	f383 8811 	msr	BASEPRI, r3
 80101a2:	f3bf 8f6f 	isb	sy
 80101a6:	f3bf 8f4f 	dsb	sy
 80101aa:	b662      	cpsie	i
 80101ac:	60bb      	str	r3, [r7, #8]
}
 80101ae:	bf00      	nop
 80101b0:	bf00      	nop
 80101b2:	e7fd      	b.n	80101b0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101b8:	1e5a      	subs	r2, r3, #1
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d044      	beq.n	8010254 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d140      	bne.n	8010254 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101d2:	693b      	ldr	r3, [r7, #16]
 80101d4:	3304      	adds	r3, #4
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fe f840 	bl	800e25c <uxListRemove>
 80101dc:	4603      	mov	r3, r0
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d115      	bne.n	801020e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101e6:	491f      	ldr	r1, [pc, #124]	@ (8010264 <xTaskPriorityDisinherit+0x110>)
 80101e8:	4613      	mov	r3, r2
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4413      	add	r3, r2
 80101ee:	009b      	lsls	r3, r3, #2
 80101f0:	440b      	add	r3, r1
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d10a      	bne.n	801020e <xTaskPriorityDisinherit+0xba>
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101fc:	2201      	movs	r2, #1
 80101fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010202:	43da      	mvns	r2, r3
 8010204:	4b18      	ldr	r3, [pc, #96]	@ (8010268 <xTaskPriorityDisinherit+0x114>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4013      	ands	r3, r2
 801020a:	4a17      	ldr	r2, [pc, #92]	@ (8010268 <xTaskPriorityDisinherit+0x114>)
 801020c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801021a:	f1c3 0207 	rsb	r2, r3, #7
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010226:	2201      	movs	r2, #1
 8010228:	409a      	lsls	r2, r3
 801022a:	4b0f      	ldr	r3, [pc, #60]	@ (8010268 <xTaskPriorityDisinherit+0x114>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4313      	orrs	r3, r2
 8010230:	4a0d      	ldr	r2, [pc, #52]	@ (8010268 <xTaskPriorityDisinherit+0x114>)
 8010232:	6013      	str	r3, [r2, #0]
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010238:	4613      	mov	r3, r2
 801023a:	009b      	lsls	r3, r3, #2
 801023c:	4413      	add	r3, r2
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	4a08      	ldr	r2, [pc, #32]	@ (8010264 <xTaskPriorityDisinherit+0x110>)
 8010242:	441a      	add	r2, r3
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	3304      	adds	r3, #4
 8010248:	4619      	mov	r1, r3
 801024a:	4610      	mov	r0, r2
 801024c:	f7fd ffa9 	bl	800e1a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010250:	2301      	movs	r3, #1
 8010252:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010254:	697b      	ldr	r3, [r7, #20]
	}
 8010256:	4618      	mov	r0, r3
 8010258:	3718      	adds	r7, #24
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	200010d4 	.word	0x200010d4
 8010264:	200010d8 	.word	0x200010d8
 8010268:	200011dc 	.word	0x200011dc

0801026c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801026c:	b580      	push	{r7, lr}
 801026e:	b088      	sub	sp, #32
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801027a:	2301      	movs	r3, #1
 801027c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2b00      	cmp	r3, #0
 8010282:	f000 8089 	beq.w	8010398 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801028a:	2b00      	cmp	r3, #0
 801028c:	d10d      	bne.n	80102aa <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010292:	b672      	cpsid	i
 8010294:	f383 8811 	msr	BASEPRI, r3
 8010298:	f3bf 8f6f 	isb	sy
 801029c:	f3bf 8f4f 	dsb	sy
 80102a0:	b662      	cpsie	i
 80102a2:	60fb      	str	r3, [r7, #12]
}
 80102a4:	bf00      	nop
 80102a6:	bf00      	nop
 80102a8:	e7fd      	b.n	80102a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80102aa:	69bb      	ldr	r3, [r7, #24]
 80102ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102ae:	683a      	ldr	r2, [r7, #0]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d902      	bls.n	80102ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	61fb      	str	r3, [r7, #28]
 80102b8:	e002      	b.n	80102c0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80102be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80102c0:	69bb      	ldr	r3, [r7, #24]
 80102c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102c4:	69fa      	ldr	r2, [r7, #28]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d066      	beq.n	8010398 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80102ce:	697a      	ldr	r2, [r7, #20]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d161      	bne.n	8010398 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80102d4:	4b32      	ldr	r3, [pc, #200]	@ (80103a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	69ba      	ldr	r2, [r7, #24]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d10d      	bne.n	80102fa <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80102de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e2:	b672      	cpsid	i
 80102e4:	f383 8811 	msr	BASEPRI, r3
 80102e8:	f3bf 8f6f 	isb	sy
 80102ec:	f3bf 8f4f 	dsb	sy
 80102f0:	b662      	cpsie	i
 80102f2:	60bb      	str	r3, [r7, #8]
}
 80102f4:	bf00      	nop
 80102f6:	bf00      	nop
 80102f8:	e7fd      	b.n	80102f6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	69fa      	ldr	r2, [r7, #28]
 8010304:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	699b      	ldr	r3, [r3, #24]
 801030a:	2b00      	cmp	r3, #0
 801030c:	db04      	blt.n	8010318 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	f1c3 0207 	rsb	r2, r3, #7
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	6959      	ldr	r1, [r3, #20]
 801031c:	693a      	ldr	r2, [r7, #16]
 801031e:	4613      	mov	r3, r2
 8010320:	009b      	lsls	r3, r3, #2
 8010322:	4413      	add	r3, r2
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	4a1f      	ldr	r2, [pc, #124]	@ (80103a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010328:	4413      	add	r3, r2
 801032a:	4299      	cmp	r1, r3
 801032c:	d134      	bne.n	8010398 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	3304      	adds	r3, #4
 8010332:	4618      	mov	r0, r3
 8010334:	f7fd ff92 	bl	800e25c <uxListRemove>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d115      	bne.n	801036a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801033e:	69bb      	ldr	r3, [r7, #24]
 8010340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010342:	4918      	ldr	r1, [pc, #96]	@ (80103a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010344:	4613      	mov	r3, r2
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4413      	add	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	440b      	add	r3, r1
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d10a      	bne.n	801036a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010358:	2201      	movs	r2, #1
 801035a:	fa02 f303 	lsl.w	r3, r2, r3
 801035e:	43da      	mvns	r2, r3
 8010360:	4b11      	ldr	r3, [pc, #68]	@ (80103a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4013      	ands	r3, r2
 8010366:	4a10      	ldr	r2, [pc, #64]	@ (80103a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010368:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801036a:	69bb      	ldr	r3, [r7, #24]
 801036c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801036e:	2201      	movs	r2, #1
 8010370:	409a      	lsls	r2, r3
 8010372:	4b0d      	ldr	r3, [pc, #52]	@ (80103a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4313      	orrs	r3, r2
 8010378:	4a0b      	ldr	r2, [pc, #44]	@ (80103a8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801037a:	6013      	str	r3, [r2, #0]
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010380:	4613      	mov	r3, r2
 8010382:	009b      	lsls	r3, r3, #2
 8010384:	4413      	add	r3, r2
 8010386:	009b      	lsls	r3, r3, #2
 8010388:	4a06      	ldr	r2, [pc, #24]	@ (80103a4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801038a:	441a      	add	r2, r3
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	3304      	adds	r3, #4
 8010390:	4619      	mov	r1, r3
 8010392:	4610      	mov	r0, r2
 8010394:	f7fd ff05 	bl	800e1a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010398:	bf00      	nop
 801039a:	3720      	adds	r7, #32
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}
 80103a0:	200010d4 	.word	0x200010d4
 80103a4:	200010d8 	.word	0x200010d8
 80103a8:	200011dc 	.word	0x200011dc

080103ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80103ac:	b480      	push	{r7}
 80103ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80103b0:	4b07      	ldr	r3, [pc, #28]	@ (80103d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d004      	beq.n	80103c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80103b8:	4b05      	ldr	r3, [pc, #20]	@ (80103d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80103be:	3201      	adds	r2, #1
 80103c0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80103c2:	4b03      	ldr	r3, [pc, #12]	@ (80103d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80103c4:	681b      	ldr	r3, [r3, #0]
	}
 80103c6:	4618      	mov	r0, r3
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr
 80103d0:	200010d4 	.word	0x200010d4

080103d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80103de:	4b29      	ldr	r3, [pc, #164]	@ (8010484 <prvAddCurrentTaskToDelayedList+0xb0>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103e4:	4b28      	ldr	r3, [pc, #160]	@ (8010488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3304      	adds	r3, #4
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fd ff36 	bl	800e25c <uxListRemove>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d10b      	bne.n	801040e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80103f6:	4b24      	ldr	r3, [pc, #144]	@ (8010488 <prvAddCurrentTaskToDelayedList+0xb4>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80103fc:	2201      	movs	r2, #1
 80103fe:	fa02 f303 	lsl.w	r3, r2, r3
 8010402:	43da      	mvns	r2, r3
 8010404:	4b21      	ldr	r3, [pc, #132]	@ (801048c <prvAddCurrentTaskToDelayedList+0xb8>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	4013      	ands	r3, r2
 801040a:	4a20      	ldr	r2, [pc, #128]	@ (801048c <prvAddCurrentTaskToDelayedList+0xb8>)
 801040c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010414:	d10a      	bne.n	801042c <prvAddCurrentTaskToDelayedList+0x58>
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d007      	beq.n	801042c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801041c:	4b1a      	ldr	r3, [pc, #104]	@ (8010488 <prvAddCurrentTaskToDelayedList+0xb4>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	3304      	adds	r3, #4
 8010422:	4619      	mov	r1, r3
 8010424:	481a      	ldr	r0, [pc, #104]	@ (8010490 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010426:	f7fd febc 	bl	800e1a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801042a:	e026      	b.n	801047a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801042c:	68fa      	ldr	r2, [r7, #12]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4413      	add	r3, r2
 8010432:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010434:	4b14      	ldr	r3, [pc, #80]	@ (8010488 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	68ba      	ldr	r2, [r7, #8]
 801043a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801043c:	68ba      	ldr	r2, [r7, #8]
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	429a      	cmp	r2, r3
 8010442:	d209      	bcs.n	8010458 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010444:	4b13      	ldr	r3, [pc, #76]	@ (8010494 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	4b0f      	ldr	r3, [pc, #60]	@ (8010488 <prvAddCurrentTaskToDelayedList+0xb4>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	3304      	adds	r3, #4
 801044e:	4619      	mov	r1, r3
 8010450:	4610      	mov	r0, r2
 8010452:	f7fd feca 	bl	800e1ea <vListInsert>
}
 8010456:	e010      	b.n	801047a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010458:	4b0f      	ldr	r3, [pc, #60]	@ (8010498 <prvAddCurrentTaskToDelayedList+0xc4>)
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	4b0a      	ldr	r3, [pc, #40]	@ (8010488 <prvAddCurrentTaskToDelayedList+0xb4>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	3304      	adds	r3, #4
 8010462:	4619      	mov	r1, r3
 8010464:	4610      	mov	r0, r2
 8010466:	f7fd fec0 	bl	800e1ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801046a:	4b0c      	ldr	r3, [pc, #48]	@ (801049c <prvAddCurrentTaskToDelayedList+0xc8>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	68ba      	ldr	r2, [r7, #8]
 8010470:	429a      	cmp	r2, r3
 8010472:	d202      	bcs.n	801047a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010474:	4a09      	ldr	r2, [pc, #36]	@ (801049c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	6013      	str	r3, [r2, #0]
}
 801047a:	bf00      	nop
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	200011d8 	.word	0x200011d8
 8010488:	200010d4 	.word	0x200010d4
 801048c:	200011dc 	.word	0x200011dc
 8010490:	200011c0 	.word	0x200011c0
 8010494:	20001190 	.word	0x20001190
 8010498:	2000118c 	.word	0x2000118c
 801049c:	200011f4 	.word	0x200011f4

080104a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80104a0:	b480      	push	{r7}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	3b04      	subs	r3, #4
 80104b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80104b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	3b04      	subs	r3, #4
 80104be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	f023 0201 	bic.w	r2, r3, #1
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	3b04      	subs	r3, #4
 80104ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80104d0:	4a0c      	ldr	r2, [pc, #48]	@ (8010504 <pxPortInitialiseStack+0x64>)
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	3b14      	subs	r3, #20
 80104da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	3b04      	subs	r3, #4
 80104e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	f06f 0202 	mvn.w	r2, #2
 80104ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	3b20      	subs	r3, #32
 80104f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80104f6:	68fb      	ldr	r3, [r7, #12]
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3714      	adds	r7, #20
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr
 8010504:	08010509 	.word	0x08010509

08010508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010508:	b480      	push	{r7}
 801050a:	b085      	sub	sp, #20
 801050c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801050e:	2300      	movs	r3, #0
 8010510:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010512:	4b15      	ldr	r3, [pc, #84]	@ (8010568 <prvTaskExitError+0x60>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801051a:	d00d      	beq.n	8010538 <prvTaskExitError+0x30>
	__asm volatile
 801051c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010520:	b672      	cpsid	i
 8010522:	f383 8811 	msr	BASEPRI, r3
 8010526:	f3bf 8f6f 	isb	sy
 801052a:	f3bf 8f4f 	dsb	sy
 801052e:	b662      	cpsie	i
 8010530:	60fb      	str	r3, [r7, #12]
}
 8010532:	bf00      	nop
 8010534:	bf00      	nop
 8010536:	e7fd      	b.n	8010534 <prvTaskExitError+0x2c>
	__asm volatile
 8010538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801053c:	b672      	cpsid	i
 801053e:	f383 8811 	msr	BASEPRI, r3
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	b662      	cpsie	i
 801054c:	60bb      	str	r3, [r7, #8]
}
 801054e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010550:	bf00      	nop
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d0fc      	beq.n	8010552 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010558:	bf00      	nop
 801055a:	bf00      	nop
 801055c:	3714      	adds	r7, #20
 801055e:	46bd      	mov	sp, r7
 8010560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010564:	4770      	bx	lr
 8010566:	bf00      	nop
 8010568:	20000054 	.word	0x20000054
 801056c:	00000000 	.word	0x00000000

08010570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010570:	4b07      	ldr	r3, [pc, #28]	@ (8010590 <pxCurrentTCBConst2>)
 8010572:	6819      	ldr	r1, [r3, #0]
 8010574:	6808      	ldr	r0, [r1, #0]
 8010576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801057a:	f380 8809 	msr	PSP, r0
 801057e:	f3bf 8f6f 	isb	sy
 8010582:	f04f 0000 	mov.w	r0, #0
 8010586:	f380 8811 	msr	BASEPRI, r0
 801058a:	4770      	bx	lr
 801058c:	f3af 8000 	nop.w

08010590 <pxCurrentTCBConst2>:
 8010590:	200010d4 	.word	0x200010d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010594:	bf00      	nop
 8010596:	bf00      	nop

08010598 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010598:	4808      	ldr	r0, [pc, #32]	@ (80105bc <prvPortStartFirstTask+0x24>)
 801059a:	6800      	ldr	r0, [r0, #0]
 801059c:	6800      	ldr	r0, [r0, #0]
 801059e:	f380 8808 	msr	MSP, r0
 80105a2:	f04f 0000 	mov.w	r0, #0
 80105a6:	f380 8814 	msr	CONTROL, r0
 80105aa:	b662      	cpsie	i
 80105ac:	b661      	cpsie	f
 80105ae:	f3bf 8f4f 	dsb	sy
 80105b2:	f3bf 8f6f 	isb	sy
 80105b6:	df00      	svc	0
 80105b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80105ba:	bf00      	nop
 80105bc:	e000ed08 	.word	0xe000ed08

080105c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105c0:	b580      	push	{r7, lr}
 80105c2:	b084      	sub	sp, #16
 80105c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80105c6:	4b37      	ldr	r3, [pc, #220]	@ (80106a4 <xPortStartScheduler+0xe4>)
 80105c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	22ff      	movs	r2, #255	@ 0xff
 80105d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80105e0:	78fb      	ldrb	r3, [r7, #3]
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80105e8:	b2da      	uxtb	r2, r3
 80105ea:	4b2f      	ldr	r3, [pc, #188]	@ (80106a8 <xPortStartScheduler+0xe8>)
 80105ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80105ee:	4b2f      	ldr	r3, [pc, #188]	@ (80106ac <xPortStartScheduler+0xec>)
 80105f0:	2207      	movs	r2, #7
 80105f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80105f4:	e009      	b.n	801060a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80105f6:	4b2d      	ldr	r3, [pc, #180]	@ (80106ac <xPortStartScheduler+0xec>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	3b01      	subs	r3, #1
 80105fc:	4a2b      	ldr	r2, [pc, #172]	@ (80106ac <xPortStartScheduler+0xec>)
 80105fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010600:	78fb      	ldrb	r3, [r7, #3]
 8010602:	b2db      	uxtb	r3, r3
 8010604:	005b      	lsls	r3, r3, #1
 8010606:	b2db      	uxtb	r3, r3
 8010608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801060a:	78fb      	ldrb	r3, [r7, #3]
 801060c:	b2db      	uxtb	r3, r3
 801060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010612:	2b80      	cmp	r3, #128	@ 0x80
 8010614:	d0ef      	beq.n	80105f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010616:	4b25      	ldr	r3, [pc, #148]	@ (80106ac <xPortStartScheduler+0xec>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f1c3 0307 	rsb	r3, r3, #7
 801061e:	2b04      	cmp	r3, #4
 8010620:	d00d      	beq.n	801063e <xPortStartScheduler+0x7e>
	__asm volatile
 8010622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010626:	b672      	cpsid	i
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	b662      	cpsie	i
 8010636:	60bb      	str	r3, [r7, #8]
}
 8010638:	bf00      	nop
 801063a:	bf00      	nop
 801063c:	e7fd      	b.n	801063a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801063e:	4b1b      	ldr	r3, [pc, #108]	@ (80106ac <xPortStartScheduler+0xec>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	021b      	lsls	r3, r3, #8
 8010644:	4a19      	ldr	r2, [pc, #100]	@ (80106ac <xPortStartScheduler+0xec>)
 8010646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010648:	4b18      	ldr	r3, [pc, #96]	@ (80106ac <xPortStartScheduler+0xec>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010650:	4a16      	ldr	r2, [pc, #88]	@ (80106ac <xPortStartScheduler+0xec>)
 8010652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	b2da      	uxtb	r2, r3
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801065c:	4b14      	ldr	r3, [pc, #80]	@ (80106b0 <xPortStartScheduler+0xf0>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	4a13      	ldr	r2, [pc, #76]	@ (80106b0 <xPortStartScheduler+0xf0>)
 8010662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010668:	4b11      	ldr	r3, [pc, #68]	@ (80106b0 <xPortStartScheduler+0xf0>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4a10      	ldr	r2, [pc, #64]	@ (80106b0 <xPortStartScheduler+0xf0>)
 801066e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010674:	f000 f8dc 	bl	8010830 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010678:	4b0e      	ldr	r3, [pc, #56]	@ (80106b4 <xPortStartScheduler+0xf4>)
 801067a:	2200      	movs	r2, #0
 801067c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801067e:	f000 f8fb 	bl	8010878 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010682:	4b0d      	ldr	r3, [pc, #52]	@ (80106b8 <xPortStartScheduler+0xf8>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4a0c      	ldr	r2, [pc, #48]	@ (80106b8 <xPortStartScheduler+0xf8>)
 8010688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801068c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801068e:	f7ff ff83 	bl	8010598 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010692:	f7ff fa65 	bl	800fb60 <vTaskSwitchContext>
	prvTaskExitError();
 8010696:	f7ff ff37 	bl	8010508 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3710      	adds	r7, #16
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}
 80106a4:	e000e400 	.word	0xe000e400
 80106a8:	20001200 	.word	0x20001200
 80106ac:	20001204 	.word	0x20001204
 80106b0:	e000ed20 	.word	0xe000ed20
 80106b4:	20000054 	.word	0x20000054
 80106b8:	e000ef34 	.word	0xe000ef34

080106bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106c6:	b672      	cpsid	i
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	b662      	cpsie	i
 80106d6:	607b      	str	r3, [r7, #4]
}
 80106d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80106da:	4b11      	ldr	r3, [pc, #68]	@ (8010720 <vPortEnterCritical+0x64>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	3301      	adds	r3, #1
 80106e0:	4a0f      	ldr	r2, [pc, #60]	@ (8010720 <vPortEnterCritical+0x64>)
 80106e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80106e4:	4b0e      	ldr	r3, [pc, #56]	@ (8010720 <vPortEnterCritical+0x64>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d112      	bne.n	8010712 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80106ec:	4b0d      	ldr	r3, [pc, #52]	@ (8010724 <vPortEnterCritical+0x68>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d00d      	beq.n	8010712 <vPortEnterCritical+0x56>
	__asm volatile
 80106f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106fa:	b672      	cpsid	i
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	b662      	cpsie	i
 801070a:	603b      	str	r3, [r7, #0]
}
 801070c:	bf00      	nop
 801070e:	bf00      	nop
 8010710:	e7fd      	b.n	801070e <vPortEnterCritical+0x52>
	}
}
 8010712:	bf00      	nop
 8010714:	370c      	adds	r7, #12
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop
 8010720:	20000054 	.word	0x20000054
 8010724:	e000ed04 	.word	0xe000ed04

08010728 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801072e:	4b13      	ldr	r3, [pc, #76]	@ (801077c <vPortExitCritical+0x54>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d10d      	bne.n	8010752 <vPortExitCritical+0x2a>
	__asm volatile
 8010736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801073a:	b672      	cpsid	i
 801073c:	f383 8811 	msr	BASEPRI, r3
 8010740:	f3bf 8f6f 	isb	sy
 8010744:	f3bf 8f4f 	dsb	sy
 8010748:	b662      	cpsie	i
 801074a:	607b      	str	r3, [r7, #4]
}
 801074c:	bf00      	nop
 801074e:	bf00      	nop
 8010750:	e7fd      	b.n	801074e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010752:	4b0a      	ldr	r3, [pc, #40]	@ (801077c <vPortExitCritical+0x54>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	3b01      	subs	r3, #1
 8010758:	4a08      	ldr	r2, [pc, #32]	@ (801077c <vPortExitCritical+0x54>)
 801075a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801075c:	4b07      	ldr	r3, [pc, #28]	@ (801077c <vPortExitCritical+0x54>)
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d105      	bne.n	8010770 <vPortExitCritical+0x48>
 8010764:	2300      	movs	r3, #0
 8010766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	f383 8811 	msr	BASEPRI, r3
}
 801076e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010770:	bf00      	nop
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	20000054 	.word	0x20000054

08010780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010780:	f3ef 8009 	mrs	r0, PSP
 8010784:	f3bf 8f6f 	isb	sy
 8010788:	4b15      	ldr	r3, [pc, #84]	@ (80107e0 <pxCurrentTCBConst>)
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	f01e 0f10 	tst.w	lr, #16
 8010790:	bf08      	it	eq
 8010792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801079a:	6010      	str	r0, [r2, #0]
 801079c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80107a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80107a4:	b672      	cpsid	i
 80107a6:	f380 8811 	msr	BASEPRI, r0
 80107aa:	f3bf 8f4f 	dsb	sy
 80107ae:	f3bf 8f6f 	isb	sy
 80107b2:	b662      	cpsie	i
 80107b4:	f7ff f9d4 	bl	800fb60 <vTaskSwitchContext>
 80107b8:	f04f 0000 	mov.w	r0, #0
 80107bc:	f380 8811 	msr	BASEPRI, r0
 80107c0:	bc09      	pop	{r0, r3}
 80107c2:	6819      	ldr	r1, [r3, #0]
 80107c4:	6808      	ldr	r0, [r1, #0]
 80107c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107ca:	f01e 0f10 	tst.w	lr, #16
 80107ce:	bf08      	it	eq
 80107d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80107d4:	f380 8809 	msr	PSP, r0
 80107d8:	f3bf 8f6f 	isb	sy
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop

080107e0 <pxCurrentTCBConst>:
 80107e0:	200010d4 	.word	0x200010d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80107e4:	bf00      	nop
 80107e6:	bf00      	nop

080107e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
	__asm volatile
 80107ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f2:	b672      	cpsid	i
 80107f4:	f383 8811 	msr	BASEPRI, r3
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	b662      	cpsie	i
 8010802:	607b      	str	r3, [r7, #4]
}
 8010804:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010806:	f7ff f8ef 	bl	800f9e8 <xTaskIncrementTick>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d003      	beq.n	8010818 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010810:	4b06      	ldr	r3, [pc, #24]	@ (801082c <SysTick_Handler+0x44>)
 8010812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010816:	601a      	str	r2, [r3, #0]
 8010818:	2300      	movs	r3, #0
 801081a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	f383 8811 	msr	BASEPRI, r3
}
 8010822:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010824:	bf00      	nop
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	e000ed04 	.word	0xe000ed04

08010830 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010830:	b480      	push	{r7}
 8010832:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010834:	4b0b      	ldr	r3, [pc, #44]	@ (8010864 <vPortSetupTimerInterrupt+0x34>)
 8010836:	2200      	movs	r2, #0
 8010838:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801083a:	4b0b      	ldr	r3, [pc, #44]	@ (8010868 <vPortSetupTimerInterrupt+0x38>)
 801083c:	2200      	movs	r2, #0
 801083e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010840:	4b0a      	ldr	r3, [pc, #40]	@ (801086c <vPortSetupTimerInterrupt+0x3c>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4a0a      	ldr	r2, [pc, #40]	@ (8010870 <vPortSetupTimerInterrupt+0x40>)
 8010846:	fba2 2303 	umull	r2, r3, r2, r3
 801084a:	099b      	lsrs	r3, r3, #6
 801084c:	4a09      	ldr	r2, [pc, #36]	@ (8010874 <vPortSetupTimerInterrupt+0x44>)
 801084e:	3b01      	subs	r3, #1
 8010850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010852:	4b04      	ldr	r3, [pc, #16]	@ (8010864 <vPortSetupTimerInterrupt+0x34>)
 8010854:	2207      	movs	r2, #7
 8010856:	601a      	str	r2, [r3, #0]
}
 8010858:	bf00      	nop
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr
 8010862:	bf00      	nop
 8010864:	e000e010 	.word	0xe000e010
 8010868:	e000e018 	.word	0xe000e018
 801086c:	20000048 	.word	0x20000048
 8010870:	10624dd3 	.word	0x10624dd3
 8010874:	e000e014 	.word	0xe000e014

08010878 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010878:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010888 <vPortEnableVFP+0x10>
 801087c:	6801      	ldr	r1, [r0, #0]
 801087e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010882:	6001      	str	r1, [r0, #0]
 8010884:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010886:	bf00      	nop
 8010888:	e000ed88 	.word	0xe000ed88

0801088c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801088c:	b480      	push	{r7}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010892:	f3ef 8305 	mrs	r3, IPSR
 8010896:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b0f      	cmp	r3, #15
 801089c:	d917      	bls.n	80108ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801089e:	4a1a      	ldr	r2, [pc, #104]	@ (8010908 <vPortValidateInterruptPriority+0x7c>)
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	4413      	add	r3, r2
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80108a8:	4b18      	ldr	r3, [pc, #96]	@ (801090c <vPortValidateInterruptPriority+0x80>)
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	7afa      	ldrb	r2, [r7, #11]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d20d      	bcs.n	80108ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80108b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108b6:	b672      	cpsid	i
 80108b8:	f383 8811 	msr	BASEPRI, r3
 80108bc:	f3bf 8f6f 	isb	sy
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	b662      	cpsie	i
 80108c6:	607b      	str	r3, [r7, #4]
}
 80108c8:	bf00      	nop
 80108ca:	bf00      	nop
 80108cc:	e7fd      	b.n	80108ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80108ce:	4b10      	ldr	r3, [pc, #64]	@ (8010910 <vPortValidateInterruptPriority+0x84>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80108d6:	4b0f      	ldr	r3, [pc, #60]	@ (8010914 <vPortValidateInterruptPriority+0x88>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	429a      	cmp	r2, r3
 80108dc:	d90d      	bls.n	80108fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80108de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e2:	b672      	cpsid	i
 80108e4:	f383 8811 	msr	BASEPRI, r3
 80108e8:	f3bf 8f6f 	isb	sy
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	b662      	cpsie	i
 80108f2:	603b      	str	r3, [r7, #0]
}
 80108f4:	bf00      	nop
 80108f6:	bf00      	nop
 80108f8:	e7fd      	b.n	80108f6 <vPortValidateInterruptPriority+0x6a>
	}
 80108fa:	bf00      	nop
 80108fc:	3714      	adds	r7, #20
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr
 8010906:	bf00      	nop
 8010908:	e000e3f0 	.word	0xe000e3f0
 801090c:	20001200 	.word	0x20001200
 8010910:	e000ed0c 	.word	0xe000ed0c
 8010914:	20001204 	.word	0x20001204

08010918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b08a      	sub	sp, #40	@ 0x28
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010920:	2300      	movs	r3, #0
 8010922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010924:	f7fe ff90 	bl	800f848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010928:	4b5d      	ldr	r3, [pc, #372]	@ (8010aa0 <pvPortMalloc+0x188>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d101      	bne.n	8010934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010930:	f000 f920 	bl	8010b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010934:	4b5b      	ldr	r3, [pc, #364]	@ (8010aa4 <pvPortMalloc+0x18c>)
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4013      	ands	r3, r2
 801093c:	2b00      	cmp	r3, #0
 801093e:	f040 8094 	bne.w	8010a6a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d020      	beq.n	801098a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010948:	2208      	movs	r2, #8
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4413      	add	r3, r2
 801094e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f003 0307 	and.w	r3, r3, #7
 8010956:	2b00      	cmp	r3, #0
 8010958:	d017      	beq.n	801098a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f023 0307 	bic.w	r3, r3, #7
 8010960:	3308      	adds	r3, #8
 8010962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f003 0307 	and.w	r3, r3, #7
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00d      	beq.n	801098a <pvPortMalloc+0x72>
	__asm volatile
 801096e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010972:	b672      	cpsid	i
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	b662      	cpsie	i
 8010982:	617b      	str	r3, [r7, #20]
}
 8010984:	bf00      	nop
 8010986:	bf00      	nop
 8010988:	e7fd      	b.n	8010986 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d06c      	beq.n	8010a6a <pvPortMalloc+0x152>
 8010990:	4b45      	ldr	r3, [pc, #276]	@ (8010aa8 <pvPortMalloc+0x190>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	429a      	cmp	r2, r3
 8010998:	d867      	bhi.n	8010a6a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801099a:	4b44      	ldr	r3, [pc, #272]	@ (8010aac <pvPortMalloc+0x194>)
 801099c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801099e:	4b43      	ldr	r3, [pc, #268]	@ (8010aac <pvPortMalloc+0x194>)
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109a4:	e004      	b.n	80109b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80109a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80109aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80109b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d903      	bls.n	80109c2 <pvPortMalloc+0xaa>
 80109ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d1f1      	bne.n	80109a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80109c2:	4b37      	ldr	r3, [pc, #220]	@ (8010aa0 <pvPortMalloc+0x188>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d04e      	beq.n	8010a6a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80109cc:	6a3b      	ldr	r3, [r7, #32]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	2208      	movs	r2, #8
 80109d2:	4413      	add	r3, r2
 80109d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80109d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d8:	681a      	ldr	r2, [r3, #0]
 80109da:	6a3b      	ldr	r3, [r7, #32]
 80109dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80109de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109e0:	685a      	ldr	r2, [r3, #4]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	1ad2      	subs	r2, r2, r3
 80109e6:	2308      	movs	r3, #8
 80109e8:	005b      	lsls	r3, r3, #1
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d922      	bls.n	8010a34 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80109ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	4413      	add	r3, r2
 80109f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	f003 0307 	and.w	r3, r3, #7
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d00d      	beq.n	8010a1c <pvPortMalloc+0x104>
	__asm volatile
 8010a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a04:	b672      	cpsid	i
 8010a06:	f383 8811 	msr	BASEPRI, r3
 8010a0a:	f3bf 8f6f 	isb	sy
 8010a0e:	f3bf 8f4f 	dsb	sy
 8010a12:	b662      	cpsie	i
 8010a14:	613b      	str	r3, [r7, #16]
}
 8010a16:	bf00      	nop
 8010a18:	bf00      	nop
 8010a1a:	e7fd      	b.n	8010a18 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a1e:	685a      	ldr	r2, [r3, #4]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	1ad2      	subs	r2, r2, r3
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010a2e:	69b8      	ldr	r0, [r7, #24]
 8010a30:	f000 f902 	bl	8010c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a34:	4b1c      	ldr	r3, [pc, #112]	@ (8010aa8 <pvPortMalloc+0x190>)
 8010a36:	681a      	ldr	r2, [r3, #0]
 8010a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	1ad3      	subs	r3, r2, r3
 8010a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8010aa8 <pvPortMalloc+0x190>)
 8010a40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a42:	4b19      	ldr	r3, [pc, #100]	@ (8010aa8 <pvPortMalloc+0x190>)
 8010a44:	681a      	ldr	r2, [r3, #0]
 8010a46:	4b1a      	ldr	r3, [pc, #104]	@ (8010ab0 <pvPortMalloc+0x198>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d203      	bcs.n	8010a56 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a4e:	4b16      	ldr	r3, [pc, #88]	@ (8010aa8 <pvPortMalloc+0x190>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4a17      	ldr	r2, [pc, #92]	@ (8010ab0 <pvPortMalloc+0x198>)
 8010a54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a58:	685a      	ldr	r2, [r3, #4]
 8010a5a:	4b12      	ldr	r3, [pc, #72]	@ (8010aa4 <pvPortMalloc+0x18c>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	431a      	orrs	r2, r3
 8010a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a66:	2200      	movs	r2, #0
 8010a68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010a6a:	f7fe fefb 	bl	800f864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	f003 0307 	and.w	r3, r3, #7
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d00d      	beq.n	8010a94 <pvPortMalloc+0x17c>
	__asm volatile
 8010a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a7c:	b672      	cpsid	i
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	b662      	cpsie	i
 8010a8c:	60fb      	str	r3, [r7, #12]
}
 8010a8e:	bf00      	nop
 8010a90:	bf00      	nop
 8010a92:	e7fd      	b.n	8010a90 <pvPortMalloc+0x178>
	return pvReturn;
 8010a94:	69fb      	ldr	r3, [r7, #28]
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3728      	adds	r7, #40	@ 0x28
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}
 8010a9e:	bf00      	nop
 8010aa0:	20004e10 	.word	0x20004e10
 8010aa4:	20004e1c 	.word	0x20004e1c
 8010aa8:	20004e14 	.word	0x20004e14
 8010aac:	20004e08 	.word	0x20004e08
 8010ab0:	20004e18 	.word	0x20004e18

08010ab4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b086      	sub	sp, #24
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d04e      	beq.n	8010b64 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010ac6:	2308      	movs	r3, #8
 8010ac8:	425b      	negs	r3, r3
 8010aca:	697a      	ldr	r2, [r7, #20]
 8010acc:	4413      	add	r3, r2
 8010ace:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ad4:	693b      	ldr	r3, [r7, #16]
 8010ad6:	685a      	ldr	r2, [r3, #4]
 8010ad8:	4b24      	ldr	r3, [pc, #144]	@ (8010b6c <vPortFree+0xb8>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	4013      	ands	r3, r2
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d10d      	bne.n	8010afe <vPortFree+0x4a>
	__asm volatile
 8010ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ae6:	b672      	cpsid	i
 8010ae8:	f383 8811 	msr	BASEPRI, r3
 8010aec:	f3bf 8f6f 	isb	sy
 8010af0:	f3bf 8f4f 	dsb	sy
 8010af4:	b662      	cpsie	i
 8010af6:	60fb      	str	r3, [r7, #12]
}
 8010af8:	bf00      	nop
 8010afa:	bf00      	nop
 8010afc:	e7fd      	b.n	8010afa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010afe:	693b      	ldr	r3, [r7, #16]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d00d      	beq.n	8010b22 <vPortFree+0x6e>
	__asm volatile
 8010b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b0a:	b672      	cpsid	i
 8010b0c:	f383 8811 	msr	BASEPRI, r3
 8010b10:	f3bf 8f6f 	isb	sy
 8010b14:	f3bf 8f4f 	dsb	sy
 8010b18:	b662      	cpsie	i
 8010b1a:	60bb      	str	r3, [r7, #8]
}
 8010b1c:	bf00      	nop
 8010b1e:	bf00      	nop
 8010b20:	e7fd      	b.n	8010b1e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010b22:	693b      	ldr	r3, [r7, #16]
 8010b24:	685a      	ldr	r2, [r3, #4]
 8010b26:	4b11      	ldr	r3, [pc, #68]	@ (8010b6c <vPortFree+0xb8>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4013      	ands	r3, r2
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d019      	beq.n	8010b64 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d115      	bne.n	8010b64 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	685a      	ldr	r2, [r3, #4]
 8010b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8010b6c <vPortFree+0xb8>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	43db      	mvns	r3, r3
 8010b42:	401a      	ands	r2, r3
 8010b44:	693b      	ldr	r3, [r7, #16]
 8010b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010b48:	f7fe fe7e 	bl	800f848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b4c:	693b      	ldr	r3, [r7, #16]
 8010b4e:	685a      	ldr	r2, [r3, #4]
 8010b50:	4b07      	ldr	r3, [pc, #28]	@ (8010b70 <vPortFree+0xbc>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	4413      	add	r3, r2
 8010b56:	4a06      	ldr	r2, [pc, #24]	@ (8010b70 <vPortFree+0xbc>)
 8010b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b5a:	6938      	ldr	r0, [r7, #16]
 8010b5c:	f000 f86c 	bl	8010c38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010b60:	f7fe fe80 	bl	800f864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010b64:	bf00      	nop
 8010b66:	3718      	adds	r7, #24
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	20004e1c 	.word	0x20004e1c
 8010b70:	20004e14 	.word	0x20004e14

08010b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010b74:	b480      	push	{r7}
 8010b76:	b085      	sub	sp, #20
 8010b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010b7a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010b80:	4b27      	ldr	r3, [pc, #156]	@ (8010c20 <prvHeapInit+0xac>)
 8010b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	f003 0307 	and.w	r3, r3, #7
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00c      	beq.n	8010ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	3307      	adds	r3, #7
 8010b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f023 0307 	bic.w	r3, r3, #7
 8010b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8010c20 <prvHeapInit+0xac>)
 8010ba4:	4413      	add	r3, r2
 8010ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010bac:	4a1d      	ldr	r2, [pc, #116]	@ (8010c24 <prvHeapInit+0xb0>)
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8010c24 <prvHeapInit+0xb0>)
 8010bb4:	2200      	movs	r2, #0
 8010bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	68ba      	ldr	r2, [r7, #8]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010bc0:	2208      	movs	r2, #8
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	1a9b      	subs	r3, r3, r2
 8010bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f023 0307 	bic.w	r3, r3, #7
 8010bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	4a15      	ldr	r2, [pc, #84]	@ (8010c28 <prvHeapInit+0xb4>)
 8010bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010bd6:	4b14      	ldr	r3, [pc, #80]	@ (8010c28 <prvHeapInit+0xb4>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010bde:	4b12      	ldr	r3, [pc, #72]	@ (8010c28 <prvHeapInit+0xb4>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2200      	movs	r2, #0
 8010be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	1ad2      	subs	r2, r2, r3
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8010c28 <prvHeapInit+0xb4>)
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	685b      	ldr	r3, [r3, #4]
 8010c00:	4a0a      	ldr	r2, [pc, #40]	@ (8010c2c <prvHeapInit+0xb8>)
 8010c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	685b      	ldr	r3, [r3, #4]
 8010c08:	4a09      	ldr	r2, [pc, #36]	@ (8010c30 <prvHeapInit+0xbc>)
 8010c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c0c:	4b09      	ldr	r3, [pc, #36]	@ (8010c34 <prvHeapInit+0xc0>)
 8010c0e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010c12:	601a      	str	r2, [r3, #0]
}
 8010c14:	bf00      	nop
 8010c16:	3714      	adds	r7, #20
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr
 8010c20:	20001208 	.word	0x20001208
 8010c24:	20004e08 	.word	0x20004e08
 8010c28:	20004e10 	.word	0x20004e10
 8010c2c:	20004e18 	.word	0x20004e18
 8010c30:	20004e14 	.word	0x20004e14
 8010c34:	20004e1c 	.word	0x20004e1c

08010c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010c40:	4b28      	ldr	r3, [pc, #160]	@ (8010ce4 <prvInsertBlockIntoFreeList+0xac>)
 8010c42:	60fb      	str	r3, [r7, #12]
 8010c44:	e002      	b.n	8010c4c <prvInsertBlockIntoFreeList+0x14>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	60fb      	str	r3, [r7, #12]
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	687a      	ldr	r2, [r7, #4]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d8f7      	bhi.n	8010c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	68ba      	ldr	r2, [r7, #8]
 8010c60:	4413      	add	r3, r2
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d108      	bne.n	8010c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	685a      	ldr	r2, [r3, #4]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	441a      	add	r2, r3
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	68ba      	ldr	r2, [r7, #8]
 8010c84:	441a      	add	r2, r3
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d118      	bne.n	8010cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	4b15      	ldr	r3, [pc, #84]	@ (8010ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d00d      	beq.n	8010cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	441a      	add	r2, r3
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	601a      	str	r2, [r3, #0]
 8010cb4:	e008      	b.n	8010cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8010ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	601a      	str	r2, [r3, #0]
 8010cbe:	e003      	b.n	8010cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	681a      	ldr	r2, [r3, #0]
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d002      	beq.n	8010cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010cd6:	bf00      	nop
 8010cd8:	3714      	adds	r7, #20
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr
 8010ce2:	bf00      	nop
 8010ce4:	20004e08 	.word	0x20004e08
 8010ce8:	20004e10 	.word	0x20004e10

08010cec <rand>:
 8010cec:	4b16      	ldr	r3, [pc, #88]	@ (8010d48 <rand+0x5c>)
 8010cee:	b510      	push	{r4, lr}
 8010cf0:	681c      	ldr	r4, [r3, #0]
 8010cf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010cf4:	b9b3      	cbnz	r3, 8010d24 <rand+0x38>
 8010cf6:	2018      	movs	r0, #24
 8010cf8:	f000 faa4 	bl	8011244 <malloc>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	6320      	str	r0, [r4, #48]	@ 0x30
 8010d00:	b920      	cbnz	r0, 8010d0c <rand+0x20>
 8010d02:	4b12      	ldr	r3, [pc, #72]	@ (8010d4c <rand+0x60>)
 8010d04:	4812      	ldr	r0, [pc, #72]	@ (8010d50 <rand+0x64>)
 8010d06:	2152      	movs	r1, #82	@ 0x52
 8010d08:	f000 fa34 	bl	8011174 <__assert_func>
 8010d0c:	4911      	ldr	r1, [pc, #68]	@ (8010d54 <rand+0x68>)
 8010d0e:	4b12      	ldr	r3, [pc, #72]	@ (8010d58 <rand+0x6c>)
 8010d10:	e9c0 1300 	strd	r1, r3, [r0]
 8010d14:	4b11      	ldr	r3, [pc, #68]	@ (8010d5c <rand+0x70>)
 8010d16:	6083      	str	r3, [r0, #8]
 8010d18:	230b      	movs	r3, #11
 8010d1a:	8183      	strh	r3, [r0, #12]
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	2001      	movs	r0, #1
 8010d20:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010d24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010d26:	480e      	ldr	r0, [pc, #56]	@ (8010d60 <rand+0x74>)
 8010d28:	690b      	ldr	r3, [r1, #16]
 8010d2a:	694c      	ldr	r4, [r1, #20]
 8010d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8010d64 <rand+0x78>)
 8010d2e:	4358      	muls	r0, r3
 8010d30:	fb02 0004 	mla	r0, r2, r4, r0
 8010d34:	fba3 3202 	umull	r3, r2, r3, r2
 8010d38:	3301      	adds	r3, #1
 8010d3a:	eb40 0002 	adc.w	r0, r0, r2
 8010d3e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010d42:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010d46:	bd10      	pop	{r4, pc}
 8010d48:	20000064 	.word	0x20000064
 8010d4c:	080205f4 	.word	0x080205f4
 8010d50:	0802060b 	.word	0x0802060b
 8010d54:	abcd330e 	.word	0xabcd330e
 8010d58:	e66d1234 	.word	0xe66d1234
 8010d5c:	0005deec 	.word	0x0005deec
 8010d60:	5851f42d 	.word	0x5851f42d
 8010d64:	4c957f2d 	.word	0x4c957f2d

08010d68 <std>:
 8010d68:	2300      	movs	r3, #0
 8010d6a:	b510      	push	{r4, lr}
 8010d6c:	4604      	mov	r4, r0
 8010d6e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d76:	6083      	str	r3, [r0, #8]
 8010d78:	8181      	strh	r1, [r0, #12]
 8010d7a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010d7c:	81c2      	strh	r2, [r0, #14]
 8010d7e:	6183      	str	r3, [r0, #24]
 8010d80:	4619      	mov	r1, r3
 8010d82:	2208      	movs	r2, #8
 8010d84:	305c      	adds	r0, #92	@ 0x5c
 8010d86:	f000 f914 	bl	8010fb2 <memset>
 8010d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc0 <std+0x58>)
 8010d8c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc4 <std+0x5c>)
 8010d90:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010d92:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc8 <std+0x60>)
 8010d94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010d96:	4b0d      	ldr	r3, [pc, #52]	@ (8010dcc <std+0x64>)
 8010d98:	6323      	str	r3, [r4, #48]	@ 0x30
 8010d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8010dd0 <std+0x68>)
 8010d9c:	6224      	str	r4, [r4, #32]
 8010d9e:	429c      	cmp	r4, r3
 8010da0:	d006      	beq.n	8010db0 <std+0x48>
 8010da2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010da6:	4294      	cmp	r4, r2
 8010da8:	d002      	beq.n	8010db0 <std+0x48>
 8010daa:	33d0      	adds	r3, #208	@ 0xd0
 8010dac:	429c      	cmp	r4, r3
 8010dae:	d105      	bne.n	8010dbc <std+0x54>
 8010db0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010db8:	f000 b9ca 	b.w	8011150 <__retarget_lock_init_recursive>
 8010dbc:	bd10      	pop	{r4, pc}
 8010dbe:	bf00      	nop
 8010dc0:	08010f2d 	.word	0x08010f2d
 8010dc4:	08010f4f 	.word	0x08010f4f
 8010dc8:	08010f87 	.word	0x08010f87
 8010dcc:	08010fab 	.word	0x08010fab
 8010dd0:	20004e20 	.word	0x20004e20

08010dd4 <stdio_exit_handler>:
 8010dd4:	4a02      	ldr	r2, [pc, #8]	@ (8010de0 <stdio_exit_handler+0xc>)
 8010dd6:	4903      	ldr	r1, [pc, #12]	@ (8010de4 <stdio_exit_handler+0x10>)
 8010dd8:	4803      	ldr	r0, [pc, #12]	@ (8010de8 <stdio_exit_handler+0x14>)
 8010dda:	f000 b869 	b.w	8010eb0 <_fwalk_sglue>
 8010dde:	bf00      	nop
 8010de0:	20000058 	.word	0x20000058
 8010de4:	08011a85 	.word	0x08011a85
 8010de8:	20000068 	.word	0x20000068

08010dec <cleanup_stdio>:
 8010dec:	6841      	ldr	r1, [r0, #4]
 8010dee:	4b0c      	ldr	r3, [pc, #48]	@ (8010e20 <cleanup_stdio+0x34>)
 8010df0:	4299      	cmp	r1, r3
 8010df2:	b510      	push	{r4, lr}
 8010df4:	4604      	mov	r4, r0
 8010df6:	d001      	beq.n	8010dfc <cleanup_stdio+0x10>
 8010df8:	f000 fe44 	bl	8011a84 <_fflush_r>
 8010dfc:	68a1      	ldr	r1, [r4, #8]
 8010dfe:	4b09      	ldr	r3, [pc, #36]	@ (8010e24 <cleanup_stdio+0x38>)
 8010e00:	4299      	cmp	r1, r3
 8010e02:	d002      	beq.n	8010e0a <cleanup_stdio+0x1e>
 8010e04:	4620      	mov	r0, r4
 8010e06:	f000 fe3d 	bl	8011a84 <_fflush_r>
 8010e0a:	68e1      	ldr	r1, [r4, #12]
 8010e0c:	4b06      	ldr	r3, [pc, #24]	@ (8010e28 <cleanup_stdio+0x3c>)
 8010e0e:	4299      	cmp	r1, r3
 8010e10:	d004      	beq.n	8010e1c <cleanup_stdio+0x30>
 8010e12:	4620      	mov	r0, r4
 8010e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e18:	f000 be34 	b.w	8011a84 <_fflush_r>
 8010e1c:	bd10      	pop	{r4, pc}
 8010e1e:	bf00      	nop
 8010e20:	20004e20 	.word	0x20004e20
 8010e24:	20004e88 	.word	0x20004e88
 8010e28:	20004ef0 	.word	0x20004ef0

08010e2c <global_stdio_init.part.0>:
 8010e2c:	b510      	push	{r4, lr}
 8010e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8010e5c <global_stdio_init.part.0+0x30>)
 8010e30:	4c0b      	ldr	r4, [pc, #44]	@ (8010e60 <global_stdio_init.part.0+0x34>)
 8010e32:	4a0c      	ldr	r2, [pc, #48]	@ (8010e64 <global_stdio_init.part.0+0x38>)
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	4620      	mov	r0, r4
 8010e38:	2200      	movs	r2, #0
 8010e3a:	2104      	movs	r1, #4
 8010e3c:	f7ff ff94 	bl	8010d68 <std>
 8010e40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010e44:	2201      	movs	r2, #1
 8010e46:	2109      	movs	r1, #9
 8010e48:	f7ff ff8e 	bl	8010d68 <std>
 8010e4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010e50:	2202      	movs	r2, #2
 8010e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e56:	2112      	movs	r1, #18
 8010e58:	f7ff bf86 	b.w	8010d68 <std>
 8010e5c:	20004f58 	.word	0x20004f58
 8010e60:	20004e20 	.word	0x20004e20
 8010e64:	08010dd5 	.word	0x08010dd5

08010e68 <__sfp_lock_acquire>:
 8010e68:	4801      	ldr	r0, [pc, #4]	@ (8010e70 <__sfp_lock_acquire+0x8>)
 8010e6a:	f000 b972 	b.w	8011152 <__retarget_lock_acquire_recursive>
 8010e6e:	bf00      	nop
 8010e70:	20004f61 	.word	0x20004f61

08010e74 <__sfp_lock_release>:
 8010e74:	4801      	ldr	r0, [pc, #4]	@ (8010e7c <__sfp_lock_release+0x8>)
 8010e76:	f000 b96d 	b.w	8011154 <__retarget_lock_release_recursive>
 8010e7a:	bf00      	nop
 8010e7c:	20004f61 	.word	0x20004f61

08010e80 <__sinit>:
 8010e80:	b510      	push	{r4, lr}
 8010e82:	4604      	mov	r4, r0
 8010e84:	f7ff fff0 	bl	8010e68 <__sfp_lock_acquire>
 8010e88:	6a23      	ldr	r3, [r4, #32]
 8010e8a:	b11b      	cbz	r3, 8010e94 <__sinit+0x14>
 8010e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e90:	f7ff bff0 	b.w	8010e74 <__sfp_lock_release>
 8010e94:	4b04      	ldr	r3, [pc, #16]	@ (8010ea8 <__sinit+0x28>)
 8010e96:	6223      	str	r3, [r4, #32]
 8010e98:	4b04      	ldr	r3, [pc, #16]	@ (8010eac <__sinit+0x2c>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1f5      	bne.n	8010e8c <__sinit+0xc>
 8010ea0:	f7ff ffc4 	bl	8010e2c <global_stdio_init.part.0>
 8010ea4:	e7f2      	b.n	8010e8c <__sinit+0xc>
 8010ea6:	bf00      	nop
 8010ea8:	08010ded 	.word	0x08010ded
 8010eac:	20004f58 	.word	0x20004f58

08010eb0 <_fwalk_sglue>:
 8010eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010eb4:	4607      	mov	r7, r0
 8010eb6:	4688      	mov	r8, r1
 8010eb8:	4614      	mov	r4, r2
 8010eba:	2600      	movs	r6, #0
 8010ebc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010ec0:	f1b9 0901 	subs.w	r9, r9, #1
 8010ec4:	d505      	bpl.n	8010ed2 <_fwalk_sglue+0x22>
 8010ec6:	6824      	ldr	r4, [r4, #0]
 8010ec8:	2c00      	cmp	r4, #0
 8010eca:	d1f7      	bne.n	8010ebc <_fwalk_sglue+0xc>
 8010ecc:	4630      	mov	r0, r6
 8010ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ed2:	89ab      	ldrh	r3, [r5, #12]
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d907      	bls.n	8010ee8 <_fwalk_sglue+0x38>
 8010ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010edc:	3301      	adds	r3, #1
 8010ede:	d003      	beq.n	8010ee8 <_fwalk_sglue+0x38>
 8010ee0:	4629      	mov	r1, r5
 8010ee2:	4638      	mov	r0, r7
 8010ee4:	47c0      	blx	r8
 8010ee6:	4306      	orrs	r6, r0
 8010ee8:	3568      	adds	r5, #104	@ 0x68
 8010eea:	e7e9      	b.n	8010ec0 <_fwalk_sglue+0x10>

08010eec <siprintf>:
 8010eec:	b40e      	push	{r1, r2, r3}
 8010eee:	b500      	push	{lr}
 8010ef0:	b09c      	sub	sp, #112	@ 0x70
 8010ef2:	ab1d      	add	r3, sp, #116	@ 0x74
 8010ef4:	9002      	str	r0, [sp, #8]
 8010ef6:	9006      	str	r0, [sp, #24]
 8010ef8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010efc:	4809      	ldr	r0, [pc, #36]	@ (8010f24 <siprintf+0x38>)
 8010efe:	9107      	str	r1, [sp, #28]
 8010f00:	9104      	str	r1, [sp, #16]
 8010f02:	4909      	ldr	r1, [pc, #36]	@ (8010f28 <siprintf+0x3c>)
 8010f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f08:	9105      	str	r1, [sp, #20]
 8010f0a:	6800      	ldr	r0, [r0, #0]
 8010f0c:	9301      	str	r3, [sp, #4]
 8010f0e:	a902      	add	r1, sp, #8
 8010f10:	f000 faaa 	bl	8011468 <_svfiprintf_r>
 8010f14:	9b02      	ldr	r3, [sp, #8]
 8010f16:	2200      	movs	r2, #0
 8010f18:	701a      	strb	r2, [r3, #0]
 8010f1a:	b01c      	add	sp, #112	@ 0x70
 8010f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f20:	b003      	add	sp, #12
 8010f22:	4770      	bx	lr
 8010f24:	20000064 	.word	0x20000064
 8010f28:	ffff0208 	.word	0xffff0208

08010f2c <__sread>:
 8010f2c:	b510      	push	{r4, lr}
 8010f2e:	460c      	mov	r4, r1
 8010f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f34:	f000 f8be 	bl	80110b4 <_read_r>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	bfab      	itete	ge
 8010f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8010f40:	181b      	addge	r3, r3, r0
 8010f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010f46:	bfac      	ite	ge
 8010f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010f4a:	81a3      	strhlt	r3, [r4, #12]
 8010f4c:	bd10      	pop	{r4, pc}

08010f4e <__swrite>:
 8010f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f52:	461f      	mov	r7, r3
 8010f54:	898b      	ldrh	r3, [r1, #12]
 8010f56:	05db      	lsls	r3, r3, #23
 8010f58:	4605      	mov	r5, r0
 8010f5a:	460c      	mov	r4, r1
 8010f5c:	4616      	mov	r6, r2
 8010f5e:	d505      	bpl.n	8010f6c <__swrite+0x1e>
 8010f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f64:	2302      	movs	r3, #2
 8010f66:	2200      	movs	r2, #0
 8010f68:	f000 f892 	bl	8011090 <_lseek_r>
 8010f6c:	89a3      	ldrh	r3, [r4, #12]
 8010f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010f76:	81a3      	strh	r3, [r4, #12]
 8010f78:	4632      	mov	r2, r6
 8010f7a:	463b      	mov	r3, r7
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f82:	f000 b8a9 	b.w	80110d8 <_write_r>

08010f86 <__sseek>:
 8010f86:	b510      	push	{r4, lr}
 8010f88:	460c      	mov	r4, r1
 8010f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f8e:	f000 f87f 	bl	8011090 <_lseek_r>
 8010f92:	1c43      	adds	r3, r0, #1
 8010f94:	89a3      	ldrh	r3, [r4, #12]
 8010f96:	bf15      	itete	ne
 8010f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010fa2:	81a3      	strheq	r3, [r4, #12]
 8010fa4:	bf18      	it	ne
 8010fa6:	81a3      	strhne	r3, [r4, #12]
 8010fa8:	bd10      	pop	{r4, pc}

08010faa <__sclose>:
 8010faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fae:	f000 b809 	b.w	8010fc4 <_close_r>

08010fb2 <memset>:
 8010fb2:	4402      	add	r2, r0
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d100      	bne.n	8010fbc <memset+0xa>
 8010fba:	4770      	bx	lr
 8010fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8010fc0:	e7f9      	b.n	8010fb6 <memset+0x4>
	...

08010fc4 <_close_r>:
 8010fc4:	b538      	push	{r3, r4, r5, lr}
 8010fc6:	4d06      	ldr	r5, [pc, #24]	@ (8010fe0 <_close_r+0x1c>)
 8010fc8:	2300      	movs	r3, #0
 8010fca:	4604      	mov	r4, r0
 8010fcc:	4608      	mov	r0, r1
 8010fce:	602b      	str	r3, [r5, #0]
 8010fd0:	f7f4 fac2 	bl	8005558 <_close>
 8010fd4:	1c43      	adds	r3, r0, #1
 8010fd6:	d102      	bne.n	8010fde <_close_r+0x1a>
 8010fd8:	682b      	ldr	r3, [r5, #0]
 8010fda:	b103      	cbz	r3, 8010fde <_close_r+0x1a>
 8010fdc:	6023      	str	r3, [r4, #0]
 8010fde:	bd38      	pop	{r3, r4, r5, pc}
 8010fe0:	20004f5c 	.word	0x20004f5c

08010fe4 <_reclaim_reent>:
 8010fe4:	4b29      	ldr	r3, [pc, #164]	@ (801108c <_reclaim_reent+0xa8>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4283      	cmp	r3, r0
 8010fea:	b570      	push	{r4, r5, r6, lr}
 8010fec:	4604      	mov	r4, r0
 8010fee:	d04b      	beq.n	8011088 <_reclaim_reent+0xa4>
 8010ff0:	69c3      	ldr	r3, [r0, #28]
 8010ff2:	b1ab      	cbz	r3, 8011020 <_reclaim_reent+0x3c>
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	b16b      	cbz	r3, 8011014 <_reclaim_reent+0x30>
 8010ff8:	2500      	movs	r5, #0
 8010ffa:	69e3      	ldr	r3, [r4, #28]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	5959      	ldr	r1, [r3, r5]
 8011000:	2900      	cmp	r1, #0
 8011002:	d13b      	bne.n	801107c <_reclaim_reent+0x98>
 8011004:	3504      	adds	r5, #4
 8011006:	2d80      	cmp	r5, #128	@ 0x80
 8011008:	d1f7      	bne.n	8010ffa <_reclaim_reent+0x16>
 801100a:	69e3      	ldr	r3, [r4, #28]
 801100c:	4620      	mov	r0, r4
 801100e:	68d9      	ldr	r1, [r3, #12]
 8011010:	f000 f8ce 	bl	80111b0 <_free_r>
 8011014:	69e3      	ldr	r3, [r4, #28]
 8011016:	6819      	ldr	r1, [r3, #0]
 8011018:	b111      	cbz	r1, 8011020 <_reclaim_reent+0x3c>
 801101a:	4620      	mov	r0, r4
 801101c:	f000 f8c8 	bl	80111b0 <_free_r>
 8011020:	6961      	ldr	r1, [r4, #20]
 8011022:	b111      	cbz	r1, 801102a <_reclaim_reent+0x46>
 8011024:	4620      	mov	r0, r4
 8011026:	f000 f8c3 	bl	80111b0 <_free_r>
 801102a:	69e1      	ldr	r1, [r4, #28]
 801102c:	b111      	cbz	r1, 8011034 <_reclaim_reent+0x50>
 801102e:	4620      	mov	r0, r4
 8011030:	f000 f8be 	bl	80111b0 <_free_r>
 8011034:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011036:	b111      	cbz	r1, 801103e <_reclaim_reent+0x5a>
 8011038:	4620      	mov	r0, r4
 801103a:	f000 f8b9 	bl	80111b0 <_free_r>
 801103e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011040:	b111      	cbz	r1, 8011048 <_reclaim_reent+0x64>
 8011042:	4620      	mov	r0, r4
 8011044:	f000 f8b4 	bl	80111b0 <_free_r>
 8011048:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801104a:	b111      	cbz	r1, 8011052 <_reclaim_reent+0x6e>
 801104c:	4620      	mov	r0, r4
 801104e:	f000 f8af 	bl	80111b0 <_free_r>
 8011052:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011054:	b111      	cbz	r1, 801105c <_reclaim_reent+0x78>
 8011056:	4620      	mov	r0, r4
 8011058:	f000 f8aa 	bl	80111b0 <_free_r>
 801105c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801105e:	b111      	cbz	r1, 8011066 <_reclaim_reent+0x82>
 8011060:	4620      	mov	r0, r4
 8011062:	f000 f8a5 	bl	80111b0 <_free_r>
 8011066:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011068:	b111      	cbz	r1, 8011070 <_reclaim_reent+0x8c>
 801106a:	4620      	mov	r0, r4
 801106c:	f000 f8a0 	bl	80111b0 <_free_r>
 8011070:	6a23      	ldr	r3, [r4, #32]
 8011072:	b14b      	cbz	r3, 8011088 <_reclaim_reent+0xa4>
 8011074:	4620      	mov	r0, r4
 8011076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801107a:	4718      	bx	r3
 801107c:	680e      	ldr	r6, [r1, #0]
 801107e:	4620      	mov	r0, r4
 8011080:	f000 f896 	bl	80111b0 <_free_r>
 8011084:	4631      	mov	r1, r6
 8011086:	e7bb      	b.n	8011000 <_reclaim_reent+0x1c>
 8011088:	bd70      	pop	{r4, r5, r6, pc}
 801108a:	bf00      	nop
 801108c:	20000064 	.word	0x20000064

08011090 <_lseek_r>:
 8011090:	b538      	push	{r3, r4, r5, lr}
 8011092:	4d07      	ldr	r5, [pc, #28]	@ (80110b0 <_lseek_r+0x20>)
 8011094:	4604      	mov	r4, r0
 8011096:	4608      	mov	r0, r1
 8011098:	4611      	mov	r1, r2
 801109a:	2200      	movs	r2, #0
 801109c:	602a      	str	r2, [r5, #0]
 801109e:	461a      	mov	r2, r3
 80110a0:	f7f4 fa81 	bl	80055a6 <_lseek>
 80110a4:	1c43      	adds	r3, r0, #1
 80110a6:	d102      	bne.n	80110ae <_lseek_r+0x1e>
 80110a8:	682b      	ldr	r3, [r5, #0]
 80110aa:	b103      	cbz	r3, 80110ae <_lseek_r+0x1e>
 80110ac:	6023      	str	r3, [r4, #0]
 80110ae:	bd38      	pop	{r3, r4, r5, pc}
 80110b0:	20004f5c 	.word	0x20004f5c

080110b4 <_read_r>:
 80110b4:	b538      	push	{r3, r4, r5, lr}
 80110b6:	4d07      	ldr	r5, [pc, #28]	@ (80110d4 <_read_r+0x20>)
 80110b8:	4604      	mov	r4, r0
 80110ba:	4608      	mov	r0, r1
 80110bc:	4611      	mov	r1, r2
 80110be:	2200      	movs	r2, #0
 80110c0:	602a      	str	r2, [r5, #0]
 80110c2:	461a      	mov	r2, r3
 80110c4:	f7f4 fa0f 	bl	80054e6 <_read>
 80110c8:	1c43      	adds	r3, r0, #1
 80110ca:	d102      	bne.n	80110d2 <_read_r+0x1e>
 80110cc:	682b      	ldr	r3, [r5, #0]
 80110ce:	b103      	cbz	r3, 80110d2 <_read_r+0x1e>
 80110d0:	6023      	str	r3, [r4, #0]
 80110d2:	bd38      	pop	{r3, r4, r5, pc}
 80110d4:	20004f5c 	.word	0x20004f5c

080110d8 <_write_r>:
 80110d8:	b538      	push	{r3, r4, r5, lr}
 80110da:	4d07      	ldr	r5, [pc, #28]	@ (80110f8 <_write_r+0x20>)
 80110dc:	4604      	mov	r4, r0
 80110de:	4608      	mov	r0, r1
 80110e0:	4611      	mov	r1, r2
 80110e2:	2200      	movs	r2, #0
 80110e4:	602a      	str	r2, [r5, #0]
 80110e6:	461a      	mov	r2, r3
 80110e8:	f7f4 fa1a 	bl	8005520 <_write>
 80110ec:	1c43      	adds	r3, r0, #1
 80110ee:	d102      	bne.n	80110f6 <_write_r+0x1e>
 80110f0:	682b      	ldr	r3, [r5, #0]
 80110f2:	b103      	cbz	r3, 80110f6 <_write_r+0x1e>
 80110f4:	6023      	str	r3, [r4, #0]
 80110f6:	bd38      	pop	{r3, r4, r5, pc}
 80110f8:	20004f5c 	.word	0x20004f5c

080110fc <__errno>:
 80110fc:	4b01      	ldr	r3, [pc, #4]	@ (8011104 <__errno+0x8>)
 80110fe:	6818      	ldr	r0, [r3, #0]
 8011100:	4770      	bx	lr
 8011102:	bf00      	nop
 8011104:	20000064 	.word	0x20000064

08011108 <__libc_init_array>:
 8011108:	b570      	push	{r4, r5, r6, lr}
 801110a:	4d0d      	ldr	r5, [pc, #52]	@ (8011140 <__libc_init_array+0x38>)
 801110c:	4c0d      	ldr	r4, [pc, #52]	@ (8011144 <__libc_init_array+0x3c>)
 801110e:	1b64      	subs	r4, r4, r5
 8011110:	10a4      	asrs	r4, r4, #2
 8011112:	2600      	movs	r6, #0
 8011114:	42a6      	cmp	r6, r4
 8011116:	d109      	bne.n	801112c <__libc_init_array+0x24>
 8011118:	4d0b      	ldr	r5, [pc, #44]	@ (8011148 <__libc_init_array+0x40>)
 801111a:	4c0c      	ldr	r4, [pc, #48]	@ (801114c <__libc_init_array+0x44>)
 801111c:	f000 fff0 	bl	8012100 <_init>
 8011120:	1b64      	subs	r4, r4, r5
 8011122:	10a4      	asrs	r4, r4, #2
 8011124:	2600      	movs	r6, #0
 8011126:	42a6      	cmp	r6, r4
 8011128:	d105      	bne.n	8011136 <__libc_init_array+0x2e>
 801112a:	bd70      	pop	{r4, r5, r6, pc}
 801112c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011130:	4798      	blx	r3
 8011132:	3601      	adds	r6, #1
 8011134:	e7ee      	b.n	8011114 <__libc_init_array+0xc>
 8011136:	f855 3b04 	ldr.w	r3, [r5], #4
 801113a:	4798      	blx	r3
 801113c:	3601      	adds	r6, #1
 801113e:	e7f2      	b.n	8011126 <__libc_init_array+0x1e>
 8011140:	080206dc 	.word	0x080206dc
 8011144:	080206dc 	.word	0x080206dc
 8011148:	080206dc 	.word	0x080206dc
 801114c:	080206e0 	.word	0x080206e0

08011150 <__retarget_lock_init_recursive>:
 8011150:	4770      	bx	lr

08011152 <__retarget_lock_acquire_recursive>:
 8011152:	4770      	bx	lr

08011154 <__retarget_lock_release_recursive>:
 8011154:	4770      	bx	lr

08011156 <memcpy>:
 8011156:	440a      	add	r2, r1
 8011158:	4291      	cmp	r1, r2
 801115a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801115e:	d100      	bne.n	8011162 <memcpy+0xc>
 8011160:	4770      	bx	lr
 8011162:	b510      	push	{r4, lr}
 8011164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011168:	f803 4f01 	strb.w	r4, [r3, #1]!
 801116c:	4291      	cmp	r1, r2
 801116e:	d1f9      	bne.n	8011164 <memcpy+0xe>
 8011170:	bd10      	pop	{r4, pc}
	...

08011174 <__assert_func>:
 8011174:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011176:	4614      	mov	r4, r2
 8011178:	461a      	mov	r2, r3
 801117a:	4b09      	ldr	r3, [pc, #36]	@ (80111a0 <__assert_func+0x2c>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	4605      	mov	r5, r0
 8011180:	68d8      	ldr	r0, [r3, #12]
 8011182:	b954      	cbnz	r4, 801119a <__assert_func+0x26>
 8011184:	4b07      	ldr	r3, [pc, #28]	@ (80111a4 <__assert_func+0x30>)
 8011186:	461c      	mov	r4, r3
 8011188:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801118c:	9100      	str	r1, [sp, #0]
 801118e:	462b      	mov	r3, r5
 8011190:	4905      	ldr	r1, [pc, #20]	@ (80111a8 <__assert_func+0x34>)
 8011192:	f000 fc9f 	bl	8011ad4 <fiprintf>
 8011196:	f000 fcd9 	bl	8011b4c <abort>
 801119a:	4b04      	ldr	r3, [pc, #16]	@ (80111ac <__assert_func+0x38>)
 801119c:	e7f4      	b.n	8011188 <__assert_func+0x14>
 801119e:	bf00      	nop
 80111a0:	20000064 	.word	0x20000064
 80111a4:	0802069e 	.word	0x0802069e
 80111a8:	08020670 	.word	0x08020670
 80111ac:	08020663 	.word	0x08020663

080111b0 <_free_r>:
 80111b0:	b538      	push	{r3, r4, r5, lr}
 80111b2:	4605      	mov	r5, r0
 80111b4:	2900      	cmp	r1, #0
 80111b6:	d041      	beq.n	801123c <_free_r+0x8c>
 80111b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111bc:	1f0c      	subs	r4, r1, #4
 80111be:	2b00      	cmp	r3, #0
 80111c0:	bfb8      	it	lt
 80111c2:	18e4      	addlt	r4, r4, r3
 80111c4:	f000 f8e8 	bl	8011398 <__malloc_lock>
 80111c8:	4a1d      	ldr	r2, [pc, #116]	@ (8011240 <_free_r+0x90>)
 80111ca:	6813      	ldr	r3, [r2, #0]
 80111cc:	b933      	cbnz	r3, 80111dc <_free_r+0x2c>
 80111ce:	6063      	str	r3, [r4, #4]
 80111d0:	6014      	str	r4, [r2, #0]
 80111d2:	4628      	mov	r0, r5
 80111d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111d8:	f000 b8e4 	b.w	80113a4 <__malloc_unlock>
 80111dc:	42a3      	cmp	r3, r4
 80111de:	d908      	bls.n	80111f2 <_free_r+0x42>
 80111e0:	6820      	ldr	r0, [r4, #0]
 80111e2:	1821      	adds	r1, r4, r0
 80111e4:	428b      	cmp	r3, r1
 80111e6:	bf01      	itttt	eq
 80111e8:	6819      	ldreq	r1, [r3, #0]
 80111ea:	685b      	ldreq	r3, [r3, #4]
 80111ec:	1809      	addeq	r1, r1, r0
 80111ee:	6021      	streq	r1, [r4, #0]
 80111f0:	e7ed      	b.n	80111ce <_free_r+0x1e>
 80111f2:	461a      	mov	r2, r3
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	b10b      	cbz	r3, 80111fc <_free_r+0x4c>
 80111f8:	42a3      	cmp	r3, r4
 80111fa:	d9fa      	bls.n	80111f2 <_free_r+0x42>
 80111fc:	6811      	ldr	r1, [r2, #0]
 80111fe:	1850      	adds	r0, r2, r1
 8011200:	42a0      	cmp	r0, r4
 8011202:	d10b      	bne.n	801121c <_free_r+0x6c>
 8011204:	6820      	ldr	r0, [r4, #0]
 8011206:	4401      	add	r1, r0
 8011208:	1850      	adds	r0, r2, r1
 801120a:	4283      	cmp	r3, r0
 801120c:	6011      	str	r1, [r2, #0]
 801120e:	d1e0      	bne.n	80111d2 <_free_r+0x22>
 8011210:	6818      	ldr	r0, [r3, #0]
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	6053      	str	r3, [r2, #4]
 8011216:	4408      	add	r0, r1
 8011218:	6010      	str	r0, [r2, #0]
 801121a:	e7da      	b.n	80111d2 <_free_r+0x22>
 801121c:	d902      	bls.n	8011224 <_free_r+0x74>
 801121e:	230c      	movs	r3, #12
 8011220:	602b      	str	r3, [r5, #0]
 8011222:	e7d6      	b.n	80111d2 <_free_r+0x22>
 8011224:	6820      	ldr	r0, [r4, #0]
 8011226:	1821      	adds	r1, r4, r0
 8011228:	428b      	cmp	r3, r1
 801122a:	bf04      	itt	eq
 801122c:	6819      	ldreq	r1, [r3, #0]
 801122e:	685b      	ldreq	r3, [r3, #4]
 8011230:	6063      	str	r3, [r4, #4]
 8011232:	bf04      	itt	eq
 8011234:	1809      	addeq	r1, r1, r0
 8011236:	6021      	streq	r1, [r4, #0]
 8011238:	6054      	str	r4, [r2, #4]
 801123a:	e7ca      	b.n	80111d2 <_free_r+0x22>
 801123c:	bd38      	pop	{r3, r4, r5, pc}
 801123e:	bf00      	nop
 8011240:	20004f68 	.word	0x20004f68

08011244 <malloc>:
 8011244:	4b02      	ldr	r3, [pc, #8]	@ (8011250 <malloc+0xc>)
 8011246:	4601      	mov	r1, r0
 8011248:	6818      	ldr	r0, [r3, #0]
 801124a:	f000 b825 	b.w	8011298 <_malloc_r>
 801124e:	bf00      	nop
 8011250:	20000064 	.word	0x20000064

08011254 <sbrk_aligned>:
 8011254:	b570      	push	{r4, r5, r6, lr}
 8011256:	4e0f      	ldr	r6, [pc, #60]	@ (8011294 <sbrk_aligned+0x40>)
 8011258:	460c      	mov	r4, r1
 801125a:	6831      	ldr	r1, [r6, #0]
 801125c:	4605      	mov	r5, r0
 801125e:	b911      	cbnz	r1, 8011266 <sbrk_aligned+0x12>
 8011260:	f000 fc64 	bl	8011b2c <_sbrk_r>
 8011264:	6030      	str	r0, [r6, #0]
 8011266:	4621      	mov	r1, r4
 8011268:	4628      	mov	r0, r5
 801126a:	f000 fc5f 	bl	8011b2c <_sbrk_r>
 801126e:	1c43      	adds	r3, r0, #1
 8011270:	d103      	bne.n	801127a <sbrk_aligned+0x26>
 8011272:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8011276:	4620      	mov	r0, r4
 8011278:	bd70      	pop	{r4, r5, r6, pc}
 801127a:	1cc4      	adds	r4, r0, #3
 801127c:	f024 0403 	bic.w	r4, r4, #3
 8011280:	42a0      	cmp	r0, r4
 8011282:	d0f8      	beq.n	8011276 <sbrk_aligned+0x22>
 8011284:	1a21      	subs	r1, r4, r0
 8011286:	4628      	mov	r0, r5
 8011288:	f000 fc50 	bl	8011b2c <_sbrk_r>
 801128c:	3001      	adds	r0, #1
 801128e:	d1f2      	bne.n	8011276 <sbrk_aligned+0x22>
 8011290:	e7ef      	b.n	8011272 <sbrk_aligned+0x1e>
 8011292:	bf00      	nop
 8011294:	20004f64 	.word	0x20004f64

08011298 <_malloc_r>:
 8011298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801129c:	1ccd      	adds	r5, r1, #3
 801129e:	f025 0503 	bic.w	r5, r5, #3
 80112a2:	3508      	adds	r5, #8
 80112a4:	2d0c      	cmp	r5, #12
 80112a6:	bf38      	it	cc
 80112a8:	250c      	movcc	r5, #12
 80112aa:	2d00      	cmp	r5, #0
 80112ac:	4606      	mov	r6, r0
 80112ae:	db01      	blt.n	80112b4 <_malloc_r+0x1c>
 80112b0:	42a9      	cmp	r1, r5
 80112b2:	d904      	bls.n	80112be <_malloc_r+0x26>
 80112b4:	230c      	movs	r3, #12
 80112b6:	6033      	str	r3, [r6, #0]
 80112b8:	2000      	movs	r0, #0
 80112ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011394 <_malloc_r+0xfc>
 80112c2:	f000 f869 	bl	8011398 <__malloc_lock>
 80112c6:	f8d8 3000 	ldr.w	r3, [r8]
 80112ca:	461c      	mov	r4, r3
 80112cc:	bb44      	cbnz	r4, 8011320 <_malloc_r+0x88>
 80112ce:	4629      	mov	r1, r5
 80112d0:	4630      	mov	r0, r6
 80112d2:	f7ff ffbf 	bl	8011254 <sbrk_aligned>
 80112d6:	1c43      	adds	r3, r0, #1
 80112d8:	4604      	mov	r4, r0
 80112da:	d158      	bne.n	801138e <_malloc_r+0xf6>
 80112dc:	f8d8 4000 	ldr.w	r4, [r8]
 80112e0:	4627      	mov	r7, r4
 80112e2:	2f00      	cmp	r7, #0
 80112e4:	d143      	bne.n	801136e <_malloc_r+0xd6>
 80112e6:	2c00      	cmp	r4, #0
 80112e8:	d04b      	beq.n	8011382 <_malloc_r+0xea>
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	4639      	mov	r1, r7
 80112ee:	4630      	mov	r0, r6
 80112f0:	eb04 0903 	add.w	r9, r4, r3
 80112f4:	f000 fc1a 	bl	8011b2c <_sbrk_r>
 80112f8:	4581      	cmp	r9, r0
 80112fa:	d142      	bne.n	8011382 <_malloc_r+0xea>
 80112fc:	6821      	ldr	r1, [r4, #0]
 80112fe:	1a6d      	subs	r5, r5, r1
 8011300:	4629      	mov	r1, r5
 8011302:	4630      	mov	r0, r6
 8011304:	f7ff ffa6 	bl	8011254 <sbrk_aligned>
 8011308:	3001      	adds	r0, #1
 801130a:	d03a      	beq.n	8011382 <_malloc_r+0xea>
 801130c:	6823      	ldr	r3, [r4, #0]
 801130e:	442b      	add	r3, r5
 8011310:	6023      	str	r3, [r4, #0]
 8011312:	f8d8 3000 	ldr.w	r3, [r8]
 8011316:	685a      	ldr	r2, [r3, #4]
 8011318:	bb62      	cbnz	r2, 8011374 <_malloc_r+0xdc>
 801131a:	f8c8 7000 	str.w	r7, [r8]
 801131e:	e00f      	b.n	8011340 <_malloc_r+0xa8>
 8011320:	6822      	ldr	r2, [r4, #0]
 8011322:	1b52      	subs	r2, r2, r5
 8011324:	d420      	bmi.n	8011368 <_malloc_r+0xd0>
 8011326:	2a0b      	cmp	r2, #11
 8011328:	d917      	bls.n	801135a <_malloc_r+0xc2>
 801132a:	1961      	adds	r1, r4, r5
 801132c:	42a3      	cmp	r3, r4
 801132e:	6025      	str	r5, [r4, #0]
 8011330:	bf18      	it	ne
 8011332:	6059      	strne	r1, [r3, #4]
 8011334:	6863      	ldr	r3, [r4, #4]
 8011336:	bf08      	it	eq
 8011338:	f8c8 1000 	streq.w	r1, [r8]
 801133c:	5162      	str	r2, [r4, r5]
 801133e:	604b      	str	r3, [r1, #4]
 8011340:	4630      	mov	r0, r6
 8011342:	f000 f82f 	bl	80113a4 <__malloc_unlock>
 8011346:	f104 000b 	add.w	r0, r4, #11
 801134a:	1d23      	adds	r3, r4, #4
 801134c:	f020 0007 	bic.w	r0, r0, #7
 8011350:	1ac2      	subs	r2, r0, r3
 8011352:	bf1c      	itt	ne
 8011354:	1a1b      	subne	r3, r3, r0
 8011356:	50a3      	strne	r3, [r4, r2]
 8011358:	e7af      	b.n	80112ba <_malloc_r+0x22>
 801135a:	6862      	ldr	r2, [r4, #4]
 801135c:	42a3      	cmp	r3, r4
 801135e:	bf0c      	ite	eq
 8011360:	f8c8 2000 	streq.w	r2, [r8]
 8011364:	605a      	strne	r2, [r3, #4]
 8011366:	e7eb      	b.n	8011340 <_malloc_r+0xa8>
 8011368:	4623      	mov	r3, r4
 801136a:	6864      	ldr	r4, [r4, #4]
 801136c:	e7ae      	b.n	80112cc <_malloc_r+0x34>
 801136e:	463c      	mov	r4, r7
 8011370:	687f      	ldr	r7, [r7, #4]
 8011372:	e7b6      	b.n	80112e2 <_malloc_r+0x4a>
 8011374:	461a      	mov	r2, r3
 8011376:	685b      	ldr	r3, [r3, #4]
 8011378:	42a3      	cmp	r3, r4
 801137a:	d1fb      	bne.n	8011374 <_malloc_r+0xdc>
 801137c:	2300      	movs	r3, #0
 801137e:	6053      	str	r3, [r2, #4]
 8011380:	e7de      	b.n	8011340 <_malloc_r+0xa8>
 8011382:	230c      	movs	r3, #12
 8011384:	6033      	str	r3, [r6, #0]
 8011386:	4630      	mov	r0, r6
 8011388:	f000 f80c 	bl	80113a4 <__malloc_unlock>
 801138c:	e794      	b.n	80112b8 <_malloc_r+0x20>
 801138e:	6005      	str	r5, [r0, #0]
 8011390:	e7d6      	b.n	8011340 <_malloc_r+0xa8>
 8011392:	bf00      	nop
 8011394:	20004f68 	.word	0x20004f68

08011398 <__malloc_lock>:
 8011398:	4801      	ldr	r0, [pc, #4]	@ (80113a0 <__malloc_lock+0x8>)
 801139a:	f7ff beda 	b.w	8011152 <__retarget_lock_acquire_recursive>
 801139e:	bf00      	nop
 80113a0:	20004f60 	.word	0x20004f60

080113a4 <__malloc_unlock>:
 80113a4:	4801      	ldr	r0, [pc, #4]	@ (80113ac <__malloc_unlock+0x8>)
 80113a6:	f7ff bed5 	b.w	8011154 <__retarget_lock_release_recursive>
 80113aa:	bf00      	nop
 80113ac:	20004f60 	.word	0x20004f60

080113b0 <__ssputs_r>:
 80113b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113b4:	688e      	ldr	r6, [r1, #8]
 80113b6:	461f      	mov	r7, r3
 80113b8:	42be      	cmp	r6, r7
 80113ba:	680b      	ldr	r3, [r1, #0]
 80113bc:	4682      	mov	sl, r0
 80113be:	460c      	mov	r4, r1
 80113c0:	4690      	mov	r8, r2
 80113c2:	d82d      	bhi.n	8011420 <__ssputs_r+0x70>
 80113c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80113c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80113cc:	d026      	beq.n	801141c <__ssputs_r+0x6c>
 80113ce:	6965      	ldr	r5, [r4, #20]
 80113d0:	6909      	ldr	r1, [r1, #16]
 80113d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80113d6:	eba3 0901 	sub.w	r9, r3, r1
 80113da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80113de:	1c7b      	adds	r3, r7, #1
 80113e0:	444b      	add	r3, r9
 80113e2:	106d      	asrs	r5, r5, #1
 80113e4:	429d      	cmp	r5, r3
 80113e6:	bf38      	it	cc
 80113e8:	461d      	movcc	r5, r3
 80113ea:	0553      	lsls	r3, r2, #21
 80113ec:	d527      	bpl.n	801143e <__ssputs_r+0x8e>
 80113ee:	4629      	mov	r1, r5
 80113f0:	f7ff ff52 	bl	8011298 <_malloc_r>
 80113f4:	4606      	mov	r6, r0
 80113f6:	b360      	cbz	r0, 8011452 <__ssputs_r+0xa2>
 80113f8:	6921      	ldr	r1, [r4, #16]
 80113fa:	464a      	mov	r2, r9
 80113fc:	f7ff feab 	bl	8011156 <memcpy>
 8011400:	89a3      	ldrh	r3, [r4, #12]
 8011402:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801140a:	81a3      	strh	r3, [r4, #12]
 801140c:	6126      	str	r6, [r4, #16]
 801140e:	6165      	str	r5, [r4, #20]
 8011410:	444e      	add	r6, r9
 8011412:	eba5 0509 	sub.w	r5, r5, r9
 8011416:	6026      	str	r6, [r4, #0]
 8011418:	60a5      	str	r5, [r4, #8]
 801141a:	463e      	mov	r6, r7
 801141c:	42be      	cmp	r6, r7
 801141e:	d900      	bls.n	8011422 <__ssputs_r+0x72>
 8011420:	463e      	mov	r6, r7
 8011422:	6820      	ldr	r0, [r4, #0]
 8011424:	4632      	mov	r2, r6
 8011426:	4641      	mov	r1, r8
 8011428:	f000 fb66 	bl	8011af8 <memmove>
 801142c:	68a3      	ldr	r3, [r4, #8]
 801142e:	1b9b      	subs	r3, r3, r6
 8011430:	60a3      	str	r3, [r4, #8]
 8011432:	6823      	ldr	r3, [r4, #0]
 8011434:	4433      	add	r3, r6
 8011436:	6023      	str	r3, [r4, #0]
 8011438:	2000      	movs	r0, #0
 801143a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801143e:	462a      	mov	r2, r5
 8011440:	f000 fb8b 	bl	8011b5a <_realloc_r>
 8011444:	4606      	mov	r6, r0
 8011446:	2800      	cmp	r0, #0
 8011448:	d1e0      	bne.n	801140c <__ssputs_r+0x5c>
 801144a:	6921      	ldr	r1, [r4, #16]
 801144c:	4650      	mov	r0, sl
 801144e:	f7ff feaf 	bl	80111b0 <_free_r>
 8011452:	230c      	movs	r3, #12
 8011454:	f8ca 3000 	str.w	r3, [sl]
 8011458:	89a3      	ldrh	r3, [r4, #12]
 801145a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801145e:	81a3      	strh	r3, [r4, #12]
 8011460:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011464:	e7e9      	b.n	801143a <__ssputs_r+0x8a>
	...

08011468 <_svfiprintf_r>:
 8011468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146c:	4698      	mov	r8, r3
 801146e:	898b      	ldrh	r3, [r1, #12]
 8011470:	061b      	lsls	r3, r3, #24
 8011472:	b09d      	sub	sp, #116	@ 0x74
 8011474:	4607      	mov	r7, r0
 8011476:	460d      	mov	r5, r1
 8011478:	4614      	mov	r4, r2
 801147a:	d510      	bpl.n	801149e <_svfiprintf_r+0x36>
 801147c:	690b      	ldr	r3, [r1, #16]
 801147e:	b973      	cbnz	r3, 801149e <_svfiprintf_r+0x36>
 8011480:	2140      	movs	r1, #64	@ 0x40
 8011482:	f7ff ff09 	bl	8011298 <_malloc_r>
 8011486:	6028      	str	r0, [r5, #0]
 8011488:	6128      	str	r0, [r5, #16]
 801148a:	b930      	cbnz	r0, 801149a <_svfiprintf_r+0x32>
 801148c:	230c      	movs	r3, #12
 801148e:	603b      	str	r3, [r7, #0]
 8011490:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011494:	b01d      	add	sp, #116	@ 0x74
 8011496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801149a:	2340      	movs	r3, #64	@ 0x40
 801149c:	616b      	str	r3, [r5, #20]
 801149e:	2300      	movs	r3, #0
 80114a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80114a2:	2320      	movs	r3, #32
 80114a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80114a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80114ac:	2330      	movs	r3, #48	@ 0x30
 80114ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801164c <_svfiprintf_r+0x1e4>
 80114b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80114b6:	f04f 0901 	mov.w	r9, #1
 80114ba:	4623      	mov	r3, r4
 80114bc:	469a      	mov	sl, r3
 80114be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114c2:	b10a      	cbz	r2, 80114c8 <_svfiprintf_r+0x60>
 80114c4:	2a25      	cmp	r2, #37	@ 0x25
 80114c6:	d1f9      	bne.n	80114bc <_svfiprintf_r+0x54>
 80114c8:	ebba 0b04 	subs.w	fp, sl, r4
 80114cc:	d00b      	beq.n	80114e6 <_svfiprintf_r+0x7e>
 80114ce:	465b      	mov	r3, fp
 80114d0:	4622      	mov	r2, r4
 80114d2:	4629      	mov	r1, r5
 80114d4:	4638      	mov	r0, r7
 80114d6:	f7ff ff6b 	bl	80113b0 <__ssputs_r>
 80114da:	3001      	adds	r0, #1
 80114dc:	f000 80a7 	beq.w	801162e <_svfiprintf_r+0x1c6>
 80114e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114e2:	445a      	add	r2, fp
 80114e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80114e6:	f89a 3000 	ldrb.w	r3, [sl]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f000 809f 	beq.w	801162e <_svfiprintf_r+0x1c6>
 80114f0:	2300      	movs	r3, #0
 80114f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80114f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80114fa:	f10a 0a01 	add.w	sl, sl, #1
 80114fe:	9304      	str	r3, [sp, #16]
 8011500:	9307      	str	r3, [sp, #28]
 8011502:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011506:	931a      	str	r3, [sp, #104]	@ 0x68
 8011508:	4654      	mov	r4, sl
 801150a:	2205      	movs	r2, #5
 801150c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011510:	484e      	ldr	r0, [pc, #312]	@ (801164c <_svfiprintf_r+0x1e4>)
 8011512:	f7ee fe7d 	bl	8000210 <memchr>
 8011516:	9a04      	ldr	r2, [sp, #16]
 8011518:	b9d8      	cbnz	r0, 8011552 <_svfiprintf_r+0xea>
 801151a:	06d0      	lsls	r0, r2, #27
 801151c:	bf44      	itt	mi
 801151e:	2320      	movmi	r3, #32
 8011520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011524:	0711      	lsls	r1, r2, #28
 8011526:	bf44      	itt	mi
 8011528:	232b      	movmi	r3, #43	@ 0x2b
 801152a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801152e:	f89a 3000 	ldrb.w	r3, [sl]
 8011532:	2b2a      	cmp	r3, #42	@ 0x2a
 8011534:	d015      	beq.n	8011562 <_svfiprintf_r+0xfa>
 8011536:	9a07      	ldr	r2, [sp, #28]
 8011538:	4654      	mov	r4, sl
 801153a:	2000      	movs	r0, #0
 801153c:	f04f 0c0a 	mov.w	ip, #10
 8011540:	4621      	mov	r1, r4
 8011542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011546:	3b30      	subs	r3, #48	@ 0x30
 8011548:	2b09      	cmp	r3, #9
 801154a:	d94b      	bls.n	80115e4 <_svfiprintf_r+0x17c>
 801154c:	b1b0      	cbz	r0, 801157c <_svfiprintf_r+0x114>
 801154e:	9207      	str	r2, [sp, #28]
 8011550:	e014      	b.n	801157c <_svfiprintf_r+0x114>
 8011552:	eba0 0308 	sub.w	r3, r0, r8
 8011556:	fa09 f303 	lsl.w	r3, r9, r3
 801155a:	4313      	orrs	r3, r2
 801155c:	9304      	str	r3, [sp, #16]
 801155e:	46a2      	mov	sl, r4
 8011560:	e7d2      	b.n	8011508 <_svfiprintf_r+0xa0>
 8011562:	9b03      	ldr	r3, [sp, #12]
 8011564:	1d19      	adds	r1, r3, #4
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	9103      	str	r1, [sp, #12]
 801156a:	2b00      	cmp	r3, #0
 801156c:	bfbb      	ittet	lt
 801156e:	425b      	neglt	r3, r3
 8011570:	f042 0202 	orrlt.w	r2, r2, #2
 8011574:	9307      	strge	r3, [sp, #28]
 8011576:	9307      	strlt	r3, [sp, #28]
 8011578:	bfb8      	it	lt
 801157a:	9204      	strlt	r2, [sp, #16]
 801157c:	7823      	ldrb	r3, [r4, #0]
 801157e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011580:	d10a      	bne.n	8011598 <_svfiprintf_r+0x130>
 8011582:	7863      	ldrb	r3, [r4, #1]
 8011584:	2b2a      	cmp	r3, #42	@ 0x2a
 8011586:	d132      	bne.n	80115ee <_svfiprintf_r+0x186>
 8011588:	9b03      	ldr	r3, [sp, #12]
 801158a:	1d1a      	adds	r2, r3, #4
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	9203      	str	r2, [sp, #12]
 8011590:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011594:	3402      	adds	r4, #2
 8011596:	9305      	str	r3, [sp, #20]
 8011598:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801165c <_svfiprintf_r+0x1f4>
 801159c:	7821      	ldrb	r1, [r4, #0]
 801159e:	2203      	movs	r2, #3
 80115a0:	4650      	mov	r0, sl
 80115a2:	f7ee fe35 	bl	8000210 <memchr>
 80115a6:	b138      	cbz	r0, 80115b8 <_svfiprintf_r+0x150>
 80115a8:	9b04      	ldr	r3, [sp, #16]
 80115aa:	eba0 000a 	sub.w	r0, r0, sl
 80115ae:	2240      	movs	r2, #64	@ 0x40
 80115b0:	4082      	lsls	r2, r0
 80115b2:	4313      	orrs	r3, r2
 80115b4:	3401      	adds	r4, #1
 80115b6:	9304      	str	r3, [sp, #16]
 80115b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115bc:	4824      	ldr	r0, [pc, #144]	@ (8011650 <_svfiprintf_r+0x1e8>)
 80115be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80115c2:	2206      	movs	r2, #6
 80115c4:	f7ee fe24 	bl	8000210 <memchr>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d036      	beq.n	801163a <_svfiprintf_r+0x1d2>
 80115cc:	4b21      	ldr	r3, [pc, #132]	@ (8011654 <_svfiprintf_r+0x1ec>)
 80115ce:	bb1b      	cbnz	r3, 8011618 <_svfiprintf_r+0x1b0>
 80115d0:	9b03      	ldr	r3, [sp, #12]
 80115d2:	3307      	adds	r3, #7
 80115d4:	f023 0307 	bic.w	r3, r3, #7
 80115d8:	3308      	adds	r3, #8
 80115da:	9303      	str	r3, [sp, #12]
 80115dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80115de:	4433      	add	r3, r6
 80115e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80115e2:	e76a      	b.n	80114ba <_svfiprintf_r+0x52>
 80115e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80115e8:	460c      	mov	r4, r1
 80115ea:	2001      	movs	r0, #1
 80115ec:	e7a8      	b.n	8011540 <_svfiprintf_r+0xd8>
 80115ee:	2300      	movs	r3, #0
 80115f0:	3401      	adds	r4, #1
 80115f2:	9305      	str	r3, [sp, #20]
 80115f4:	4619      	mov	r1, r3
 80115f6:	f04f 0c0a 	mov.w	ip, #10
 80115fa:	4620      	mov	r0, r4
 80115fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011600:	3a30      	subs	r2, #48	@ 0x30
 8011602:	2a09      	cmp	r2, #9
 8011604:	d903      	bls.n	801160e <_svfiprintf_r+0x1a6>
 8011606:	2b00      	cmp	r3, #0
 8011608:	d0c6      	beq.n	8011598 <_svfiprintf_r+0x130>
 801160a:	9105      	str	r1, [sp, #20]
 801160c:	e7c4      	b.n	8011598 <_svfiprintf_r+0x130>
 801160e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011612:	4604      	mov	r4, r0
 8011614:	2301      	movs	r3, #1
 8011616:	e7f0      	b.n	80115fa <_svfiprintf_r+0x192>
 8011618:	ab03      	add	r3, sp, #12
 801161a:	9300      	str	r3, [sp, #0]
 801161c:	462a      	mov	r2, r5
 801161e:	4b0e      	ldr	r3, [pc, #56]	@ (8011658 <_svfiprintf_r+0x1f0>)
 8011620:	a904      	add	r1, sp, #16
 8011622:	4638      	mov	r0, r7
 8011624:	f3af 8000 	nop.w
 8011628:	1c42      	adds	r2, r0, #1
 801162a:	4606      	mov	r6, r0
 801162c:	d1d6      	bne.n	80115dc <_svfiprintf_r+0x174>
 801162e:	89ab      	ldrh	r3, [r5, #12]
 8011630:	065b      	lsls	r3, r3, #25
 8011632:	f53f af2d 	bmi.w	8011490 <_svfiprintf_r+0x28>
 8011636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011638:	e72c      	b.n	8011494 <_svfiprintf_r+0x2c>
 801163a:	ab03      	add	r3, sp, #12
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	462a      	mov	r2, r5
 8011640:	4b05      	ldr	r3, [pc, #20]	@ (8011658 <_svfiprintf_r+0x1f0>)
 8011642:	a904      	add	r1, sp, #16
 8011644:	4638      	mov	r0, r7
 8011646:	f000 f879 	bl	801173c <_printf_i>
 801164a:	e7ed      	b.n	8011628 <_svfiprintf_r+0x1c0>
 801164c:	0802069f 	.word	0x0802069f
 8011650:	080206a9 	.word	0x080206a9
 8011654:	00000000 	.word	0x00000000
 8011658:	080113b1 	.word	0x080113b1
 801165c:	080206a5 	.word	0x080206a5

08011660 <_printf_common>:
 8011660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011664:	4616      	mov	r6, r2
 8011666:	4698      	mov	r8, r3
 8011668:	688a      	ldr	r2, [r1, #8]
 801166a:	690b      	ldr	r3, [r1, #16]
 801166c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011670:	4293      	cmp	r3, r2
 8011672:	bfb8      	it	lt
 8011674:	4613      	movlt	r3, r2
 8011676:	6033      	str	r3, [r6, #0]
 8011678:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801167c:	4607      	mov	r7, r0
 801167e:	460c      	mov	r4, r1
 8011680:	b10a      	cbz	r2, 8011686 <_printf_common+0x26>
 8011682:	3301      	adds	r3, #1
 8011684:	6033      	str	r3, [r6, #0]
 8011686:	6823      	ldr	r3, [r4, #0]
 8011688:	0699      	lsls	r1, r3, #26
 801168a:	bf42      	ittt	mi
 801168c:	6833      	ldrmi	r3, [r6, #0]
 801168e:	3302      	addmi	r3, #2
 8011690:	6033      	strmi	r3, [r6, #0]
 8011692:	6825      	ldr	r5, [r4, #0]
 8011694:	f015 0506 	ands.w	r5, r5, #6
 8011698:	d106      	bne.n	80116a8 <_printf_common+0x48>
 801169a:	f104 0a19 	add.w	sl, r4, #25
 801169e:	68e3      	ldr	r3, [r4, #12]
 80116a0:	6832      	ldr	r2, [r6, #0]
 80116a2:	1a9b      	subs	r3, r3, r2
 80116a4:	42ab      	cmp	r3, r5
 80116a6:	dc26      	bgt.n	80116f6 <_printf_common+0x96>
 80116a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80116ac:	6822      	ldr	r2, [r4, #0]
 80116ae:	3b00      	subs	r3, #0
 80116b0:	bf18      	it	ne
 80116b2:	2301      	movne	r3, #1
 80116b4:	0692      	lsls	r2, r2, #26
 80116b6:	d42b      	bmi.n	8011710 <_printf_common+0xb0>
 80116b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80116bc:	4641      	mov	r1, r8
 80116be:	4638      	mov	r0, r7
 80116c0:	47c8      	blx	r9
 80116c2:	3001      	adds	r0, #1
 80116c4:	d01e      	beq.n	8011704 <_printf_common+0xa4>
 80116c6:	6823      	ldr	r3, [r4, #0]
 80116c8:	6922      	ldr	r2, [r4, #16]
 80116ca:	f003 0306 	and.w	r3, r3, #6
 80116ce:	2b04      	cmp	r3, #4
 80116d0:	bf02      	ittt	eq
 80116d2:	68e5      	ldreq	r5, [r4, #12]
 80116d4:	6833      	ldreq	r3, [r6, #0]
 80116d6:	1aed      	subeq	r5, r5, r3
 80116d8:	68a3      	ldr	r3, [r4, #8]
 80116da:	bf0c      	ite	eq
 80116dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80116e0:	2500      	movne	r5, #0
 80116e2:	4293      	cmp	r3, r2
 80116e4:	bfc4      	itt	gt
 80116e6:	1a9b      	subgt	r3, r3, r2
 80116e8:	18ed      	addgt	r5, r5, r3
 80116ea:	2600      	movs	r6, #0
 80116ec:	341a      	adds	r4, #26
 80116ee:	42b5      	cmp	r5, r6
 80116f0:	d11a      	bne.n	8011728 <_printf_common+0xc8>
 80116f2:	2000      	movs	r0, #0
 80116f4:	e008      	b.n	8011708 <_printf_common+0xa8>
 80116f6:	2301      	movs	r3, #1
 80116f8:	4652      	mov	r2, sl
 80116fa:	4641      	mov	r1, r8
 80116fc:	4638      	mov	r0, r7
 80116fe:	47c8      	blx	r9
 8011700:	3001      	adds	r0, #1
 8011702:	d103      	bne.n	801170c <_printf_common+0xac>
 8011704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801170c:	3501      	adds	r5, #1
 801170e:	e7c6      	b.n	801169e <_printf_common+0x3e>
 8011710:	18e1      	adds	r1, r4, r3
 8011712:	1c5a      	adds	r2, r3, #1
 8011714:	2030      	movs	r0, #48	@ 0x30
 8011716:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801171a:	4422      	add	r2, r4
 801171c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011724:	3302      	adds	r3, #2
 8011726:	e7c7      	b.n	80116b8 <_printf_common+0x58>
 8011728:	2301      	movs	r3, #1
 801172a:	4622      	mov	r2, r4
 801172c:	4641      	mov	r1, r8
 801172e:	4638      	mov	r0, r7
 8011730:	47c8      	blx	r9
 8011732:	3001      	adds	r0, #1
 8011734:	d0e6      	beq.n	8011704 <_printf_common+0xa4>
 8011736:	3601      	adds	r6, #1
 8011738:	e7d9      	b.n	80116ee <_printf_common+0x8e>
	...

0801173c <_printf_i>:
 801173c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011740:	7e0f      	ldrb	r7, [r1, #24]
 8011742:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011744:	2f78      	cmp	r7, #120	@ 0x78
 8011746:	4691      	mov	r9, r2
 8011748:	4680      	mov	r8, r0
 801174a:	460c      	mov	r4, r1
 801174c:	469a      	mov	sl, r3
 801174e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011752:	d807      	bhi.n	8011764 <_printf_i+0x28>
 8011754:	2f62      	cmp	r7, #98	@ 0x62
 8011756:	d80a      	bhi.n	801176e <_printf_i+0x32>
 8011758:	2f00      	cmp	r7, #0
 801175a:	f000 80d2 	beq.w	8011902 <_printf_i+0x1c6>
 801175e:	2f58      	cmp	r7, #88	@ 0x58
 8011760:	f000 80b9 	beq.w	80118d6 <_printf_i+0x19a>
 8011764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801176c:	e03a      	b.n	80117e4 <_printf_i+0xa8>
 801176e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011772:	2b15      	cmp	r3, #21
 8011774:	d8f6      	bhi.n	8011764 <_printf_i+0x28>
 8011776:	a101      	add	r1, pc, #4	@ (adr r1, 801177c <_printf_i+0x40>)
 8011778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801177c:	080117d5 	.word	0x080117d5
 8011780:	080117e9 	.word	0x080117e9
 8011784:	08011765 	.word	0x08011765
 8011788:	08011765 	.word	0x08011765
 801178c:	08011765 	.word	0x08011765
 8011790:	08011765 	.word	0x08011765
 8011794:	080117e9 	.word	0x080117e9
 8011798:	08011765 	.word	0x08011765
 801179c:	08011765 	.word	0x08011765
 80117a0:	08011765 	.word	0x08011765
 80117a4:	08011765 	.word	0x08011765
 80117a8:	080118e9 	.word	0x080118e9
 80117ac:	08011813 	.word	0x08011813
 80117b0:	080118a3 	.word	0x080118a3
 80117b4:	08011765 	.word	0x08011765
 80117b8:	08011765 	.word	0x08011765
 80117bc:	0801190b 	.word	0x0801190b
 80117c0:	08011765 	.word	0x08011765
 80117c4:	08011813 	.word	0x08011813
 80117c8:	08011765 	.word	0x08011765
 80117cc:	08011765 	.word	0x08011765
 80117d0:	080118ab 	.word	0x080118ab
 80117d4:	6833      	ldr	r3, [r6, #0]
 80117d6:	1d1a      	adds	r2, r3, #4
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	6032      	str	r2, [r6, #0]
 80117dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80117e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80117e4:	2301      	movs	r3, #1
 80117e6:	e09d      	b.n	8011924 <_printf_i+0x1e8>
 80117e8:	6833      	ldr	r3, [r6, #0]
 80117ea:	6820      	ldr	r0, [r4, #0]
 80117ec:	1d19      	adds	r1, r3, #4
 80117ee:	6031      	str	r1, [r6, #0]
 80117f0:	0606      	lsls	r6, r0, #24
 80117f2:	d501      	bpl.n	80117f8 <_printf_i+0xbc>
 80117f4:	681d      	ldr	r5, [r3, #0]
 80117f6:	e003      	b.n	8011800 <_printf_i+0xc4>
 80117f8:	0645      	lsls	r5, r0, #25
 80117fa:	d5fb      	bpl.n	80117f4 <_printf_i+0xb8>
 80117fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011800:	2d00      	cmp	r5, #0
 8011802:	da03      	bge.n	801180c <_printf_i+0xd0>
 8011804:	232d      	movs	r3, #45	@ 0x2d
 8011806:	426d      	negs	r5, r5
 8011808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801180c:	4859      	ldr	r0, [pc, #356]	@ (8011974 <_printf_i+0x238>)
 801180e:	230a      	movs	r3, #10
 8011810:	e011      	b.n	8011836 <_printf_i+0xfa>
 8011812:	6821      	ldr	r1, [r4, #0]
 8011814:	6833      	ldr	r3, [r6, #0]
 8011816:	0608      	lsls	r0, r1, #24
 8011818:	f853 5b04 	ldr.w	r5, [r3], #4
 801181c:	d402      	bmi.n	8011824 <_printf_i+0xe8>
 801181e:	0649      	lsls	r1, r1, #25
 8011820:	bf48      	it	mi
 8011822:	b2ad      	uxthmi	r5, r5
 8011824:	2f6f      	cmp	r7, #111	@ 0x6f
 8011826:	4853      	ldr	r0, [pc, #332]	@ (8011974 <_printf_i+0x238>)
 8011828:	6033      	str	r3, [r6, #0]
 801182a:	bf14      	ite	ne
 801182c:	230a      	movne	r3, #10
 801182e:	2308      	moveq	r3, #8
 8011830:	2100      	movs	r1, #0
 8011832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011836:	6866      	ldr	r6, [r4, #4]
 8011838:	60a6      	str	r6, [r4, #8]
 801183a:	2e00      	cmp	r6, #0
 801183c:	bfa2      	ittt	ge
 801183e:	6821      	ldrge	r1, [r4, #0]
 8011840:	f021 0104 	bicge.w	r1, r1, #4
 8011844:	6021      	strge	r1, [r4, #0]
 8011846:	b90d      	cbnz	r5, 801184c <_printf_i+0x110>
 8011848:	2e00      	cmp	r6, #0
 801184a:	d04b      	beq.n	80118e4 <_printf_i+0x1a8>
 801184c:	4616      	mov	r6, r2
 801184e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011852:	fb03 5711 	mls	r7, r3, r1, r5
 8011856:	5dc7      	ldrb	r7, [r0, r7]
 8011858:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801185c:	462f      	mov	r7, r5
 801185e:	42bb      	cmp	r3, r7
 8011860:	460d      	mov	r5, r1
 8011862:	d9f4      	bls.n	801184e <_printf_i+0x112>
 8011864:	2b08      	cmp	r3, #8
 8011866:	d10b      	bne.n	8011880 <_printf_i+0x144>
 8011868:	6823      	ldr	r3, [r4, #0]
 801186a:	07df      	lsls	r7, r3, #31
 801186c:	d508      	bpl.n	8011880 <_printf_i+0x144>
 801186e:	6923      	ldr	r3, [r4, #16]
 8011870:	6861      	ldr	r1, [r4, #4]
 8011872:	4299      	cmp	r1, r3
 8011874:	bfde      	ittt	le
 8011876:	2330      	movle	r3, #48	@ 0x30
 8011878:	f806 3c01 	strble.w	r3, [r6, #-1]
 801187c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011880:	1b92      	subs	r2, r2, r6
 8011882:	6122      	str	r2, [r4, #16]
 8011884:	f8cd a000 	str.w	sl, [sp]
 8011888:	464b      	mov	r3, r9
 801188a:	aa03      	add	r2, sp, #12
 801188c:	4621      	mov	r1, r4
 801188e:	4640      	mov	r0, r8
 8011890:	f7ff fee6 	bl	8011660 <_printf_common>
 8011894:	3001      	adds	r0, #1
 8011896:	d14a      	bne.n	801192e <_printf_i+0x1f2>
 8011898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801189c:	b004      	add	sp, #16
 801189e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118a2:	6823      	ldr	r3, [r4, #0]
 80118a4:	f043 0320 	orr.w	r3, r3, #32
 80118a8:	6023      	str	r3, [r4, #0]
 80118aa:	4833      	ldr	r0, [pc, #204]	@ (8011978 <_printf_i+0x23c>)
 80118ac:	2778      	movs	r7, #120	@ 0x78
 80118ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80118b2:	6823      	ldr	r3, [r4, #0]
 80118b4:	6831      	ldr	r1, [r6, #0]
 80118b6:	061f      	lsls	r7, r3, #24
 80118b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80118bc:	d402      	bmi.n	80118c4 <_printf_i+0x188>
 80118be:	065f      	lsls	r7, r3, #25
 80118c0:	bf48      	it	mi
 80118c2:	b2ad      	uxthmi	r5, r5
 80118c4:	6031      	str	r1, [r6, #0]
 80118c6:	07d9      	lsls	r1, r3, #31
 80118c8:	bf44      	itt	mi
 80118ca:	f043 0320 	orrmi.w	r3, r3, #32
 80118ce:	6023      	strmi	r3, [r4, #0]
 80118d0:	b11d      	cbz	r5, 80118da <_printf_i+0x19e>
 80118d2:	2310      	movs	r3, #16
 80118d4:	e7ac      	b.n	8011830 <_printf_i+0xf4>
 80118d6:	4827      	ldr	r0, [pc, #156]	@ (8011974 <_printf_i+0x238>)
 80118d8:	e7e9      	b.n	80118ae <_printf_i+0x172>
 80118da:	6823      	ldr	r3, [r4, #0]
 80118dc:	f023 0320 	bic.w	r3, r3, #32
 80118e0:	6023      	str	r3, [r4, #0]
 80118e2:	e7f6      	b.n	80118d2 <_printf_i+0x196>
 80118e4:	4616      	mov	r6, r2
 80118e6:	e7bd      	b.n	8011864 <_printf_i+0x128>
 80118e8:	6833      	ldr	r3, [r6, #0]
 80118ea:	6825      	ldr	r5, [r4, #0]
 80118ec:	6961      	ldr	r1, [r4, #20]
 80118ee:	1d18      	adds	r0, r3, #4
 80118f0:	6030      	str	r0, [r6, #0]
 80118f2:	062e      	lsls	r6, r5, #24
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	d501      	bpl.n	80118fc <_printf_i+0x1c0>
 80118f8:	6019      	str	r1, [r3, #0]
 80118fa:	e002      	b.n	8011902 <_printf_i+0x1c6>
 80118fc:	0668      	lsls	r0, r5, #25
 80118fe:	d5fb      	bpl.n	80118f8 <_printf_i+0x1bc>
 8011900:	8019      	strh	r1, [r3, #0]
 8011902:	2300      	movs	r3, #0
 8011904:	6123      	str	r3, [r4, #16]
 8011906:	4616      	mov	r6, r2
 8011908:	e7bc      	b.n	8011884 <_printf_i+0x148>
 801190a:	6833      	ldr	r3, [r6, #0]
 801190c:	1d1a      	adds	r2, r3, #4
 801190e:	6032      	str	r2, [r6, #0]
 8011910:	681e      	ldr	r6, [r3, #0]
 8011912:	6862      	ldr	r2, [r4, #4]
 8011914:	2100      	movs	r1, #0
 8011916:	4630      	mov	r0, r6
 8011918:	f7ee fc7a 	bl	8000210 <memchr>
 801191c:	b108      	cbz	r0, 8011922 <_printf_i+0x1e6>
 801191e:	1b80      	subs	r0, r0, r6
 8011920:	6060      	str	r0, [r4, #4]
 8011922:	6863      	ldr	r3, [r4, #4]
 8011924:	6123      	str	r3, [r4, #16]
 8011926:	2300      	movs	r3, #0
 8011928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801192c:	e7aa      	b.n	8011884 <_printf_i+0x148>
 801192e:	6923      	ldr	r3, [r4, #16]
 8011930:	4632      	mov	r2, r6
 8011932:	4649      	mov	r1, r9
 8011934:	4640      	mov	r0, r8
 8011936:	47d0      	blx	sl
 8011938:	3001      	adds	r0, #1
 801193a:	d0ad      	beq.n	8011898 <_printf_i+0x15c>
 801193c:	6823      	ldr	r3, [r4, #0]
 801193e:	079b      	lsls	r3, r3, #30
 8011940:	d413      	bmi.n	801196a <_printf_i+0x22e>
 8011942:	68e0      	ldr	r0, [r4, #12]
 8011944:	9b03      	ldr	r3, [sp, #12]
 8011946:	4298      	cmp	r0, r3
 8011948:	bfb8      	it	lt
 801194a:	4618      	movlt	r0, r3
 801194c:	e7a6      	b.n	801189c <_printf_i+0x160>
 801194e:	2301      	movs	r3, #1
 8011950:	4632      	mov	r2, r6
 8011952:	4649      	mov	r1, r9
 8011954:	4640      	mov	r0, r8
 8011956:	47d0      	blx	sl
 8011958:	3001      	adds	r0, #1
 801195a:	d09d      	beq.n	8011898 <_printf_i+0x15c>
 801195c:	3501      	adds	r5, #1
 801195e:	68e3      	ldr	r3, [r4, #12]
 8011960:	9903      	ldr	r1, [sp, #12]
 8011962:	1a5b      	subs	r3, r3, r1
 8011964:	42ab      	cmp	r3, r5
 8011966:	dcf2      	bgt.n	801194e <_printf_i+0x212>
 8011968:	e7eb      	b.n	8011942 <_printf_i+0x206>
 801196a:	2500      	movs	r5, #0
 801196c:	f104 0619 	add.w	r6, r4, #25
 8011970:	e7f5      	b.n	801195e <_printf_i+0x222>
 8011972:	bf00      	nop
 8011974:	080206b0 	.word	0x080206b0
 8011978:	080206c1 	.word	0x080206c1

0801197c <__sflush_r>:
 801197c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011984:	0716      	lsls	r6, r2, #28
 8011986:	4605      	mov	r5, r0
 8011988:	460c      	mov	r4, r1
 801198a:	d454      	bmi.n	8011a36 <__sflush_r+0xba>
 801198c:	684b      	ldr	r3, [r1, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	dc02      	bgt.n	8011998 <__sflush_r+0x1c>
 8011992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011994:	2b00      	cmp	r3, #0
 8011996:	dd48      	ble.n	8011a2a <__sflush_r+0xae>
 8011998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801199a:	2e00      	cmp	r6, #0
 801199c:	d045      	beq.n	8011a2a <__sflush_r+0xae>
 801199e:	2300      	movs	r3, #0
 80119a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80119a4:	682f      	ldr	r7, [r5, #0]
 80119a6:	6a21      	ldr	r1, [r4, #32]
 80119a8:	602b      	str	r3, [r5, #0]
 80119aa:	d030      	beq.n	8011a0e <__sflush_r+0x92>
 80119ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80119ae:	89a3      	ldrh	r3, [r4, #12]
 80119b0:	0759      	lsls	r1, r3, #29
 80119b2:	d505      	bpl.n	80119c0 <__sflush_r+0x44>
 80119b4:	6863      	ldr	r3, [r4, #4]
 80119b6:	1ad2      	subs	r2, r2, r3
 80119b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80119ba:	b10b      	cbz	r3, 80119c0 <__sflush_r+0x44>
 80119bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80119be:	1ad2      	subs	r2, r2, r3
 80119c0:	2300      	movs	r3, #0
 80119c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80119c4:	6a21      	ldr	r1, [r4, #32]
 80119c6:	4628      	mov	r0, r5
 80119c8:	47b0      	blx	r6
 80119ca:	1c43      	adds	r3, r0, #1
 80119cc:	89a3      	ldrh	r3, [r4, #12]
 80119ce:	d106      	bne.n	80119de <__sflush_r+0x62>
 80119d0:	6829      	ldr	r1, [r5, #0]
 80119d2:	291d      	cmp	r1, #29
 80119d4:	d82b      	bhi.n	8011a2e <__sflush_r+0xb2>
 80119d6:	4a2a      	ldr	r2, [pc, #168]	@ (8011a80 <__sflush_r+0x104>)
 80119d8:	410a      	asrs	r2, r1
 80119da:	07d6      	lsls	r6, r2, #31
 80119dc:	d427      	bmi.n	8011a2e <__sflush_r+0xb2>
 80119de:	2200      	movs	r2, #0
 80119e0:	6062      	str	r2, [r4, #4]
 80119e2:	04d9      	lsls	r1, r3, #19
 80119e4:	6922      	ldr	r2, [r4, #16]
 80119e6:	6022      	str	r2, [r4, #0]
 80119e8:	d504      	bpl.n	80119f4 <__sflush_r+0x78>
 80119ea:	1c42      	adds	r2, r0, #1
 80119ec:	d101      	bne.n	80119f2 <__sflush_r+0x76>
 80119ee:	682b      	ldr	r3, [r5, #0]
 80119f0:	b903      	cbnz	r3, 80119f4 <__sflush_r+0x78>
 80119f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80119f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80119f6:	602f      	str	r7, [r5, #0]
 80119f8:	b1b9      	cbz	r1, 8011a2a <__sflush_r+0xae>
 80119fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80119fe:	4299      	cmp	r1, r3
 8011a00:	d002      	beq.n	8011a08 <__sflush_r+0x8c>
 8011a02:	4628      	mov	r0, r5
 8011a04:	f7ff fbd4 	bl	80111b0 <_free_r>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a0c:	e00d      	b.n	8011a2a <__sflush_r+0xae>
 8011a0e:	2301      	movs	r3, #1
 8011a10:	4628      	mov	r0, r5
 8011a12:	47b0      	blx	r6
 8011a14:	4602      	mov	r2, r0
 8011a16:	1c50      	adds	r0, r2, #1
 8011a18:	d1c9      	bne.n	80119ae <__sflush_r+0x32>
 8011a1a:	682b      	ldr	r3, [r5, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d0c6      	beq.n	80119ae <__sflush_r+0x32>
 8011a20:	2b1d      	cmp	r3, #29
 8011a22:	d001      	beq.n	8011a28 <__sflush_r+0xac>
 8011a24:	2b16      	cmp	r3, #22
 8011a26:	d11e      	bne.n	8011a66 <__sflush_r+0xea>
 8011a28:	602f      	str	r7, [r5, #0]
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	e022      	b.n	8011a74 <__sflush_r+0xf8>
 8011a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a32:	b21b      	sxth	r3, r3
 8011a34:	e01b      	b.n	8011a6e <__sflush_r+0xf2>
 8011a36:	690f      	ldr	r7, [r1, #16]
 8011a38:	2f00      	cmp	r7, #0
 8011a3a:	d0f6      	beq.n	8011a2a <__sflush_r+0xae>
 8011a3c:	0793      	lsls	r3, r2, #30
 8011a3e:	680e      	ldr	r6, [r1, #0]
 8011a40:	bf08      	it	eq
 8011a42:	694b      	ldreq	r3, [r1, #20]
 8011a44:	600f      	str	r7, [r1, #0]
 8011a46:	bf18      	it	ne
 8011a48:	2300      	movne	r3, #0
 8011a4a:	eba6 0807 	sub.w	r8, r6, r7
 8011a4e:	608b      	str	r3, [r1, #8]
 8011a50:	f1b8 0f00 	cmp.w	r8, #0
 8011a54:	dde9      	ble.n	8011a2a <__sflush_r+0xae>
 8011a56:	6a21      	ldr	r1, [r4, #32]
 8011a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011a5a:	4643      	mov	r3, r8
 8011a5c:	463a      	mov	r2, r7
 8011a5e:	4628      	mov	r0, r5
 8011a60:	47b0      	blx	r6
 8011a62:	2800      	cmp	r0, #0
 8011a64:	dc08      	bgt.n	8011a78 <__sflush_r+0xfc>
 8011a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a6e:	81a3      	strh	r3, [r4, #12]
 8011a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a78:	4407      	add	r7, r0
 8011a7a:	eba8 0800 	sub.w	r8, r8, r0
 8011a7e:	e7e7      	b.n	8011a50 <__sflush_r+0xd4>
 8011a80:	dfbffffe 	.word	0xdfbffffe

08011a84 <_fflush_r>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	690b      	ldr	r3, [r1, #16]
 8011a88:	4605      	mov	r5, r0
 8011a8a:	460c      	mov	r4, r1
 8011a8c:	b913      	cbnz	r3, 8011a94 <_fflush_r+0x10>
 8011a8e:	2500      	movs	r5, #0
 8011a90:	4628      	mov	r0, r5
 8011a92:	bd38      	pop	{r3, r4, r5, pc}
 8011a94:	b118      	cbz	r0, 8011a9e <_fflush_r+0x1a>
 8011a96:	6a03      	ldr	r3, [r0, #32]
 8011a98:	b90b      	cbnz	r3, 8011a9e <_fflush_r+0x1a>
 8011a9a:	f7ff f9f1 	bl	8010e80 <__sinit>
 8011a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d0f3      	beq.n	8011a8e <_fflush_r+0xa>
 8011aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011aa8:	07d0      	lsls	r0, r2, #31
 8011aaa:	d404      	bmi.n	8011ab6 <_fflush_r+0x32>
 8011aac:	0599      	lsls	r1, r3, #22
 8011aae:	d402      	bmi.n	8011ab6 <_fflush_r+0x32>
 8011ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ab2:	f7ff fb4e 	bl	8011152 <__retarget_lock_acquire_recursive>
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	4621      	mov	r1, r4
 8011aba:	f7ff ff5f 	bl	801197c <__sflush_r>
 8011abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ac0:	07da      	lsls	r2, r3, #31
 8011ac2:	4605      	mov	r5, r0
 8011ac4:	d4e4      	bmi.n	8011a90 <_fflush_r+0xc>
 8011ac6:	89a3      	ldrh	r3, [r4, #12]
 8011ac8:	059b      	lsls	r3, r3, #22
 8011aca:	d4e1      	bmi.n	8011a90 <_fflush_r+0xc>
 8011acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ace:	f7ff fb41 	bl	8011154 <__retarget_lock_release_recursive>
 8011ad2:	e7dd      	b.n	8011a90 <_fflush_r+0xc>

08011ad4 <fiprintf>:
 8011ad4:	b40e      	push	{r1, r2, r3}
 8011ad6:	b503      	push	{r0, r1, lr}
 8011ad8:	4601      	mov	r1, r0
 8011ada:	ab03      	add	r3, sp, #12
 8011adc:	4805      	ldr	r0, [pc, #20]	@ (8011af4 <fiprintf+0x20>)
 8011ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ae2:	6800      	ldr	r0, [r0, #0]
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	f000 f88f 	bl	8011c08 <_vfiprintf_r>
 8011aea:	b002      	add	sp, #8
 8011aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8011af0:	b003      	add	sp, #12
 8011af2:	4770      	bx	lr
 8011af4:	20000064 	.word	0x20000064

08011af8 <memmove>:
 8011af8:	4288      	cmp	r0, r1
 8011afa:	b510      	push	{r4, lr}
 8011afc:	eb01 0402 	add.w	r4, r1, r2
 8011b00:	d902      	bls.n	8011b08 <memmove+0x10>
 8011b02:	4284      	cmp	r4, r0
 8011b04:	4623      	mov	r3, r4
 8011b06:	d807      	bhi.n	8011b18 <memmove+0x20>
 8011b08:	1e43      	subs	r3, r0, #1
 8011b0a:	42a1      	cmp	r1, r4
 8011b0c:	d008      	beq.n	8011b20 <memmove+0x28>
 8011b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b16:	e7f8      	b.n	8011b0a <memmove+0x12>
 8011b18:	4402      	add	r2, r0
 8011b1a:	4601      	mov	r1, r0
 8011b1c:	428a      	cmp	r2, r1
 8011b1e:	d100      	bne.n	8011b22 <memmove+0x2a>
 8011b20:	bd10      	pop	{r4, pc}
 8011b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011b2a:	e7f7      	b.n	8011b1c <memmove+0x24>

08011b2c <_sbrk_r>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	4d06      	ldr	r5, [pc, #24]	@ (8011b48 <_sbrk_r+0x1c>)
 8011b30:	2300      	movs	r3, #0
 8011b32:	4604      	mov	r4, r0
 8011b34:	4608      	mov	r0, r1
 8011b36:	602b      	str	r3, [r5, #0]
 8011b38:	f7f3 fd42 	bl	80055c0 <_sbrk>
 8011b3c:	1c43      	adds	r3, r0, #1
 8011b3e:	d102      	bne.n	8011b46 <_sbrk_r+0x1a>
 8011b40:	682b      	ldr	r3, [r5, #0]
 8011b42:	b103      	cbz	r3, 8011b46 <_sbrk_r+0x1a>
 8011b44:	6023      	str	r3, [r4, #0]
 8011b46:	bd38      	pop	{r3, r4, r5, pc}
 8011b48:	20004f5c 	.word	0x20004f5c

08011b4c <abort>:
 8011b4c:	b508      	push	{r3, lr}
 8011b4e:	2006      	movs	r0, #6
 8011b50:	f000 fa2e 	bl	8011fb0 <raise>
 8011b54:	2001      	movs	r0, #1
 8011b56:	f7f3 fcbb 	bl	80054d0 <_exit>

08011b5a <_realloc_r>:
 8011b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b5e:	4680      	mov	r8, r0
 8011b60:	4615      	mov	r5, r2
 8011b62:	460c      	mov	r4, r1
 8011b64:	b921      	cbnz	r1, 8011b70 <_realloc_r+0x16>
 8011b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	f7ff bb94 	b.w	8011298 <_malloc_r>
 8011b70:	b92a      	cbnz	r2, 8011b7e <_realloc_r+0x24>
 8011b72:	f7ff fb1d 	bl	80111b0 <_free_r>
 8011b76:	2400      	movs	r4, #0
 8011b78:	4620      	mov	r0, r4
 8011b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b7e:	f000 fa33 	bl	8011fe8 <_malloc_usable_size_r>
 8011b82:	4285      	cmp	r5, r0
 8011b84:	4606      	mov	r6, r0
 8011b86:	d802      	bhi.n	8011b8e <_realloc_r+0x34>
 8011b88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011b8c:	d8f4      	bhi.n	8011b78 <_realloc_r+0x1e>
 8011b8e:	4629      	mov	r1, r5
 8011b90:	4640      	mov	r0, r8
 8011b92:	f7ff fb81 	bl	8011298 <_malloc_r>
 8011b96:	4607      	mov	r7, r0
 8011b98:	2800      	cmp	r0, #0
 8011b9a:	d0ec      	beq.n	8011b76 <_realloc_r+0x1c>
 8011b9c:	42b5      	cmp	r5, r6
 8011b9e:	462a      	mov	r2, r5
 8011ba0:	4621      	mov	r1, r4
 8011ba2:	bf28      	it	cs
 8011ba4:	4632      	movcs	r2, r6
 8011ba6:	f7ff fad6 	bl	8011156 <memcpy>
 8011baa:	4621      	mov	r1, r4
 8011bac:	4640      	mov	r0, r8
 8011bae:	f7ff faff 	bl	80111b0 <_free_r>
 8011bb2:	463c      	mov	r4, r7
 8011bb4:	e7e0      	b.n	8011b78 <_realloc_r+0x1e>

08011bb6 <__sfputc_r>:
 8011bb6:	6893      	ldr	r3, [r2, #8]
 8011bb8:	3b01      	subs	r3, #1
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	b410      	push	{r4}
 8011bbe:	6093      	str	r3, [r2, #8]
 8011bc0:	da08      	bge.n	8011bd4 <__sfputc_r+0x1e>
 8011bc2:	6994      	ldr	r4, [r2, #24]
 8011bc4:	42a3      	cmp	r3, r4
 8011bc6:	db01      	blt.n	8011bcc <__sfputc_r+0x16>
 8011bc8:	290a      	cmp	r1, #10
 8011bca:	d103      	bne.n	8011bd4 <__sfputc_r+0x1e>
 8011bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011bd0:	f000 b932 	b.w	8011e38 <__swbuf_r>
 8011bd4:	6813      	ldr	r3, [r2, #0]
 8011bd6:	1c58      	adds	r0, r3, #1
 8011bd8:	6010      	str	r0, [r2, #0]
 8011bda:	7019      	strb	r1, [r3, #0]
 8011bdc:	4608      	mov	r0, r1
 8011bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <__sfputs_r>:
 8011be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011be6:	4606      	mov	r6, r0
 8011be8:	460f      	mov	r7, r1
 8011bea:	4614      	mov	r4, r2
 8011bec:	18d5      	adds	r5, r2, r3
 8011bee:	42ac      	cmp	r4, r5
 8011bf0:	d101      	bne.n	8011bf6 <__sfputs_r+0x12>
 8011bf2:	2000      	movs	r0, #0
 8011bf4:	e007      	b.n	8011c06 <__sfputs_r+0x22>
 8011bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011bfa:	463a      	mov	r2, r7
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	f7ff ffda 	bl	8011bb6 <__sfputc_r>
 8011c02:	1c43      	adds	r3, r0, #1
 8011c04:	d1f3      	bne.n	8011bee <__sfputs_r+0xa>
 8011c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011c08 <_vfiprintf_r>:
 8011c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c0c:	460d      	mov	r5, r1
 8011c0e:	b09d      	sub	sp, #116	@ 0x74
 8011c10:	4614      	mov	r4, r2
 8011c12:	4698      	mov	r8, r3
 8011c14:	4606      	mov	r6, r0
 8011c16:	b118      	cbz	r0, 8011c20 <_vfiprintf_r+0x18>
 8011c18:	6a03      	ldr	r3, [r0, #32]
 8011c1a:	b90b      	cbnz	r3, 8011c20 <_vfiprintf_r+0x18>
 8011c1c:	f7ff f930 	bl	8010e80 <__sinit>
 8011c20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c22:	07d9      	lsls	r1, r3, #31
 8011c24:	d405      	bmi.n	8011c32 <_vfiprintf_r+0x2a>
 8011c26:	89ab      	ldrh	r3, [r5, #12]
 8011c28:	059a      	lsls	r2, r3, #22
 8011c2a:	d402      	bmi.n	8011c32 <_vfiprintf_r+0x2a>
 8011c2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c2e:	f7ff fa90 	bl	8011152 <__retarget_lock_acquire_recursive>
 8011c32:	89ab      	ldrh	r3, [r5, #12]
 8011c34:	071b      	lsls	r3, r3, #28
 8011c36:	d501      	bpl.n	8011c3c <_vfiprintf_r+0x34>
 8011c38:	692b      	ldr	r3, [r5, #16]
 8011c3a:	b99b      	cbnz	r3, 8011c64 <_vfiprintf_r+0x5c>
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	4630      	mov	r0, r6
 8011c40:	f000 f938 	bl	8011eb4 <__swsetup_r>
 8011c44:	b170      	cbz	r0, 8011c64 <_vfiprintf_r+0x5c>
 8011c46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011c48:	07dc      	lsls	r4, r3, #31
 8011c4a:	d504      	bpl.n	8011c56 <_vfiprintf_r+0x4e>
 8011c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c50:	b01d      	add	sp, #116	@ 0x74
 8011c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c56:	89ab      	ldrh	r3, [r5, #12]
 8011c58:	0598      	lsls	r0, r3, #22
 8011c5a:	d4f7      	bmi.n	8011c4c <_vfiprintf_r+0x44>
 8011c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011c5e:	f7ff fa79 	bl	8011154 <__retarget_lock_release_recursive>
 8011c62:	e7f3      	b.n	8011c4c <_vfiprintf_r+0x44>
 8011c64:	2300      	movs	r3, #0
 8011c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c68:	2320      	movs	r3, #32
 8011c6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c72:	2330      	movs	r3, #48	@ 0x30
 8011c74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011e24 <_vfiprintf_r+0x21c>
 8011c78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c7c:	f04f 0901 	mov.w	r9, #1
 8011c80:	4623      	mov	r3, r4
 8011c82:	469a      	mov	sl, r3
 8011c84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c88:	b10a      	cbz	r2, 8011c8e <_vfiprintf_r+0x86>
 8011c8a:	2a25      	cmp	r2, #37	@ 0x25
 8011c8c:	d1f9      	bne.n	8011c82 <_vfiprintf_r+0x7a>
 8011c8e:	ebba 0b04 	subs.w	fp, sl, r4
 8011c92:	d00b      	beq.n	8011cac <_vfiprintf_r+0xa4>
 8011c94:	465b      	mov	r3, fp
 8011c96:	4622      	mov	r2, r4
 8011c98:	4629      	mov	r1, r5
 8011c9a:	4630      	mov	r0, r6
 8011c9c:	f7ff ffa2 	bl	8011be4 <__sfputs_r>
 8011ca0:	3001      	adds	r0, #1
 8011ca2:	f000 80a7 	beq.w	8011df4 <_vfiprintf_r+0x1ec>
 8011ca6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ca8:	445a      	add	r2, fp
 8011caa:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cac:	f89a 3000 	ldrb.w	r3, [sl]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	f000 809f 	beq.w	8011df4 <_vfiprintf_r+0x1ec>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011cbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cc0:	f10a 0a01 	add.w	sl, sl, #1
 8011cc4:	9304      	str	r3, [sp, #16]
 8011cc6:	9307      	str	r3, [sp, #28]
 8011cc8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011ccc:	931a      	str	r3, [sp, #104]	@ 0x68
 8011cce:	4654      	mov	r4, sl
 8011cd0:	2205      	movs	r2, #5
 8011cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cd6:	4853      	ldr	r0, [pc, #332]	@ (8011e24 <_vfiprintf_r+0x21c>)
 8011cd8:	f7ee fa9a 	bl	8000210 <memchr>
 8011cdc:	9a04      	ldr	r2, [sp, #16]
 8011cde:	b9d8      	cbnz	r0, 8011d18 <_vfiprintf_r+0x110>
 8011ce0:	06d1      	lsls	r1, r2, #27
 8011ce2:	bf44      	itt	mi
 8011ce4:	2320      	movmi	r3, #32
 8011ce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cea:	0713      	lsls	r3, r2, #28
 8011cec:	bf44      	itt	mi
 8011cee:	232b      	movmi	r3, #43	@ 0x2b
 8011cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8011cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8011cfa:	d015      	beq.n	8011d28 <_vfiprintf_r+0x120>
 8011cfc:	9a07      	ldr	r2, [sp, #28]
 8011cfe:	4654      	mov	r4, sl
 8011d00:	2000      	movs	r0, #0
 8011d02:	f04f 0c0a 	mov.w	ip, #10
 8011d06:	4621      	mov	r1, r4
 8011d08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d0c:	3b30      	subs	r3, #48	@ 0x30
 8011d0e:	2b09      	cmp	r3, #9
 8011d10:	d94b      	bls.n	8011daa <_vfiprintf_r+0x1a2>
 8011d12:	b1b0      	cbz	r0, 8011d42 <_vfiprintf_r+0x13a>
 8011d14:	9207      	str	r2, [sp, #28]
 8011d16:	e014      	b.n	8011d42 <_vfiprintf_r+0x13a>
 8011d18:	eba0 0308 	sub.w	r3, r0, r8
 8011d1c:	fa09 f303 	lsl.w	r3, r9, r3
 8011d20:	4313      	orrs	r3, r2
 8011d22:	9304      	str	r3, [sp, #16]
 8011d24:	46a2      	mov	sl, r4
 8011d26:	e7d2      	b.n	8011cce <_vfiprintf_r+0xc6>
 8011d28:	9b03      	ldr	r3, [sp, #12]
 8011d2a:	1d19      	adds	r1, r3, #4
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	9103      	str	r1, [sp, #12]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	bfbb      	ittet	lt
 8011d34:	425b      	neglt	r3, r3
 8011d36:	f042 0202 	orrlt.w	r2, r2, #2
 8011d3a:	9307      	strge	r3, [sp, #28]
 8011d3c:	9307      	strlt	r3, [sp, #28]
 8011d3e:	bfb8      	it	lt
 8011d40:	9204      	strlt	r2, [sp, #16]
 8011d42:	7823      	ldrb	r3, [r4, #0]
 8011d44:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d46:	d10a      	bne.n	8011d5e <_vfiprintf_r+0x156>
 8011d48:	7863      	ldrb	r3, [r4, #1]
 8011d4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d4c:	d132      	bne.n	8011db4 <_vfiprintf_r+0x1ac>
 8011d4e:	9b03      	ldr	r3, [sp, #12]
 8011d50:	1d1a      	adds	r2, r3, #4
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	9203      	str	r2, [sp, #12]
 8011d56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d5a:	3402      	adds	r4, #2
 8011d5c:	9305      	str	r3, [sp, #20]
 8011d5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011e34 <_vfiprintf_r+0x22c>
 8011d62:	7821      	ldrb	r1, [r4, #0]
 8011d64:	2203      	movs	r2, #3
 8011d66:	4650      	mov	r0, sl
 8011d68:	f7ee fa52 	bl	8000210 <memchr>
 8011d6c:	b138      	cbz	r0, 8011d7e <_vfiprintf_r+0x176>
 8011d6e:	9b04      	ldr	r3, [sp, #16]
 8011d70:	eba0 000a 	sub.w	r0, r0, sl
 8011d74:	2240      	movs	r2, #64	@ 0x40
 8011d76:	4082      	lsls	r2, r0
 8011d78:	4313      	orrs	r3, r2
 8011d7a:	3401      	adds	r4, #1
 8011d7c:	9304      	str	r3, [sp, #16]
 8011d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d82:	4829      	ldr	r0, [pc, #164]	@ (8011e28 <_vfiprintf_r+0x220>)
 8011d84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d88:	2206      	movs	r2, #6
 8011d8a:	f7ee fa41 	bl	8000210 <memchr>
 8011d8e:	2800      	cmp	r0, #0
 8011d90:	d03f      	beq.n	8011e12 <_vfiprintf_r+0x20a>
 8011d92:	4b26      	ldr	r3, [pc, #152]	@ (8011e2c <_vfiprintf_r+0x224>)
 8011d94:	bb1b      	cbnz	r3, 8011dde <_vfiprintf_r+0x1d6>
 8011d96:	9b03      	ldr	r3, [sp, #12]
 8011d98:	3307      	adds	r3, #7
 8011d9a:	f023 0307 	bic.w	r3, r3, #7
 8011d9e:	3308      	adds	r3, #8
 8011da0:	9303      	str	r3, [sp, #12]
 8011da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011da4:	443b      	add	r3, r7
 8011da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8011da8:	e76a      	b.n	8011c80 <_vfiprintf_r+0x78>
 8011daa:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dae:	460c      	mov	r4, r1
 8011db0:	2001      	movs	r0, #1
 8011db2:	e7a8      	b.n	8011d06 <_vfiprintf_r+0xfe>
 8011db4:	2300      	movs	r3, #0
 8011db6:	3401      	adds	r4, #1
 8011db8:	9305      	str	r3, [sp, #20]
 8011dba:	4619      	mov	r1, r3
 8011dbc:	f04f 0c0a 	mov.w	ip, #10
 8011dc0:	4620      	mov	r0, r4
 8011dc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dc6:	3a30      	subs	r2, #48	@ 0x30
 8011dc8:	2a09      	cmp	r2, #9
 8011dca:	d903      	bls.n	8011dd4 <_vfiprintf_r+0x1cc>
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d0c6      	beq.n	8011d5e <_vfiprintf_r+0x156>
 8011dd0:	9105      	str	r1, [sp, #20]
 8011dd2:	e7c4      	b.n	8011d5e <_vfiprintf_r+0x156>
 8011dd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dd8:	4604      	mov	r4, r0
 8011dda:	2301      	movs	r3, #1
 8011ddc:	e7f0      	b.n	8011dc0 <_vfiprintf_r+0x1b8>
 8011dde:	ab03      	add	r3, sp, #12
 8011de0:	9300      	str	r3, [sp, #0]
 8011de2:	462a      	mov	r2, r5
 8011de4:	4b12      	ldr	r3, [pc, #72]	@ (8011e30 <_vfiprintf_r+0x228>)
 8011de6:	a904      	add	r1, sp, #16
 8011de8:	4630      	mov	r0, r6
 8011dea:	f3af 8000 	nop.w
 8011dee:	4607      	mov	r7, r0
 8011df0:	1c78      	adds	r0, r7, #1
 8011df2:	d1d6      	bne.n	8011da2 <_vfiprintf_r+0x19a>
 8011df4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011df6:	07d9      	lsls	r1, r3, #31
 8011df8:	d405      	bmi.n	8011e06 <_vfiprintf_r+0x1fe>
 8011dfa:	89ab      	ldrh	r3, [r5, #12]
 8011dfc:	059a      	lsls	r2, r3, #22
 8011dfe:	d402      	bmi.n	8011e06 <_vfiprintf_r+0x1fe>
 8011e00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011e02:	f7ff f9a7 	bl	8011154 <__retarget_lock_release_recursive>
 8011e06:	89ab      	ldrh	r3, [r5, #12]
 8011e08:	065b      	lsls	r3, r3, #25
 8011e0a:	f53f af1f 	bmi.w	8011c4c <_vfiprintf_r+0x44>
 8011e0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e10:	e71e      	b.n	8011c50 <_vfiprintf_r+0x48>
 8011e12:	ab03      	add	r3, sp, #12
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	462a      	mov	r2, r5
 8011e18:	4b05      	ldr	r3, [pc, #20]	@ (8011e30 <_vfiprintf_r+0x228>)
 8011e1a:	a904      	add	r1, sp, #16
 8011e1c:	4630      	mov	r0, r6
 8011e1e:	f7ff fc8d 	bl	801173c <_printf_i>
 8011e22:	e7e4      	b.n	8011dee <_vfiprintf_r+0x1e6>
 8011e24:	0802069f 	.word	0x0802069f
 8011e28:	080206a9 	.word	0x080206a9
 8011e2c:	00000000 	.word	0x00000000
 8011e30:	08011be5 	.word	0x08011be5
 8011e34:	080206a5 	.word	0x080206a5

08011e38 <__swbuf_r>:
 8011e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e3a:	460e      	mov	r6, r1
 8011e3c:	4614      	mov	r4, r2
 8011e3e:	4605      	mov	r5, r0
 8011e40:	b118      	cbz	r0, 8011e4a <__swbuf_r+0x12>
 8011e42:	6a03      	ldr	r3, [r0, #32]
 8011e44:	b90b      	cbnz	r3, 8011e4a <__swbuf_r+0x12>
 8011e46:	f7ff f81b 	bl	8010e80 <__sinit>
 8011e4a:	69a3      	ldr	r3, [r4, #24]
 8011e4c:	60a3      	str	r3, [r4, #8]
 8011e4e:	89a3      	ldrh	r3, [r4, #12]
 8011e50:	071a      	lsls	r2, r3, #28
 8011e52:	d501      	bpl.n	8011e58 <__swbuf_r+0x20>
 8011e54:	6923      	ldr	r3, [r4, #16]
 8011e56:	b943      	cbnz	r3, 8011e6a <__swbuf_r+0x32>
 8011e58:	4621      	mov	r1, r4
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	f000 f82a 	bl	8011eb4 <__swsetup_r>
 8011e60:	b118      	cbz	r0, 8011e6a <__swbuf_r+0x32>
 8011e62:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011e66:	4638      	mov	r0, r7
 8011e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	6922      	ldr	r2, [r4, #16]
 8011e6e:	1a98      	subs	r0, r3, r2
 8011e70:	6963      	ldr	r3, [r4, #20]
 8011e72:	b2f6      	uxtb	r6, r6
 8011e74:	4283      	cmp	r3, r0
 8011e76:	4637      	mov	r7, r6
 8011e78:	dc05      	bgt.n	8011e86 <__swbuf_r+0x4e>
 8011e7a:	4621      	mov	r1, r4
 8011e7c:	4628      	mov	r0, r5
 8011e7e:	f7ff fe01 	bl	8011a84 <_fflush_r>
 8011e82:	2800      	cmp	r0, #0
 8011e84:	d1ed      	bne.n	8011e62 <__swbuf_r+0x2a>
 8011e86:	68a3      	ldr	r3, [r4, #8]
 8011e88:	3b01      	subs	r3, #1
 8011e8a:	60a3      	str	r3, [r4, #8]
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	1c5a      	adds	r2, r3, #1
 8011e90:	6022      	str	r2, [r4, #0]
 8011e92:	701e      	strb	r6, [r3, #0]
 8011e94:	6962      	ldr	r2, [r4, #20]
 8011e96:	1c43      	adds	r3, r0, #1
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d004      	beq.n	8011ea6 <__swbuf_r+0x6e>
 8011e9c:	89a3      	ldrh	r3, [r4, #12]
 8011e9e:	07db      	lsls	r3, r3, #31
 8011ea0:	d5e1      	bpl.n	8011e66 <__swbuf_r+0x2e>
 8011ea2:	2e0a      	cmp	r6, #10
 8011ea4:	d1df      	bne.n	8011e66 <__swbuf_r+0x2e>
 8011ea6:	4621      	mov	r1, r4
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	f7ff fdeb 	bl	8011a84 <_fflush_r>
 8011eae:	2800      	cmp	r0, #0
 8011eb0:	d0d9      	beq.n	8011e66 <__swbuf_r+0x2e>
 8011eb2:	e7d6      	b.n	8011e62 <__swbuf_r+0x2a>

08011eb4 <__swsetup_r>:
 8011eb4:	b538      	push	{r3, r4, r5, lr}
 8011eb6:	4b29      	ldr	r3, [pc, #164]	@ (8011f5c <__swsetup_r+0xa8>)
 8011eb8:	4605      	mov	r5, r0
 8011eba:	6818      	ldr	r0, [r3, #0]
 8011ebc:	460c      	mov	r4, r1
 8011ebe:	b118      	cbz	r0, 8011ec8 <__swsetup_r+0x14>
 8011ec0:	6a03      	ldr	r3, [r0, #32]
 8011ec2:	b90b      	cbnz	r3, 8011ec8 <__swsetup_r+0x14>
 8011ec4:	f7fe ffdc 	bl	8010e80 <__sinit>
 8011ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ecc:	0719      	lsls	r1, r3, #28
 8011ece:	d422      	bmi.n	8011f16 <__swsetup_r+0x62>
 8011ed0:	06da      	lsls	r2, r3, #27
 8011ed2:	d407      	bmi.n	8011ee4 <__swsetup_r+0x30>
 8011ed4:	2209      	movs	r2, #9
 8011ed6:	602a      	str	r2, [r5, #0]
 8011ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011edc:	81a3      	strh	r3, [r4, #12]
 8011ede:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ee2:	e033      	b.n	8011f4c <__swsetup_r+0x98>
 8011ee4:	0758      	lsls	r0, r3, #29
 8011ee6:	d512      	bpl.n	8011f0e <__swsetup_r+0x5a>
 8011ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011eea:	b141      	cbz	r1, 8011efe <__swsetup_r+0x4a>
 8011eec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ef0:	4299      	cmp	r1, r3
 8011ef2:	d002      	beq.n	8011efa <__swsetup_r+0x46>
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	f7ff f95b 	bl	80111b0 <_free_r>
 8011efa:	2300      	movs	r3, #0
 8011efc:	6363      	str	r3, [r4, #52]	@ 0x34
 8011efe:	89a3      	ldrh	r3, [r4, #12]
 8011f00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011f04:	81a3      	strh	r3, [r4, #12]
 8011f06:	2300      	movs	r3, #0
 8011f08:	6063      	str	r3, [r4, #4]
 8011f0a:	6923      	ldr	r3, [r4, #16]
 8011f0c:	6023      	str	r3, [r4, #0]
 8011f0e:	89a3      	ldrh	r3, [r4, #12]
 8011f10:	f043 0308 	orr.w	r3, r3, #8
 8011f14:	81a3      	strh	r3, [r4, #12]
 8011f16:	6923      	ldr	r3, [r4, #16]
 8011f18:	b94b      	cbnz	r3, 8011f2e <__swsetup_r+0x7a>
 8011f1a:	89a3      	ldrh	r3, [r4, #12]
 8011f1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011f24:	d003      	beq.n	8011f2e <__swsetup_r+0x7a>
 8011f26:	4621      	mov	r1, r4
 8011f28:	4628      	mov	r0, r5
 8011f2a:	f000 f88b 	bl	8012044 <__smakebuf_r>
 8011f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f32:	f013 0201 	ands.w	r2, r3, #1
 8011f36:	d00a      	beq.n	8011f4e <__swsetup_r+0x9a>
 8011f38:	2200      	movs	r2, #0
 8011f3a:	60a2      	str	r2, [r4, #8]
 8011f3c:	6962      	ldr	r2, [r4, #20]
 8011f3e:	4252      	negs	r2, r2
 8011f40:	61a2      	str	r2, [r4, #24]
 8011f42:	6922      	ldr	r2, [r4, #16]
 8011f44:	b942      	cbnz	r2, 8011f58 <__swsetup_r+0xa4>
 8011f46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011f4a:	d1c5      	bne.n	8011ed8 <__swsetup_r+0x24>
 8011f4c:	bd38      	pop	{r3, r4, r5, pc}
 8011f4e:	0799      	lsls	r1, r3, #30
 8011f50:	bf58      	it	pl
 8011f52:	6962      	ldrpl	r2, [r4, #20]
 8011f54:	60a2      	str	r2, [r4, #8]
 8011f56:	e7f4      	b.n	8011f42 <__swsetup_r+0x8e>
 8011f58:	2000      	movs	r0, #0
 8011f5a:	e7f7      	b.n	8011f4c <__swsetup_r+0x98>
 8011f5c:	20000064 	.word	0x20000064

08011f60 <_raise_r>:
 8011f60:	291f      	cmp	r1, #31
 8011f62:	b538      	push	{r3, r4, r5, lr}
 8011f64:	4605      	mov	r5, r0
 8011f66:	460c      	mov	r4, r1
 8011f68:	d904      	bls.n	8011f74 <_raise_r+0x14>
 8011f6a:	2316      	movs	r3, #22
 8011f6c:	6003      	str	r3, [r0, #0]
 8011f6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f72:	bd38      	pop	{r3, r4, r5, pc}
 8011f74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011f76:	b112      	cbz	r2, 8011f7e <_raise_r+0x1e>
 8011f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011f7c:	b94b      	cbnz	r3, 8011f92 <_raise_r+0x32>
 8011f7e:	4628      	mov	r0, r5
 8011f80:	f000 f830 	bl	8011fe4 <_getpid_r>
 8011f84:	4622      	mov	r2, r4
 8011f86:	4601      	mov	r1, r0
 8011f88:	4628      	mov	r0, r5
 8011f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f8e:	f000 b817 	b.w	8011fc0 <_kill_r>
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d00a      	beq.n	8011fac <_raise_r+0x4c>
 8011f96:	1c59      	adds	r1, r3, #1
 8011f98:	d103      	bne.n	8011fa2 <_raise_r+0x42>
 8011f9a:	2316      	movs	r3, #22
 8011f9c:	6003      	str	r3, [r0, #0]
 8011f9e:	2001      	movs	r0, #1
 8011fa0:	e7e7      	b.n	8011f72 <_raise_r+0x12>
 8011fa2:	2100      	movs	r1, #0
 8011fa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011fa8:	4620      	mov	r0, r4
 8011faa:	4798      	blx	r3
 8011fac:	2000      	movs	r0, #0
 8011fae:	e7e0      	b.n	8011f72 <_raise_r+0x12>

08011fb0 <raise>:
 8011fb0:	4b02      	ldr	r3, [pc, #8]	@ (8011fbc <raise+0xc>)
 8011fb2:	4601      	mov	r1, r0
 8011fb4:	6818      	ldr	r0, [r3, #0]
 8011fb6:	f7ff bfd3 	b.w	8011f60 <_raise_r>
 8011fba:	bf00      	nop
 8011fbc:	20000064 	.word	0x20000064

08011fc0 <_kill_r>:
 8011fc0:	b538      	push	{r3, r4, r5, lr}
 8011fc2:	4d07      	ldr	r5, [pc, #28]	@ (8011fe0 <_kill_r+0x20>)
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	4604      	mov	r4, r0
 8011fc8:	4608      	mov	r0, r1
 8011fca:	4611      	mov	r1, r2
 8011fcc:	602b      	str	r3, [r5, #0]
 8011fce:	f7f3 fa6f 	bl	80054b0 <_kill>
 8011fd2:	1c43      	adds	r3, r0, #1
 8011fd4:	d102      	bne.n	8011fdc <_kill_r+0x1c>
 8011fd6:	682b      	ldr	r3, [r5, #0]
 8011fd8:	b103      	cbz	r3, 8011fdc <_kill_r+0x1c>
 8011fda:	6023      	str	r3, [r4, #0]
 8011fdc:	bd38      	pop	{r3, r4, r5, pc}
 8011fde:	bf00      	nop
 8011fe0:	20004f5c 	.word	0x20004f5c

08011fe4 <_getpid_r>:
 8011fe4:	f7f3 ba5c 	b.w	80054a0 <_getpid>

08011fe8 <_malloc_usable_size_r>:
 8011fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011fec:	1f18      	subs	r0, r3, #4
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	bfbc      	itt	lt
 8011ff2:	580b      	ldrlt	r3, [r1, r0]
 8011ff4:	18c0      	addlt	r0, r0, r3
 8011ff6:	4770      	bx	lr

08011ff8 <__swhatbuf_r>:
 8011ff8:	b570      	push	{r4, r5, r6, lr}
 8011ffa:	460c      	mov	r4, r1
 8011ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012000:	2900      	cmp	r1, #0
 8012002:	b096      	sub	sp, #88	@ 0x58
 8012004:	4615      	mov	r5, r2
 8012006:	461e      	mov	r6, r3
 8012008:	da0d      	bge.n	8012026 <__swhatbuf_r+0x2e>
 801200a:	89a3      	ldrh	r3, [r4, #12]
 801200c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012010:	f04f 0100 	mov.w	r1, #0
 8012014:	bf14      	ite	ne
 8012016:	2340      	movne	r3, #64	@ 0x40
 8012018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801201c:	2000      	movs	r0, #0
 801201e:	6031      	str	r1, [r6, #0]
 8012020:	602b      	str	r3, [r5, #0]
 8012022:	b016      	add	sp, #88	@ 0x58
 8012024:	bd70      	pop	{r4, r5, r6, pc}
 8012026:	466a      	mov	r2, sp
 8012028:	f000 f848 	bl	80120bc <_fstat_r>
 801202c:	2800      	cmp	r0, #0
 801202e:	dbec      	blt.n	801200a <__swhatbuf_r+0x12>
 8012030:	9901      	ldr	r1, [sp, #4]
 8012032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801203a:	4259      	negs	r1, r3
 801203c:	4159      	adcs	r1, r3
 801203e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012042:	e7eb      	b.n	801201c <__swhatbuf_r+0x24>

08012044 <__smakebuf_r>:
 8012044:	898b      	ldrh	r3, [r1, #12]
 8012046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012048:	079d      	lsls	r5, r3, #30
 801204a:	4606      	mov	r6, r0
 801204c:	460c      	mov	r4, r1
 801204e:	d507      	bpl.n	8012060 <__smakebuf_r+0x1c>
 8012050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012054:	6023      	str	r3, [r4, #0]
 8012056:	6123      	str	r3, [r4, #16]
 8012058:	2301      	movs	r3, #1
 801205a:	6163      	str	r3, [r4, #20]
 801205c:	b003      	add	sp, #12
 801205e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012060:	ab01      	add	r3, sp, #4
 8012062:	466a      	mov	r2, sp
 8012064:	f7ff ffc8 	bl	8011ff8 <__swhatbuf_r>
 8012068:	9f00      	ldr	r7, [sp, #0]
 801206a:	4605      	mov	r5, r0
 801206c:	4639      	mov	r1, r7
 801206e:	4630      	mov	r0, r6
 8012070:	f7ff f912 	bl	8011298 <_malloc_r>
 8012074:	b948      	cbnz	r0, 801208a <__smakebuf_r+0x46>
 8012076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801207a:	059a      	lsls	r2, r3, #22
 801207c:	d4ee      	bmi.n	801205c <__smakebuf_r+0x18>
 801207e:	f023 0303 	bic.w	r3, r3, #3
 8012082:	f043 0302 	orr.w	r3, r3, #2
 8012086:	81a3      	strh	r3, [r4, #12]
 8012088:	e7e2      	b.n	8012050 <__smakebuf_r+0xc>
 801208a:	89a3      	ldrh	r3, [r4, #12]
 801208c:	6020      	str	r0, [r4, #0]
 801208e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012092:	81a3      	strh	r3, [r4, #12]
 8012094:	9b01      	ldr	r3, [sp, #4]
 8012096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801209a:	b15b      	cbz	r3, 80120b4 <__smakebuf_r+0x70>
 801209c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120a0:	4630      	mov	r0, r6
 80120a2:	f000 f81d 	bl	80120e0 <_isatty_r>
 80120a6:	b128      	cbz	r0, 80120b4 <__smakebuf_r+0x70>
 80120a8:	89a3      	ldrh	r3, [r4, #12]
 80120aa:	f023 0303 	bic.w	r3, r3, #3
 80120ae:	f043 0301 	orr.w	r3, r3, #1
 80120b2:	81a3      	strh	r3, [r4, #12]
 80120b4:	89a3      	ldrh	r3, [r4, #12]
 80120b6:	431d      	orrs	r5, r3
 80120b8:	81a5      	strh	r5, [r4, #12]
 80120ba:	e7cf      	b.n	801205c <__smakebuf_r+0x18>

080120bc <_fstat_r>:
 80120bc:	b538      	push	{r3, r4, r5, lr}
 80120be:	4d07      	ldr	r5, [pc, #28]	@ (80120dc <_fstat_r+0x20>)
 80120c0:	2300      	movs	r3, #0
 80120c2:	4604      	mov	r4, r0
 80120c4:	4608      	mov	r0, r1
 80120c6:	4611      	mov	r1, r2
 80120c8:	602b      	str	r3, [r5, #0]
 80120ca:	f7f3 fa51 	bl	8005570 <_fstat>
 80120ce:	1c43      	adds	r3, r0, #1
 80120d0:	d102      	bne.n	80120d8 <_fstat_r+0x1c>
 80120d2:	682b      	ldr	r3, [r5, #0]
 80120d4:	b103      	cbz	r3, 80120d8 <_fstat_r+0x1c>
 80120d6:	6023      	str	r3, [r4, #0]
 80120d8:	bd38      	pop	{r3, r4, r5, pc}
 80120da:	bf00      	nop
 80120dc:	20004f5c 	.word	0x20004f5c

080120e0 <_isatty_r>:
 80120e0:	b538      	push	{r3, r4, r5, lr}
 80120e2:	4d06      	ldr	r5, [pc, #24]	@ (80120fc <_isatty_r+0x1c>)
 80120e4:	2300      	movs	r3, #0
 80120e6:	4604      	mov	r4, r0
 80120e8:	4608      	mov	r0, r1
 80120ea:	602b      	str	r3, [r5, #0]
 80120ec:	f7f3 fa50 	bl	8005590 <_isatty>
 80120f0:	1c43      	adds	r3, r0, #1
 80120f2:	d102      	bne.n	80120fa <_isatty_r+0x1a>
 80120f4:	682b      	ldr	r3, [r5, #0]
 80120f6:	b103      	cbz	r3, 80120fa <_isatty_r+0x1a>
 80120f8:	6023      	str	r3, [r4, #0]
 80120fa:	bd38      	pop	{r3, r4, r5, pc}
 80120fc:	20004f5c 	.word	0x20004f5c

08012100 <_init>:
 8012100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012102:	bf00      	nop
 8012104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012106:	bc08      	pop	{r3}
 8012108:	469e      	mov	lr, r3
 801210a:	4770      	bx	lr

0801210c <_fini>:
 801210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210e:	bf00      	nop
 8012110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012112:	bc08      	pop	{r3}
 8012114:	469e      	mov	lr, r3
 8012116:	4770      	bx	lr
