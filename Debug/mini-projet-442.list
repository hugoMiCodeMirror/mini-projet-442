
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a870  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005008  0800aa40  0800aa40  0000ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa48  0800fa48  0001104c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa48  0800fa48  00010a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa50  0800fa50  0001104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa50  0800fa50  00010a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa54  0800fa54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800fa58  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048c4  2000004c  0800faa4  0001104c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004910  0800faa4  00011910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001104c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd24  00000000  00000000  0001107c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bb1  00000000  00000000  0003dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002630  00000000  00000000  00044958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d75  00000000  00000000  00046f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe58  00000000  00000000  00048cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033362  00000000  00000000  00078b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116953  00000000  00000000  000abeb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c280a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e84  00000000  00000000  001c2850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001cc6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000004c 	.word	0x2000004c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800aa28 	.word	0x0800aa28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000050 	.word	0x20000050
 800020c:	0800aa28 	.word	0x0800aa28

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000512:	4b21      	ldr	r3, [pc, #132]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000514:	4a21      	ldr	r2, [pc, #132]	@ (800059c <MX_ADC1_Init+0x9c>)
 8000516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000518:	4b1f      	ldr	r3, [pc, #124]	@ (8000598 <MX_ADC1_Init+0x98>)
 800051a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800051e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b1d      	ldr	r3, [pc, #116]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b1c      	ldr	r3, [pc, #112]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052c:	4b1a      	ldr	r3, [pc, #104]	@ (8000598 <MX_ADC1_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053a:	4b17      	ldr	r3, [pc, #92]	@ (8000598 <MX_ADC1_Init+0x98>)
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000542:	4a17      	ldr	r2, [pc, #92]	@ (80005a0 <MX_ADC1_Init+0xa0>)
 8000544:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800054c:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <MX_ADC1_Init+0x98>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000552:	4b11      	ldr	r3, [pc, #68]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <MX_ADC1_Init+0x98>)
 800055c:	2201      	movs	r2, #1
 800055e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000562:	f003 f97b 	bl	800385c <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800056c:	f001 fb5c 	bl	8001c28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000570:	2300      	movs	r3, #0
 8000572:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000574:	2301      	movs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4805      	ldr	r0, [pc, #20]	@ (8000598 <MX_ADC1_Init+0x98>)
 8000582:	f003 f9af 	bl	80038e4 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800058c:	f001 fb4c 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000068 	.word	0x20000068
 800059c:	40012000 	.word	0x40012000
 80005a0:	0f000001 	.word	0x0f000001

080005a4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	463b      	mov	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005b6:	4b21      	ldr	r3, [pc, #132]	@ (800063c <MX_ADC3_Init+0x98>)
 80005b8:	4a21      	ldr	r2, [pc, #132]	@ (8000640 <MX_ADC3_Init+0x9c>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005bc:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <MX_ADC3_Init+0x98>)
 80005be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005c2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	@ (800063c <MX_ADC3_Init+0x98>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ca:	4b1c      	ldr	r3, [pc, #112]	@ (800063c <MX_ADC3_Init+0x98>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_ADC3_Init+0x98>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b19      	ldr	r3, [pc, #100]	@ (800063c <MX_ADC3_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_ADC3_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_ADC3_Init+0x98>)
 80005e6:	4a17      	ldr	r2, [pc, #92]	@ (8000644 <MX_ADC3_Init+0xa0>)
 80005e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_ADC3_Init+0x98>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_ADC3_Init+0x98>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_ADC3_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_ADC3_Init+0x98>)
 8000600:	2201      	movs	r2, #1
 8000602:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	@ (800063c <MX_ADC3_Init+0x98>)
 8000606:	f003 f929 	bl	800385c <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000610:	f001 fb0a 	bl	8001c28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000614:	2306      	movs	r3, #6
 8000616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000618:	2301      	movs	r3, #1
 800061a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_ADC3_Init+0x98>)
 8000626:	f003 f95d 	bl	80038e4 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000630:	f001 fafa 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000b0 	.word	0x200000b0
 8000640:	40012200 	.word	0x40012200
 8000644:	0f000001 	.word	0x0f000001

08000648 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	@ 0x30
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a2a      	ldr	r2, [pc, #168]	@ (8000710 <HAL_ADC_MspInit+0xc8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d124      	bne.n	80006b4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066e:	4a29      	ldr	r2, [pc, #164]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 8000670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000674:	6453      	str	r3, [r2, #68]	@ 0x44
 8000676:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a23      	ldr	r2, [pc, #140]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800069a:	2301      	movs	r3, #1
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800069e:	2303      	movs	r3, #3
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	481a      	ldr	r0, [pc, #104]	@ (8000718 <HAL_ADC_MspInit+0xd0>)
 80006ae:	f004 fa85 	bl	8004bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80006b2:	e029      	b.n	8000708 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a18      	ldr	r2, [pc, #96]	@ (800071c <HAL_ADC_MspInit+0xd4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d124      	bne.n	8000708 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 80006c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ca:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a0e      	ldr	r2, [pc, #56]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 80006dc:	f043 0320 	orr.w	r3, r3, #32
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <HAL_ADC_MspInit+0xcc>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0320 	and.w	r3, r3, #32
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80006ee:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80006f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f4:	2303      	movs	r3, #3
 80006f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	4807      	ldr	r0, [pc, #28]	@ (8000720 <HAL_ADC_MspInit+0xd8>)
 8000704:	f004 fa5a 	bl	8004bbc <HAL_GPIO_Init>
}
 8000708:	bf00      	nop
 800070a:	3730      	adds	r7, #48	@ 0x30
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40012000 	.word	0x40012000
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000
 800071c:	40012200 	.word	0x40012200
 8000720:	40021400 	.word	0x40021400

08000724 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800072a:	463b      	mov	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_DAC_Init+0x4c>)
 8000734:	4a0f      	ldr	r2, [pc, #60]	@ (8000774 <MX_DAC_Init+0x50>)
 8000736:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000738:	480d      	ldr	r0, [pc, #52]	@ (8000770 <MX_DAC_Init+0x4c>)
 800073a:	f003 fc05 	bl	8003f48 <HAL_DAC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000744:	f001 fa70 	bl	8001c28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	2200      	movs	r2, #0
 8000754:	4619      	mov	r1, r3
 8000756:	4806      	ldr	r0, [pc, #24]	@ (8000770 <MX_DAC_Init+0x4c>)
 8000758:	f003 fc7c 	bl	8004054 <HAL_DAC_ConfigChannel>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000762:	f001 fa61 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000f8 	.word	0x200000f8
 8000774:	40007400 	.word	0x40007400

08000778 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a19      	ldr	r2, [pc, #100]	@ (80007fc <HAL_DAC_MspInit+0x84>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d12b      	bne.n	80007f2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <HAL_DAC_MspInit+0x88>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <HAL_DAC_MspInit+0x88>)
 80007a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80007a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <HAL_DAC_MspInit+0x88>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <HAL_DAC_MspInit+0x88>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <HAL_DAC_MspInit+0x88>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <HAL_DAC_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007ca:	2310      	movs	r3, #16
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ce:	2303      	movs	r3, #3
 80007d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	4619      	mov	r1, r3
 80007dc:	4809      	ldr	r0, [pc, #36]	@ (8000804 <HAL_DAC_MspInit+0x8c>)
 80007de:	f004 f9ed 	bl	8004bbc <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	2036      	movs	r0, #54	@ 0x36
 80007e8:	f003 fb84 	bl	8003ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007ec:	2036      	movs	r0, #54	@ 0x36
 80007ee:	f003 fb9d 	bl	8003f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	@ 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40007400 	.word	0x40007400
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000

08000808 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 800080e:	4a16      	ldr	r2, [pc, #88]	@ (8000868 <MX_DMA2D_Init+0x60>)
 8000810:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000812:	4b14      	ldr	r3, [pc, #80]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000824:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000836:	4b0b      	ldr	r3, [pc, #44]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 800083e:	f003 fe21 	bl	8004484 <HAL_DMA2D_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000848:	f001 f9ee 	bl	8001c28 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800084c:	2101      	movs	r1, #1
 800084e:	4805      	ldr	r0, [pc, #20]	@ (8000864 <MX_DMA2D_Init+0x5c>)
 8000850:	f004 f886 	bl	8004960 <HAL_DMA2D_ConfigLayer>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800085a:	f001 f9e5 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	2000010c 	.word	0x2000010c
 8000868:	4002b000 	.word	0x4002b000

0800086c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <HAL_DMA2D_MspInit+0x44>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d113      	bne.n	80008a6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_DMA2D_MspInit+0x48>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <HAL_DMA2D_MspInit+0x48>)
 8000884:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <HAL_DMA2D_MspInit+0x48>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2105      	movs	r1, #5
 800089a:	205a      	movs	r0, #90	@ 0x5a
 800089c:	f003 fb2a 	bl	8003ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80008a0:	205a      	movs	r0, #90	@ 0x5a
 80008a2:	f003 fb43 	bl	8003f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	4002b000 	.word	0x4002b000
 80008b4:	40023800 	.word	0x40023800

080008b8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_FMC_Init+0x98>)
 80008d2:	4a20      	ldr	r2, [pc, #128]	@ (8000954 <MX_FMC_Init+0x9c>)
 80008d4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_FMC_Init+0x98>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_FMC_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_FMC_Init+0x98>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80008e8:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_FMC_Init+0x98>)
 80008ea:	2210      	movs	r2, #16
 80008ec:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008ee:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_FMC_Init+0x98>)
 80008f0:	2240      	movs	r2, #64	@ 0x40
 80008f2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_FMC_Init+0x98>)
 80008f6:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80008fa:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80008fc:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_FMC_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <MX_FMC_Init+0x98>)
 8000904:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000908:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_FMC_Init+0x98>)
 800090c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000912:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_FMC_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000918:	2302      	movs	r3, #2
 800091a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800091c:	2307      	movs	r3, #7
 800091e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000920:	2304      	movs	r3, #4
 8000922:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000924:	2307      	movs	r3, #7
 8000926:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000928:	2303      	movs	r3, #3
 800092a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_FMC_Init+0x98>)
 800093a:	f007 fa99 	bl	8007e70 <HAL_SDRAM_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000944:	f001 f970 	bl	8001c28 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000014c 	.word	0x2000014c
 8000954:	a0000140 	.word	0xa0000140

08000958 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800096c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a58 <HAL_FMC_MspInit+0x100>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d16d      	bne.n	8000a50 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <HAL_FMC_MspInit+0x100>)
 8000976:	2201      	movs	r2, #1
 8000978:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800097a:	4b38      	ldr	r3, [pc, #224]	@ (8000a5c <HAL_FMC_MspInit+0x104>)
 800097c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800097e:	4a37      	ldr	r2, [pc, #220]	@ (8000a5c <HAL_FMC_MspInit+0x104>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6393      	str	r3, [r2, #56]	@ 0x38
 8000986:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <HAL_FMC_MspInit+0x104>)
 8000988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000992:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000996:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a4:	230c      	movs	r3, #12
 80009a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	482c      	ldr	r0, [pc, #176]	@ (8000a60 <HAL_FMC_MspInit+0x108>)
 80009ae:	f004 f905 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80009b2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80009b6:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009c4:	230c      	movs	r3, #12
 80009c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	4825      	ldr	r0, [pc, #148]	@ (8000a64 <HAL_FMC_MspInit+0x10c>)
 80009ce:	f004 f8f5 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80009d2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009d6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009e4:	230c      	movs	r3, #12
 80009e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	481e      	ldr	r0, [pc, #120]	@ (8000a68 <HAL_FMC_MspInit+0x110>)
 80009ee:	f004 f8e5 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80009f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80009f6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a04:	230c      	movs	r3, #12
 8000a06:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4817      	ldr	r0, [pc, #92]	@ (8000a6c <HAL_FMC_MspInit+0x114>)
 8000a0e:	f004 f8d5 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000a12:	2328      	movs	r3, #40	@ 0x28
 8000a14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a22:	230c      	movs	r3, #12
 8000a24:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4811      	ldr	r0, [pc, #68]	@ (8000a70 <HAL_FMC_MspInit+0x118>)
 8000a2c:	f004 f8c6 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000a30:	2308      	movs	r3, #8
 8000a32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a34:	2302      	movs	r3, #2
 8000a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a40:	230c      	movs	r3, #12
 8000a42:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	480a      	ldr	r0, [pc, #40]	@ (8000a74 <HAL_FMC_MspInit+0x11c>)
 8000a4a:	f004 f8b7 	bl	8004bbc <HAL_GPIO_Init>
 8000a4e:	e000      	b.n	8000a52 <HAL_FMC_MspInit+0xfa>
    return;
 8000a50:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a52:	3718      	adds	r7, #24
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000180 	.word	0x20000180
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40021800 	.word	0x40021800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40021400 	.word	0x40021400
 8000a70:	40021c00 	.word	0x40021c00
 8000a74:	40020800 	.word	0x40020800

08000a78 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000a80:	f7ff ff6a 	bl	8000958 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b085      	sub	sp, #20
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <vApplicationGetIdleTaskMemory+0x30>)
 8000aa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2280      	movs	r2, #128	@ 0x80
 8000aa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000188 	.word	0x20000188
 8000abc:	200001dc 	.word	0x200001dc

08000ac0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <MX_FREERTOS_Init+0x30>)
 8000ac8:	1d3c      	adds	r4, r7, #4
 8000aca:	461d      	mov	r5, r3
 8000acc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f008 fd3e 	bl	800955e <osThreadCreate>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a03      	ldr	r2, [pc, #12]	@ (8000af4 <MX_FREERTOS_Init+0x34>)
 8000ae6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bdb0      	pop	{r4, r5, r7, pc}
 8000af0:	0800aa4c 	.word	0x0800aa4c
 8000af4:	20000184 	.word	0x20000184

08000af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f008 fd78 	bl	80095f6 <osDelay>
 8000b06:	e7fb      	b.n	8000b00 <StartDefaultTask+0x8>

08000b08 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000b12:	20c8      	movs	r0, #200	@ 0xc8
 8000b14:	f001 fb98 	bl	8002248 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000b18:	f000 f9b4 	bl	8000e84 <ft5336_I2C_InitializeIfRequired>
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b084      	sub	sp, #16
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000b50:	f000 f998 	bl	8000e84 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e010      	b.n	8000b7c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	21a8      	movs	r1, #168	@ 0xa8
 8000b60:	4618      	mov	r0, r3
 8000b62:	f001 fb53 	bl	800220c <TS_IO_Read>
 8000b66:	4603      	mov	r3, r0
 8000b68:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000b6a:	7b7b      	ldrb	r3, [r7, #13]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b51      	cmp	r3, #81	@ 0x51
 8000b70:	d101      	bne.n	8000b76 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d802      	bhi.n	8000b88 <ft5336_ReadID+0x4e>
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0e8      	beq.n	8000b5a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000b88:	7b7b      	ldrb	r3, [r7, #13]
 8000b8a:	b2db      	uxtb	r3, r3
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f97f 	bl	8000ea4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 f933 	bl	8000e14 <ft5336_TS_DisableIT>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f001 fb1d 	bl	800220c <TS_IO_Read>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b05      	cmp	r3, #5
 8000be8:	d901      	bls.n	8000bee <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <ft5336_TS_DetectTouch+0x50>)
 8000bf4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000bf6:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <ft5336_TS_DetectTouch+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200003dc 	.word	0x200003dc

08000c0c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8000de4 <ft5336_TS_GetXY+0x1d8>)
 8000c30:	789a      	ldrb	r2, [r3, #2]
 8000c32:	4b6c      	ldr	r3, [pc, #432]	@ (8000de4 <ft5336_TS_GetXY+0x1d8>)
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	f080 80cf 	bcs.w	8000dda <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000c3c:	4b69      	ldr	r3, [pc, #420]	@ (8000de4 <ft5336_TS_GetXY+0x1d8>)
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	2b09      	cmp	r3, #9
 8000c42:	d871      	bhi.n	8000d28 <ft5336_TS_GetXY+0x11c>
 8000c44:	a201      	add	r2, pc, #4	@ (adr r2, 8000c4c <ft5336_TS_GetXY+0x40>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c75 	.word	0x08000c75
 8000c50:	08000c87 	.word	0x08000c87
 8000c54:	08000c99 	.word	0x08000c99
 8000c58:	08000cab 	.word	0x08000cab
 8000c5c:	08000cbd 	.word	0x08000cbd
 8000c60:	08000ccf 	.word	0x08000ccf
 8000c64:	08000ce1 	.word	0x08000ce1
 8000c68:	08000cf3 	.word	0x08000cf3
 8000c6c:	08000d05 	.word	0x08000d05
 8000c70:	08000d17 	.word	0x08000d17
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000c74:	2304      	movs	r3, #4
 8000c76:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000c80:	2305      	movs	r3, #5
 8000c82:	753b      	strb	r3, [r7, #20]
      break;
 8000c84:	e051      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000c86:	230a      	movs	r3, #10
 8000c88:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000c8a:	2309      	movs	r3, #9
 8000c8c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000c8e:	230c      	movs	r3, #12
 8000c90:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000c92:	230b      	movs	r3, #11
 8000c94:	753b      	strb	r3, [r7, #20]
      break;
 8000c96:	e048      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000ca0:	2312      	movs	r3, #18
 8000ca2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000ca4:	2311      	movs	r3, #17
 8000ca6:	753b      	strb	r3, [r7, #20]
      break;
 8000ca8:	e03f      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000caa:	2316      	movs	r3, #22
 8000cac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000cae:	2315      	movs	r3, #21
 8000cb0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000cb2:	2318      	movs	r3, #24
 8000cb4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000cb6:	2317      	movs	r3, #23
 8000cb8:	753b      	strb	r3, [r7, #20]
      break;
 8000cba:	e036      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000cbc:	231c      	movs	r3, #28
 8000cbe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000cc0:	231b      	movs	r3, #27
 8000cc2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000cc4:	231e      	movs	r3, #30
 8000cc6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000cc8:	231d      	movs	r3, #29
 8000cca:	753b      	strb	r3, [r7, #20]
      break;
 8000ccc:	e02d      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000cce:	2322      	movs	r3, #34	@ 0x22
 8000cd0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000cd2:	2321      	movs	r3, #33	@ 0x21
 8000cd4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000cd6:	2324      	movs	r3, #36	@ 0x24
 8000cd8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000cda:	2323      	movs	r3, #35	@ 0x23
 8000cdc:	753b      	strb	r3, [r7, #20]
      break;
 8000cde:	e024      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000ce0:	2328      	movs	r3, #40	@ 0x28
 8000ce2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000ce4:	2327      	movs	r3, #39	@ 0x27
 8000ce6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000ce8:	232a      	movs	r3, #42	@ 0x2a
 8000cea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000cec:	2329      	movs	r3, #41	@ 0x29
 8000cee:	753b      	strb	r3, [r7, #20]
      break;
 8000cf0:	e01b      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000cf2:	232e      	movs	r3, #46	@ 0x2e
 8000cf4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000cf6:	232d      	movs	r3, #45	@ 0x2d
 8000cf8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000cfa:	2330      	movs	r3, #48	@ 0x30
 8000cfc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000cfe:	232f      	movs	r3, #47	@ 0x2f
 8000d00:	753b      	strb	r3, [r7, #20]
      break;
 8000d02:	e012      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000d04:	2334      	movs	r3, #52	@ 0x34
 8000d06:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000d08:	2333      	movs	r3, #51	@ 0x33
 8000d0a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000d0c:	2336      	movs	r3, #54	@ 0x36
 8000d0e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000d10:	2335      	movs	r3, #53	@ 0x35
 8000d12:	753b      	strb	r3, [r7, #20]
      break;
 8000d14:	e009      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000d16:	233a      	movs	r3, #58	@ 0x3a
 8000d18:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000d1a:	2339      	movs	r3, #57	@ 0x39
 8000d1c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000d1e:	233c      	movs	r3, #60	@ 0x3c
 8000d20:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000d22:	233b      	movs	r3, #59	@ 0x3b
 8000d24:	753b      	strb	r3, [r7, #20]
      break;
 8000d26:	e000      	b.n	8000d2a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000d28:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000d2a:	89fb      	ldrh	r3, [r7, #14]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	7dfa      	ldrb	r2, [r7, #23]
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fa6a 	bl	800220c <TS_IO_Read>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000d3c:	7cfb      	ldrb	r3, [r7, #19]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b29      	ldr	r3, [pc, #164]	@ (8000de8 <ft5336_TS_GetXY+0x1dc>)
 8000d44:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000d46:	89fb      	ldrh	r3, [r7, #14]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	7dba      	ldrb	r2, [r7, #22]
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fa5c 	bl	800220c <TS_IO_Read>
 8000d54:	4603      	mov	r3, r0
 8000d56:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000d58:	7cfb      	ldrb	r3, [r7, #19]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	021b      	lsls	r3, r3, #8
 8000d5e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <ft5336_TS_GetXY+0x1dc>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b21b      	sxth	r3, r3
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <ft5336_TS_GetXY+0x1dc>)
 8000d72:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	@ (8000de8 <ft5336_TS_GetXY+0x1dc>)
 8000d76:	881a      	ldrh	r2, [r3, #0]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	7d7a      	ldrb	r2, [r7, #21]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f001 fa41 	bl	800220c <TS_IO_Read>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000d8e:	7cfb      	ldrb	r3, [r7, #19]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <ft5336_TS_GetXY+0x1dc>)
 8000d96:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000d98:	89fb      	ldrh	r3, [r7, #14]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	7d3a      	ldrb	r2, [r7, #20]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fa33 	bl	800220c <TS_IO_Read>
 8000da6:	4603      	mov	r3, r0
 8000da8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000daa:	7cfb      	ldrb	r3, [r7, #19]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <ft5336_TS_GetXY+0x1dc>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <ft5336_TS_GetXY+0x1dc>)
 8000dc4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <ft5336_TS_GetXY+0x1dc>)
 8000dc8:	881a      	ldrh	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000dce:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <ft5336_TS_GetXY+0x1d8>)
 8000dd0:	789b      	ldrb	r3, [r3, #2]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <ft5336_TS_GetXY+0x1d8>)
 8000dd8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200003dc 	.word	0x200003dc
 8000de8:	200003e0 	.word	0x200003e0

08000dec <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	7bfa      	ldrb	r2, [r7, #15]
 8000e04:	21a4      	movs	r1, #164	@ 0xa4
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 f9e6 	bl	80021d8 <TS_IO_Write>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	7bfa      	ldrb	r2, [r7, #15]
 8000e2c:	21a4      	movs	r1, #164	@ 0xa4
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f9d2 	bl	80021d8 <TS_IO_Write>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200003dc 	.word	0x200003dc

08000e84 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000e88:	f7ff fff0 	bl	8000e6c <ft5336_Get_I2C_InitializedStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d104      	bne.n	8000e9c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000e92:	f001 f997 	bl	80021c4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000e96:	4b02      	ldr	r3, [pc, #8]	@ (8000ea0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	701a      	strb	r2, [r3, #0]
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200003dc 	.word	0x200003dc

08000ea4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b090      	sub	sp, #64	@ 0x40
 8000ec4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	4baf      	ldr	r3, [pc, #700]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4aae      	ldr	r2, [pc, #696]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4bac      	ldr	r3, [pc, #688]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eee:	4ba9      	ldr	r3, [pc, #676]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef2:	4aa8      	ldr	r2, [pc, #672]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efa:	4ba6      	ldr	r3, [pc, #664]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4ba3      	ldr	r3, [pc, #652]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	4aa2      	ldr	r2, [pc, #648]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f12:	4ba0      	ldr	r3, [pc, #640]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	623b      	str	r3, [r7, #32]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1e:	4b9d      	ldr	r3, [pc, #628]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a9c      	ldr	r2, [pc, #624]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b9a      	ldr	r3, [pc, #616]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b97      	ldr	r3, [pc, #604]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a96      	ldr	r2, [pc, #600]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b94      	ldr	r3, [pc, #592]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b91      	ldr	r3, [pc, #580]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a90      	ldr	r2, [pc, #576]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b8e      	ldr	r3, [pc, #568]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f66:	4b8b      	ldr	r3, [pc, #556]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a8a      	ldr	r2, [pc, #552]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f6c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b88      	ldr	r3, [pc, #544]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f7e:	4b85      	ldr	r3, [pc, #532]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a84      	ldr	r2, [pc, #528]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b82      	ldr	r3, [pc, #520]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f96:	4b7f      	ldr	r3, [pc, #508]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a7e      	ldr	r2, [pc, #504]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000f9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b7c      	ldr	r3, [pc, #496]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fae:	4b79      	ldr	r3, [pc, #484]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a78      	ldr	r2, [pc, #480]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b76      	ldr	r3, [pc, #472]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0320 	and.w	r3, r3, #32
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	4b73      	ldr	r3, [pc, #460]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a72      	ldr	r2, [pc, #456]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b70      	ldr	r3, [pc, #448]	@ (8001194 <MX_GPIO_Init+0x2d4>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2160      	movs	r1, #96	@ 0x60
 8000fe2:	486d      	ldr	r0, [pc, #436]	@ (8001198 <MX_GPIO_Init+0x2d8>)
 8000fe4:	f004 f8a2 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2120      	movs	r1, #32
 8000fec:	486b      	ldr	r0, [pc, #428]	@ (800119c <MX_GPIO_Init+0x2dc>)
 8000fee:	f004 f89d 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4869      	ldr	r0, [pc, #420]	@ (800119c <MX_GPIO_Init+0x2dc>)
 8000ff8:	f004 f898 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2108      	movs	r1, #8
 8001000:	4867      	ldr	r0, [pc, #412]	@ (80011a0 <MX_GPIO_Init+0x2e0>)
 8001002:	f004 f893 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100c:	4865      	ldr	r0, [pc, #404]	@ (80011a4 <MX_GPIO_Init+0x2e4>)
 800100e:	f004 f88d 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001012:	2200      	movs	r2, #0
 8001014:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8001018:	4863      	ldr	r0, [pc, #396]	@ (80011a8 <MX_GPIO_Init+0x2e8>)
 800101a:	f004 f887 	bl	800512c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	21c8      	movs	r1, #200	@ 0xc8
 8001022:	4862      	ldr	r0, [pc, #392]	@ (80011ac <MX_GPIO_Init+0x2ec>)
 8001024:	f004 f882 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001028:	2308      	movs	r3, #8
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001038:	4619      	mov	r1, r3
 800103a:	4857      	ldr	r0, [pc, #348]	@ (8001198 <MX_GPIO_Init+0x2d8>)
 800103c:	f003 fdbe 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001040:	2304      	movs	r3, #4
 8001042:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001050:	2309      	movs	r3, #9
 8001052:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001058:	4619      	mov	r1, r3
 800105a:	484f      	ldr	r0, [pc, #316]	@ (8001198 <MX_GPIO_Init+0x2d8>)
 800105c:	f003 fdae 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001060:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106e:	2303      	movs	r3, #3
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001072:	230b      	movs	r3, #11
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800107a:	4619      	mov	r1, r3
 800107c:	484b      	ldr	r0, [pc, #300]	@ (80011ac <MX_GPIO_Init+0x2ec>)
 800107e:	f003 fd9d 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001082:	f643 0323 	movw	r3, #14371	@ 0x3823
 8001086:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001090:	2303      	movs	r3, #3
 8001092:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001094:	230a      	movs	r3, #10
 8001096:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800109c:	4619      	mov	r1, r3
 800109e:	4844      	ldr	r0, [pc, #272]	@ (80011b0 <MX_GPIO_Init+0x2f0>)
 80010a0:	f003 fd8c 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80010a4:	2380      	movs	r3, #128	@ 0x80
 80010a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80010b4:	2308      	movs	r3, #8
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	4837      	ldr	r0, [pc, #220]	@ (800119c <MX_GPIO_Init+0x2dc>)
 80010c0:	f003 fd7c 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80010c4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80010c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010d6:	230c      	movs	r3, #12
 80010d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010de:	4619      	mov	r1, r3
 80010e0:	4834      	ldr	r0, [pc, #208]	@ (80011b4 <MX_GPIO_Init+0x2f4>)
 80010e2:	f003 fd6b 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 80010e6:	f248 1340 	movw	r3, #33088	@ 0x8140
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010f8:	4619      	mov	r1, r3
 80010fa:	482f      	ldr	r0, [pc, #188]	@ (80011b8 <MX_GPIO_Init+0x2f8>)
 80010fc:	f003 fd5e 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001100:	2360      	movs	r3, #96	@ 0x60
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001110:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001114:	4619      	mov	r1, r3
 8001116:	4820      	ldr	r0, [pc, #128]	@ (8001198 <MX_GPIO_Init+0x2d8>)
 8001118:	f003 fd50 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800111c:	2340      	movs	r3, #64	@ 0x40
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800112c:	230a      	movs	r3, #10
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001134:	4619      	mov	r1, r3
 8001136:	481e      	ldr	r0, [pc, #120]	@ (80011b0 <MX_GPIO_Init+0x2f0>)
 8001138:	f003 fd40 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800113c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800114e:	4619      	mov	r1, r3
 8001150:	481a      	ldr	r0, [pc, #104]	@ (80011bc <MX_GPIO_Init+0x2fc>)
 8001152:	f003 fd33 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001156:	2340      	movs	r3, #64	@ 0x40
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800115a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001168:	4619      	mov	r1, r3
 800116a:	480c      	ldr	r0, [pc, #48]	@ (800119c <MX_GPIO_Init+0x2dc>)
 800116c:	f003 fd26 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001170:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001182:	230a      	movs	r3, #10
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	480a      	ldr	r0, [pc, #40]	@ (80011b8 <MX_GPIO_Init+0x2f8>)
 800118e:	f003 fd15 	bl	8004bbc <HAL_GPIO_Init>
 8001192:	e015      	b.n	80011c0 <MX_GPIO_Init+0x300>
 8001194:	40023800 	.word	0x40023800
 8001198:	40021000 	.word	0x40021000
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40022800 	.word	0x40022800
 80011a4:	40022000 	.word	0x40022000
 80011a8:	40021c00 	.word	0x40021c00
 80011ac:	40021800 	.word	0x40021800
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80011c0:	23f0      	movs	r3, #240	@ 0xf0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80011d0:	230a      	movs	r3, #10
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011d8:	4619      	mov	r1, r3
 80011da:	4891      	ldr	r0, [pc, #580]	@ (8001420 <MX_GPIO_Init+0x560>)
 80011dc:	f003 fcee 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80011e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80011f2:	230a      	movs	r3, #10
 80011f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011fa:	4619      	mov	r1, r3
 80011fc:	4889      	ldr	r0, [pc, #548]	@ (8001424 <MX_GPIO_Init+0x564>)
 80011fe:	f003 fcdd 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001202:	2328      	movs	r3, #40	@ 0x28
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001212:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001216:	4619      	mov	r1, r3
 8001218:	4883      	ldr	r0, [pc, #524]	@ (8001428 <MX_GPIO_Init+0x568>)
 800121a:	f003 fccf 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800121e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001230:	4619      	mov	r1, r3
 8001232:	487e      	ldr	r0, [pc, #504]	@ (800142c <MX_GPIO_Init+0x56c>)
 8001234:	f003 fcc2 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001238:	2308      	movs	r3, #8
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800124c:	4619      	mov	r1, r3
 800124e:	4878      	ldr	r0, [pc, #480]	@ (8001430 <MX_GPIO_Init+0x570>)
 8001250:	f003 fcb4 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001254:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001262:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001266:	4619      	mov	r1, r3
 8001268:	486e      	ldr	r0, [pc, #440]	@ (8001424 <MX_GPIO_Init+0x564>)
 800126a:	f003 fca7 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800126e:	2310      	movs	r3, #16
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001272:	2300      	movs	r3, #0
 8001274:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800127e:	4619      	mov	r1, r3
 8001280:	4869      	ldr	r0, [pc, #420]	@ (8001428 <MX_GPIO_Init+0x568>)
 8001282:	f003 fc9b 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001286:	2304      	movs	r3, #4
 8001288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001296:	230c      	movs	r3, #12
 8001298:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800129e:	4619      	mov	r1, r3
 80012a0:	4861      	ldr	r0, [pc, #388]	@ (8001428 <MX_GPIO_Init+0x568>)
 80012a2:	f003 fc8b 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80012a6:	f24a 0304 	movw	r3, #40964	@ 0xa004
 80012aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b8:	4619      	mov	r1, r3
 80012ba:	485e      	ldr	r0, [pc, #376]	@ (8001434 <MX_GPIO_Init+0x574>)
 80012bc:	f003 fc7e 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80012c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d6:	4619      	mov	r1, r3
 80012d8:	4851      	ldr	r0, [pc, #324]	@ (8001420 <MX_GPIO_Init+0x560>)
 80012da:	f003 fc6f 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80012de:	f645 6340 	movw	r3, #24128	@ 0x5e40
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012f4:	4619      	mov	r1, r3
 80012f6:	484f      	ldr	r0, [pc, #316]	@ (8001434 <MX_GPIO_Init+0x574>)
 80012f8:	f003 fc60 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80012fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001302:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001306:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001310:	4619      	mov	r1, r3
 8001312:	4843      	ldr	r0, [pc, #268]	@ (8001420 <MX_GPIO_Init+0x560>)
 8001314:	f003 fc52 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001318:	2310      	movs	r3, #16
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001328:	230a      	movs	r3, #10
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001330:	4619      	mov	r1, r3
 8001332:	4840      	ldr	r0, [pc, #256]	@ (8001434 <MX_GPIO_Init+0x574>)
 8001334:	f003 fc42 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001338:	23c8      	movs	r3, #200	@ 0xc8
 800133a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001348:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800134c:	4619      	mov	r1, r3
 800134e:	4835      	ldr	r0, [pc, #212]	@ (8001424 <MX_GPIO_Init+0x564>)
 8001350:	f003 fc34 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001354:	2305      	movs	r3, #5
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001364:	230a      	movs	r3, #10
 8001366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800136c:	4619      	mov	r1, r3
 800136e:	482f      	ldr	r0, [pc, #188]	@ (800142c <MX_GPIO_Init+0x56c>)
 8001370:	f003 fc24 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001374:	2332      	movs	r3, #50	@ 0x32
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001384:	230b      	movs	r3, #11
 8001386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800138c:	4619      	mov	r1, r3
 800138e:	4827      	ldr	r0, [pc, #156]	@ (800142c <MX_GPIO_Init+0x56c>)
 8001390:	f003 fc14 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001394:	2304      	movs	r3, #4
 8001396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013a4:	2309      	movs	r3, #9
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ac:	4619      	mov	r1, r3
 80013ae:	4822      	ldr	r0, [pc, #136]	@ (8001438 <MX_GPIO_Init+0x578>)
 80013b0:	f003 fc04 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80013b4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013c6:	2309      	movs	r3, #9
 80013c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ce:	4619      	mov	r1, r3
 80013d0:	4815      	ldr	r0, [pc, #84]	@ (8001428 <MX_GPIO_Init+0x568>)
 80013d2:	f003 fbf3 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013d6:	2386      	movs	r3, #134	@ 0x86
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e6:	230b      	movs	r3, #11
 80013e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013ee:	4619      	mov	r1, r3
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <MX_GPIO_Init+0x57c>)
 80013f2:	f003 fbe3 	bl	8004bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80013f6:	2328      	movs	r3, #40	@ 0x28
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001406:	230a      	movs	r3, #10
 8001408:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800140e:	4619      	mov	r1, r3
 8001410:	480a      	ldr	r0, [pc, #40]	@ (800143c <MX_GPIO_Init+0x57c>)
 8001412:	f003 fbd3 	bl	8004bbc <HAL_GPIO_Init>

}
 8001416:	bf00      	nop
 8001418:	3740      	adds	r7, #64	@ 0x40
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000
 8001424:	40021800 	.word	0x40021800
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40020800 	.word	0x40020800
 8001430:	40022800 	.word	0x40022800
 8001434:	40021c00 	.word	0x40021c00
 8001438:	40020400 	.word	0x40020400
 800143c:	40020000 	.word	0x40020000

08001440 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001444:	4b1b      	ldr	r3, [pc, #108]	@ (80014b4 <MX_I2C1_Init+0x74>)
 8001446:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <MX_I2C1_Init+0x78>)
 8001448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_I2C1_Init+0x74>)
 800144c:	4a1b      	ldr	r2, [pc, #108]	@ (80014bc <MX_I2C1_Init+0x7c>)
 800144e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_I2C1_Init+0x74>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001456:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <MX_I2C1_Init+0x74>)
 8001458:	2201      	movs	r2, #1
 800145a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <MX_I2C1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <MX_I2C1_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <MX_I2C1_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_I2C1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <MX_I2C1_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800147a:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <MX_I2C1_Init+0x74>)
 800147c:	f003 fe70 	bl	8005160 <HAL_I2C_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001486:	f000 fbcf 	bl	8001c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800148a:	2100      	movs	r1, #0
 800148c:	4809      	ldr	r0, [pc, #36]	@ (80014b4 <MX_I2C1_Init+0x74>)
 800148e:	f004 fbfd 	bl	8005c8c <HAL_I2CEx_ConfigAnalogFilter>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001498:	f000 fbc6 	bl	8001c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_I2C1_Init+0x74>)
 80014a0:	f004 fc3f 	bl	8005d22 <HAL_I2CEx_ConfigDigitalFilter>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014aa:	f000 fbbd 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200003e4 	.word	0x200003e4
 80014b8:	40005400 	.word	0x40005400
 80014bc:	00c0eaff 	.word	0x00c0eaff

080014c0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001538 <MX_I2C3_Init+0x78>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014cc:	4a1b      	ldr	r2, [pc, #108]	@ (800153c <MX_I2C3_Init+0x7c>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014d0:	4b18      	ldr	r3, [pc, #96]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d6:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014d8:	2201      	movs	r2, #1
 80014da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014dc:	4b15      	ldr	r3, [pc, #84]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014e2:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e8:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014fa:	480e      	ldr	r0, [pc, #56]	@ (8001534 <MX_I2C3_Init+0x74>)
 80014fc:	f003 fe30 	bl	8005160 <HAL_I2C_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001506:	f000 fb8f 	bl	8001c28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800150a:	2100      	movs	r1, #0
 800150c:	4809      	ldr	r0, [pc, #36]	@ (8001534 <MX_I2C3_Init+0x74>)
 800150e:	f004 fbbd 	bl	8005c8c <HAL_I2CEx_ConfigAnalogFilter>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001518:	f000 fb86 	bl	8001c28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800151c:	2100      	movs	r1, #0
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_I2C3_Init+0x74>)
 8001520:	f004 fbff 	bl	8005d22 <HAL_I2CEx_ConfigDigitalFilter>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 fb7d 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000438 	.word	0x20000438
 8001538:	40005c00 	.word	0x40005c00
 800153c:	00c0eaff 	.word	0x00c0eaff

08001540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b0ac      	sub	sp, #176	@ 0xb0
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	2284      	movs	r2, #132	@ 0x84
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f009 fa35 	bl	800a9d0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a44      	ldr	r2, [pc, #272]	@ (800167c <HAL_I2C_MspInit+0x13c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d13d      	bne.n	80015ec <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001570:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001574:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001576:	2300      	movs	r3, #0
 8001578:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	4618      	mov	r0, r3
 8001580:	f005 fcb0 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800158a:	f000 fb4d 	bl	8001c28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b3c      	ldr	r3, [pc, #240]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a3b      	ldr	r2, [pc, #236]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b39      	ldr	r3, [pc, #228]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ae:	2312      	movs	r3, #18
 80015b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ca:	4619      	mov	r1, r3
 80015cc:	482d      	ldr	r0, [pc, #180]	@ (8001684 <HAL_I2C_MspInit+0x144>)
 80015ce:	f003 faf5 	bl	8004bbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 80015d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015de:	4b28      	ldr	r3, [pc, #160]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80015ea:	e042      	b.n	8001672 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a25      	ldr	r2, [pc, #148]	@ (8001688 <HAL_I2C_MspInit+0x148>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d13d      	bne.n	8001672 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80015f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001602:	f107 0318 	add.w	r3, r7, #24
 8001606:	4618      	mov	r0, r3
 8001608:	f005 fc6c 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001612:	f000 fb09 	bl	8001c28 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800162e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001632:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163c:	2301      	movs	r3, #1
 800163e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001648:	2304      	movs	r3, #4
 800164a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800164e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001652:	4619      	mov	r1, r3
 8001654:	480d      	ldr	r0, [pc, #52]	@ (800168c <HAL_I2C_MspInit+0x14c>)
 8001656:	f003 fab1 	bl	8004bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 8001660:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_I2C_MspInit+0x140>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
}
 8001672:	bf00      	nop
 8001674:	37b0      	adds	r7, #176	@ 0xb0
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40005400 	.word	0x40005400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400
 8001688:	40005c00 	.word	0x40005c00
 800168c:	40021c00 	.word	0x40021c00

08001690 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a15      	ldr	r2, [pc, #84]	@ (80016f4 <HAL_I2C_MspDeInit+0x64>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d110      	bne.n	80016c4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <HAL_I2C_MspDeInit+0x68>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a14      	ldr	r2, [pc, #80]	@ (80016f8 <HAL_I2C_MspDeInit+0x68>)
 80016a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80016ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b2:	4812      	ldr	r0, [pc, #72]	@ (80016fc <HAL_I2C_MspDeInit+0x6c>)
 80016b4:	f003 fc2e 	bl	8004f14 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80016b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016bc:	480f      	ldr	r0, [pc, #60]	@ (80016fc <HAL_I2C_MspDeInit+0x6c>)
 80016be:	f003 fc29 	bl	8004f14 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 80016c2:	e013      	b.n	80016ec <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <HAL_I2C_MspDeInit+0x70>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10e      	bne.n	80016ec <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_I2C_MspDeInit+0x68>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a09      	ldr	r2, [pc, #36]	@ (80016f8 <HAL_I2C_MspDeInit+0x68>)
 80016d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80016da:	2180      	movs	r1, #128	@ 0x80
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <HAL_I2C_MspDeInit+0x74>)
 80016de:	f003 fc19 	bl	8004f14 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80016e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016e6:	4807      	ldr	r0, [pc, #28]	@ (8001704 <HAL_I2C_MspDeInit+0x74>)
 80016e8:	f003 fc14 	bl	8004f14 <HAL_GPIO_DeInit>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40005400 	.word	0x40005400
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020400 	.word	0x40020400
 8001700:	40005c00 	.word	0x40005c00
 8001704:	40021c00 	.word	0x40021c00

08001708 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08e      	sub	sp, #56	@ 0x38
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2234      	movs	r2, #52	@ 0x34
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f009 f95b 	bl	800a9d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800171a:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <MX_LTDC_Init+0xfc>)
 800171c:	4a3a      	ldr	r2, [pc, #232]	@ (8001808 <MX_LTDC_Init+0x100>)
 800171e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001720:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001726:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800172c:	4b35      	ldr	r3, [pc, #212]	@ (8001804 <MX_LTDC_Init+0xfc>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001732:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001738:	4b32      	ldr	r3, [pc, #200]	@ (8001804 <MX_LTDC_Init+0xfc>)
 800173a:	2228      	movs	r2, #40	@ 0x28
 800173c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001740:	2209      	movs	r2, #9
 8001742:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001744:	4b2f      	ldr	r3, [pc, #188]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001746:	2235      	movs	r2, #53	@ 0x35
 8001748:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800174a:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <MX_LTDC_Init+0xfc>)
 800174c:	220b      	movs	r2, #11
 800174e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001750:	4b2c      	ldr	r3, [pc, #176]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001752:	f240 2215 	movw	r2, #533	@ 0x215
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001758:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <MX_LTDC_Init+0xfc>)
 800175a:	f240 121b 	movw	r2, #283	@ 0x11b
 800175e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001760:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001762:	f240 2235 	movw	r2, #565	@ 0x235
 8001766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001768:	4b26      	ldr	r3, [pc, #152]	@ (8001804 <MX_LTDC_Init+0xfc>)
 800176a:	f240 121d 	movw	r2, #285	@ 0x11d
 800176e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001770:	4b24      	ldr	r3, [pc, #144]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001778:	4b22      	ldr	r3, [pc, #136]	@ (8001804 <MX_LTDC_Init+0xfc>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001780:	4b20      	ldr	r3, [pc, #128]	@ (8001804 <MX_LTDC_Init+0xfc>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001788:	481e      	ldr	r0, [pc, #120]	@ (8001804 <MX_LTDC_Init+0xfc>)
 800178a:	f004 fb17 	bl	8005dbc <HAL_LTDC_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001794:	f000 fa48 	bl	8001c28 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800179c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80017a0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80017a6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80017aa:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80017ac:	2302      	movs	r3, #2
 80017ae:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80017b0:	23ff      	movs	r3, #255	@ 0xff
 80017b2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80017b8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017bc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80017be:	2307      	movs	r3, #7
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80017c2:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80017c8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80017ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	@ (8001804 <MX_LTDC_Init+0xfc>)
 80017ee:	f004 fc77 	bl	80060e0 <HAL_LTDC_ConfigLayer>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80017f8:	f000 fa16 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	3738      	adds	r7, #56	@ 0x38
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000048c 	.word	0x2000048c
 8001808:	40016800 	.word	0x40016800

0800180c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b0ae      	sub	sp, #184	@ 0xb8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	2284      	movs	r2, #132	@ 0x84
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f009 f8cf 	bl	800a9d0 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a6f      	ldr	r2, [pc, #444]	@ (80019f4 <HAL_LTDC_MspInit+0x1e8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	f040 80d6 	bne.w	80019ea <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800183e:	2308      	movs	r3, #8
 8001840:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001842:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001846:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001848:	2305      	movs	r3, #5
 800184a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800184c:	2302      	movs	r3, #2
 800184e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001850:	2303      	movs	r3, #3
 8001852:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001858:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800185c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	4618      	mov	r0, r3
 8001864:	f005 fb3e 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 800186e:	f000 f9db 	bl	8001c28 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001872:	4b61      	ldr	r3, [pc, #388]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	4a60      	ldr	r2, [pc, #384]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 8001878:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800187c:	6453      	str	r3, [r2, #68]	@ 0x44
 800187e:	4b5e      	ldr	r3, [pc, #376]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800188a:	4b5b      	ldr	r3, [pc, #364]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a5a      	ldr	r2, [pc, #360]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 8001890:	f043 0310 	orr.w	r3, r3, #16
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b58      	ldr	r3, [pc, #352]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018a2:	4b55      	ldr	r3, [pc, #340]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a54      	ldr	r2, [pc, #336]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b52      	ldr	r3, [pc, #328]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80018ba:	4b4f      	ldr	r3, [pc, #316]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	4a4e      	ldr	r2, [pc, #312]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c6:	4b4c      	ldr	r3, [pc, #304]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018d2:	4b49      	ldr	r3, [pc, #292]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a48      	ldr	r2, [pc, #288]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b46      	ldr	r3, [pc, #280]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018ea:	4b43      	ldr	r3, [pc, #268]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a42      	ldr	r2, [pc, #264]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b40      	ldr	r3, [pc, #256]	@ (80019f8 <HAL_LTDC_MspInit+0x1ec>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001902:	2310      	movs	r3, #16
 8001904:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800191a:	230e      	movs	r3, #14
 800191c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001924:	4619      	mov	r1, r3
 8001926:	4835      	ldr	r0, [pc, #212]	@ (80019fc <HAL_LTDC_MspInit+0x1f0>)
 8001928:	f003 f948 	bl	8004bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800192c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001946:	230e      	movs	r3, #14
 8001948:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800194c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001950:	4619      	mov	r1, r3
 8001952:	482b      	ldr	r0, [pc, #172]	@ (8001a00 <HAL_LTDC_MspInit+0x1f4>)
 8001954:	f003 f932 	bl	8004bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001958:	23f7      	movs	r3, #247	@ 0xf7
 800195a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001970:	230e      	movs	r3, #14
 8001972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001976:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800197a:	4619      	mov	r1, r3
 800197c:	4821      	ldr	r0, [pc, #132]	@ (8001a04 <HAL_LTDC_MspInit+0x1f8>)
 800197e:	f003 f91d 	bl	8004bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001986:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800199c:	2309      	movs	r3, #9
 800199e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019a6:	4619      	mov	r1, r3
 80019a8:	4817      	ldr	r0, [pc, #92]	@ (8001a08 <HAL_LTDC_MspInit+0x1fc>)
 80019aa:	f003 f907 	bl	8004bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80019ae:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80019b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019c8:	230e      	movs	r3, #14
 80019ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019ce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019d2:	4619      	mov	r1, r3
 80019d4:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <HAL_LTDC_MspInit+0x200>)
 80019d6:	f003 f8f1 	bl	8004bbc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2105      	movs	r1, #5
 80019de:	2058      	movs	r0, #88	@ 0x58
 80019e0:	f002 fa88 	bl	8003ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80019e4:	2058      	movs	r0, #88	@ 0x58
 80019e6:	f002 faa1 	bl	8003f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80019ea:	bf00      	nop
 80019ec:	37b8      	adds	r7, #184	@ 0xb8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40016800 	.word	0x40016800
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40021000 	.word	0x40021000
 8001a00:	40022400 	.word	0x40022400
 8001a04:	40022800 	.word	0x40022800
 8001a08:	40021800 	.word	0x40021800
 8001a0c:	40022000 	.word	0x40022000

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b598      	push	{r3, r4, r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a14:	f001 fed1 	bl	80037ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a18:	f000 f882 	bl	8001b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1c:	f7ff fa50 	bl	8000ec0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001a20:	f7fe fdc0 	bl	80005a4 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001a24:	f7fe fef0 	bl	8000808 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001a28:	f7fe ff46 	bl	80008b8 <MX_FMC_Init>
  MX_I2C1_Init();
 8001a2c:	f7ff fd08 	bl	8001440 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001a30:	f7ff fd46 	bl	80014c0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001a34:	f7ff fe68 	bl	8001708 <MX_LTDC_Init>
  MX_RTC_Init();
 8001a38:	f000 f8fc 	bl	8001c34 <MX_RTC_Init>
  MX_SPI2_Init();
 8001a3c:	f000 f9cc 	bl	8001dd8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001a40:	f001 face 	bl	8002fe0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a44:	f001 fb20 	bl	8003088 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a48:	f001 fb6c 	bl	8003124 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001a4c:	f001 fbb8 	bl	80031c0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001a50:	f001 fc04 	bl	800325c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001a54:	f001 fd18 	bl	8003488 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001a58:	f001 fd46 	bl	80034e8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001a5c:	f7fe fd50 	bl	8000500 <MX_ADC1_Init>
  MX_DAC_Init();
 8001a60:	f7fe fe60 	bl	8000724 <MX_DAC_Init>
  MX_UART7_Init();
 8001a64:	f001 fce0 	bl	8003428 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001a68:	f000 fbfa 	bl	8002260 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001a6c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001a70:	2000      	movs	r0, #0
 8001a72:	f000 fc8d 	bl	8002390 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001a76:	f000 fc63 	bl	8002340 <BSP_LCD_GetXSize>
 8001a7a:	4604      	mov	r4, r0
 8001a7c:	f000 fc74 	bl	8002368 <BSP_LCD_GetYSize>
 8001a80:	4603      	mov	r3, r0
 8001a82:	fb04 f303 	mul.w	r3, r4, r3
 8001a86:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f000 fc7e 	bl	8002390 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001a94:	f000 fe12 	bl	80026bc <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f000 fcd9 	bl	8002450 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFFD2664F);
 8001a9e:	481c      	ldr	r0, [pc, #112]	@ (8001b10 <main+0x100>)
 8001aa0:	f000 fd32 	bl	8002508 <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(0*64,0*64,(uint8_t*)images_bmp_color_apple_D2664F_bmp);
 8001aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b14 <main+0x104>)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f000 fd55 	bl	8002558 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(1*64,1*64,(uint8_t*)images_bmp_color_apple_D2664F_bmp);
 8001aae:	4a19      	ldr	r2, [pc, #100]	@ (8001b14 <main+0x104>)
 8001ab0:	2140      	movs	r1, #64	@ 0x40
 8001ab2:	2040      	movs	r0, #64	@ 0x40
 8001ab4:	f000 fd50 	bl	8002558 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(2*64,2*64,(uint8_t*)images_bmp_color_apple_D2664F_bmp);
 8001ab8:	4a16      	ldr	r2, [pc, #88]	@ (8001b14 <main+0x104>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	2080      	movs	r0, #128	@ 0x80
 8001abe:	f000 fd4b 	bl	8002558 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(3*64,3*64,(uint8_t*)images_bmp_color_apple_D2664F_bmp);
 8001ac2:	4a14      	ldr	r2, [pc, #80]	@ (8001b14 <main+0x104>)
 8001ac4:	21c0      	movs	r1, #192	@ 0xc0
 8001ac6:	20c0      	movs	r0, #192	@ 0xc0
 8001ac8:	f000 fd46 	bl	8002558 <BSP_LCD_DrawBitmap>
  BSP_LCD_SelectLayer(1);
 8001acc:	2001      	movs	r0, #1
 8001ace:	f000 fcbf 	bl	8002450 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f000 fd18 	bl	8002508 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font12);
 8001ad8:	480f      	ldr	r0, [pc, #60]	@ (8001b18 <main+0x108>)
 8001ada:	f000 fcfb 	bl	80024d4 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001ade:	480f      	ldr	r0, [pc, #60]	@ (8001b1c <main+0x10c>)
 8001ae0:	f000 fcc6 	bl	8002470 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f000 fcdb 	bl	80024a0 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001aea:	f000 fc29 	bl	8002340 <BSP_LCD_GetXSize>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b29c      	uxth	r4, r3
 8001af2:	f000 fc39 	bl	8002368 <BSP_LCD_GetYSize>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	4620      	mov	r0, r4
 8001afe:	f001 f937 	bl	8002d70 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001b02:	f7fe ffdd 	bl	8000ac0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b06:	f007 fd23 	bl	8009550 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b0a:	bf00      	nop
 8001b0c:	e7fd      	b.n	8001b0a <main+0xfa>
 8001b0e:	bf00      	nop
 8001b10:	ffd2664f 	.word	0xffd2664f
 8001b14:	0800aa70 	.word	0x0800aa70
 8001b18:	20000030 	.word	0x20000030
 8001b1c:	ff0000ff 	.word	0xff0000ff

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b094      	sub	sp, #80	@ 0x50
 8001b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	2230      	movs	r2, #48	@ 0x30
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f008 ff4e 	bl	800a9d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b44:	f004 fcb2 	bl	80064ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <SystemClock_Config+0xdc>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001bfc <SystemClock_Config+0xdc>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <SystemClock_Config+0xdc>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b60:	4b27      	ldr	r3, [pc, #156]	@ (8001c00 <SystemClock_Config+0xe0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a26      	ldr	r2, [pc, #152]	@ (8001c00 <SystemClock_Config+0xe0>)
 8001b66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b24      	ldr	r3, [pc, #144]	@ (8001c00 <SystemClock_Config+0xe0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001b78:	2309      	movs	r3, #9
 8001b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b82:	2301      	movs	r3, #1
 8001b84:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b86:	2302      	movs	r3, #2
 8001b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b90:	2319      	movs	r3, #25
 8001b92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001b94:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001b98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001b9e:	2309      	movs	r3, #9
 8001ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba2:	f107 0320 	add.w	r3, r7, #32
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f004 fce0 	bl	800656c <HAL_RCC_OscConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bb2:	f000 f839 	bl	8001c28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bb6:	f004 fc89 	bl	80064cc <HAL_PWREx_EnableOverDrive>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001bc0:	f000 f832 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc4:	230f      	movs	r3, #15
 8001bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2106      	movs	r1, #6
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 ff66 	bl	8006ab4 <HAL_RCC_ClockConfig>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001bee:	f000 f81b 	bl	8001c28 <Error_Handler>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3750      	adds	r7, #80	@ 0x50
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40007000 	.word	0x40007000

08001c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a04      	ldr	r2, [pc, #16]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d101      	bne.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c16:	f001 fddd 	bl	80037d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40001000 	.word	0x40001000

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <Error_Handler+0x8>

08001c34 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b090      	sub	sp, #64	@ 0x40
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001c4e:	463b      	mov	r3, r7
 8001c50:	2228      	movs	r2, #40	@ 0x28
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f008 febb 	bl	800a9d0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c5a:	4b46      	ldr	r3, [pc, #280]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001c5c:	4a46      	ldr	r2, [pc, #280]	@ (8001d78 <MX_RTC_Init+0x144>)
 8001c5e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c60:	4b44      	ldr	r3, [pc, #272]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c66:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001c68:	227f      	movs	r2, #127	@ 0x7f
 8001c6a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c6c:	4b41      	ldr	r3, [pc, #260]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001c6e:	22ff      	movs	r2, #255	@ 0xff
 8001c70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c72:	4b40      	ldr	r3, [pc, #256]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c78:	4b3e      	ldr	r3, [pc, #248]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c84:	483b      	ldr	r0, [pc, #236]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001c86:	f005 fd1d 	bl	80076c4 <HAL_RTC_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001c90:	f7ff ffca 	bl	8001c28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001cae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482f      	ldr	r0, [pc, #188]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001cb8:	f005 fd88 	bl	80077cc <HAL_RTC_SetTime>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001cc2:	f7ff ffb1 	bl	8001c28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4823      	ldr	r0, [pc, #140]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001ce8:	f005 fe0a 	bl	8007900 <HAL_RTC_SetDate>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001cf2:	f7ff ff99 	bl	8001c28 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d26:	463b      	mov	r3, r7
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4811      	ldr	r0, [pc, #68]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001d2e:	f005 fe6b 	bl	8007a08 <HAL_RTC_SetAlarm>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001d38:	f7ff ff76 	bl	8001c28 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001d42:	463b      	mov	r3, r7
 8001d44:	2201      	movs	r2, #1
 8001d46:	4619      	mov	r1, r3
 8001d48:	480a      	ldr	r0, [pc, #40]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001d4a:	f005 fe5d 	bl	8007a08 <HAL_RTC_SetAlarm>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001d54:	f7ff ff68 	bl	8001c28 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001d58:	2202      	movs	r2, #2
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <MX_RTC_Init+0x140>)
 8001d5e:	f006 f81f 	bl	8007da0 <HAL_RTCEx_SetTimeStamp>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001d68:	f7ff ff5e 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3740      	adds	r7, #64	@ 0x40
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000534 	.word	0x20000534
 8001d78:	40002800 	.word	0x40002800

08001d7c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0a4      	sub	sp, #144	@ 0x90
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2284      	movs	r2, #132	@ 0x84
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f008 fe1f 	bl	800a9d0 <memset>
  if(rtcHandle->Instance==RTC)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a0e      	ldr	r2, [pc, #56]	@ (8001dd0 <HAL_RTC_MspInit+0x54>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d114      	bne.n	8001dc6 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da6:	f107 030c 	add.w	r3, r7, #12
 8001daa:	4618      	mov	r0, r3
 8001dac:	f005 f89a 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001db6:	f7ff ff37 	bl	8001c28 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RTC_MspInit+0x58>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <HAL_RTC_MspInit+0x58>)
 8001dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dc4:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3790      	adds	r7, #144	@ 0x90
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40002800 	.word	0x40002800
 8001dd4:	40023800 	.word	0x40023800

08001dd8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001dde:	4a1c      	ldr	r2, [pc, #112]	@ (8001e50 <MX_SPI2_Init+0x78>)
 8001de0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001de4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001de8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dea:	4b18      	ldr	r3, [pc, #96]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001df0:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001df2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001df6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e04:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e06:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e0a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e24:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e26:	2207      	movs	r2, #7
 8001e28:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e32:	2208      	movs	r2, #8
 8001e34:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	@ (8001e4c <MX_SPI2_Init+0x74>)
 8001e38:	f006 f8ab 	bl	8007f92 <HAL_SPI_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e42:	f7ff fef1 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000554 	.word	0x20000554
 8001e50:	40003800 	.word	0x40003800

08001e54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	@ 0x28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a25      	ldr	r2, [pc, #148]	@ (8001f08 <HAL_SPI_MspInit+0xb4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d144      	bne.n	8001f00 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e76:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	4a24      	ldr	r2, [pc, #144]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e82:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a18      	ldr	r2, [pc, #96]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <HAL_SPI_MspInit+0xb8>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480d      	ldr	r0, [pc, #52]	@ (8001f10 <HAL_SPI_MspInit+0xbc>)
 8001eda:	f002 fe6f 	bl	8004bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001ede:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4806      	ldr	r0, [pc, #24]	@ (8001f14 <HAL_SPI_MspInit+0xc0>)
 8001efc:	f002 fe5e 	bl	8004bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	@ 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40003800 	.word	0x40003800
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40020400 	.word	0x40020400

08001f18 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	@ 0x30
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a51      	ldr	r2, [pc, #324]	@ (8002068 <I2Cx_MspInit+0x150>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d14d      	bne.n	8001fc4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f28:	4b50      	ldr	r3, [pc, #320]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	4a4f      	ldr	r2, [pc, #316]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f34:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f44:	2312      	movs	r3, #18
 8001f46:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001f50:	2304      	movs	r3, #4
 8001f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4845      	ldr	r0, [pc, #276]	@ (8002070 <I2Cx_MspInit+0x158>)
 8001f5c:	f002 fe2e 	bl	8004bbc <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001f60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001f66:	f107 031c 	add.w	r3, r7, #28
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4840      	ldr	r0, [pc, #256]	@ (8002070 <I2Cx_MspInit+0x158>)
 8001f6e:	f002 fe25 	bl	8004bbc <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001f72:	4b3e      	ldr	r3, [pc, #248]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	4a3d      	ldr	r2, [pc, #244]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001f8a:	4b38      	ldr	r3, [pc, #224]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a37      	ldr	r2, [pc, #220]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f94:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001f96:	4b35      	ldr	r3, [pc, #212]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a34      	ldr	r2, [pc, #208]	@ (800206c <I2Cx_MspInit+0x154>)
 8001f9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001fa0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	210f      	movs	r1, #15
 8001fa6:	2048      	movs	r0, #72	@ 0x48
 8001fa8:	f001 ffa4 	bl	8003ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001fac:	2048      	movs	r0, #72	@ 0x48
 8001fae:	f001 ffbd 	bl	8003f2c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	2049      	movs	r0, #73	@ 0x49
 8001fb8:	f001 ff9c 	bl	8003ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001fbc:	2049      	movs	r0, #73	@ 0x49
 8001fbe:	f001 ffb5 	bl	8003f2c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001fc2:	e04d      	b.n	8002060 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001fc4:	4b29      	ldr	r3, [pc, #164]	@ (800206c <I2Cx_MspInit+0x154>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	4a28      	ldr	r2, [pc, #160]	@ (800206c <I2Cx_MspInit+0x154>)
 8001fca:	f043 0302 	orr.w	r3, r3, #2
 8001fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd0:	4b26      	ldr	r3, [pc, #152]	@ (800206c <I2Cx_MspInit+0x154>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001fe2:	2312      	movs	r3, #18
 8001fe4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001fea:	2302      	movs	r3, #2
 8001fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	481e      	ldr	r0, [pc, #120]	@ (8002074 <I2Cx_MspInit+0x15c>)
 8001ffa:	f002 fddf 	bl	8004bbc <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	481a      	ldr	r0, [pc, #104]	@ (8002074 <I2Cx_MspInit+0x15c>)
 800200c:	f002 fdd6 	bl	8004bbc <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002010:	4b16      	ldr	r3, [pc, #88]	@ (800206c <I2Cx_MspInit+0x154>)
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	4a15      	ldr	r2, [pc, #84]	@ (800206c <I2Cx_MspInit+0x154>)
 8002016:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800201a:	6413      	str	r3, [r2, #64]	@ 0x40
 800201c:	4b13      	ldr	r3, [pc, #76]	@ (800206c <I2Cx_MspInit+0x154>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <I2Cx_MspInit+0x154>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4a0f      	ldr	r2, [pc, #60]	@ (800206c <I2Cx_MspInit+0x154>)
 800202e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002032:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002034:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <I2Cx_MspInit+0x154>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a0c      	ldr	r2, [pc, #48]	@ (800206c <I2Cx_MspInit+0x154>)
 800203a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800203e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	210f      	movs	r1, #15
 8002044:	201f      	movs	r0, #31
 8002046:	f001 ff55 	bl	8003ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800204a:	201f      	movs	r0, #31
 800204c:	f001 ff6e 	bl	8003f2c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	210f      	movs	r1, #15
 8002054:	2020      	movs	r0, #32
 8002056:	f001 ff4d 	bl	8003ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800205a:	2020      	movs	r0, #32
 800205c:	f001 ff66 	bl	8003f2c <HAL_NVIC_EnableIRQ>
}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	@ 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200005b8 	.word	0x200005b8
 800206c:	40023800 	.word	0x40023800
 8002070:	40021c00 	.word	0x40021c00
 8002074:	40020400 	.word	0x40020400

08002078 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f003 fb5b 	bl	800573c <HAL_I2C_GetState>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d125      	bne.n	80020d8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a14      	ldr	r2, [pc, #80]	@ (80020e0 <I2Cx_Init+0x68>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a13      	ldr	r2, [pc, #76]	@ (80020e4 <I2Cx_Init+0x6c>)
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e002      	b.n	80020a2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <I2Cx_Init+0x70>)
 80020a0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a11      	ldr	r2, [pc, #68]	@ (80020ec <I2Cx_Init+0x74>)
 80020a6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff23 	bl	8001f18 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f003 f844 	bl	8005160 <HAL_I2C_Init>
  }
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200005b8 	.word	0x200005b8
 80020e4:	40005c00 	.word	0x40005c00
 80020e8:	40005400 	.word	0x40005400
 80020ec:	40912732 	.word	0x40912732

080020f0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	@ 0x28
 80020f4:	af04      	add	r7, sp, #16
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	72fb      	strb	r3, [r7, #11]
 8002102:	460b      	mov	r3, r1
 8002104:	813b      	strh	r3, [r7, #8]
 8002106:	4613      	mov	r3, r2
 8002108:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800210e:	7afb      	ldrb	r3, [r7, #11]
 8002110:	b299      	uxth	r1, r3
 8002112:	88f8      	ldrh	r0, [r7, #6]
 8002114:	893a      	ldrh	r2, [r7, #8]
 8002116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211a:	9302      	str	r3, [sp, #8]
 800211c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	4603      	mov	r3, r0
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f003 f9ee 	bl	8005508 <HAL_I2C_Mem_Read>
 800212c:	4603      	mov	r3, r0
 800212e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d004      	beq.n	8002140 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	4619      	mov	r1, r3
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f832 	bl	80021a4 <I2Cx_Error>
  }
  return status;    
 8002140:	7dfb      	ldrb	r3, [r7, #23]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b08a      	sub	sp, #40	@ 0x28
 800214e:	af04      	add	r7, sp, #16
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	4608      	mov	r0, r1
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	4603      	mov	r3, r0
 800215a:	72fb      	strb	r3, [r7, #11]
 800215c:	460b      	mov	r3, r1
 800215e:	813b      	strh	r3, [r7, #8]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	b299      	uxth	r1, r3
 800216c:	88f8      	ldrh	r0, [r7, #6]
 800216e:	893a      	ldrh	r2, [r7, #8]
 8002170:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002174:	9302      	str	r3, [sp, #8]
 8002176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	6a3b      	ldr	r3, [r7, #32]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	4603      	mov	r3, r0
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f003 f8ad 	bl	80052e0 <HAL_I2C_Mem_Write>
 8002186:	4603      	mov	r3, r0
 8002188:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800218a:	7dfb      	ldrb	r3, [r7, #23]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002190:	7afb      	ldrb	r3, [r7, #11]
 8002192:	4619      	mov	r1, r3
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f805 	bl	80021a4 <I2Cx_Error>
  }
  return status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f003 f865 	bl	8005280 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ff5e 	bl	8002078 <I2Cx_Init>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <TS_IO_Init+0x10>)
 80021ca:	f7ff ff55 	bl	8002078 <I2Cx_Init>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200005b8 	.word	0x200005b8

080021d8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af02      	add	r7, sp, #8
 80021de:	4603      	mov	r3, r0
 80021e0:	71fb      	strb	r3, [r7, #7]
 80021e2:	460b      	mov	r3, r1
 80021e4:	71bb      	strb	r3, [r7, #6]
 80021e6:	4613      	mov	r3, r2
 80021e8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80021ea:	79bb      	ldrb	r3, [r7, #6]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	79f9      	ldrb	r1, [r7, #7]
 80021f0:	2301      	movs	r3, #1
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	1d7b      	adds	r3, r7, #5
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2301      	movs	r3, #1
 80021fa:	4803      	ldr	r0, [pc, #12]	@ (8002208 <TS_IO_Write+0x30>)
 80021fc:	f7ff ffa5 	bl	800214a <I2Cx_WriteMultiple>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200005b8 	.word	0x200005b8

0800220c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002220:	79bb      	ldrb	r3, [r7, #6]
 8002222:	b29a      	uxth	r2, r3
 8002224:	79f9      	ldrb	r1, [r7, #7]
 8002226:	2301      	movs	r3, #1
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	f107 030f 	add.w	r3, r7, #15
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2301      	movs	r3, #1
 8002232:	4804      	ldr	r0, [pc, #16]	@ (8002244 <TS_IO_Read+0x38>)
 8002234:	f7ff ff5c 	bl	80020f0 <I2Cx_ReadMultiple>

  return read_value;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200005b8 	.word	0x200005b8

08002248 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f001 fadf 	bl	8003814 <HAL_Delay>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002264:	4b31      	ldr	r3, [pc, #196]	@ (800232c <BSP_LCD_Init+0xcc>)
 8002266:	2228      	movs	r2, #40	@ 0x28
 8002268:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800226a:	4b30      	ldr	r3, [pc, #192]	@ (800232c <BSP_LCD_Init+0xcc>)
 800226c:	2209      	movs	r2, #9
 800226e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002270:	4b2e      	ldr	r3, [pc, #184]	@ (800232c <BSP_LCD_Init+0xcc>)
 8002272:	2235      	movs	r2, #53	@ 0x35
 8002274:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002276:	4b2d      	ldr	r3, [pc, #180]	@ (800232c <BSP_LCD_Init+0xcc>)
 8002278:	220b      	movs	r2, #11
 800227a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800227c:	4b2b      	ldr	r3, [pc, #172]	@ (800232c <BSP_LCD_Init+0xcc>)
 800227e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002284:	4b29      	ldr	r3, [pc, #164]	@ (800232c <BSP_LCD_Init+0xcc>)
 8002286:	f240 2215 	movw	r2, #533	@ 0x215
 800228a:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800228c:	4b27      	ldr	r3, [pc, #156]	@ (800232c <BSP_LCD_Init+0xcc>)
 800228e:	f240 121d 	movw	r2, #285	@ 0x11d
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002294:	4b25      	ldr	r3, [pc, #148]	@ (800232c <BSP_LCD_Init+0xcc>)
 8002296:	f240 2235 	movw	r2, #565	@ 0x235
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800229c:	2100      	movs	r1, #0
 800229e:	4823      	ldr	r0, [pc, #140]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022a0:	f000 fb04 	bl	80028ac <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80022a4:	4b21      	ldr	r3, [pc, #132]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80022aa:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80022ac:	4b1f      	ldr	r3, [pc, #124]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022ae:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80022b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80022c4:	4b19      	ldr	r3, [pc, #100]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80022cc:	4b17      	ldr	r3, [pc, #92]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80022d2:	4b16      	ldr	r3, [pc, #88]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80022d8:	4b14      	ldr	r3, [pc, #80]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80022de:	4b13      	ldr	r3, [pc, #76]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80022e4:	4b11      	ldr	r3, [pc, #68]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	@ (8002330 <BSP_LCD_Init+0xd0>)
 80022e8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80022ea:	4810      	ldr	r0, [pc, #64]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022ec:	f003 ff36 	bl	800615c <HAL_LTDC_GetState>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d103      	bne.n	80022fe <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80022f6:	2100      	movs	r1, #0
 80022f8:	480c      	ldr	r0, [pc, #48]	@ (800232c <BSP_LCD_Init+0xcc>)
 80022fa:	f000 f9fd 	bl	80026f8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80022fe:	480b      	ldr	r0, [pc, #44]	@ (800232c <BSP_LCD_Init+0xcc>)
 8002300:	f003 fd5c 	bl	8005dbc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800230a:	480a      	ldr	r0, [pc, #40]	@ (8002334 <BSP_LCD_Init+0xd4>)
 800230c:	f002 ff0e 	bl	800512c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	2108      	movs	r1, #8
 8002314:	4808      	ldr	r0, [pc, #32]	@ (8002338 <BSP_LCD_Init+0xd8>)
 8002316:	f002 ff09 	bl	800512c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800231a:	f000 fb73 	bl	8002a04 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800231e:	4807      	ldr	r0, [pc, #28]	@ (800233c <BSP_LCD_Init+0xdc>)
 8002320:	f000 f8d8 	bl	80024d4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000060c 	.word	0x2000060c
 8002330:	40016800 	.word	0x40016800
 8002334:	40022000 	.word	0x40022000
 8002338:	40022800 	.word	0x40022800
 800233c:	20000028 	.word	0x20000028

08002340 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <BSP_LCD_GetXSize+0x20>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a06      	ldr	r2, [pc, #24]	@ (8002364 <BSP_LCD_GetXSize+0x24>)
 800234a:	2134      	movs	r1, #52	@ 0x34
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3360      	adds	r3, #96	@ 0x60
 8002354:	681b      	ldr	r3, [r3, #0]
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	200006f4 	.word	0x200006f4
 8002364:	2000060c 	.word	0x2000060c

08002368 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800236c:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <BSP_LCD_GetYSize+0x20>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a06      	ldr	r2, [pc, #24]	@ (800238c <BSP_LCD_GetYSize+0x24>)
 8002372:	2134      	movs	r1, #52	@ 0x34
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	3364      	adds	r3, #100	@ 0x64
 800237c:	681b      	ldr	r3, [r3, #0]
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	200006f4 	.word	0x200006f4
 800238c:	2000060c 	.word	0x2000060c

08002390 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002390:	b580      	push	{r7, lr}
 8002392:	b090      	sub	sp, #64	@ 0x40
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	6039      	str	r1, [r7, #0]
 800239a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80023a0:	f7ff ffce 	bl	8002340 <BSP_LCD_GetXSize>
 80023a4:	4603      	mov	r3, r0
 80023a6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80023ac:	f7ff ffdc 	bl	8002368 <BSP_LCD_GetYSize>
 80023b0:	4603      	mov	r3, r0
 80023b2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80023bc:	23ff      	movs	r3, #255	@ 0xff
 80023be:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80023d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023dc:	2307      	movs	r3, #7
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80023e0:	f7ff ffae 	bl	8002340 <BSP_LCD_GetXSize>
 80023e4:	4603      	mov	r3, r0
 80023e6:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80023e8:	f7ff ffbe 	bl	8002368 <BSP_LCD_GetYSize>
 80023ec:	4603      	mov	r3, r0
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80023f0:	88fa      	ldrh	r2, [r7, #6]
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	4812      	ldr	r0, [pc, #72]	@ (8002444 <BSP_LCD_LayerDefaultInit+0xb4>)
 80023fa:	f003 fe71 	bl	80060e0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80023fe:	88fa      	ldrh	r2, [r7, #6]
 8002400:	4911      	ldr	r1, [pc, #68]	@ (8002448 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3304      	adds	r3, #4
 800240e:	f04f 32ff 	mov.w	r2, #4294967295
 8002412:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	490c      	ldr	r1, [pc, #48]	@ (8002448 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	3308      	adds	r3, #8
 8002424:	4a09      	ldr	r2, [pc, #36]	@ (800244c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002426:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	4907      	ldr	r1, [pc, #28]	@ (8002448 <BSP_LCD_LayerDefaultInit+0xb8>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800243a:	601a      	str	r2, [r3, #0]
}
 800243c:	bf00      	nop
 800243e:	3740      	adds	r7, #64	@ 0x40
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	2000060c 	.word	0x2000060c
 8002448:	200006f8 	.word	0x200006f8
 800244c:	20000028 	.word	0x20000028

08002450 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002458:	4a04      	ldr	r2, [pc, #16]	@ (800246c <BSP_LCD_SelectLayer+0x1c>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
} 
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	200006f4 	.word	0x200006f4

08002470 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002478:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <BSP_LCD_SetTextColor+0x28>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4907      	ldr	r1, [pc, #28]	@ (800249c <BSP_LCD_SetTextColor+0x2c>)
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	601a      	str	r2, [r3, #0]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	200006f4 	.word	0x200006f4
 800249c:	200006f8 	.word	0x200006f8

080024a0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80024a8:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <BSP_LCD_SetBackColor+0x2c>)
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4908      	ldr	r1, [pc, #32]	@ (80024d0 <BSP_LCD_SetBackColor+0x30>)
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	3304      	adds	r3, #4
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	601a      	str	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	200006f4 	.word	0x200006f4
 80024d0:	200006f8 	.word	0x200006f8

080024d4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <BSP_LCD_SetFont+0x2c>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4908      	ldr	r1, [pc, #32]	@ (8002504 <BSP_LCD_SetFont+0x30>)
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3308      	adds	r3, #8
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	200006f4 	.word	0x200006f4
 8002504:	200006f8 	.word	0x200006f8

08002508 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250a:	b085      	sub	sp, #20
 800250c:	af02      	add	r7, sp, #8
 800250e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <BSP_LCD_Clear+0x48>)
 8002512:	681c      	ldr	r4, [r3, #0]
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <BSP_LCD_Clear+0x48>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0e      	ldr	r2, [pc, #56]	@ (8002554 <BSP_LCD_Clear+0x4c>)
 800251a:	2134      	movs	r1, #52	@ 0x34
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	335c      	adds	r3, #92	@ 0x5c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461e      	mov	r6, r3
 8002528:	f7ff ff0a 	bl	8002340 <BSP_LCD_GetXSize>
 800252c:	4605      	mov	r5, r0
 800252e:	f7ff ff1b 	bl	8002368 <BSP_LCD_GetYSize>
 8002532:	4602      	mov	r2, r0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	2300      	movs	r3, #0
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	462a      	mov	r2, r5
 8002540:	4631      	mov	r1, r6
 8002542:	4620      	mov	r0, r4
 8002544:	f000 f9ce 	bl	80028e4 <LL_FillBuffer>
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002550:	200006f4 	.word	0x200006f4
 8002554:	2000060c 	.word	0x2000060c

08002558 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b08b      	sub	sp, #44	@ 0x2c
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	330a      	adds	r3, #10
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	330b      	adds	r3, #11
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	441a      	add	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	330c      	adds	r3, #12
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	041b      	lsls	r3, r3, #16
 8002592:	441a      	add	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	330d      	adds	r3, #13
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	4413      	add	r3, r2
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3312      	adds	r3, #18
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3313      	adds	r3, #19
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	441a      	add	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3314      	adds	r3, #20
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	441a      	add	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3315      	adds	r3, #21
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	061b      	lsls	r3, r3, #24
 80025c4:	4413      	add	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3316      	adds	r3, #22
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3317      	adds	r3, #23
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3318      	adds	r3, #24
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	441a      	add	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3319      	adds	r3, #25
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	4413      	add	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	331c      	adds	r3, #28
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	331d      	adds	r3, #29
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	4413      	add	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002604:	4b2b      	ldr	r3, [pc, #172]	@ (80026b4 <BSP_LCD_DrawBitmap+0x15c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a2b      	ldr	r2, [pc, #172]	@ (80026b8 <BSP_LCD_DrawBitmap+0x160>)
 800260a:	2134      	movs	r1, #52	@ 0x34
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	335c      	adds	r3, #92	@ 0x5c
 8002614:	681c      	ldr	r4, [r3, #0]
 8002616:	f7ff fe93 	bl	8002340 <BSP_LCD_GetXSize>
 800261a:	4602      	mov	r2, r0
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	fb03 f202 	mul.w	r2, r3, r2
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4423      	add	r3, r4
 800262a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	3b20      	subs	r3, #32
 8002630:	2b07      	cmp	r3, #7
 8002632:	d802      	bhi.n	800263a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	e008      	b.n	800264c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	3b10      	subs	r3, #16
 800263e:	2b07      	cmp	r3, #7
 8002640:	d802      	bhi.n	8002648 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002642:	2302      	movs	r3, #2
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	e001      	b.n	800264c <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002648:	2301      	movs	r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3b01      	subs	r3, #1
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	08d2      	lsrs	r2, r2, #3
 800265a:	fb03 f202 	mul.w	r2, r3, r2
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	4413      	add	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
 800266c:	e018      	b.n	80026a0 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f981 	bl	800297c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800267a:	f7ff fe61 	bl	8002340 <BSP_LCD_GetXSize>
 800267e:	4603      	mov	r3, r0
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	6a3a      	ldr	r2, [r7, #32]
 8002684:	4413      	add	r3, r2
 8002686:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	08db      	lsrs	r3, r3, #3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	425b      	negs	r3, r3
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	3301      	adds	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3e2      	bcc.n	800266e <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	372c      	adds	r7, #44	@ 0x2c
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200006f4 	.word	0x200006f4
 80026b8:	2000060c 	.word	0x2000060c

080026bc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <BSP_LCD_DisplayOn+0x30>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <BSP_LCD_DisplayOn+0x30>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80026d0:	2201      	movs	r2, #1
 80026d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026d6:	4806      	ldr	r0, [pc, #24]	@ (80026f0 <BSP_LCD_DisplayOn+0x34>)
 80026d8:	f002 fd28 	bl	800512c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80026dc:	2201      	movs	r2, #1
 80026de:	2108      	movs	r1, #8
 80026e0:	4804      	ldr	r0, [pc, #16]	@ (80026f4 <BSP_LCD_DisplayOn+0x38>)
 80026e2:	f002 fd23 	bl	800512c <HAL_GPIO_WritePin>
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2000060c 	.word	0x2000060c
 80026f0:	40022000 	.word	0x40022000
 80026f4:	40022800 	.word	0x40022800

080026f8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b090      	sub	sp, #64	@ 0x40
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002702:	4b64      	ldr	r3, [pc, #400]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	4a63      	ldr	r2, [pc, #396]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002708:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800270c:	6453      	str	r3, [r2, #68]	@ 0x44
 800270e:	4b61      	ldr	r3, [pc, #388]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800271a:	4b5e      	ldr	r3, [pc, #376]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4a5d      	ldr	r2, [pc, #372]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002720:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4b5b      	ldr	r3, [pc, #364]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002732:	4b58      	ldr	r3, [pc, #352]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	4a57      	ldr	r2, [pc, #348]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002738:	f043 0310 	orr.w	r3, r3, #16
 800273c:	6313      	str	r3, [r2, #48]	@ 0x30
 800273e:	4b55      	ldr	r3, [pc, #340]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800274a:	4b52      	ldr	r3, [pc, #328]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a51      	ldr	r2, [pc, #324]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b4f      	ldr	r3, [pc, #316]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002762:	4b4c      	ldr	r3, [pc, #304]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a4b      	ldr	r2, [pc, #300]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800277a:	4b46      	ldr	r3, [pc, #280]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a45      	ldr	r2, [pc, #276]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002780:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b43      	ldr	r3, [pc, #268]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002792:	4b40      	ldr	r3, [pc, #256]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	4a3f      	ldr	r2, [pc, #252]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 8002798:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800279c:	6313      	str	r3, [r2, #48]	@ 0x30
 800279e:	4b3d      	ldr	r3, [pc, #244]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80027aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a39      	ldr	r2, [pc, #228]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b37      	ldr	r3, [pc, #220]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80027c2:	4b34      	ldr	r3, [pc, #208]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a33      	ldr	r2, [pc, #204]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 80027c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b31      	ldr	r3, [pc, #196]	@ (8002894 <BSP_LCD_MspInit+0x19c>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80027da:	2310      	movs	r3, #16
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80027de:	2302      	movs	r3, #2
 80027e0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80027e6:	2302      	movs	r3, #2
 80027e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80027ea:	230e      	movs	r3, #14
 80027ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80027ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027f2:	4619      	mov	r1, r3
 80027f4:	4828      	ldr	r0, [pc, #160]	@ (8002898 <BSP_LCD_MspInit+0x1a0>)
 80027f6:	f002 f9e1 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80027fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002800:	2302      	movs	r3, #2
 8002802:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002804:	2309      	movs	r3, #9
 8002806:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800280c:	4619      	mov	r1, r3
 800280e:	4823      	ldr	r0, [pc, #140]	@ (800289c <BSP_LCD_MspInit+0x1a4>)
 8002810:	f002 f9d4 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002814:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800281a:	2302      	movs	r3, #2
 800281c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800281e:	230e      	movs	r3, #14
 8002820:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002826:	4619      	mov	r1, r3
 8002828:	481d      	ldr	r0, [pc, #116]	@ (80028a0 <BSP_LCD_MspInit+0x1a8>)
 800282a:	f002 f9c7 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800282e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002838:	230e      	movs	r3, #14
 800283a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800283c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002840:	4619      	mov	r1, r3
 8002842:	4818      	ldr	r0, [pc, #96]	@ (80028a4 <BSP_LCD_MspInit+0x1ac>)
 8002844:	f002 f9ba 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002848:	23f7      	movs	r3, #247	@ 0xf7
 800284a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002850:	230e      	movs	r3, #14
 8002852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002854:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002858:	4619      	mov	r1, r3
 800285a:	4813      	ldr	r0, [pc, #76]	@ (80028a8 <BSP_LCD_MspInit+0x1b0>)
 800285c:	f002 f9ae 	bl	8004bbc <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002866:	2301      	movs	r3, #1
 8002868:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800286a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800286e:	4619      	mov	r1, r3
 8002870:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <BSP_LCD_MspInit+0x1a8>)
 8002872:	f002 f9a3 	bl	8004bbc <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002876:	2308      	movs	r3, #8
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800287a:	2301      	movs	r3, #1
 800287c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800287e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002882:	4619      	mov	r1, r3
 8002884:	4808      	ldr	r0, [pc, #32]	@ (80028a8 <BSP_LCD_MspInit+0x1b0>)
 8002886:	f002 f999 	bl	8004bbc <HAL_GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	3740      	adds	r7, #64	@ 0x40
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	40021000 	.word	0x40021000
 800289c:	40021800 	.word	0x40021800
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40022400 	.word	0x40022400
 80028a8:	40022800 	.word	0x40022800

080028ac <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <BSP_LCD_ClockConfig+0x34>)
 80028b8:	2208      	movs	r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80028bc:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <BSP_LCD_ClockConfig+0x34>)
 80028be:	22c0      	movs	r2, #192	@ 0xc0
 80028c0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80028c2:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <BSP_LCD_ClockConfig+0x34>)
 80028c4:	2205      	movs	r2, #5
 80028c6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <BSP_LCD_ClockConfig+0x34>)
 80028ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80028d0:	4803      	ldr	r0, [pc, #12]	@ (80028e0 <BSP_LCD_ClockConfig+0x34>)
 80028d2:	f004 fb07 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000710 	.word	0x20000710

080028e4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80028f2:	4b1e      	ldr	r3, [pc, #120]	@ (800296c <LL_FillBuffer+0x88>)
 80028f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80028f8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80028fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002970 <LL_FillBuffer+0x8c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002974 <LL_FillBuffer+0x90>)
 8002900:	2134      	movs	r1, #52	@ 0x34
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3348      	adds	r3, #72	@ 0x48
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d103      	bne.n	8002918 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <LL_FillBuffer+0x88>)
 8002912:	2202      	movs	r2, #2
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	e002      	b.n	800291e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002918:	4b14      	ldr	r3, [pc, #80]	@ (800296c <LL_FillBuffer+0x88>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800291e:	4a13      	ldr	r2, [pc, #76]	@ (800296c <LL_FillBuffer+0x88>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002924:	4b11      	ldr	r3, [pc, #68]	@ (800296c <LL_FillBuffer+0x88>)
 8002926:	4a14      	ldr	r2, [pc, #80]	@ (8002978 <LL_FillBuffer+0x94>)
 8002928:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800292a:	4810      	ldr	r0, [pc, #64]	@ (800296c <LL_FillBuffer+0x88>)
 800292c:	f001 fdaa 	bl	8004484 <HAL_DMA2D_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002936:	68f9      	ldr	r1, [r7, #12]
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <LL_FillBuffer+0x88>)
 800293a:	f002 f811 	bl	8004960 <HAL_DMA2D_ConfigLayer>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10e      	bne.n	8002962 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69f9      	ldr	r1, [r7, #28]
 800294e:	4807      	ldr	r0, [pc, #28]	@ (800296c <LL_FillBuffer+0x88>)
 8002950:	f001 fde2 	bl	8004518 <HAL_DMA2D_Start>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800295a:	210a      	movs	r1, #10
 800295c:	4803      	ldr	r0, [pc, #12]	@ (800296c <LL_FillBuffer+0x88>)
 800295e:	f001 fe06 	bl	800456e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200006b4 	.word	0x200006b4
 8002970:	200006f4 	.word	0x200006f4
 8002974:	2000060c 	.word	0x2000060c
 8002978:	4002b000 	.word	0x4002b000

0800297c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800298a:	4b1c      	ldr	r3, [pc, #112]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 800298c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002990:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002992:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8002998:	4b18      	ldr	r3, [pc, #96]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800299e:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80029a4:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029a6:	22ff      	movs	r2, #255	@ 0xff
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80029aa:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80029b0:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80029b6:	4b11      	ldr	r3, [pc, #68]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029b8:	4a11      	ldr	r2, [pc, #68]	@ (8002a00 <LL_ConvertLineToARGB8888+0x84>)
 80029ba:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80029bc:	480f      	ldr	r0, [pc, #60]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029be:	f001 fd61 	bl	8004484 <HAL_DMA2D_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d115      	bne.n	80029f4 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80029c8:	2101      	movs	r1, #1
 80029ca:	480c      	ldr	r0, [pc, #48]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029cc:	f001 ffc8 	bl	8004960 <HAL_DMA2D_ConfigLayer>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10e      	bne.n	80029f4 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80029d6:	68f9      	ldr	r1, [r7, #12]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	2301      	movs	r3, #1
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4806      	ldr	r0, [pc, #24]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029e2:	f001 fd99 	bl	8004518 <HAL_DMA2D_Start>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d103      	bne.n	80029f4 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80029ec:	210a      	movs	r1, #10
 80029ee:	4803      	ldr	r0, [pc, #12]	@ (80029fc <LL_ConvertLineToARGB8888+0x80>)
 80029f0:	f001 fdbd 	bl	800456e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80029f4:	bf00      	nop
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200006b4 	.word	0x200006b4
 8002a00:	4002b000 	.word	0x4002b000

08002a04 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002a08:	4b29      	ldr	r3, [pc, #164]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ab4 <BSP_SDRAM_Init+0xb0>)
 8002a0c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab8 <BSP_SDRAM_Init+0xb4>)
 8002a10:	2202      	movs	r2, #2
 8002a12:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <BSP_SDRAM_Init+0xb4>)
 8002a16:	2207      	movs	r2, #7
 8002a18:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002a1a:	4b27      	ldr	r3, [pc, #156]	@ (8002ab8 <BSP_SDRAM_Init+0xb4>)
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002a20:	4b25      	ldr	r3, [pc, #148]	@ (8002ab8 <BSP_SDRAM_Init+0xb4>)
 8002a22:	2207      	movs	r2, #7
 8002a24:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002a26:	4b24      	ldr	r3, [pc, #144]	@ (8002ab8 <BSP_SDRAM_Init+0xb4>)
 8002a28:	2202      	movs	r2, #2
 8002a2a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002a2c:	4b22      	ldr	r3, [pc, #136]	@ (8002ab8 <BSP_SDRAM_Init+0xb4>)
 8002a2e:	2202      	movs	r2, #2
 8002a30:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002a32:	4b21      	ldr	r3, [pc, #132]	@ (8002ab8 <BSP_SDRAM_Init+0xb4>)
 8002a34:	2202      	movs	r2, #2
 8002a36:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002a38:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a44:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a46:	2204      	movs	r2, #4
 8002a48:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a4a:	4b19      	ldr	r3, [pc, #100]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a50:	4b17      	ldr	r3, [pc, #92]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a52:	2240      	movs	r2, #64	@ 0x40
 8002a54:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002a56:	4b16      	ldr	r3, [pc, #88]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a5c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a5e:	4b14      	ldr	r3, [pc, #80]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a64:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a6a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002a6c:	4b10      	ldr	r3, [pc, #64]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002a74:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a7e:	f000 f87f 	bl	8002b80 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002a82:	490d      	ldr	r1, [pc, #52]	@ (8002ab8 <BSP_SDRAM_Init+0xb4>)
 8002a84:	480a      	ldr	r0, [pc, #40]	@ (8002ab0 <BSP_SDRAM_Init+0xac>)
 8002a86:	f005 f9f3 	bl	8007e70 <HAL_SDRAM_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002a90:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <BSP_SDRAM_Init+0xb8>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e002      	b.n	8002a9e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <BSP_SDRAM_Init+0xb8>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002a9e:	f240 6003 	movw	r0, #1539	@ 0x603
 8002aa2:	f000 f80d 	bl	8002ac0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <BSP_SDRAM_Init+0xb8>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000794 	.word	0x20000794
 8002ab4:	a0000140 	.word	0xa0000140
 8002ab8:	200007c8 	.word	0x200007c8
 8002abc:	20000038 	.word	0x20000038

08002ac0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002acc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ad2:	4b29      	ldr	r3, [pc, #164]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002ad8:	4b27      	ldr	r3, [pc, #156]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002ade:	4b26      	ldr	r3, [pc, #152]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ae4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ae8:	4923      	ldr	r1, [pc, #140]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aea:	4824      	ldr	r0, [pc, #144]	@ (8002b7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002aec:	f005 f9f4 	bl	8007ed8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002af0:	2001      	movs	r0, #1
 8002af2:	f000 fe8f 	bl	8003814 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002af6:	4b20      	ldr	r3, [pc, #128]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002af8:	2202      	movs	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002afc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002afe:	2210      	movs	r2, #16
 8002b00:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b02:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002b0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b12:	4919      	ldr	r1, [pc, #100]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b14:	4819      	ldr	r0, [pc, #100]	@ (8002b7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b16:	f005 f9df 	bl	8007ed8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002b1a:	4b17      	ldr	r3, [pc, #92]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b20:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b22:	2210      	movs	r2, #16
 8002b24:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002b26:	4b14      	ldr	r3, [pc, #80]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b28:	2208      	movs	r2, #8
 8002b2a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b36:	4910      	ldr	r1, [pc, #64]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b38:	4810      	ldr	r0, [pc, #64]	@ (8002b7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b3a:	f005 f9cd 	bl	8007ed8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002b3e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002b42:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002b44:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b46:	2204      	movs	r2, #4
 8002b48:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002b50:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a07      	ldr	r2, [pc, #28]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b5a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002b5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b60:	4905      	ldr	r1, [pc, #20]	@ (8002b78 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b62:	4806      	ldr	r0, [pc, #24]	@ (8002b7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b64:	f005 f9b8 	bl	8007ed8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4804      	ldr	r0, [pc, #16]	@ (8002b7c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b6c:	f005 f9e9 	bl	8007f42 <HAL_SDRAM_ProgramRefreshRate>
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	200007e4 	.word	0x200007e4
 8002b7c:	20000794 	.word	0x20000794

08002b80 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b090      	sub	sp, #64	@ 0x40
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002b8a:	4b70      	ldr	r3, [pc, #448]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8e:	4a6f      	ldr	r2, [pc, #444]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	4a69      	ldr	r2, [pc, #420]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002ba8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bae:	4b67      	ldr	r3, [pc, #412]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bba:	4b64      	ldr	r3, [pc, #400]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a63      	ldr	r2, [pc, #396]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b61      	ldr	r3, [pc, #388]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd2:	4b5e      	ldr	r3, [pc, #376]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a5d      	ldr	r2, [pc, #372]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b5b      	ldr	r3, [pc, #364]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bea:	4b58      	ldr	r3, [pc, #352]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	4a57      	ldr	r2, [pc, #348]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bf0:	f043 0310 	orr.w	r3, r3, #16
 8002bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf6:	4b55      	ldr	r3, [pc, #340]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c02:	4b52      	ldr	r3, [pc, #328]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a51      	ldr	r2, [pc, #324]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c08:	f043 0320 	orr.w	r3, r3, #32
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b4f      	ldr	r3, [pc, #316]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	4a4b      	ldr	r2, [pc, #300]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c26:	4b49      	ldr	r3, [pc, #292]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c32:	4b46      	ldr	r3, [pc, #280]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	4a45      	ldr	r2, [pc, #276]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3e:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <BSP_SDRAM_MspInit+0x1cc>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002c52:	2302      	movs	r3, #2
 8002c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002c56:	230c      	movs	r3, #12
 8002c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002c5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c62:	4619      	mov	r1, r3
 8002c64:	483a      	ldr	r0, [pc, #232]	@ (8002d50 <BSP_SDRAM_MspInit+0x1d0>)
 8002c66:	f001 ffa9 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002c6a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002c70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c74:	4619      	mov	r1, r3
 8002c76:	4837      	ldr	r0, [pc, #220]	@ (8002d54 <BSP_SDRAM_MspInit+0x1d4>)
 8002c78:	f001 ffa0 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002c7c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c86:	4619      	mov	r1, r3
 8002c88:	4833      	ldr	r0, [pc, #204]	@ (8002d58 <BSP_SDRAM_MspInit+0x1d8>)
 8002c8a:	f001 ff97 	bl	8004bbc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002c8e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002c94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4830      	ldr	r0, [pc, #192]	@ (8002d5c <BSP_SDRAM_MspInit+0x1dc>)
 8002c9c:	f001 ff8e 	bl	8004bbc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002ca0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002ca6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002caa:	4619      	mov	r1, r3
 8002cac:	482c      	ldr	r0, [pc, #176]	@ (8002d60 <BSP_SDRAM_MspInit+0x1e0>)
 8002cae:	f001 ff85 	bl	8004bbc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002cb2:	2328      	movs	r3, #40	@ 0x28
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4829      	ldr	r0, [pc, #164]	@ (8002d64 <BSP_SDRAM_MspInit+0x1e4>)
 8002cbe:	f001 ff7d 	bl	8004bbc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002cc2:	4b29      	ldr	r3, [pc, #164]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cc8:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002cca:	2280      	movs	r2, #128	@ 0x80
 8002ccc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002cce:	4b26      	ldr	r3, [pc, #152]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002cd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002cd6:	4b24      	ldr	r3, [pc, #144]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002cd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cdc:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cde:	4b22      	ldr	r3, [pc, #136]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002ce0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ce4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002ce6:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002ce8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cec:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002cee:	4b1e      	ldr	r3, [pc, #120]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002cf6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cfa:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d02:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002d04:	2203      	movs	r2, #3
 8002d06:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d08:	4b17      	ldr	r3, [pc, #92]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002d0e:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d14:	4b14      	ldr	r3, [pc, #80]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002d16:	4a15      	ldr	r2, [pc, #84]	@ (8002d6c <BSP_SDRAM_MspInit+0x1ec>)
 8002d18:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a12      	ldr	r2, [pc, #72]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002d1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d20:	4a11      	ldr	r2, [pc, #68]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002d26:	4810      	ldr	r0, [pc, #64]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002d28:	f001 fa9c 	bl	8004264 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002d2c:	480e      	ldr	r0, [pc, #56]	@ (8002d68 <BSP_SDRAM_MspInit+0x1e8>)
 8002d2e:	f001 f9eb 	bl	8004108 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	210f      	movs	r1, #15
 8002d36:	2038      	movs	r0, #56	@ 0x38
 8002d38:	f001 f8dc 	bl	8003ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d3c:	2038      	movs	r0, #56	@ 0x38
 8002d3e:	f001 f8f5 	bl	8003f2c <HAL_NVIC_EnableIRQ>
}
 8002d42:	bf00      	nop
 8002d44:	3740      	adds	r7, #64	@ 0x40
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	40020800 	.word	0x40020800
 8002d54:	40020c00 	.word	0x40020c00
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40021400 	.word	0x40021400
 8002d60:	40021800 	.word	0x40021800
 8002d64:	40021c00 	.word	0x40021c00
 8002d68:	200007f4 	.word	0x200007f4
 8002d6c:	40026410 	.word	0x40026410

08002d70 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	460a      	mov	r2, r1
 8002d7a:	80fb      	strh	r3, [r7, #6]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002d84:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <BSP_TS_Init+0x68>)
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002d8a:	4a14      	ldr	r2, [pc, #80]	@ (8002ddc <BSP_TS_Init+0x6c>)
 8002d8c:	88bb      	ldrh	r3, [r7, #4]
 8002d8e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002d90:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <BSP_TS_Init+0x70>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2070      	movs	r0, #112	@ 0x70
 8002d96:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002d98:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <BSP_TS_Init+0x70>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2070      	movs	r0, #112	@ 0x70
 8002d9e:	4798      	blx	r3
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b51      	cmp	r3, #81	@ 0x51
 8002da4:	d110      	bne.n	8002dc8 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002da6:	4b0f      	ldr	r3, [pc, #60]	@ (8002de4 <BSP_TS_Init+0x74>)
 8002da8:	4a0d      	ldr	r2, [pc, #52]	@ (8002de0 <BSP_TS_Init+0x70>)
 8002daa:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002dac:	4b0e      	ldr	r3, [pc, #56]	@ (8002de8 <BSP_TS_Init+0x78>)
 8002dae:	2270      	movs	r2, #112	@ 0x70
 8002db0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <BSP_TS_Init+0x7c>)
 8002db4:	2208      	movs	r2, #8
 8002db6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <BSP_TS_Init+0x74>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002de8 <BSP_TS_Init+0x78>)
 8002dc0:	7812      	ldrb	r2, [r2, #0]
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4798      	blx	r3
 8002dc6:	e001      	b.n	8002dcc <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000858 	.word	0x20000858
 8002ddc:	2000085a 	.word	0x2000085a
 8002de0:	20000000 	.word	0x20000000
 8002de4:	20000854 	.word	0x20000854
 8002de8:	2000085d 	.word	0x2000085d
 8002dec:	2000085c 	.word	0x2000085c

08002df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <HAL_MspInit+0x4c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	4a10      	ldr	r2, [pc, #64]	@ (8002e3c <HAL_MspInit+0x4c>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e02:	4b0e      	ldr	r3, [pc, #56]	@ (8002e3c <HAL_MspInit+0x4c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e3c <HAL_MspInit+0x4c>)
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	4a0a      	ldr	r2, [pc, #40]	@ (8002e3c <HAL_MspInit+0x4c>)
 8002e14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e1a:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <HAL_MspInit+0x4c>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	210f      	movs	r1, #15
 8002e2a:	f06f 0001 	mvn.w	r0, #1
 8002e2e:	f001 f861 	bl	8003ef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800

08002e40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08e      	sub	sp, #56	@ 0x38
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e50:	4b33      	ldr	r3, [pc, #204]	@ (8002f20 <HAL_InitTick+0xe0>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <HAL_InitTick+0xe0>)
 8002e56:	f043 0310 	orr.w	r3, r3, #16
 8002e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_InitTick+0xe0>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e68:	f107 0210 	add.w	r2, r7, #16
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 f804 	bl	8006e80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e82:	f003 ffd5 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8002e86:	6378      	str	r0, [r7, #52]	@ 0x34
 8002e88:	e004      	b.n	8002e94 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002e8a:	f003 ffd1 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	4a23      	ldr	r2, [pc, #140]	@ (8002f24 <HAL_InitTick+0xe4>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	0c9b      	lsrs	r3, r3, #18
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002ea2:	4b21      	ldr	r3, [pc, #132]	@ (8002f28 <HAL_InitTick+0xe8>)
 8002ea4:	4a21      	ldr	r2, [pc, #132]	@ (8002f2c <HAL_InitTick+0xec>)
 8002ea6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f28 <HAL_InitTick+0xe8>)
 8002eaa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002eae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <HAL_InitTick+0xe8>)
 8002eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f28 <HAL_InitTick+0xe8>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <HAL_InitTick+0xe8>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec2:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <HAL_InitTick+0xe8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ec8:	4817      	ldr	r0, [pc, #92]	@ (8002f28 <HAL_InitTick+0xe8>)
 8002eca:	f005 f90d 	bl	80080e8 <HAL_TIM_Base_Init>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11b      	bne.n	8002f14 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002edc:	4812      	ldr	r0, [pc, #72]	@ (8002f28 <HAL_InitTick+0xe8>)
 8002ede:	f005 f95b 	bl	8008198 <HAL_TIM_Base_Start_IT>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002ee8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ef0:	2036      	movs	r0, #54	@ 0x36
 8002ef2:	f001 f81b 	bl	8003f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b0f      	cmp	r3, #15
 8002efa:	d808      	bhi.n	8002f0e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002efc:	2200      	movs	r2, #0
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	2036      	movs	r0, #54	@ 0x36
 8002f02:	f000 fff7 	bl	8003ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f06:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <HAL_InitTick+0xf0>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6013      	str	r3, [r2, #0]
 8002f0c:	e002      	b.n	8002f14 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3738      	adds	r7, #56	@ 0x38
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	431bde83 	.word	0x431bde83
 8002f28:	20000860 	.word	0x20000860
 8002f2c:	40001000 	.word	0x40001000
 8002f30:	20000040 	.word	0x20000040

08002f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <NMI_Handler+0x4>

08002f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f40:	bf00      	nop
 8002f42:	e7fd      	b.n	8002f40 <HardFault_Handler+0x4>

08002f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <MemManage_Handler+0x4>

08002f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f50:	bf00      	nop
 8002f52:	e7fd      	b.n	8002f50 <BusFault_Handler+0x4>

08002f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <UsageFault_Handler+0x4>

08002f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8002f70:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <TIM6_DAC_IRQHandler+0x20>)
 8002f72:	791b      	ldrb	r3, [r3, #4]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002f7a:	4804      	ldr	r0, [pc, #16]	@ (8002f8c <TIM6_DAC_IRQHandler+0x20>)
 8002f7c:	f001 f806 	bl	8003f8c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002f80:	4803      	ldr	r0, [pc, #12]	@ (8002f90 <TIM6_DAC_IRQHandler+0x24>)
 8002f82:	f005 f981 	bl	8008288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200000f8 	.word	0x200000f8
 8002f90:	20000860 	.word	0x20000860

08002f94 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002f98:	4802      	ldr	r0, [pc, #8]	@ (8002fa4 <LTDC_IRQHandler+0x10>)
 8002f9a:	f002 ffdf 	bl	8005f5c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000048c 	.word	0x2000048c

08002fa8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <DMA2D_IRQHandler+0x10>)
 8002fae:	f001 fbc7 	bl	8004740 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000010c 	.word	0x2000010c

08002fbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fc0:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <SystemInit+0x20>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <SystemInit+0x20>)
 8002fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fe6:	f107 0310 	add.w	r3, r7, #16
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	605a      	str	r2, [r3, #4]
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ffe:	4b20      	ldr	r3, [pc, #128]	@ (8003080 <MX_TIM1_Init+0xa0>)
 8003000:	4a20      	ldr	r2, [pc, #128]	@ (8003084 <MX_TIM1_Init+0xa4>)
 8003002:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003004:	4b1e      	ldr	r3, [pc, #120]	@ (8003080 <MX_TIM1_Init+0xa0>)
 8003006:	2200      	movs	r2, #0
 8003008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300a:	4b1d      	ldr	r3, [pc, #116]	@ (8003080 <MX_TIM1_Init+0xa0>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <MX_TIM1_Init+0xa0>)
 8003012:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003018:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <MX_TIM1_Init+0xa0>)
 800301a:	2200      	movs	r2, #0
 800301c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800301e:	4b18      	ldr	r3, [pc, #96]	@ (8003080 <MX_TIM1_Init+0xa0>)
 8003020:	2200      	movs	r2, #0
 8003022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003024:	4b16      	ldr	r3, [pc, #88]	@ (8003080 <MX_TIM1_Init+0xa0>)
 8003026:	2200      	movs	r2, #0
 8003028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800302a:	4815      	ldr	r0, [pc, #84]	@ (8003080 <MX_TIM1_Init+0xa0>)
 800302c:	f005 f85c 	bl	80080e8 <HAL_TIM_Base_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003036:	f7fe fdf7 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800303a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800303e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003040:	f107 0310 	add.w	r3, r7, #16
 8003044:	4619      	mov	r1, r3
 8003046:	480e      	ldr	r0, [pc, #56]	@ (8003080 <MX_TIM1_Init+0xa0>)
 8003048:	f005 fa3e 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003052:	f7fe fde9 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	4619      	mov	r1, r3
 8003066:	4806      	ldr	r0, [pc, #24]	@ (8003080 <MX_TIM1_Init+0xa0>)
 8003068:	f005 fc5a 	bl	8008920 <HAL_TIMEx_MasterConfigSynchronization>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003072:	f7fe fdd9 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200008ac 	.word	0x200008ac
 8003084:	40010000 	.word	0x40010000

08003088 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308e:	f107 0310 	add.w	r3, r7, #16
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <MX_TIM2_Init+0x98>)
 80030a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80030ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003120 <MX_TIM2_Init+0x98>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <MX_TIM2_Init+0x98>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80030ba:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <MX_TIM2_Init+0x98>)
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030c2:	4b17      	ldr	r3, [pc, #92]	@ (8003120 <MX_TIM2_Init+0x98>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c8:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <MX_TIM2_Init+0x98>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030ce:	4814      	ldr	r0, [pc, #80]	@ (8003120 <MX_TIM2_Init+0x98>)
 80030d0:	f005 f80a 	bl	80080e8 <HAL_TIM_Base_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80030da:	f7fe fda5 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	4619      	mov	r1, r3
 80030ea:	480d      	ldr	r0, [pc, #52]	@ (8003120 <MX_TIM2_Init+0x98>)
 80030ec:	f005 f9ec 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80030f6:	f7fe fd97 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4806      	ldr	r0, [pc, #24]	@ (8003120 <MX_TIM2_Init+0x98>)
 8003108:	f005 fc0a 	bl	8008920 <HAL_TIMEx_MasterConfigSynchronization>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003112:	f7fe fd89 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	3720      	adds	r7, #32
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200008f8 	.word	0x200008f8

08003124 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800312a:	f107 0310 	add.w	r3, r7, #16
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003138:	1d3b      	adds	r3, r7, #4
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003142:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <MX_TIM3_Init+0x94>)
 8003144:	4a1d      	ldr	r2, [pc, #116]	@ (80031bc <MX_TIM3_Init+0x98>)
 8003146:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003148:	4b1b      	ldr	r3, [pc, #108]	@ (80031b8 <MX_TIM3_Init+0x94>)
 800314a:	2200      	movs	r2, #0
 800314c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800314e:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <MX_TIM3_Init+0x94>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <MX_TIM3_Init+0x94>)
 8003156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800315a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800315c:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <MX_TIM3_Init+0x94>)
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <MX_TIM3_Init+0x94>)
 8003164:	2200      	movs	r2, #0
 8003166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003168:	4813      	ldr	r0, [pc, #76]	@ (80031b8 <MX_TIM3_Init+0x94>)
 800316a:	f004 ffbd 	bl	80080e8 <HAL_TIM_Base_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003174:	f7fe fd58 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800317c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800317e:	f107 0310 	add.w	r3, r7, #16
 8003182:	4619      	mov	r1, r3
 8003184:	480c      	ldr	r0, [pc, #48]	@ (80031b8 <MX_TIM3_Init+0x94>)
 8003186:	f005 f99f 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003190:	f7fe fd4a 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003194:	2300      	movs	r3, #0
 8003196:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800319c:	1d3b      	adds	r3, r7, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4805      	ldr	r0, [pc, #20]	@ (80031b8 <MX_TIM3_Init+0x94>)
 80031a2:	f005 fbbd 	bl	8008920 <HAL_TIMEx_MasterConfigSynchronization>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80031ac:	f7fe fd3c 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031b0:	bf00      	nop
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000944 	.word	0x20000944
 80031bc:	40000400 	.word	0x40000400

080031c0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031c6:	f107 0310 	add.w	r3, r7, #16
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d4:	1d3b      	adds	r3, r7, #4
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80031de:	4b1d      	ldr	r3, [pc, #116]	@ (8003254 <MX_TIM5_Init+0x94>)
 80031e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003258 <MX_TIM5_Init+0x98>)
 80031e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80031e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003254 <MX_TIM5_Init+0x94>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003254 <MX_TIM5_Init+0x94>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80031f0:	4b18      	ldr	r3, [pc, #96]	@ (8003254 <MX_TIM5_Init+0x94>)
 80031f2:	f04f 32ff 	mov.w	r2, #4294967295
 80031f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f8:	4b16      	ldr	r3, [pc, #88]	@ (8003254 <MX_TIM5_Init+0x94>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031fe:	4b15      	ldr	r3, [pc, #84]	@ (8003254 <MX_TIM5_Init+0x94>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003204:	4813      	ldr	r0, [pc, #76]	@ (8003254 <MX_TIM5_Init+0x94>)
 8003206:	f004 ff6f 	bl	80080e8 <HAL_TIM_Base_Init>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003210:	f7fe fd0a 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003214:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800321a:	f107 0310 	add.w	r3, r7, #16
 800321e:	4619      	mov	r1, r3
 8003220:	480c      	ldr	r0, [pc, #48]	@ (8003254 <MX_TIM5_Init+0x94>)
 8003222:	f005 f951 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800322c:	f7fe fcfc 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003230:	2300      	movs	r3, #0
 8003232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4805      	ldr	r0, [pc, #20]	@ (8003254 <MX_TIM5_Init+0x94>)
 800323e:	f005 fb6f 	bl	8008920 <HAL_TIMEx_MasterConfigSynchronization>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003248:	f7fe fcee 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	3720      	adds	r7, #32
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20000990 	.word	0x20000990
 8003258:	40000c00 	.word	0x40000c00

0800325c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800327a:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <MX_TIM8_Init+0xa0>)
 800327c:	4a20      	ldr	r2, [pc, #128]	@ (8003300 <MX_TIM8_Init+0xa4>)
 800327e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003280:	4b1e      	ldr	r3, [pc, #120]	@ (80032fc <MX_TIM8_Init+0xa0>)
 8003282:	2200      	movs	r2, #0
 8003284:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003286:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <MX_TIM8_Init+0xa0>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800328c:	4b1b      	ldr	r3, [pc, #108]	@ (80032fc <MX_TIM8_Init+0xa0>)
 800328e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003292:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <MX_TIM8_Init+0xa0>)
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800329a:	4b18      	ldr	r3, [pc, #96]	@ (80032fc <MX_TIM8_Init+0xa0>)
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a0:	4b16      	ldr	r3, [pc, #88]	@ (80032fc <MX_TIM8_Init+0xa0>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80032a6:	4815      	ldr	r0, [pc, #84]	@ (80032fc <MX_TIM8_Init+0xa0>)
 80032a8:	f004 ff1e 	bl	80080e8 <HAL_TIM_Base_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80032b2:	f7fe fcb9 	bl	8001c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80032bc:	f107 0310 	add.w	r3, r7, #16
 80032c0:	4619      	mov	r1, r3
 80032c2:	480e      	ldr	r0, [pc, #56]	@ (80032fc <MX_TIM8_Init+0xa0>)
 80032c4:	f005 f900 	bl	80084c8 <HAL_TIM_ConfigClockSource>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80032ce:	f7fe fcab 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80032de:	1d3b      	adds	r3, r7, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4806      	ldr	r0, [pc, #24]	@ (80032fc <MX_TIM8_Init+0xa0>)
 80032e4:	f005 fb1c 	bl	8008920 <HAL_TIMEx_MasterConfigSynchronization>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80032ee:	f7fe fc9b 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80032f2:	bf00      	nop
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	200009dc 	.word	0x200009dc
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08e      	sub	sp, #56	@ 0x38
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3b      	ldr	r2, [pc, #236]	@ (8003410 <HAL_TIM_Base_MspInit+0x10c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10c      	bne.n	8003340 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003326:	4b3b      	ldr	r3, [pc, #236]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332a:	4a3a      	ldr	r2, [pc, #232]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	6453      	str	r3, [r2, #68]	@ 0x44
 8003332:	4b38      	ldr	r3, [pc, #224]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800333e:	e062      	b.n	8003406 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003348:	d10c      	bne.n	8003364 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800334a:	4b32      	ldr	r3, [pc, #200]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	4a31      	ldr	r2, [pc, #196]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	6413      	str	r3, [r2, #64]	@ 0x40
 8003356:	4b2f      	ldr	r3, [pc, #188]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
}
 8003362:	e050      	b.n	8003406 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2b      	ldr	r2, [pc, #172]	@ (8003418 <HAL_TIM_Base_MspInit+0x114>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10c      	bne.n	8003388 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800336e:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	4a28      	ldr	r2, [pc, #160]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	6413      	str	r3, [r2, #64]	@ 0x40
 800337a:	4b26      	ldr	r3, [pc, #152]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	69bb      	ldr	r3, [r7, #24]
}
 8003386:	e03e      	b.n	8003406 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a23      	ldr	r2, [pc, #140]	@ (800341c <HAL_TIM_Base_MspInit+0x118>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d10c      	bne.n	80033ac <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003392:	4b20      	ldr	r3, [pc, #128]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	4a1f      	ldr	r2, [pc, #124]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 8003398:	f043 0308 	orr.w	r3, r3, #8
 800339c:	6413      	str	r3, [r2, #64]	@ 0x40
 800339e:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697b      	ldr	r3, [r7, #20]
}
 80033aa:	e02c      	b.n	8003406 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003420 <HAL_TIM_Base_MspInit+0x11c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d127      	bne.n	8003406 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80033b6:	4b17      	ldr	r3, [pc, #92]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 80033b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ba:	4a16      	ldr	r2, [pc, #88]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033c2:	4b14      	ldr	r3, [pc, #80]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80033ce:	4b11      	ldr	r3, [pc, #68]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	4a10      	ldr	r2, [pc, #64]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033da:	4b0e      	ldr	r3, [pc, #56]	@ (8003414 <HAL_TIM_Base_MspInit+0x110>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033e6:	2304      	movs	r3, #4
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033f6:	2303      	movs	r3, #3
 80033f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033fe:	4619      	mov	r1, r3
 8003400:	4808      	ldr	r0, [pc, #32]	@ (8003424 <HAL_TIM_Base_MspInit+0x120>)
 8003402:	f001 fbdb 	bl	8004bbc <HAL_GPIO_Init>
}
 8003406:	bf00      	nop
 8003408:	3738      	adds	r7, #56	@ 0x38
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000
 8003414:	40023800 	.word	0x40023800
 8003418:	40000400 	.word	0x40000400
 800341c:	40000c00 	.word	0x40000c00
 8003420:	40010400 	.word	0x40010400
 8003424:	40022000 	.word	0x40022000

08003428 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800342c:	4b14      	ldr	r3, [pc, #80]	@ (8003480 <MX_UART7_Init+0x58>)
 800342e:	4a15      	ldr	r2, [pc, #84]	@ (8003484 <MX_UART7_Init+0x5c>)
 8003430:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003432:	4b13      	ldr	r3, [pc, #76]	@ (8003480 <MX_UART7_Init+0x58>)
 8003434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003438:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800343a:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <MX_UART7_Init+0x58>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003440:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <MX_UART7_Init+0x58>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003446:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <MX_UART7_Init+0x58>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800344c:	4b0c      	ldr	r3, [pc, #48]	@ (8003480 <MX_UART7_Init+0x58>)
 800344e:	220c      	movs	r2, #12
 8003450:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003452:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <MX_UART7_Init+0x58>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <MX_UART7_Init+0x58>)
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800345e:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <MX_UART7_Init+0x58>)
 8003460:	2200      	movs	r2, #0
 8003462:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <MX_UART7_Init+0x58>)
 8003466:	2200      	movs	r2, #0
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800346a:	4805      	ldr	r0, [pc, #20]	@ (8003480 <MX_UART7_Init+0x58>)
 800346c:	f005 fb04 	bl	8008a78 <HAL_UART_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8003476:	f7fe fbd7 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000a28 	.word	0x20000a28
 8003484:	40007800 	.word	0x40007800

08003488 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800348c:	4b14      	ldr	r3, [pc, #80]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 800348e:	4a15      	ldr	r2, [pc, #84]	@ (80034e4 <MX_USART1_UART_Init+0x5c>)
 8003490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003492:	4b13      	ldr	r3, [pc, #76]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 8003494:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800349a:	4b11      	ldr	r3, [pc, #68]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034a0:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034a6:	4b0e      	ldr	r3, [pc, #56]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034ac:	4b0c      	ldr	r3, [pc, #48]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 80034ae:	220c      	movs	r2, #12
 80034b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b2:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b8:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034be:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034ca:	4805      	ldr	r0, [pc, #20]	@ (80034e0 <MX_USART1_UART_Init+0x58>)
 80034cc:	f005 fad4 	bl	8008a78 <HAL_UART_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80034d6:	f7fe fba7 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000ab0 	.word	0x20000ab0
 80034e4:	40011000 	.word	0x40011000

080034e8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80034ec:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 80034ee:	4a15      	ldr	r2, [pc, #84]	@ (8003544 <MX_USART6_UART_Init+0x5c>)
 80034f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80034f2:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 80034f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034fa:	4b11      	ldr	r3, [pc, #68]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003500:	4b0f      	ldr	r3, [pc, #60]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800350c:	4b0c      	ldr	r3, [pc, #48]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 800350e:	220c      	movs	r2, #12
 8003510:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003512:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003518:	4b09      	ldr	r3, [pc, #36]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800351e:	4b08      	ldr	r3, [pc, #32]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800352a:	4805      	ldr	r0, [pc, #20]	@ (8003540 <MX_USART6_UART_Init+0x58>)
 800352c:	f005 faa4 	bl	8008a78 <HAL_UART_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8003536:	f7fe fb77 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000b38 	.word	0x20000b38
 8003544:	40011400 	.word	0x40011400

08003548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b0b0      	sub	sp, #192	@ 0xc0
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003560:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003564:	2284      	movs	r2, #132	@ 0x84
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f007 fa31 	bl	800a9d0 <memset>
  if(uartHandle->Instance==UART7)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a75      	ldr	r2, [pc, #468]	@ (8003748 <HAL_UART_MspInit+0x200>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d13d      	bne.n	80035f4 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003578:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800357e:	2300      	movs	r3, #0
 8003580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003588:	4618      	mov	r0, r3
 800358a:	f003 fcab 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003594:	f7fe fb48 	bl	8001c28 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003598:	4b6c      	ldr	r3, [pc, #432]	@ (800374c <HAL_UART_MspInit+0x204>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	4a6b      	ldr	r2, [pc, #428]	@ (800374c <HAL_UART_MspInit+0x204>)
 800359e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a4:	4b69      	ldr	r3, [pc, #420]	@ (800374c <HAL_UART_MspInit+0x204>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035b0:	4b66      	ldr	r3, [pc, #408]	@ (800374c <HAL_UART_MspInit+0x204>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	4a65      	ldr	r2, [pc, #404]	@ (800374c <HAL_UART_MspInit+0x204>)
 80035b6:	f043 0320 	orr.w	r3, r3, #32
 80035ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80035bc:	4b63      	ldr	r3, [pc, #396]	@ (800374c <HAL_UART_MspInit+0x204>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80035c8:	23c0      	movs	r3, #192	@ 0xc0
 80035ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ce:	2302      	movs	r3, #2
 80035d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035da:	2303      	movs	r3, #3
 80035dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80035e0:	2308      	movs	r3, #8
 80035e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035e6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80035ea:	4619      	mov	r1, r3
 80035ec:	4858      	ldr	r0, [pc, #352]	@ (8003750 <HAL_UART_MspInit+0x208>)
 80035ee:	f001 fae5 	bl	8004bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80035f2:	e0a4      	b.n	800373e <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a56      	ldr	r2, [pc, #344]	@ (8003754 <HAL_UART_MspInit+0x20c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d15d      	bne.n	80036ba <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80035fe:	2340      	movs	r3, #64	@ 0x40
 8003600:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003602:	2300      	movs	r3, #0
 8003604:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003606:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fc6a 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003616:	f7fe fb07 	bl	8001c28 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800361a:	4b4c      	ldr	r3, [pc, #304]	@ (800374c <HAL_UART_MspInit+0x204>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	4a4b      	ldr	r2, [pc, #300]	@ (800374c <HAL_UART_MspInit+0x204>)
 8003620:	f043 0310 	orr.w	r3, r3, #16
 8003624:	6453      	str	r3, [r2, #68]	@ 0x44
 8003626:	4b49      	ldr	r3, [pc, #292]	@ (800374c <HAL_UART_MspInit+0x204>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	61fb      	str	r3, [r7, #28]
 8003630:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003632:	4b46      	ldr	r3, [pc, #280]	@ (800374c <HAL_UART_MspInit+0x204>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	4a45      	ldr	r2, [pc, #276]	@ (800374c <HAL_UART_MspInit+0x204>)
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	6313      	str	r3, [r2, #48]	@ 0x30
 800363e:	4b43      	ldr	r3, [pc, #268]	@ (800374c <HAL_UART_MspInit+0x204>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	61bb      	str	r3, [r7, #24]
 8003648:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800364a:	4b40      	ldr	r3, [pc, #256]	@ (800374c <HAL_UART_MspInit+0x204>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	4a3f      	ldr	r2, [pc, #252]	@ (800374c <HAL_UART_MspInit+0x204>)
 8003650:	f043 0301 	orr.w	r3, r3, #1
 8003654:	6313      	str	r3, [r2, #48]	@ 0x30
 8003656:	4b3d      	ldr	r3, [pc, #244]	@ (800374c <HAL_UART_MspInit+0x204>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	617b      	str	r3, [r7, #20]
 8003660:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003662:	2380      	movs	r3, #128	@ 0x80
 8003664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003668:	2302      	movs	r3, #2
 800366a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003674:	2300      	movs	r3, #0
 8003676:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800367a:	2307      	movs	r3, #7
 800367c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003684:	4619      	mov	r1, r3
 8003686:	4834      	ldr	r0, [pc, #208]	@ (8003758 <HAL_UART_MspInit+0x210>)
 8003688:	f001 fa98 	bl	8004bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800368c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003690:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	2302      	movs	r3, #2
 8003696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036a6:	2307      	movs	r3, #7
 80036a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80036ac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80036b0:	4619      	mov	r1, r3
 80036b2:	482a      	ldr	r0, [pc, #168]	@ (800375c <HAL_UART_MspInit+0x214>)
 80036b4:	f001 fa82 	bl	8004bbc <HAL_GPIO_Init>
}
 80036b8:	e041      	b.n	800373e <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a28      	ldr	r2, [pc, #160]	@ (8003760 <HAL_UART_MspInit+0x218>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d13c      	bne.n	800373e <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80036c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80036ca:	2300      	movs	r3, #0
 80036cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036d4:	4618      	mov	r0, r3
 80036d6:	f003 fc05 	bl	8006ee4 <HAL_RCCEx_PeriphCLKConfig>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80036e0:	f7fe faa2 	bl	8001c28 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80036e4:	4b19      	ldr	r3, [pc, #100]	@ (800374c <HAL_UART_MspInit+0x204>)
 80036e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e8:	4a18      	ldr	r2, [pc, #96]	@ (800374c <HAL_UART_MspInit+0x204>)
 80036ea:	f043 0320 	orr.w	r3, r3, #32
 80036ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80036f0:	4b16      	ldr	r3, [pc, #88]	@ (800374c <HAL_UART_MspInit+0x204>)
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036fc:	4b13      	ldr	r3, [pc, #76]	@ (800374c <HAL_UART_MspInit+0x204>)
 80036fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003700:	4a12      	ldr	r2, [pc, #72]	@ (800374c <HAL_UART_MspInit+0x204>)
 8003702:	f043 0304 	orr.w	r3, r3, #4
 8003706:	6313      	str	r3, [r2, #48]	@ 0x30
 8003708:	4b10      	ldr	r3, [pc, #64]	@ (800374c <HAL_UART_MspInit+0x204>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003714:	23c0      	movs	r3, #192	@ 0xc0
 8003716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	2303      	movs	r3, #3
 8003728:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800372c:	2308      	movs	r3, #8
 800372e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003732:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003736:	4619      	mov	r1, r3
 8003738:	480a      	ldr	r0, [pc, #40]	@ (8003764 <HAL_UART_MspInit+0x21c>)
 800373a:	f001 fa3f 	bl	8004bbc <HAL_GPIO_Init>
}
 800373e:	bf00      	nop
 8003740:	37c0      	adds	r7, #192	@ 0xc0
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40007800 	.word	0x40007800
 800374c:	40023800 	.word	0x40023800
 8003750:	40021400 	.word	0x40021400
 8003754:	40011000 	.word	0x40011000
 8003758:	40020400 	.word	0x40020400
 800375c:	40020000 	.word	0x40020000
 8003760:	40011400 	.word	0x40011400
 8003764:	40020800 	.word	0x40020800

08003768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800376c:	480d      	ldr	r0, [pc, #52]	@ (80037a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800376e:	490e      	ldr	r1, [pc, #56]	@ (80037a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003770:	4a0e      	ldr	r2, [pc, #56]	@ (80037ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003774:	e002      	b.n	800377c <LoopCopyDataInit>

08003776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377a:	3304      	adds	r3, #4

0800377c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800377c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003780:	d3f9      	bcc.n	8003776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003782:	4a0b      	ldr	r2, [pc, #44]	@ (80037b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003784:	4c0b      	ldr	r4, [pc, #44]	@ (80037b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003788:	e001      	b.n	800378e <LoopFillZerobss>

0800378a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800378c:	3204      	adds	r2, #4

0800378e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003790:	d3fb      	bcc.n	800378a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003792:	f7ff fc13 	bl	8002fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003796:	f007 f923 	bl	800a9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800379a:	f7fe f939 	bl	8001a10 <main>
  bx  lr    
 800379e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80037a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a8:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80037ac:	0800fa58 	.word	0x0800fa58
  ldr r2, =_sbss
 80037b0:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 80037b4:	20004910 	.word	0x20004910

080037b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b8:	e7fe      	b.n	80037b8 <ADC_IRQHandler>

080037ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037be:	2003      	movs	r0, #3
 80037c0:	f000 fb8d 	bl	8003ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037c4:	200f      	movs	r0, #15
 80037c6:	f7ff fb3b 	bl	8002e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037ca:	f7ff fb11 	bl	8002df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d8:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_IncTick+0x20>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_IncTick+0x24>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4413      	add	r3, r2
 80037e4:	4a04      	ldr	r2, [pc, #16]	@ (80037f8 <HAL_IncTick+0x24>)
 80037e6:	6013      	str	r3, [r2, #0]
}
 80037e8:	bf00      	nop
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000044 	.word	0x20000044
 80037f8:	20000bc0 	.word	0x20000bc0

080037fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003800:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <HAL_GetTick+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000bc0 	.word	0x20000bc0

08003814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800381c:	f7ff ffee 	bl	80037fc <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d005      	beq.n	800383a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800382e:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <HAL_Delay+0x44>)
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800383a:	bf00      	nop
 800383c:	f7ff ffde 	bl	80037fc <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	429a      	cmp	r2, r3
 800384a:	d8f7      	bhi.n	800383c <HAL_Delay+0x28>
  {
  }
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000044 	.word	0x20000044

0800385c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e031      	b.n	80038d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fc fee4 	bl	8000648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	d116      	bne.n	80038c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_ADC_Init+0x84>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	f043 0202 	orr.w	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f970 	bl	8003b90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	f023 0303 	bic.w	r3, r3, #3
 80038be:	f043 0201 	orr.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80038c6:	e001      	b.n	80038cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	ffffeefd 	.word	0xffffeefd

080038e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e136      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x28a>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b09      	cmp	r3, #9
 800390e:	d93a      	bls.n	8003986 <HAL_ADC_ConfigChannel+0xa2>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003918:	d035      	beq.n	8003986 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68d9      	ldr	r1, [r3, #12]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	b29b      	uxth	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	3b1e      	subs	r3, #30
 8003930:	2207      	movs	r2, #7
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43da      	mvns	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	400a      	ands	r2, r1
 800393e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a8d      	ldr	r2, [pc, #564]	@ (8003b7c <HAL_ADC_ConfigChannel+0x298>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10a      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68d9      	ldr	r1, [r3, #12]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	061a      	lsls	r2, r3, #24
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800395e:	e035      	b.n	80039cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68d9      	ldr	r1, [r3, #12]
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	4618      	mov	r0, r3
 8003972:	4603      	mov	r3, r0
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4403      	add	r3, r0
 8003978:	3b1e      	subs	r3, #30
 800397a:	409a      	lsls	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003984:	e022      	b.n	80039cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6919      	ldr	r1, [r3, #16]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	4613      	mov	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	4413      	add	r3, r2
 800399a:	2207      	movs	r2, #7
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	43da      	mvns	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	400a      	ands	r2, r1
 80039a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6919      	ldr	r1, [r3, #16]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	4618      	mov	r0, r3
 80039bc:	4603      	mov	r3, r0
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4403      	add	r3, r0
 80039c2:	409a      	lsls	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d824      	bhi.n	8003a1e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	3b05      	subs	r3, #5
 80039e6:	221f      	movs	r2, #31
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43da      	mvns	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	400a      	ands	r2, r1
 80039f4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	4618      	mov	r0, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3b05      	subs	r3, #5
 8003a10:	fa00 f203 	lsl.w	r2, r0, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a1c:	e04c      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d824      	bhi.n	8003a70 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	3b23      	subs	r3, #35	@ 0x23
 8003a38:	221f      	movs	r2, #31
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	400a      	ands	r2, r1
 8003a46:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	4618      	mov	r0, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	3b23      	subs	r3, #35	@ 0x23
 8003a62:	fa00 f203 	lsl.w	r2, r0, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a6e:	e023      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b41      	subs	r3, #65	@ 0x41
 8003a82:	221f      	movs	r2, #31
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43da      	mvns	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	400a      	ands	r2, r1
 8003a90:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b41      	subs	r3, #65	@ 0x41
 8003aac:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a30      	ldr	r2, [pc, #192]	@ (8003b80 <HAL_ADC_ConfigChannel+0x29c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10a      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x1f4>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aca:	d105      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003acc:	4b2d      	ldr	r3, [pc, #180]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ad2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003ad6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a28      	ldr	r2, [pc, #160]	@ (8003b80 <HAL_ADC_ConfigChannel+0x29c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10f      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x21e>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d10b      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003aea:	4b26      	ldr	r3, [pc, #152]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4a25      	ldr	r2, [pc, #148]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003af0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003af4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003af6:	4b23      	ldr	r3, [pc, #140]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	4a22      	ldr	r2, [pc, #136]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003afc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b00:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_ADC_ConfigChannel+0x29c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d12b      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x280>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1a      	ldr	r2, [pc, #104]	@ (8003b7c <HAL_ADC_ConfigChannel+0x298>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <HAL_ADC_ConfigChannel+0x23a>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b11      	cmp	r3, #17
 8003b1c:	d122      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003b1e:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4a18      	ldr	r2, [pc, #96]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b24:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003b28:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b2a:	4b16      	ldr	r3, [pc, #88]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	4a15      	ldr	r2, [pc, #84]	@ (8003b84 <HAL_ADC_ConfigChannel+0x2a0>)
 8003b30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003b34:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a10      	ldr	r2, [pc, #64]	@ (8003b7c <HAL_ADC_ConfigChannel+0x298>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d111      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b40:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <HAL_ADC_ConfigChannel+0x2a4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a11      	ldr	r2, [pc, #68]	@ (8003b8c <HAL_ADC_ConfigChannel+0x2a8>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0c9a      	lsrs	r2, r3, #18
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b56:	e002      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1f9      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	10000012 	.word	0x10000012
 8003b80:	40012000 	.word	0x40012000
 8003b84:	40012300 	.word	0x40012300
 8003b88:	2000003c 	.word	0x2000003c
 8003b8c:	431bde83 	.word	0x431bde83

08003b90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b98:	4b78      	ldr	r3, [pc, #480]	@ (8003d7c <ADC_Init+0x1ec>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a77      	ldr	r2, [pc, #476]	@ (8003d7c <ADC_Init+0x1ec>)
 8003b9e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003ba2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ba4:	4b75      	ldr	r3, [pc, #468]	@ (8003d7c <ADC_Init+0x1ec>)
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4973      	ldr	r1, [pc, #460]	@ (8003d7c <ADC_Init+0x1ec>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	021a      	lsls	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003be4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1e:	4a58      	ldr	r2, [pc, #352]	@ (8003d80 <ADC_Init+0x1f0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d022      	beq.n	8003c6a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6899      	ldr	r1, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e00f      	b.n	8003c8a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689a      	ldr	r2, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0202 	bic.w	r2, r2, #2
 8003c98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6899      	ldr	r1, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	005a      	lsls	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01b      	beq.n	8003cf0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003cd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6859      	ldr	r1, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	035a      	lsls	r2, r3, #13
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
 8003cee:	e007      	b.n	8003d00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	051a      	lsls	r2, r3, #20
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d42:	025a      	lsls	r2, r3, #9
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6899      	ldr	r1, [r3, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	029a      	lsls	r2, r3, #10
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	40012300 	.word	0x40012300
 8003d80:	0f000001 	.word	0x0f000001

08003d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d94:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003da0:	4013      	ands	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003dac:	4b06      	ldr	r3, [pc, #24]	@ (8003dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003db2:	4a04      	ldr	r2, [pc, #16]	@ (8003dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	60d3      	str	r3, [r2, #12]
}
 8003db8:	bf00      	nop
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000ed00 	.word	0xe000ed00
 8003dc8:	05fa0000 	.word	0x05fa0000

08003dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dd0:	4b04      	ldr	r3, [pc, #16]	@ (8003de4 <__NVIC_GetPriorityGrouping+0x18>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	f003 0307 	and.w	r3, r3, #7
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	db0b      	blt.n	8003e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	f003 021f 	and.w	r2, r3, #31
 8003e00:	4907      	ldr	r1, [pc, #28]	@ (8003e20 <__NVIC_EnableIRQ+0x38>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	2001      	movs	r0, #1
 8003e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000e100 	.word	0xe000e100

08003e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	db0a      	blt.n	8003e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	490c      	ldr	r1, [pc, #48]	@ (8003e70 <__NVIC_SetPriority+0x4c>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	0112      	lsls	r2, r2, #4
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	440b      	add	r3, r1
 8003e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e4c:	e00a      	b.n	8003e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	4908      	ldr	r1, [pc, #32]	@ (8003e74 <__NVIC_SetPriority+0x50>)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	3b04      	subs	r3, #4
 8003e5c:	0112      	lsls	r2, r2, #4
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	440b      	add	r3, r1
 8003e62:	761a      	strb	r2, [r3, #24]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	e000e100 	.word	0xe000e100
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	@ 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f1c3 0307 	rsb	r3, r3, #7
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	bf28      	it	cs
 8003e96:	2304      	movcs	r3, #4
 8003e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2b06      	cmp	r3, #6
 8003ea0:	d902      	bls.n	8003ea8 <NVIC_EncodePriority+0x30>
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3b03      	subs	r3, #3
 8003ea6:	e000      	b.n	8003eaa <NVIC_EncodePriority+0x32>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eac:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43da      	mvns	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	401a      	ands	r2, r3
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	43d9      	mvns	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	4313      	orrs	r3, r2
         );
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3724      	adds	r7, #36	@ 0x24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ff4c 	bl	8003d84 <__NVIC_SetPriorityGrouping>
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f06:	f7ff ff61 	bl	8003dcc <__NVIC_GetPriorityGrouping>
 8003f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	6978      	ldr	r0, [r7, #20]
 8003f12:	f7ff ffb1 	bl	8003e78 <NVIC_EncodePriority>
 8003f16:	4602      	mov	r2, r0
 8003f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ff80 	bl	8003e24 <__NVIC_SetPriority>
}
 8003f24:	bf00      	nop
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff ff54 	bl	8003de8 <__NVIC_EnableIRQ>
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e014      	b.n	8003f84 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	791b      	ldrb	r3, [r3, #4]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc fc04 	bl	8000778 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa2:	d120      	bne.n	8003fe6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb2:	d118      	bne.n	8003fe6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f043 0201 	orr.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fde:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f82d 	bl	8004040 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ff0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ff4:	d120      	bne.n	8004038 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004004:	d118      	bne.n	8004038 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2204      	movs	r2, #4
 800400a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f043 0202 	orr.w	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004020:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004030:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f85d 	bl	80040f2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	795b      	ldrb	r3, [r3, #5]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_DAC_ConfigChannel+0x18>
 8004068:	2302      	movs	r3, #2
 800406a:	e03c      	b.n	80040e6 <HAL_DAC_ConfigChannel+0x92>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2202      	movs	r2, #2
 8004076:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4013      	ands	r3, r2
 8004094:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6819      	ldr	r1, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	22c0      	movs	r2, #192	@ 0xc0
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	400a      	ands	r2, r1
 80040d6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	371c      	adds	r7, #28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004114:	f7ff fb72 	bl	80037fc <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e099      	b.n	8004258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004144:	e00f      	b.n	8004166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004146:	f7ff fb59 	bl	80037fc <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b05      	cmp	r3, #5
 8004152:	d908      	bls.n	8004166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2203      	movs	r2, #3
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e078      	b.n	8004258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e8      	bne.n	8004146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4b38      	ldr	r3, [pc, #224]	@ (8004260 <HAL_DMA_Init+0x158>)
 8004180:	4013      	ands	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800419e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d107      	bne.n	80041d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c8:	4313      	orrs	r3, r2
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f023 0307 	bic.w	r3, r3, #7
 80041e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d117      	bne.n	800422a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f8bd 	bl	800438c <DMA_CheckFifoParam>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2240      	movs	r2, #64	@ 0x40
 800421c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004226:	2301      	movs	r3, #1
 8004228:	e016      	b.n	8004258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f874 	bl	8004320 <DMA_CalcBaseAndBitshift>
 8004238:	4603      	mov	r3, r0
 800423a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004240:	223f      	movs	r2, #63	@ 0x3f
 8004242:	409a      	lsls	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	f010803f 	.word	0xf010803f

08004264 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e050      	b.n	8004318 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d101      	bne.n	8004286 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	e048      	b.n	8004318 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0201 	bic.w	r2, r2, #1
 8004294:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2221      	movs	r2, #33	@ 0x21
 80042c4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f82a 	bl	8004320 <DMA_CalcBaseAndBitshift>
 80042cc:	4603      	mov	r3, r0
 80042ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d4:	223f      	movs	r2, #63	@ 0x3f
 80042d6:	409a      	lsls	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	3b10      	subs	r3, #16
 8004330:	4a13      	ldr	r2, [pc, #76]	@ (8004380 <DMA_CalcBaseAndBitshift+0x60>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800433a:	4a12      	ldr	r2, [pc, #72]	@ (8004384 <DMA_CalcBaseAndBitshift+0x64>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b03      	cmp	r3, #3
 800434c:	d908      	bls.n	8004360 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	4b0c      	ldr	r3, [pc, #48]	@ (8004388 <DMA_CalcBaseAndBitshift+0x68>)
 8004356:	4013      	ands	r3, r2
 8004358:	1d1a      	adds	r2, r3, #4
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	659a      	str	r2, [r3, #88]	@ 0x58
 800435e:	e006      	b.n	800436e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	461a      	mov	r2, r3
 8004366:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <DMA_CalcBaseAndBitshift+0x68>)
 8004368:	4013      	ands	r3, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	aaaaaaab 	.word	0xaaaaaaab
 8004384:	0800fa40 	.word	0x0800fa40
 8004388:	fffffc00 	.word	0xfffffc00

0800438c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d11f      	bne.n	80043e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d856      	bhi.n	800445a <DMA_CheckFifoParam+0xce>
 80043ac:	a201      	add	r2, pc, #4	@ (adr r2, 80043b4 <DMA_CheckFifoParam+0x28>)
 80043ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b2:	bf00      	nop
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043d7 	.word	0x080043d7
 80043bc:	080043c5 	.word	0x080043c5
 80043c0:	0800445b 	.word	0x0800445b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d046      	beq.n	800445e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d4:	e043      	b.n	800445e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043de:	d140      	bne.n	8004462 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e4:	e03d      	b.n	8004462 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ee:	d121      	bne.n	8004434 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d837      	bhi.n	8004466 <DMA_CheckFifoParam+0xda>
 80043f6:	a201      	add	r2, pc, #4	@ (adr r2, 80043fc <DMA_CheckFifoParam+0x70>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	08004413 	.word	0x08004413
 8004404:	0800440d 	.word	0x0800440d
 8004408:	08004425 	.word	0x08004425
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	73fb      	strb	r3, [r7, #15]
      break;
 8004410:	e030      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004416:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d025      	beq.n	800446a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004422:	e022      	b.n	800446a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800442c:	d11f      	bne.n	800446e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004432:	e01c      	b.n	800446e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d903      	bls.n	8004442 <DMA_CheckFifoParam+0xb6>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b03      	cmp	r3, #3
 800443e:	d003      	beq.n	8004448 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004440:	e018      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
      break;
 8004446:	e015      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00e      	beq.n	8004472 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      break;
 8004458:	e00b      	b.n	8004472 <DMA_CheckFifoParam+0xe6>
      break;
 800445a:	bf00      	nop
 800445c:	e00a      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
      break;
 800445e:	bf00      	nop
 8004460:	e008      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
      break;
 8004462:	bf00      	nop
 8004464:	e006      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
      break;
 8004466:	bf00      	nop
 8004468:	e004      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
      break;
 800446a:	bf00      	nop
 800446c:	e002      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
      break;   
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <DMA_CheckFifoParam+0xe8>
      break;
 8004472:	bf00      	nop
    }
  } 
  
  return status; 
 8004474:	7bfb      	ldrb	r3, [r7, #15]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop

08004484 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e039      	b.n	800450a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fc f9de 	bl	800086c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d4:	f023 0107 	bic.w	r1, r3, #7
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <HAL_DMA2D_Init+0x90>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68d1      	ldr	r1, [r2, #12]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	430b      	orrs	r3, r1
 80044f8:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	ffffc000 	.word	0xffffc000

08004518 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_DMA2D_Start+0x1c>
 8004530:	2302      	movs	r3, #2
 8004532:	e018      	b.n	8004566 <HAL_DMA2D_Start+0x4e>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fa98 	bl	8004a84 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d056      	beq.n	8004638 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800458a:	f7ff f937 	bl	80037fc <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004590:	e04b      	b.n	800462a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d023      	beq.n	80045ec <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b2:	f043 0202 	orr.w	r2, r3, #2
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c8:	f043 0201 	orr.w	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2221      	movs	r2, #33	@ 0x21
 80045d6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2204      	movs	r2, #4
 80045dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0a5      	b.n	8004738 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d01a      	beq.n	800462a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7ff f902 	bl	80037fc <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <HAL_DMA2D_PollForTransfer+0x9c>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10f      	bne.n	800462a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2203      	movs	r2, #3
 800461a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e086      	b.n	8004738 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0ac      	beq.n	8004592 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d061      	beq.n	800471e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800465a:	f7ff f8cf 	bl	80037fc <HAL_GetTick>
 800465e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004660:	e056      	b.n	8004710 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8004670:	2b00      	cmp	r3, #0
 8004672:	d02e      	beq.n	80046d2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	f043 0204 	orr.w	r2, r3, #4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004698:	f043 0202 	orr.w	r2, r3, #2
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2229      	movs	r2, #41	@ 0x29
 80046bc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2204      	movs	r2, #4
 80046c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e032      	b.n	8004738 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d01a      	beq.n	8004710 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046da:	f7ff f88f 	bl	80037fc <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d302      	bcc.n	80046f0 <HAL_DMA2D_PollForTransfer+0x182>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10f      	bne.n	8004710 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2203      	movs	r2, #3
 8004700:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e013      	b.n	8004738 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f003 0310 	and.w	r3, r3, #16
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0a1      	beq.n	8004662 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2212      	movs	r2, #18
 8004724:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d026      	beq.n	80047b0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004768:	2b00      	cmp	r3, #0
 800476a:	d021      	beq.n	80047b0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800477a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004780:	f043 0201 	orr.w	r2, r3, #1
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2204      	movs	r2, #4
 8004794:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d026      	beq.n	8004808 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d021      	beq.n	8004808 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047d2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2220      	movs	r2, #32
 80047da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e0:	f043 0202 	orr.w	r2, r3, #2
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2204      	movs	r2, #4
 80047ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d026      	beq.n	8004860 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004818:	2b00      	cmp	r3, #0
 800481a:	d021      	beq.n	8004860 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800482a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2208      	movs	r2, #8
 8004832:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004838:	f043 0204 	orr.w	r2, r3, #4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2204      	movs	r2, #4
 8004844:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d013      	beq.n	8004892 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00e      	beq.n	8004892 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004882:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2204      	movs	r2, #4
 800488a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f853 	bl	8004938 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d024      	beq.n	80048e6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01f      	beq.n	80048e6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80048b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2202      	movs	r2, #2
 80048bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01f      	beq.n	8004930 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01a      	beq.n	8004930 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004908:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2210      	movs	r2, #16
 8004910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f80e 	bl	800494c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_DMA2D_ConfigLayer+0x20>
 800497c:	2302      	movs	r3, #2
 800497e:	e079      	b.n	8004a74 <HAL_DMA2D_ConfigLayer+0x114>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	3318      	adds	r3, #24
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	4313      	orrs	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80049aa:	4b35      	ldr	r3, [pc, #212]	@ (8004a80 <HAL_DMA2D_ConfigLayer+0x120>)
 80049ac:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	2b0a      	cmp	r3, #10
 80049b4:	d003      	beq.n	80049be <HAL_DMA2D_ConfigLayer+0x5e>
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b09      	cmp	r3, #9
 80049bc:	d107      	bne.n	80049ce <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e005      	b.n	80049da <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d120      	bne.n	8004a22 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	ea02 0103 	and.w	r1, r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b0a      	cmp	r3, #10
 8004a08:	d003      	beq.n	8004a12 <HAL_DMA2D_ConfigLayer+0xb2>
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b09      	cmp	r3, #9
 8004a10:	d127      	bne.n	8004a62 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004a1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a20:	e01f      	b.n	8004a62 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	ea02 0103 	and.w	r1, r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b0a      	cmp	r3, #10
 8004a4a:	d003      	beq.n	8004a54 <HAL_DMA2D_ConfigLayer+0xf4>
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2b09      	cmp	r3, #9
 8004a52:	d106      	bne.n	8004a62 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004a60:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	ff03000f 	.word	0xff03000f

08004a84 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b08b      	sub	sp, #44	@ 0x2c
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a98:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	041a      	lsls	r2, r3, #16
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004abc:	d174      	bne.n	8004ba8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004ac4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004acc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004ad4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d108      	bne.n	8004af6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af4:	e053      	b.n	8004b9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d106      	bne.n	8004b0c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0a:	e048      	b.n	8004b9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d111      	bne.n	8004b38 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	0cdb      	lsrs	r3, r3, #19
 8004b18:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	0a9b      	lsrs	r3, r3, #10
 8004b1e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	08db      	lsrs	r3, r3, #3
 8004b24:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	02db      	lsls	r3, r3, #11
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b36:	e032      	b.n	8004b9e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d117      	bne.n	8004b70 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	0fdb      	lsrs	r3, r3, #31
 8004b44:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	0cdb      	lsrs	r3, r3, #19
 8004b4a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	0adb      	lsrs	r3, r3, #11
 8004b50:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	08db      	lsrs	r3, r3, #3
 8004b56:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	029b      	lsls	r3, r3, #10
 8004b60:	431a      	orrs	r2, r3
 8004b62:	6a3b      	ldr	r3, [r7, #32]
 8004b64:	03db      	lsls	r3, r3, #15
 8004b66:	4313      	orrs	r3, r2
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b6e:	e016      	b.n	8004b9e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	0f1b      	lsrs	r3, r3, #28
 8004b74:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	0d1b      	lsrs	r3, r3, #20
 8004b7a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	0b1b      	lsrs	r3, r3, #12
 8004b80:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	011a      	lsls	r2, r3, #4
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	431a      	orrs	r2, r3
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	4313      	orrs	r3, r2
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004ba6:	e003      	b.n	8004bb0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	60da      	str	r2, [r3, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	372c      	adds	r7, #44	@ 0x2c
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	@ 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	e175      	b.n	8004ec8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004bdc:	2201      	movs	r2, #1
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	fa02 f303 	lsl.w	r3, r2, r3
 8004be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	f040 8164 	bne.w	8004ec2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d005      	beq.n	8004c12 <HAL_GPIO_Init+0x56>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d130      	bne.n	8004c74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	005b      	lsls	r3, r3, #1
 8004c1c:	2203      	movs	r2, #3
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c48:	2201      	movs	r2, #1
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4013      	ands	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	f003 0201 	and.w	r2, r3, #1
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	2b03      	cmp	r3, #3
 8004c7e:	d017      	beq.n	8004cb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	43db      	mvns	r3, r3
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	4013      	ands	r3, r2
 8004c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d123      	bne.n	8004d04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	08da      	lsrs	r2, r3, #3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	220f      	movs	r2, #15
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	08da      	lsrs	r2, r3, #3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3208      	adds	r2, #8
 8004cfe:	69b9      	ldr	r1, [r7, #24]
 8004d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	2203      	movs	r2, #3
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 0203 	and.w	r2, r3, #3
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 80be 	beq.w	8004ec2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d46:	4b66      	ldr	r3, [pc, #408]	@ (8004ee0 <HAL_GPIO_Init+0x324>)
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	4a65      	ldr	r2, [pc, #404]	@ (8004ee0 <HAL_GPIO_Init+0x324>)
 8004d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d52:	4b63      	ldr	r3, [pc, #396]	@ (8004ee0 <HAL_GPIO_Init+0x324>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004d5e:	4a61      	ldr	r2, [pc, #388]	@ (8004ee4 <HAL_GPIO_Init+0x328>)
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	089b      	lsrs	r3, r3, #2
 8004d64:	3302      	adds	r3, #2
 8004d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	220f      	movs	r2, #15
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a58      	ldr	r2, [pc, #352]	@ (8004ee8 <HAL_GPIO_Init+0x32c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d037      	beq.n	8004dfa <HAL_GPIO_Init+0x23e>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a57      	ldr	r2, [pc, #348]	@ (8004eec <HAL_GPIO_Init+0x330>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d031      	beq.n	8004df6 <HAL_GPIO_Init+0x23a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a56      	ldr	r2, [pc, #344]	@ (8004ef0 <HAL_GPIO_Init+0x334>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d02b      	beq.n	8004df2 <HAL_GPIO_Init+0x236>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a55      	ldr	r2, [pc, #340]	@ (8004ef4 <HAL_GPIO_Init+0x338>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d025      	beq.n	8004dee <HAL_GPIO_Init+0x232>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a54      	ldr	r2, [pc, #336]	@ (8004ef8 <HAL_GPIO_Init+0x33c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01f      	beq.n	8004dea <HAL_GPIO_Init+0x22e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a53      	ldr	r2, [pc, #332]	@ (8004efc <HAL_GPIO_Init+0x340>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d019      	beq.n	8004de6 <HAL_GPIO_Init+0x22a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a52      	ldr	r2, [pc, #328]	@ (8004f00 <HAL_GPIO_Init+0x344>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_GPIO_Init+0x226>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a51      	ldr	r2, [pc, #324]	@ (8004f04 <HAL_GPIO_Init+0x348>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00d      	beq.n	8004dde <HAL_GPIO_Init+0x222>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a50      	ldr	r2, [pc, #320]	@ (8004f08 <HAL_GPIO_Init+0x34c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <HAL_GPIO_Init+0x21e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8004f0c <HAL_GPIO_Init+0x350>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d101      	bne.n	8004dd6 <HAL_GPIO_Init+0x21a>
 8004dd2:	2309      	movs	r3, #9
 8004dd4:	e012      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004dd6:	230a      	movs	r3, #10
 8004dd8:	e010      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004dda:	2308      	movs	r3, #8
 8004ddc:	e00e      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004dde:	2307      	movs	r3, #7
 8004de0:	e00c      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004de2:	2306      	movs	r3, #6
 8004de4:	e00a      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004de6:	2305      	movs	r3, #5
 8004de8:	e008      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004dea:	2304      	movs	r3, #4
 8004dec:	e006      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004dee:	2303      	movs	r3, #3
 8004df0:	e004      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e002      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_GPIO_Init+0x240>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	f002 0203 	and.w	r2, r2, #3
 8004e02:	0092      	lsls	r2, r2, #2
 8004e04:	4093      	lsls	r3, r2
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004e0c:	4935      	ldr	r1, [pc, #212]	@ (8004ee4 <HAL_GPIO_Init+0x328>)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	3302      	adds	r3, #2
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <HAL_GPIO_Init+0x354>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	43db      	mvns	r3, r3
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	4013      	ands	r3, r2
 8004e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e3e:	4a34      	ldr	r2, [pc, #208]	@ (8004f10 <HAL_GPIO_Init+0x354>)
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e44:	4b32      	ldr	r3, [pc, #200]	@ (8004f10 <HAL_GPIO_Init+0x354>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4013      	ands	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e68:	4a29      	ldr	r2, [pc, #164]	@ (8004f10 <HAL_GPIO_Init+0x354>)
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e6e:	4b28      	ldr	r3, [pc, #160]	@ (8004f10 <HAL_GPIO_Init+0x354>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	43db      	mvns	r3, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e8a:	69ba      	ldr	r2, [r7, #24]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e92:	4a1f      	ldr	r2, [pc, #124]	@ (8004f10 <HAL_GPIO_Init+0x354>)
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e98:	4b1d      	ldr	r3, [pc, #116]	@ (8004f10 <HAL_GPIO_Init+0x354>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ebc:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <HAL_GPIO_Init+0x354>)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	f67f ae86 	bls.w	8004bdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3724      	adds	r7, #36	@ 0x24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40013800 	.word	0x40013800
 8004ee8:	40020000 	.word	0x40020000
 8004eec:	40020400 	.word	0x40020400
 8004ef0:	40020800 	.word	0x40020800
 8004ef4:	40020c00 	.word	0x40020c00
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	40021400 	.word	0x40021400
 8004f00:	40021800 	.word	0x40021800
 8004f04:	40021c00 	.word	0x40021c00
 8004f08:	40022000 	.word	0x40022000
 8004f0c:	40022400 	.word	0x40022400
 8004f10:	40013c00 	.word	0x40013c00

08004f14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e0d9      	b.n	80050e4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f30:	2201      	movs	r2, #1
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	f040 80c9 	bne.w	80050de <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80050fc <HAL_GPIO_DeInit+0x1e8>)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	089b      	lsrs	r3, r3, #2
 8004f52:	3302      	adds	r3, #2
 8004f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f58:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	220f      	movs	r2, #15
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a63      	ldr	r2, [pc, #396]	@ (8005100 <HAL_GPIO_DeInit+0x1ec>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d037      	beq.n	8004fe6 <HAL_GPIO_DeInit+0xd2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a62      	ldr	r2, [pc, #392]	@ (8005104 <HAL_GPIO_DeInit+0x1f0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d031      	beq.n	8004fe2 <HAL_GPIO_DeInit+0xce>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a61      	ldr	r2, [pc, #388]	@ (8005108 <HAL_GPIO_DeInit+0x1f4>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d02b      	beq.n	8004fde <HAL_GPIO_DeInit+0xca>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a60      	ldr	r2, [pc, #384]	@ (800510c <HAL_GPIO_DeInit+0x1f8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d025      	beq.n	8004fda <HAL_GPIO_DeInit+0xc6>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a5f      	ldr	r2, [pc, #380]	@ (8005110 <HAL_GPIO_DeInit+0x1fc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01f      	beq.n	8004fd6 <HAL_GPIO_DeInit+0xc2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a5e      	ldr	r2, [pc, #376]	@ (8005114 <HAL_GPIO_DeInit+0x200>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d019      	beq.n	8004fd2 <HAL_GPIO_DeInit+0xbe>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a5d      	ldr	r2, [pc, #372]	@ (8005118 <HAL_GPIO_DeInit+0x204>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d013      	beq.n	8004fce <HAL_GPIO_DeInit+0xba>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a5c      	ldr	r2, [pc, #368]	@ (800511c <HAL_GPIO_DeInit+0x208>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00d      	beq.n	8004fca <HAL_GPIO_DeInit+0xb6>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a5b      	ldr	r2, [pc, #364]	@ (8005120 <HAL_GPIO_DeInit+0x20c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <HAL_GPIO_DeInit+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a5a      	ldr	r2, [pc, #360]	@ (8005124 <HAL_GPIO_DeInit+0x210>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d101      	bne.n	8004fc2 <HAL_GPIO_DeInit+0xae>
 8004fbe:	2309      	movs	r3, #9
 8004fc0:	e012      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fc2:	230a      	movs	r3, #10
 8004fc4:	e010      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	e00e      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fca:	2307      	movs	r3, #7
 8004fcc:	e00c      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fce:	2306      	movs	r3, #6
 8004fd0:	e00a      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fd2:	2305      	movs	r3, #5
 8004fd4:	e008      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fd6:	2304      	movs	r3, #4
 8004fd8:	e006      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e004      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	e002      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_GPIO_DeInit+0xd4>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	f002 0203 	and.w	r2, r2, #3
 8004fee:	0092      	lsls	r2, r2, #2
 8004ff0:	4093      	lsls	r3, r2
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d132      	bne.n	800505e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8005128 <HAL_GPIO_DeInit+0x214>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	43db      	mvns	r3, r3
 8005000:	4949      	ldr	r1, [pc, #292]	@ (8005128 <HAL_GPIO_DeInit+0x214>)
 8005002:	4013      	ands	r3, r2
 8005004:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005006:	4b48      	ldr	r3, [pc, #288]	@ (8005128 <HAL_GPIO_DeInit+0x214>)
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	43db      	mvns	r3, r3
 800500e:	4946      	ldr	r1, [pc, #280]	@ (8005128 <HAL_GPIO_DeInit+0x214>)
 8005010:	4013      	ands	r3, r2
 8005012:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005014:	4b44      	ldr	r3, [pc, #272]	@ (8005128 <HAL_GPIO_DeInit+0x214>)
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	43db      	mvns	r3, r3
 800501c:	4942      	ldr	r1, [pc, #264]	@ (8005128 <HAL_GPIO_DeInit+0x214>)
 800501e:	4013      	ands	r3, r2
 8005020:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005022:	4b41      	ldr	r3, [pc, #260]	@ (8005128 <HAL_GPIO_DeInit+0x214>)
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	43db      	mvns	r3, r3
 800502a:	493f      	ldr	r1, [pc, #252]	@ (8005128 <HAL_GPIO_DeInit+0x214>)
 800502c:	4013      	ands	r3, r2
 800502e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	220f      	movs	r2, #15
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005040:	4a2e      	ldr	r2, [pc, #184]	@ (80050fc <HAL_GPIO_DeInit+0x1e8>)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	089b      	lsrs	r3, r3, #2
 8005046:	3302      	adds	r3, #2
 8005048:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	43da      	mvns	r2, r3
 8005050:	482a      	ldr	r0, [pc, #168]	@ (80050fc <HAL_GPIO_DeInit+0x1e8>)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	400a      	ands	r2, r1
 8005058:	3302      	adds	r3, #2
 800505a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	2103      	movs	r1, #3
 8005068:	fa01 f303 	lsl.w	r3, r1, r3
 800506c:	43db      	mvns	r3, r3
 800506e:	401a      	ands	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	08da      	lsrs	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3208      	adds	r2, #8
 800507c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	220f      	movs	r2, #15
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	08d2      	lsrs	r2, r2, #3
 8005094:	4019      	ands	r1, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3208      	adds	r2, #8
 800509a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	2103      	movs	r1, #3
 80050a8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ac:	43db      	mvns	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	2101      	movs	r1, #1
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	43db      	mvns	r3, r3
 80050c2:	401a      	ands	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	2103      	movs	r1, #3
 80050d2:	fa01 f303 	lsl.w	r3, r1, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	401a      	ands	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	3301      	adds	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b0f      	cmp	r3, #15
 80050e8:	f67f af22 	bls.w	8004f30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80050ec:	bf00      	nop
 80050ee:	bf00      	nop
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40013800 	.word	0x40013800
 8005100:	40020000 	.word	0x40020000
 8005104:	40020400 	.word	0x40020400
 8005108:	40020800 	.word	0x40020800
 800510c:	40020c00 	.word	0x40020c00
 8005110:	40021000 	.word	0x40021000
 8005114:	40021400 	.word	0x40021400
 8005118:	40021800 	.word	0x40021800
 800511c:	40021c00 	.word	0x40021c00
 8005120:	40022000 	.word	0x40022000
 8005124:	40022400 	.word	0x40022400
 8005128:	40013c00 	.word	0x40013c00

0800512c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
 8005138:	4613      	mov	r3, r2
 800513a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800513c:	787b      	ldrb	r3, [r7, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005142:	887a      	ldrh	r2, [r7, #2]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005148:	e003      	b.n	8005152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800514a:	887b      	ldrh	r3, [r7, #2]
 800514c:	041a      	lsls	r2, r3, #16
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	619a      	str	r2, [r3, #24]
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e07f      	b.n	8005272 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fc f9da 	bl	8001540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2224      	movs	r2, #36	@ 0x24
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	e006      	b.n	80051e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689a      	ldr	r2, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d104      	bne.n	80051fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	4b1d      	ldr	r3, [pc, #116]	@ (800527c <HAL_I2C_Init+0x11c>)
 8005206:	430b      	orrs	r3, r1
 8005208:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005218:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691a      	ldr	r2, [r3, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69d9      	ldr	r1, [r3, #28]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1a      	ldr	r2, [r3, #32]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f042 0201 	orr.w	r2, r2, #1
 8005252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	02008000 	.word	0x02008000

08005280 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e021      	b.n	80052d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2224      	movs	r2, #36	@ 0x24
 8005296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc f9f0 	bl	8001690 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	4608      	mov	r0, r1
 80052ea:	4611      	mov	r1, r2
 80052ec:	461a      	mov	r2, r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	817b      	strh	r3, [r7, #10]
 80052f2:	460b      	mov	r3, r1
 80052f4:	813b      	strh	r3, [r7, #8]
 80052f6:	4613      	mov	r3, r2
 80052f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b20      	cmp	r3, #32
 8005304:	f040 80f9 	bne.w	80054fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_I2C_Mem_Write+0x34>
 800530e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800531a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0ed      	b.n	80054fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_I2C_Mem_Write+0x4e>
 800532a:	2302      	movs	r3, #2
 800532c:	e0e6      	b.n	80054fc <HAL_I2C_Mem_Write+0x21c>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005336:	f7fe fa61 	bl	80037fc <HAL_GetTick>
 800533a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	2319      	movs	r3, #25
 8005342:	2201      	movs	r2, #1
 8005344:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fad1 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0d1      	b.n	80054fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2221      	movs	r2, #33	@ 0x21
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2240      	movs	r2, #64	@ 0x40
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005378:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005380:	88f8      	ldrh	r0, [r7, #6]
 8005382:	893a      	ldrh	r2, [r7, #8]
 8005384:	8979      	ldrh	r1, [r7, #10]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	4603      	mov	r3, r0
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f9e1 	bl	8005758 <I2C_RequestMemoryWrite>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0a9      	b.n	80054fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2bff      	cmp	r3, #255	@ 0xff
 80053b0:	d90e      	bls.n	80053d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	22ff      	movs	r2, #255	@ 0xff
 80053b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	8979      	ldrh	r1, [r7, #10]
 80053c0:	2300      	movs	r3, #0
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fc2d 	bl	8005c28 <I2C_TransferConfig>
 80053ce:	e00f      	b.n	80053f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	8979      	ldrh	r1, [r7, #10]
 80053e2:	2300      	movs	r3, #0
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fc1c 	bl	8005c28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 fabb 	bl	8005970 <I2C_WaitOnTXISFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e07b      	b.n	80054fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005414:	1c5a      	adds	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d034      	beq.n	80054a8 <HAL_I2C_Mem_Write+0x1c8>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005442:	2b00      	cmp	r3, #0
 8005444:	d130      	bne.n	80054a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	2200      	movs	r2, #0
 800544e:	2180      	movs	r1, #128	@ 0x80
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 fa4d 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e04d      	b.n	80054fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2bff      	cmp	r3, #255	@ 0xff
 8005468:	d90e      	bls.n	8005488 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	22ff      	movs	r2, #255	@ 0xff
 800546e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005474:	b2da      	uxtb	r2, r3
 8005476:	8979      	ldrh	r1, [r7, #10]
 8005478:	2300      	movs	r3, #0
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fbd1 	bl	8005c28 <I2C_TransferConfig>
 8005486:	e00f      	b.n	80054a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005496:	b2da      	uxtb	r2, r3
 8005498:	8979      	ldrh	r1, [r7, #10]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 fbc0 	bl	8005c28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d19e      	bne.n	80053f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 fa9a 	bl	80059f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e01a      	b.n	80054fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2220      	movs	r2, #32
 80054cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005504 <HAL_I2C_Mem_Write+0x224>)
 80054da:	400b      	ands	r3, r1
 80054dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2220      	movs	r2, #32
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e000      	b.n	80054fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
  }
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	fe00e800 	.word	0xfe00e800

08005508 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b088      	sub	sp, #32
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	4608      	mov	r0, r1
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	4603      	mov	r3, r0
 8005518:	817b      	strh	r3, [r7, #10]
 800551a:	460b      	mov	r3, r1
 800551c:	813b      	strh	r3, [r7, #8]
 800551e:	4613      	mov	r3, r2
 8005520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b20      	cmp	r3, #32
 800552c:	f040 80fd 	bne.w	800572a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <HAL_I2C_Mem_Read+0x34>
 8005536:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005542:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0f1      	b.n	800572c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800554e:	2b01      	cmp	r3, #1
 8005550:	d101      	bne.n	8005556 <HAL_I2C_Mem_Read+0x4e>
 8005552:	2302      	movs	r3, #2
 8005554:	e0ea      	b.n	800572c <HAL_I2C_Mem_Read+0x224>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800555e:	f7fe f94d 	bl	80037fc <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2319      	movs	r3, #25
 800556a:	2201      	movs	r2, #1
 800556c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f9bd 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d001      	beq.n	8005580 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0d5      	b.n	800572c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2222      	movs	r2, #34	@ 0x22
 8005584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2240      	movs	r2, #64	@ 0x40
 800558c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055a8:	88f8      	ldrh	r0, [r7, #6]
 80055aa:	893a      	ldrh	r2, [r7, #8]
 80055ac:	8979      	ldrh	r1, [r7, #10]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	9301      	str	r3, [sp, #4]
 80055b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	4603      	mov	r3, r0
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f921 	bl	8005800 <I2C_RequestMemoryRead>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0ad      	b.n	800572c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2bff      	cmp	r3, #255	@ 0xff
 80055d8:	d90e      	bls.n	80055f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	22ff      	movs	r2, #255	@ 0xff
 80055de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	8979      	ldrh	r1, [r7, #10]
 80055e8:	4b52      	ldr	r3, [pc, #328]	@ (8005734 <HAL_I2C_Mem_Read+0x22c>)
 80055ea:	9300      	str	r3, [sp, #0]
 80055ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fb19 	bl	8005c28 <I2C_TransferConfig>
 80055f6:	e00f      	b.n	8005618 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005606:	b2da      	uxtb	r2, r3
 8005608:	8979      	ldrh	r1, [r7, #10]
 800560a:	4b4a      	ldr	r3, [pc, #296]	@ (8005734 <HAL_I2C_Mem_Read+0x22c>)
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fb08 	bl	8005c28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	9300      	str	r3, [sp, #0]
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	2200      	movs	r2, #0
 8005620:	2104      	movs	r1, #4
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f964 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e07c      	b.n	800572c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565a:	b29b      	uxth	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d034      	beq.n	80056d8 <HAL_I2C_Mem_Read+0x1d0>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d130      	bne.n	80056d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	2200      	movs	r2, #0
 800567e:	2180      	movs	r1, #128	@ 0x80
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f935 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e04d      	b.n	800572c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005694:	b29b      	uxth	r3, r3
 8005696:	2bff      	cmp	r3, #255	@ 0xff
 8005698:	d90e      	bls.n	80056b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	22ff      	movs	r2, #255	@ 0xff
 800569e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	8979      	ldrh	r1, [r7, #10]
 80056a8:	2300      	movs	r3, #0
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fab9 	bl	8005c28 <I2C_TransferConfig>
 80056b6:	e00f      	b.n	80056d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	8979      	ldrh	r1, [r7, #10]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 faa8 	bl	8005c28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d19a      	bne.n	8005618 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f000 f982 	bl	80059f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e01a      	b.n	800572c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2220      	movs	r2, #32
 80056fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6859      	ldr	r1, [r3, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <HAL_I2C_Mem_Read+0x230>)
 800570a:	400b      	ands	r3, r1
 800570c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e000      	b.n	800572c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
  }
}
 800572c:	4618      	mov	r0, r3
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	80002400 	.word	0x80002400
 8005738:	fe00e800 	.word	0xfe00e800

0800573c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574a:	b2db      	uxtb	r3, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	4608      	mov	r0, r1
 8005762:	4611      	mov	r1, r2
 8005764:	461a      	mov	r2, r3
 8005766:	4603      	mov	r3, r0
 8005768:	817b      	strh	r3, [r7, #10]
 800576a:	460b      	mov	r3, r1
 800576c:	813b      	strh	r3, [r7, #8]
 800576e:	4613      	mov	r3, r2
 8005770:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	8979      	ldrh	r1, [r7, #10]
 8005778:	4b20      	ldr	r3, [pc, #128]	@ (80057fc <I2C_RequestMemoryWrite+0xa4>)
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fa51 	bl	8005c28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	69b9      	ldr	r1, [r7, #24]
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 f8f0 	bl	8005970 <I2C_WaitOnTXISFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e02c      	b.n	80057f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800579a:	88fb      	ldrh	r3, [r7, #6]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057a0:	893b      	ldrh	r3, [r7, #8]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80057aa:	e015      	b.n	80057d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80057ac:	893b      	ldrh	r3, [r7, #8]
 80057ae:	0a1b      	lsrs	r3, r3, #8
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f8d6 	bl	8005970 <I2C_WaitOnTXISFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e012      	b.n	80057f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057ce:	893b      	ldrh	r3, [r7, #8]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2200      	movs	r2, #0
 80057e0:	2180      	movs	r1, #128	@ 0x80
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 f884 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	80002000 	.word	0x80002000

08005800 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af02      	add	r7, sp, #8
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	4608      	mov	r0, r1
 800580a:	4611      	mov	r1, r2
 800580c:	461a      	mov	r2, r3
 800580e:	4603      	mov	r3, r0
 8005810:	817b      	strh	r3, [r7, #10]
 8005812:	460b      	mov	r3, r1
 8005814:	813b      	strh	r3, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800581a:	88fb      	ldrh	r3, [r7, #6]
 800581c:	b2da      	uxtb	r2, r3
 800581e:	8979      	ldrh	r1, [r7, #10]
 8005820:	4b20      	ldr	r3, [pc, #128]	@ (80058a4 <I2C_RequestMemoryRead+0xa4>)
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	2300      	movs	r3, #0
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f9fe 	bl	8005c28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	69b9      	ldr	r1, [r7, #24]
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f000 f89d 	bl	8005970 <I2C_WaitOnTXISFlagUntilTimeout>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e02c      	b.n	800589a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d105      	bne.n	8005852 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005846:	893b      	ldrh	r3, [r7, #8]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005850:	e015      	b.n	800587e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005852:	893b      	ldrh	r3, [r7, #8]
 8005854:	0a1b      	lsrs	r3, r3, #8
 8005856:	b29b      	uxth	r3, r3
 8005858:	b2da      	uxtb	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	69b9      	ldr	r1, [r7, #24]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f883 	bl	8005970 <I2C_WaitOnTXISFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e012      	b.n	800589a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005874:	893b      	ldrh	r3, [r7, #8]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2200      	movs	r2, #0
 8005886:	2140      	movs	r1, #64	@ 0x40
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f831 	bl	80058f0 <I2C_WaitOnFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	80002000 	.word	0x80002000

080058a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d103      	bne.n	80058c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d007      	beq.n	80058e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	619a      	str	r2, [r3, #24]
  }
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005900:	e022      	b.n	8005948 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d01e      	beq.n	8005948 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fd ff77 	bl	80037fc <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <I2C_WaitOnFlagUntilTimeout+0x30>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d113      	bne.n	8005948 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e00f      	b.n	8005968 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4013      	ands	r3, r2
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	429a      	cmp	r2, r3
 8005964:	d0cd      	beq.n	8005902 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800597c:	e02c      	b.n	80059d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f870 	bl	8005a68 <I2C_IsErrorOccurred>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e02a      	b.n	80059e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d01e      	beq.n	80059d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599a:	f7fd ff2f 	bl	80037fc <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d113      	bne.n	80059d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b4:	f043 0220 	orr.w	r2, r3, #32
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e007      	b.n	80059e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d1cb      	bne.n	800597e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059fc:	e028      	b.n	8005a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 f830 	bl	8005a68 <I2C_IsErrorOccurred>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e026      	b.n	8005a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a12:	f7fd fef3 	bl	80037fc <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d113      	bne.n	8005a50 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e007      	b.n	8005a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d1cf      	bne.n	80059fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	@ 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	f003 0310 	and.w	r3, r3, #16
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d068      	beq.n	8005b66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2210      	movs	r2, #16
 8005a9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005a9c:	e049      	b.n	8005b32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d045      	beq.n	8005b32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005aa6:	f7fd fea9 	bl	80037fc <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d302      	bcc.n	8005abc <I2C_IsErrorOccurred+0x54>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d13a      	bne.n	8005b32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ac6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ace:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ade:	d121      	bne.n	8005b24 <I2C_IsErrorOccurred+0xbc>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ae6:	d01d      	beq.n	8005b24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ae8:	7cfb      	ldrb	r3, [r7, #19]
 8005aea:	2b20      	cmp	r3, #32
 8005aec:	d01a      	beq.n	8005b24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685a      	ldr	r2, [r3, #4]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005afc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005afe:	f7fd fe7d 	bl	80037fc <HAL_GetTick>
 8005b02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b04:	e00e      	b.n	8005b24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b06:	f7fd fe79 	bl	80037fc <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b19      	cmp	r3, #25
 8005b12:	d907      	bls.n	8005b24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	f043 0320 	orr.w	r3, r3, #32
 8005b1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b22:	e006      	b.n	8005b32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d1e9      	bne.n	8005b06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d003      	beq.n	8005b48 <I2C_IsErrorOccurred+0xe0>
 8005b40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0aa      	beq.n	8005a9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2220      	movs	r2, #32
 8005b56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	f043 0304 	orr.w	r3, r3, #4
 8005b5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00b      	beq.n	8005bb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	f043 0308 	orr.w	r3, r3, #8
 8005ba0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005baa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00b      	beq.n	8005bd4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	f043 0302 	orr.w	r3, r3, #2
 8005bc2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bcc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01c      	beq.n	8005c16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f7ff fe63 	bl	80058a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6859      	ldr	r1, [r3, #4]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <I2C_IsErrorOccurred+0x1bc>)
 8005bee:	400b      	ands	r3, r1
 8005bf0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3728      	adds	r7, #40	@ 0x28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	fe00e800 	.word	0xfe00e800

08005c28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	460b      	mov	r3, r1
 8005c34:	817b      	strh	r3, [r7, #10]
 8005c36:	4613      	mov	r3, r2
 8005c38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c3a:	897b      	ldrh	r3, [r7, #10]
 8005c3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c40:	7a7b      	ldrb	r3, [r7, #9]
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	0d5b      	lsrs	r3, r3, #21
 8005c62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c66:	4b08      	ldr	r3, [pc, #32]	@ (8005c88 <I2C_TransferConfig+0x60>)
 8005c68:	430b      	orrs	r3, r1
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	ea02 0103 	and.w	r1, r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	03ff63ff 	.word	0x03ff63ff

08005c8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d138      	bne.n	8005d14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e032      	b.n	8005d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2224      	movs	r2, #36	@ 0x24
 8005cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 0201 	bic.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6819      	ldr	r1, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e000      	b.n	8005d16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
  }
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b085      	sub	sp, #20
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d139      	bne.n	8005dac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e033      	b.n	8005dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2224      	movs	r2, #36	@ 0x24
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d74:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f042 0201 	orr.w	r2, r2, #1
 8005d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e000      	b.n	8005dae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005dac:	2302      	movs	r3, #2
  }
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e0bf      	b.n	8005f4e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7fb fd12 	bl	800180c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005dfe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e14:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6899      	ldr	r1, [r3, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f58 <HAL_LTDC_Init+0x19c>)
 8005e30:	400b      	ands	r3, r1
 8005e32:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6899      	ldr	r1, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68d9      	ldr	r1, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8005f58 <HAL_LTDC_Init+0x19c>)
 8005e5e:	400b      	ands	r3, r1
 8005e60:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68d9      	ldr	r1, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1a      	ldr	r2, [r3, #32]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6919      	ldr	r1, [r3, #16]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	4b33      	ldr	r3, [pc, #204]	@ (8005f58 <HAL_LTDC_Init+0x19c>)
 8005e8c:	400b      	ands	r3, r1
 8005e8e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	041b      	lsls	r3, r3, #16
 8005e96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6919      	ldr	r1, [r3, #16]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6959      	ldr	r1, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4b27      	ldr	r3, [pc, #156]	@ (8005f58 <HAL_LTDC_Init+0x19c>)
 8005eba:	400b      	ands	r3, r1
 8005ebc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6959      	ldr	r1, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005eec:	041b      	lsls	r3, r3, #16
 8005eee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005f12:	431a      	orrs	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0206 	orr.w	r2, r2, #6
 8005f2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	f000f800 	.word	0xf000f800

08005f5c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f72:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d023      	beq.n	8005fc6 <HAL_LTDC_IRQHandler+0x6a>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01e      	beq.n	8005fc6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0204 	bic.w	r2, r2, #4
 8005f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2204      	movs	r2, #4
 8005f9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fa6:	f043 0201 	orr.w	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f86f 	bl	80060a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d023      	beq.n	8006018 <HAL_LTDC_IRQHandler+0xbc>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01e      	beq.n	8006018 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0202 	bic.w	r2, r2, #2
 8005fe8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ff8:	f043 0202 	orr.w	r2, r3, #2
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2204      	movs	r2, #4
 8006006:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f846 	bl	80060a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01b      	beq.n	800605a <HAL_LTDC_IRQHandler+0xfe>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d016      	beq.n	800605a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2201      	movs	r2, #1
 8006042:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f82f 	bl	80060b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01b      	beq.n	800609c <HAL_LTDC_IRQHandler+0x140>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0308 	and.w	r3, r3, #8
 800606a:	2b00      	cmp	r3, #0
 800606c:	d016      	beq.n	800609c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0208 	bic.w	r2, r2, #8
 800607c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2208      	movs	r2, #8
 8006084:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f818 	bl	80060cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060e0:	b5b0      	push	{r4, r5, r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_LTDC_ConfigLayer+0x1a>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e02c      	b.n	8006154 <HAL_LTDC_ConfigLayer+0x74>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2134      	movs	r1, #52	@ 0x34
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	4413      	add	r3, r2
 8006116:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4614      	mov	r4, r2
 800611e:	461d      	mov	r5, r3
 8006120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800612a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f81f 	bl	8006178 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2201      	movs	r2, #1
 8006140:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bdb0      	pop	{r4, r5, r7, pc}

0800615c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800616a:	b2db      	uxtb	r3, r3
}
 800616c:	4618      	mov	r0, r3
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006178:	b480      	push	{r7}
 800617a:	b089      	sub	sp, #36	@ 0x24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	0c1b      	lsrs	r3, r3, #16
 8006190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006194:	4413      	add	r3, r2
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	01db      	lsls	r3, r3, #7
 80061a4:	4413      	add	r3, r2
 80061a6:	3384      	adds	r3, #132	@ 0x84
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	6812      	ldr	r2, [r2, #0]
 80061ae:	4611      	mov	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	01d2      	lsls	r2, r2, #7
 80061b4:	440a      	add	r2, r1
 80061b6:	3284      	adds	r2, #132	@ 0x84
 80061b8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80061bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	0c1b      	lsrs	r3, r3, #16
 80061ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061ce:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061d0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4619      	mov	r1, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	01db      	lsls	r3, r3, #7
 80061dc:	440b      	add	r3, r1
 80061de:	3384      	adds	r3, #132	@ 0x84
 80061e0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80061e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	68da      	ldr	r2, [r3, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061f6:	4413      	add	r3, r2
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	01db      	lsls	r3, r3, #7
 8006206:	4413      	add	r3, r2
 8006208:	3384      	adds	r3, #132	@ 0x84
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	6812      	ldr	r2, [r2, #0]
 8006210:	4611      	mov	r1, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	01d2      	lsls	r2, r2, #7
 8006216:	440a      	add	r2, r1
 8006218:	3284      	adds	r2, #132	@ 0x84
 800621a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800621e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800622e:	4413      	add	r3, r2
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	01db      	lsls	r3, r3, #7
 800623c:	440b      	add	r3, r1
 800623e:	3384      	adds	r3, #132	@ 0x84
 8006240:	4619      	mov	r1, r3
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4313      	orrs	r3, r2
 8006246:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	01db      	lsls	r3, r3, #7
 8006252:	4413      	add	r3, r2
 8006254:	3384      	adds	r3, #132	@ 0x84
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	4611      	mov	r1, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	01d2      	lsls	r2, r2, #7
 8006262:	440a      	add	r2, r1
 8006264:	3284      	adds	r2, #132	@ 0x84
 8006266:	f023 0307 	bic.w	r3, r3, #7
 800626a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	461a      	mov	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	01db      	lsls	r3, r3, #7
 8006276:	4413      	add	r3, r2
 8006278:	3384      	adds	r3, #132	@ 0x84
 800627a:	461a      	mov	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	061b      	lsls	r3, r3, #24
 800629c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	01db      	lsls	r3, r3, #7
 80062a8:	4413      	add	r3, r2
 80062aa:	3384      	adds	r3, #132	@ 0x84
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	01db      	lsls	r3, r3, #7
 80062b8:	4413      	add	r3, r2
 80062ba:	3384      	adds	r3, #132	@ 0x84
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80062c8:	461a      	mov	r2, r3
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	431a      	orrs	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	440b      	add	r3, r1
 80062de:	3384      	adds	r3, #132	@ 0x84
 80062e0:	4619      	mov	r1, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	01db      	lsls	r3, r3, #7
 80062f2:	4413      	add	r3, r2
 80062f4:	3384      	adds	r3, #132	@ 0x84
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	4611      	mov	r1, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	01d2      	lsls	r2, r2, #7
 8006302:	440a      	add	r2, r1
 8006304:	3284      	adds	r2, #132	@ 0x84
 8006306:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800630a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	01db      	lsls	r3, r3, #7
 8006316:	4413      	add	r3, r2
 8006318:	3384      	adds	r3, #132	@ 0x84
 800631a:	461a      	mov	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	01db      	lsls	r3, r3, #7
 800632c:	4413      	add	r3, r2
 800632e:	3384      	adds	r3, #132	@ 0x84
 8006330:	69da      	ldr	r2, [r3, #28]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4619      	mov	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	01db      	lsls	r3, r3, #7
 800633c:	440b      	add	r3, r1
 800633e:	3384      	adds	r3, #132	@ 0x84
 8006340:	4619      	mov	r1, r3
 8006342:	4b58      	ldr	r3, [pc, #352]	@ (80064a4 <LTDC_SetConfig+0x32c>)
 8006344:	4013      	ands	r3, r2
 8006346:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	68f9      	ldr	r1, [r7, #12]
 8006352:	6809      	ldr	r1, [r1, #0]
 8006354:	4608      	mov	r0, r1
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	01c9      	lsls	r1, r1, #7
 800635a:	4401      	add	r1, r0
 800635c:	3184      	adds	r1, #132	@ 0x84
 800635e:	4313      	orrs	r3, r2
 8006360:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	01db      	lsls	r3, r3, #7
 800636c:	4413      	add	r3, r2
 800636e:	3384      	adds	r3, #132	@ 0x84
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	4413      	add	r3, r2
 800637e:	3384      	adds	r3, #132	@ 0x84
 8006380:	461a      	mov	r2, r3
 8006382:	2300      	movs	r3, #0
 8006384:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	01db      	lsls	r3, r3, #7
 8006390:	4413      	add	r3, r2
 8006392:	3384      	adds	r3, #132	@ 0x84
 8006394:	461a      	mov	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80063a4:	2304      	movs	r3, #4
 80063a6:	61fb      	str	r3, [r7, #28]
 80063a8:	e01b      	b.n	80063e2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d102      	bne.n	80063b8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80063b2:	2303      	movs	r3, #3
 80063b4:	61fb      	str	r3, [r7, #28]
 80063b6:	e014      	b.n	80063e2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b04      	cmp	r3, #4
 80063be:	d00b      	beq.n	80063d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d007      	beq.n	80063d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d003      	beq.n	80063d8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80063d4:	2b07      	cmp	r3, #7
 80063d6:	d102      	bne.n	80063de <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80063d8:	2302      	movs	r3, #2
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e001      	b.n	80063e2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80063de:	2301      	movs	r3, #1
 80063e0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	01db      	lsls	r3, r3, #7
 80063ec:	4413      	add	r3, r2
 80063ee:	3384      	adds	r3, #132	@ 0x84
 80063f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	6812      	ldr	r2, [r2, #0]
 80063f6:	4611      	mov	r1, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	01d2      	lsls	r2, r2, #7
 80063fc:	440a      	add	r2, r1
 80063fe:	3284      	adds	r2, #132	@ 0x84
 8006400:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006404:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	fb02 f303 	mul.w	r3, r2, r3
 8006410:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	1acb      	subs	r3, r1, r3
 800641c:	69f9      	ldr	r1, [r7, #28]
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006424:	68f9      	ldr	r1, [r7, #12]
 8006426:	6809      	ldr	r1, [r1, #0]
 8006428:	4608      	mov	r0, r1
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	01c9      	lsls	r1, r1, #7
 800642e:	4401      	add	r1, r0
 8006430:	3184      	adds	r1, #132	@ 0x84
 8006432:	4313      	orrs	r3, r2
 8006434:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	01db      	lsls	r3, r3, #7
 8006440:	4413      	add	r3, r2
 8006442:	3384      	adds	r3, #132	@ 0x84
 8006444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	01db      	lsls	r3, r3, #7
 8006450:	440b      	add	r3, r1
 8006452:	3384      	adds	r3, #132	@ 0x84
 8006454:	4619      	mov	r1, r3
 8006456:	4b14      	ldr	r3, [pc, #80]	@ (80064a8 <LTDC_SetConfig+0x330>)
 8006458:	4013      	ands	r3, r2
 800645a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	01db      	lsls	r3, r3, #7
 8006466:	4413      	add	r3, r2
 8006468:	3384      	adds	r3, #132	@ 0x84
 800646a:	461a      	mov	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006470:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	01db      	lsls	r3, r3, #7
 800647c:	4413      	add	r3, r2
 800647e:	3384      	adds	r3, #132	@ 0x84
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	4611      	mov	r1, r2
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	01d2      	lsls	r2, r2, #7
 800648c:	440a      	add	r2, r1
 800648e:	3284      	adds	r2, #132	@ 0x84
 8006490:	f043 0301 	orr.w	r3, r3, #1
 8006494:	6013      	str	r3, [r2, #0]
}
 8006496:	bf00      	nop
 8006498:	3724      	adds	r7, #36	@ 0x24
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	fffff8f8 	.word	0xfffff8f8
 80064a8:	fffff800 	.word	0xfffff800

080064ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80064ac:	b480      	push	{r7}
 80064ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064b0:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a04      	ldr	r2, [pc, #16]	@ (80064c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80064b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ba:	6013      	str	r3, [r2, #0]
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	40007000 	.word	0x40007000

080064cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80064d6:	4b23      	ldr	r3, [pc, #140]	@ (8006564 <HAL_PWREx_EnableOverDrive+0x98>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	4a22      	ldr	r2, [pc, #136]	@ (8006564 <HAL_PWREx_EnableOverDrive+0x98>)
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80064e2:	4b20      	ldr	r3, [pc, #128]	@ (8006564 <HAL_PWREx_EnableOverDrive+0x98>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80064ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064fa:	f7fd f97f 	bl	80037fc <HAL_GetTick>
 80064fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006500:	e009      	b.n	8006516 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006502:	f7fd f97b 	bl	80037fc <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006510:	d901      	bls.n	8006516 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e022      	b.n	800655c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006516:	4b14      	ldr	r3, [pc, #80]	@ (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006522:	d1ee      	bne.n	8006502 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006524:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a0f      	ldr	r2, [pc, #60]	@ (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 800652a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800652e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006530:	f7fd f964 	bl	80037fc <HAL_GetTick>
 8006534:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006536:	e009      	b.n	800654c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006538:	f7fd f960 	bl	80037fc <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006546:	d901      	bls.n	800654c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e007      	b.n	800655c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <HAL_PWREx_EnableOverDrive+0x9c>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006558:	d1ee      	bne.n	8006538 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	40023800 	.word	0x40023800
 8006568:	40007000 	.word	0x40007000

0800656c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006574:	2300      	movs	r3, #0
 8006576:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e291      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 8087 	beq.w	800669e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006590:	4b96      	ldr	r3, [pc, #600]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 030c 	and.w	r3, r3, #12
 8006598:	2b04      	cmp	r3, #4
 800659a:	d00c      	beq.n	80065b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800659c:	4b93      	ldr	r3, [pc, #588]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 030c 	and.w	r3, r3, #12
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d112      	bne.n	80065ce <HAL_RCC_OscConfig+0x62>
 80065a8:	4b90      	ldr	r3, [pc, #576]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065b4:	d10b      	bne.n	80065ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b6:	4b8d      	ldr	r3, [pc, #564]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d06c      	beq.n	800669c <HAL_RCC_OscConfig+0x130>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d168      	bne.n	800669c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e26b      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d6:	d106      	bne.n	80065e6 <HAL_RCC_OscConfig+0x7a>
 80065d8:	4b84      	ldr	r3, [pc, #528]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a83      	ldr	r2, [pc, #524]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80065de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	e02e      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10c      	bne.n	8006608 <HAL_RCC_OscConfig+0x9c>
 80065ee:	4b7f      	ldr	r3, [pc, #508]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a7e      	ldr	r2, [pc, #504]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80065f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b7c      	ldr	r3, [pc, #496]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7b      	ldr	r2, [pc, #492]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006600:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	e01d      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006610:	d10c      	bne.n	800662c <HAL_RCC_OscConfig+0xc0>
 8006612:	4b76      	ldr	r3, [pc, #472]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a75      	ldr	r2, [pc, #468]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006618:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	4b73      	ldr	r3, [pc, #460]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a72      	ldr	r2, [pc, #456]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006628:	6013      	str	r3, [r2, #0]
 800662a:	e00b      	b.n	8006644 <HAL_RCC_OscConfig+0xd8>
 800662c:	4b6f      	ldr	r3, [pc, #444]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a6e      	ldr	r2, [pc, #440]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006636:	6013      	str	r3, [r2, #0]
 8006638:	4b6c      	ldr	r3, [pc, #432]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a6b      	ldr	r2, [pc, #428]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 800663e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d013      	beq.n	8006674 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fd f8d6 	bl	80037fc <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fd f8d2 	bl	80037fc <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	@ 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e21f      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006666:	4b61      	ldr	r3, [pc, #388]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0xe8>
 8006672:	e014      	b.n	800669e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006674:	f7fd f8c2 	bl	80037fc <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800667c:	f7fd f8be 	bl	80037fc <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b64      	cmp	r3, #100	@ 0x64
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e20b      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800668e:	4b57      	ldr	r3, [pc, #348]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0x110>
 800669a:	e000      	b.n	800669e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800669c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d069      	beq.n	800677e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80066aa:	4b50      	ldr	r3, [pc, #320]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f003 030c 	and.w	r3, r3, #12
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00b      	beq.n	80066ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b6:	4b4d      	ldr	r3, [pc, #308]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 030c 	and.w	r3, r3, #12
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d11c      	bne.n	80066fc <HAL_RCC_OscConfig+0x190>
 80066c2:	4b4a      	ldr	r3, [pc, #296]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d116      	bne.n	80066fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ce:	4b47      	ldr	r3, [pc, #284]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_RCC_OscConfig+0x17a>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d001      	beq.n	80066e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e1df      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e6:	4b41      	ldr	r3, [pc, #260]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	493d      	ldr	r1, [pc, #244]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066fa:	e040      	b.n	800677e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d023      	beq.n	800674c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006704:	4b39      	ldr	r3, [pc, #228]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a38      	ldr	r2, [pc, #224]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006710:	f7fd f874 	bl	80037fc <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006716:	e008      	b.n	800672a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006718:	f7fd f870 	bl	80037fc <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	2b02      	cmp	r3, #2
 8006724:	d901      	bls.n	800672a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e1bd      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672a:	4b30      	ldr	r3, [pc, #192]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0f0      	beq.n	8006718 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006736:	4b2d      	ldr	r3, [pc, #180]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4929      	ldr	r1, [pc, #164]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006746:	4313      	orrs	r3, r2
 8006748:	600b      	str	r3, [r1, #0]
 800674a:	e018      	b.n	800677e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674c:	4b27      	ldr	r3, [pc, #156]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a26      	ldr	r2, [pc, #152]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006752:	f023 0301 	bic.w	r3, r3, #1
 8006756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006758:	f7fd f850 	bl	80037fc <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800675e:	e008      	b.n	8006772 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006760:	f7fd f84c 	bl	80037fc <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d901      	bls.n	8006772 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e199      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	4b1e      	ldr	r3, [pc, #120]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1f0      	bne.n	8006760 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0308 	and.w	r3, r3, #8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d038      	beq.n	80067fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d019      	beq.n	80067c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006792:	4b16      	ldr	r3, [pc, #88]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006796:	4a15      	ldr	r2, [pc, #84]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 8006798:	f043 0301 	orr.w	r3, r3, #1
 800679c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800679e:	f7fd f82d 	bl	80037fc <HAL_GetTick>
 80067a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067a4:	e008      	b.n	80067b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067a6:	f7fd f829 	bl	80037fc <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d901      	bls.n	80067b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e176      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b8:	4b0c      	ldr	r3, [pc, #48]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80067ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0f0      	beq.n	80067a6 <HAL_RCC_OscConfig+0x23a>
 80067c4:	e01a      	b.n	80067fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067c6:	4b09      	ldr	r3, [pc, #36]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80067c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ca:	4a08      	ldr	r2, [pc, #32]	@ (80067ec <HAL_RCC_OscConfig+0x280>)
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d2:	f7fd f813 	bl	80037fc <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d8:	e00a      	b.n	80067f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067da:	f7fd f80f 	bl	80037fc <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d903      	bls.n	80067f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e15c      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
 80067ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067f0:	4b91      	ldr	r3, [pc, #580]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80067f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1ee      	bne.n	80067da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80a4 	beq.w	8006952 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800680a:	4b8b      	ldr	r3, [pc, #556]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d10d      	bne.n	8006832 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006816:	4b88      	ldr	r3, [pc, #544]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	4a87      	ldr	r2, [pc, #540]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800681c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006820:	6413      	str	r3, [r2, #64]	@ 0x40
 8006822:	4b85      	ldr	r3, [pc, #532]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800682a:	60bb      	str	r3, [r7, #8]
 800682c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006832:	4b82      	ldr	r3, [pc, #520]	@ (8006a3c <HAL_RCC_OscConfig+0x4d0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683a:	2b00      	cmp	r3, #0
 800683c:	d118      	bne.n	8006870 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800683e:	4b7f      	ldr	r3, [pc, #508]	@ (8006a3c <HAL_RCC_OscConfig+0x4d0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7e      	ldr	r2, [pc, #504]	@ (8006a3c <HAL_RCC_OscConfig+0x4d0>)
 8006844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800684a:	f7fc ffd7 	bl	80037fc <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006852:	f7fc ffd3 	bl	80037fc <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b64      	cmp	r3, #100	@ 0x64
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e120      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006864:	4b75      	ldr	r3, [pc, #468]	@ (8006a3c <HAL_RCC_OscConfig+0x4d0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d106      	bne.n	8006886 <HAL_RCC_OscConfig+0x31a>
 8006878:	4b6f      	ldr	r3, [pc, #444]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	4a6e      	ldr	r2, [pc, #440]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	@ 0x70
 8006884:	e02d      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10c      	bne.n	80068a8 <HAL_RCC_OscConfig+0x33c>
 800688e:	4b6a      	ldr	r3, [pc, #424]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006892:	4a69      	ldr	r2, [pc, #420]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	6713      	str	r3, [r2, #112]	@ 0x70
 800689a:	4b67      	ldr	r3, [pc, #412]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800689c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689e:	4a66      	ldr	r2, [pc, #408]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068a0:	f023 0304 	bic.w	r3, r3, #4
 80068a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068a6:	e01c      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b05      	cmp	r3, #5
 80068ae:	d10c      	bne.n	80068ca <HAL_RCC_OscConfig+0x35e>
 80068b0:	4b61      	ldr	r3, [pc, #388]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b4:	4a60      	ldr	r2, [pc, #384]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068b6:	f043 0304 	orr.w	r3, r3, #4
 80068ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80068bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c0:	4a5d      	ldr	r2, [pc, #372]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068c2:	f043 0301 	orr.w	r3, r3, #1
 80068c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c8:	e00b      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
 80068ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ce:	4a5a      	ldr	r2, [pc, #360]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068d0:	f023 0301 	bic.w	r3, r3, #1
 80068d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80068d6:	4b58      	ldr	r3, [pc, #352]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068da:	4a57      	ldr	r2, [pc, #348]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80068dc:	f023 0304 	bic.w	r3, r3, #4
 80068e0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d015      	beq.n	8006916 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ea:	f7fc ff87 	bl	80037fc <HAL_GetTick>
 80068ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	e00a      	b.n	8006908 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068f2:	f7fc ff83 	bl	80037fc <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e0ce      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006908:	4b4b      	ldr	r3, [pc, #300]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0ee      	beq.n	80068f2 <HAL_RCC_OscConfig+0x386>
 8006914:	e014      	b.n	8006940 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006916:	f7fc ff71 	bl	80037fc <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800691c:	e00a      	b.n	8006934 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800691e:	f7fc ff6d 	bl	80037fc <HAL_GetTick>
 8006922:	4602      	mov	r2, r0
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692c:	4293      	cmp	r3, r2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e0b8      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006934:	4b40      	ldr	r3, [pc, #256]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1ee      	bne.n	800691e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d105      	bne.n	8006952 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006946:	4b3c      	ldr	r3, [pc, #240]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	4a3b      	ldr	r2, [pc, #236]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800694c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006950:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 80a4 	beq.w	8006aa4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800695c:	4b36      	ldr	r3, [pc, #216]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 030c 	and.w	r3, r3, #12
 8006964:	2b08      	cmp	r3, #8
 8006966:	d06b      	beq.n	8006a40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d149      	bne.n	8006a04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006970:	4b31      	ldr	r3, [pc, #196]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a30      	ldr	r2, [pc, #192]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800697a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fc ff3e 	bl	80037fc <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006984:	f7fc ff3a 	bl	80037fc <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e087      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006996:	4b28      	ldr	r3, [pc, #160]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69da      	ldr	r2, [r3, #28]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	019b      	lsls	r3, r3, #6
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b8:	085b      	lsrs	r3, r3, #1
 80069ba:	3b01      	subs	r3, #1
 80069bc:	041b      	lsls	r3, r3, #16
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c4:	061b      	lsls	r3, r3, #24
 80069c6:	4313      	orrs	r3, r2
 80069c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80069ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069d0:	4b19      	ldr	r3, [pc, #100]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a18      	ldr	r2, [pc, #96]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80069d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fc ff0e 	bl	80037fc <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fc ff0a 	bl	80037fc <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e057      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f6:	4b10      	ldr	r3, [pc, #64]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x478>
 8006a02:	e04f      	b.n	8006aa4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a04:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a0b      	ldr	r2, [pc, #44]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006a0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a10:	f7fc fef4 	bl	80037fc <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a16:	e008      	b.n	8006a2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a18:	f7fc fef0 	bl	80037fc <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d901      	bls.n	8006a2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e03d      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2a:	4b03      	ldr	r3, [pc, #12]	@ (8006a38 <HAL_RCC_OscConfig+0x4cc>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1f0      	bne.n	8006a18 <HAL_RCC_OscConfig+0x4ac>
 8006a36:	e035      	b.n	8006aa4 <HAL_RCC_OscConfig+0x538>
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006a40:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab0 <HAL_RCC_OscConfig+0x544>)
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d028      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d121      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d11a      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d111      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a86:	085b      	lsrs	r3, r3, #1
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d107      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d001      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40023800 	.word	0x40023800

08006ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0d0      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006acc:	4b6a      	ldr	r3, [pc, #424]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d910      	bls.n	8006afc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ada:	4b67      	ldr	r3, [pc, #412]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f023 020f 	bic.w	r2, r3, #15
 8006ae2:	4965      	ldr	r1, [pc, #404]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aea:	4b63      	ldr	r3, [pc, #396]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d001      	beq.n	8006afc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0b8      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d020      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b14:	4b59      	ldr	r3, [pc, #356]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	4a58      	ldr	r2, [pc, #352]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b2c:	4b53      	ldr	r3, [pc, #332]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	4a52      	ldr	r2, [pc, #328]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b38:	4b50      	ldr	r3, [pc, #320]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	494d      	ldr	r1, [pc, #308]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d040      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5e:	4b47      	ldr	r3, [pc, #284]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d115      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e07f      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d107      	bne.n	8006b86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b76:	4b41      	ldr	r3, [pc, #260]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d109      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e073      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b86:	4b3d      	ldr	r3, [pc, #244]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e06b      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b96:	4b39      	ldr	r3, [pc, #228]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f023 0203 	bic.w	r2, r3, #3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	4936      	ldr	r1, [pc, #216]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba8:	f7fc fe28 	bl	80037fc <HAL_GetTick>
 8006bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bae:	e00a      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bb0:	f7fc fe24 	bl	80037fc <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e053      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 020c 	and.w	r2, r3, #12
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d1eb      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bd8:	4b27      	ldr	r3, [pc, #156]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d210      	bcs.n	8006c08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be6:	4b24      	ldr	r3, [pc, #144]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f023 020f 	bic.w	r2, r3, #15
 8006bee:	4922      	ldr	r1, [pc, #136]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bf6:	4b20      	ldr	r3, [pc, #128]	@ (8006c78 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e032      	b.n	8006c6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d008      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c14:	4b19      	ldr	r3, [pc, #100]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	4916      	ldr	r1, [pc, #88]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c32:	4b12      	ldr	r3, [pc, #72]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	490e      	ldr	r1, [pc, #56]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c46:	f000 f821 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <HAL_RCC_ClockConfig+0x1c8>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	091b      	lsrs	r3, r3, #4
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	490a      	ldr	r1, [pc, #40]	@ (8006c80 <HAL_RCC_ClockConfig+0x1cc>)
 8006c58:	5ccb      	ldrb	r3, [r1, r3]
 8006c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5e:	4a09      	ldr	r2, [pc, #36]	@ (8006c84 <HAL_RCC_ClockConfig+0x1d0>)
 8006c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c62:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <HAL_RCC_ClockConfig+0x1d4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fc f8ea 	bl	8002e40 <HAL_InitTick>

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40023c00 	.word	0x40023c00
 8006c7c:	40023800 	.word	0x40023800
 8006c80:	0800fa28 	.word	0x0800fa28
 8006c84:	2000003c 	.word	0x2000003c
 8006c88:	20000040 	.word	0x20000040

08006c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c90:	b090      	sub	sp, #64	@ 0x40
 8006c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c98:	2300      	movs	r3, #0
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ca4:	4b59      	ldr	r3, [pc, #356]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 030c 	and.w	r3, r3, #12
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d00d      	beq.n	8006ccc <HAL_RCC_GetSysClockFreq+0x40>
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	f200 80a1 	bhi.w	8006df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006cbe:	e09b      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cc0:	4b53      	ldr	r3, [pc, #332]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8006cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006cc4:	e09b      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cc6:	4b53      	ldr	r3, [pc, #332]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006cca:	e098      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d028      	beq.n	8006d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	099b      	lsrs	r3, r3, #6
 8006ce8:	2200      	movs	r2, #0
 8006cea:	623b      	str	r3, [r7, #32]
 8006cec:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cee:	6a3b      	ldr	r3, [r7, #32]
 8006cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4b47      	ldr	r3, [pc, #284]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cf8:	fb03 f201 	mul.w	r2, r3, r1
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	fb00 f303 	mul.w	r3, r0, r3
 8006d02:	4413      	add	r3, r2
 8006d04:	4a43      	ldr	r2, [pc, #268]	@ (8006e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d06:	fba0 1202 	umull	r1, r2, r0, r2
 8006d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d0c:	460a      	mov	r2, r1
 8006d0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006d10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d12:	4413      	add	r3, r2
 8006d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d18:	2200      	movs	r2, #0
 8006d1a:	61bb      	str	r3, [r7, #24]
 8006d1c:	61fa      	str	r2, [r7, #28]
 8006d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006d26:	f7f9 fa73 	bl	8000210 <__aeabi_uldivmod>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	4613      	mov	r3, r2
 8006d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d32:	e053      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d34:	4b35      	ldr	r3, [pc, #212]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	099b      	lsrs	r3, r3, #6
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	617a      	str	r2, [r7, #20]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d46:	f04f 0b00 	mov.w	fp, #0
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	465b      	mov	r3, fp
 8006d4e:	f04f 0000 	mov.w	r0, #0
 8006d52:	f04f 0100 	mov.w	r1, #0
 8006d56:	0159      	lsls	r1, r3, #5
 8006d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d5c:	0150      	lsls	r0, r2, #5
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	ebb2 080a 	subs.w	r8, r2, sl
 8006d66:	eb63 090b 	sbc.w	r9, r3, fp
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8006d82:	eb63 0509 	sbc.w	r5, r3, r9
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	00eb      	lsls	r3, r5, #3
 8006d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d94:	00e2      	lsls	r2, r4, #3
 8006d96:	4614      	mov	r4, r2
 8006d98:	461d      	mov	r5, r3
 8006d9a:	eb14 030a 	adds.w	r3, r4, sl
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	eb45 030b 	adc.w	r3, r5, fp
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	f04f 0300 	mov.w	r3, #0
 8006dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006db2:	4629      	mov	r1, r5
 8006db4:	028b      	lsls	r3, r1, #10
 8006db6:	4621      	mov	r1, r4
 8006db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	028a      	lsls	r2, r1, #10
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
 8006dca:	60fa      	str	r2, [r7, #12]
 8006dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dd0:	f7f9 fa1e 	bl	8000210 <__aeabi_uldivmod>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	4613      	mov	r3, r2
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	0c1b      	lsrs	r3, r3, #16
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	3301      	adds	r3, #1
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006dec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006df6:	e002      	b.n	8006dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006df8:	4b05      	ldr	r3, [pc, #20]	@ (8006e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3740      	adds	r7, #64	@ 0x40
 8006e04:	46bd      	mov	sp, r7
 8006e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e0a:	bf00      	nop
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	00f42400 	.word	0x00f42400
 8006e14:	017d7840 	.word	0x017d7840

08006e18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	@ (8006e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	2000003c 	.word	0x2000003c

08006e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e34:	f7ff fff0 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	4b05      	ldr	r3, [pc, #20]	@ (8006e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	0a9b      	lsrs	r3, r3, #10
 8006e40:	f003 0307 	and.w	r3, r3, #7
 8006e44:	4903      	ldr	r1, [pc, #12]	@ (8006e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e46:	5ccb      	ldrb	r3, [r1, r3]
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	40023800 	.word	0x40023800
 8006e54:	0800fa38 	.word	0x0800fa38

08006e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e5c:	f7ff ffdc 	bl	8006e18 <HAL_RCC_GetHCLKFreq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b05      	ldr	r3, [pc, #20]	@ (8006e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	0b5b      	lsrs	r3, r3, #13
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	4903      	ldr	r1, [pc, #12]	@ (8006e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e6e:	5ccb      	ldrb	r3, [r1, r3]
 8006e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	40023800 	.word	0x40023800
 8006e7c:	0800fa38 	.word	0x0800fa38

08006e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	220f      	movs	r2, #15
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e90:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <HAL_RCC_GetClockConfig+0x5c>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 0203 	and.w	r2, r3, #3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8006edc <HAL_RCC_GetClockConfig+0x5c>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <HAL_RCC_GetClockConfig+0x5c>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006eb4:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <HAL_RCC_GetClockConfig+0x5c>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	08db      	lsrs	r3, r3, #3
 8006eba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ec2:	4b07      	ldr	r3, [pc, #28]	@ (8006ee0 <HAL_RCC_GetClockConfig+0x60>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 020f 	and.w	r2, r3, #15
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	601a      	str	r2, [r3, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	40023c00 	.word	0x40023c00

08006ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b088      	sub	sp, #32
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d012      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f0c:	4b69      	ldr	r3, [pc, #420]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4a68      	ldr	r2, [pc, #416]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f16:	6093      	str	r3, [r2, #8]
 8006f18:	4b66      	ldr	r3, [pc, #408]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f20:	4964      	ldr	r1, [pc, #400]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d017      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f3e:	4b5d      	ldr	r3, [pc, #372]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f4c:	4959      	ldr	r1, [pc, #356]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f5c:	d101      	bne.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d017      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f88:	494a      	ldr	r1, [pc, #296]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f98:	d101      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 808b 	beq.w	80070de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fcc:	4a39      	ldr	r2, [pc, #228]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fd4:	4b37      	ldr	r3, [pc, #220]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fdc:	60bb      	str	r3, [r7, #8]
 8006fde:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fe0:	4b35      	ldr	r3, [pc, #212]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a34      	ldr	r2, [pc, #208]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fec:	f7fc fc06 	bl	80037fc <HAL_GetTick>
 8006ff0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006ff2:	e008      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff4:	f7fc fc02 	bl	80037fc <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b64      	cmp	r3, #100	@ 0x64
 8007000:	d901      	bls.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e357      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007006:	4b2c      	ldr	r3, [pc, #176]	@ (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0f0      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007012:	4b28      	ldr	r3, [pc, #160]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800701a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d035      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	429a      	cmp	r2, r3
 800702e:	d02e      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007030:	4b20      	ldr	r3, [pc, #128]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007038:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800703a:	4b1e      	ldr	r3, [pc, #120]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800703c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800703e:	4a1d      	ldr	r2, [pc, #116]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007044:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007046:	4b1b      	ldr	r3, [pc, #108]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800704a:	4a1a      	ldr	r2, [pc, #104]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800704c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007050:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007052:	4a18      	ldr	r2, [pc, #96]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007058:	4b16      	ldr	r3, [pc, #88]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b01      	cmp	r3, #1
 8007062:	d114      	bne.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007064:	f7fc fbca 	bl	80037fc <HAL_GetTick>
 8007068:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800706a:	e00a      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800706c:	f7fc fbc6 	bl	80037fc <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	f241 3288 	movw	r2, #5000	@ 0x1388
 800707a:	4293      	cmp	r3, r2
 800707c:	d901      	bls.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e319      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007082:	4b0c      	ldr	r3, [pc, #48]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d0ee      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800709a:	d111      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800709c:	4b05      	ldr	r3, [pc, #20]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80070a8:	4b04      	ldr	r3, [pc, #16]	@ (80070bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80070aa:	400b      	ands	r3, r1
 80070ac:	4901      	ldr	r1, [pc, #4]	@ (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
 80070b2:	e00b      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80070b4:	40023800 	.word	0x40023800
 80070b8:	40007000 	.word	0x40007000
 80070bc:	0ffffcff 	.word	0x0ffffcff
 80070c0:	4baa      	ldr	r3, [pc, #680]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	4aa9      	ldr	r2, [pc, #676]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80070ca:	6093      	str	r3, [r2, #8]
 80070cc:	4ba7      	ldr	r3, [pc, #668]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d8:	49a4      	ldr	r1, [pc, #656]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d010      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070ea:	4ba0      	ldr	r3, [pc, #640]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070f0:	4a9e      	ldr	r2, [pc, #632]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070f6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80070fa:	4b9c      	ldr	r3, [pc, #624]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007104:	4999      	ldr	r1, [pc, #612]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007118:	4b94      	ldr	r3, [pc, #592]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800711e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007126:	4991      	ldr	r1, [pc, #580]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800713a:	4b8c      	ldr	r3, [pc, #560]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007140:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007148:	4988      	ldr	r1, [pc, #544]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800715c:	4b83      	ldr	r3, [pc, #524]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007162:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800716a:	4980      	ldr	r1, [pc, #512]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800717e:	4b7b      	ldr	r3, [pc, #492]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007184:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718c:	4977      	ldr	r1, [pc, #476]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071a0:	4b72      	ldr	r3, [pc, #456]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071a6:	f023 0203 	bic.w	r2, r3, #3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ae:	496f      	ldr	r1, [pc, #444]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071c2:	4b6a      	ldr	r3, [pc, #424]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c8:	f023 020c 	bic.w	r2, r3, #12
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071d0:	4966      	ldr	r1, [pc, #408]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071e4:	4b61      	ldr	r3, [pc, #388]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f2:	495e      	ldr	r1, [pc, #376]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007206:	4b59      	ldr	r3, [pc, #356]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007214:	4955      	ldr	r1, [pc, #340]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007228:	4b50      	ldr	r3, [pc, #320]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007236:	494d      	ldr	r1, [pc, #308]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800724a:	4b48      	ldr	r3, [pc, #288]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007250:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007258:	4944      	ldr	r1, [pc, #272]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800726c:	4b3f      	ldr	r3, [pc, #252]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007272:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800727a:	493c      	ldr	r1, [pc, #240]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00a      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800728e:	4b37      	ldr	r3, [pc, #220]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007294:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800729c:	4933      	ldr	r1, [pc, #204]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80072b0:	4b2e      	ldr	r3, [pc, #184]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072be:	492b      	ldr	r1, [pc, #172]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d011      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072d2:	4b26      	ldr	r3, [pc, #152]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072d8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072e0:	4922      	ldr	r1, [pc, #136]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072f0:	d101      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072f2:	2301      	movs	r3, #1
 80072f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007302:	2301      	movs	r3, #1
 8007304:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007312:	4b16      	ldr	r3, [pc, #88]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007318:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007320:	4912      	ldr	r1, [pc, #72]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00b      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007334:	4b0d      	ldr	r3, [pc, #52]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007344:	4909      	ldr	r1, [pc, #36]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007346:	4313      	orrs	r3, r2
 8007348:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d006      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 80d9 	beq.w	8007512 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007360:	4b02      	ldr	r3, [pc, #8]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a01      	ldr	r2, [pc, #4]	@ (800736c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800736a:	e001      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800736c:	40023800 	.word	0x40023800
 8007370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007372:	f7fc fa43 	bl	80037fc <HAL_GetTick>
 8007376:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007378:	e008      	b.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800737a:	f7fc fa3f 	bl	80037fc <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b64      	cmp	r3, #100	@ 0x64
 8007386:	d901      	bls.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e194      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800738c:	4b6c      	ldr	r3, [pc, #432]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f0      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0301 	and.w	r3, r3, #1
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d021      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d11d      	bne.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073ac:	4b64      	ldr	r3, [pc, #400]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073b2:	0c1b      	lsrs	r3, r3, #16
 80073b4:	f003 0303 	and.w	r3, r3, #3
 80073b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80073ba:	4b61      	ldr	r3, [pc, #388]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073c0:	0e1b      	lsrs	r3, r3, #24
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	019a      	lsls	r2, r3, #6
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	431a      	orrs	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	061b      	lsls	r3, r3, #24
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	071b      	lsls	r3, r3, #28
 80073e0:	4957      	ldr	r1, [pc, #348]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d004      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073fc:	d00a      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007406:	2b00      	cmp	r3, #0
 8007408:	d02e      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007412:	d129      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007414:	4b4a      	ldr	r3, [pc, #296]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	f003 0303 	and.w	r3, r3, #3
 8007420:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007422:	4b47      	ldr	r3, [pc, #284]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007424:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007428:	0f1b      	lsrs	r3, r3, #28
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	019a      	lsls	r2, r3, #6
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	041b      	lsls	r3, r3, #16
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	061b      	lsls	r3, r3, #24
 8007442:	431a      	orrs	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	071b      	lsls	r3, r3, #28
 8007448:	493d      	ldr	r1, [pc, #244]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007450:	4b3b      	ldr	r3, [pc, #236]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007456:	f023 021f 	bic.w	r2, r3, #31
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745e:	3b01      	subs	r3, #1
 8007460:	4937      	ldr	r1, [pc, #220]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01d      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007474:	4b32      	ldr	r3, [pc, #200]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007476:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800747a:	0e1b      	lsrs	r3, r3, #24
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007482:	4b2f      	ldr	r3, [pc, #188]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007488:	0f1b      	lsrs	r3, r3, #28
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	019a      	lsls	r2, r3, #6
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	041b      	lsls	r3, r3, #16
 800749c:	431a      	orrs	r2, r3
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	061b      	lsls	r3, r3, #24
 80074a2:	431a      	orrs	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	071b      	lsls	r3, r3, #28
 80074a8:	4925      	ldr	r1, [pc, #148]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d011      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	019a      	lsls	r2, r3, #6
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	041b      	lsls	r3, r3, #16
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	061b      	lsls	r3, r3, #24
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	071b      	lsls	r3, r3, #28
 80074d8:	4919      	ldr	r1, [pc, #100]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074e0:	4b17      	ldr	r3, [pc, #92]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a16      	ldr	r2, [pc, #88]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ec:	f7fc f986 	bl	80037fc <HAL_GetTick>
 80074f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074f2:	e008      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074f4:	f7fc f982 	bl	80037fc <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	2b64      	cmp	r3, #100	@ 0x64
 8007500:	d901      	bls.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e0d7      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007506:	4b0e      	ldr	r3, [pc, #56]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0f0      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b01      	cmp	r3, #1
 8007516:	f040 80cd 	bne.w	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800751a:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a08      	ldr	r2, [pc, #32]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007526:	f7fc f969 	bl	80037fc <HAL_GetTick>
 800752a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800752c:	e00a      	b.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800752e:	f7fc f965 	bl	80037fc <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b64      	cmp	r3, #100	@ 0x64
 800753a:	d903      	bls.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e0ba      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007540:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007544:	4b5e      	ldr	r3, [pc, #376]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800754c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007550:	d0ed      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d009      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800756e:	2b00      	cmp	r3, #0
 8007570:	d02e      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d12a      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800757a:	4b51      	ldr	r3, [pc, #324]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007580:	0c1b      	lsrs	r3, r3, #16
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007588:	4b4d      	ldr	r3, [pc, #308]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758e:	0f1b      	lsrs	r3, r3, #28
 8007590:	f003 0307 	and.w	r3, r3, #7
 8007594:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	019a      	lsls	r2, r3, #6
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	431a      	orrs	r2, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	061b      	lsls	r3, r3, #24
 80075a8:	431a      	orrs	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	071b      	lsls	r3, r3, #28
 80075ae:	4944      	ldr	r1, [pc, #272]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075b6:	4b42      	ldr	r3, [pc, #264]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075bc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c4:	3b01      	subs	r3, #1
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	493d      	ldr	r1, [pc, #244]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d022      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075e4:	d11d      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075e6:	4b36      	ldr	r3, [pc, #216]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075f4:	4b32      	ldr	r3, [pc, #200]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fa:	0f1b      	lsrs	r3, r3, #28
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	019a      	lsls	r2, r3, #6
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	041b      	lsls	r3, r3, #16
 800760e:	431a      	orrs	r2, r3
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	061b      	lsls	r3, r3, #24
 8007614:	431a      	orrs	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	071b      	lsls	r3, r3, #28
 800761a:	4929      	ldr	r1, [pc, #164]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800761c:	4313      	orrs	r3, r2
 800761e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0308 	and.w	r3, r3, #8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d028      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800762e:	4b24      	ldr	r3, [pc, #144]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007634:	0e1b      	lsrs	r3, r3, #24
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800763c:	4b20      	ldr	r3, [pc, #128]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007642:	0c1b      	lsrs	r3, r3, #16
 8007644:	f003 0303 	and.w	r3, r3, #3
 8007648:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	019a      	lsls	r2, r3, #6
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	431a      	orrs	r2, r3
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	061b      	lsls	r3, r3, #24
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	071b      	lsls	r3, r3, #28
 8007662:	4917      	ldr	r1, [pc, #92]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007664:	4313      	orrs	r3, r2
 8007666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800766a:	4b15      	ldr	r3, [pc, #84]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800766c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	4911      	ldr	r1, [pc, #68]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007680:	4b0f      	ldr	r3, [pc, #60]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a0e      	ldr	r2, [pc, #56]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800768a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800768c:	f7fc f8b6 	bl	80037fc <HAL_GetTick>
 8007690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007692:	e008      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007694:	f7fc f8b2 	bl	80037fc <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b64      	cmp	r3, #100	@ 0x64
 80076a0:	d901      	bls.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e007      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80076a6:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076b2:	d1ef      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40023800 	.word	0x40023800

080076c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e071      	b.n	80077be <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7f5b      	ldrb	r3, [r3, #29]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fa fb46 	bl	8001d7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f003 0310 	and.w	r3, r3, #16
 8007700:	2b10      	cmp	r3, #16
 8007702:	d053      	beq.n	80077ac <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	22ca      	movs	r2, #202	@ 0xca
 800770a:	625a      	str	r2, [r3, #36]	@ 0x24
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2253      	movs	r2, #83	@ 0x53
 8007712:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fac9 	bl	8007cac <RTC_EnterInitMode>
 800771a:	4603      	mov	r3, r0
 800771c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d12a      	bne.n	800777a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6899      	ldr	r1, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	4b26      	ldr	r3, [pc, #152]	@ (80077c8 <HAL_RTC_Init+0x104>)
 8007730:	400b      	ands	r3, r1
 8007732:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6899      	ldr	r1, [r3, #8]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	68d2      	ldr	r2, [r2, #12]
 800775a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6919      	ldr	r1, [r3, #16]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	041a      	lsls	r2, r3, #16
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	430a      	orrs	r2, r1
 800776e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fad2 	bl	8007d1a <RTC_ExitInitMode>
 8007776:	4603      	mov	r3, r0
 8007778:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d110      	bne.n	80077a2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0208 	bic.w	r2, r2, #8
 800778e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	430a      	orrs	r2, r1
 80077a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	22ff      	movs	r2, #255	@ 0xff
 80077a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80077aa:	e001      	b.n	80077b0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	ff8fffbf 	.word	0xff8fffbf

080077cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077cc:	b590      	push	{r4, r7, lr}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	7f1b      	ldrb	r3, [r3, #28]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_RTC_SetTime+0x1c>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e085      	b.n	80078f4 <HAL_RTC_SetTime+0x128>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2202      	movs	r2, #2
 80077f2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d126      	bne.n	8007848 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 faa6 	bl	8007d64 <RTC_ByteToBcd2>
 8007818:	4603      	mov	r3, r0
 800781a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	785b      	ldrb	r3, [r3, #1]
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fa9f 	bl	8007d64 <RTC_ByteToBcd2>
 8007826:	4603      	mov	r3, r0
 8007828:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800782a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	789b      	ldrb	r3, [r3, #2]
 8007830:	4618      	mov	r0, r3
 8007832:	f000 fa97 	bl	8007d64 <RTC_ByteToBcd2>
 8007836:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007838:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	78db      	ldrb	r3, [r3, #3]
 8007840:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]
 8007846:	e018      	b.n	800787a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d102      	bne.n	800785c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2200      	movs	r2, #0
 800785a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	785b      	ldrb	r3, [r3, #1]
 8007866:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007868:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800786e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	78db      	ldrb	r3, [r3, #3]
 8007874:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	22ca      	movs	r2, #202	@ 0xca
 8007880:	625a      	str	r2, [r3, #36]	@ 0x24
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2253      	movs	r2, #83	@ 0x53
 8007888:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 fa0e 	bl	8007cac <RTC_EnterInitMode>
 8007890:	4603      	mov	r3, r0
 8007892:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007894:	7cfb      	ldrb	r3, [r7, #19]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d11e      	bne.n	80078d8 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	6979      	ldr	r1, [r7, #20]
 80078a0:	4b16      	ldr	r3, [pc, #88]	@ (80078fc <HAL_RTC_SetTime+0x130>)
 80078a2:	400b      	ands	r3, r1
 80078a4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80078b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6899      	ldr	r1, [r3, #8]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	68da      	ldr	r2, [r3, #12]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 fa23 	bl	8007d1a <RTC_ExitInitMode>
 80078d4:	4603      	mov	r3, r0
 80078d6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80078d8:	7cfb      	ldrb	r3, [r7, #19]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	22ff      	movs	r2, #255	@ 0xff
 80078ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	771a      	strb	r2, [r3, #28]

  return status;
 80078f2:	7cfb      	ldrb	r3, [r7, #19]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd90      	pop	{r4, r7, pc}
 80078fc:	007f7f7f 	.word	0x007f7f7f

08007900 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007900:	b590      	push	{r4, r7, lr}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	7f1b      	ldrb	r3, [r3, #28]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_RTC_SetDate+0x1c>
 8007918:	2302      	movs	r3, #2
 800791a:	e06f      	b.n	80079fc <HAL_RTC_SetDate+0xfc>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2202      	movs	r2, #2
 8007926:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10e      	bne.n	800794c <HAL_RTC_SetDate+0x4c>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	785b      	ldrb	r3, [r3, #1]
 800793e:	f023 0310 	bic.w	r3, r3, #16
 8007942:	b2db      	uxtb	r3, r3
 8007944:	330a      	adds	r3, #10
 8007946:	b2da      	uxtb	r2, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d11c      	bne.n	800798c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	78db      	ldrb	r3, [r3, #3]
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fa04 	bl	8007d64 <RTC_ByteToBcd2>
 800795c:	4603      	mov	r3, r0
 800795e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f9fd 	bl	8007d64 <RTC_ByteToBcd2>
 800796a:	4603      	mov	r3, r0
 800796c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800796e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	789b      	ldrb	r3, [r3, #2]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f9f5 	bl	8007d64 <RTC_ByteToBcd2>
 800797a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800797c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	e00e      	b.n	80079aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	78db      	ldrb	r3, [r3, #3]
 8007990:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	785b      	ldrb	r3, [r3, #1]
 8007996:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007998:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800799e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	22ca      	movs	r2, #202	@ 0xca
 80079b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2253      	movs	r2, #83	@ 0x53
 80079b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f976 	bl	8007cac <RTC_EnterInitMode>
 80079c0:	4603      	mov	r3, r0
 80079c2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80079c4:	7cfb      	ldrb	r3, [r7, #19]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	6979      	ldr	r1, [r7, #20]
 80079d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007a04 <HAL_RTC_SetDate+0x104>)
 80079d2:	400b      	ands	r3, r1
 80079d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f99f 	bl	8007d1a <RTC_ExitInitMode>
 80079dc:	4603      	mov	r3, r0
 80079de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80079e0:	7cfb      	ldrb	r3, [r7, #19]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d102      	bne.n	80079ec <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	22ff      	movs	r2, #255	@ 0xff
 80079f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	771a      	strb	r2, [r3, #28]

  return status;
 80079fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd90      	pop	{r4, r7, pc}
 8007a04:	00ffff3f 	.word	0x00ffff3f

08007a08 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007a08:	b590      	push	{r4, r7, lr}
 8007a0a:	b089      	sub	sp, #36	@ 0x24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	7f1b      	ldrb	r3, [r3, #28]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_RTC_SetAlarm+0x24>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e113      	b.n	8007c54 <HAL_RTC_SetAlarm+0x24c>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2202      	movs	r2, #2
 8007a36:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d137      	bne.n	8007aae <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d102      	bne.n	8007a52 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f984 	bl	8007d64 <RTC_ByteToBcd2>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 f97d 	bl	8007d64 <RTC_ByteToBcd2>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007a6e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	789b      	ldrb	r3, [r3, #2]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f975 	bl	8007d64 <RTC_ByteToBcd2>
 8007a7a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007a7c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	78db      	ldrb	r3, [r3, #3]
 8007a84:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8007a86:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f967 	bl	8007d64 <RTC_ByteToBcd2>
 8007a96:	4603      	mov	r3, r0
 8007a98:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8007a9a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8007aa2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	61fb      	str	r3, [r7, #28]
 8007aac:	e023      	b.n	8007af6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d102      	bne.n	8007ac2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007ace:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8007ad4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	78db      	ldrb	r3, [r3, #3]
 8007ada:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8007adc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ae4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8007ae6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8007aec:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8007afe:	4313      	orrs	r3, r2
 8007b00:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	22ca      	movs	r2, #202	@ 0xca
 8007b08:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2253      	movs	r2, #83	@ 0x53
 8007b10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b1a:	d148      	bne.n	8007bae <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b2a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b3a:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8007b4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b4e:	f7fb fe55 	bl	80037fc <HAL_GetTick>
 8007b52:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007b54:	e013      	b.n	8007b7e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b56:	f7fb fe51 	bl	80037fc <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b64:	d90b      	bls.n	8007b7e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	22ff      	movs	r2, #255	@ 0xff
 8007b6c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2203      	movs	r2, #3
 8007b72:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e06a      	b.n	8007c54 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0e4      	beq.n	8007b56 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007baa:	609a      	str	r2, [r3, #8]
 8007bac:	e047      	b.n	8007c3e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007bbc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bcc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8007bde:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007be0:	f7fb fe0c 	bl	80037fc <HAL_GetTick>
 8007be4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007be6:	e013      	b.n	8007c10 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007be8:	f7fb fe08 	bl	80037fc <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bf6:	d90b      	bls.n	8007c10 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	22ff      	movs	r2, #255	@ 0xff
 8007bfe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2203      	movs	r2, #3
 8007c04:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e021      	b.n	8007c54 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0e4      	beq.n	8007be8 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	22ff      	movs	r2, #255	@ 0xff
 8007c44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3724      	adds	r7, #36	@ 0x24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd90      	pop	{r4, r7, pc}

08007c5c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007c76:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c78:	f7fb fdc0 	bl	80037fc <HAL_GetTick>
 8007c7c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c7e:	e009      	b.n	8007c94 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c80:	f7fb fdbc 	bl	80037fc <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c8e:	d901      	bls.n	8007c94 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e007      	b.n	8007ca4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0ee      	beq.n	8007c80 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d122      	bne.n	8007d10 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68da      	ldr	r2, [r3, #12]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007cd8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007cda:	f7fb fd8f 	bl	80037fc <HAL_GetTick>
 8007cde:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007ce0:	e00c      	b.n	8007cfc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ce2:	f7fb fd8b 	bl	80037fc <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cf0:	d904      	bls.n	8007cfc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <RTC_EnterInitMode+0x64>
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d1e8      	bne.n	8007ce2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d34:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f003 0320 	and.w	r3, r3, #32
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff89 	bl	8007c5c <HAL_RTC_WaitForSynchro>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2204      	movs	r2, #4
 8007d54:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007d72:	e005      	b.n	8007d80 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3301      	adds	r3, #1
 8007d78:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	3b0a      	subs	r3, #10
 8007d7e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	2b09      	cmp	r3, #9
 8007d84:	d8f6      	bhi.n	8007d74 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	b2db      	uxtb	r3, r3
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b087      	sub	sp, #28
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007dac:	2300      	movs	r3, #0
 8007dae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	7f1b      	ldrb	r3, [r3, #28]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d101      	bne.n	8007dbc <HAL_RTCEx_SetTimeStamp+0x1c>
 8007db8:	2302      	movs	r3, #2
 8007dba:	e050      	b.n	8007e5e <HAL_RTCEx_SetTimeStamp+0xbe>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 0206 	bic.w	r2, r2, #6
 8007dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	4b1f      	ldr	r3, [pc, #124]	@ (8007e6c <HAL_RTCEx_SetTimeStamp+0xcc>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	22ca      	movs	r2, #202	@ 0xca
 8007e02:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2253      	movs	r2, #83	@ 0x53
 8007e0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68db      	ldr	r3, [r3, #12]
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8007e24:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8007e36:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689a      	ldr	r2, [r3, #8]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e46:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	22ff      	movs	r2, #255	@ 0xff
 8007e4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2201      	movs	r2, #1
 8007e54:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	fffff7f7 	.word	0xfffff7f7

08007e70 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e025      	b.n	8007ed0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d106      	bne.n	8007e9e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7f8 fded 	bl	8000a78 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3304      	adds	r3, #4
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f001 fa33 	bl	800931c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6818      	ldr	r0, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	6839      	ldr	r1, [r7, #0]
 8007ec2:	f001 fa87 	bl	80093d4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007eea:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007eec:	7dfb      	ldrb	r3, [r7, #23]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d101      	bne.n	8007ef6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e021      	b.n	8007f3a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d002      	beq.n	8007f02 <HAL_SDRAM_SendCommand+0x2a>
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	d118      	bne.n	8007f34 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f001 fac8 	bl	80094a8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d104      	bne.n	8007f2a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2205      	movs	r2, #5
 8007f24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007f28:	e006      	b.n	8007f38 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007f32:	e001      	b.n	8007f38 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d101      	bne.n	8007f5c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e016      	b.n	8007f8a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d10f      	bne.n	8007f88 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f001 faba 	bl	80094f0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e000      	b.n	8007f8a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e09d      	b.n	80080e0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d108      	bne.n	8007fbe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fb4:	d009      	beq.n	8007fca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	61da      	str	r2, [r3, #28]
 8007fbc:	e005      	b.n	8007fca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d106      	bne.n	8007fea <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7f9 ff35 	bl	8001e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008000:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800800a:	d902      	bls.n	8008012 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	e002      	b.n	8008018 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008016:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008020:	d007      	beq.n	8008032 <HAL_SPI_Init+0xa0>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800802a:	d002      	beq.n	8008032 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800806a:	431a      	orrs	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008074:	ea42 0103 	orr.w	r1, r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	0c1b      	lsrs	r3, r3, #16
 800808e:	f003 0204 	and.w	r2, r3, #4
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80080ae:	ea42 0103 	orr.w	r1, r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	69da      	ldr	r2, [r3, #28]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e049      	b.n	800818e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7fb f8f8 	bl	8003304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f000 fac0 	bl	80086ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d001      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e054      	b.n	800825a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a26      	ldr	r2, [pc, #152]	@ (8008268 <HAL_TIM_Base_Start_IT+0xd0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d022      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081da:	d01d      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a22      	ldr	r2, [pc, #136]	@ (800826c <HAL_TIM_Base_Start_IT+0xd4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d018      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a21      	ldr	r2, [pc, #132]	@ (8008270 <HAL_TIM_Base_Start_IT+0xd8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d013      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1f      	ldr	r2, [pc, #124]	@ (8008274 <HAL_TIM_Base_Start_IT+0xdc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00e      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008278 <HAL_TIM_Base_Start_IT+0xe0>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d009      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a1c      	ldr	r2, [pc, #112]	@ (800827c <HAL_TIM_Base_Start_IT+0xe4>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d004      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a1b      	ldr	r2, [pc, #108]	@ (8008280 <HAL_TIM_Base_Start_IT+0xe8>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d115      	bne.n	8008244 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	4b19      	ldr	r3, [pc, #100]	@ (8008284 <HAL_TIM_Base_Start_IT+0xec>)
 8008220:	4013      	ands	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b06      	cmp	r3, #6
 8008228:	d015      	beq.n	8008256 <HAL_TIM_Base_Start_IT+0xbe>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008230:	d011      	beq.n	8008256 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f042 0201 	orr.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008242:	e008      	b.n	8008256 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e000      	b.n	8008258 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	40010000 	.word	0x40010000
 800826c:	40000400 	.word	0x40000400
 8008270:	40000800 	.word	0x40000800
 8008274:	40000c00 	.word	0x40000c00
 8008278:	40010400 	.word	0x40010400
 800827c:	40014000 	.word	0x40014000
 8008280:	40001800 	.word	0x40001800
 8008284:	00010007 	.word	0x00010007

08008288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b02      	cmp	r3, #2
 800829c:	d122      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d11b      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0202 	mvn.w	r2, #2
 80082b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f9d0 	bl	8008670 <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f9c2 	bl	800865c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9d3 	bl	8008684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d122      	bne.n	8008338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d11b      	bne.n	8008338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0204 	mvn.w	r2, #4
 8008308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f9a6 	bl	8008670 <HAL_TIM_IC_CaptureCallback>
 8008324:	e005      	b.n	8008332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f998 	bl	800865c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f9a9 	bl	8008684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b08      	cmp	r3, #8
 8008344:	d122      	bne.n	800838c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d11b      	bne.n	800838c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0208 	mvn.w	r2, #8
 800835c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2204      	movs	r2, #4
 8008362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f97c 	bl	8008670 <HAL_TIM_IC_CaptureCallback>
 8008378:	e005      	b.n	8008386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f96e 	bl	800865c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f97f 	bl	8008684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b10      	cmp	r3, #16
 8008398:	d122      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d11b      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0210 	mvn.w	r2, #16
 80083b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2208      	movs	r2, #8
 80083b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f952 	bl	8008670 <HAL_TIM_IC_CaptureCallback>
 80083cc:	e005      	b.n	80083da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f944 	bl	800865c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f955 	bl	8008684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d10e      	bne.n	800840c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d107      	bne.n	800840c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0201 	mvn.w	r2, #1
 8008404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7f9 fbfc 	bl	8001c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008416:	2b80      	cmp	r3, #128	@ 0x80
 8008418:	d10e      	bne.n	8008438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008424:	2b80      	cmp	r3, #128	@ 0x80
 8008426:	d107      	bne.n	8008438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fb0c 	bl	8008a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008446:	d10e      	bne.n	8008466 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008452:	2b80      	cmp	r3, #128	@ 0x80
 8008454:	d107      	bne.n	8008466 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800845e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 faff 	bl	8008a64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008470:	2b40      	cmp	r3, #64	@ 0x40
 8008472:	d10e      	bne.n	8008492 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847e:	2b40      	cmp	r3, #64	@ 0x40
 8008480:	d107      	bne.n	8008492 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800848a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f903 	bl	8008698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b20      	cmp	r3, #32
 800849e:	d10e      	bne.n	80084be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	f003 0320 	and.w	r3, r3, #32
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d107      	bne.n	80084be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f06f 0220 	mvn.w	r2, #32
 80084b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fabf 	bl	8008a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084be:	bf00      	nop
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d101      	bne.n	80084e4 <HAL_TIM_ConfigClockSource+0x1c>
 80084e0:	2302      	movs	r3, #2
 80084e2:	e0b4      	b.n	800864e <HAL_TIM_ConfigClockSource+0x186>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2202      	movs	r2, #2
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	4b56      	ldr	r3, [pc, #344]	@ (8008658 <HAL_TIM_ConfigClockSource+0x190>)
 8008500:	4013      	ands	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800850a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800851c:	d03e      	beq.n	800859c <HAL_TIM_ConfigClockSource+0xd4>
 800851e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008522:	f200 8087 	bhi.w	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852a:	f000 8086 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x172>
 800852e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008532:	d87f      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008534:	2b70      	cmp	r3, #112	@ 0x70
 8008536:	d01a      	beq.n	800856e <HAL_TIM_ConfigClockSource+0xa6>
 8008538:	2b70      	cmp	r3, #112	@ 0x70
 800853a:	d87b      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 800853c:	2b60      	cmp	r3, #96	@ 0x60
 800853e:	d050      	beq.n	80085e2 <HAL_TIM_ConfigClockSource+0x11a>
 8008540:	2b60      	cmp	r3, #96	@ 0x60
 8008542:	d877      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008544:	2b50      	cmp	r3, #80	@ 0x50
 8008546:	d03c      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0xfa>
 8008548:	2b50      	cmp	r3, #80	@ 0x50
 800854a:	d873      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 800854c:	2b40      	cmp	r3, #64	@ 0x40
 800854e:	d058      	beq.n	8008602 <HAL_TIM_ConfigClockSource+0x13a>
 8008550:	2b40      	cmp	r3, #64	@ 0x40
 8008552:	d86f      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008554:	2b30      	cmp	r3, #48	@ 0x30
 8008556:	d064      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x15a>
 8008558:	2b30      	cmp	r3, #48	@ 0x30
 800855a:	d86b      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 800855c:	2b20      	cmp	r3, #32
 800855e:	d060      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x15a>
 8008560:	2b20      	cmp	r3, #32
 8008562:	d867      	bhi.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d05c      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x15a>
 8008568:	2b10      	cmp	r3, #16
 800856a:	d05a      	beq.n	8008622 <HAL_TIM_ConfigClockSource+0x15a>
 800856c:	e062      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800857e:	f000 f9af 	bl	80088e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008590:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	609a      	str	r2, [r3, #8]
      break;
 800859a:	e04f      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085ac:	f000 f998 	bl	80088e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085be:	609a      	str	r2, [r3, #8]
      break;
 80085c0:	e03c      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ce:	461a      	mov	r2, r3
 80085d0:	f000 f90c 	bl	80087ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2150      	movs	r1, #80	@ 0x50
 80085da:	4618      	mov	r0, r3
 80085dc:	f000 f965 	bl	80088aa <TIM_ITRx_SetConfig>
      break;
 80085e0:	e02c      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ee:	461a      	mov	r2, r3
 80085f0:	f000 f92b 	bl	800884a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2160      	movs	r1, #96	@ 0x60
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f955 	bl	80088aa <TIM_ITRx_SetConfig>
      break;
 8008600:	e01c      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800860e:	461a      	mov	r2, r3
 8008610:	f000 f8ec 	bl	80087ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2140      	movs	r1, #64	@ 0x40
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f945 	bl	80088aa <TIM_ITRx_SetConfig>
      break;
 8008620:	e00c      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f000 f93c 	bl	80088aa <TIM_ITRx_SetConfig>
      break;
 8008632:	e003      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
      break;
 8008638:	e000      	b.n	800863c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800863a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	fffeff88 	.word	0xfffeff88

0800865c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a40      	ldr	r2, [pc, #256]	@ (80087c0 <TIM_Base_SetConfig+0x114>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d013      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ca:	d00f      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a3d      	ldr	r2, [pc, #244]	@ (80087c4 <TIM_Base_SetConfig+0x118>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00b      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a3c      	ldr	r2, [pc, #240]	@ (80087c8 <TIM_Base_SetConfig+0x11c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d007      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a3b      	ldr	r2, [pc, #236]	@ (80087cc <TIM_Base_SetConfig+0x120>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d003      	beq.n	80086ec <TIM_Base_SetConfig+0x40>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a3a      	ldr	r2, [pc, #232]	@ (80087d0 <TIM_Base_SetConfig+0x124>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d108      	bne.n	80086fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a2f      	ldr	r2, [pc, #188]	@ (80087c0 <TIM_Base_SetConfig+0x114>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d02b      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870c:	d027      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a2c      	ldr	r2, [pc, #176]	@ (80087c4 <TIM_Base_SetConfig+0x118>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d023      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a2b      	ldr	r2, [pc, #172]	@ (80087c8 <TIM_Base_SetConfig+0x11c>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d01f      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a2a      	ldr	r2, [pc, #168]	@ (80087cc <TIM_Base_SetConfig+0x120>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d01b      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a29      	ldr	r2, [pc, #164]	@ (80087d0 <TIM_Base_SetConfig+0x124>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d017      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a28      	ldr	r2, [pc, #160]	@ (80087d4 <TIM_Base_SetConfig+0x128>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a27      	ldr	r2, [pc, #156]	@ (80087d8 <TIM_Base_SetConfig+0x12c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00f      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a26      	ldr	r2, [pc, #152]	@ (80087dc <TIM_Base_SetConfig+0x130>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00b      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a25      	ldr	r2, [pc, #148]	@ (80087e0 <TIM_Base_SetConfig+0x134>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d007      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a24      	ldr	r2, [pc, #144]	@ (80087e4 <TIM_Base_SetConfig+0x138>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d003      	beq.n	800875e <TIM_Base_SetConfig+0xb2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a23      	ldr	r2, [pc, #140]	@ (80087e8 <TIM_Base_SetConfig+0x13c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d108      	bne.n	8008770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a0a      	ldr	r2, [pc, #40]	@ (80087c0 <TIM_Base_SetConfig+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d003      	beq.n	80087a4 <TIM_Base_SetConfig+0xf8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a0c      	ldr	r2, [pc, #48]	@ (80087d0 <TIM_Base_SetConfig+0x124>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d103      	bne.n	80087ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	691a      	ldr	r2, [r3, #16]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	615a      	str	r2, [r3, #20]
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	40010000 	.word	0x40010000
 80087c4:	40000400 	.word	0x40000400
 80087c8:	40000800 	.word	0x40000800
 80087cc:	40000c00 	.word	0x40000c00
 80087d0:	40010400 	.word	0x40010400
 80087d4:	40014000 	.word	0x40014000
 80087d8:	40014400 	.word	0x40014400
 80087dc:	40014800 	.word	0x40014800
 80087e0:	40001800 	.word	0x40001800
 80087e4:	40001c00 	.word	0x40001c00
 80087e8:	40002000 	.word	0x40002000

080087ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b087      	sub	sp, #28
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	6a1b      	ldr	r3, [r3, #32]
 80087fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	f023 0201 	bic.w	r2, r3, #1
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	693a      	ldr	r2, [r7, #16]
 800881e:	4313      	orrs	r3, r2
 8008820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f023 030a 	bic.w	r3, r3, #10
 8008828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	621a      	str	r2, [r3, #32]
}
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800884a:	b480      	push	{r7}
 800884c:	b087      	sub	sp, #28
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f023 0210 	bic.w	r2, r3, #16
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	031b      	lsls	r3, r3, #12
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	011b      	lsls	r3, r3, #4
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4313      	orrs	r3, r2
 8008890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	621a      	str	r2, [r3, #32]
}
 800889e:	bf00      	nop
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	f043 0307 	orr.w	r3, r3, #7
 80088cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	609a      	str	r2, [r3, #8]
}
 80088d4:	bf00      	nop
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	021a      	lsls	r2, r3, #8
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	431a      	orrs	r2, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	4313      	orrs	r3, r2
 8008908:	697a      	ldr	r2, [r7, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	609a      	str	r2, [r3, #8]
}
 8008914:	bf00      	nop
 8008916:	371c      	adds	r7, #28
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008930:	2b01      	cmp	r3, #1
 8008932:	d101      	bne.n	8008938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008934:	2302      	movs	r3, #2
 8008936:	e06d      	b.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2202      	movs	r2, #2
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a30      	ldr	r2, [pc, #192]	@ (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2f      	ldr	r2, [pc, #188]	@ (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d108      	bne.n	800897e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008972:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008984:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a20      	ldr	r2, [pc, #128]	@ (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d022      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089aa:	d01d      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d018      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a1c      	ldr	r2, [pc, #112]	@ (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d013      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00e      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a15      	ldr	r2, [pc, #84]	@ (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d009      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a16      	ldr	r2, [pc, #88]	@ (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d004      	beq.n	80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a15      	ldr	r2, [pc, #84]	@ (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d10c      	bne.n	8008a02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40010400 	.word	0x40010400
 8008a28:	40000400 	.word	0x40000400
 8008a2c:	40000800 	.word	0x40000800
 8008a30:	40000c00 	.word	0x40000c00
 8008a34:	40014000 	.word	0x40014000
 8008a38:	40001800 	.word	0x40001800

08008a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e040      	b.n	8008b0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f7fa fd54 	bl	8003548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2224      	movs	r2, #36	@ 0x24
 8008aa4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0201 	bic.w	r2, r2, #1
 8008ab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f82c 	bl	8008b14 <UART_SetConfig>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e022      	b.n	8008b0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fa84 	bl	8008fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f042 0201 	orr.w	r2, r2, #1
 8008b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb0b 	bl	8009120 <UART_CheckIdleState>
 8008b0a:	4603      	mov	r3, r0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4ba6      	ldr	r3, [pc, #664]	@ (8008dd8 <UART_SetConfig+0x2c4>)
 8008b40:	4013      	ands	r3, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	6979      	ldr	r1, [r7, #20]
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a94      	ldr	r2, [pc, #592]	@ (8008ddc <UART_SetConfig+0x2c8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d120      	bne.n	8008bd2 <UART_SetConfig+0xbe>
 8008b90:	4b93      	ldr	r3, [pc, #588]	@ (8008de0 <UART_SetConfig+0x2cc>)
 8008b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d816      	bhi.n	8008bcc <UART_SetConfig+0xb8>
 8008b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <UART_SetConfig+0x90>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bbb 	.word	0x08008bbb
 8008bb0:	08008bc7 	.word	0x08008bc7
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	77fb      	strb	r3, [r7, #31]
 8008bb8:	e150      	b.n	8008e5c <UART_SetConfig+0x348>
 8008bba:	2302      	movs	r3, #2
 8008bbc:	77fb      	strb	r3, [r7, #31]
 8008bbe:	e14d      	b.n	8008e5c <UART_SetConfig+0x348>
 8008bc0:	2304      	movs	r3, #4
 8008bc2:	77fb      	strb	r3, [r7, #31]
 8008bc4:	e14a      	b.n	8008e5c <UART_SetConfig+0x348>
 8008bc6:	2308      	movs	r3, #8
 8008bc8:	77fb      	strb	r3, [r7, #31]
 8008bca:	e147      	b.n	8008e5c <UART_SetConfig+0x348>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	77fb      	strb	r3, [r7, #31]
 8008bd0:	e144      	b.n	8008e5c <UART_SetConfig+0x348>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a83      	ldr	r2, [pc, #524]	@ (8008de4 <UART_SetConfig+0x2d0>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d132      	bne.n	8008c42 <UART_SetConfig+0x12e>
 8008bdc:	4b80      	ldr	r3, [pc, #512]	@ (8008de0 <UART_SetConfig+0x2cc>)
 8008bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be2:	f003 030c 	and.w	r3, r3, #12
 8008be6:	2b0c      	cmp	r3, #12
 8008be8:	d828      	bhi.n	8008c3c <UART_SetConfig+0x128>
 8008bea:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf0 <UART_SetConfig+0xdc>)
 8008bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf0:	08008c25 	.word	0x08008c25
 8008bf4:	08008c3d 	.word	0x08008c3d
 8008bf8:	08008c3d 	.word	0x08008c3d
 8008bfc:	08008c3d 	.word	0x08008c3d
 8008c00:	08008c31 	.word	0x08008c31
 8008c04:	08008c3d 	.word	0x08008c3d
 8008c08:	08008c3d 	.word	0x08008c3d
 8008c0c:	08008c3d 	.word	0x08008c3d
 8008c10:	08008c2b 	.word	0x08008c2b
 8008c14:	08008c3d 	.word	0x08008c3d
 8008c18:	08008c3d 	.word	0x08008c3d
 8008c1c:	08008c3d 	.word	0x08008c3d
 8008c20:	08008c37 	.word	0x08008c37
 8008c24:	2300      	movs	r3, #0
 8008c26:	77fb      	strb	r3, [r7, #31]
 8008c28:	e118      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	77fb      	strb	r3, [r7, #31]
 8008c2e:	e115      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c30:	2304      	movs	r3, #4
 8008c32:	77fb      	strb	r3, [r7, #31]
 8008c34:	e112      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c36:	2308      	movs	r3, #8
 8008c38:	77fb      	strb	r3, [r7, #31]
 8008c3a:	e10f      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c3c:	2310      	movs	r3, #16
 8008c3e:	77fb      	strb	r3, [r7, #31]
 8008c40:	e10c      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a68      	ldr	r2, [pc, #416]	@ (8008de8 <UART_SetConfig+0x2d4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d120      	bne.n	8008c8e <UART_SetConfig+0x17a>
 8008c4c:	4b64      	ldr	r3, [pc, #400]	@ (8008de0 <UART_SetConfig+0x2cc>)
 8008c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c52:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c56:	2b30      	cmp	r3, #48	@ 0x30
 8008c58:	d013      	beq.n	8008c82 <UART_SetConfig+0x16e>
 8008c5a:	2b30      	cmp	r3, #48	@ 0x30
 8008c5c:	d814      	bhi.n	8008c88 <UART_SetConfig+0x174>
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	d009      	beq.n	8008c76 <UART_SetConfig+0x162>
 8008c62:	2b20      	cmp	r3, #32
 8008c64:	d810      	bhi.n	8008c88 <UART_SetConfig+0x174>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <UART_SetConfig+0x15c>
 8008c6a:	2b10      	cmp	r3, #16
 8008c6c:	d006      	beq.n	8008c7c <UART_SetConfig+0x168>
 8008c6e:	e00b      	b.n	8008c88 <UART_SetConfig+0x174>
 8008c70:	2300      	movs	r3, #0
 8008c72:	77fb      	strb	r3, [r7, #31]
 8008c74:	e0f2      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c76:	2302      	movs	r3, #2
 8008c78:	77fb      	strb	r3, [r7, #31]
 8008c7a:	e0ef      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c7c:	2304      	movs	r3, #4
 8008c7e:	77fb      	strb	r3, [r7, #31]
 8008c80:	e0ec      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c82:	2308      	movs	r3, #8
 8008c84:	77fb      	strb	r3, [r7, #31]
 8008c86:	e0e9      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c88:	2310      	movs	r3, #16
 8008c8a:	77fb      	strb	r3, [r7, #31]
 8008c8c:	e0e6      	b.n	8008e5c <UART_SetConfig+0x348>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a56      	ldr	r2, [pc, #344]	@ (8008dec <UART_SetConfig+0x2d8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d120      	bne.n	8008cda <UART_SetConfig+0x1c6>
 8008c98:	4b51      	ldr	r3, [pc, #324]	@ (8008de0 <UART_SetConfig+0x2cc>)
 8008c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008ca2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ca4:	d013      	beq.n	8008cce <UART_SetConfig+0x1ba>
 8008ca6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ca8:	d814      	bhi.n	8008cd4 <UART_SetConfig+0x1c0>
 8008caa:	2b80      	cmp	r3, #128	@ 0x80
 8008cac:	d009      	beq.n	8008cc2 <UART_SetConfig+0x1ae>
 8008cae:	2b80      	cmp	r3, #128	@ 0x80
 8008cb0:	d810      	bhi.n	8008cd4 <UART_SetConfig+0x1c0>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <UART_SetConfig+0x1a8>
 8008cb6:	2b40      	cmp	r3, #64	@ 0x40
 8008cb8:	d006      	beq.n	8008cc8 <UART_SetConfig+0x1b4>
 8008cba:	e00b      	b.n	8008cd4 <UART_SetConfig+0x1c0>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	77fb      	strb	r3, [r7, #31]
 8008cc0:	e0cc      	b.n	8008e5c <UART_SetConfig+0x348>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	77fb      	strb	r3, [r7, #31]
 8008cc6:	e0c9      	b.n	8008e5c <UART_SetConfig+0x348>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	77fb      	strb	r3, [r7, #31]
 8008ccc:	e0c6      	b.n	8008e5c <UART_SetConfig+0x348>
 8008cce:	2308      	movs	r3, #8
 8008cd0:	77fb      	strb	r3, [r7, #31]
 8008cd2:	e0c3      	b.n	8008e5c <UART_SetConfig+0x348>
 8008cd4:	2310      	movs	r3, #16
 8008cd6:	77fb      	strb	r3, [r7, #31]
 8008cd8:	e0c0      	b.n	8008e5c <UART_SetConfig+0x348>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a44      	ldr	r2, [pc, #272]	@ (8008df0 <UART_SetConfig+0x2dc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d125      	bne.n	8008d30 <UART_SetConfig+0x21c>
 8008ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8008de0 <UART_SetConfig+0x2cc>)
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cf2:	d017      	beq.n	8008d24 <UART_SetConfig+0x210>
 8008cf4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cf8:	d817      	bhi.n	8008d2a <UART_SetConfig+0x216>
 8008cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cfe:	d00b      	beq.n	8008d18 <UART_SetConfig+0x204>
 8008d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d04:	d811      	bhi.n	8008d2a <UART_SetConfig+0x216>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <UART_SetConfig+0x1fe>
 8008d0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d0e:	d006      	beq.n	8008d1e <UART_SetConfig+0x20a>
 8008d10:	e00b      	b.n	8008d2a <UART_SetConfig+0x216>
 8008d12:	2300      	movs	r3, #0
 8008d14:	77fb      	strb	r3, [r7, #31]
 8008d16:	e0a1      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	77fb      	strb	r3, [r7, #31]
 8008d1c:	e09e      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d1e:	2304      	movs	r3, #4
 8008d20:	77fb      	strb	r3, [r7, #31]
 8008d22:	e09b      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d24:	2308      	movs	r3, #8
 8008d26:	77fb      	strb	r3, [r7, #31]
 8008d28:	e098      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d2a:	2310      	movs	r3, #16
 8008d2c:	77fb      	strb	r3, [r7, #31]
 8008d2e:	e095      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a2f      	ldr	r2, [pc, #188]	@ (8008df4 <UART_SetConfig+0x2e0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d125      	bne.n	8008d86 <UART_SetConfig+0x272>
 8008d3a:	4b29      	ldr	r3, [pc, #164]	@ (8008de0 <UART_SetConfig+0x2cc>)
 8008d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d48:	d017      	beq.n	8008d7a <UART_SetConfig+0x266>
 8008d4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d4e:	d817      	bhi.n	8008d80 <UART_SetConfig+0x26c>
 8008d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d54:	d00b      	beq.n	8008d6e <UART_SetConfig+0x25a>
 8008d56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d5a:	d811      	bhi.n	8008d80 <UART_SetConfig+0x26c>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <UART_SetConfig+0x254>
 8008d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d64:	d006      	beq.n	8008d74 <UART_SetConfig+0x260>
 8008d66:	e00b      	b.n	8008d80 <UART_SetConfig+0x26c>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	77fb      	strb	r3, [r7, #31]
 8008d6c:	e076      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	77fb      	strb	r3, [r7, #31]
 8008d72:	e073      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d74:	2304      	movs	r3, #4
 8008d76:	77fb      	strb	r3, [r7, #31]
 8008d78:	e070      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	77fb      	strb	r3, [r7, #31]
 8008d7e:	e06d      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d80:	2310      	movs	r3, #16
 8008d82:	77fb      	strb	r3, [r7, #31]
 8008d84:	e06a      	b.n	8008e5c <UART_SetConfig+0x348>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008df8 <UART_SetConfig+0x2e4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d138      	bne.n	8008e02 <UART_SetConfig+0x2ee>
 8008d90:	4b13      	ldr	r3, [pc, #76]	@ (8008de0 <UART_SetConfig+0x2cc>)
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008d9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d9e:	d017      	beq.n	8008dd0 <UART_SetConfig+0x2bc>
 8008da0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008da4:	d82a      	bhi.n	8008dfc <UART_SetConfig+0x2e8>
 8008da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008daa:	d00b      	beq.n	8008dc4 <UART_SetConfig+0x2b0>
 8008dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008db0:	d824      	bhi.n	8008dfc <UART_SetConfig+0x2e8>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <UART_SetConfig+0x2aa>
 8008db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008dba:	d006      	beq.n	8008dca <UART_SetConfig+0x2b6>
 8008dbc:	e01e      	b.n	8008dfc <UART_SetConfig+0x2e8>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	77fb      	strb	r3, [r7, #31]
 8008dc2:	e04b      	b.n	8008e5c <UART_SetConfig+0x348>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	77fb      	strb	r3, [r7, #31]
 8008dc8:	e048      	b.n	8008e5c <UART_SetConfig+0x348>
 8008dca:	2304      	movs	r3, #4
 8008dcc:	77fb      	strb	r3, [r7, #31]
 8008dce:	e045      	b.n	8008e5c <UART_SetConfig+0x348>
 8008dd0:	2308      	movs	r3, #8
 8008dd2:	77fb      	strb	r3, [r7, #31]
 8008dd4:	e042      	b.n	8008e5c <UART_SetConfig+0x348>
 8008dd6:	bf00      	nop
 8008dd8:	efff69f3 	.word	0xefff69f3
 8008ddc:	40011000 	.word	0x40011000
 8008de0:	40023800 	.word	0x40023800
 8008de4:	40004400 	.word	0x40004400
 8008de8:	40004800 	.word	0x40004800
 8008dec:	40004c00 	.word	0x40004c00
 8008df0:	40005000 	.word	0x40005000
 8008df4:	40011400 	.word	0x40011400
 8008df8:	40007800 	.word	0x40007800
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	77fb      	strb	r3, [r7, #31]
 8008e00:	e02c      	b.n	8008e5c <UART_SetConfig+0x348>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a72      	ldr	r2, [pc, #456]	@ (8008fd0 <UART_SetConfig+0x4bc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d125      	bne.n	8008e58 <UART_SetConfig+0x344>
 8008e0c:	4b71      	ldr	r3, [pc, #452]	@ (8008fd4 <UART_SetConfig+0x4c0>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008e16:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008e1a:	d017      	beq.n	8008e4c <UART_SetConfig+0x338>
 8008e1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008e20:	d817      	bhi.n	8008e52 <UART_SetConfig+0x33e>
 8008e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e26:	d00b      	beq.n	8008e40 <UART_SetConfig+0x32c>
 8008e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e2c:	d811      	bhi.n	8008e52 <UART_SetConfig+0x33e>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <UART_SetConfig+0x326>
 8008e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e36:	d006      	beq.n	8008e46 <UART_SetConfig+0x332>
 8008e38:	e00b      	b.n	8008e52 <UART_SetConfig+0x33e>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	77fb      	strb	r3, [r7, #31]
 8008e3e:	e00d      	b.n	8008e5c <UART_SetConfig+0x348>
 8008e40:	2302      	movs	r3, #2
 8008e42:	77fb      	strb	r3, [r7, #31]
 8008e44:	e00a      	b.n	8008e5c <UART_SetConfig+0x348>
 8008e46:	2304      	movs	r3, #4
 8008e48:	77fb      	strb	r3, [r7, #31]
 8008e4a:	e007      	b.n	8008e5c <UART_SetConfig+0x348>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	77fb      	strb	r3, [r7, #31]
 8008e50:	e004      	b.n	8008e5c <UART_SetConfig+0x348>
 8008e52:	2310      	movs	r3, #16
 8008e54:	77fb      	strb	r3, [r7, #31]
 8008e56:	e001      	b.n	8008e5c <UART_SetConfig+0x348>
 8008e58:	2310      	movs	r3, #16
 8008e5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e64:	d15b      	bne.n	8008f1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008e66:	7ffb      	ldrb	r3, [r7, #31]
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d828      	bhi.n	8008ebe <UART_SetConfig+0x3aa>
 8008e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <UART_SetConfig+0x360>)
 8008e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e72:	bf00      	nop
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008ea1 	.word	0x08008ea1
 8008e7c:	08008ea9 	.word	0x08008ea9
 8008e80:	08008ebf 	.word	0x08008ebf
 8008e84:	08008eaf 	.word	0x08008eaf
 8008e88:	08008ebf 	.word	0x08008ebf
 8008e8c:	08008ebf 	.word	0x08008ebf
 8008e90:	08008ebf 	.word	0x08008ebf
 8008e94:	08008eb7 	.word	0x08008eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e98:	f7fd ffca 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8008e9c:	61b8      	str	r0, [r7, #24]
        break;
 8008e9e:	e013      	b.n	8008ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ea0:	f7fd ffda 	bl	8006e58 <HAL_RCC_GetPCLK2Freq>
 8008ea4:	61b8      	str	r0, [r7, #24]
        break;
 8008ea6:	e00f      	b.n	8008ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8008fd8 <UART_SetConfig+0x4c4>)
 8008eaa:	61bb      	str	r3, [r7, #24]
        break;
 8008eac:	e00c      	b.n	8008ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eae:	f7fd feed 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8008eb2:	61b8      	str	r0, [r7, #24]
        break;
 8008eb4:	e008      	b.n	8008ec8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008eba:	61bb      	str	r3, [r7, #24]
        break;
 8008ebc:	e004      	b.n	8008ec8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	77bb      	strb	r3, [r7, #30]
        break;
 8008ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ec8:	69bb      	ldr	r3, [r7, #24]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d074      	beq.n	8008fb8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	005a      	lsls	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	085b      	lsrs	r3, r3, #1
 8008ed8:	441a      	add	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	2b0f      	cmp	r3, #15
 8008ee8:	d916      	bls.n	8008f18 <UART_SetConfig+0x404>
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef0:	d212      	bcs.n	8008f18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	f023 030f 	bic.w	r3, r3, #15
 8008efa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	085b      	lsrs	r3, r3, #1
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f003 0307 	and.w	r3, r3, #7
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	89fb      	ldrh	r3, [r7, #14]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	89fa      	ldrh	r2, [r7, #14]
 8008f14:	60da      	str	r2, [r3, #12]
 8008f16:	e04f      	b.n	8008fb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	77bb      	strb	r3, [r7, #30]
 8008f1c:	e04c      	b.n	8008fb8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f1e:	7ffb      	ldrb	r3, [r7, #31]
 8008f20:	2b08      	cmp	r3, #8
 8008f22:	d828      	bhi.n	8008f76 <UART_SetConfig+0x462>
 8008f24:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <UART_SetConfig+0x418>)
 8008f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2a:	bf00      	nop
 8008f2c:	08008f51 	.word	0x08008f51
 8008f30:	08008f59 	.word	0x08008f59
 8008f34:	08008f61 	.word	0x08008f61
 8008f38:	08008f77 	.word	0x08008f77
 8008f3c:	08008f67 	.word	0x08008f67
 8008f40:	08008f77 	.word	0x08008f77
 8008f44:	08008f77 	.word	0x08008f77
 8008f48:	08008f77 	.word	0x08008f77
 8008f4c:	08008f6f 	.word	0x08008f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f50:	f7fd ff6e 	bl	8006e30 <HAL_RCC_GetPCLK1Freq>
 8008f54:	61b8      	str	r0, [r7, #24]
        break;
 8008f56:	e013      	b.n	8008f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f58:	f7fd ff7e 	bl	8006e58 <HAL_RCC_GetPCLK2Freq>
 8008f5c:	61b8      	str	r0, [r7, #24]
        break;
 8008f5e:	e00f      	b.n	8008f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f60:	4b1d      	ldr	r3, [pc, #116]	@ (8008fd8 <UART_SetConfig+0x4c4>)
 8008f62:	61bb      	str	r3, [r7, #24]
        break;
 8008f64:	e00c      	b.n	8008f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f66:	f7fd fe91 	bl	8006c8c <HAL_RCC_GetSysClockFreq>
 8008f6a:	61b8      	str	r0, [r7, #24]
        break;
 8008f6c:	e008      	b.n	8008f80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f72:	61bb      	str	r3, [r7, #24]
        break;
 8008f74:	e004      	b.n	8008f80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008f76:	2300      	movs	r3, #0
 8008f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8008f7e:	bf00      	nop
    }

    if (pclk != 0U)
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d018      	beq.n	8008fb8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	085a      	lsrs	r2, r3, #1
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	441a      	add	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	2b0f      	cmp	r3, #15
 8008f9e:	d909      	bls.n	8008fb4 <UART_SetConfig+0x4a0>
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fa6:	d205      	bcs.n	8008fb4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	60da      	str	r2, [r3, #12]
 8008fb2:	e001      	b.n	8008fb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008fc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3720      	adds	r7, #32
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	40007c00 	.word	0x40007c00
 8008fd4:	40023800 	.word	0x40023800
 8008fd8:	00f42400 	.word	0x00f42400

08008fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00a      	beq.n	800904a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904e:	f003 0308 	and.w	r3, r3, #8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00a      	beq.n	800906c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	430a      	orrs	r2, r1
 800906a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009070:	f003 0310 	and.w	r3, r3, #16
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00a      	beq.n	800908e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	430a      	orrs	r2, r1
 800908c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009092:	f003 0320 	and.w	r3, r3, #32
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00a      	beq.n	80090b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d01a      	beq.n	80090f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	430a      	orrs	r2, r1
 80090d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090da:	d10a      	bne.n	80090f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00a      	beq.n	8009114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	430a      	orrs	r2, r1
 8009112:	605a      	str	r2, [r3, #4]
  }
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af02      	add	r7, sp, #8
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009130:	f7fa fb64 	bl	80037fc <HAL_GetTick>
 8009134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b08      	cmp	r3, #8
 8009142:	d10e      	bne.n	8009162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009144:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f81b 	bl	800918e <UART_WaitOnFlagUntilTimeout>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d001      	beq.n	8009162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e011      	b.n	8009186 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2220      	movs	r2, #32
 800916c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b09c      	sub	sp, #112	@ 0x70
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	603b      	str	r3, [r7, #0]
 800919a:	4613      	mov	r3, r2
 800919c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800919e:	e0a7      	b.n	80092f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a6:	f000 80a3 	beq.w	80092f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091aa:	f7fa fb27 	bl	80037fc <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d302      	bcc.n	80091c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80091ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d13f      	bne.n	8009240 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091d0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80091d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80091e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80091ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e6      	bne.n	80091c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3308      	adds	r3, #8
 80091f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091fc:	e853 3f00 	ldrex	r3, [r3]
 8009200:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	f023 0301 	bic.w	r3, r3, #1
 8009208:	663b      	str	r3, [r7, #96]	@ 0x60
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3308      	adds	r3, #8
 8009210:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009212:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009214:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009218:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800921a:	e841 2300 	strex	r3, r2, [r1]
 800921e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1e5      	bne.n	80091f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2220      	movs	r2, #32
 800922a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2220      	movs	r2, #32
 8009230:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e068      	b.n	8009312 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0304 	and.w	r3, r3, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	d050      	beq.n	80092f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009258:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800925c:	d148      	bne.n	80092f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009266:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009278:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800927c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	461a      	mov	r2, r3
 8009284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009286:	637b      	str	r3, [r7, #52]	@ 0x34
 8009288:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800928c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800928e:	e841 2300 	strex	r3, r2, [r1]
 8009292:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d1e6      	bne.n	8009268 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3308      	adds	r3, #8
 80092a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	e853 3f00 	ldrex	r3, [r3]
 80092a8:	613b      	str	r3, [r7, #16]
   return(result);
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f023 0301 	bic.w	r3, r3, #1
 80092b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3308      	adds	r3, #8
 80092b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80092ba:	623a      	str	r2, [r7, #32]
 80092bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092be:	69f9      	ldr	r1, [r7, #28]
 80092c0:	6a3a      	ldr	r2, [r7, #32]
 80092c2:	e841 2300 	strex	r3, r2, [r1]
 80092c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1e5      	bne.n	800929a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2220      	movs	r2, #32
 80092d2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2220      	movs	r2, #32
 80092e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e010      	b.n	8009312 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69da      	ldr	r2, [r3, #28]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	4013      	ands	r3, r2
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	bf0c      	ite	eq
 8009300:	2301      	moveq	r3, #1
 8009302:	2300      	movne	r3, #0
 8009304:	b2db      	uxtb	r3, r3
 8009306:	461a      	mov	r2, r3
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	429a      	cmp	r2, r3
 800930c:	f43f af48 	beq.w	80091a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3770      	adds	r7, #112	@ 0x70
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d121      	bne.n	8009372 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	4b27      	ldr	r3, [pc, #156]	@ (80093d0 <FMC_SDRAM_Init+0xb4>)
 8009334:	4013      	ands	r3, r2
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	6851      	ldr	r1, [r2, #4]
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	6892      	ldr	r2, [r2, #8]
 800933e:	4311      	orrs	r1, r2
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	68d2      	ldr	r2, [r2, #12]
 8009344:	4311      	orrs	r1, r2
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	6912      	ldr	r2, [r2, #16]
 800934a:	4311      	orrs	r1, r2
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	6952      	ldr	r2, [r2, #20]
 8009350:	4311      	orrs	r1, r2
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	6992      	ldr	r2, [r2, #24]
 8009356:	4311      	orrs	r1, r2
 8009358:	683a      	ldr	r2, [r7, #0]
 800935a:	69d2      	ldr	r2, [r2, #28]
 800935c:	4311      	orrs	r1, r2
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	6a12      	ldr	r2, [r2, #32]
 8009362:	4311      	orrs	r1, r2
 8009364:	683a      	ldr	r2, [r7, #0]
 8009366:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009368:	430a      	orrs	r2, r1
 800936a:	431a      	orrs	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	e026      	b.n	80093c0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	69d9      	ldr	r1, [r3, #28]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	4319      	orrs	r1, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009388:	430b      	orrs	r3, r1
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	4b0e      	ldr	r3, [pc, #56]	@ (80093d0 <FMC_SDRAM_Init+0xb4>)
 8009396:	4013      	ands	r3, r2
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	6851      	ldr	r1, [r2, #4]
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	6892      	ldr	r2, [r2, #8]
 80093a0:	4311      	orrs	r1, r2
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	68d2      	ldr	r2, [r2, #12]
 80093a6:	4311      	orrs	r1, r2
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	6912      	ldr	r2, [r2, #16]
 80093ac:	4311      	orrs	r1, r2
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	6952      	ldr	r2, [r2, #20]
 80093b2:	4311      	orrs	r1, r2
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	6992      	ldr	r2, [r2, #24]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	431a      	orrs	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	ffff8000 	.word	0xffff8000

080093d4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d128      	bne.n	8009438 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	1e59      	subs	r1, r3, #1
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	4319      	orrs	r1, r3
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	3b01      	subs	r3, #1
 8009404:	021b      	lsls	r3, r3, #8
 8009406:	4319      	orrs	r1, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	3b01      	subs	r3, #1
 800940e:	031b      	lsls	r3, r3, #12
 8009410:	4319      	orrs	r1, r3
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	3b01      	subs	r3, #1
 8009418:	041b      	lsls	r3, r3, #16
 800941a:	4319      	orrs	r1, r3
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	3b01      	subs	r3, #1
 8009422:	051b      	lsls	r3, r3, #20
 8009424:	4319      	orrs	r1, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	3b01      	subs	r3, #1
 800942c:	061b      	lsls	r3, r3, #24
 800942e:	430b      	orrs	r3, r1
 8009430:	431a      	orrs	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	609a      	str	r2, [r3, #8]
 8009436:	e02d      	b.n	8009494 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689a      	ldr	r2, [r3, #8]
 800943c:	4b19      	ldr	r3, [pc, #100]	@ (80094a4 <FMC_SDRAM_Timing_Init+0xd0>)
 800943e:	4013      	ands	r3, r2
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	68d2      	ldr	r2, [r2, #12]
 8009444:	3a01      	subs	r2, #1
 8009446:	0311      	lsls	r1, r2, #12
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	6952      	ldr	r2, [r2, #20]
 800944c:	3a01      	subs	r2, #1
 800944e:	0512      	lsls	r2, r2, #20
 8009450:	430a      	orrs	r2, r1
 8009452:	431a      	orrs	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	1e59      	subs	r1, r3, #1
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	3b01      	subs	r3, #1
 800946c:	011b      	lsls	r3, r3, #4
 800946e:	4319      	orrs	r1, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	3b01      	subs	r3, #1
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	4319      	orrs	r1, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	691b      	ldr	r3, [r3, #16]
 800947e:	3b01      	subs	r3, #1
 8009480:	041b      	lsls	r3, r3, #16
 8009482:	4319      	orrs	r1, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	3b01      	subs	r3, #1
 800948a:	061b      	lsls	r3, r3, #24
 800948c:	430b      	orrs	r3, r1
 800948e:	431a      	orrs	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	ff0f0fff 	.word	0xff0f0fff

080094a8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	691a      	ldr	r2, [r3, #16]
 80094b8:	4b0c      	ldr	r3, [pc, #48]	@ (80094ec <FMC_SDRAM_SendCommand+0x44>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	6811      	ldr	r1, [r2, #0]
 80094c0:	68ba      	ldr	r2, [r7, #8]
 80094c2:	6852      	ldr	r2, [r2, #4]
 80094c4:	4311      	orrs	r1, r2
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	6892      	ldr	r2, [r2, #8]
 80094ca:	3a01      	subs	r2, #1
 80094cc:	0152      	lsls	r2, r2, #5
 80094ce:	4311      	orrs	r1, r2
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	68d2      	ldr	r2, [r2, #12]
 80094d4:	0252      	lsls	r2, r2, #9
 80094d6:	430a      	orrs	r2, r1
 80094d8:	431a      	orrs	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	ffc00000 	.word	0xffc00000

080094f0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	695a      	ldr	r2, [r3, #20]
 80094fe:	4b07      	ldr	r3, [pc, #28]	@ (800951c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009500:	4013      	ands	r3, r2
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	0052      	lsls	r2, r2, #1
 8009506:	431a      	orrs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	370c      	adds	r7, #12
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	ffffc001 	.word	0xffffc001

08009520 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009520:	b480      	push	{r7}
 8009522:	b085      	sub	sp, #20
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800952e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009532:	2b84      	cmp	r3, #132	@ 0x84
 8009534:	d005      	beq.n	8009542 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009536:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4413      	add	r3, r2
 800953e:	3303      	adds	r3, #3
 8009540:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009542:	68fb      	ldr	r3, [r7, #12]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009554:	f000 faee 	bl	8009b34 <vTaskStartScheduler>
  
  return osOK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	bd80      	pop	{r7, pc}

0800955e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800955e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009560:	b089      	sub	sp, #36	@ 0x24
 8009562:	af04      	add	r7, sp, #16
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d020      	beq.n	80095b2 <osThreadCreate+0x54>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	699b      	ldr	r3, [r3, #24]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01c      	beq.n	80095b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685c      	ldr	r4, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691e      	ldr	r6, [r3, #16]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff ffc8 	bl	8009520 <makeFreeRtosPriority>
 8009590:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800959a:	9202      	str	r2, [sp, #8]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	9100      	str	r1, [sp, #0]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	4632      	mov	r2, r6
 80095a4:	4629      	mov	r1, r5
 80095a6:	4620      	mov	r0, r4
 80095a8:	f000 f8ed 	bl	8009786 <xTaskCreateStatic>
 80095ac:	4603      	mov	r3, r0
 80095ae:	60fb      	str	r3, [r7, #12]
 80095b0:	e01c      	b.n	80095ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685c      	ldr	r4, [r3, #4]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff ffaa 	bl	8009520 <makeFreeRtosPriority>
 80095cc:	4602      	mov	r2, r0
 80095ce:	f107 030c 	add.w	r3, r7, #12
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	9200      	str	r2, [sp, #0]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	4632      	mov	r2, r6
 80095da:	4629      	mov	r1, r5
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 f938 	bl	8009852 <xTaskCreate>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d001      	beq.n	80095ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80095e8:	2300      	movs	r3, #0
 80095ea:	e000      	b.n	80095ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80095ec:	68fb      	ldr	r3, [r7, #12]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d001      	beq.n	800960c <osDelay+0x16>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	e000      	b.n	800960e <osDelay+0x18>
 800960c:	2301      	movs	r3, #1
 800960e:	4618      	mov	r0, r3
 8009610:	f000 fa58 	bl	8009ac4 <vTaskDelay>
  
  return osOK;
 8009614:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f103 0208 	add.w	r2, r3, #8
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f04f 32ff 	mov.w	r2, #4294967295
 8009636:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f103 0208 	add.w	r2, r3, #8
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f103 0208 	add.w	r2, r3, #8
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009652:	bf00      	nop
 8009654:	370c      	adds	r7, #12
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800966c:	bf00      	nop
 800966e:	370c      	adds	r7, #12
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	689a      	ldr	r2, [r3, #8]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	683a      	ldr	r2, [r7, #0]
 80096a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d6:	d103      	bne.n	80096e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	e00c      	b.n	80096fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3308      	adds	r3, #8
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	e002      	b.n	80096ee <vListInsert+0x2e>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d2f6      	bcs.n	80096e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	601a      	str	r2, [r3, #0]
}
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	6892      	ldr	r2, [r2, #8]
 8009748:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	6852      	ldr	r2, [r2, #4]
 8009752:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	429a      	cmp	r2, r3
 800975c:	d103      	bne.n	8009766 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	1e5a      	subs	r2, r3, #1
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009786:	b580      	push	{r7, lr}
 8009788:	b08e      	sub	sp, #56	@ 0x38
 800978a:	af04      	add	r7, sp, #16
 800978c:	60f8      	str	r0, [r7, #12]
 800978e:	60b9      	str	r1, [r7, #8]
 8009790:	607a      	str	r2, [r7, #4]
 8009792:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009796:	2b00      	cmp	r3, #0
 8009798:	d10d      	bne.n	80097b6 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979e:	b672      	cpsid	i
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	b662      	cpsie	i
 80097ae:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80097b0:	bf00      	nop
 80097b2:	bf00      	nop
 80097b4:	e7fd      	b.n	80097b2 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80097b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10d      	bne.n	80097d8 <xTaskCreateStatic+0x52>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c0:	b672      	cpsid	i
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	b662      	cpsie	i
 80097d0:	61fb      	str	r3, [r7, #28]
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	e7fd      	b.n	80097d4 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097d8:	2354      	movs	r3, #84	@ 0x54
 80097da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2b54      	cmp	r3, #84	@ 0x54
 80097e0:	d00d      	beq.n	80097fe <xTaskCreateStatic+0x78>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e6:	b672      	cpsid	i
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	b662      	cpsie	i
 80097f6:	61bb      	str	r3, [r7, #24]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009802:	2b00      	cmp	r3, #0
 8009804:	d01e      	beq.n	8009844 <xTaskCreateStatic+0xbe>
 8009806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01b      	beq.n	8009844 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009814:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009818:	2202      	movs	r2, #2
 800981a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800981e:	2300      	movs	r3, #0
 8009820:	9303      	str	r3, [sp, #12]
 8009822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009824:	9302      	str	r3, [sp, #8]
 8009826:	f107 0314 	add.w	r3, r7, #20
 800982a:	9301      	str	r3, [sp, #4]
 800982c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	68b9      	ldr	r1, [r7, #8]
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 f850 	bl	80098dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800983c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800983e:	f000 f8d7 	bl	80099f0 <prvAddNewTaskToReadyList>
 8009842:	e001      	b.n	8009848 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8009844:	2300      	movs	r3, #0
 8009846:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009848:	697b      	ldr	r3, [r7, #20]
	}
 800984a:	4618      	mov	r0, r3
 800984c:	3728      	adds	r7, #40	@ 0x28
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009852:	b580      	push	{r7, lr}
 8009854:	b08c      	sub	sp, #48	@ 0x30
 8009856:	af04      	add	r7, sp, #16
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	60b9      	str	r1, [r7, #8]
 800985c:	603b      	str	r3, [r7, #0]
 800985e:	4613      	mov	r3, r2
 8009860:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009862:	88fb      	ldrh	r3, [r7, #6]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fec8 	bl	800a5fc <pvPortMalloc>
 800986c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00e      	beq.n	8009892 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009874:	2054      	movs	r0, #84	@ 0x54
 8009876:	f000 fec1 	bl	800a5fc <pvPortMalloc>
 800987a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800987c:	69fb      	ldr	r3, [r7, #28]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d003      	beq.n	800988a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	631a      	str	r2, [r3, #48]	@ 0x30
 8009888:	e005      	b.n	8009896 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800988a:	6978      	ldr	r0, [r7, #20]
 800988c:	f000 ff84 	bl	800a798 <vPortFree>
 8009890:	e001      	b.n	8009896 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d017      	beq.n	80098cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098a4:	88fa      	ldrh	r2, [r7, #6]
 80098a6:	2300      	movs	r3, #0
 80098a8:	9303      	str	r3, [sp, #12]
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	9302      	str	r3, [sp, #8]
 80098ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b0:	9301      	str	r3, [sp, #4]
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f80e 	bl	80098dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098c0:	69f8      	ldr	r0, [r7, #28]
 80098c2:	f000 f895 	bl	80099f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098c6:	2301      	movs	r3, #1
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	e002      	b.n	80098d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098cc:	f04f 33ff 	mov.w	r3, #4294967295
 80098d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098d2:	69bb      	ldr	r3, [r7, #24]
	}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3720      	adds	r7, #32
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
 80098e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80098f4:	440b      	add	r3, r1
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	f023 0307 	bic.w	r3, r3, #7
 8009902:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00d      	beq.n	800992a <prvInitialiseNewTask+0x4e>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	b672      	cpsid	i
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	b662      	cpsie	i
 8009922:	617b      	str	r3, [r7, #20]
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	e7fd      	b.n	8009926 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d01f      	beq.n	8009970 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009930:	2300      	movs	r3, #0
 8009932:	61fb      	str	r3, [r7, #28]
 8009934:	e012      	b.n	800995c <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009936:	68ba      	ldr	r2, [r7, #8]
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	4413      	add	r3, r2
 800993c:	7819      	ldrb	r1, [r3, #0]
 800993e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	4413      	add	r3, r2
 8009944:	3334      	adds	r3, #52	@ 0x34
 8009946:	460a      	mov	r2, r1
 8009948:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	4413      	add	r3, r2
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	3301      	adds	r3, #1
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b0f      	cmp	r3, #15
 8009960:	d9e9      	bls.n	8009936 <prvInitialiseNewTask+0x5a>
 8009962:	e000      	b.n	8009966 <prvInitialiseNewTask+0x8a>
			{
				break;
 8009964:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800996e:	e003      	b.n	8009978 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997a:	2b06      	cmp	r3, #6
 800997c:	d901      	bls.n	8009982 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800997e:	2306      	movs	r3, #6
 8009980:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009984:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009986:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800998c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009990:	2200      	movs	r2, #0
 8009992:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009996:	3304      	adds	r3, #4
 8009998:	4618      	mov	r0, r3
 800999a:	f7ff fe60 	bl	800965e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800999e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a0:	3318      	adds	r3, #24
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff fe5b 	bl	800965e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b0:	f1c3 0207 	rsb	r2, r3, #7
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099bc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	2200      	movs	r2, #0
 80099c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099cc:	683a      	ldr	r2, [r7, #0]
 80099ce:	68f9      	ldr	r1, [r7, #12]
 80099d0:	69b8      	ldr	r0, [r7, #24]
 80099d2:	f000 fc1b 	bl	800a20c <pxPortInitialiseStack>
 80099d6:	4602      	mov	r2, r0
 80099d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099e8:	bf00      	nop
 80099ea:	3720      	adds	r7, #32
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099f8:	f000 fd18 	bl	800a42c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099fc:	4b2a      	ldr	r3, [pc, #168]	@ (8009aa8 <prvAddNewTaskToReadyList+0xb8>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	4a29      	ldr	r2, [pc, #164]	@ (8009aa8 <prvAddNewTaskToReadyList+0xb8>)
 8009a04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a06:	4b29      	ldr	r3, [pc, #164]	@ (8009aac <prvAddNewTaskToReadyList+0xbc>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d109      	bne.n	8009a22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a0e:	4a27      	ldr	r2, [pc, #156]	@ (8009aac <prvAddNewTaskToReadyList+0xbc>)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a14:	4b24      	ldr	r3, [pc, #144]	@ (8009aa8 <prvAddNewTaskToReadyList+0xb8>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d110      	bne.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a1c:	f000 fad0 	bl	8009fc0 <prvInitialiseTaskLists>
 8009a20:	e00d      	b.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a22:	4b23      	ldr	r3, [pc, #140]	@ (8009ab0 <prvAddNewTaskToReadyList+0xc0>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d109      	bne.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a2a:	4b20      	ldr	r3, [pc, #128]	@ (8009aac <prvAddNewTaskToReadyList+0xbc>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d802      	bhi.n	8009a3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a38:	4a1c      	ldr	r2, [pc, #112]	@ (8009aac <prvAddNewTaskToReadyList+0xbc>)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ab4 <prvAddNewTaskToReadyList+0xc4>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3301      	adds	r3, #1
 8009a44:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab4 <prvAddNewTaskToReadyList+0xc4>)
 8009a46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	409a      	lsls	r2, r3
 8009a50:	4b19      	ldr	r3, [pc, #100]	@ (8009ab8 <prvAddNewTaskToReadyList+0xc8>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	4a18      	ldr	r2, [pc, #96]	@ (8009ab8 <prvAddNewTaskToReadyList+0xc8>)
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4a15      	ldr	r2, [pc, #84]	@ (8009abc <prvAddNewTaskToReadyList+0xcc>)
 8009a68:	441a      	add	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	4619      	mov	r1, r3
 8009a70:	4610      	mov	r0, r2
 8009a72:	f7ff fe01 	bl	8009678 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a76:	f000 fd0f 	bl	800a498 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ab0 <prvAddNewTaskToReadyList+0xc0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00e      	beq.n	8009aa0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a82:	4b0a      	ldr	r3, [pc, #40]	@ (8009aac <prvAddNewTaskToReadyList+0xbc>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d207      	bcs.n	8009aa0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a90:	4b0b      	ldr	r3, [pc, #44]	@ (8009ac0 <prvAddNewTaskToReadyList+0xd0>)
 8009a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20000cc4 	.word	0x20000cc4
 8009aac:	20000bc4 	.word	0x20000bc4
 8009ab0:	20000cd0 	.word	0x20000cd0
 8009ab4:	20000ce0 	.word	0x20000ce0
 8009ab8:	20000ccc 	.word	0x20000ccc
 8009abc:	20000bc8 	.word	0x20000bc8
 8009ac0:	e000ed04 	.word	0xe000ed04

08009ac4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009acc:	2300      	movs	r3, #0
 8009ace:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01a      	beq.n	8009b0c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ad6:	4b15      	ldr	r3, [pc, #84]	@ (8009b2c <vTaskDelay+0x68>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d00d      	beq.n	8009afa <vTaskDelay+0x36>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	b672      	cpsid	i
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	b662      	cpsie	i
 8009af2:	60bb      	str	r3, [r7, #8]
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop
 8009af8:	e7fd      	b.n	8009af6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009afa:	f000 f881 	bl	8009c00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009afe:	2100      	movs	r1, #0
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fb1d 	bl	800a140 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b06:	f000 f889 	bl	8009c1c <xTaskResumeAll>
 8009b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d107      	bne.n	8009b22 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8009b12:	4b07      	ldr	r3, [pc, #28]	@ (8009b30 <vTaskDelay+0x6c>)
 8009b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b22:	bf00      	nop
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000cec 	.word	0x20000cec
 8009b30:	e000ed04 	.word	0xe000ed04

08009b34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b08a      	sub	sp, #40	@ 0x28
 8009b38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b42:	463a      	mov	r2, r7
 8009b44:	1d39      	adds	r1, r7, #4
 8009b46:	f107 0308 	add.w	r3, r7, #8
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7f6 ff9e 	bl	8000a8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	9202      	str	r2, [sp, #8]
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	460a      	mov	r2, r1
 8009b62:	4921      	ldr	r1, [pc, #132]	@ (8009be8 <vTaskStartScheduler+0xb4>)
 8009b64:	4821      	ldr	r0, [pc, #132]	@ (8009bec <vTaskStartScheduler+0xb8>)
 8009b66:	f7ff fe0e 	bl	8009786 <xTaskCreateStatic>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	4a20      	ldr	r2, [pc, #128]	@ (8009bf0 <vTaskStartScheduler+0xbc>)
 8009b6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b70:	4b1f      	ldr	r3, [pc, #124]	@ (8009bf0 <vTaskStartScheduler+0xbc>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	e001      	b.n	8009b82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d118      	bne.n	8009bba <vTaskStartScheduler+0x86>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8c:	b672      	cpsid	i
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	b662      	cpsie	i
 8009b9c:	613b      	str	r3, [r7, #16]
}
 8009b9e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ba0:	4b14      	ldr	r3, [pc, #80]	@ (8009bf4 <vTaskStartScheduler+0xc0>)
 8009ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ba8:	4b13      	ldr	r3, [pc, #76]	@ (8009bf8 <vTaskStartScheduler+0xc4>)
 8009baa:	2201      	movs	r2, #1
 8009bac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bae:	4b13      	ldr	r3, [pc, #76]	@ (8009bfc <vTaskStartScheduler+0xc8>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bb4:	f000 fbbc 	bl	800a330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bb8:	e011      	b.n	8009bde <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc0:	d10d      	bne.n	8009bde <vTaskStartScheduler+0xaa>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	b672      	cpsid	i
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	b662      	cpsie	i
 8009bd6:	60fb      	str	r3, [r7, #12]
}
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	e7fd      	b.n	8009bda <vTaskStartScheduler+0xa6>
}
 8009bde:	bf00      	nop
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	0800aa68 	.word	0x0800aa68
 8009bec:	08009f91 	.word	0x08009f91
 8009bf0:	20000ce8 	.word	0x20000ce8
 8009bf4:	20000ce4 	.word	0x20000ce4
 8009bf8:	20000cd0 	.word	0x20000cd0
 8009bfc:	20000cc8 	.word	0x20000cc8

08009c00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009c04:	4b04      	ldr	r3, [pc, #16]	@ (8009c18 <vTaskSuspendAll+0x18>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	3301      	adds	r3, #1
 8009c0a:	4a03      	ldr	r2, [pc, #12]	@ (8009c18 <vTaskSuspendAll+0x18>)
 8009c0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009c0e:	bf00      	nop
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr
 8009c18:	20000cec 	.word	0x20000cec

08009c1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c2a:	4b43      	ldr	r3, [pc, #268]	@ (8009d38 <xTaskResumeAll+0x11c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10d      	bne.n	8009c4e <xTaskResumeAll+0x32>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c36:	b672      	cpsid	i
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	b662      	cpsie	i
 8009c46:	603b      	str	r3, [r7, #0]
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c4e:	f000 fbed 	bl	800a42c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c52:	4b39      	ldr	r3, [pc, #228]	@ (8009d38 <xTaskResumeAll+0x11c>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	3b01      	subs	r3, #1
 8009c58:	4a37      	ldr	r2, [pc, #220]	@ (8009d38 <xTaskResumeAll+0x11c>)
 8009c5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c5c:	4b36      	ldr	r3, [pc, #216]	@ (8009d38 <xTaskResumeAll+0x11c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d161      	bne.n	8009d28 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c64:	4b35      	ldr	r3, [pc, #212]	@ (8009d3c <xTaskResumeAll+0x120>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d05d      	beq.n	8009d28 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c6c:	e02e      	b.n	8009ccc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c6e:	4b34      	ldr	r3, [pc, #208]	@ (8009d40 <xTaskResumeAll+0x124>)
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3318      	adds	r3, #24
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff fd59 	bl	8009732 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff fd54 	bl	8009732 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c8e:	2201      	movs	r2, #1
 8009c90:	409a      	lsls	r2, r3
 8009c92:	4b2c      	ldr	r3, [pc, #176]	@ (8009d44 <xTaskResumeAll+0x128>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	4a2a      	ldr	r2, [pc, #168]	@ (8009d44 <xTaskResumeAll+0x128>)
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4a27      	ldr	r2, [pc, #156]	@ (8009d48 <xTaskResumeAll+0x12c>)
 8009caa:	441a      	add	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f7ff fce0 	bl	8009678 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cbc:	4b23      	ldr	r3, [pc, #140]	@ (8009d4c <xTaskResumeAll+0x130>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d302      	bcc.n	8009ccc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009cc6:	4b22      	ldr	r3, [pc, #136]	@ (8009d50 <xTaskResumeAll+0x134>)
 8009cc8:	2201      	movs	r2, #1
 8009cca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8009d40 <xTaskResumeAll+0x124>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1cc      	bne.n	8009c6e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cda:	f000 fa11 	bl	800a100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cde:	4b1d      	ldr	r3, [pc, #116]	@ (8009d54 <xTaskResumeAll+0x138>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d010      	beq.n	8009d0c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009cea:	f000 f837 	bl	8009d5c <xTaskIncrementTick>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009cf4:	4b16      	ldr	r3, [pc, #88]	@ (8009d50 <xTaskResumeAll+0x134>)
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1f1      	bne.n	8009cea <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009d06:	4b13      	ldr	r3, [pc, #76]	@ (8009d54 <xTaskResumeAll+0x138>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d0c:	4b10      	ldr	r3, [pc, #64]	@ (8009d50 <xTaskResumeAll+0x134>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d009      	beq.n	8009d28 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d14:	2301      	movs	r3, #1
 8009d16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d18:	4b0f      	ldr	r3, [pc, #60]	@ (8009d58 <xTaskResumeAll+0x13c>)
 8009d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d28:	f000 fbb6 	bl	800a498 <vPortExitCritical>

	return xAlreadyYielded;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000cec 	.word	0x20000cec
 8009d3c:	20000cc4 	.word	0x20000cc4
 8009d40:	20000c84 	.word	0x20000c84
 8009d44:	20000ccc 	.word	0x20000ccc
 8009d48:	20000bc8 	.word	0x20000bc8
 8009d4c:	20000bc4 	.word	0x20000bc4
 8009d50:	20000cd8 	.word	0x20000cd8
 8009d54:	20000cd4 	.word	0x20000cd4
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d66:	4b50      	ldr	r3, [pc, #320]	@ (8009ea8 <xTaskIncrementTick+0x14c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f040 808b 	bne.w	8009e86 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d70:	4b4e      	ldr	r3, [pc, #312]	@ (8009eac <xTaskIncrementTick+0x150>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3301      	adds	r3, #1
 8009d76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d78:	4a4c      	ldr	r2, [pc, #304]	@ (8009eac <xTaskIncrementTick+0x150>)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d123      	bne.n	8009dcc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d84:	4b4a      	ldr	r3, [pc, #296]	@ (8009eb0 <xTaskIncrementTick+0x154>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00d      	beq.n	8009daa <xTaskIncrementTick+0x4e>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d92:	b672      	cpsid	i
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	b662      	cpsie	i
 8009da2:	603b      	str	r3, [r7, #0]
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop
 8009da8:	e7fd      	b.n	8009da6 <xTaskIncrementTick+0x4a>
 8009daa:	4b41      	ldr	r3, [pc, #260]	@ (8009eb0 <xTaskIncrementTick+0x154>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	4b40      	ldr	r3, [pc, #256]	@ (8009eb4 <xTaskIncrementTick+0x158>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a3e      	ldr	r2, [pc, #248]	@ (8009eb0 <xTaskIncrementTick+0x154>)
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	4a3e      	ldr	r2, [pc, #248]	@ (8009eb4 <xTaskIncrementTick+0x158>)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6013      	str	r3, [r2, #0]
 8009dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8009eb8 <xTaskIncrementTick+0x15c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	4a3c      	ldr	r2, [pc, #240]	@ (8009eb8 <xTaskIncrementTick+0x15c>)
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	f000 f99a 	bl	800a100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8009ebc <xTaskIncrementTick+0x160>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d348      	bcc.n	8009e68 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dd6:	4b36      	ldr	r3, [pc, #216]	@ (8009eb0 <xTaskIncrementTick+0x154>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de0:	4b36      	ldr	r3, [pc, #216]	@ (8009ebc <xTaskIncrementTick+0x160>)
 8009de2:	f04f 32ff 	mov.w	r2, #4294967295
 8009de6:	601a      	str	r2, [r3, #0]
					break;
 8009de8:	e03e      	b.n	8009e68 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dea:	4b31      	ldr	r3, [pc, #196]	@ (8009eb0 <xTaskIncrementTick+0x154>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d203      	bcs.n	8009e0a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e02:	4a2e      	ldr	r2, [pc, #184]	@ (8009ebc <xTaskIncrementTick+0x160>)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e08:	e02e      	b.n	8009e68 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7ff fc8f 	bl	8009732 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	3318      	adds	r3, #24
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff fc86 	bl	8009732 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	409a      	lsls	r2, r3
 8009e2e:	4b24      	ldr	r3, [pc, #144]	@ (8009ec0 <xTaskIncrementTick+0x164>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	4a22      	ldr	r2, [pc, #136]	@ (8009ec0 <xTaskIncrementTick+0x164>)
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4a1f      	ldr	r2, [pc, #124]	@ (8009ec4 <xTaskIncrementTick+0x168>)
 8009e46:	441a      	add	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f7ff fc12 	bl	8009678 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e58:	4b1b      	ldr	r3, [pc, #108]	@ (8009ec8 <xTaskIncrementTick+0x16c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d3b9      	bcc.n	8009dd6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8009e62:	2301      	movs	r3, #1
 8009e64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e66:	e7b6      	b.n	8009dd6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e68:	4b17      	ldr	r3, [pc, #92]	@ (8009ec8 <xTaskIncrementTick+0x16c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6e:	4915      	ldr	r1, [pc, #84]	@ (8009ec4 <xTaskIncrementTick+0x168>)
 8009e70:	4613      	mov	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d907      	bls.n	8009e90 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009e80:	2301      	movs	r3, #1
 8009e82:	617b      	str	r3, [r7, #20]
 8009e84:	e004      	b.n	8009e90 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009e86:	4b11      	ldr	r3, [pc, #68]	@ (8009ecc <xTaskIncrementTick+0x170>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	4a0f      	ldr	r2, [pc, #60]	@ (8009ecc <xTaskIncrementTick+0x170>)
 8009e8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009e90:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed0 <xTaskIncrementTick+0x174>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009e9c:	697b      	ldr	r3, [r7, #20]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20000cec 	.word	0x20000cec
 8009eac:	20000cc8 	.word	0x20000cc8
 8009eb0:	20000c7c 	.word	0x20000c7c
 8009eb4:	20000c80 	.word	0x20000c80
 8009eb8:	20000cdc 	.word	0x20000cdc
 8009ebc:	20000ce4 	.word	0x20000ce4
 8009ec0:	20000ccc 	.word	0x20000ccc
 8009ec4:	20000bc8 	.word	0x20000bc8
 8009ec8:	20000bc4 	.word	0x20000bc4
 8009ecc:	20000cd4 	.word	0x20000cd4
 8009ed0:	20000cd8 	.word	0x20000cd8

08009ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009eda:	4b28      	ldr	r3, [pc, #160]	@ (8009f7c <vTaskSwitchContext+0xa8>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ee2:	4b27      	ldr	r3, [pc, #156]	@ (8009f80 <vTaskSwitchContext+0xac>)
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ee8:	e042      	b.n	8009f70 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009eea:	4b25      	ldr	r3, [pc, #148]	@ (8009f80 <vTaskSwitchContext+0xac>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ef0:	4b24      	ldr	r3, [pc, #144]	@ (8009f84 <vTaskSwitchContext+0xb0>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	fab3 f383 	clz	r3, r3
 8009efc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009efe:	7afb      	ldrb	r3, [r7, #11]
 8009f00:	f1c3 031f 	rsb	r3, r3, #31
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	4920      	ldr	r1, [pc, #128]	@ (8009f88 <vTaskSwitchContext+0xb4>)
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	440b      	add	r3, r1
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d10d      	bne.n	8009f36 <vTaskSwitchContext+0x62>
	__asm volatile
 8009f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1e:	b672      	cpsid	i
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	b662      	cpsie	i
 8009f2e:	607b      	str	r3, [r7, #4]
}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	e7fd      	b.n	8009f32 <vTaskSwitchContext+0x5e>
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4a11      	ldr	r2, [pc, #68]	@ (8009f88 <vTaskSwitchContext+0xb4>)
 8009f42:	4413      	add	r3, r2
 8009f44:	613b      	str	r3, [r7, #16]
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	605a      	str	r2, [r3, #4]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	3308      	adds	r3, #8
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d104      	bne.n	8009f66 <vTaskSwitchContext+0x92>
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	605a      	str	r2, [r3, #4]
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	4a07      	ldr	r2, [pc, #28]	@ (8009f8c <vTaskSwitchContext+0xb8>)
 8009f6e:	6013      	str	r3, [r2, #0]
}
 8009f70:	bf00      	nop
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	20000cec 	.word	0x20000cec
 8009f80:	20000cd8 	.word	0x20000cd8
 8009f84:	20000ccc 	.word	0x20000ccc
 8009f88:	20000bc8 	.word	0x20000bc8
 8009f8c:	20000bc4 	.word	0x20000bc4

08009f90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f98:	f000 f852 	bl	800a040 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f9c:	4b06      	ldr	r3, [pc, #24]	@ (8009fb8 <prvIdleTask+0x28>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d9f9      	bls.n	8009f98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fa4:	4b05      	ldr	r3, [pc, #20]	@ (8009fbc <prvIdleTask+0x2c>)
 8009fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009fb4:	e7f0      	b.n	8009f98 <prvIdleTask+0x8>
 8009fb6:	bf00      	nop
 8009fb8:	20000bc8 	.word	0x20000bc8
 8009fbc:	e000ed04 	.word	0xe000ed04

08009fc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	607b      	str	r3, [r7, #4]
 8009fca:	e00c      	b.n	8009fe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4a12      	ldr	r2, [pc, #72]	@ (800a020 <prvInitialiseTaskLists+0x60>)
 8009fd8:	4413      	add	r3, r2
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff fb1f 	bl	800961e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	607b      	str	r3, [r7, #4]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b06      	cmp	r3, #6
 8009fea:	d9ef      	bls.n	8009fcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fec:	480d      	ldr	r0, [pc, #52]	@ (800a024 <prvInitialiseTaskLists+0x64>)
 8009fee:	f7ff fb16 	bl	800961e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ff2:	480d      	ldr	r0, [pc, #52]	@ (800a028 <prvInitialiseTaskLists+0x68>)
 8009ff4:	f7ff fb13 	bl	800961e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009ff8:	480c      	ldr	r0, [pc, #48]	@ (800a02c <prvInitialiseTaskLists+0x6c>)
 8009ffa:	f7ff fb10 	bl	800961e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009ffe:	480c      	ldr	r0, [pc, #48]	@ (800a030 <prvInitialiseTaskLists+0x70>)
 800a000:	f7ff fb0d 	bl	800961e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a004:	480b      	ldr	r0, [pc, #44]	@ (800a034 <prvInitialiseTaskLists+0x74>)
 800a006:	f7ff fb0a 	bl	800961e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a00a:	4b0b      	ldr	r3, [pc, #44]	@ (800a038 <prvInitialiseTaskLists+0x78>)
 800a00c:	4a05      	ldr	r2, [pc, #20]	@ (800a024 <prvInitialiseTaskLists+0x64>)
 800a00e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a010:	4b0a      	ldr	r3, [pc, #40]	@ (800a03c <prvInitialiseTaskLists+0x7c>)
 800a012:	4a05      	ldr	r2, [pc, #20]	@ (800a028 <prvInitialiseTaskLists+0x68>)
 800a014:	601a      	str	r2, [r3, #0]
}
 800a016:	bf00      	nop
 800a018:	3708      	adds	r7, #8
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20000bc8 	.word	0x20000bc8
 800a024:	20000c54 	.word	0x20000c54
 800a028:	20000c68 	.word	0x20000c68
 800a02c:	20000c84 	.word	0x20000c84
 800a030:	20000c98 	.word	0x20000c98
 800a034:	20000cb0 	.word	0x20000cb0
 800a038:	20000c7c 	.word	0x20000c7c
 800a03c:	20000c80 	.word	0x20000c80

0800a040 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a046:	e019      	b.n	800a07c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a048:	f000 f9f0 	bl	800a42c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a04c:	4b10      	ldr	r3, [pc, #64]	@ (800a090 <prvCheckTasksWaitingTermination+0x50>)
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3304      	adds	r3, #4
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff fb6a 	bl	8009732 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a05e:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <prvCheckTasksWaitingTermination+0x54>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3b01      	subs	r3, #1
 800a064:	4a0b      	ldr	r2, [pc, #44]	@ (800a094 <prvCheckTasksWaitingTermination+0x54>)
 800a066:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a068:	4b0b      	ldr	r3, [pc, #44]	@ (800a098 <prvCheckTasksWaitingTermination+0x58>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	4a0a      	ldr	r2, [pc, #40]	@ (800a098 <prvCheckTasksWaitingTermination+0x58>)
 800a070:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a072:	f000 fa11 	bl	800a498 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f810 	bl	800a09c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a07c:	4b06      	ldr	r3, [pc, #24]	@ (800a098 <prvCheckTasksWaitingTermination+0x58>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d1e1      	bne.n	800a048 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000c98 	.word	0x20000c98
 800a094:	20000cc4 	.word	0x20000cc4
 800a098:	20000cac 	.word	0x20000cac

0800a09c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d108      	bne.n	800a0c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f000 fb70 	bl	800a798 <vPortFree>
				vPortFree( pxTCB );
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fb6d 	bl	800a798 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0be:	e01b      	b.n	800a0f8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d103      	bne.n	800a0d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fb64 	bl	800a798 <vPortFree>
	}
 800a0d0:	e012      	b.n	800a0f8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d00d      	beq.n	800a0f8 <prvDeleteTCB+0x5c>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e0:	b672      	cpsid	i
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	b662      	cpsie	i
 800a0f0:	60fb      	str	r3, [r7, #12]
}
 800a0f2:	bf00      	nop
 800a0f4:	bf00      	nop
 800a0f6:	e7fd      	b.n	800a0f4 <prvDeleteTCB+0x58>
	}
 800a0f8:	bf00      	nop
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a106:	4b0c      	ldr	r3, [pc, #48]	@ (800a138 <prvResetNextTaskUnblockTime+0x38>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d104      	bne.n	800a11a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a110:	4b0a      	ldr	r3, [pc, #40]	@ (800a13c <prvResetNextTaskUnblockTime+0x3c>)
 800a112:	f04f 32ff 	mov.w	r2, #4294967295
 800a116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a118:	e008      	b.n	800a12c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a11a:	4b07      	ldr	r3, [pc, #28]	@ (800a138 <prvResetNextTaskUnblockTime+0x38>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	4a04      	ldr	r2, [pc, #16]	@ (800a13c <prvResetNextTaskUnblockTime+0x3c>)
 800a12a:	6013      	str	r3, [r2, #0]
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	20000c7c 	.word	0x20000c7c
 800a13c:	20000ce4 	.word	0x20000ce4

0800a140 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a14a:	4b29      	ldr	r3, [pc, #164]	@ (800a1f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a150:	4b28      	ldr	r3, [pc, #160]	@ (800a1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	3304      	adds	r3, #4
 800a156:	4618      	mov	r0, r3
 800a158:	f7ff faeb 	bl	8009732 <uxListRemove>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10b      	bne.n	800a17a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a162:	4b24      	ldr	r3, [pc, #144]	@ (800a1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a168:	2201      	movs	r2, #1
 800a16a:	fa02 f303 	lsl.w	r3, r2, r3
 800a16e:	43da      	mvns	r2, r3
 800a170:	4b21      	ldr	r3, [pc, #132]	@ (800a1f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4013      	ands	r3, r2
 800a176:	4a20      	ldr	r2, [pc, #128]	@ (800a1f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a178:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a180:	d10a      	bne.n	800a198 <prvAddCurrentTaskToDelayedList+0x58>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d007      	beq.n	800a198 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a188:	4b1a      	ldr	r3, [pc, #104]	@ (800a1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3304      	adds	r3, #4
 800a18e:	4619      	mov	r1, r3
 800a190:	481a      	ldr	r0, [pc, #104]	@ (800a1fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a192:	f7ff fa71 	bl	8009678 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a196:	e026      	b.n	800a1e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4413      	add	r3, r2
 800a19e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1a0:	4b14      	ldr	r3, [pc, #80]	@ (800a1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68ba      	ldr	r2, [r7, #8]
 800a1a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d209      	bcs.n	800a1c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1b0:	4b13      	ldr	r3, [pc, #76]	@ (800a200 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7ff fa7f 	bl	80096c0 <vListInsert>
}
 800a1c2:	e010      	b.n	800a1e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1c4:	4b0f      	ldr	r3, [pc, #60]	@ (800a204 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a1f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	f7ff fa75 	bl	80096c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a208 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d202      	bcs.n	800a1e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a1e0:	4a09      	ldr	r2, [pc, #36]	@ (800a208 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6013      	str	r3, [r2, #0]
}
 800a1e6:	bf00      	nop
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	20000cc8 	.word	0x20000cc8
 800a1f4:	20000bc4 	.word	0x20000bc4
 800a1f8:	20000ccc 	.word	0x20000ccc
 800a1fc:	20000cb0 	.word	0x20000cb0
 800a200:	20000c80 	.word	0x20000c80
 800a204:	20000c7c 	.word	0x20000c7c
 800a208:	20000ce4 	.word	0x20000ce4

0800a20c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3b04      	subs	r3, #4
 800a21c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3b04      	subs	r3, #4
 800a22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f023 0201 	bic.w	r2, r3, #1
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3b04      	subs	r3, #4
 800a23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a23c:	4a0c      	ldr	r2, [pc, #48]	@ (800a270 <pxPortInitialiseStack+0x64>)
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3b14      	subs	r3, #20
 800a246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3b04      	subs	r3, #4
 800a252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f06f 0202 	mvn.w	r2, #2
 800a25a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3b20      	subs	r3, #32
 800a260:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a262:	68fb      	ldr	r3, [r7, #12]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3714      	adds	r7, #20
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	0800a275 	.word	0x0800a275

0800a274 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a27e:	4b15      	ldr	r3, [pc, #84]	@ (800a2d4 <prvTaskExitError+0x60>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a286:	d00d      	beq.n	800a2a4 <prvTaskExitError+0x30>
	__asm volatile
 800a288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a28c:	b672      	cpsid	i
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	b662      	cpsie	i
 800a29c:	60fb      	str	r3, [r7, #12]
}
 800a29e:	bf00      	nop
 800a2a0:	bf00      	nop
 800a2a2:	e7fd      	b.n	800a2a0 <prvTaskExitError+0x2c>
	__asm volatile
 800a2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a8:	b672      	cpsid	i
 800a2aa:	f383 8811 	msr	BASEPRI, r3
 800a2ae:	f3bf 8f6f 	isb	sy
 800a2b2:	f3bf 8f4f 	dsb	sy
 800a2b6:	b662      	cpsie	i
 800a2b8:	60bb      	str	r3, [r7, #8]
}
 800a2ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2bc:	bf00      	nop
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d0fc      	beq.n	800a2be <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2c4:	bf00      	nop
 800a2c6:	bf00      	nop
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	20000048 	.word	0x20000048
	...

0800a2e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2e0:	4b07      	ldr	r3, [pc, #28]	@ (800a300 <pxCurrentTCBConst2>)
 800a2e2:	6819      	ldr	r1, [r3, #0]
 800a2e4:	6808      	ldr	r0, [r1, #0]
 800a2e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ea:	f380 8809 	msr	PSP, r0
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f04f 0000 	mov.w	r0, #0
 800a2f6:	f380 8811 	msr	BASEPRI, r0
 800a2fa:	4770      	bx	lr
 800a2fc:	f3af 8000 	nop.w

0800a300 <pxCurrentTCBConst2>:
 800a300:	20000bc4 	.word	0x20000bc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop

0800a308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a308:	4808      	ldr	r0, [pc, #32]	@ (800a32c <prvPortStartFirstTask+0x24>)
 800a30a:	6800      	ldr	r0, [r0, #0]
 800a30c:	6800      	ldr	r0, [r0, #0]
 800a30e:	f380 8808 	msr	MSP, r0
 800a312:	f04f 0000 	mov.w	r0, #0
 800a316:	f380 8814 	msr	CONTROL, r0
 800a31a:	b662      	cpsie	i
 800a31c:	b661      	cpsie	f
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	f3bf 8f6f 	isb	sy
 800a326:	df00      	svc	0
 800a328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a32a:	bf00      	nop
 800a32c:	e000ed08 	.word	0xe000ed08

0800a330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b084      	sub	sp, #16
 800a334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a336:	4b37      	ldr	r3, [pc, #220]	@ (800a414 <xPortStartScheduler+0xe4>)
 800a338:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	22ff      	movs	r2, #255	@ 0xff
 800a346:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	4b2f      	ldr	r3, [pc, #188]	@ (800a418 <xPortStartScheduler+0xe8>)
 800a35c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a35e:	4b2f      	ldr	r3, [pc, #188]	@ (800a41c <xPortStartScheduler+0xec>)
 800a360:	2207      	movs	r2, #7
 800a362:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a364:	e009      	b.n	800a37a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a366:	4b2d      	ldr	r3, [pc, #180]	@ (800a41c <xPortStartScheduler+0xec>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	4a2b      	ldr	r2, [pc, #172]	@ (800a41c <xPortStartScheduler+0xec>)
 800a36e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	b2db      	uxtb	r3, r3
 800a374:	005b      	lsls	r3, r3, #1
 800a376:	b2db      	uxtb	r3, r3
 800a378:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a382:	2b80      	cmp	r3, #128	@ 0x80
 800a384:	d0ef      	beq.n	800a366 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a386:	4b25      	ldr	r3, [pc, #148]	@ (800a41c <xPortStartScheduler+0xec>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f1c3 0307 	rsb	r3, r3, #7
 800a38e:	2b04      	cmp	r3, #4
 800a390:	d00d      	beq.n	800a3ae <xPortStartScheduler+0x7e>
	__asm volatile
 800a392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a396:	b672      	cpsid	i
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	b662      	cpsie	i
 800a3a6:	60bb      	str	r3, [r7, #8]
}
 800a3a8:	bf00      	nop
 800a3aa:	bf00      	nop
 800a3ac:	e7fd      	b.n	800a3aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a41c <xPortStartScheduler+0xec>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	021b      	lsls	r3, r3, #8
 800a3b4:	4a19      	ldr	r2, [pc, #100]	@ (800a41c <xPortStartScheduler+0xec>)
 800a3b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3b8:	4b18      	ldr	r3, [pc, #96]	@ (800a41c <xPortStartScheduler+0xec>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3c0:	4a16      	ldr	r2, [pc, #88]	@ (800a41c <xPortStartScheduler+0xec>)
 800a3c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3cc:	4b14      	ldr	r3, [pc, #80]	@ (800a420 <xPortStartScheduler+0xf0>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a13      	ldr	r2, [pc, #76]	@ (800a420 <xPortStartScheduler+0xf0>)
 800a3d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3d8:	4b11      	ldr	r3, [pc, #68]	@ (800a420 <xPortStartScheduler+0xf0>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a10      	ldr	r2, [pc, #64]	@ (800a420 <xPortStartScheduler+0xf0>)
 800a3de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3e4:	f000 f8dc 	bl	800a5a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800a424 <xPortStartScheduler+0xf4>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3ee:	f000 f8fb 	bl	800a5e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a428 <xPortStartScheduler+0xf8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a0c      	ldr	r2, [pc, #48]	@ (800a428 <xPortStartScheduler+0xf8>)
 800a3f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a3fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3fe:	f7ff ff83 	bl	800a308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a402:	f7ff fd67 	bl	8009ed4 <vTaskSwitchContext>
	prvTaskExitError();
 800a406:	f7ff ff35 	bl	800a274 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	e000e400 	.word	0xe000e400
 800a418:	20000cf0 	.word	0x20000cf0
 800a41c:	20000cf4 	.word	0x20000cf4
 800a420:	e000ed20 	.word	0xe000ed20
 800a424:	20000048 	.word	0x20000048
 800a428:	e000ef34 	.word	0xe000ef34

0800a42c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a436:	b672      	cpsid	i
 800a438:	f383 8811 	msr	BASEPRI, r3
 800a43c:	f3bf 8f6f 	isb	sy
 800a440:	f3bf 8f4f 	dsb	sy
 800a444:	b662      	cpsie	i
 800a446:	607b      	str	r3, [r7, #4]
}
 800a448:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a44a:	4b11      	ldr	r3, [pc, #68]	@ (800a490 <vPortEnterCritical+0x64>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	3301      	adds	r3, #1
 800a450:	4a0f      	ldr	r2, [pc, #60]	@ (800a490 <vPortEnterCritical+0x64>)
 800a452:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a454:	4b0e      	ldr	r3, [pc, #56]	@ (800a490 <vPortEnterCritical+0x64>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d112      	bne.n	800a482 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a45c:	4b0d      	ldr	r3, [pc, #52]	@ (800a494 <vPortEnterCritical+0x68>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00d      	beq.n	800a482 <vPortEnterCritical+0x56>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46a:	b672      	cpsid	i
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	b662      	cpsie	i
 800a47a:	603b      	str	r3, [r7, #0]
}
 800a47c:	bf00      	nop
 800a47e:	bf00      	nop
 800a480:	e7fd      	b.n	800a47e <vPortEnterCritical+0x52>
	}
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	20000048 	.word	0x20000048
 800a494:	e000ed04 	.word	0xe000ed04

0800a498 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a49e:	4b13      	ldr	r3, [pc, #76]	@ (800a4ec <vPortExitCritical+0x54>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10d      	bne.n	800a4c2 <vPortExitCritical+0x2a>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	b672      	cpsid	i
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	b662      	cpsie	i
 800a4ba:	607b      	str	r3, [r7, #4]
}
 800a4bc:	bf00      	nop
 800a4be:	bf00      	nop
 800a4c0:	e7fd      	b.n	800a4be <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a4c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4ec <vPortExitCritical+0x54>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	4a08      	ldr	r2, [pc, #32]	@ (800a4ec <vPortExitCritical+0x54>)
 800a4ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4cc:	4b07      	ldr	r3, [pc, #28]	@ (800a4ec <vPortExitCritical+0x54>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d105      	bne.n	800a4e0 <vPortExitCritical+0x48>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	20000048 	.word	0x20000048

0800a4f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4f0:	f3ef 8009 	mrs	r0, PSP
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	4b15      	ldr	r3, [pc, #84]	@ (800a550 <pxCurrentTCBConst>)
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	f01e 0f10 	tst.w	lr, #16
 800a500:	bf08      	it	eq
 800a502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50a:	6010      	str	r0, [r2, #0]
 800a50c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a514:	b672      	cpsid	i
 800a516:	f380 8811 	msr	BASEPRI, r0
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	b662      	cpsie	i
 800a524:	f7ff fcd6 	bl	8009ed4 <vTaskSwitchContext>
 800a528:	f04f 0000 	mov.w	r0, #0
 800a52c:	f380 8811 	msr	BASEPRI, r0
 800a530:	bc09      	pop	{r0, r3}
 800a532:	6819      	ldr	r1, [r3, #0]
 800a534:	6808      	ldr	r0, [r1, #0]
 800a536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53a:	f01e 0f10 	tst.w	lr, #16
 800a53e:	bf08      	it	eq
 800a540:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a544:	f380 8809 	msr	PSP, r0
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop

0800a550 <pxCurrentTCBConst>:
 800a550:	20000bc4 	.word	0x20000bc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a554:	bf00      	nop
 800a556:	bf00      	nop

0800a558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	b672      	cpsid	i
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	b662      	cpsie	i
 800a572:	607b      	str	r3, [r7, #4]
}
 800a574:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a576:	f7ff fbf1 	bl	8009d5c <xTaskIncrementTick>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a580:	4b06      	ldr	r3, [pc, #24]	@ (800a59c <SysTick_Handler+0x44>)
 800a582:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a586:	601a      	str	r2, [r3, #0]
 800a588:	2300      	movs	r3, #0
 800a58a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	f383 8811 	msr	BASEPRI, r3
}
 800a592:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a594:	bf00      	nop
 800a596:	3708      	adds	r7, #8
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	e000ed04 	.word	0xe000ed04

0800a5a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d4 <vPortSetupTimerInterrupt+0x34>)
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d8 <vPortSetupTimerInterrupt+0x38>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800a5dc <vPortSetupTimerInterrupt+0x3c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a0a      	ldr	r2, [pc, #40]	@ (800a5e0 <vPortSetupTimerInterrupt+0x40>)
 800a5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ba:	099b      	lsrs	r3, r3, #6
 800a5bc:	4a09      	ldr	r2, [pc, #36]	@ (800a5e4 <vPortSetupTimerInterrupt+0x44>)
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5c2:	4b04      	ldr	r3, [pc, #16]	@ (800a5d4 <vPortSetupTimerInterrupt+0x34>)
 800a5c4:	2207      	movs	r2, #7
 800a5c6:	601a      	str	r2, [r3, #0]
}
 800a5c8:	bf00      	nop
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	e000e010 	.word	0xe000e010
 800a5d8:	e000e018 	.word	0xe000e018
 800a5dc:	2000003c 	.word	0x2000003c
 800a5e0:	10624dd3 	.word	0x10624dd3
 800a5e4:	e000e014 	.word	0xe000e014

0800a5e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5e8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a5f8 <vPortEnableVFP+0x10>
 800a5ec:	6801      	ldr	r1, [r0, #0]
 800a5ee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5f2:	6001      	str	r1, [r0, #0]
 800a5f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5f6:	bf00      	nop
 800a5f8:	e000ed88 	.word	0xe000ed88

0800a5fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08a      	sub	sp, #40	@ 0x28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a608:	f7ff fafa 	bl	8009c00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a60c:	4b5d      	ldr	r3, [pc, #372]	@ (800a784 <pvPortMalloc+0x188>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a614:	f000 f920 	bl	800a858 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a618:	4b5b      	ldr	r3, [pc, #364]	@ (800a788 <pvPortMalloc+0x18c>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	f040 8094 	bne.w	800a74e <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d020      	beq.n	800a66e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800a62c:	2208      	movs	r2, #8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4413      	add	r3, r2
 800a632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f003 0307 	and.w	r3, r3, #7
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d017      	beq.n	800a66e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f023 0307 	bic.w	r3, r3, #7
 800a644:	3308      	adds	r3, #8
 800a646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f003 0307 	and.w	r3, r3, #7
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00d      	beq.n	800a66e <pvPortMalloc+0x72>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a656:	b672      	cpsid	i
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	b662      	cpsie	i
 800a666:	617b      	str	r3, [r7, #20]
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	e7fd      	b.n	800a66a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d06c      	beq.n	800a74e <pvPortMalloc+0x152>
 800a674:	4b45      	ldr	r3, [pc, #276]	@ (800a78c <pvPortMalloc+0x190>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d867      	bhi.n	800a74e <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a67e:	4b44      	ldr	r3, [pc, #272]	@ (800a790 <pvPortMalloc+0x194>)
 800a680:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a682:	4b43      	ldr	r3, [pc, #268]	@ (800a790 <pvPortMalloc+0x194>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a688:	e004      	b.n	800a694 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800a68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d903      	bls.n	800a6a6 <pvPortMalloc+0xaa>
 800a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1f1      	bne.n	800a68a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6a6:	4b37      	ldr	r3, [pc, #220]	@ (800a784 <pvPortMalloc+0x188>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d04e      	beq.n	800a74e <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	2208      	movs	r2, #8
 800a6b6:	4413      	add	r3, r2
 800a6b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	685a      	ldr	r2, [r3, #4]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	1ad2      	subs	r2, r2, r3
 800a6ca:	2308      	movs	r3, #8
 800a6cc:	005b      	lsls	r3, r3, #1
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d922      	bls.n	800a718 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	f003 0307 	and.w	r3, r3, #7
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00d      	beq.n	800a700 <pvPortMalloc+0x104>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e8:	b672      	cpsid	i
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	b662      	cpsie	i
 800a6f8:	613b      	str	r3, [r7, #16]
}
 800a6fa:	bf00      	nop
 800a6fc:	bf00      	nop
 800a6fe:	e7fd      	b.n	800a6fc <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	1ad2      	subs	r2, r2, r3
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a712:	69b8      	ldr	r0, [r7, #24]
 800a714:	f000 f902 	bl	800a91c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a718:	4b1c      	ldr	r3, [pc, #112]	@ (800a78c <pvPortMalloc+0x190>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	4a1a      	ldr	r2, [pc, #104]	@ (800a78c <pvPortMalloc+0x190>)
 800a724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a726:	4b19      	ldr	r3, [pc, #100]	@ (800a78c <pvPortMalloc+0x190>)
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	4b1a      	ldr	r3, [pc, #104]	@ (800a794 <pvPortMalloc+0x198>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d203      	bcs.n	800a73a <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a732:	4b16      	ldr	r3, [pc, #88]	@ (800a78c <pvPortMalloc+0x190>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a17      	ldr	r2, [pc, #92]	@ (800a794 <pvPortMalloc+0x198>)
 800a738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	4b12      	ldr	r3, [pc, #72]	@ (800a788 <pvPortMalloc+0x18c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	431a      	orrs	r2, r3
 800a744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74a:	2200      	movs	r2, #0
 800a74c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a74e:	f7ff fa65 	bl	8009c1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	f003 0307 	and.w	r3, r3, #7
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00d      	beq.n	800a778 <pvPortMalloc+0x17c>
	__asm volatile
 800a75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a760:	b672      	cpsid	i
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	b662      	cpsie	i
 800a770:	60fb      	str	r3, [r7, #12]
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	e7fd      	b.n	800a774 <pvPortMalloc+0x178>
	return pvReturn;
 800a778:	69fb      	ldr	r3, [r7, #28]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3728      	adds	r7, #40	@ 0x28
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20004900 	.word	0x20004900
 800a788:	2000490c 	.word	0x2000490c
 800a78c:	20004904 	.word	0x20004904
 800a790:	200048f8 	.word	0x200048f8
 800a794:	20004908 	.word	0x20004908

0800a798 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d04e      	beq.n	800a848 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7aa:	2308      	movs	r3, #8
 800a7ac:	425b      	negs	r3, r3
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	685a      	ldr	r2, [r3, #4]
 800a7bc:	4b24      	ldr	r3, [pc, #144]	@ (800a850 <vPortFree+0xb8>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10d      	bne.n	800a7e2 <vPortFree+0x4a>
	__asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	b672      	cpsid	i
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	b662      	cpsie	i
 800a7da:	60fb      	str	r3, [r7, #12]
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	e7fd      	b.n	800a7de <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <vPortFree+0x6e>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ee:	b672      	cpsid	i
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	b662      	cpsie	i
 800a7fe:	60bb      	str	r3, [r7, #8]
}
 800a800:	bf00      	nop
 800a802:	bf00      	nop
 800a804:	e7fd      	b.n	800a802 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	685a      	ldr	r2, [r3, #4]
 800a80a:	4b11      	ldr	r3, [pc, #68]	@ (800a850 <vPortFree+0xb8>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4013      	ands	r3, r2
 800a810:	2b00      	cmp	r3, #0
 800a812:	d019      	beq.n	800a848 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d115      	bne.n	800a848 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	4b0b      	ldr	r3, [pc, #44]	@ (800a850 <vPortFree+0xb8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	43db      	mvns	r3, r3
 800a826:	401a      	ands	r2, r3
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a82c:	f7ff f9e8 	bl	8009c00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	685a      	ldr	r2, [r3, #4]
 800a834:	4b07      	ldr	r3, [pc, #28]	@ (800a854 <vPortFree+0xbc>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4413      	add	r3, r2
 800a83a:	4a06      	ldr	r2, [pc, #24]	@ (800a854 <vPortFree+0xbc>)
 800a83c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a83e:	6938      	ldr	r0, [r7, #16]
 800a840:	f000 f86c 	bl	800a91c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a844:	f7ff f9ea 	bl	8009c1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a848:	bf00      	nop
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	2000490c 	.word	0x2000490c
 800a854:	20004904 	.word	0x20004904

0800a858 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a85e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a862:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a864:	4b27      	ldr	r3, [pc, #156]	@ (800a904 <prvHeapInit+0xac>)
 800a866:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f003 0307 	and.w	r3, r3, #7
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00c      	beq.n	800a88c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3307      	adds	r3, #7
 800a876:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f023 0307 	bic.w	r3, r3, #7
 800a87e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	4a1f      	ldr	r2, [pc, #124]	@ (800a904 <prvHeapInit+0xac>)
 800a888:	4413      	add	r3, r2
 800a88a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a890:	4a1d      	ldr	r2, [pc, #116]	@ (800a908 <prvHeapInit+0xb0>)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a896:	4b1c      	ldr	r3, [pc, #112]	@ (800a908 <prvHeapInit+0xb0>)
 800a898:	2200      	movs	r2, #0
 800a89a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8a4:	2208      	movs	r2, #8
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	1a9b      	subs	r3, r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f023 0307 	bic.w	r3, r3, #7
 800a8b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4a15      	ldr	r2, [pc, #84]	@ (800a90c <prvHeapInit+0xb4>)
 800a8b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8ba:	4b14      	ldr	r3, [pc, #80]	@ (800a90c <prvHeapInit+0xb4>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8c2:	4b12      	ldr	r3, [pc, #72]	@ (800a90c <prvHeapInit+0xb4>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <prvHeapInit+0xb4>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	4a0a      	ldr	r2, [pc, #40]	@ (800a910 <prvHeapInit+0xb8>)
 800a8e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	4a09      	ldr	r2, [pc, #36]	@ (800a914 <prvHeapInit+0xbc>)
 800a8ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8f0:	4b09      	ldr	r3, [pc, #36]	@ (800a918 <prvHeapInit+0xc0>)
 800a8f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a8f6:	601a      	str	r2, [r3, #0]
}
 800a8f8:	bf00      	nop
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	20000cf8 	.word	0x20000cf8
 800a908:	200048f8 	.word	0x200048f8
 800a90c:	20004900 	.word	0x20004900
 800a910:	20004908 	.word	0x20004908
 800a914:	20004904 	.word	0x20004904
 800a918:	2000490c 	.word	0x2000490c

0800a91c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a924:	4b28      	ldr	r3, [pc, #160]	@ (800a9c8 <prvInsertBlockIntoFreeList+0xac>)
 800a926:	60fb      	str	r3, [r7, #12]
 800a928:	e002      	b.n	800a930 <prvInsertBlockIntoFreeList+0x14>
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	429a      	cmp	r2, r3
 800a938:	d8f7      	bhi.n	800a92a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	4413      	add	r3, r2
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d108      	bne.n	800a95e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	685a      	ldr	r2, [r3, #4]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	441a      	add	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	441a      	add	r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d118      	bne.n	800a9a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	4b15      	ldr	r3, [pc, #84]	@ (800a9cc <prvInsertBlockIntoFreeList+0xb0>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d00d      	beq.n	800a99a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	441a      	add	r2, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	e008      	b.n	800a9ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a99a:	4b0c      	ldr	r3, [pc, #48]	@ (800a9cc <prvInsertBlockIntoFreeList+0xb0>)
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	e003      	b.n	800a9ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9ac:	68fa      	ldr	r2, [r7, #12]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d002      	beq.n	800a9ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	200048f8 	.word	0x200048f8
 800a9cc:	20004900 	.word	0x20004900

0800a9d0 <memset>:
 800a9d0:	4402      	add	r2, r0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d100      	bne.n	800a9da <memset+0xa>
 800a9d8:	4770      	bx	lr
 800a9da:	f803 1b01 	strb.w	r1, [r3], #1
 800a9de:	e7f9      	b.n	800a9d4 <memset+0x4>

0800a9e0 <__libc_init_array>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	4d0d      	ldr	r5, [pc, #52]	@ (800aa18 <__libc_init_array+0x38>)
 800a9e4:	4c0d      	ldr	r4, [pc, #52]	@ (800aa1c <__libc_init_array+0x3c>)
 800a9e6:	1b64      	subs	r4, r4, r5
 800a9e8:	10a4      	asrs	r4, r4, #2
 800a9ea:	2600      	movs	r6, #0
 800a9ec:	42a6      	cmp	r6, r4
 800a9ee:	d109      	bne.n	800aa04 <__libc_init_array+0x24>
 800a9f0:	4d0b      	ldr	r5, [pc, #44]	@ (800aa20 <__libc_init_array+0x40>)
 800a9f2:	4c0c      	ldr	r4, [pc, #48]	@ (800aa24 <__libc_init_array+0x44>)
 800a9f4:	f000 f818 	bl	800aa28 <_init>
 800a9f8:	1b64      	subs	r4, r4, r5
 800a9fa:	10a4      	asrs	r4, r4, #2
 800a9fc:	2600      	movs	r6, #0
 800a9fe:	42a6      	cmp	r6, r4
 800aa00:	d105      	bne.n	800aa0e <__libc_init_array+0x2e>
 800aa02:	bd70      	pop	{r4, r5, r6, pc}
 800aa04:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa08:	4798      	blx	r3
 800aa0a:	3601      	adds	r6, #1
 800aa0c:	e7ee      	b.n	800a9ec <__libc_init_array+0xc>
 800aa0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa12:	4798      	blx	r3
 800aa14:	3601      	adds	r6, #1
 800aa16:	e7f2      	b.n	800a9fe <__libc_init_array+0x1e>
 800aa18:	0800fa50 	.word	0x0800fa50
 800aa1c:	0800fa50 	.word	0x0800fa50
 800aa20:	0800fa50 	.word	0x0800fa50
 800aa24:	0800fa54 	.word	0x0800fa54

0800aa28 <_init>:
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	bf00      	nop
 800aa2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2e:	bc08      	pop	{r3}
 800aa30:	469e      	mov	lr, r3
 800aa32:	4770      	bx	lr

0800aa34 <_fini>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	bf00      	nop
 800aa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3a:	bc08      	pop	{r3}
 800aa3c:	469e      	mov	lr, r3
 800aa3e:	4770      	bx	lr
