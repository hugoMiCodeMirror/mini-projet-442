
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011158  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e5b0  08011328  08011328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f8d8  0801f8d8  000210b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801f8d8  0801f8d8  000208d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f8e0  0801f8e0  000210b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f8e0  0801f8e0  000208e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f8e4  0801f8e4  000208e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0801f8e8  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c1c  200000b4  0801f99c  000210b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd0  0801f99c  00021cd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030c0b  00000000  00000000  000210e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007669  00000000  00000000  00051cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002878  00000000  00000000  00059358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f25  00000000  00000000  0005bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031a0e  00000000  00000000  0005daf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033dd9  00000000  00000000  0008f503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001175e1  00000000  00000000  000c32dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001da8bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b308  00000000  00000000  001da900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001e5c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011310 	.word	0x08011310

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	08011310 	.word	0x08011310

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8e:	4b21      	ldr	r3, [pc, #132]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d90:	4a21      	ldr	r2, [pc, #132]	@ (8000e18 <MX_ADC1_Init+0x9c>)
 8000d92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dbe:	4a17      	ldr	r2, [pc, #92]	@ (8000e1c <MX_ADC1_Init+0xa0>)
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ddc:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dde:	f004 fda9 	bl	8005934 <HAL_ADC_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000de8:	f002 fb12 	bl	8003410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_ADC1_Init+0x98>)
 8000dfe:	f004 ff43 	bl	8005c88 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e08:	f002 fb02 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	0f000001 	.word	0x0f000001

08000e20 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e34:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_ADC3_Init+0x9c>)
 8000e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e38:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e3a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e60:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e62:	4a17      	ldr	r2, [pc, #92]	@ (8000ec0 <MX_ADC3_Init+0xa0>)
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e66:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e80:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000e82:	f004 fd57 	bl	8005934 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e8c:	f002 fac0 	bl	8003410 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e90:	2306      	movs	r3, #6
 8000e92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e94:	2301      	movs	r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_ADC3_Init+0x98>)
 8000ea2:	f004 fef1 	bl	8005c88 <HAL_ADC_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000eac:	f002 fab0 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000118 	.word	0x20000118
 8000ebc:	40012200 	.word	0x40012200
 8000ec0:	0f000001 	.word	0x0f000001

08000ec4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08c      	sub	sp, #48	@ 0x30
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f8c <HAL_ADC_MspInit+0xc8>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d124      	bne.n	8000f30 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	4a29      	ldr	r2, [pc, #164]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef2:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b24      	ldr	r3, [pc, #144]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	4a23      	ldr	r2, [pc, #140]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f16:	2301      	movs	r3, #1
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481a      	ldr	r0, [pc, #104]	@ (8000f94 <HAL_ADC_MspInit+0xd0>)
 8000f2a:	f006 f95d 	bl	80071e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000f2e:	e029      	b.n	8000f84 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a18      	ldr	r2, [pc, #96]	@ (8000f98 <HAL_ADC_MspInit+0xd4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d124      	bne.n	8000f84 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3e:	4a14      	ldr	r2, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f52:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f58:	f043 0320 	orr.w	r3, r3, #32
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_ADC_MspInit+0xcc>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0320 	and.w	r3, r3, #32
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f6a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <HAL_ADC_MspInit+0xd8>)
 8000f80:	f006 f932 	bl	80071e8 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	@ 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000
 8000f98:	40012200 	.word	0x40012200
 8000f9c:	40021400 	.word	0x40021400

08000fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fa6:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a17      	ldr	r2, [pc, #92]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <MX_DMA_Init+0x68>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2105      	movs	r1, #5
 8000fc2:	203b      	movs	r0, #59	@ 0x3b
 8000fc4:	f005 f968 	bl	8006298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000fc8:	203b      	movs	r0, #59	@ 0x3b
 8000fca:	f005 f981 	bl	80062d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	203c      	movs	r0, #60	@ 0x3c
 8000fd4:	f005 f960 	bl	8006298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000fd8:	203c      	movs	r0, #60	@ 0x3c
 8000fda:	f005 f979 	bl	80062d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2045      	movs	r0, #69	@ 0x45
 8000fe4:	f005 f958 	bl	8006298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000fe8:	2045      	movs	r0, #69	@ 0x45
 8000fea:	f005 f971 	bl	80062d0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2105      	movs	r1, #5
 8000ff2:	2046      	movs	r0, #70	@ 0x46
 8000ff4:	f005 f950 	bl	8006298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ff8:	2046      	movs	r0, #70	@ 0x46
 8000ffa:	f005 f969 	bl	80062d0 <HAL_NVIC_EnableIRQ>

}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <MX_DMA2D_Init+0x60>)
 8001014:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001028:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800103a:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001040:	4809      	ldr	r0, [pc, #36]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001042:	f005 fd35 	bl	8006ab0 <HAL_DMA2D_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800104c:	f002 f9e0 	bl	8003410 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001050:	2101      	movs	r1, #1
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <MX_DMA2D_Init+0x5c>)
 8001054:	f005 ff9a 	bl	8006f8c <HAL_DMA2D_ConfigLayer>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800105e:	f002 f9d7 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000160 	.word	0x20000160
 800106c:	4002b000 	.word	0x4002b000

08001070 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0d      	ldr	r2, [pc, #52]	@ (80010b4 <HAL_DMA2D_MspInit+0x44>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d113      	bne.n	80010aa <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001082:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001088:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <HAL_DMA2D_MspInit+0x48>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2105      	movs	r1, #5
 800109e:	205a      	movs	r0, #90	@ 0x5a
 80010a0:	f005 f8fa 	bl	8006298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010a4:	205a      	movs	r0, #90	@ 0x5a
 80010a6:	f005 f913 	bl	80062d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	4002b000 	.word	0x4002b000
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_FMC_Init+0x98>)
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_FMC_Init+0x9c>)
 80010d8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_FMC_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_FMC_Init+0x98>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_FMC_Init+0x98>)
 80010ee:	2210      	movs	r2, #16
 80010f0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_FMC_Init+0x98>)
 80010f4:	2240      	movs	r2, #64	@ 0x40
 80010f6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <MX_FMC_Init+0x98>)
 80010fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80010fe:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_FMC_Init+0x98>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <MX_FMC_Init+0x98>)
 8001108:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800110c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_FMC_Init+0x98>)
 8001110:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_FMC_Init+0x98>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800111c:	2302      	movs	r3, #2
 800111e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001120:	2307      	movs	r3, #7
 8001122:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001128:	2307      	movs	r3, #7
 800112a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800112c:	2303      	movs	r3, #3
 800112e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_FMC_Init+0x98>)
 800113e:	f009 fdf3 	bl	800ad28 <HAL_SDRAM_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001148:	f002 f962 	bl	8003410 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001a0 	.word	0x200001a0
 8001158:	a0000140 	.word	0xa0000140

0800115c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001170:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <HAL_FMC_MspInit+0x100>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d16d      	bne.n	8001254 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001178:	4b38      	ldr	r3, [pc, #224]	@ (800125c <HAL_FMC_MspInit+0x100>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001182:	4a37      	ldr	r2, [pc, #220]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6393      	str	r3, [r2, #56]	@ 0x38
 800118a:	4b35      	ldr	r3, [pc, #212]	@ (8001260 <HAL_FMC_MspInit+0x104>)
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001196:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800119a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a8:	230c      	movs	r3, #12
 80011aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	482c      	ldr	r0, [pc, #176]	@ (8001264 <HAL_FMC_MspInit+0x108>)
 80011b2:	f006 f819 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80011b6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80011ba:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c8:	230c      	movs	r3, #12
 80011ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4825      	ldr	r0, [pc, #148]	@ (8001268 <HAL_FMC_MspInit+0x10c>)
 80011d2:	f006 f809 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80011d6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80011da:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e8:	230c      	movs	r3, #12
 80011ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	481e      	ldr	r0, [pc, #120]	@ (800126c <HAL_FMC_MspInit+0x110>)
 80011f2:	f005 fff9 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80011f6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80011fa:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001208:	230c      	movs	r3, #12
 800120a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	4817      	ldr	r0, [pc, #92]	@ (8001270 <HAL_FMC_MspInit+0x114>)
 8001212:	f005 ffe9 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8001216:	2328      	movs	r3, #40	@ 0x28
 8001218:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001222:	2303      	movs	r3, #3
 8001224:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001226:	230c      	movs	r3, #12
 8001228:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	@ (8001274 <HAL_FMC_MspInit+0x118>)
 8001230:	f005 ffda 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8001234:	2308      	movs	r3, #8
 8001236:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001240:	2303      	movs	r3, #3
 8001242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001244:	230c      	movs	r3, #12
 8001246:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	480a      	ldr	r0, [pc, #40]	@ (8001278 <HAL_FMC_MspInit+0x11c>)
 800124e:	f005 ffcb 	bl	80071e8 <HAL_GPIO_Init>
 8001252:	e000      	b.n	8001256 <HAL_FMC_MspInit+0xfa>
    return;
 8001254:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001d4 	.word	0x200001d4
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40021800 	.word	0x40021800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021400 	.word	0x40021400
 8001274:	40021c00 	.word	0x40021c00
 8001278:	40020800 	.word	0x40020800

0800127c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001284:	f7ff ff6a 	bl	800115c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a07      	ldr	r2, [pc, #28]	@ (80012bc <vApplicationGetIdleTaskMemory+0x2c>)
 80012a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <vApplicationGetIdleTaskMemory+0x30>)
 80012a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200003b8 	.word	0x200003b8
 80012c0:	20000458 	.word	0x20000458

080012c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b0a6      	sub	sp, #152	@ 0x98
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 80012d6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012da:	4618      	mov	r0, r3
 80012dc:	f00c f82e 	bl	800d33c <osMutexCreate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a31      	ldr	r2, [pc, #196]	@ (80013a8 <MX_FREERTOS_Init+0xe4>)
 80012e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <MX_FREERTOS_Init+0xe8>)
 80012e8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80012ec:	461d      	mov	r5, r3
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f00b ffbb 	bl	800d27c <osThreadCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	4a29      	ldr	r2, [pc, #164]	@ (80013b0 <MX_FREERTOS_Init+0xec>)
 800130a:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 800130c:	4b29      	ldr	r3, [pc, #164]	@ (80013b4 <MX_FREERTOS_Init+0xf0>)
 800130e:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001312:	461d      	mov	r5, r3
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800131c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8001320:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f00b ffa8 	bl	800d27c <osThreadCreate>
 800132c:	4603      	mov	r3, r0
 800132e:	4a22      	ldr	r2, [pc, #136]	@ (80013b8 <MX_FREERTOS_Init+0xf4>)
 8001330:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8001332:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <MX_FREERTOS_Init+0xf8>)
 8001334:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001338:	461d      	mov	r5, r3
 800133a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800133c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8001346:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f00b ff95 	bl	800d27c <osThreadCreate>
 8001352:	4603      	mov	r3, r0
 8001354:	4a1a      	ldr	r2, [pc, #104]	@ (80013c0 <MX_FREERTOS_Init+0xfc>)
 8001356:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_FREERTOS_Init+0x100>)
 800135a:	f107 0420 	add.w	r4, r7, #32
 800135e:	461d      	mov	r5, r3
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f00b ff82 	bl	800d27c <osThreadCreate>
 8001378:	4603      	mov	r3, r0
 800137a:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <MX_FREERTOS_Init+0x104>)
 800137c:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_FREERTOS_Init+0x108>)
 8001380:	1d3c      	adds	r4, r7, #4
 8001382:	461d      	mov	r5, r3
 8001384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001388:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f00b ff71 	bl	800d27c <osThreadCreate>
 800139a:	4603      	mov	r3, r0
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <MX_FREERTOS_Init+0x10c>)
 800139e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80013a0:	bf00      	nop
 80013a2:	3798      	adds	r7, #152	@ 0x98
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bdb0      	pop	{r4, r5, r7, pc}
 80013a8:	200003b4 	.word	0x200003b4
 80013ac:	08011334 	.word	0x08011334
 80013b0:	200003a0 	.word	0x200003a0
 80013b4:	0801135c 	.word	0x0801135c
 80013b8:	200003a4 	.word	0x200003a4
 80013bc:	08011388 	.word	0x08011388
 80013c0:	200003a8 	.word	0x200003a8
 80013c4:	080113b4 	.word	0x080113b4
 80013c8:	200003ac 	.word	0x200003ac
 80013cc:	080113e0 	.word	0x080113e0
 80013d0:	200003b0 	.word	0x200003b0

080013d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f00b ff99 	bl	800d314 <osDelay>
 80013e2:	e7fb      	b.n	80013dc <StartDefaultTask+0x8>

080013e4 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0d0      	sub	sp, #320	@ 0x140
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013f2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 80013f4:	4bc0      	ldr	r3, [pc, #768]	@ (80016f8 <StartDisplayTask+0x314>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d107      	bne.n	800140c <StartDisplayTask+0x28>
 80013fc:	4bbf      	ldr	r3, [pc, #764]	@ (80016fc <StartDisplayTask+0x318>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d103      	bne.n	800140c <StartDisplayTask+0x28>
 8001404:	4bbe      	ldr	r3, [pc, #760]	@ (8001700 <StartDisplayTask+0x31c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d114      	bne.n	8001436 <StartDisplayTask+0x52>
 800140c:	4bbd      	ldr	r3, [pc, #756]	@ (8001704 <StartDisplayTask+0x320>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d110      	bne.n	8001436 <StartDisplayTask+0x52>
      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001414:	4bbc      	ldr	r3, [pc, #752]	@ (8001708 <StartDisplayTask+0x324>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800141c:	4618      	mov	r0, r3
 800141e:	f00c fd6d 	bl	800defc <xQueueSemaphoreTake>
      displayGameStatus();
 8001422:	f000 ff7b 	bl	800231c <displayGameStatus>
      xSemaphoreGive(displayMutexHandle);
 8001426:	4bb8      	ldr	r3, [pc, #736]	@ (8001708 <StartDisplayTask+0x324>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	2200      	movs	r2, #0
 800142e:	2100      	movs	r1, #0
 8001430:	f00c face 	bl	800d9d0 <xQueueGenericSend>
 8001434:	e223      	b.n	800187e <StartDisplayTask+0x49a>
    }
    else {
      // On convertit la direction en texte
      char directionText[100];
      switch (direction) {
 8001436:	4bb5      	ldr	r3, [pc, #724]	@ (800170c <StartDisplayTask+0x328>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d826      	bhi.n	800148c <StartDisplayTask+0xa8>
 800143e:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <StartDisplayTask+0x60>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	08001463 	.word	0x08001463
 800144c:	08001471 	.word	0x08001471
 8001450:	0800147f 	.word	0x0800147f
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	49ad      	ldr	r1, [pc, #692]	@ (8001710 <StartDisplayTask+0x32c>)
 800145a:	4618      	mov	r0, r3
 800145c:	f00e fe4e 	bl	80100fc <siprintf>
          break;
 8001460:	e014      	b.n	800148c <StartDisplayTask+0xa8>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	49ab      	ldr	r1, [pc, #684]	@ (8001714 <StartDisplayTask+0x330>)
 8001468:	4618      	mov	r0, r3
 800146a:	f00e fe47 	bl	80100fc <siprintf>
          break;
 800146e:	e00d      	b.n	800148c <StartDisplayTask+0xa8>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	49a8      	ldr	r1, [pc, #672]	@ (8001718 <StartDisplayTask+0x334>)
 8001476:	4618      	mov	r0, r3
 8001478:	f00e fe40 	bl	80100fc <siprintf>
          break;
 800147c:	e006      	b.n	800148c <StartDisplayTask+0xa8>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	49a6      	ldr	r1, [pc, #664]	@ (800171c <StartDisplayTask+0x338>)
 8001484:	4618      	mov	r0, r3
 8001486:	f00e fe39 	bl	80100fc <siprintf>
          break;
 800148a:	bf00      	nop
      }
      // On convertit le score en texte
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 800148c:	4ba4      	ldr	r3, [pc, #656]	@ (8001720 <StartDisplayTask+0x33c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001496:	49a3      	ldr	r1, [pc, #652]	@ (8001724 <StartDisplayTask+0x340>)
 8001498:	4618      	mov	r0, r3
 800149a:	f00e fe2f 	bl	80100fc <siprintf>

      // On convertit la vitesse en texte
      char speedText[100];
      sprintf(speedText, (char *)"Speed: %d Hz", speed);
 800149e:	4ba2      	ldr	r3, [pc, #648]	@ (8001728 <StartDisplayTask+0x344>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014a8:	49a0      	ldr	r1, [pc, #640]	@ (800172c <StartDisplayTask+0x348>)
 80014aa:	4618      	mov	r0, r3
 80014ac:	f00e fe26 	bl	80100fc <siprintf>

      xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 80014b0:	4b95      	ldr	r3, [pc, #596]	@ (8001708 <StartDisplayTask+0x324>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00c fd1f 	bl	800defc <xQueueSemaphoreTake>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80014be:	489c      	ldr	r0, [pc, #624]	@ (8001730 <StartDisplayTask+0x34c>)
 80014c0:	f002 fce0 	bl	8003e84 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 80014c4:	f002 fc46 	bl	8003d54 <BSP_LCD_GetXSize>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014d2:	2000      	movs	r0, #0
 80014d4:	f002 fe56 	bl	8004184 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 80014d8:	f002 fc3c 	bl	8003d54 <BSP_LCD_GetXSize>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29b      	uxth	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	f240 1101 	movw	r1, #257	@ 0x101
 80014e6:	2000      	movs	r0, #0
 80014e8:	f002 fe4c 	bl	8004184 <BSP_LCD_DrawHLine>

      // On affiche la direction, le score et la vitesse
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 80014ec:	f107 020c 	add.w	r2, r7, #12
 80014f0:	2303      	movs	r3, #3
 80014f2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80014f6:	2000      	movs	r0, #0
 80014f8:	f002 fd7c 	bl	8003ff4 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 80014fc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8001500:	2303      	movs	r3, #3
 8001502:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001506:	20c8      	movs	r0, #200	@ 0xc8
 8001508:	f002 fd74 	bl	8003ff4 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(350, 8*32 + 2, (uint8_t *)speedText, LEFT_MODE);
 800150c:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8001510:	2303      	movs	r3, #3
 8001512:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8001516:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800151a:	f002 fd6b 	bl	8003ff4 <BSP_LCD_DisplayStringAt>

      // On affiche la tête du snake
      if (!lastMove)
 800151e:	4b79      	ldr	r3, [pc, #484]	@ (8001704 <StartDisplayTask+0x320>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d13e      	bne.n	80015a4 <StartDisplayTask+0x1c0>
        switch (headPart) {
 8001526:	4b83      	ldr	r3, [pc, #524]	@ (8001734 <StartDisplayTask+0x350>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d83a      	bhi.n	80015a4 <StartDisplayTask+0x1c0>
 800152e:	a201      	add	r2, pc, #4	@ (adr r2, 8001534 <StartDisplayTask+0x150>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	0800155d 	.word	0x0800155d
 8001538:	08001545 	.word	0x08001545
 800153c:	08001575 	.word	0x08001575
 8001540:	0800158d 	.word	0x0800158d
          case HeadBottom:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8001544:	4b7c      	ldr	r3, [pc, #496]	@ (8001738 <StartDisplayTask+0x354>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	4618      	mov	r0, r3
 800154c:	4b7a      	ldr	r3, [pc, #488]	@ (8001738 <StartDisplayTask+0x354>)
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	015b      	lsls	r3, r3, #5
 8001552:	4a7a      	ldr	r2, [pc, #488]	@ (800173c <StartDisplayTask+0x358>)
 8001554:	4619      	mov	r1, r3
 8001556:	f002 febb 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 800155a:	e023      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadTop:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 800155c:	4b76      	ldr	r3, [pc, #472]	@ (8001738 <StartDisplayTask+0x354>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	4618      	mov	r0, r3
 8001564:	4b74      	ldr	r3, [pc, #464]	@ (8001738 <StartDisplayTask+0x354>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	015b      	lsls	r3, r3, #5
 800156a:	4a75      	ldr	r2, [pc, #468]	@ (8001740 <StartDisplayTask+0x35c>)
 800156c:	4619      	mov	r1, r3
 800156e:	f002 feaf 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 8001572:	e017      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadLeft:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 8001574:	4b70      	ldr	r3, [pc, #448]	@ (8001738 <StartDisplayTask+0x354>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	015b      	lsls	r3, r3, #5
 800157a:	4618      	mov	r0, r3
 800157c:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <StartDisplayTask+0x354>)
 800157e:	785b      	ldrb	r3, [r3, #1]
 8001580:	015b      	lsls	r3, r3, #5
 8001582:	4a70      	ldr	r2, [pc, #448]	@ (8001744 <StartDisplayTask+0x360>)
 8001584:	4619      	mov	r1, r3
 8001586:	f002 fea3 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 800158a:	e00b      	b.n	80015a4 <StartDisplayTask+0x1c0>
          case HeadRight:
            BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 800158c:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <StartDisplayTask+0x354>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	015b      	lsls	r3, r3, #5
 8001592:	4618      	mov	r0, r3
 8001594:	4b68      	ldr	r3, [pc, #416]	@ (8001738 <StartDisplayTask+0x354>)
 8001596:	785b      	ldrb	r3, [r3, #1]
 8001598:	015b      	lsls	r3, r3, #5
 800159a:	4a6b      	ldr	r2, [pc, #428]	@ (8001748 <StartDisplayTask+0x364>)
 800159c:	4619      	mov	r1, r3
 800159e:	f002 fe97 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 80015a2:	bf00      	nop
        }

      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80015aa:	e08e      	b.n	80016ca <StartDisplayTask+0x2e6>
        switch (snakeBodyParts[i]) {
 80015ac:	4a67      	ldr	r2, [pc, #412]	@ (800174c <StartDisplayTask+0x368>)
 80015ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	f200 8082 	bhi.w	80016c0 <StartDisplayTask+0x2dc>
 80015bc:	a201      	add	r2, pc, #4	@ (adr r2, 80015c4 <StartDisplayTask+0x1e0>)
 80015be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c2:	bf00      	nop
 80015c4:	080015dd 	.word	0x080015dd
 80015c8:	08001603 	.word	0x08001603
 80015cc:	08001629 	.word	0x08001629
 80015d0:	0800164f 	.word	0x0800164f
 80015d4:	08001675 	.word	0x08001675
 80015d8:	0800169b 	.word	0x0800169b
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 80015dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001750 <StartDisplayTask+0x36c>)
 80015de:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015e2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	4618      	mov	r0, r3
 80015ea:	4a59      	ldr	r2, [pc, #356]	@ (8001750 <StartDisplayTask+0x36c>)
 80015ec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	785b      	ldrb	r3, [r3, #1]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	4a56      	ldr	r2, [pc, #344]	@ (8001754 <StartDisplayTask+0x370>)
 80015fa:	4619      	mov	r1, r3
 80015fc:	f002 fe68 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 8001600:	e05e      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8001602:	4a53      	ldr	r2, [pc, #332]	@ (8001750 <StartDisplayTask+0x36c>)
 8001604:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001608:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	4618      	mov	r0, r3
 8001610:	4a4f      	ldr	r2, [pc, #316]	@ (8001750 <StartDisplayTask+0x36c>)
 8001612:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	785b      	ldrb	r3, [r3, #1]
 800161c:	015b      	lsls	r3, r3, #5
 800161e:	4a4e      	ldr	r2, [pc, #312]	@ (8001758 <StartDisplayTask+0x374>)
 8001620:	4619      	mov	r1, r3
 8001622:	f002 fe55 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 8001626:	e04b      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8001628:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <StartDisplayTask+0x36c>)
 800162a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800162e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	4618      	mov	r0, r3
 8001636:	4a46      	ldr	r2, [pc, #280]	@ (8001750 <StartDisplayTask+0x36c>)
 8001638:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	785b      	ldrb	r3, [r3, #1]
 8001642:	015b      	lsls	r3, r3, #5
 8001644:	4a45      	ldr	r2, [pc, #276]	@ (800175c <StartDisplayTask+0x378>)
 8001646:	4619      	mov	r1, r3
 8001648:	f002 fe42 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 800164c:	e038      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 800164e:	4a40      	ldr	r2, [pc, #256]	@ (8001750 <StartDisplayTask+0x36c>)
 8001650:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001654:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	4618      	mov	r0, r3
 800165c:	4a3c      	ldr	r2, [pc, #240]	@ (8001750 <StartDisplayTask+0x36c>)
 800165e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	785b      	ldrb	r3, [r3, #1]
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	4a3d      	ldr	r2, [pc, #244]	@ (8001760 <StartDisplayTask+0x37c>)
 800166c:	4619      	mov	r1, r3
 800166e:	f002 fe2f 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 8001672:	e025      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 8001674:	4a36      	ldr	r2, [pc, #216]	@ (8001750 <StartDisplayTask+0x36c>)
 8001676:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800167a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800167e:	015b      	lsls	r3, r3, #5
 8001680:	4618      	mov	r0, r3
 8001682:	4a33      	ldr	r2, [pc, #204]	@ (8001750 <StartDisplayTask+0x36c>)
 8001684:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	015b      	lsls	r3, r3, #5
 8001690:	4a34      	ldr	r2, [pc, #208]	@ (8001764 <StartDisplayTask+0x380>)
 8001692:	4619      	mov	r1, r3
 8001694:	f002 fe1c 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 8001698:	e012      	b.n	80016c0 <StartDisplayTask+0x2dc>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 800169a:	4a2d      	ldr	r2, [pc, #180]	@ (8001750 <StartDisplayTask+0x36c>)
 800169c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016a0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	4618      	mov	r0, r3
 80016a8:	4a29      	ldr	r2, [pc, #164]	@ (8001750 <StartDisplayTask+0x36c>)
 80016aa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	015b      	lsls	r3, r3, #5
 80016b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001768 <StartDisplayTask+0x384>)
 80016b8:	4619      	mov	r1, r3
 80016ba:	f002 fe09 	bl	80042d0 <BSP_LCD_DrawBitmap>
            break;
 80016be:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 80016c0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016c4:	3301      	adds	r3, #1
 80016c6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80016ca:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <StartDisplayTask+0x33c>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80016d4:	4293      	cmp	r3, r2
 80016d6:	f6ff af69 	blt.w	80015ac <StartDisplayTask+0x1c8>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 80016da:	4b24      	ldr	r3, [pc, #144]	@ (800176c <StartDisplayTask+0x388>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d876      	bhi.n	80017d0 <StartDisplayTask+0x3ec>
 80016e2:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <StartDisplayTask+0x304>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001771 	.word	0x08001771
 80016ec:	08001789 	.word	0x08001789
 80016f0:	080017a1 	.word	0x080017a1
 80016f4:	080017b9 	.word	0x080017b9
 80016f8:	2000029c 	.word	0x2000029c
 80016fc:	20000298 	.word	0x20000298
 8001700:	20000294 	.word	0x20000294
 8001704:	200002a0 	.word	0x200002a0
 8001708:	200003b4 	.word	0x200003b4
 800170c:	20000210 	.word	0x20000210
 8001710:	080113fc 	.word	0x080113fc
 8001714:	08011410 	.word	0x08011410
 8001718:	08011424 	.word	0x08011424
 800171c:	08011438 	.word	0x08011438
 8001720:	2000028c 	.word	0x2000028c
 8001724:	0801144c 	.word	0x0801144c
 8001728:	20000000 	.word	0x20000000
 800172c:	08011458 	.word	0x08011458
 8001730:	ffa52a2a 	.word	0xffa52a2a
 8001734:	20000211 	.word	0x20000211
 8001738:	20000004 	.word	0x20000004
 800173c:	08014728 	.word	0x08014728
 8001740:	080153b4 	.word	0x080153b4
 8001744:	08016040 	.word	0x08016040
 8001748:	08016ccc 	.word	0x08016ccc
 800174c:	20000214 	.word	0x20000214
 8001750:	200002a4 	.word	0x200002a4
 8001754:	08012184 	.word	0x08012184
 8001758:	08012e10 	.word	0x08012e10
 800175c:	08013a9c 	.word	0x08013a9c
 8001760:	08017958 	.word	0x08017958
 8001764:	080185e4 	.word	0x080185e4
 8001768:	08019270 	.word	0x08019270
 800176c:	20000001 	.word	0x20000001
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 8001770:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <StartDisplayTask+0x4a4>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	015b      	lsls	r3, r3, #5
 8001776:	4618      	mov	r0, r3
 8001778:	4b43      	ldr	r3, [pc, #268]	@ (8001888 <StartDisplayTask+0x4a4>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	4a43      	ldr	r2, [pc, #268]	@ (800188c <StartDisplayTask+0x4a8>)
 8001780:	4619      	mov	r1, r3
 8001782:	f002 fda5 	bl	80042d0 <BSP_LCD_DrawBitmap>
          break;
 8001786:	e023      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8001788:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <StartDisplayTask+0x4a4>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	015b      	lsls	r3, r3, #5
 800178e:	4618      	mov	r0, r3
 8001790:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <StartDisplayTask+0x4a4>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	4a3e      	ldr	r2, [pc, #248]	@ (8001890 <StartDisplayTask+0x4ac>)
 8001798:	4619      	mov	r1, r3
 800179a:	f002 fd99 	bl	80042d0 <BSP_LCD_DrawBitmap>
          break;
 800179e:	e017      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 80017a0:	4b39      	ldr	r3, [pc, #228]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	015b      	lsls	r3, r3, #5
 80017a6:	4618      	mov	r0, r3
 80017a8:	4b37      	ldr	r3, [pc, #220]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017aa:	785b      	ldrb	r3, [r3, #1]
 80017ac:	015b      	lsls	r3, r3, #5
 80017ae:	4a39      	ldr	r2, [pc, #228]	@ (8001894 <StartDisplayTask+0x4b0>)
 80017b0:	4619      	mov	r1, r3
 80017b2:	f002 fd8d 	bl	80042d0 <BSP_LCD_DrawBitmap>
          break;
 80017b6:	e00b      	b.n	80017d0 <StartDisplayTask+0x3ec>
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 80017b8:	4b33      	ldr	r3, [pc, #204]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	4618      	mov	r0, r3
 80017c0:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <StartDisplayTask+0x4a4>)
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	015b      	lsls	r3, r3, #5
 80017c6:	4a34      	ldr	r2, [pc, #208]	@ (8001898 <StartDisplayTask+0x4b4>)
 80017c8:	4619      	mov	r1, r3
 80017ca:	f002 fd81 	bl	80042d0 <BSP_LCD_DrawBitmap>
          break;
 80017ce:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 80017d0:	4b32      	ldr	r3, [pc, #200]	@ (800189c <StartDisplayTask+0x4b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d11a      	bne.n	800180e <StartDisplayTask+0x42a>
 80017d8:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <StartDisplayTask+0x4bc>)
 80017da:	781a      	ldrb	r2, [r3, #0]
 80017dc:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d105      	bne.n	80017f0 <StartDisplayTask+0x40c>
 80017e4:	4b2e      	ldr	r3, [pc, #184]	@ (80018a0 <StartDisplayTask+0x4bc>)
 80017e6:	785a      	ldrb	r2, [r3, #1]
 80017e8:	4b2e      	ldr	r3, [pc, #184]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d00e      	beq.n	800180e <StartDisplayTask+0x42a>
        // On efface l'ancienne queue si:
        //    - le snake a avancé (la queue n'est pas restée à la même position)
        // ou
        //    - la tête n'est pas à la position de l'ancienne queue (le snake suit sa queue)
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 80017f0:	482d      	ldr	r0, [pc, #180]	@ (80018a8 <StartDisplayTask+0x4c4>)
 80017f2:	f002 fb47 	bl	8003e84 <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 80017f6:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <StartDisplayTask+0x4c0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	015b      	lsls	r3, r3, #5
 80017fc:	b298      	uxth	r0, r3
 80017fe:	4b29      	ldr	r3, [pc, #164]	@ (80018a4 <StartDisplayTask+0x4c0>)
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	015b      	lsls	r3, r3, #5
 8001804:	b299      	uxth	r1, r3
 8001806:	2320      	movs	r3, #32
 8001808:	2220      	movs	r2, #32
 800180a:	f002 fe13 	bl	8004434 <BSP_LCD_FillRect>
      }

      // On affiche les pommes
      for (int i = 0; i < NBApple; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001814:	e01f      	b.n	8001856 <StartDisplayTask+0x472>
        if (applePosition[i][0] != -1)
 8001816:	4a25      	ldr	r2, [pc, #148]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001818:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800181c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001824:	d012      	beq.n	800184c <StartDisplayTask+0x468>
          BSP_LCD_DrawBitmap(applePosition[i][0]*32, applePosition[i][1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001828:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800182c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001830:	015b      	lsls	r3, r3, #5
 8001832:	4618      	mov	r0, r3
 8001834:	4a1d      	ldr	r2, [pc, #116]	@ (80018ac <StartDisplayTask+0x4c8>)
 8001836:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	4a1a      	ldr	r2, [pc, #104]	@ (80018b0 <StartDisplayTask+0x4cc>)
 8001846:	4619      	mov	r1, r3
 8001848:	f002 fd42 	bl	80042d0 <BSP_LCD_DrawBitmap>
      for (int i = 0; i < NBApple; i++)
 800184c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001856:	2304      	movs	r3, #4
 8001858:	461a      	mov	r2, r3
 800185a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800185e:	4293      	cmp	r3, r2
 8001860:	dbd9      	blt.n	8001816 <StartDisplayTask+0x432>
      xSemaphoreGive(displayMutexHandle);
 8001862:	4b14      	ldr	r3, [pc, #80]	@ (80018b4 <StartDisplayTask+0x4d0>)
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	f00c f8b0 	bl	800d9d0 <xQueueGenericSend>

      if (lastMove)
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <StartDisplayTask+0x4d4>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <StartDisplayTask+0x49a>
        lastMove = 0;
 8001878:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <StartDisplayTask+0x4d4>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
    }

    osDelay(100);
 800187e:	2064      	movs	r0, #100	@ 0x64
 8001880:	f00b fd48 	bl	800d314 <osDelay>
    if ((gameOver || gamePaused || !gameStarted) && !lastMove) {
 8001884:	e5b6      	b.n	80013f4 <StartDisplayTask+0x10>
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	08019efc 	.word	0x08019efc
 8001890:	0801ab88 	.word	0x0801ab88
 8001894:	0801b814 	.word	0x0801b814
 8001898:	0801c4a0 	.word	0x0801c4a0
 800189c:	20000290 	.word	0x20000290
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000394 	.word	0x20000394
 80018a8:	ff81cd4b 	.word	0xff81cd4b
 80018ac:	20000398 	.word	0x20000398
 80018b0:	080114f8 	.word	0x080114f8
 80018b4:	200003b4 	.word	0x200003b4
 80018b8:	200002a0 	.word	0x200002a0

080018bc <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <StartJoystickTask+0xcc>)
 80018c6:	2208      	movs	r2, #8
 80018c8:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80018ca:	492f      	ldr	r1, [pc, #188]	@ (8001988 <StartJoystickTask+0xcc>)
 80018cc:	482f      	ldr	r0, [pc, #188]	@ (800198c <StartJoystickTask+0xd0>)
 80018ce:	f004 f9db 	bl	8005c88 <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 80018d2:	482e      	ldr	r0, [pc, #184]	@ (800198c <StartJoystickTask+0xd0>)
 80018d4:	f004 f872 	bl	80059bc <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 80018d8:	bf00      	nop
 80018da:	2164      	movs	r1, #100	@ 0x64
 80018dc:	482b      	ldr	r0, [pc, #172]	@ (800198c <StartJoystickTask+0xd0>)
 80018de:	f004 f93b 	bl	8005b58 <HAL_ADC_PollForConversion>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f8      	bne.n	80018da <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 80018e8:	4828      	ldr	r0, [pc, #160]	@ (800198c <StartJoystickTask+0xd0>)
 80018ea:	f004 f9c0 	bl	8005c6e <HAL_ADC_GetValue>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <StartJoystickTask+0xd4>)
 80018f2:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 80018f4:	4827      	ldr	r0, [pc, #156]	@ (8001994 <StartJoystickTask+0xd8>)
 80018f6:	f004 f861 	bl	80059bc <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80018fa:	bf00      	nop
 80018fc:	2164      	movs	r1, #100	@ 0x64
 80018fe:	4825      	ldr	r0, [pc, #148]	@ (8001994 <StartJoystickTask+0xd8>)
 8001900:	f004 f92a 	bl	8005b58 <HAL_ADC_PollForConversion>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f8      	bne.n	80018fc <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 800190a:	4822      	ldr	r0, [pc, #136]	@ (8001994 <StartJoystickTask+0xd8>)
 800190c:	f004 f9af 	bl	8005c6e <HAL_ADC_GetValue>
 8001910:	4603      	mov	r3, r0
 8001912:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <StartJoystickTask+0xdc>)
 8001914:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <StartJoystickTask+0xd4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800191e:	d207      	bcs.n	8001930 <StartJoystickTask+0x74>
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <StartJoystickTask+0xe0>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <StartJoystickTask+0x74>
      direction = Down;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <StartJoystickTask+0xe4>)
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e027      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 8001930:	4b17      	ldr	r3, [pc, #92]	@ (8001990 <StartJoystickTask+0xd4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001938:	4293      	cmp	r3, r2
 800193a:	d907      	bls.n	800194c <StartJoystickTask+0x90>
 800193c:	4b17      	ldr	r3, [pc, #92]	@ (800199c <StartJoystickTask+0xe0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d003      	beq.n	800194c <StartJoystickTask+0x90>
      direction = Up;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <StartJoystickTask+0xe4>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e019      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <StartJoystickTask+0xdc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001954:	d207      	bcs.n	8001966 <StartJoystickTask+0xaa>
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <StartJoystickTask+0xe0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <StartJoystickTask+0xaa>
      direction = Right;
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <StartJoystickTask+0xe4>)
 8001960:	2203      	movs	r2, #3
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e00c      	b.n	8001980 <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <StartJoystickTask+0xdc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800196e:	4293      	cmp	r3, r2
 8001970:	d906      	bls.n	8001980 <StartJoystickTask+0xc4>
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <StartJoystickTask+0xe0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d002      	beq.n	8001980 <StartJoystickTask+0xc4>
      direction = Left;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <StartJoystickTask+0xe4>)
 800197c:	2202      	movs	r2, #2
 800197e:	701a      	strb	r2, [r3, #0]
    }
    osDelay(10);
 8001980:	200a      	movs	r0, #10
 8001982:	f00b fcc7 	bl	800d314 <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 8001986:	e79d      	b.n	80018c4 <StartJoystickTask+0x8>
 8001988:	20000708 	.word	0x20000708
 800198c:	20000118 	.word	0x20000118
 8001990:	20000208 	.word	0x20000208
 8001994:	200000d0 	.word	0x200000d0
 8001998:	2000020c 	.word	0x2000020c
 800199c:	20000211 	.word	0x20000211
 80019a0:	20000210 	.word	0x20000210

080019a4 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 80019a4:	b5b0      	push	{r4, r5, r7, lr}
 80019a6:	b08e      	sub	sp, #56	@ 0x38
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80019ac:	f00d f900 	bl	800ebb0 <xTaskGetTickCount>
 80019b0:	4603      	mov	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]
  const TickType_t delay = pdMS_TO_TICKS(1000. / speed);
 80019b4:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb4 <StartManageBodyParts+0x210>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdcb 	bl	8000554 <__aeabi_i2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	f04f 0000 	mov.w	r0, #0
 80019c6:	497c      	ldr	r1, [pc, #496]	@ (8001bb8 <StartManageBodyParts+0x214>)
 80019c8:	f7fe ff58 	bl	800087c <__aeabi_ddiv>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f83a 	bl	8000a4c <__aeabi_d2uiz>
 80019d8:	4603      	mov	r3, r0
 80019da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a76      	ldr	r2, [pc, #472]	@ (8001bbc <StartManageBodyParts+0x218>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	61bb      	str	r3, [r7, #24]

  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused && gameStarted) {
 80019ec:	4b74      	ldr	r3, [pc, #464]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f040 82ad 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
 80019f6:	4b73      	ldr	r3, [pc, #460]	@ (8001bc4 <StartManageBodyParts+0x220>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 82a8 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
 8001a00:	4b71      	ldr	r3, [pc, #452]	@ (8001bc8 <StartManageBodyParts+0x224>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 82a3 	beq.w	8001f50 <StartManageBodyParts+0x5ac>
      // Le jeu est en cours

      // On sauvegarde la position de la queue et de la tête
      oldTailPosition[0] = snakeTailPosition[0];
 8001a0a:	4b70      	ldr	r3, [pc, #448]	@ (8001bcc <StartManageBodyParts+0x228>)
 8001a0c:	781a      	ldrb	r2, [r3, #0]
 8001a0e:	4b70      	ldr	r3, [pc, #448]	@ (8001bd0 <StartManageBodyParts+0x22c>)
 8001a10:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001a12:	4b6e      	ldr	r3, [pc, #440]	@ (8001bcc <StartManageBodyParts+0x228>)
 8001a14:	785a      	ldrb	r2, [r3, #1]
 8001a16:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <StartManageBodyParts+0x22c>)
 8001a18:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 8001a1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	733b      	strb	r3, [r7, #12]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001a20:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a22:	785b      	ldrb	r3, [r3, #1]
 8001a24:	737b      	strb	r3, [r7, #13]


      // On met a jour la position de la tête en fonction de la direction
      switch (direction) {
 8001a26:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <StartManageBodyParts+0x234>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d832      	bhi.n	8001a94 <StartManageBodyParts+0xf0>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <StartManageBodyParts+0x90>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a59 	.word	0x08001a59
 8001a3c:	08001a6d 	.word	0x08001a6d
 8001a40:	08001a81 	.word	0x08001a81
        case Up:
          headPart = HeadTop;
 8001a44:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 8001a4a:	4b62      	ldr	r3, [pc, #392]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a4c:	785b      	ldrb	r3, [r3, #1]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b60      	ldr	r3, [pc, #384]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a54:	705a      	strb	r2, [r3, #1]
          break;
 8001a56:	e01d      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Down:
          headPart = HeadBottom;
 8001a58:	4b60      	ldr	r3, [pc, #384]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 8001a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a68:	705a      	strb	r2, [r3, #1]
          break;
 8001a6a:	e013      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Left:
          headPart = HeadLeft;
 8001a6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 8001a72:	4b58      	ldr	r3, [pc, #352]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4b56      	ldr	r3, [pc, #344]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a7c:	701a      	strb	r2, [r3, #0]
          break;
 8001a7e:	e009      	b.n	8001a94 <StartManageBodyParts+0xf0>
        case Right:
          headPart = HeadRight;
 8001a80:	4b56      	ldr	r3, [pc, #344]	@ (8001bdc <StartManageBodyParts+0x238>)
 8001a82:	2203      	movs	r2, #3
 8001a84:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 8001a86:	4b53      	ldr	r3, [pc, #332]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b51      	ldr	r3, [pc, #324]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a90:	701a      	strb	r2, [r3, #0]
          break;
 8001a92:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001a94:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	220f      	movs	r2, #15
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d204      	bcs.n	8001aa8 <StartManageBodyParts+0x104>
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001aa0:	785b      	ldrb	r3, [r3, #1]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d306      	bcc.n	8001ab6 <StartManageBodyParts+0x112>
        // On a touché un mur
        gameOver = 1;
 8001aa8:	4b45      	ldr	r3, [pc, #276]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
        lastMove = 1;
 8001aae:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <StartManageBodyParts+0x23c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e022      	b.n	8001afc <StartManageBodyParts+0x158>
      }
      else  {
        for (int i = 0; i < snakeSize; i++) {
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001aba:	e019      	b.n	8001af0 <StartManageBodyParts+0x14c>
          if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 8001abc:	4b45      	ldr	r3, [pc, #276]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001abe:	781a      	ldrb	r2, [r3, #0]
 8001ac0:	4948      	ldr	r1, [pc, #288]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d10e      	bne.n	8001aea <StartManageBodyParts+0x146>
 8001acc:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001ace:	785a      	ldrb	r2, [r3, #1]
 8001ad0:	4944      	ldr	r1, [pc, #272]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	440b      	add	r3, r1
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d105      	bne.n	8001aea <StartManageBodyParts+0x146>
            // On a touché notre corps
            gameOver = 1;
 8001ade:	4b38      	ldr	r3, [pc, #224]	@ (8001bc0 <StartManageBodyParts+0x21c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
            lastMove = 1;
 8001ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8001be0 <StartManageBodyParts+0x23c>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < snakeSize; i++) {
 8001aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aec:	3301      	adds	r3, #1
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001af0:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001af8:	4293      	cmp	r3, r2
 8001afa:	dbdf      	blt.n	8001abc <StartManageBodyParts+0x118>
      }
      // Note: Inutile de vérifier si on a touché la queue. Celle ci n'a pas encore avancé.

      
      // On vérifie si on a mangé la pomme avant de bouger le corps et la queue
      appleEaten = 0;
 8001afc:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <StartManageBodyParts+0x248>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < NBApple; i++) {
 8001b02:	2300      	movs	r3, #0
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b06:	e0fc      	b.n	8001d02 <StartManageBodyParts+0x35e>
        if (snakeHeadPosition[0] == applePosition[i][0] && snakeHeadPosition[1] == applePosition[i][1]) {
 8001b08:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4a38      	ldr	r2, [pc, #224]	@ (8001bf0 <StartManageBodyParts+0x24c>)
 8001b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b12:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001b16:	4299      	cmp	r1, r3
 8001b18:	f040 80f0 	bne.w	8001cfc <StartManageBodyParts+0x358>
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <StartManageBodyParts+0x230>)
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	4619      	mov	r1, r3
 8001b22:	4a33      	ldr	r2, [pc, #204]	@ (8001bf0 <StartManageBodyParts+0x24c>)
 8001b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b2e:	4299      	cmp	r1, r3
 8001b30:	f040 80e4 	bne.w	8001cfc <StartManageBodyParts+0x358>
          snakeSize++;
 8001b34:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b3e:	701a      	strb	r2, [r3, #0]
          appleEaten = 1;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <StartManageBodyParts+0x248>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

          // On ajoute un bodyPart à la queue
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b46:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b4e:	e020      	b.n	8001b92 <StartManageBodyParts+0x1ee>
            snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	3b01      	subs	r3, #1
 8001b54:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <StartManageBodyParts+0x250>)
 8001b56:	5cd1      	ldrb	r1, [r2, r3]
 8001b58:	4a26      	ldr	r2, [pc, #152]	@ (8001bf4 <StartManageBodyParts+0x250>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	4413      	add	r3, r2
 8001b5e:	460a      	mov	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
            snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3b01      	subs	r3, #1
 8001b66:	4a1f      	ldr	r2, [pc, #124]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b68:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	3b01      	subs	r3, #1
 8001b78:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	7859      	ldrb	r1, [r3, #1]
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	460a      	mov	r2, r1
 8001b8a:	705a      	strb	r2, [r3, #1]
          for (int i = snakeSize - 1; i > 0; i--) {
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	dcdb      	bgt.n	8001b50 <StartManageBodyParts+0x1ac>

          // On met a jour le premier bodyPart
          uint8_t backX;
          uint8_t backY;

          if (snakeSize > 1) {
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <StartManageBodyParts+0x244>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d92b      	bls.n	8001bf8 <StartManageBodyParts+0x254>
            backX = snakeBodyPosition[0][0];
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeBodyPosition[0][1];
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <StartManageBodyParts+0x240>)
 8001baa:	785b      	ldrb	r3, [r3, #1]
 8001bac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001bb0:	e02a      	b.n	8001c08 <StartManageBodyParts+0x264>
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	408f4000 	.word	0x408f4000
 8001bbc:	10624dd3 	.word	0x10624dd3
 8001bc0:	2000029c 	.word	0x2000029c
 8001bc4:	20000298 	.word	0x20000298
 8001bc8:	20000294 	.word	0x20000294
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	20000394 	.word	0x20000394
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	20000210 	.word	0x20000210
 8001bdc:	20000211 	.word	0x20000211
 8001be0:	200002a0 	.word	0x200002a0
 8001be4:	200002a4 	.word	0x200002a4
 8001be8:	2000028c 	.word	0x2000028c
 8001bec:	20000290 	.word	0x20000290
 8001bf0:	20000398 	.word	0x20000398
 8001bf4:	20000214 	.word	0x20000214
          }
          else {
            backX = snakeTailPosition[0];
 8001bf8:	4ba8      	ldr	r3, [pc, #672]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            backY = snakeTailPosition[1];
 8001c00:	4ba6      	ldr	r3, [pc, #664]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
          }

          // Trouve le type de bodyPart à mettre
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001c08:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001c0a:	7818      	ldrb	r0, [r3, #0]
 8001c0c:	4ba4      	ldr	r3, [pc, #656]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001c0e:	7859      	ldrb	r1, [r3, #1]
 8001c10:	7b3b      	ldrb	r3, [r7, #12]
 8001c12:	7b7a      	ldrb	r2, [r7, #13]
 8001c14:	f897 5022 	ldrb.w	r5, [r7, #34]	@ 0x22
 8001c18:	f897 4023 	ldrb.w	r4, [r7, #35]	@ 0x23
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	462b      	mov	r3, r5
 8001c22:	4622      	mov	r2, r4
 8001c24:	f000 fa0c 	bl	8002040 <whatBodyPart>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001c2e:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001c30:	7b3a      	ldrb	r2, [r7, #12]
 8001c32:	4b9d      	ldr	r3, [pc, #628]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001c34:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001c36:	7b7a      	ldrb	r2, [r7, #13]
 8001c38:	4b9b      	ldr	r3, [pc, #620]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001c3a:	705a      	strb	r2, [r3, #1]

          // Si on a de la place pour une nouvelle pomme
          uint8_t NBFreeCells = gridSizeX * gridSizeY - snakeSize - 1;
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	2308      	movs	r3, #8
 8001c40:	fb12 f303 	smulbb	r3, r2, r3
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b99      	ldr	r3, [pc, #612]	@ (8001eac <StartManageBodyParts+0x508>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	75fb      	strb	r3, [r7, #23]
          if (NBFreeCells > NBApple) {
 8001c52:	2204      	movs	r2, #4
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d945      	bls.n	8001ce6 <StartManageBodyParts+0x342>
            // On génère une nouvelle pomme à une position aléatoire qui n'est pas sur le snake ou une autre pomme
            do {
              applePosition[i][0] = rand() % gridSizeX;
 8001c5a:	f00e f94f 	bl	800fefc <rand>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	220f      	movs	r2, #15
 8001c62:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c66:	fb01 f202 	mul.w	r2, r1, r2
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	b259      	sxtb	r1, r3
 8001c6e:	4a90      	ldr	r2, [pc, #576]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c72:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
              applePosition[i][1] = rand() % gridSizeY;
 8001c76:	f00e f941 	bl	800fefc <rand>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c82:	fb01 f202 	mul.w	r2, r1, r2
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	b259      	sxtb	r1, r3
 8001c8a:	4a89      	ldr	r2, [pc, #548]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4413      	add	r3, r2
 8001c92:	460a      	mov	r2, r1
 8001c94:	705a      	strb	r2, [r3, #1]
            } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) 
 8001c96:	4a86      	ldr	r2, [pc, #536]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c9a:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4983      	ldr	r1, [pc, #524]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f000 fa27 	bl	8002104 <isSnakePosition>
 8001cb6:	4603      	mov	r3, r0
                  || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ce      	bne.n	8001c5a <StartManageBodyParts+0x2b6>
 8001cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cc0:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8001cc4:	b2d8      	uxtb	r0, r3
 8001cc6:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f000 fa5f 	bl	800219c <isApplePosition>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ba      	bne.n	8001c5a <StartManageBodyParts+0x2b6>
 8001ce4:	e00a      	b.n	8001cfc <StartManageBodyParts+0x358>
          }
          else {
            applePosition[i][0] = -1;
 8001ce6:	4a72      	ldr	r2, [pc, #456]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cea:	21ff      	movs	r1, #255	@ 0xff
 8001cec:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
            applePosition[i][1] = -1;
 8001cf0:	4a6f      	ldr	r2, [pc, #444]	@ (8001eb0 <StartManageBodyParts+0x50c>)
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	22ff      	movs	r2, #255	@ 0xff
 8001cfa:	705a      	strb	r2, [r3, #1]
      for (int i = 0; i < NBApple; i++) {
 8001cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cfe:	3301      	adds	r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d02:	2304      	movs	r3, #4
 8001d04:	461a      	mov	r2, r3
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	f6ff aefd 	blt.w	8001b08 <StartManageBodyParts+0x164>
        }
      }


      // On n'a pas mangé de pomme on avance le corps et la queue sans ajouter de bodyPart
      if (!appleEaten) {
 8001d0e:	4b69      	ldr	r3, [pc, #420]	@ (8001eb4 <StartManageBodyParts+0x510>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 811c 	bne.w	8001f50 <StartManageBodyParts+0x5ac>
        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001d18:	4b64      	ldr	r3, [pc, #400]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d011      	beq.n	8001d44 <StartManageBodyParts+0x3a0>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001d20:	4b62      	ldr	r3, [pc, #392]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	4a60      	ldr	r2, [pc, #384]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d28:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d2e:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 8001d30:	4b5e      	ldr	r3, [pc, #376]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	785a      	ldrb	r2, [r3, #1]
 8001d3e:	4b57      	ldr	r3, [pc, #348]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d40:	705a      	strb	r2, [r3, #1]
 8001d42:	e005      	b.n	8001d50 <StartManageBodyParts+0x3ac>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 8001d44:	7b3a      	ldrb	r2, [r7, #12]
 8001d46:	4b55      	ldr	r3, [pc, #340]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d48:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 8001d4a:	7b7a      	ldrb	r2, [r7, #13]
 8001d4c:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001d4e:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d50:	4b56      	ldr	r3, [pc, #344]	@ (8001eac <StartManageBodyParts+0x508>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	e020      	b.n	8001d9c <StartManageBodyParts+0x3f8>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a51      	ldr	r2, [pc, #324]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001d60:	5cd1      	ldrb	r1, [r2, r3]
 8001d62:	4a50      	ldr	r2, [pc, #320]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	460a      	mov	r2, r1
 8001d6a:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d72:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001d76:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	4a49      	ldr	r2, [pc, #292]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	7859      	ldrb	r1, [r3, #1]
 8001d8a:	4a47      	ldr	r2, [pc, #284]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	460a      	mov	r2, r1
 8001d94:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dcdb      	bgt.n	8001d5a <StartManageBodyParts+0x3b6>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001da2:	4b42      	ldr	r3, [pc, #264]	@ (8001eac <StartManageBodyParts+0x508>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80b2 	beq.w	8001f10 <StartManageBodyParts+0x56c>
          // On trouve le type de bodyPart à mettre juste derrière la tête
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 8001dac:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001dae:	7818      	ldrb	r0, [r3, #0]
 8001db0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <StartManageBodyParts+0x4fc>)
 8001db2:	7859      	ldrb	r1, [r3, #1]
 8001db4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001db6:	781c      	ldrb	r4, [r3, #0]
 8001db8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dba:	785d      	ldrb	r5, [r3, #1]
 8001dbc:	7b3b      	ldrb	r3, [r7, #12]
 8001dbe:	7b7a      	ldrb	r2, [r7, #13]
 8001dc0:	9201      	str	r2, [sp, #4]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	f000 f93a 	bl	8002040 <whatBodyPart>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001dd2:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001dd4:	7b3a      	ldrb	r2, [r7, #12]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dd8:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 8001dda:	7b7a      	ldrb	r2, [r7, #13]
 8001ddc:	4b32      	ldr	r3, [pc, #200]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001dde:	705a      	strb	r2, [r3, #1]

          // On met a jour le l'orientation de la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001de0:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <StartManageBodyParts+0x508>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <StartManageBodyParts+0x500>)
 8001de8:	5cd3      	ldrb	r3, [r2, r3]
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	f200 80b0 	bhi.w	8001f50 <StartManageBodyParts+0x5ac>
 8001df0:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <StartManageBodyParts+0x454>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e35 	.word	0x08001e35
 8001e00:	08001e59 	.word	0x08001e59
 8001e04:	08001e7f 	.word	0x08001e7f
 8001e08:	08001ec5 	.word	0x08001ec5
 8001e0c:	08001eeb 	.word	0x08001eeb
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e10:	4b26      	ldr	r3, [pc, #152]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	4a24      	ldr	r2, [pc, #144]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e18:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d103      	bne.n	8001e2c <StartManageBodyParts+0x488>
                tailPart = TailTop;
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e2a:	e091      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailRight;
 8001e2c:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e2e:	2203      	movs	r2, #3
 8001e30:	701a      	strb	r2, [r3, #0]
              break;
 8001e32:	e08d      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e3c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d103      	bne.n	8001e50 <StartManageBodyParts+0x4ac>
                tailPart = TailTop;
 8001e48:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 8001e4e:	e07f      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailLeft;
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
              break;
 8001e56:	e07b      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 8001e58:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	785a      	ldrb	r2, [r3, #1]
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e68:	785b      	ldrb	r3, [r3, #1]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d203      	bcs.n	8001e76 <StartManageBodyParts+0x4d2>
                tailPart = TailTop;
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001e74:	e06c      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
              break;
 8001e7c:	e068      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <StartManageBodyParts+0x508>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	4a08      	ldr	r2, [pc, #32]	@ (8001ea8 <StartManageBodyParts+0x504>)
 8001e86:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <StartManageBodyParts+0x4f8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d214      	bcs.n	8001ebc <StartManageBodyParts+0x518>
                tailPart = TailLeft;
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <StartManageBodyParts+0x514>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001e98:	e05a      	b.n	8001f50 <StartManageBodyParts+0x5ac>
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	20000004 	.word	0x20000004
 8001ea4:	20000214 	.word	0x20000214
 8001ea8:	200002a4 	.word	0x200002a4
 8001eac:	2000028c 	.word	0x2000028c
 8001eb0:	20000398 	.word	0x20000398
 8001eb4:	20000290 	.word	0x20000290
 8001eb8:	20000001 	.word	0x20000001
                tailPart = TailRight;
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	701a      	strb	r2, [r3, #0]
              break;
 8001ec2:	e045      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001ec4:	4b27      	ldr	r3, [pc, #156]	@ (8001f64 <StartManageBodyParts+0x5c0>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	4a27      	ldr	r2, [pc, #156]	@ (8001f68 <StartManageBodyParts+0x5c4>)
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	785a      	ldrb	r2, [r3, #1]
 8001ed2:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <StartManageBodyParts+0x5c8>)
 8001ed4:	785b      	ldrb	r3, [r3, #1]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d103      	bne.n	8001ee2 <StartManageBodyParts+0x53e>
                tailPart = TailRight;
 8001eda:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001edc:	2203      	movs	r2, #3
 8001ede:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001ee0:	e036      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
              break;
 8001ee8:	e032      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <StartManageBodyParts+0x5c0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <StartManageBodyParts+0x5c4>)
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	785a      	ldrb	r2, [r3, #1]
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f6c <StartManageBodyParts+0x5c8>)
 8001efa:	785b      	ldrb	r3, [r3, #1]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d103      	bne.n	8001f08 <StartManageBodyParts+0x564>
                tailPart = TailLeft;
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f02:	2202      	movs	r2, #2
 8001f04:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001f06:	e023      	b.n	8001f50 <StartManageBodyParts+0x5ac>
                tailPart = TailBottom;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
              break;
 8001f0e:	e01f      	b.n	8001f50 <StartManageBodyParts+0x5ac>
          }
        }
        else {
          switch (headPart) {
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <StartManageBodyParts+0x5cc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d81b      	bhi.n	8001f50 <StartManageBodyParts+0x5ac>
 8001f18:	a201      	add	r2, pc, #4	@ (adr r2, 8001f20 <StartManageBodyParts+0x57c>)
 8001f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1e:	bf00      	nop
 8001f20:	08001f31 	.word	0x08001f31
 8001f24:	08001f39 	.word	0x08001f39
 8001f28:	08001f41 	.word	0x08001f41
 8001f2c:	08001f49 	.word	0x08001f49
            case HeadTop:
              tailPart = TailTop;
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
              break;
 8001f36:	e00b      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadBottom:
              tailPart = TailBottom;
 8001f38:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
              break;
 8001f3e:	e007      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadLeft:
              tailPart = TailLeft;
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
              break;
 8001f46:	e003      	b.n	8001f50 <StartManageBodyParts+0x5ac>
            case HeadRight:
              tailPart = TailRight;
 8001f48:	4b05      	ldr	r3, [pc, #20]	@ (8001f60 <StartManageBodyParts+0x5bc>)
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	701a      	strb	r2, [r3, #0]
              break;
 8001f4e:	bf00      	nop
          }
        }
      }
    }

    vTaskDelayUntil(&xLastWakeTime, delay);
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	69b9      	ldr	r1, [r7, #24]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f00c fc50 	bl	800e7fc <vTaskDelayUntil>
    if (!gameOver && !gamePaused && gameStarted) {
 8001f5c:	e546      	b.n	80019ec <StartManageBodyParts+0x48>
 8001f5e:	bf00      	nop
 8001f60:	20000001 	.word	0x20000001
 8001f64:	2000028c 	.word	0x2000028c
 8001f68:	200002a4 	.word	0x200002a4
 8001f6c:	20000008 	.word	0x20000008
 8001f70:	20000211 	.word	0x20000211

08001f74 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    if (!gameStarted)
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <StartTsHandlerTask+0x14>
      rand();
 8001f84:	f00d ffba 	bl	800fefc <rand>
    

    BSP_TS_GetState(&TS_State);
 8001f88:	4827      	ldr	r0, [pc, #156]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8001f8a:	f002 ff1f 	bl	8004dcc <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 8001f8e:	4b26      	ldr	r3, [pc, #152]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d136      	bne.n	8002004 <StartTsHandlerTask+0x90>
 8001f96:	4b25      	ldr	r3, [pc, #148]	@ (800202c <StartTsHandlerTask+0xb8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d032      	beq.n	8002004 <StartTsHandlerTask+0x90>
      if (gameOver) {
 8001f9e:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <StartTsHandlerTask+0xbc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <StartTsHandlerTask+0x3e>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fa6:	4823      	ldr	r0, [pc, #140]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fa8:	f001 ffb8 	bl	8003f1c <BSP_LCD_Clear>
        restartGame();
 8001fac:	f000 f92a 	bl	8002204 <restartGame>
 8001fb0:	e028      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else if (gamePaused) {
 8001fb2:	4b21      	ldr	r3, [pc, #132]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d014      	beq.n	8001fe4 <StartTsHandlerTask+0x70>
        xSemaphoreTake(displayMutexHandle, portMAX_DELAY);
 8001fba:	4b20      	ldr	r3, [pc, #128]	@ (800203c <StartTsHandlerTask+0xc8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00b ff9a 	bl	800defc <xQueueSemaphoreTake>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fc8:	481a      	ldr	r0, [pc, #104]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fca:	f001 ffa7 	bl	8003f1c <BSP_LCD_Clear>
        xSemaphoreGive(displayMutexHandle);
 8001fce:	4b1b      	ldr	r3, [pc, #108]	@ (800203c <StartTsHandlerTask+0xc8>)
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	f00b fcfa 	bl	800d9d0 <xQueueGenericSend>
        gamePaused = 0;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e00f      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else if (!gameStarted) {
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d108      	bne.n	8001ffe <StartTsHandlerTask+0x8a>
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001fec:	4811      	ldr	r0, [pc, #68]	@ (8002034 <StartTsHandlerTask+0xc0>)
 8001fee:	f001 ff95 	bl	8003f1c <BSP_LCD_Clear>
        restartGame();
 8001ff2:	f000 f907 	bl	8002204 <restartGame>
        gameStarted = 1;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <StartTsHandlerTask+0xb0>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e002      	b.n	8002004 <StartTsHandlerTask+0x90>
      }
      else {
        gamePaused = 1;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <StartTsHandlerTask+0xc4>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]
      }
    }

    if (TS_State.touchDetected) {
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <StartTsHandlerTask+0xb4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <StartTsHandlerTask+0xa0>
      screenPressed = 1;
 800200c:	4b07      	ldr	r3, [pc, #28]	@ (800202c <StartTsHandlerTask+0xb8>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e002      	b.n	800201a <StartTsHandlerTask+0xa6>
    }
    else {
      screenPressed = 0;
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <StartTsHandlerTask+0xb8>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 800201a:	200a      	movs	r0, #10
 800201c:	f00b f97a 	bl	800d314 <osDelay>
    if (!gameStarted)
 8002020:	e7ac      	b.n	8001f7c <StartTsHandlerTask+0x8>
 8002022:	bf00      	nop
 8002024:	20000294 	.word	0x20000294
 8002028:	200001d8 	.word	0x200001d8
 800202c:	20000204 	.word	0x20000204
 8002030:	2000029c 	.word	0x2000029c
 8002034:	ff81cd4b 	.word	0xff81cd4b
 8002038:	20000298 	.word	0x20000298
 800203c:	200003b4 	.word	0x200003b4

08002040 <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 8002040:	b490      	push	{r4, r7}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4623      	mov	r3, r4
 8002050:	71fb      	strb	r3, [r7, #7]
 8002052:	4603      	mov	r3, r0
 8002054:	71bb      	strb	r3, [r7, #6]
 8002056:	460b      	mov	r3, r1
 8002058:	717b      	strb	r3, [r7, #5]
 800205a:	4613      	mov	r3, r2
 800205c:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	797b      	ldrb	r3, [r7, #5]
 8002062:	429a      	cmp	r2, r3
 8002064:	d101      	bne.n	800206a <whatBodyPart+0x2a>
    return BottomTop;
 8002066:	2302      	movs	r3, #2
 8002068:	e046      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 800206a:	79ba      	ldrb	r2, [r7, #6]
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d101      	bne.n	8002076 <whatBodyPart+0x36>
    return LeftRight;
 8002072:	2303      	movs	r3, #3
 8002074:	e040      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY) {
 8002076:	79fa      	ldrb	r2, [r7, #7]
 8002078:	797b      	ldrb	r3, [r7, #5]
 800207a:	429a      	cmp	r2, r3
 800207c:	d20b      	bcs.n	8002096 <whatBodyPart+0x56>
 800207e:	79ba      	ldrb	r2, [r7, #6]
 8002080:	793b      	ldrb	r3, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d907      	bls.n	8002096 <whatBodyPart+0x56>
    if (missingX == frontX)
 8002086:	7c3a      	ldrb	r2, [r7, #16]
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	429a      	cmp	r2, r3
 800208c:	d101      	bne.n	8002092 <whatBodyPart+0x52>
      return BottomRight;
 800208e:	2301      	movs	r3, #1
 8002090:	e032      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return LeftTop;
 8002092:	2304      	movs	r3, #4
 8002094:	e030      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY) {
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	797b      	ldrb	r3, [r7, #5]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20b      	bcs.n	80020b6 <whatBodyPart+0x76>
 800209e:	79ba      	ldrb	r2, [r7, #6]
 80020a0:	793b      	ldrb	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d207      	bcs.n	80020b6 <whatBodyPart+0x76>
    if (missingX == frontX)
 80020a6:	7c3a      	ldrb	r2, [r7, #16]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d101      	bne.n	80020b2 <whatBodyPart+0x72>
      return RightTop;
 80020ae:	2305      	movs	r3, #5
 80020b0:	e022      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return BottomLeft;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e020      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY) {
 80020b6:	79fa      	ldrb	r2, [r7, #7]
 80020b8:	797b      	ldrb	r3, [r7, #5]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d90b      	bls.n	80020d6 <whatBodyPart+0x96>
 80020be:	79ba      	ldrb	r2, [r7, #6]
 80020c0:	793b      	ldrb	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d207      	bcs.n	80020d6 <whatBodyPart+0x96>
    if (missingX == frontX)
 80020c6:	7c3a      	ldrb	r2, [r7, #16]
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d101      	bne.n	80020d2 <whatBodyPart+0x92>
      return LeftTop;
 80020ce:	2304      	movs	r3, #4
 80020d0:	e012      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return BottomRight;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e010      	b.n	80020f8 <whatBodyPart+0xb8>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY) {
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	797b      	ldrb	r3, [r7, #5]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90b      	bls.n	80020f6 <whatBodyPart+0xb6>
 80020de:	79ba      	ldrb	r2, [r7, #6]
 80020e0:	793b      	ldrb	r3, [r7, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d907      	bls.n	80020f6 <whatBodyPart+0xb6>
    if (missingX == frontX)
 80020e6:	7c3a      	ldrb	r2, [r7, #16]
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d101      	bne.n	80020f2 <whatBodyPart+0xb2>
      return BottomLeft;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e002      	b.n	80020f8 <whatBodyPart+0xb8>
    else
      return RightTop;
 80020f2:	2305      	movs	r3, #5
 80020f4:	e000      	b.n	80020f8 <whatBodyPart+0xb8>
  }

  return BottomTop; // should never happen
 80020f6:	2302      	movs	r3, #2
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc90      	pop	{r4, r7}
 8002100:	4770      	bx	lr
	...

08002104 <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	460a      	mov	r2, r1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	4613      	mov	r3, r2
 8002112:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <isSnakePosition+0x88>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	79fa      	ldrb	r2, [r7, #7]
 800211a:	429a      	cmp	r2, r3
 800211c:	d106      	bne.n	800212c <isSnakePosition+0x28>
 800211e:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <isSnakePosition+0x88>)
 8002120:	785b      	ldrb	r3, [r3, #1]
 8002122:	79ba      	ldrb	r2, [r7, #6]
 8002124:	429a      	cmp	r2, r3
 8002126:	d101      	bne.n	800212c <isSnakePosition+0x28>
    return 1;
 8002128:	2301      	movs	r3, #1
 800212a:	e029      	b.n	8002180 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e013      	b.n	800215a <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 8002132:	4a17      	ldr	r2, [pc, #92]	@ (8002190 <isSnakePosition+0x8c>)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800213a:	79fa      	ldrb	r2, [r7, #7]
 800213c:	429a      	cmp	r2, r3
 800213e:	d109      	bne.n	8002154 <isSnakePosition+0x50>
 8002140:	4a13      	ldr	r2, [pc, #76]	@ (8002190 <isSnakePosition+0x8c>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	785b      	ldrb	r3, [r3, #1]
 800214a:	79ba      	ldrb	r2, [r7, #6]
 800214c:	429a      	cmp	r2, r3
 800214e:	d101      	bne.n	8002154 <isSnakePosition+0x50>
      return 1;
 8002150:	2301      	movs	r3, #1
 8002152:	e015      	b.n	8002180 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3301      	adds	r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <isSnakePosition+0x90>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4293      	cmp	r3, r2
 8002164:	dbe5      	blt.n	8002132 <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 8002166:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <isSnakePosition+0x94>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	429a      	cmp	r2, r3
 800216e:	d106      	bne.n	800217e <isSnakePosition+0x7a>
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <isSnakePosition+0x94>)
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	79ba      	ldrb	r2, [r7, #6]
 8002176:	429a      	cmp	r2, r3
 8002178:	d101      	bne.n	800217e <isSnakePosition+0x7a>
    return 1;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <isSnakePosition+0x7c>

  return 0;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	20000004 	.word	0x20000004
 8002190:	200002a4 	.word	0x200002a4
 8002194:	2000028c 	.word	0x2000028c
 8002198:	20000008 	.word	0x20000008

0800219c <isApplePosition>:

uint8_t isApplePosition(uint8_t x, uint8_t y, uint8_t appleIndex)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
 80021a6:	460b      	mov	r3, r1
 80021a8:	71bb      	strb	r3, [r7, #6]
 80021aa:	4613      	mov	r3, r2
 80021ac:	717b      	strb	r3, [r7, #5]
  for (int i = 0; i < NBApple; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e019      	b.n	80021e8 <isApplePosition+0x4c>
    if (i == appleIndex)
 80021b4:	797b      	ldrb	r3, [r7, #5]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d011      	beq.n	80021e0 <isApplePosition+0x44>
      continue;

    if (x == applePosition[i][0] && y == applePosition[i][1])
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4910      	ldr	r1, [pc, #64]	@ (8002200 <isApplePosition+0x64>)
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	f911 2012 	ldrsb.w	r2, [r1, r2, lsl #1]
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10b      	bne.n	80021e2 <isApplePosition+0x46>
 80021ca:	79ba      	ldrb	r2, [r7, #6]
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <isApplePosition+0x64>)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	440b      	add	r3, r1
 80021d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d102      	bne.n	80021e2 <isApplePosition+0x46>
      return 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	e009      	b.n	80021f4 <isApplePosition+0x58>
      continue;
 80021e0:	bf00      	nop
  for (int i = 0; i < NBApple; i++) {
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3301      	adds	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	2304      	movs	r3, #4
 80021ea:	461a      	mov	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4293      	cmp	r3, r2
 80021f0:	dbe0      	blt.n	80021b4 <isApplePosition+0x18>
  }

  return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	20000398 	.word	0x20000398

08002204 <restartGame>:

void restartGame()
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
  gameOver = 0;
 800220a:	4b3a      	ldr	r3, [pc, #232]	@ (80022f4 <restartGame+0xf0>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
  lastMove = 0;
 8002210:	4b39      	ldr	r3, [pc, #228]	@ (80022f8 <restartGame+0xf4>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
  snakeSize = 0;
 8002216:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <restartGame+0xf8>)
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 800221c:	4b38      	ldr	r3, [pc, #224]	@ (8002300 <restartGame+0xfc>)
 800221e:	2207      	movs	r2, #7
 8002220:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 8002222:	4b37      	ldr	r3, [pc, #220]	@ (8002300 <restartGame+0xfc>)
 8002224:	2206      	movs	r2, #6
 8002226:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <restartGame+0x100>)
 800222a:	2207      	movs	r2, #7
 800222c:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 800222e:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <restartGame+0x100>)
 8002230:	2207      	movs	r2, #7
 8002232:	705a      	strb	r2, [r3, #1]
  direction = Up;
 8002234:	4b34      	ldr	r3, [pc, #208]	@ (8002308 <restartGame+0x104>)
 8002236:	2200      	movs	r2, #0
 8002238:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 800223a:	4b34      	ldr	r3, [pc, #208]	@ (800230c <restartGame+0x108>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <restartGame+0x10c>)
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < NBApple; i++) {
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	e047      	b.n	80022dc <restartGame+0xd8>
    do {
      applePosition[i][0] = rand() % gridSizeX;
 800224c:	f00d fe56 	bl	800fefc <rand>
 8002250:	4603      	mov	r3, r0
 8002252:	220f      	movs	r2, #15
 8002254:	fb93 f1f2 	sdiv	r1, r3, r2
 8002258:	fb01 f202 	mul.w	r2, r1, r2
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	b259      	sxtb	r1, r3
 8002260:	4a2c      	ldr	r2, [pc, #176]	@ (8002314 <restartGame+0x110>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
      applePosition[i][1] = rand() % gridSizeY;
 8002268:	f00d fe48 	bl	800fefc <rand>
 800226c:	4603      	mov	r3, r0
 800226e:	2208      	movs	r2, #8
 8002270:	fb93 f1f2 	sdiv	r1, r3, r2
 8002274:	fb01 f202 	mul.w	r2, r1, r2
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	b259      	sxtb	r1, r3
 800227c:	4a25      	ldr	r2, [pc, #148]	@ (8002314 <restartGame+0x110>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	460a      	mov	r2, r1
 8002286:	705a      	strb	r2, [r3, #1]
    } while (isSnakePosition(applePosition[i][0], applePosition[i][1]) || isApplePosition(applePosition[i][0], applePosition[i][1], i));
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <restartGame+0x110>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4920      	ldr	r1, [pc, #128]	@ (8002314 <restartGame+0x110>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	440b      	add	r3, r1
 800229a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7ff ff2e 	bl	8002104 <isSnakePosition>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1ce      	bne.n	800224c <restartGame+0x48>
 80022ae:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <restartGame+0x110>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f912 3013 	ldrsb.w	r3, [r2, r3, lsl #1]
 80022b6:	b2d8      	uxtb	r0, r3
 80022b8:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <restartGame+0x110>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f7ff ff66 	bl	800219c <isApplePosition>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ba      	bne.n	800224c <restartGame+0x48>
  for (int i = 0; i < NBApple; i++) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3301      	adds	r3, #1
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	2304      	movs	r3, #4
 80022de:	461a      	mov	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	dbb2      	blt.n	800224c <restartGame+0x48>
  }

  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80022e6:	480c      	ldr	r0, [pc, #48]	@ (8002318 <restartGame+0x114>)
 80022e8:	f001 fe18 	bl	8003f1c <BSP_LCD_Clear>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000029c 	.word	0x2000029c
 80022f8:	200002a0 	.word	0x200002a0
 80022fc:	2000028c 	.word	0x2000028c
 8002300:	20000004 	.word	0x20000004
 8002304:	20000008 	.word	0x20000008
 8002308:	20000210 	.word	0x20000210
 800230c:	20000211 	.word	0x20000211
 8002310:	20000001 	.word	0x20000001
 8002314:	20000398 	.word	0x20000398
 8002318:	ff81cd4b 	.word	0xff81cd4b

0800231c <displayGameStatus>:

void displayGameStatus()
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  if (gameOver) {
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <displayGameStatus+0xa4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002328:	4826      	ldr	r0, [pc, #152]	@ (80023c4 <displayGameStatus+0xa8>)
 800232a:	f001 fdab 	bl	8003e84 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 800232e:	4826      	ldr	r0, [pc, #152]	@ (80023c8 <displayGameStatus+0xac>)
 8002330:	f001 fdda 	bl	8003ee8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8002334:	2301      	movs	r3, #1
 8002336:	4a25      	ldr	r2, [pc, #148]	@ (80023cc <displayGameStatus+0xb0>)
 8002338:	2164      	movs	r1, #100	@ 0x64
 800233a:	2000      	movs	r0, #0
 800233c:	f001 fe5a 	bl	8003ff4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002340:	4823      	ldr	r0, [pc, #140]	@ (80023d0 <displayGameStatus+0xb4>)
 8002342:	f001 fdd1 	bl	8003ee8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to restart", CENTER_MODE);
 8002346:	2301      	movs	r3, #1
 8002348:	4a22      	ldr	r2, [pc, #136]	@ (80023d4 <displayGameStatus+0xb8>)
 800234a:	2182      	movs	r1, #130	@ 0x82
 800234c:	2000      	movs	r0, #0
 800234e:	f001 fe51 	bl	8003ff4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
  }
}
 8002352:	e032      	b.n	80023ba <displayGameStatus+0x9e>
  else if (gamePaused) {
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <displayGameStatus+0xbc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <displayGameStatus+0x6c>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800235c:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <displayGameStatus+0xa8>)
 800235e:	f001 fd91 	bl	8003e84 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002362:	4819      	ldr	r0, [pc, #100]	@ (80023c8 <displayGameStatus+0xac>)
 8002364:	f001 fdc0 	bl	8003ee8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 8002368:	2301      	movs	r3, #1
 800236a:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <displayGameStatus+0xc0>)
 800236c:	2164      	movs	r1, #100	@ 0x64
 800236e:	2000      	movs	r0, #0
 8002370:	f001 fe40 	bl	8003ff4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8002374:	4816      	ldr	r0, [pc, #88]	@ (80023d0 <displayGameStatus+0xb4>)
 8002376:	f001 fdb7 	bl	8003ee8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to resume", CENTER_MODE);
 800237a:	2301      	movs	r3, #1
 800237c:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <displayGameStatus+0xc4>)
 800237e:	2182      	movs	r1, #130	@ 0x82
 8002380:	2000      	movs	r0, #0
 8002382:	f001 fe37 	bl	8003ff4 <BSP_LCD_DisplayStringAt>
}
 8002386:	e018      	b.n	80023ba <displayGameStatus+0x9e>
  else if (!gameStarted) {
 8002388:	4b16      	ldr	r3, [pc, #88]	@ (80023e4 <displayGameStatus+0xc8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d114      	bne.n	80023ba <displayGameStatus+0x9e>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <displayGameStatus+0xa8>)
 8002392:	f001 fd77 	bl	8003e84 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8002396:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <displayGameStatus+0xac>)
 8002398:	f001 fda6 	bl	8003ee8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Snake Game", CENTER_MODE);
 800239c:	2301      	movs	r3, #1
 800239e:	4a12      	ldr	r2, [pc, #72]	@ (80023e8 <displayGameStatus+0xcc>)
 80023a0:	2164      	movs	r1, #100	@ 0x64
 80023a2:	2000      	movs	r0, #0
 80023a4:	f001 fe26 	bl	8003ff4 <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80023a8:	4809      	ldr	r0, [pc, #36]	@ (80023d0 <displayGameStatus+0xb4>)
 80023aa:	f001 fd9d 	bl	8003ee8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Touch the screen to start", CENTER_MODE);
 80023ae:	2301      	movs	r3, #1
 80023b0:	4a0e      	ldr	r2, [pc, #56]	@ (80023ec <displayGameStatus+0xd0>)
 80023b2:	2182      	movs	r1, #130	@ 0x82
 80023b4:	2000      	movs	r0, #0
 80023b6:	f001 fe1d 	bl	8003ff4 <BSP_LCD_DisplayStringAt>
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	2000029c 	.word	0x2000029c
 80023c4:	ffa52a2a 	.word	0xffa52a2a
 80023c8:	20000034 	.word	0x20000034
 80023cc:	08011468 	.word	0x08011468
 80023d0:	2000003c 	.word	0x2000003c
 80023d4:	08011474 	.word	0x08011474
 80023d8:	20000298 	.word	0x20000298
 80023dc:	08011490 	.word	0x08011490
 80023e0:	0801149c 	.word	0x0801149c
 80023e4:	20000294 	.word	0x20000294
 80023e8:	080114b8 	.word	0x080114b8
 80023ec:	080114c4 	.word	0x080114c4

080023f0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80023fa:	20c8      	movs	r0, #200	@ 0xc8
 80023fc:	f001 fc2e 	bl	8003c5c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002400:	f000 fa7a 	bl	80028f8 <ft5336_I2C_InitializeIfRequired>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002434:	2300      	movs	r3, #0
 8002436:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002438:	f000 fa5e 	bl	80028f8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e010      	b.n	8002464 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	21a8      	movs	r1, #168	@ 0xa8
 8002448:	4618      	mov	r0, r3
 800244a:	f001 fbe9 	bl	8003c20 <TS_IO_Read>
 800244e:	4603      	mov	r3, r0
 8002450:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002452:	7b7b      	ldrb	r3, [r7, #13]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b51      	cmp	r3, #81	@ 0x51
 8002458:	d101      	bne.n	800245e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	3301      	adds	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d802      	bhi.n	8002470 <ft5336_ReadID+0x4e>
 800246a:	7bbb      	ldrb	r3, [r7, #14]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0e8      	beq.n	8002442 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002470:	7b7b      	ldrb	r3, [r7, #13]
 8002472:	b2db      	uxtb	r3, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fa45 	bl	8002918 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f933 	bl	80026fc <ft5336_TS_DisableIT>
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2102      	movs	r1, #2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fbb3 	bl	8003c20 <TS_IO_Read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d901      	bls.n	80024d6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <ft5336_TS_DetectTouch+0x50>)
 80024dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <ft5336_TS_DetectTouch+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000658 	.word	0x20000658

080024f4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002516:	4b6d      	ldr	r3, [pc, #436]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 8002518:	789a      	ldrb	r2, [r3, #2]
 800251a:	4b6c      	ldr	r3, [pc, #432]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 800251c:	785b      	ldrb	r3, [r3, #1]
 800251e:	429a      	cmp	r2, r3
 8002520:	f080 80cf 	bcs.w	80026c2 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002524:	4b69      	ldr	r3, [pc, #420]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 8002526:	789b      	ldrb	r3, [r3, #2]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d871      	bhi.n	8002610 <ft5336_TS_GetXY+0x11c>
 800252c:	a201      	add	r2, pc, #4	@ (adr r2, 8002534 <ft5336_TS_GetXY+0x40>)
 800252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002532:	bf00      	nop
 8002534:	0800255d 	.word	0x0800255d
 8002538:	0800256f 	.word	0x0800256f
 800253c:	08002581 	.word	0x08002581
 8002540:	08002593 	.word	0x08002593
 8002544:	080025a5 	.word	0x080025a5
 8002548:	080025b7 	.word	0x080025b7
 800254c:	080025c9 	.word	0x080025c9
 8002550:	080025db 	.word	0x080025db
 8002554:	080025ed 	.word	0x080025ed
 8002558:	080025ff 	.word	0x080025ff
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800255c:	2304      	movs	r3, #4
 800255e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002560:	2303      	movs	r3, #3
 8002562:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002564:	2306      	movs	r3, #6
 8002566:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002568:	2305      	movs	r3, #5
 800256a:	753b      	strb	r3, [r7, #20]
      break;
 800256c:	e051      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800256e:	230a      	movs	r3, #10
 8002570:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002572:	2309      	movs	r3, #9
 8002574:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002576:	230c      	movs	r3, #12
 8002578:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800257a:	230b      	movs	r3, #11
 800257c:	753b      	strb	r3, [r7, #20]
      break;
 800257e:	e048      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002580:	2310      	movs	r3, #16
 8002582:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002584:	230f      	movs	r3, #15
 8002586:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002588:	2312      	movs	r3, #18
 800258a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800258c:	2311      	movs	r3, #17
 800258e:	753b      	strb	r3, [r7, #20]
      break;
 8002590:	e03f      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8002592:	2316      	movs	r3, #22
 8002594:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8002596:	2315      	movs	r3, #21
 8002598:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800259a:	2318      	movs	r3, #24
 800259c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800259e:	2317      	movs	r3, #23
 80025a0:	753b      	strb	r3, [r7, #20]
      break;
 80025a2:	e036      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80025a4:	231c      	movs	r3, #28
 80025a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80025a8:	231b      	movs	r3, #27
 80025aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80025ac:	231e      	movs	r3, #30
 80025ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80025b0:	231d      	movs	r3, #29
 80025b2:	753b      	strb	r3, [r7, #20]
      break;
 80025b4:	e02d      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80025b6:	2322      	movs	r3, #34	@ 0x22
 80025b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80025ba:	2321      	movs	r3, #33	@ 0x21
 80025bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80025be:	2324      	movs	r3, #36	@ 0x24
 80025c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80025c2:	2323      	movs	r3, #35	@ 0x23
 80025c4:	753b      	strb	r3, [r7, #20]
      break;
 80025c6:	e024      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80025c8:	2328      	movs	r3, #40	@ 0x28
 80025ca:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80025cc:	2327      	movs	r3, #39	@ 0x27
 80025ce:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80025d0:	232a      	movs	r3, #42	@ 0x2a
 80025d2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80025d4:	2329      	movs	r3, #41	@ 0x29
 80025d6:	753b      	strb	r3, [r7, #20]
      break;
 80025d8:	e01b      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80025da:	232e      	movs	r3, #46	@ 0x2e
 80025dc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80025de:	232d      	movs	r3, #45	@ 0x2d
 80025e0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80025e2:	2330      	movs	r3, #48	@ 0x30
 80025e4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80025e6:	232f      	movs	r3, #47	@ 0x2f
 80025e8:	753b      	strb	r3, [r7, #20]
      break;
 80025ea:	e012      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80025ec:	2334      	movs	r3, #52	@ 0x34
 80025ee:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80025f0:	2333      	movs	r3, #51	@ 0x33
 80025f2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80025f4:	2336      	movs	r3, #54	@ 0x36
 80025f6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80025f8:	2335      	movs	r3, #53	@ 0x35
 80025fa:	753b      	strb	r3, [r7, #20]
      break;
 80025fc:	e009      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80025fe:	233a      	movs	r3, #58	@ 0x3a
 8002600:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8002602:	2339      	movs	r3, #57	@ 0x39
 8002604:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8002606:	233c      	movs	r3, #60	@ 0x3c
 8002608:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800260a:	233b      	movs	r3, #59	@ 0x3b
 800260c:	753b      	strb	r3, [r7, #20]
      break;
 800260e:	e000      	b.n	8002612 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002610:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8002612:	89fb      	ldrh	r3, [r7, #14]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	7dfa      	ldrb	r2, [r7, #23]
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fb00 	bl	8003c20 <TS_IO_Read>
 8002620:	4603      	mov	r3, r0
 8002622:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	4b29      	ldr	r3, [pc, #164]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800262c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800262e:	89fb      	ldrh	r3, [r7, #14]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	7dba      	ldrb	r2, [r7, #22]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f001 faf2 	bl	8003c20 <TS_IO_Read>
 800263c:	4603      	mov	r3, r0
 800263e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	021b      	lsls	r3, r3, #8
 8002646:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800264a:	b21a      	sxth	r2, r3
 800264c:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b21b      	sxth	r3, r3
 8002652:	4313      	orrs	r3, r2
 8002654:	b21b      	sxth	r3, r3
 8002656:	b29a      	uxth	r2, r3
 8002658:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800265a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800265c:	4b1c      	ldr	r3, [pc, #112]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800265e:	881a      	ldrh	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	7d7a      	ldrb	r2, [r7, #21]
 800266a:	4611      	mov	r1, r2
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fad7 	bl	8003c20 <TS_IO_Read>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4b14      	ldr	r3, [pc, #80]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 800267e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002680:	89fb      	ldrh	r3, [r7, #14]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	7d3a      	ldrb	r2, [r7, #20]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f001 fac9 	bl	8003c20 <TS_IO_Read>
 800268e:	4603      	mov	r3, r0
 8002690:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800269c:	b21a      	sxth	r2, r3
 800269e:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026ac:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <ft5336_TS_GetXY+0x1dc>)
 80026b0:	881a      	ldrh	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	3301      	adds	r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <ft5336_TS_GetXY+0x1d8>)
 80026c0:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80026c2:	bf00      	nop
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000658 	.word	0x20000658
 80026d0:	2000065c 	.word	0x2000065c

080026d4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	21a4      	movs	r1, #164	@ 0xa4
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 fa7c 	bl	8003bec <TS_IO_Write>
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	21a4      	movs	r1, #164	@ 0xa4
 8002716:	4618      	mov	r0, r3
 8002718:	f001 fa68 	bl	8003bec <TS_IO_Write>
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	6039      	str	r1, [r7, #0]
 800275c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2101      	movs	r1, #1
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fa59 	bl	8003c20 <TS_IO_Read>
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	601a      	str	r2, [r3, #0]
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4603      	mov	r3, r0
 8002792:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80027a4:	4b4d      	ldr	r3, [pc, #308]	@ (80028dc <ft5336_TS_GetTouchInfo+0x158>)
 80027a6:	785b      	ldrb	r3, [r3, #1]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	f080 8090 	bcs.w	80028d2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d85d      	bhi.n	8002874 <ft5336_TS_GetTouchInfo+0xf0>
 80027b8:	a201      	add	r2, pc, #4	@ (adr r2, 80027c0 <ft5336_TS_GetTouchInfo+0x3c>)
 80027ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027be:	bf00      	nop
 80027c0:	080027e9 	.word	0x080027e9
 80027c4:	080027f7 	.word	0x080027f7
 80027c8:	08002805 	.word	0x08002805
 80027cc:	08002813 	.word	0x08002813
 80027d0:	08002821 	.word	0x08002821
 80027d4:	0800282f 	.word	0x0800282f
 80027d8:	0800283d 	.word	0x0800283d
 80027dc:	0800284b 	.word	0x0800284b
 80027e0:	08002859 	.word	0x08002859
 80027e4:	08002867 	.word	0x08002867
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80027e8:	2303      	movs	r3, #3
 80027ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80027ec:	2307      	movs	r3, #7
 80027ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80027f0:	2308      	movs	r3, #8
 80027f2:	757b      	strb	r3, [r7, #21]
      break;
 80027f4:	e03f      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80027f6:	2309      	movs	r3, #9
 80027f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80027fa:	230d      	movs	r3, #13
 80027fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80027fe:	230e      	movs	r3, #14
 8002800:	757b      	strb	r3, [r7, #21]
      break;
 8002802:	e038      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8002804:	230f      	movs	r3, #15
 8002806:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8002808:	2313      	movs	r3, #19
 800280a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800280c:	2314      	movs	r3, #20
 800280e:	757b      	strb	r3, [r7, #21]
      break;
 8002810:	e031      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8002812:	2315      	movs	r3, #21
 8002814:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8002816:	2319      	movs	r3, #25
 8002818:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800281a:	231a      	movs	r3, #26
 800281c:	757b      	strb	r3, [r7, #21]
      break;
 800281e:	e02a      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8002820:	231b      	movs	r3, #27
 8002822:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8002824:	231f      	movs	r3, #31
 8002826:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8002828:	2320      	movs	r3, #32
 800282a:	757b      	strb	r3, [r7, #21]
      break;
 800282c:	e023      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800282e:	2321      	movs	r3, #33	@ 0x21
 8002830:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8002832:	2325      	movs	r3, #37	@ 0x25
 8002834:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8002836:	2326      	movs	r3, #38	@ 0x26
 8002838:	757b      	strb	r3, [r7, #21]
      break;
 800283a:	e01c      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800283c:	2327      	movs	r3, #39	@ 0x27
 800283e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8002840:	232b      	movs	r3, #43	@ 0x2b
 8002842:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8002844:	232c      	movs	r3, #44	@ 0x2c
 8002846:	757b      	strb	r3, [r7, #21]
      break;
 8002848:	e015      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800284a:	232d      	movs	r3, #45	@ 0x2d
 800284c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800284e:	2331      	movs	r3, #49	@ 0x31
 8002850:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8002852:	2332      	movs	r3, #50	@ 0x32
 8002854:	757b      	strb	r3, [r7, #21]
      break;
 8002856:	e00e      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8002858:	2333      	movs	r3, #51	@ 0x33
 800285a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800285c:	2337      	movs	r3, #55	@ 0x37
 800285e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8002860:	2338      	movs	r3, #56	@ 0x38
 8002862:	757b      	strb	r3, [r7, #21]
      break;
 8002864:	e007      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8002866:	2339      	movs	r3, #57	@ 0x39
 8002868:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800286a:	233d      	movs	r3, #61	@ 0x3d
 800286c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800286e:	233e      	movs	r3, #62	@ 0x3e
 8002870:	757b      	strb	r3, [r7, #21]
      break;
 8002872:	e000      	b.n	8002876 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8002874:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002876:	89fb      	ldrh	r3, [r7, #14]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	7dfa      	ldrb	r2, [r7, #23]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f9ce 	bl	8003c20 <TS_IO_Read>
 8002884:	4603      	mov	r3, r0
 8002886:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8002888:	7d3b      	ldrb	r3, [r7, #20]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	119b      	asrs	r3, r3, #6
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	7dba      	ldrb	r2, [r7, #22]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 f9be 	bl	8003c20 <TS_IO_Read>
 80028a4:	4603      	mov	r3, r0
 80028a6:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80028a8:	7d3b      	ldrb	r3, [r7, #20]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80028b2:	89fb      	ldrh	r3, [r7, #14]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	7d7a      	ldrb	r2, [r7, #21]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 f9b0 	bl	8003c20 <TS_IO_Read>
 80028c0:	4603      	mov	r3, r0
 80028c2:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80028c4:	7d3b      	ldrb	r3, [r7, #20]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	111b      	asrs	r3, r3, #4
 80028ca:	f003 0204 	and.w	r2, r3, #4
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000658 	.word	0x20000658

080028e0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000658 	.word	0x20000658

080028f8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80028fc:	f7ff fff0 	bl	80028e0 <ft5336_Get_I2C_InitializedStatus>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002906:	f001 f967 	bl	8003bd8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800290a:	4b02      	ldr	r3, [pc, #8]	@ (8002914 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
  }
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000658 	.word	0x20000658

08002918 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	@ 0x40
 8002938:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	605a      	str	r2, [r3, #4]
 8002944:	609a      	str	r2, [r3, #8]
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800294a:	4baf      	ldr	r3, [pc, #700]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4aae      	ldr	r2, [pc, #696]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002950:	f043 0310 	orr.w	r3, r3, #16
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4bac      	ldr	r3, [pc, #688]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002962:	4ba9      	ldr	r3, [pc, #676]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4aa8      	ldr	r2, [pc, #672]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4ba6      	ldr	r3, [pc, #664]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
 8002978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4ba3      	ldr	r3, [pc, #652]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4aa2      	ldr	r2, [pc, #648]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	@ 0x30
 8002986:	4ba0      	ldr	r3, [pc, #640]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002992:	4b9d      	ldr	r3, [pc, #628]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a9c      	ldr	r2, [pc, #624]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b9a      	ldr	r3, [pc, #616]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029aa:	4b97      	ldr	r3, [pc, #604]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4a96      	ldr	r2, [pc, #600]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4b94      	ldr	r3, [pc, #592]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	61bb      	str	r3, [r7, #24]
 80029c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	4b91      	ldr	r3, [pc, #580]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a90      	ldr	r2, [pc, #576]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80029da:	4b8b      	ldr	r3, [pc, #556]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a8a      	ldr	r2, [pc, #552]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b88      	ldr	r3, [pc, #544]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029f2:	4b85      	ldr	r3, [pc, #532]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a84      	ldr	r2, [pc, #528]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b82      	ldr	r3, [pc, #520]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b7c      	ldr	r3, [pc, #496]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a22:	4b79      	ldr	r3, [pc, #484]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a78      	ldr	r2, [pc, #480]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a28:	f043 0320 	orr.w	r3, r3, #32
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b76      	ldr	r3, [pc, #472]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a3a:	4b73      	ldr	r3, [pc, #460]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a72      	ldr	r2, [pc, #456]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b70      	ldr	r3, [pc, #448]	@ (8002c08 <MX_GPIO_Init+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2160      	movs	r1, #96	@ 0x60
 8002a56:	486d      	ldr	r0, [pc, #436]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002a58:	f004 fd8a 	bl	8007570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	2120      	movs	r1, #32
 8002a60:	486b      	ldr	r0, [pc, #428]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002a62:	f004 fd85 	bl	8007570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2108      	movs	r1, #8
 8002a6a:	4869      	ldr	r0, [pc, #420]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002a6c:	f004 fd80 	bl	8007570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2108      	movs	r1, #8
 8002a74:	4867      	ldr	r0, [pc, #412]	@ (8002c14 <MX_GPIO_Init+0x2e0>)
 8002a76:	f004 fd7b 	bl	8007570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a80:	4865      	ldr	r0, [pc, #404]	@ (8002c18 <MX_GPIO_Init+0x2e4>)
 8002a82:	f004 fd75 	bl	8007570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002a86:	2200      	movs	r2, #0
 8002a88:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8002a8c:	4863      	ldr	r0, [pc, #396]	@ (8002c1c <MX_GPIO_Init+0x2e8>)
 8002a8e:	f004 fd6f 	bl	8007570 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002a92:	2200      	movs	r2, #0
 8002a94:	21c8      	movs	r1, #200	@ 0xc8
 8002a96:	4862      	ldr	r0, [pc, #392]	@ (8002c20 <MX_GPIO_Init+0x2ec>)
 8002a98:	f004 fd6a 	bl	8007570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002aa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aac:	4619      	mov	r1, r3
 8002aae:	4857      	ldr	r0, [pc, #348]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002ab0:	f004 fb9a 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002ac4:	2309      	movs	r3, #9
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002acc:	4619      	mov	r1, r3
 8002ace:	484f      	ldr	r0, [pc, #316]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002ad0:	f004 fb8a 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002ad4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ae6:	230b      	movs	r3, #11
 8002ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002aea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002aee:	4619      	mov	r1, r3
 8002af0:	484b      	ldr	r0, [pc, #300]	@ (8002c20 <MX_GPIO_Init+0x2ec>)
 8002af2:	f004 fb79 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002af6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afc:	2312      	movs	r3, #18
 8002afe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b10:	4619      	mov	r1, r3
 8002b12:	4844      	ldr	r0, [pc, #272]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002b14:	f004 fb68 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002b18:	f643 0323 	movw	r3, #14371	@ 0x3823
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	2303      	movs	r3, #3
 8002b28:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b32:	4619      	mov	r1, r3
 8002b34:	483b      	ldr	r0, [pc, #236]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002b36:	f004 fb57 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b52:	4619      	mov	r1, r3
 8002b54:	482e      	ldr	r0, [pc, #184]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002b56:	f004 fb47 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8002b5a:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482e      	ldr	r0, [pc, #184]	@ (8002c28 <MX_GPIO_Init+0x2f4>)
 8002b70:	f004 fb3a 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002b74:	2360      	movs	r3, #96	@ 0x60
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4820      	ldr	r0, [pc, #128]	@ (8002c0c <MX_GPIO_Init+0x2d8>)
 8002b8c:	f004 fb2c 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002b90:	2340      	movs	r3, #64	@ 0x40
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ba0:	230a      	movs	r3, #10
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba8:	4619      	mov	r1, r3
 8002baa:	481e      	ldr	r0, [pc, #120]	@ (8002c24 <MX_GPIO_Init+0x2f0>)
 8002bac:	f004 fb1c 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4819      	ldr	r0, [pc, #100]	@ (8002c2c <MX_GPIO_Init+0x2f8>)
 8002bc6:	f004 fb0f 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002bca:	2340      	movs	r3, #64	@ 0x40
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002bce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480c      	ldr	r0, [pc, #48]	@ (8002c10 <MX_GPIO_Init+0x2dc>)
 8002be0:	f004 fb02 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8002be4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bf6:	230a      	movs	r3, #10
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4809      	ldr	r0, [pc, #36]	@ (8002c28 <MX_GPIO_Init+0x2f4>)
 8002c02:	f004 faf1 	bl	80071e8 <HAL_GPIO_Init>
 8002c06:	e013      	b.n	8002c30 <MX_GPIO_Init+0x2fc>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40022800 	.word	0x40022800
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021c00 	.word	0x40021c00
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8002c30:	2328      	movs	r3, #40	@ 0x28
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c34:	2301      	movs	r3, #1
 8002c36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c44:	4619      	mov	r1, r3
 8002c46:	48b0      	ldr	r0, [pc, #704]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002c48:	f004 face 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c50:	2302      	movs	r3, #2
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002c60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	48a9      	ldr	r0, [pc, #676]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002c68:	f004 fabe 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c72:	2300      	movs	r3, #0
 8002c74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c7e:	4619      	mov	r1, r3
 8002c80:	48a3      	ldr	r0, [pc, #652]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002c82:	f004 fab1 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002c86:	2308      	movs	r3, #8
 8002c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c92:	2300      	movs	r3, #0
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	489d      	ldr	r0, [pc, #628]	@ (8002f14 <MX_GPIO_Init+0x5e0>)
 8002c9e:	f004 faa3 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8002ca2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4898      	ldr	r0, [pc, #608]	@ (8002f18 <MX_GPIO_Init+0x5e4>)
 8002cb8:	f004 fa96 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ccc:	4619      	mov	r1, r3
 8002cce:	488e      	ldr	r0, [pc, #568]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002cd0:	f004 fa8a 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8002cd4:	f24a 0304 	movw	r3, #40964	@ 0xa004
 8002cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002ce2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	488c      	ldr	r0, [pc, #560]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002cea:	f004 fa7d 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cfe:	2305      	movs	r3, #5
 8002d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d06:	4619      	mov	r1, r3
 8002d08:	4880      	ldr	r0, [pc, #512]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d0a:	f004 fa6d 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d14:	2301      	movs	r3, #1
 8002d16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d24:	4619      	mov	r1, r3
 8002d26:	4879      	ldr	r0, [pc, #484]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d28:	f004 fa5e 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002d2c:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8002d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d42:	4619      	mov	r1, r3
 8002d44:	4875      	ldr	r0, [pc, #468]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002d46:	f004 fa4f 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002d4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002d50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002d54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	486a      	ldr	r0, [pc, #424]	@ (8002f0c <MX_GPIO_Init+0x5d8>)
 8002d62:	f004 fa41 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002d66:	23c0      	movs	r3, #192	@ 0xc0
 8002d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d72:	2303      	movs	r3, #3
 8002d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d76:	2308      	movs	r3, #8
 8002d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4863      	ldr	r0, [pc, #396]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002d82:	f004 fa31 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002d86:	2310      	movs	r3, #16
 8002d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002d96:	230a      	movs	r3, #10
 8002d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d9e:	4619      	mov	r1, r3
 8002da0:	485e      	ldr	r0, [pc, #376]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002da2:	f004 fa21 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002da6:	23c8      	movs	r3, #200	@ 0xc8
 8002da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002daa:	2301      	movs	r3, #1
 8002dac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002db6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4856      	ldr	r0, [pc, #344]	@ (8002f18 <MX_GPIO_Init+0x5e4>)
 8002dbe:	f004 fa13 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002dc2:	23c0      	movs	r3, #192	@ 0xc0
 8002dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002dd2:	2308      	movs	r3, #8
 8002dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4850      	ldr	r0, [pc, #320]	@ (8002f20 <MX_GPIO_Init+0x5ec>)
 8002dde:	f004 fa03 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002de2:	2305      	movs	r3, #5
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dee:	2303      	movs	r3, #3
 8002df0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002df2:	230a      	movs	r3, #10
 8002df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4844      	ldr	r0, [pc, #272]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002dfe:	f004 f9f3 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002e02:	2332      	movs	r3, #50	@ 0x32
 8002e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e12:	230b      	movs	r3, #11
 8002e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	483c      	ldr	r0, [pc, #240]	@ (8002f10 <MX_GPIO_Init+0x5dc>)
 8002e1e:	f004 f9e3 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e22:	2304      	movs	r3, #4
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e32:	2309      	movs	r3, #9
 8002e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4839      	ldr	r0, [pc, #228]	@ (8002f24 <MX_GPIO_Init+0x5f0>)
 8002e3e:	f004 f9d3 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002e42:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e54:	2309      	movs	r3, #9
 8002e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	482a      	ldr	r0, [pc, #168]	@ (8002f08 <MX_GPIO_Init+0x5d4>)
 8002e60:	f004 f9c2 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002e64:	2386      	movs	r3, #134	@ 0x86
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e70:	2303      	movs	r3, #3
 8002e72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e74:	230b      	movs	r3, #11
 8002e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	482a      	ldr	r0, [pc, #168]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002e80:	f004 f9b2 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e84:	2310      	movs	r3, #16
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002e94:	4619      	mov	r1, r3
 8002e96:	4824      	ldr	r0, [pc, #144]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002e98:	f004 f9a6 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002e9c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ea2:	2312      	movs	r3, #18
 8002ea4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002eae:	2304      	movs	r3, #4
 8002eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002eb2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4818      	ldr	r0, [pc, #96]	@ (8002f1c <MX_GPIO_Init+0x5e8>)
 8002eba:	f004 f995 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002ebe:	2328      	movs	r3, #40	@ 0x28
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002ece:	230a      	movs	r3, #10
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4813      	ldr	r0, [pc, #76]	@ (8002f28 <MX_GPIO_Init+0x5f4>)
 8002eda:	f004 f985 	bl	80071e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002ede:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ef0:	2305      	movs	r3, #5
 8002ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	480a      	ldr	r0, [pc, #40]	@ (8002f24 <MX_GPIO_Init+0x5f0>)
 8002efc:	f004 f974 	bl	80071e8 <HAL_GPIO_Init>

}
 8002f00:	bf00      	nop
 8002f02:	3740      	adds	r7, #64	@ 0x40
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40022000 	.word	0x40022000
 8002f10:	40020800 	.word	0x40020800
 8002f14:	40022800 	.word	0x40022800
 8002f18:	40021800 	.word	0x40021800
 8002f1c:	40021c00 	.word	0x40021c00
 8002f20:	40021400 	.word	0x40021400
 8002f24:	40020400 	.word	0x40020400
 8002f28:	40020000 	.word	0x40020000

08002f2c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	@ 0x38
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2234      	movs	r2, #52	@ 0x34
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f00d f942 	bl	80101c2 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f40:	4a3a      	ldr	r2, [pc, #232]	@ (800302c <MX_LTDC_Init+0x100>)
 8002f42:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002f44:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002f4a:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002f50:	4b35      	ldr	r3, [pc, #212]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f5e:	2228      	movs	r2, #40	@ 0x28
 8002f60:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f64:	2209      	movs	r2, #9
 8002f66:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002f68:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f6a:	2235      	movs	r2, #53	@ 0x35
 8002f6c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f70:	220b      	movs	r2, #11
 8002f72:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002f74:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f76:	f240 2215 	movw	r2, #533	@ 0x215
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f7e:	f240 121b 	movw	r2, #283	@ 0x11b
 8002f82:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002f84:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f86:	f240 2235 	movw	r2, #565	@ 0x235
 8002f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f8e:	f240 121d 	movw	r2, #285	@ 0x11d
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002f94:	4b24      	ldr	r3, [pc, #144]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002f9c:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002fa4:	4b20      	ldr	r3, [pc, #128]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002fac:	481e      	ldr	r0, [pc, #120]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8002fae:	f005 f8a3 	bl	80080f8 <HAL_LTDC_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002fb8:	f000 fa2a 	bl	8003410 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8002fc0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002fc4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8002fca:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002fce:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002fd4:	23ff      	movs	r3, #255	@ 0xff
 8002fd6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002fdc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002fe0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002fe6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002fec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002ff2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002ff6:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	2200      	movs	r2, #0
 800300e:	4619      	mov	r1, r3
 8003010:	4805      	ldr	r0, [pc, #20]	@ (8003028 <MX_LTDC_Init+0xfc>)
 8003012:	f005 fa03 	bl	800841c <HAL_LTDC_ConfigLayer>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800301c:	f000 f9f8 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	3738      	adds	r7, #56	@ 0x38
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000660 	.word	0x20000660
 800302c:	40016800 	.word	0x40016800

08003030 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	@ 0x38
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	60da      	str	r2, [r3, #12]
 8003046:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a55      	ldr	r2, [pc, #340]	@ (80031a4 <HAL_LTDC_MspInit+0x174>)
 800304e:	4293      	cmp	r3, r2
 8003050:	f040 80a3 	bne.w	800319a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003054:	4b54      	ldr	r3, [pc, #336]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	4a53      	ldr	r2, [pc, #332]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800305a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800305e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003060:	4b51      	ldr	r3, [pc, #324]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003068:	623b      	str	r3, [r7, #32]
 800306a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800306c:	4b4e      	ldr	r3, [pc, #312]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	6313      	str	r3, [r2, #48]	@ 0x30
 8003078:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003084:	4b48      	ldr	r3, [pc, #288]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	4a47      	ldr	r2, [pc, #284]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800308a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800308e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003090:	4b45      	ldr	r3, [pc, #276]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800309c:	4b42      	ldr	r3, [pc, #264]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	4a41      	ldr	r2, [pc, #260]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030a8:	4b3f      	ldr	r3, [pc, #252]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030b4:	4b3c      	ldr	r3, [pc, #240]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	4a3b      	ldr	r2, [pc, #236]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030be:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c0:	4b39      	ldr	r3, [pc, #228]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030cc:	4b36      	ldr	r3, [pc, #216]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	4a35      	ldr	r2, [pc, #212]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030d8:	4b33      	ldr	r3, [pc, #204]	@ (80031a8 <HAL_LTDC_MspInit+0x178>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80030e4:	2310      	movs	r3, #16
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030f4:	230e      	movs	r3, #14
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80030f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030fc:	4619      	mov	r1, r3
 80030fe:	482b      	ldr	r0, [pc, #172]	@ (80031ac <HAL_LTDC_MspInit+0x17c>)
 8003100:	f004 f872 	bl	80071e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003104:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003116:	230e      	movs	r3, #14
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800311a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800311e:	4619      	mov	r1, r3
 8003120:	4823      	ldr	r0, [pc, #140]	@ (80031b0 <HAL_LTDC_MspInit+0x180>)
 8003122:	f004 f861 	bl	80071e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003126:	23f7      	movs	r3, #247	@ 0xf7
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003132:	2300      	movs	r3, #0
 8003134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003136:	230e      	movs	r3, #14
 8003138:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800313a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800313e:	4619      	mov	r1, r3
 8003140:	481c      	ldr	r0, [pc, #112]	@ (80031b4 <HAL_LTDC_MspInit+0x184>)
 8003142:	f004 f851 	bl	80071e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003146:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003158:	2309      	movs	r3, #9
 800315a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800315c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003160:	4619      	mov	r1, r3
 8003162:	4815      	ldr	r0, [pc, #84]	@ (80031b8 <HAL_LTDC_MspInit+0x188>)
 8003164:	f004 f840 	bl	80071e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003168:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800317a:	230e      	movs	r3, #14
 800317c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800317e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003182:	4619      	mov	r1, r3
 8003184:	480d      	ldr	r0, [pc, #52]	@ (80031bc <HAL_LTDC_MspInit+0x18c>)
 8003186:	f004 f82f 	bl	80071e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2105      	movs	r1, #5
 800318e:	2058      	movs	r0, #88	@ 0x58
 8003190:	f003 f882 	bl	8006298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003194:	2058      	movs	r0, #88	@ 0x58
 8003196:	f003 f89b 	bl	80062d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800319a:	bf00      	nop
 800319c:	3738      	adds	r7, #56	@ 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40016800 	.word	0x40016800
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40022400 	.word	0x40022400
 80031b4:	40022800 	.word	0x40022800
 80031b8:	40021800 	.word	0x40021800
 80031bc:	40022000 	.word	0x40022000

080031c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031c4:	4b15      	ldr	r3, [pc, #84]	@ (800321c <main+0x5c>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031ca:	4b14      	ldr	r3, [pc, #80]	@ (800321c <main+0x5c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d0:	f002 fb5f 	bl	8005892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031d4:	f000 f824 	bl	8003220 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80031d8:	f000 f892 	bl	8003300 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031dc:	f7ff fbaa 	bl	8002934 <MX_GPIO_Init>
  MX_DMA_Init();
 80031e0:	f7fd fede 	bl	8000fa0 <MX_DMA_Init>
  MX_DMA2D_Init();
 80031e4:	f7fd ff12 	bl	800100c <MX_DMA2D_Init>
  MX_FMC_Init();
 80031e8:	f7fd ff68 	bl	80010bc <MX_FMC_Init>
  MX_LTDC_Init();
 80031ec:	f7ff fe9e 	bl	8002f2c <MX_LTDC_Init>
  MX_TIM5_Init();
 80031f0:	f002 fa06 	bl	8005600 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80031f4:	f002 fa72 	bl	80056dc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80031f8:	f7fd fdc0 	bl	8000d7c <MX_ADC1_Init>
  MX_SAI2_Init();
 80031fc:	f000 f90e 	bl	800341c <MX_SAI2_Init>
  MX_ADC3_Init();
 8003200:	f7fd fe0e 	bl	8000e20 <MX_ADC3_Init>
  MX_SDMMC1_SD_Init();
 8003204:	f000 fa90 	bl	8003728 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8003208:	f009 fd4e 	bl	800cca8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  initDisplay();
 800320c:	f000 f8aa 	bl	8003364 <initDisplay>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8003210:	f7fe f858 	bl	80012c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003214:	f00a f80f 	bl	800d236 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <main+0x58>
 800321c:	20000708 	.word	0x20000708

08003220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b094      	sub	sp, #80	@ 0x50
 8003224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003226:	f107 0320 	add.w	r3, r7, #32
 800322a:	2230      	movs	r2, #48	@ 0x30
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f00c ffc7 	bl	80101c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003244:	f005 fad0 	bl	80087e8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003248:	4b2b      	ldr	r3, [pc, #172]	@ (80032f8 <SystemClock_Config+0xd8>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <SystemClock_Config+0xd8>)
 800324e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003252:	6413      	str	r3, [r2, #64]	@ 0x40
 8003254:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <SystemClock_Config+0xd8>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003260:	4b26      	ldr	r3, [pc, #152]	@ (80032fc <SystemClock_Config+0xdc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a25      	ldr	r2, [pc, #148]	@ (80032fc <SystemClock_Config+0xdc>)
 8003266:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b23      	ldr	r3, [pc, #140]	@ (80032fc <SystemClock_Config+0xdc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003278:	2301      	movs	r3, #1
 800327a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800327c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003282:	2302      	movs	r3, #2
 8003284:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003286:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800328a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800328c:	2319      	movs	r3, #25
 800328e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8003290:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003294:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003296:	2302      	movs	r3, #2
 8003298:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800329a:	2309      	movs	r3, #9
 800329c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800329e:	f107 0320 	add.w	r3, r7, #32
 80032a2:	4618      	mov	r0, r3
 80032a4:	f005 fb00 	bl	80088a8 <HAL_RCC_OscConfig>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80032ae:	f000 f8af 	bl	8003410 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032b2:	f005 faa9 	bl	8008808 <HAL_PWREx_EnableOverDrive>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80032bc:	f000 f8a8 	bl	8003410 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032c0:	230f      	movs	r3, #15
 80032c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032c4:	2302      	movs	r3, #2
 80032c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80032d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80032d8:	f107 030c 	add.w	r3, r7, #12
 80032dc:	2106      	movs	r1, #6
 80032de:	4618      	mov	r0, r3
 80032e0:	f005 fd86 	bl	8008df0 <HAL_RCC_ClockConfig>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <SystemClock_Config+0xce>
  {
    Error_Handler();
 80032ea:	f000 f891 	bl	8003410 <Error_Handler>
  }
}
 80032ee:	bf00      	nop
 80032f0:	3750      	adds	r7, #80	@ 0x50
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40007000 	.word	0x40007000

08003300 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b0a2      	sub	sp, #136	@ 0x88
 8003304:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2284      	movs	r2, #132	@ 0x84
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f00c ff58 	bl	80101c2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8003312:	4b13      	ldr	r3, [pc, #76]	@ (8003360 <PeriphCommonClock_Config+0x60>)
 8003314:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003316:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800331a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800331c:	2305      	movs	r3, #5
 800331e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003320:	2302      	movs	r3, #2
 8003322:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003324:	2303      	movs	r3, #3
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003328:	2301      	movs	r3, #1
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800332c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003330:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8003332:	2300      	movs	r3, #0
 8003334:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003336:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800333a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003344:	1d3b      	adds	r3, r7, #4
 8003346:	4618      	mov	r0, r3
 8003348:	f005 ff6a 	bl	8009220 <HAL_RCCEx_PeriphCLKConfig>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003352:	f000 f85d 	bl	8003410 <Error_Handler>
  }
}
 8003356:	bf00      	nop
 8003358:	3788      	adds	r7, #136	@ 0x88
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	00b00008 	.word	0x00b00008

08003364 <initDisplay>:

/* USER CODE BEGIN 4 */
void initDisplay()
{
 8003364:	b598      	push	{r3, r4, r7, lr}
 8003366:	af00      	add	r7, sp, #0
  BSP_LCD_Init();
 8003368:	f000 fc84 	bl	8003c74 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800336c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003370:	2000      	movs	r0, #0
 8003372:	f000 fd17 	bl	8003da4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8003376:	f000 fced 	bl	8003d54 <BSP_LCD_GetXSize>
 800337a:	4604      	mov	r4, r0
 800337c:	f000 fcfe 	bl	8003d7c <BSP_LCD_GetYSize>
 8003380:	4603      	mov	r3, r0
 8003382:	fb04 f303 	mul.w	r3, r4, r3
 8003386:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4619      	mov	r1, r3
 800338e:	2001      	movs	r0, #1
 8003390:	f000 fd08 	bl	8003da4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8003394:	f001 f8c8 	bl	8004528 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8003398:	2000      	movs	r0, #0
 800339a:	f000 fd63 	bl	8003e64 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800339e:	4810      	ldr	r0, [pc, #64]	@ (80033e0 <initDisplay+0x7c>)
 80033a0:	f000 fdbc 	bl	8003f1c <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80033a4:	2001      	movs	r0, #1
 80033a6:	f000 fd5d 	bl	8003e64 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 80033aa:	2000      	movs	r0, #0
 80033ac:	f000 fdb6 	bl	8003f1c <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 80033b0:	480c      	ldr	r0, [pc, #48]	@ (80033e4 <initDisplay+0x80>)
 80033b2:	f000 fd99 	bl	8003ee8 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80033b6:	480c      	ldr	r0, [pc, #48]	@ (80033e8 <initDisplay+0x84>)
 80033b8:	f000 fd64 	bl	8003e84 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 80033bc:	2000      	movs	r0, #0
 80033be:	f000 fd79 	bl	8003eb4 <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80033c2:	f000 fcc7 	bl	8003d54 <BSP_LCD_GetXSize>
 80033c6:	4603      	mov	r3, r0
 80033c8:	b29c      	uxth	r4, r3
 80033ca:	f000 fcd7 	bl	8003d7c <BSP_LCD_GetYSize>
 80033ce:	4603      	mov	r3, r0
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	4619      	mov	r1, r3
 80033d4:	4620      	mov	r0, r4
 80033d6:	f001 fcb9 	bl	8004d4c <BSP_TS_Init>
}
 80033da:	bf00      	nop
 80033dc:	bd98      	pop	{r3, r4, r7, pc}
 80033de:	bf00      	nop
 80033e0:	ff81cd4b 	.word	0xff81cd4b
 80033e4:	2000003c 	.word	0x2000003c
 80033e8:	ffa52a2a 	.word	0xffa52a2a

080033ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a04      	ldr	r2, [pc, #16]	@ (800340c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80033fe:	f002 fa55 	bl	80058ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40001000 	.word	0x40001000

08003410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003414:	b672      	cpsid	i
}
 8003416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <Error_Handler+0x8>

0800341c <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8003420:	4b4e      	ldr	r3, [pc, #312]	@ (800355c <MX_SAI2_Init+0x140>)
 8003422:	4a4f      	ldr	r2, [pc, #316]	@ (8003560 <MX_SAI2_Init+0x144>)
 8003424:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003426:	4b4d      	ldr	r3, [pc, #308]	@ (800355c <MX_SAI2_Init+0x140>)
 8003428:	2200      	movs	r2, #0
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800342c:	4b4b      	ldr	r3, [pc, #300]	@ (800355c <MX_SAI2_Init+0x140>)
 800342e:	2200      	movs	r2, #0
 8003430:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8003432:	4b4a      	ldr	r3, [pc, #296]	@ (800355c <MX_SAI2_Init+0x140>)
 8003434:	2240      	movs	r2, #64	@ 0x40
 8003436:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8003438:	4b48      	ldr	r3, [pc, #288]	@ (800355c <MX_SAI2_Init+0x140>)
 800343a:	2200      	movs	r2, #0
 800343c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800343e:	4b47      	ldr	r3, [pc, #284]	@ (800355c <MX_SAI2_Init+0x140>)
 8003440:	2200      	movs	r2, #0
 8003442:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8003444:	4b45      	ldr	r3, [pc, #276]	@ (800355c <MX_SAI2_Init+0x140>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800344a:	4b44      	ldr	r3, [pc, #272]	@ (800355c <MX_SAI2_Init+0x140>)
 800344c:	2200      	movs	r2, #0
 800344e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8003450:	4b42      	ldr	r3, [pc, #264]	@ (800355c <MX_SAI2_Init+0x140>)
 8003452:	2200      	movs	r2, #0
 8003454:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003456:	4b41      	ldr	r3, [pc, #260]	@ (800355c <MX_SAI2_Init+0x140>)
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <MX_SAI2_Init+0x140>)
 800345e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003462:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003464:	4b3d      	ldr	r3, [pc, #244]	@ (800355c <MX_SAI2_Init+0x140>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800346a:	4b3c      	ldr	r3, [pc, #240]	@ (800355c <MX_SAI2_Init+0x140>)
 800346c:	2200      	movs	r2, #0
 800346e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003470:	4b3a      	ldr	r3, [pc, #232]	@ (800355c <MX_SAI2_Init+0x140>)
 8003472:	2200      	movs	r2, #0
 8003474:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003476:	4b39      	ldr	r3, [pc, #228]	@ (800355c <MX_SAI2_Init+0x140>)
 8003478:	2200      	movs	r2, #0
 800347a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800347c:	4b37      	ldr	r3, [pc, #220]	@ (800355c <MX_SAI2_Init+0x140>)
 800347e:	2208      	movs	r2, #8
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8003482:	4b36      	ldr	r3, [pc, #216]	@ (800355c <MX_SAI2_Init+0x140>)
 8003484:	2201      	movs	r2, #1
 8003486:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003488:	4b34      	ldr	r3, [pc, #208]	@ (800355c <MX_SAI2_Init+0x140>)
 800348a:	2200      	movs	r2, #0
 800348c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800348e:	4b33      	ldr	r3, [pc, #204]	@ (800355c <MX_SAI2_Init+0x140>)
 8003490:	2200      	movs	r2, #0
 8003492:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003494:	4b31      	ldr	r3, [pc, #196]	@ (800355c <MX_SAI2_Init+0x140>)
 8003496:	2200      	movs	r2, #0
 8003498:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800349a:	4b30      	ldr	r3, [pc, #192]	@ (800355c <MX_SAI2_Init+0x140>)
 800349c:	2200      	movs	r2, #0
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80034a0:	4b2e      	ldr	r3, [pc, #184]	@ (800355c <MX_SAI2_Init+0x140>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80034a6:	4b2d      	ldr	r3, [pc, #180]	@ (800355c <MX_SAI2_Init+0x140>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80034ac:	4b2b      	ldr	r3, [pc, #172]	@ (800355c <MX_SAI2_Init+0x140>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80034b2:	482a      	ldr	r0, [pc, #168]	@ (800355c <MX_SAI2_Init+0x140>)
 80034b4:	f006 fbe4 	bl	8009c80 <HAL_SAI_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 80034be:	f7ff ffa7 	bl	8003410 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80034c2:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034c4:	4a28      	ldr	r2, [pc, #160]	@ (8003568 <MX_SAI2_Init+0x14c>)
 80034c6:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80034c8:	4b26      	ldr	r3, [pc, #152]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80034ce:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034d0:	2203      	movs	r2, #3
 80034d2:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80034d4:	4b23      	ldr	r3, [pc, #140]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034d6:	2240      	movs	r2, #64	@ 0x40
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80034da:	4b22      	ldr	r3, [pc, #136]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034dc:	2200      	movs	r2, #0
 80034de:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80034e0:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80034e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80034ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80034f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80034f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <MX_SAI2_Init+0x148>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80034fe:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003500:	2200      	movs	r2, #0
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003504:	4b17      	ldr	r3, [pc, #92]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800350a:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <MX_SAI2_Init+0x148>)
 800350c:	2200      	movs	r2, #0
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8003510:	4b14      	ldr	r3, [pc, #80]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003512:	2208      	movs	r2, #8
 8003514:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8003516:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003518:	2201      	movs	r2, #1
 800351a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800351c:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <MX_SAI2_Init+0x148>)
 800351e:	2200      	movs	r2, #0
 8003520:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8003522:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003524:	2200      	movs	r2, #0
 8003526:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003528:	4b0e      	ldr	r3, [pc, #56]	@ (8003564 <MX_SAI2_Init+0x148>)
 800352a:	2200      	movs	r2, #0
 800352c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800352e:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003530:	2200      	movs	r2, #0
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003534:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003536:	2200      	movs	r2, #0
 8003538:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800353a:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <MX_SAI2_Init+0x148>)
 800353c:	2201      	movs	r2, #1
 800353e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8003540:	4b08      	ldr	r3, [pc, #32]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003542:	2200      	movs	r2, #0
 8003544:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8003546:	4807      	ldr	r0, [pc, #28]	@ (8003564 <MX_SAI2_Init+0x148>)
 8003548:	f006 fb9a 	bl	8009c80 <HAL_SAI_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <MX_SAI2_Init+0x13a>
  {
    Error_Handler();
 8003552:	f7ff ff5d 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000718 	.word	0x20000718
 8003560:	40015c04 	.word	0x40015c04
 8003564:	2000079c 	.word	0x2000079c
 8003568:	40015c24 	.word	0x40015c24

0800356c <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	@ 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a61      	ldr	r2, [pc, #388]	@ (8003700 <HAL_SAI_MspInit+0x194>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d15b      	bne.n	8003636 <HAL_SAI_MspInit+0xca>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 800357e:	4b61      	ldr	r3, [pc, #388]	@ (8003704 <HAL_SAI_MspInit+0x198>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003586:	4b60      	ldr	r3, [pc, #384]	@ (8003708 <HAL_SAI_MspInit+0x19c>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	4a5f      	ldr	r2, [pc, #380]	@ (8003708 <HAL_SAI_MspInit+0x19c>)
 800358c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003590:	6453      	str	r3, [r2, #68]	@ 0x44
 8003592:	4b5d      	ldr	r3, [pc, #372]	@ (8003708 <HAL_SAI_MspInit+0x19c>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800359e:	4b59      	ldr	r3, [pc, #356]	@ (8003704 <HAL_SAI_MspInit+0x198>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3301      	adds	r3, #1
 80035a4:	4a57      	ldr	r2, [pc, #348]	@ (8003704 <HAL_SAI_MspInit+0x198>)
 80035a6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80035a8:	23f0      	movs	r3, #240	@ 0xf0
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ac:	2302      	movs	r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b4:	2300      	movs	r3, #0
 80035b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035b8:	230a      	movs	r3, #10
 80035ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	4619      	mov	r1, r3
 80035c2:	4852      	ldr	r0, [pc, #328]	@ (800370c <HAL_SAI_MspInit+0x1a0>)
 80035c4:	f003 fe10 	bl	80071e8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80035c8:	4b51      	ldr	r3, [pc, #324]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 80035ca:	4a52      	ldr	r2, [pc, #328]	@ (8003714 <HAL_SAI_MspInit+0x1a8>)
 80035cc:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80035ce:	4b50      	ldr	r3, [pc, #320]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 80035d0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80035d4:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035d6:	4b4e      	ldr	r3, [pc, #312]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 80035d8:	2240      	movs	r2, #64	@ 0x40
 80035da:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80035dc:	4b4c      	ldr	r3, [pc, #304]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 80035de:	2200      	movs	r2, #0
 80035e0:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80035e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 80035e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035e8:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035ea:	4b49      	ldr	r3, [pc, #292]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 80035ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035f0:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035f2:	4b47      	ldr	r3, [pc, #284]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 80035f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035f8:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80035fa:	4b45      	ldr	r3, [pc, #276]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 80035fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003600:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8003602:	4b43      	ldr	r3, [pc, #268]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 8003604:	2200      	movs	r2, #0
 8003606:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003608:	4b41      	ldr	r3, [pc, #260]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 800360a:	2200      	movs	r2, #0
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800360e:	4840      	ldr	r0, [pc, #256]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 8003610:	f002 fe6c 	bl	80062ec <HAL_DMA_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 800361a:	f7ff fef9 	bl	8003410 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a3b      	ldr	r2, [pc, #236]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 8003622:	671a      	str	r2, [r3, #112]	@ 0x70
 8003624:	4a3a      	ldr	r2, [pc, #232]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a38      	ldr	r2, [pc, #224]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 800362e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003630:	4a37      	ldr	r2, [pc, #220]	@ (8003710 <HAL_SAI_MspInit+0x1a4>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6393      	str	r3, [r2, #56]	@ 0x38
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a37      	ldr	r2, [pc, #220]	@ (8003718 <HAL_SAI_MspInit+0x1ac>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d15b      	bne.n	80036f8 <HAL_SAI_MspInit+0x18c>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8003640:	4b30      	ldr	r3, [pc, #192]	@ (8003704 <HAL_SAI_MspInit+0x198>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003648:	4b2f      	ldr	r3, [pc, #188]	@ (8003708 <HAL_SAI_MspInit+0x19c>)
 800364a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364c:	4a2e      	ldr	r2, [pc, #184]	@ (8003708 <HAL_SAI_MspInit+0x19c>)
 800364e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003652:	6453      	str	r3, [r2, #68]	@ 0x44
 8003654:	4b2c      	ldr	r3, [pc, #176]	@ (8003708 <HAL_SAI_MspInit+0x19c>)
 8003656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8003660:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <HAL_SAI_MspInit+0x198>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	4a27      	ldr	r2, [pc, #156]	@ (8003704 <HAL_SAI_MspInit+0x198>)
 8003668:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800366a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800366e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003670:	2302      	movs	r3, #2
 8003672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800367c:	230a      	movs	r3, #10
 800367e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8003680:	f107 0314 	add.w	r3, r7, #20
 8003684:	4619      	mov	r1, r3
 8003686:	4825      	ldr	r0, [pc, #148]	@ (800371c <HAL_SAI_MspInit+0x1b0>)
 8003688:	f003 fdae 	bl	80071e8 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 800368c:	4b24      	ldr	r3, [pc, #144]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 800368e:	4a25      	ldr	r2, [pc, #148]	@ (8003724 <HAL_SAI_MspInit+0x1b8>)
 8003690:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 8003692:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 8003694:	2200      	movs	r2, #0
 8003696:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003698:	4b21      	ldr	r3, [pc, #132]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 800369a:	2200      	movs	r2, #0
 800369c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800369e:	4b20      	ldr	r3, [pc, #128]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80036a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036aa:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036b2:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036ba:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80036bc:	4b18      	ldr	r3, [pc, #96]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036c2:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80036c4:	4b16      	ldr	r3, [pc, #88]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ca:	4b15      	ldr	r3, [pc, #84]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80036d0:	4813      	ldr	r0, [pc, #76]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036d2:	f002 fe0b 	bl	80062ec <HAL_DMA_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 80036dc:	f7ff fe98 	bl	8003410 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80036e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036f0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80036f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003720 <HAL_SAI_MspInit+0x1b4>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 80036f8:	bf00      	nop
 80036fa:	3728      	adds	r7, #40	@ 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40015c04 	.word	0x40015c04
 8003704:	200008e0 	.word	0x200008e0
 8003708:	40023800 	.word	0x40023800
 800370c:	40022000 	.word	0x40022000
 8003710:	20000820 	.word	0x20000820
 8003714:	40026470 	.word	0x40026470
 8003718:	40015c24 	.word	0x40015c24
 800371c:	40021800 	.word	0x40021800
 8003720:	20000880 	.word	0x20000880
 8003724:	400264b8 	.word	0x400264b8

08003728 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <MX_SDMMC1_SD_Init+0x38>)
 800372e:	4a0d      	ldr	r2, [pc, #52]	@ (8003764 <MX_SDMMC1_SD_Init+0x3c>)
 8003730:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003732:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <MX_SDMMC1_SD_Init+0x38>)
 8003734:	2200      	movs	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003738:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <MX_SDMMC1_SD_Init+0x38>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800373e:	4b08      	ldr	r3, [pc, #32]	@ (8003760 <MX_SDMMC1_SD_Init+0x38>)
 8003740:	2200      	movs	r2, #0
 8003742:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003744:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <MX_SDMMC1_SD_Init+0x38>)
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800374a:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <MX_SDMMC1_SD_Init+0x38>)
 800374c:	2200      	movs	r2, #0
 800374e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8003750:	4b03      	ldr	r3, [pc, #12]	@ (8003760 <MX_SDMMC1_SD_Init+0x38>)
 8003752:	2200      	movs	r2, #0
 8003754:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	200008e4 	.word	0x200008e4
 8003764:	40012c00 	.word	0x40012c00

08003768 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	@ 0x28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	f107 0314 	add.w	r3, r7, #20
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a61      	ldr	r2, [pc, #388]	@ (800390c <HAL_SD_MspInit+0x1a4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	f040 80bb 	bne.w	8003902 <HAL_SD_MspInit+0x19a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800378c:	4b60      	ldr	r3, [pc, #384]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	4a5f      	ldr	r2, [pc, #380]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 8003792:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003796:	6453      	str	r3, [r2, #68]	@ 0x44
 8003798:	4b5d      	ldr	r3, [pc, #372]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 800379a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	4a59      	ldr	r2, [pc, #356]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 80037aa:	f043 0304 	orr.w	r3, r3, #4
 80037ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b0:	4b57      	ldr	r3, [pc, #348]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037bc:	4b54      	ldr	r3, [pc, #336]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	4a53      	ldr	r2, [pc, #332]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 80037c2:	f043 0308 	orr.w	r3, r3, #8
 80037c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c8:	4b51      	ldr	r3, [pc, #324]	@ (8003910 <HAL_SD_MspInit+0x1a8>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80037d4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80037d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e2:	2303      	movs	r3, #3
 80037e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80037e6:	230c      	movs	r3, #12
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ea:	f107 0314 	add.w	r3, r7, #20
 80037ee:	4619      	mov	r1, r3
 80037f0:	4848      	ldr	r0, [pc, #288]	@ (8003914 <HAL_SD_MspInit+0x1ac>)
 80037f2:	f003 fcf9 	bl	80071e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80037f6:	2304      	movs	r3, #4
 80037f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003802:	2303      	movs	r3, #3
 8003804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003806:	230c      	movs	r3, #12
 8003808:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800380a:	f107 0314 	add.w	r3, r7, #20
 800380e:	4619      	mov	r1, r3
 8003810:	4841      	ldr	r0, [pc, #260]	@ (8003918 <HAL_SD_MspInit+0x1b0>)
 8003812:	f003 fce9 	bl	80071e8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003816:	4b41      	ldr	r3, [pc, #260]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003818:	4a41      	ldr	r2, [pc, #260]	@ (8003920 <HAL_SD_MspInit+0x1b8>)
 800381a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800381c:	4b3f      	ldr	r3, [pc, #252]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 800381e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003822:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003824:	4b3d      	ldr	r3, [pc, #244]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003826:	2200      	movs	r2, #0
 8003828:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800382a:	4b3c      	ldr	r3, [pc, #240]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 800382c:	2200      	movs	r2, #0
 800382e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003830:	4b3a      	ldr	r3, [pc, #232]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003832:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003836:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003838:	4b38      	ldr	r3, [pc, #224]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 800383a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800383e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003840:	4b36      	ldr	r3, [pc, #216]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003846:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003848:	4b34      	ldr	r3, [pc, #208]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 800384a:	2220      	movs	r2, #32
 800384c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800384e:	4b33      	ldr	r3, [pc, #204]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003850:	2200      	movs	r2, #0
 8003852:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003854:	4b31      	ldr	r3, [pc, #196]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003856:	2204      	movs	r2, #4
 8003858:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800385a:	4b30      	ldr	r3, [pc, #192]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 800385c:	2203      	movs	r2, #3
 800385e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003860:	4b2e      	ldr	r3, [pc, #184]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003862:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003866:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003868:	4b2c      	ldr	r3, [pc, #176]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 800386a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003870:	482a      	ldr	r0, [pc, #168]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003872:	f002 fd3b 	bl	80062ec <HAL_DMA_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 800387c:	f7ff fdc8 	bl	8003410 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a26      	ldr	r2, [pc, #152]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003884:	641a      	str	r2, [r3, #64]	@ 0x40
 8003886:	4a25      	ldr	r2, [pc, #148]	@ (800391c <HAL_SD_MspInit+0x1b4>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800388c:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 800388e:	4a26      	ldr	r2, [pc, #152]	@ (8003928 <HAL_SD_MspInit+0x1c0>)
 8003890:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003892:	4b24      	ldr	r3, [pc, #144]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 8003894:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003898:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800389a:	4b22      	ldr	r3, [pc, #136]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 800389c:	2240      	movs	r2, #64	@ 0x40
 800389e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038a0:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038ac:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80038b4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80038bc:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80038be:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038c0:	2220      	movs	r2, #32
 80038c2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038c4:	4b17      	ldr	r3, [pc, #92]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038ca:	4b16      	ldr	r3, [pc, #88]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038cc:	2204      	movs	r2, #4
 80038ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80038d0:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038d2:	2203      	movs	r2, #3
 80038d4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80038d6:	4b13      	ldr	r3, [pc, #76]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80038dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80038de:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80038e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80038e6:	480f      	ldr	r0, [pc, #60]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038e8:	f002 fd00 	bl	80062ec <HAL_DMA_Init>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80038f2:	f7ff fd8d 	bl	8003410 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038fc:	4a09      	ldr	r2, [pc, #36]	@ (8003924 <HAL_SD_MspInit+0x1bc>)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003902:	bf00      	nop
 8003904:	3728      	adds	r7, #40	@ 0x28
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40023800 	.word	0x40023800
 8003914:	40020800 	.word	0x40020800
 8003918:	40020c00 	.word	0x40020c00
 800391c:	20000968 	.word	0x20000968
 8003920:	40026458 	.word	0x40026458
 8003924:	200009c8 	.word	0x200009c8
 8003928:	400264a0 	.word	0x400264a0

0800392c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	@ 0x30
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a51      	ldr	r2, [pc, #324]	@ (8003a7c <I2Cx_MspInit+0x150>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d14d      	bne.n	80039d8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800393c:	4b50      	ldr	r3, [pc, #320]	@ (8003a80 <I2Cx_MspInit+0x154>)
 800393e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003940:	4a4f      	ldr	r2, [pc, #316]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003946:	6313      	str	r3, [r2, #48]	@ 0x30
 8003948:	4b4d      	ldr	r3, [pc, #308]	@ (8003a80 <I2Cx_MspInit+0x154>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003954:	2380      	movs	r3, #128	@ 0x80
 8003956:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003958:	2312      	movs	r3, #18
 800395a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003960:	2302      	movs	r3, #2
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003964:	2304      	movs	r3, #4
 8003966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	4845      	ldr	r0, [pc, #276]	@ (8003a84 <I2Cx_MspInit+0x158>)
 8003970:	f003 fc3a 	bl	80071e8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800397a:	f107 031c 	add.w	r3, r7, #28
 800397e:	4619      	mov	r1, r3
 8003980:	4840      	ldr	r0, [pc, #256]	@ (8003a84 <I2Cx_MspInit+0x158>)
 8003982:	f003 fc31 	bl	80071e8 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003986:	4b3e      	ldr	r3, [pc, #248]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a80 <I2Cx_MspInit+0x154>)
 800398c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003990:	6413      	str	r3, [r2, #64]	@ 0x40
 8003992:	4b3b      	ldr	r3, [pc, #236]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800399e:	4b38      	ldr	r3, [pc, #224]	@ (8003a80 <I2Cx_MspInit+0x154>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a37      	ldr	r2, [pc, #220]	@ (8003a80 <I2Cx_MspInit+0x154>)
 80039a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039a8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80039aa:	4b35      	ldr	r3, [pc, #212]	@ (8003a80 <I2Cx_MspInit+0x154>)
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	4a34      	ldr	r2, [pc, #208]	@ (8003a80 <I2Cx_MspInit+0x154>)
 80039b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80039b4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80039b6:	2200      	movs	r2, #0
 80039b8:	210f      	movs	r1, #15
 80039ba:	2048      	movs	r0, #72	@ 0x48
 80039bc:	f002 fc6c 	bl	8006298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80039c0:	2048      	movs	r0, #72	@ 0x48
 80039c2:	f002 fc85 	bl	80062d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	210f      	movs	r1, #15
 80039ca:	2049      	movs	r0, #73	@ 0x49
 80039cc:	f002 fc64 	bl	8006298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80039d0:	2049      	movs	r0, #73	@ 0x49
 80039d2:	f002 fc7d 	bl	80062d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80039d6:	e04d      	b.n	8003a74 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80039d8:	4b29      	ldr	r3, [pc, #164]	@ (8003a80 <I2Cx_MspInit+0x154>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	4a28      	ldr	r2, [pc, #160]	@ (8003a80 <I2Cx_MspInit+0x154>)
 80039de:	f043 0302 	orr.w	r3, r3, #2
 80039e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e4:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <I2Cx_MspInit+0x154>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80039f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039f4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80039f6:	2312      	movs	r3, #18
 80039f8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80039fe:	2302      	movs	r3, #2
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003a02:	2304      	movs	r3, #4
 8003a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a06:	f107 031c 	add.w	r3, r7, #28
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	481e      	ldr	r0, [pc, #120]	@ (8003a88 <I2Cx_MspInit+0x15c>)
 8003a0e:	f003 fbeb 	bl	80071e8 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003a12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a18:	f107 031c 	add.w	r3, r7, #28
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	481a      	ldr	r0, [pc, #104]	@ (8003a88 <I2Cx_MspInit+0x15c>)
 8003a20:	f003 fbe2 	bl	80071e8 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003a24:	4b16      	ldr	r3, [pc, #88]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003a2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a30:	4b13      	ldr	r3, [pc, #76]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003a3c:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	4a0f      	ldr	r2, [pc, #60]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003a42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a46:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003a48:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <I2Cx_MspInit+0x154>)
 8003a4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a52:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	210f      	movs	r1, #15
 8003a58:	201f      	movs	r0, #31
 8003a5a:	f002 fc1d 	bl	8006298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8003a5e:	201f      	movs	r0, #31
 8003a60:	f002 fc36 	bl	80062d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003a64:	2200      	movs	r2, #0
 8003a66:	210f      	movs	r1, #15
 8003a68:	2020      	movs	r0, #32
 8003a6a:	f002 fc15 	bl	8006298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003a6e:	2020      	movs	r0, #32
 8003a70:	f002 fc2e 	bl	80062d0 <HAL_NVIC_EnableIRQ>
}
 8003a74:	bf00      	nop
 8003a76:	3730      	adds	r7, #48	@ 0x30
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000a28 	.word	0x20000a28
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40021c00 	.word	0x40021c00
 8003a88:	40020400 	.word	0x40020400

08003a8c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f004 f887 	bl	8007ba8 <HAL_I2C_GetState>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d125      	bne.n	8003aec <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <I2Cx_Init+0x68>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	@ (8003af8 <I2Cx_Init+0x6c>)
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e002      	b.n	8003ab6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a12      	ldr	r2, [pc, #72]	@ (8003afc <I2Cx_Init+0x70>)
 8003ab4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a11      	ldr	r2, [pc, #68]	@ (8003b00 <I2Cx_Init+0x74>)
 8003aba:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff23 	bl	800392c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f003 fd5c 	bl	80075a4 <HAL_I2C_Init>
  }
}
 8003aec:	bf00      	nop
 8003aee:	3708      	adds	r7, #8
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000a28 	.word	0x20000a28
 8003af8:	40005c00 	.word	0x40005c00
 8003afc:	40005400 	.word	0x40005400
 8003b00:	40912732 	.word	0x40912732

08003b04 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08a      	sub	sp, #40	@ 0x28
 8003b08:	af04      	add	r7, sp, #16
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	4608      	mov	r0, r1
 8003b0e:	4611      	mov	r1, r2
 8003b10:	461a      	mov	r2, r3
 8003b12:	4603      	mov	r3, r0
 8003b14:	72fb      	strb	r3, [r7, #11]
 8003b16:	460b      	mov	r3, r1
 8003b18:	813b      	strh	r3, [r7, #8]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b22:	7afb      	ldrb	r3, [r7, #11]
 8003b24:	b299      	uxth	r1, r3
 8003b26:	88f8      	ldrh	r0, [r7, #6]
 8003b28:	893a      	ldrh	r2, [r7, #8]
 8003b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b2e:	9302      	str	r3, [sp, #8]
 8003b30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	4603      	mov	r3, r0
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f003 ff1a 	bl	8007974 <HAL_I2C_Mem_Read>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f832 	bl	8003bb8 <I2Cx_Error>
  }
  return status;    
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08a      	sub	sp, #40	@ 0x28
 8003b62:	af04      	add	r7, sp, #16
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	4608      	mov	r0, r1
 8003b68:	4611      	mov	r1, r2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	72fb      	strb	r3, [r7, #11]
 8003b70:	460b      	mov	r3, r1
 8003b72:	813b      	strh	r3, [r7, #8]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	88f8      	ldrh	r0, [r7, #6]
 8003b82:	893a      	ldrh	r2, [r7, #8]
 8003b84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4603      	mov	r3, r0
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f003 fdd9 	bl	800774c <HAL_I2C_Mem_Write>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003ba4:	7afb      	ldrb	r3, [r7, #11]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f805 	bl	8003bb8 <I2Cx_Error>
  }
  return status;
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f003 fd7d 	bl	80076c4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7ff ff5e 	bl	8003a8c <I2Cx_Init>
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003bdc:	4802      	ldr	r0, [pc, #8]	@ (8003be8 <TS_IO_Init+0x10>)
 8003bde:	f7ff ff55 	bl	8003a8c <I2Cx_Init>
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000a28 	.word	0x20000a28

08003bec <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af02      	add	r7, sp, #8
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71fb      	strb	r3, [r7, #7]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	71bb      	strb	r3, [r7, #6]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003bfe:	79bb      	ldrb	r3, [r7, #6]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	79f9      	ldrb	r1, [r7, #7]
 8003c04:	2301      	movs	r3, #1
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	1d7b      	adds	r3, r7, #5
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4803      	ldr	r0, [pc, #12]	@ (8003c1c <TS_IO_Write+0x30>)
 8003c10:	f7ff ffa5 	bl	8003b5e <I2Cx_WriteMultiple>
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20000a28 	.word	0x20000a28

08003c20 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	4603      	mov	r3, r0
 8003c28:	460a      	mov	r2, r1
 8003c2a:	71fb      	strb	r3, [r7, #7]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003c34:	79bb      	ldrb	r3, [r7, #6]
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	79f9      	ldrb	r1, [r7, #7]
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	f107 030f 	add.w	r3, r7, #15
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2301      	movs	r3, #1
 8003c46:	4804      	ldr	r0, [pc, #16]	@ (8003c58 <TS_IO_Read+0x38>)
 8003c48:	f7ff ff5c 	bl	8003b04 <I2Cx_ReadMultiple>

  return read_value;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000a28 	.word	0x20000a28

08003c5c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f001 fe41 	bl	80058ec <HAL_Delay>
}
 8003c6a:	bf00      	nop
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003c78:	4b31      	ldr	r3, [pc, #196]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003c7a:	2228      	movs	r2, #40	@ 0x28
 8003c7c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003c7e:	4b30      	ldr	r3, [pc, #192]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003c80:	2209      	movs	r2, #9
 8003c82:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003c84:	4b2e      	ldr	r3, [pc, #184]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003c86:	2235      	movs	r2, #53	@ 0x35
 8003c88:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003c8c:	220b      	movs	r2, #11
 8003c8e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003c90:	4b2b      	ldr	r3, [pc, #172]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003c92:	f240 121b 	movw	r2, #283	@ 0x11b
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003c98:	4b29      	ldr	r3, [pc, #164]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003c9a:	f240 2215 	movw	r2, #533	@ 0x215
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003ca0:	4b27      	ldr	r3, [pc, #156]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003ca2:	f240 121d 	movw	r2, #285	@ 0x11d
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003ca8:	4b25      	ldr	r3, [pc, #148]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003caa:	f240 2235 	movw	r2, #565	@ 0x235
 8003cae:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4823      	ldr	r0, [pc, #140]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cb4:	f000 fd30 	bl	8004718 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003cb8:	4b21      	ldr	r3, [pc, #132]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cba:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003cbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cc2:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8003cc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003cd8:	4b19      	ldr	r3, [pc, #100]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003ce0:	4b17      	ldr	r3, [pc, #92]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003ce6:	4b16      	ldr	r3, [pc, #88]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003cec:	4b14      	ldr	r3, [pc, #80]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003cf2:	4b13      	ldr	r3, [pc, #76]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003cfa:	4a12      	ldr	r2, [pc, #72]	@ (8003d44 <BSP_LCD_Init+0xd0>)
 8003cfc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003cfe:	4810      	ldr	r0, [pc, #64]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003d00:	f004 fbca 	bl	8008498 <HAL_LTDC_GetState>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d103      	bne.n	8003d12 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	480c      	ldr	r0, [pc, #48]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003d0e:	f000 fc29 	bl	8004564 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8003d12:	480b      	ldr	r0, [pc, #44]	@ (8003d40 <BSP_LCD_Init+0xcc>)
 8003d14:	f004 f9f0 	bl	80080f8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d1e:	480a      	ldr	r0, [pc, #40]	@ (8003d48 <BSP_LCD_Init+0xd4>)
 8003d20:	f003 fc26 	bl	8007570 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003d24:	2201      	movs	r2, #1
 8003d26:	2108      	movs	r1, #8
 8003d28:	4808      	ldr	r0, [pc, #32]	@ (8003d4c <BSP_LCD_Init+0xd8>)
 8003d2a:	f003 fc21 	bl	8007570 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003d2e:	f000 fe57 	bl	80049e0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003d32:	4807      	ldr	r0, [pc, #28]	@ (8003d50 <BSP_LCD_Init+0xdc>)
 8003d34:	f000 f8d8 	bl	8003ee8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000a7c 	.word	0x20000a7c
 8003d44:	40016800 	.word	0x40016800
 8003d48:	40022000 	.word	0x40022000
 8003d4c:	40022800 	.word	0x40022800
 8003d50:	20000034 	.word	0x20000034

08003d54 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003d58:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <BSP_LCD_GetXSize+0x20>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a06      	ldr	r2, [pc, #24]	@ (8003d78 <BSP_LCD_GetXSize+0x24>)
 8003d5e:	2134      	movs	r1, #52	@ 0x34
 8003d60:	fb01 f303 	mul.w	r3, r1, r3
 8003d64:	4413      	add	r3, r2
 8003d66:	3360      	adds	r3, #96	@ 0x60
 8003d68:	681b      	ldr	r3, [r3, #0]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	20000b64 	.word	0x20000b64
 8003d78:	20000a7c 	.word	0x20000a7c

08003d7c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003d80:	4b06      	ldr	r3, [pc, #24]	@ (8003d9c <BSP_LCD_GetYSize+0x20>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a06      	ldr	r2, [pc, #24]	@ (8003da0 <BSP_LCD_GetYSize+0x24>)
 8003d86:	2134      	movs	r1, #52	@ 0x34
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3364      	adds	r3, #100	@ 0x64
 8003d90:	681b      	ldr	r3, [r3, #0]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	20000b64 	.word	0x20000b64
 8003da0:	20000a7c 	.word	0x20000a7c

08003da4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b090      	sub	sp, #64	@ 0x40
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	6039      	str	r1, [r7, #0]
 8003dae:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003db4:	f7ff ffce 	bl	8003d54 <BSP_LCD_GetXSize>
 8003db8:	4603      	mov	r3, r0
 8003dba:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003dc0:	f7ff ffdc 	bl	8003d7c <BSP_LCD_GetYSize>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003dd0:	23ff      	movs	r3, #255	@ 0xff
 8003dd2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003dea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003df0:	2307      	movs	r3, #7
 8003df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003df4:	f7ff ffae 	bl	8003d54 <BSP_LCD_GetXSize>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003dfc:	f7ff ffbe 	bl	8003d7c <BSP_LCD_GetYSize>
 8003e00:	4603      	mov	r3, r0
 8003e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003e04:	88fa      	ldrh	r2, [r7, #6]
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4812      	ldr	r0, [pc, #72]	@ (8003e58 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003e0e:	f004 fb05 	bl	800841c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	4911      	ldr	r1, [pc, #68]	@ (8003e5c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e16:	4613      	mov	r3, r2
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3304      	adds	r3, #4
 8003e22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003e26:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003e28:	88fa      	ldrh	r2, [r7, #6]
 8003e2a:	490c      	ldr	r1, [pc, #48]	@ (8003e5c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3308      	adds	r3, #8
 8003e38:	4a09      	ldr	r2, [pc, #36]	@ (8003e60 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003e3a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003e3c:	88fa      	ldrh	r2, [r7, #6]
 8003e3e:	4907      	ldr	r1, [pc, #28]	@ (8003e5c <BSP_LCD_LayerDefaultInit+0xb8>)
 8003e40:	4613      	mov	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003e4e:	601a      	str	r2, [r3, #0]
}
 8003e50:	bf00      	nop
 8003e52:	3740      	adds	r7, #64	@ 0x40
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20000a7c 	.word	0x20000a7c
 8003e5c:	20000b68 	.word	0x20000b68
 8003e60:	20000034 	.word	0x20000034

08003e64 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003e6c:	4a04      	ldr	r2, [pc, #16]	@ (8003e80 <BSP_LCD_SelectLayer+0x1c>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6013      	str	r3, [r2, #0]
} 
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000b64 	.word	0x20000b64

08003e84 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003e8c:	4b07      	ldr	r3, [pc, #28]	@ (8003eac <BSP_LCD_SetTextColor+0x28>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4907      	ldr	r1, [pc, #28]	@ (8003eb0 <BSP_LCD_SetTextColor+0x2c>)
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20000b64 	.word	0x20000b64
 8003eb0:	20000b68 	.word	0x20000b68

08003eb4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003ebc:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <BSP_LCD_SetBackColor+0x2c>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4908      	ldr	r1, [pc, #32]	@ (8003ee4 <BSP_LCD_SetBackColor+0x30>)
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	3304      	adds	r3, #4
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	601a      	str	r2, [r3, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000b64 	.word	0x20000b64
 8003ee4:	20000b68 	.word	0x20000b68

08003ee8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003ef0:	4b08      	ldr	r3, [pc, #32]	@ (8003f14 <BSP_LCD_SetFont+0x2c>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4908      	ldr	r1, [pc, #32]	@ (8003f18 <BSP_LCD_SetFont+0x30>)
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	3308      	adds	r3, #8
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000b64 	.word	0x20000b64
 8003f18:	20000b68 	.word	0x20000b68

08003f1c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003f24:	4b0f      	ldr	r3, [pc, #60]	@ (8003f64 <BSP_LCD_Clear+0x48>)
 8003f26:	681c      	ldr	r4, [r3, #0]
 8003f28:	4b0e      	ldr	r3, [pc, #56]	@ (8003f64 <BSP_LCD_Clear+0x48>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003f68 <BSP_LCD_Clear+0x4c>)
 8003f2e:	2134      	movs	r1, #52	@ 0x34
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	335c      	adds	r3, #92	@ 0x5c
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461e      	mov	r6, r3
 8003f3c:	f7ff ff0a 	bl	8003d54 <BSP_LCD_GetXSize>
 8003f40:	4605      	mov	r5, r0
 8003f42:	f7ff ff1b 	bl	8003d7c <BSP_LCD_GetYSize>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	462a      	mov	r2, r5
 8003f54:	4631      	mov	r1, r6
 8003f56:	4620      	mov	r0, r4
 8003f58:	f000 fcb2 	bl	80048c0 <LL_FillBuffer>
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f64:	20000b64 	.word	0x20000b64
 8003f68:	20000a7c 	.word	0x20000a7c

08003f6c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
 8003f76:	460b      	mov	r3, r1
 8003f78:	80bb      	strh	r3, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fec <BSP_LCD_DisplayChar+0x80>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	491b      	ldr	r1, [pc, #108]	@ (8003ff0 <BSP_LCD_DisplayChar+0x84>)
 8003f84:	4613      	mov	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3308      	adds	r3, #8
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6819      	ldr	r1, [r3, #0]
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003f9a:	4b14      	ldr	r3, [pc, #80]	@ (8003fec <BSP_LCD_DisplayChar+0x80>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4c14      	ldr	r4, [pc, #80]	@ (8003ff0 <BSP_LCD_DisplayChar+0x84>)
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4423      	add	r3, r4
 8003faa:	3308      	adds	r3, #8
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003fb0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <BSP_LCD_DisplayChar+0x80>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8003ff0 <BSP_LCD_DisplayChar+0x84>)
 8003fba:	4613      	mov	r3, r2
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4423      	add	r3, r4
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	889b      	ldrh	r3, [r3, #4]
 8003fca:	3307      	adds	r3, #7
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	da00      	bge.n	8003fd2 <BSP_LCD_DisplayChar+0x66>
 8003fd0:	3307      	adds	r3, #7
 8003fd2:	10db      	asrs	r3, r3, #3
 8003fd4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003fd8:	18ca      	adds	r2, r1, r3
 8003fda:	88b9      	ldrh	r1, [r7, #4]
 8003fdc:	88fb      	ldrh	r3, [r7, #6]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fbb6 	bl	8004750 <DrawChar>
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	20000b64 	.word	0x20000b64
 8003ff0:	20000b68 	.word	0x20000b68

08003ff4 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003ff4:	b5b0      	push	{r4, r5, r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60ba      	str	r2, [r7, #8]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	81fb      	strh	r3, [r7, #14]
 8004002:	460b      	mov	r3, r1
 8004004:	81bb      	strh	r3, [r7, #12]
 8004006:	4613      	mov	r3, r2
 8004008:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800400a:	2301      	movs	r3, #1
 800400c:	83fb      	strh	r3, [r7, #30]
 800400e:	2300      	movs	r3, #0
 8004010:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004012:	2300      	movs	r3, #0
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800401e:	e002      	b.n	8004026 <BSP_LCD_DisplayStringAt+0x32>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	3301      	adds	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	617a      	str	r2, [r7, #20]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f6      	bne.n	8004020 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8004032:	f7ff fe8f 	bl	8003d54 <BSP_LCD_GetXSize>
 8004036:	4601      	mov	r1, r0
 8004038:	4b50      	ldr	r3, [pc, #320]	@ (800417c <BSP_LCD_DisplayStringAt+0x188>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4850      	ldr	r0, [pc, #320]	@ (8004180 <BSP_LCD_DisplayStringAt+0x18c>)
 800403e:	4613      	mov	r3, r2
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4403      	add	r3, r0
 8004048:	3308      	adds	r3, #8
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	889b      	ldrh	r3, [r3, #4]
 800404e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004052:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d01c      	beq.n	8004094 <BSP_LCD_DisplayStringAt+0xa0>
 800405a:	2b03      	cmp	r3, #3
 800405c:	dc33      	bgt.n	80040c6 <BSP_LCD_DisplayStringAt+0xd2>
 800405e:	2b01      	cmp	r3, #1
 8004060:	d002      	beq.n	8004068 <BSP_LCD_DisplayStringAt+0x74>
 8004062:	2b02      	cmp	r3, #2
 8004064:	d019      	beq.n	800409a <BSP_LCD_DisplayStringAt+0xa6>
 8004066:	e02e      	b.n	80040c6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad1      	subs	r1, r2, r3
 800406e:	4b43      	ldr	r3, [pc, #268]	@ (800417c <BSP_LCD_DisplayStringAt+0x188>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4843      	ldr	r0, [pc, #268]	@ (8004180 <BSP_LCD_DisplayStringAt+0x18c>)
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4403      	add	r3, r0
 800407e:	3308      	adds	r3, #8
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	889b      	ldrh	r3, [r3, #4]
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	4413      	add	r3, r2
 8004090:	83fb      	strh	r3, [r7, #30]
      break;
 8004092:	e01b      	b.n	80040cc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	83fb      	strh	r3, [r7, #30]
      break;
 8004098:	e018      	b.n	80040cc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	b299      	uxth	r1, r3
 80040a2:	4b36      	ldr	r3, [pc, #216]	@ (800417c <BSP_LCD_DisplayStringAt+0x188>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4836      	ldr	r0, [pc, #216]	@ (8004180 <BSP_LCD_DisplayStringAt+0x18c>)
 80040a8:	4613      	mov	r3, r2
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4403      	add	r3, r0
 80040b2:	3308      	adds	r3, #8
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	889b      	ldrh	r3, [r3, #4]
 80040b8:	fb11 f303 	smulbb	r3, r1, r3
 80040bc:	b29a      	uxth	r2, r3
 80040be:	89fb      	ldrh	r3, [r7, #14]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	83fb      	strh	r3, [r7, #30]
      break;
 80040c4:	e002      	b.n	80040cc <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	83fb      	strh	r3, [r7, #30]
      break;
 80040ca:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80040cc:	8bfb      	ldrh	r3, [r7, #30]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <BSP_LCD_DisplayStringAt+0xe6>
 80040d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da1d      	bge.n	8004116 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80040da:	2301      	movs	r3, #1
 80040dc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80040de:	e01a      	b.n	8004116 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781a      	ldrb	r2, [r3, #0]
 80040e4:	89b9      	ldrh	r1, [r7, #12]
 80040e6:	8bfb      	ldrh	r3, [r7, #30]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff ff3f 	bl	8003f6c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80040ee:	4b23      	ldr	r3, [pc, #140]	@ (800417c <BSP_LCD_DisplayStringAt+0x188>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4923      	ldr	r1, [pc, #140]	@ (8004180 <BSP_LCD_DisplayStringAt+0x18c>)
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	3308      	adds	r3, #8
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	889a      	ldrh	r2, [r3, #4]
 8004104:	8bfb      	ldrh	r3, [r7, #30]
 8004106:	4413      	add	r3, r2
 8004108:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3301      	adds	r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
    i++;
 8004110:	8bbb      	ldrh	r3, [r7, #28]
 8004112:	3301      	adds	r3, #1
 8004114:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2dc      	uxtb	r4, r3
 8004124:	f7ff fe16 	bl	8003d54 <BSP_LCD_GetXSize>
 8004128:	8bb9      	ldrh	r1, [r7, #28]
 800412a:	4b14      	ldr	r3, [pc, #80]	@ (800417c <BSP_LCD_DisplayStringAt+0x188>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4d14      	ldr	r5, [pc, #80]	@ (8004180 <BSP_LCD_DisplayStringAt+0x18c>)
 8004130:	4613      	mov	r3, r2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	442b      	add	r3, r5
 800413a:	3308      	adds	r3, #8
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	889b      	ldrh	r3, [r3, #4]
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	1ac3      	subs	r3, r0, r3
 8004146:	b299      	uxth	r1, r3
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <BSP_LCD_DisplayStringAt+0x188>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	480c      	ldr	r0, [pc, #48]	@ (8004180 <BSP_LCD_DisplayStringAt+0x18c>)
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4403      	add	r3, r0
 8004158:	3308      	adds	r3, #8
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	889b      	ldrh	r3, [r3, #4]
 800415e:	4299      	cmp	r1, r3
 8004160:	bf2c      	ite	cs
 8004162:	2301      	movcs	r3, #1
 8004164:	2300      	movcc	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	4023      	ands	r3, r4
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1b7      	bne.n	80040e0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bdb0      	pop	{r4, r5, r7, pc}
 800417a:	bf00      	nop
 800417c:	20000b64 	.word	0x20000b64
 8004180:	20000b68 	.word	0x20000b68

08004184 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004184:	b5b0      	push	{r4, r5, r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	4603      	mov	r3, r0
 800418c:	80fb      	strh	r3, [r7, #6]
 800418e:	460b      	mov	r3, r1
 8004190:	80bb      	strh	r3, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800419a:	4b26      	ldr	r3, [pc, #152]	@ (8004234 <BSP_LCD_DrawHLine+0xb0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a26      	ldr	r2, [pc, #152]	@ (8004238 <BSP_LCD_DrawHLine+0xb4>)
 80041a0:	2134      	movs	r1, #52	@ 0x34
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3348      	adds	r3, #72	@ 0x48
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d114      	bne.n	80041da <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80041b0:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <BSP_LCD_DrawHLine+0xb0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a20      	ldr	r2, [pc, #128]	@ (8004238 <BSP_LCD_DrawHLine+0xb4>)
 80041b6:	2134      	movs	r1, #52	@ 0x34
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	335c      	adds	r3, #92	@ 0x5c
 80041c0:	681c      	ldr	r4, [r3, #0]
 80041c2:	f7ff fdc7 	bl	8003d54 <BSP_LCD_GetXSize>
 80041c6:	4602      	mov	r2, r0
 80041c8:	88bb      	ldrh	r3, [r7, #4]
 80041ca:	fb03 f202 	mul.w	r2, r3, r2
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	4413      	add	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4423      	add	r3, r4
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e013      	b.n	8004202 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80041da:	4b16      	ldr	r3, [pc, #88]	@ (8004234 <BSP_LCD_DrawHLine+0xb0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a16      	ldr	r2, [pc, #88]	@ (8004238 <BSP_LCD_DrawHLine+0xb4>)
 80041e0:	2134      	movs	r1, #52	@ 0x34
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	335c      	adds	r3, #92	@ 0x5c
 80041ea:	681c      	ldr	r4, [r3, #0]
 80041ec:	f7ff fdb2 	bl	8003d54 <BSP_LCD_GetXSize>
 80041f0:	4602      	mov	r2, r0
 80041f2:	88bb      	ldrh	r3, [r7, #4]
 80041f4:	fb03 f202 	mul.w	r2, r3, r2
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4423      	add	r3, r4
 8004200:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <BSP_LCD_DrawHLine+0xb0>)
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	887c      	ldrh	r4, [r7, #2]
 800420a:	4b0a      	ldr	r3, [pc, #40]	@ (8004234 <BSP_LCD_DrawHLine+0xb0>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4d0b      	ldr	r5, [pc, #44]	@ (800423c <BSP_LCD_DrawHLine+0xb8>)
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	442b      	add	r3, r5
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	2300      	movs	r3, #0
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	2301      	movs	r3, #1
 8004224:	4622      	mov	r2, r4
 8004226:	f000 fb4b 	bl	80048c0 <LL_FillBuffer>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
 8004232:	bf00      	nop
 8004234:	20000b64 	.word	0x20000b64
 8004238:	20000a7c 	.word	0x20000a7c
 800423c:	20000b68 	.word	0x20000b68

08004240 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	603a      	str	r2, [r7, #0]
 800424a:	80fb      	strh	r3, [r7, #6]
 800424c:	460b      	mov	r3, r1
 800424e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004250:	4b1d      	ldr	r3, [pc, #116]	@ (80042c8 <BSP_LCD_DrawPixel+0x88>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <BSP_LCD_DrawPixel+0x8c>)
 8004256:	2134      	movs	r1, #52	@ 0x34
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	4413      	add	r3, r2
 800425e:	3348      	adds	r3, #72	@ 0x48
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d116      	bne.n	8004294 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8004266:	4b18      	ldr	r3, [pc, #96]	@ (80042c8 <BSP_LCD_DrawPixel+0x88>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a18      	ldr	r2, [pc, #96]	@ (80042cc <BSP_LCD_DrawPixel+0x8c>)
 800426c:	2134      	movs	r1, #52	@ 0x34
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	335c      	adds	r3, #92	@ 0x5c
 8004276:	681c      	ldr	r4, [r3, #0]
 8004278:	88bd      	ldrh	r5, [r7, #4]
 800427a:	f7ff fd6b 	bl	8003d54 <BSP_LCD_GetXSize>
 800427e:	4603      	mov	r3, r0
 8004280:	fb03 f205 	mul.w	r2, r3, r5
 8004284:	88fb      	ldrh	r3, [r7, #6]
 8004286:	4413      	add	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4423      	add	r3, r4
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	b292      	uxth	r2, r2
 8004290:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004292:	e015      	b.n	80042c0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <BSP_LCD_DrawPixel+0x88>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a0c      	ldr	r2, [pc, #48]	@ (80042cc <BSP_LCD_DrawPixel+0x8c>)
 800429a:	2134      	movs	r1, #52	@ 0x34
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	335c      	adds	r3, #92	@ 0x5c
 80042a4:	681c      	ldr	r4, [r3, #0]
 80042a6:	88bd      	ldrh	r5, [r7, #4]
 80042a8:	f7ff fd54 	bl	8003d54 <BSP_LCD_GetXSize>
 80042ac:	4603      	mov	r3, r0
 80042ae:	fb03 f205 	mul.w	r2, r3, r5
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4423      	add	r3, r4
 80042ba:	461a      	mov	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bdb0      	pop	{r4, r5, r7, pc}
 80042c8:	20000b64 	.word	0x20000b64
 80042cc:	20000a7c 	.word	0x20000a7c

080042d0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80042d0:	b590      	push	{r4, r7, lr}
 80042d2:	b08b      	sub	sp, #44	@ 0x2c
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	627b      	str	r3, [r7, #36]	@ 0x24
 80042e0:	2300      	movs	r3, #0
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	330a      	adds	r3, #10
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	330b      	adds	r3, #11
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	330c      	adds	r3, #12
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	041b      	lsls	r3, r3, #16
 800430a:	441a      	add	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	330d      	adds	r3, #13
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	4413      	add	r3, r2
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3312      	adds	r3, #18
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3313      	adds	r3, #19
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	3314      	adds	r3, #20
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	041b      	lsls	r3, r3, #16
 8004332:	441a      	add	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3315      	adds	r3, #21
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	061b      	lsls	r3, r3, #24
 800433c:	4413      	add	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3316      	adds	r3, #22
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3317      	adds	r3, #23
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3318      	adds	r3, #24
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3319      	adds	r3, #25
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	4413      	add	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	331c      	adds	r3, #28
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	331d      	adds	r3, #29
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	4413      	add	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800437c:	4b2b      	ldr	r3, [pc, #172]	@ (800442c <BSP_LCD_DrawBitmap+0x15c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a2b      	ldr	r2, [pc, #172]	@ (8004430 <BSP_LCD_DrawBitmap+0x160>)
 8004382:	2134      	movs	r1, #52	@ 0x34
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	335c      	adds	r3, #92	@ 0x5c
 800438c:	681c      	ldr	r4, [r3, #0]
 800438e:	f7ff fce1 	bl	8003d54 <BSP_LCD_GetXSize>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	fb03 f202 	mul.w	r2, r3, r2
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4423      	add	r3, r4
 80043a2:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	3b20      	subs	r3, #32
 80043a8:	2b07      	cmp	r3, #7
 80043aa:	d802      	bhi.n	80043b2 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	e008      	b.n	80043c4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	3b10      	subs	r3, #16
 80043b6:	2b07      	cmp	r3, #7
 80043b8:	d802      	bhi.n	80043c0 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80043ba:	2302      	movs	r3, #2
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e001      	b.n	80043c4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80043c0:	2301      	movs	r3, #1
 80043c2:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	fb02 f303 	mul.w	r3, r2, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	08d2      	lsrs	r2, r2, #3
 80043d2:	fb03 f202 	mul.w	r2, r3, r2
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	4413      	add	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e4:	e018      	b.n	8004418 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80043e6:	6a39      	ldr	r1, [r7, #32]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fab3 	bl	8004958 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80043f2:	f7ff fcaf 	bl	8003d54 <BSP_LCD_GetXSize>
 80043f6:	4603      	mov	r3, r0
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	6a3a      	ldr	r2, [r7, #32]
 80043fc:	4413      	add	r3, r2
 80043fe:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	08db      	lsrs	r3, r3, #3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	425b      	negs	r3, r3
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	4413      	add	r3, r2
 8004410:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	3301      	adds	r3, #1
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24
 8004418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	429a      	cmp	r2, r3
 800441e:	d3e2      	bcc.n	80043e6 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	372c      	adds	r7, #44	@ 0x2c
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}
 800442a:	bf00      	nop
 800442c:	20000b64 	.word	0x20000b64
 8004430:	20000a7c 	.word	0x20000a7c

08004434 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004438:	b086      	sub	sp, #24
 800443a:	af02      	add	r7, sp, #8
 800443c:	4604      	mov	r4, r0
 800443e:	4608      	mov	r0, r1
 8004440:	4611      	mov	r1, r2
 8004442:	461a      	mov	r2, r3
 8004444:	4623      	mov	r3, r4
 8004446:	80fb      	strh	r3, [r7, #6]
 8004448:	4603      	mov	r3, r0
 800444a:	80bb      	strh	r3, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	807b      	strh	r3, [r7, #2]
 8004450:	4613      	mov	r3, r2
 8004452:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004458:	4b30      	ldr	r3, [pc, #192]	@ (800451c <BSP_LCD_FillRect+0xe8>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	4930      	ldr	r1, [pc, #192]	@ (8004520 <BSP_LCD_FillRect+0xec>)
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fd0a 	bl	8003e84 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004470:	4b2a      	ldr	r3, [pc, #168]	@ (800451c <BSP_LCD_FillRect+0xe8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <BSP_LCD_FillRect+0xf0>)
 8004476:	2134      	movs	r1, #52	@ 0x34
 8004478:	fb01 f303 	mul.w	r3, r1, r3
 800447c:	4413      	add	r3, r2
 800447e:	3348      	adds	r3, #72	@ 0x48
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d114      	bne.n	80044b0 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004486:	4b25      	ldr	r3, [pc, #148]	@ (800451c <BSP_LCD_FillRect+0xe8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a26      	ldr	r2, [pc, #152]	@ (8004524 <BSP_LCD_FillRect+0xf0>)
 800448c:	2134      	movs	r1, #52	@ 0x34
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	335c      	adds	r3, #92	@ 0x5c
 8004496:	681c      	ldr	r4, [r3, #0]
 8004498:	f7ff fc5c 	bl	8003d54 <BSP_LCD_GetXSize>
 800449c:	4602      	mov	r2, r0
 800449e:	88bb      	ldrh	r3, [r7, #4]
 80044a0:	fb03 f202 	mul.w	r2, r3, r2
 80044a4:	88fb      	ldrh	r3, [r7, #6]
 80044a6:	4413      	add	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4423      	add	r3, r4
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	e013      	b.n	80044d8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80044b0:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <BSP_LCD_FillRect+0xe8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004524 <BSP_LCD_FillRect+0xf0>)
 80044b6:	2134      	movs	r1, #52	@ 0x34
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	4413      	add	r3, r2
 80044be:	335c      	adds	r3, #92	@ 0x5c
 80044c0:	681c      	ldr	r4, [r3, #0]
 80044c2:	f7ff fc47 	bl	8003d54 <BSP_LCD_GetXSize>
 80044c6:	4602      	mov	r2, r0
 80044c8:	88bb      	ldrh	r3, [r7, #4]
 80044ca:	fb03 f202 	mul.w	r2, r3, r2
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	4413      	add	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4423      	add	r3, r4
 80044d6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80044d8:	4b10      	ldr	r3, [pc, #64]	@ (800451c <BSP_LCD_FillRect+0xe8>)
 80044da:	681c      	ldr	r4, [r3, #0]
 80044dc:	68fd      	ldr	r5, [r7, #12]
 80044de:	887e      	ldrh	r6, [r7, #2]
 80044e0:	f8b7 8000 	ldrh.w	r8, [r7]
 80044e4:	f7ff fc36 	bl	8003d54 <BSP_LCD_GetXSize>
 80044e8:	4602      	mov	r2, r0
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	1ad1      	subs	r1, r2, r3
 80044ee:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <BSP_LCD_FillRect+0xe8>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	480b      	ldr	r0, [pc, #44]	@ (8004520 <BSP_LCD_FillRect+0xec>)
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4403      	add	r3, r0
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	9100      	str	r1, [sp, #0]
 8004504:	4643      	mov	r3, r8
 8004506:	4632      	mov	r2, r6
 8004508:	4629      	mov	r1, r5
 800450a:	4620      	mov	r0, r4
 800450c:	f000 f9d8 	bl	80048c0 <LL_FillBuffer>
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800451a:	bf00      	nop
 800451c:	20000b64 	.word	0x20000b64
 8004520:	20000b68 	.word	0x20000b68
 8004524:	20000a7c 	.word	0x20000a7c

08004528 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800452c:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <BSP_LCD_DisplayOn+0x30>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <BSP_LCD_DisplayOn+0x30>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0201 	orr.w	r2, r2, #1
 800453a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800453c:	2201      	movs	r2, #1
 800453e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004542:	4806      	ldr	r0, [pc, #24]	@ (800455c <BSP_LCD_DisplayOn+0x34>)
 8004544:	f003 f814 	bl	8007570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004548:	2201      	movs	r2, #1
 800454a:	2108      	movs	r1, #8
 800454c:	4804      	ldr	r0, [pc, #16]	@ (8004560 <BSP_LCD_DisplayOn+0x38>)
 800454e:	f003 f80f 	bl	8007570 <HAL_GPIO_WritePin>
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000a7c 	.word	0x20000a7c
 800455c:	40022000 	.word	0x40022000
 8004560:	40022800 	.word	0x40022800

08004564 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b090      	sub	sp, #64	@ 0x40
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800456e:	4b64      	ldr	r3, [pc, #400]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	4a63      	ldr	r2, [pc, #396]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004574:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004578:	6453      	str	r3, [r2, #68]	@ 0x44
 800457a:	4b61      	ldr	r3, [pc, #388]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004586:	4b5e      	ldr	r3, [pc, #376]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	4a5d      	ldr	r2, [pc, #372]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 800458c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004590:	6313      	str	r3, [r2, #48]	@ 0x30
 8004592:	4b5b      	ldr	r3, [pc, #364]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800459e:	4b58      	ldr	r3, [pc, #352]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	4a57      	ldr	r2, [pc, #348]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045a4:	f043 0310 	orr.w	r3, r3, #16
 80045a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045aa:	4b55      	ldr	r3, [pc, #340]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	623b      	str	r3, [r7, #32]
 80045b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80045b6:	4b52      	ldr	r3, [pc, #328]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	4a51      	ldr	r2, [pc, #324]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80045ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	4a4b      	ldr	r2, [pc, #300]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045da:	4b49      	ldr	r3, [pc, #292]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80045e6:	4b46      	ldr	r3, [pc, #280]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ea:	4a45      	ldr	r2, [pc, #276]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045f2:	4b43      	ldr	r3, [pc, #268]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80045fe:	4b40      	ldr	r3, [pc, #256]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004602:	4a3f      	ldr	r2, [pc, #252]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004604:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004608:	6313      	str	r3, [r2, #48]	@ 0x30
 800460a:	4b3d      	ldr	r3, [pc, #244]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8004616:	4b3a      	ldr	r3, [pc, #232]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	4a39      	ldr	r2, [pc, #228]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004620:	6313      	str	r3, [r2, #48]	@ 0x30
 8004622:	4b37      	ldr	r3, [pc, #220]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800462e:	4b34      	ldr	r3, [pc, #208]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004632:	4a33      	ldr	r2, [pc, #204]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 8004634:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004638:	6313      	str	r3, [r2, #48]	@ 0x30
 800463a:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <BSP_LCD_MspInit+0x19c>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8004646:	2310      	movs	r3, #16
 8004648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800464a:	2302      	movs	r3, #2
 800464c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800464e:	2300      	movs	r3, #0
 8004650:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004652:	2302      	movs	r3, #2
 8004654:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8004656:	230e      	movs	r3, #14
 8004658:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800465a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800465e:	4619      	mov	r1, r3
 8004660:	4828      	ldr	r0, [pc, #160]	@ (8004704 <BSP_LCD_MspInit+0x1a0>)
 8004662:	f002 fdc1 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8004666:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800466c:	2302      	movs	r3, #2
 800466e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004670:	2309      	movs	r3, #9
 8004672:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004678:	4619      	mov	r1, r3
 800467a:	4823      	ldr	r0, [pc, #140]	@ (8004708 <BSP_LCD_MspInit+0x1a4>)
 800467c:	f002 fdb4 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004680:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8004684:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004686:	2302      	movs	r3, #2
 8004688:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800468a:	230e      	movs	r3, #14
 800468c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800468e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004692:	4619      	mov	r1, r3
 8004694:	481d      	ldr	r0, [pc, #116]	@ (800470c <BSP_LCD_MspInit+0x1a8>)
 8004696:	f002 fda7 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800469a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800469e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046a4:	230e      	movs	r3, #14
 80046a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80046a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046ac:	4619      	mov	r1, r3
 80046ae:	4818      	ldr	r0, [pc, #96]	@ (8004710 <BSP_LCD_MspInit+0x1ac>)
 80046b0:	f002 fd9a 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80046b4:	23f7      	movs	r3, #247	@ 0xf7
 80046b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046b8:	2302      	movs	r3, #2
 80046ba:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046bc:	230e      	movs	r3, #14
 80046be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80046c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046c4:	4619      	mov	r1, r3
 80046c6:	4813      	ldr	r0, [pc, #76]	@ (8004714 <BSP_LCD_MspInit+0x1b0>)
 80046c8:	f002 fd8e 	bl	80071e8 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80046cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80046d2:	2301      	movs	r3, #1
 80046d4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80046d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046da:	4619      	mov	r1, r3
 80046dc:	480b      	ldr	r0, [pc, #44]	@ (800470c <BSP_LCD_MspInit+0x1a8>)
 80046de:	f002 fd83 	bl	80071e8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80046e2:	2308      	movs	r3, #8
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80046e6:	2301      	movs	r3, #1
 80046e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80046ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046ee:	4619      	mov	r1, r3
 80046f0:	4808      	ldr	r0, [pc, #32]	@ (8004714 <BSP_LCD_MspInit+0x1b0>)
 80046f2:	f002 fd79 	bl	80071e8 <HAL_GPIO_Init>
}
 80046f6:	bf00      	nop
 80046f8:	3740      	adds	r7, #64	@ 0x40
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800
 8004704:	40021000 	.word	0x40021000
 8004708:	40021800 	.word	0x40021800
 800470c:	40022000 	.word	0x40022000
 8004710:	40022400 	.word	0x40022400
 8004714:	40022800 	.word	0x40022800

08004718 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004722:	4b0a      	ldr	r3, [pc, #40]	@ (800474c <BSP_LCD_ClockConfig+0x34>)
 8004724:	2208      	movs	r2, #8
 8004726:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004728:	4b08      	ldr	r3, [pc, #32]	@ (800474c <BSP_LCD_ClockConfig+0x34>)
 800472a:	22c0      	movs	r2, #192	@ 0xc0
 800472c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800472e:	4b07      	ldr	r3, [pc, #28]	@ (800474c <BSP_LCD_ClockConfig+0x34>)
 8004730:	2205      	movs	r2, #5
 8004732:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8004734:	4b05      	ldr	r3, [pc, #20]	@ (800474c <BSP_LCD_ClockConfig+0x34>)
 8004736:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800473a:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800473c:	4803      	ldr	r0, [pc, #12]	@ (800474c <BSP_LCD_ClockConfig+0x34>)
 800473e:	f004 fd6f 	bl	8009220 <HAL_RCCEx_PeriphCLKConfig>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000b80 	.word	0x20000b80

08004750 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	603a      	str	r2, [r7, #0]
 800475a:	80fb      	strh	r3, [r7, #6]
 800475c:	460b      	mov	r3, r1
 800475e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004768:	4b53      	ldr	r3, [pc, #332]	@ (80048b8 <DrawChar+0x168>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4953      	ldr	r1, [pc, #332]	@ (80048bc <DrawChar+0x16c>)
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	3308      	adds	r3, #8
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	88db      	ldrh	r3, [r3, #6]
 800477e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004780:	4b4d      	ldr	r3, [pc, #308]	@ (80048b8 <DrawChar+0x168>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	494d      	ldr	r1, [pc, #308]	@ (80048bc <DrawChar+0x16c>)
 8004786:	4613      	mov	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	3308      	adds	r3, #8
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	889b      	ldrh	r3, [r3, #4]
 8004796:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004798:	8a3b      	ldrh	r3, [r7, #16]
 800479a:	3307      	adds	r3, #7
 800479c:	2b00      	cmp	r3, #0
 800479e:	da00      	bge.n	80047a2 <DrawChar+0x52>
 80047a0:	3307      	adds	r3, #7
 80047a2:	10db      	asrs	r3, r3, #3
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	8a3b      	ldrh	r3, [r7, #16]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
 80047b6:	e076      	b.n	80048a6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80047b8:	8a3b      	ldrh	r3, [r7, #16]
 80047ba:	3307      	adds	r3, #7
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da00      	bge.n	80047c2 <DrawChar+0x72>
 80047c0:	3307      	adds	r3, #7
 80047c2:	10db      	asrs	r3, r3, #3
 80047c4:	461a      	mov	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	fb02 f303 	mul.w	r3, r2, r3
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80047d2:	8a3b      	ldrh	r3, [r7, #16]
 80047d4:	3307      	adds	r3, #7
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	da00      	bge.n	80047dc <DrawChar+0x8c>
 80047da:	3307      	adds	r3, #7
 80047dc:	10db      	asrs	r3, r3, #3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d002      	beq.n	80047e8 <DrawChar+0x98>
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d004      	beq.n	80047f0 <DrawChar+0xa0>
 80047e6:	e00c      	b.n	8004802 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	617b      	str	r3, [r7, #20]
      break;
 80047ee:	e016      	b.n	800481e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	3201      	adds	r2, #1
 80047fa:	7812      	ldrb	r2, [r2, #0]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
      break;
 8004800:	e00d      	b.n	800481e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	041a      	lsls	r2, r3, #16
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	3301      	adds	r3, #1
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	021b      	lsls	r3, r3, #8
 8004810:	4313      	orrs	r3, r2
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	3202      	adds	r2, #2
 8004816:	7812      	ldrb	r2, [r2, #0]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
      break;
 800481c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800481e:	2300      	movs	r3, #0
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	e036      	b.n	8004892 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004824:	8a3a      	ldrh	r2, [r7, #16]
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	1ad2      	subs	r2, r2, r3
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	4413      	add	r3, r2
 800482e:	3b01      	subs	r3, #1
 8004830:	2201      	movs	r2, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	461a      	mov	r2, r3
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d012      	beq.n	8004866 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	b29a      	uxth	r2, r3
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	4413      	add	r3, r2
 8004848:	b298      	uxth	r0, r3
 800484a:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <DrawChar+0x168>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	491b      	ldr	r1, [pc, #108]	@ (80048bc <DrawChar+0x16c>)
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	88bb      	ldrh	r3, [r7, #4]
 800485e:	4619      	mov	r1, r3
 8004860:	f7ff fcee 	bl	8004240 <BSP_LCD_DrawPixel>
 8004864:	e012      	b.n	800488c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	b29a      	uxth	r2, r3
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	4413      	add	r3, r2
 800486e:	b298      	uxth	r0, r3
 8004870:	4b11      	ldr	r3, [pc, #68]	@ (80048b8 <DrawChar+0x168>)
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4911      	ldr	r1, [pc, #68]	@ (80048bc <DrawChar+0x16c>)
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	3304      	adds	r3, #4
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	88bb      	ldrh	r3, [r7, #4]
 8004886:	4619      	mov	r1, r3
 8004888:	f7ff fcda 	bl	8004240 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	3301      	adds	r3, #1
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	8a3b      	ldrh	r3, [r7, #16]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	429a      	cmp	r2, r3
 8004898:	d3c4      	bcc.n	8004824 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800489a:	88bb      	ldrh	r3, [r7, #4]
 800489c:	3301      	adds	r3, #1
 800489e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	8a7b      	ldrh	r3, [r7, #18]
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d384      	bcc.n	80047b8 <DrawChar+0x68>
  }
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000b64 	.word	0x20000b64
 80048bc:	20000b68 	.word	0x20000b68

080048c0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80048ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004948 <LL_FillBuffer+0x88>)
 80048d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80048d4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80048d6:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <LL_FillBuffer+0x8c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a1d      	ldr	r2, [pc, #116]	@ (8004950 <LL_FillBuffer+0x90>)
 80048dc:	2134      	movs	r1, #52	@ 0x34
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3348      	adds	r3, #72	@ 0x48
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d103      	bne.n	80048f4 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80048ec:	4b16      	ldr	r3, [pc, #88]	@ (8004948 <LL_FillBuffer+0x88>)
 80048ee:	2202      	movs	r2, #2
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	e002      	b.n	80048fa <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80048f4:	4b14      	ldr	r3, [pc, #80]	@ (8004948 <LL_FillBuffer+0x88>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80048fa:	4a13      	ldr	r2, [pc, #76]	@ (8004948 <LL_FillBuffer+0x88>)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004900:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <LL_FillBuffer+0x88>)
 8004902:	4a14      	ldr	r2, [pc, #80]	@ (8004954 <LL_FillBuffer+0x94>)
 8004904:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004906:	4810      	ldr	r0, [pc, #64]	@ (8004948 <LL_FillBuffer+0x88>)
 8004908:	f002 f8d2 	bl	8006ab0 <HAL_DMA2D_Init>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d115      	bne.n	800493e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	480c      	ldr	r0, [pc, #48]	@ (8004948 <LL_FillBuffer+0x88>)
 8004916:	f002 fb39 	bl	8006f8c <HAL_DMA2D_ConfigLayer>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10e      	bne.n	800493e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	69f9      	ldr	r1, [r7, #28]
 800492a:	4807      	ldr	r0, [pc, #28]	@ (8004948 <LL_FillBuffer+0x88>)
 800492c:	f002 f90a 	bl	8006b44 <HAL_DMA2D_Start>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004936:	210a      	movs	r1, #10
 8004938:	4803      	ldr	r0, [pc, #12]	@ (8004948 <LL_FillBuffer+0x88>)
 800493a:	f002 f92e 	bl	8006b9a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000b24 	.word	0x20000b24
 800494c:	20000b64 	.word	0x20000b64
 8004950:	20000a7c 	.word	0x20000a7c
 8004954:	4002b000 	.word	0x4002b000

08004958 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8004966:	4b1c      	ldr	r3, [pc, #112]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 8004968:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800496c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800496e:	4b1a      	ldr	r3, [pc, #104]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 8004970:	2200      	movs	r2, #0
 8004972:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8004974:	4b18      	ldr	r3, [pc, #96]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800497a:	4b17      	ldr	r3, [pc, #92]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004980:	4b15      	ldr	r3, [pc, #84]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 8004982:	22ff      	movs	r2, #255	@ 0xff
 8004984:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8004986:	4a14      	ldr	r2, [pc, #80]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800498c:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 800498e:	2200      	movs	r2, #0
 8004990:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8004992:	4b11      	ldr	r3, [pc, #68]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 8004994:	4a11      	ldr	r2, [pc, #68]	@ (80049dc <LL_ConvertLineToARGB8888+0x84>)
 8004996:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004998:	480f      	ldr	r0, [pc, #60]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 800499a:	f002 f889 	bl	8006ab0 <HAL_DMA2D_Init>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d115      	bne.n	80049d0 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80049a4:	2101      	movs	r1, #1
 80049a6:	480c      	ldr	r0, [pc, #48]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 80049a8:	f002 faf0 	bl	8006f8c <HAL_DMA2D_ConfigLayer>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10e      	bne.n	80049d0 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80049b2:	68f9      	ldr	r1, [r7, #12]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	2301      	movs	r3, #1
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4806      	ldr	r0, [pc, #24]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 80049be:	f002 f8c1 	bl	8006b44 <HAL_DMA2D_Start>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80049c8:	210a      	movs	r1, #10
 80049ca:	4803      	ldr	r0, [pc, #12]	@ (80049d8 <LL_ConvertLineToARGB8888+0x80>)
 80049cc:	f002 f8e5 	bl	8006b9a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000b24 	.word	0x20000b24
 80049dc:	4002b000 	.word	0x4002b000

080049e0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80049e4:	4b29      	ldr	r3, [pc, #164]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 80049e6:	4a2a      	ldr	r2, [pc, #168]	@ (8004a90 <BSP_SDRAM_Init+0xb0>)
 80049e8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80049ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004a94 <BSP_SDRAM_Init+0xb4>)
 80049ec:	2202      	movs	r2, #2
 80049ee:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80049f0:	4b28      	ldr	r3, [pc, #160]	@ (8004a94 <BSP_SDRAM_Init+0xb4>)
 80049f2:	2207      	movs	r2, #7
 80049f4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80049f6:	4b27      	ldr	r3, [pc, #156]	@ (8004a94 <BSP_SDRAM_Init+0xb4>)
 80049f8:	2204      	movs	r2, #4
 80049fa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80049fc:	4b25      	ldr	r3, [pc, #148]	@ (8004a94 <BSP_SDRAM_Init+0xb4>)
 80049fe:	2207      	movs	r2, #7
 8004a00:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004a02:	4b24      	ldr	r3, [pc, #144]	@ (8004a94 <BSP_SDRAM_Init+0xb4>)
 8004a04:	2202      	movs	r2, #2
 8004a06:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004a08:	4b22      	ldr	r3, [pc, #136]	@ (8004a94 <BSP_SDRAM_Init+0xb4>)
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004a0e:	4b21      	ldr	r3, [pc, #132]	@ (8004a94 <BSP_SDRAM_Init+0xb4>)
 8004a10:	2202      	movs	r2, #2
 8004a12:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004a14:	4b1d      	ldr	r3, [pc, #116]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004a20:	4b1a      	ldr	r3, [pc, #104]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a22:	2204      	movs	r2, #4
 8004a24:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004a26:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a28:	2210      	movs	r2, #16
 8004a2a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004a2c:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004a32:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a38:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004a3a:	4b14      	ldr	r3, [pc, #80]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004a40:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a46:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004a48:	4b10      	ldr	r3, [pc, #64]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a4a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004a4e:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004a50:	4b0e      	ldr	r3, [pc, #56]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004a56:	2100      	movs	r1, #0
 8004a58:	480c      	ldr	r0, [pc, #48]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a5a:	f000 f87f 	bl	8004b5c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004a5e:	490d      	ldr	r1, [pc, #52]	@ (8004a94 <BSP_SDRAM_Init+0xb4>)
 8004a60:	480a      	ldr	r0, [pc, #40]	@ (8004a8c <BSP_SDRAM_Init+0xac>)
 8004a62:	f006 f961 	bl	800ad28 <HAL_SDRAM_Init>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <BSP_SDRAM_Init+0xb8>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e002      	b.n	8004a7a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004a74:	4b08      	ldr	r3, [pc, #32]	@ (8004a98 <BSP_SDRAM_Init+0xb8>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004a7a:	f240 6003 	movw	r0, #1539	@ 0x603
 8004a7e:	f000 f80d 	bl	8004a9c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004a82:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <BSP_SDRAM_Init+0xb8>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000c04 	.word	0x20000c04
 8004a90:	a0000140 	.word	0xa0000140
 8004a94:	20000c38 	.word	0x20000c38
 8004a98:	20000044 	.word	0x20000044

08004a9c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004aae:	4b29      	ldr	r3, [pc, #164]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ab4:	4b27      	ldr	r3, [pc, #156]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004aba:	4b26      	ldr	r3, [pc, #152]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004ac0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ac4:	4923      	ldr	r1, [pc, #140]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ac6:	4824      	ldr	r0, [pc, #144]	@ (8004b58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004ac8:	f006 f962 	bl	800ad90 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004acc:	2001      	movs	r0, #1
 8004ace:	f000 ff0d 	bl	80058ec <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ada:	2210      	movs	r2, #16
 8004adc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004ade:	4b1d      	ldr	r3, [pc, #116]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004aee:	4919      	ldr	r1, [pc, #100]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004af0:	4819      	ldr	r0, [pc, #100]	@ (8004b58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004af2:	f006 f94d 	bl	800ad90 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004af6:	4b17      	ldr	r3, [pc, #92]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004af8:	2203      	movs	r2, #3
 8004afa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004afc:	4b15      	ldr	r3, [pc, #84]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004afe:	2210      	movs	r2, #16
 8004b00:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004b02:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b04:	2208      	movs	r2, #8
 8004b06:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b08:	4b12      	ldr	r3, [pc, #72]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b12:	4910      	ldr	r1, [pc, #64]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b14:	4810      	ldr	r0, [pc, #64]	@ (8004b58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b16:	f006 f93b 	bl	800ad90 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004b1a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004b1e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004b20:	4b0c      	ldr	r3, [pc, #48]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b22:	2204      	movs	r2, #4
 8004b24:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b26:	4b0b      	ldr	r3, [pc, #44]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b28:	2210      	movs	r2, #16
 8004b2a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b2c:	4b09      	ldr	r3, [pc, #36]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a07      	ldr	r2, [pc, #28]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b36:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b3c:	4905      	ldr	r1, [pc, #20]	@ (8004b54 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b3e:	4806      	ldr	r0, [pc, #24]	@ (8004b58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b40:	f006 f926 	bl	800ad90 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4804      	ldr	r0, [pc, #16]	@ (8004b58 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004b48:	f006 f957 	bl	800adfa <HAL_SDRAM_ProgramRefreshRate>
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000c54 	.word	0x20000c54
 8004b58:	20000c04 	.word	0x20000c04

08004b5c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b090      	sub	sp, #64	@ 0x40
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004b66:	4b70      	ldr	r3, [pc, #448]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6a:	4a6f      	ldr	r2, [pc, #444]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6393      	str	r3, [r2, #56]	@ 0x38
 8004b72:	4b6d      	ldr	r3, [pc, #436]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b82:	4a69      	ldr	r2, [pc, #420]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004b84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b8a:	4b67      	ldr	r3, [pc, #412]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b96:	4b64      	ldr	r3, [pc, #400]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9a:	4a63      	ldr	r2, [pc, #396]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ba2:	4b61      	ldr	r3, [pc, #388]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	623b      	str	r3, [r7, #32]
 8004bac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bae:	4b5e      	ldr	r3, [pc, #376]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	4a5d      	ldr	r2, [pc, #372]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bb4:	f043 0308 	orr.w	r3, r3, #8
 8004bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bba:	4b5b      	ldr	r3, [pc, #364]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004bc6:	4b58      	ldr	r3, [pc, #352]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	4a57      	ldr	r2, [pc, #348]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bcc:	f043 0310 	orr.w	r3, r3, #16
 8004bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bd2:	4b55      	ldr	r3, [pc, #340]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bde:	4b52      	ldr	r3, [pc, #328]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be2:	4a51      	ldr	r2, [pc, #324]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004be4:	f043 0320 	orr.w	r3, r3, #32
 8004be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bea:	4b4f      	ldr	r3, [pc, #316]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bf6:	4b4c      	ldr	r3, [pc, #304]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfa:	4a4b      	ldr	r2, [pc, #300]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c02:	4b49      	ldr	r3, [pc, #292]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c0e:	4b46      	ldr	r3, [pc, #280]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	4a45      	ldr	r2, [pc, #276]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c1a:	4b43      	ldr	r3, [pc, #268]	@ (8004d28 <BSP_SDRAM_MspInit+0x1cc>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c26:	2302      	movs	r3, #2
 8004c28:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004c2e:	2302      	movs	r3, #2
 8004c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004c32:	230c      	movs	r3, #12
 8004c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004c36:	2308      	movs	r3, #8
 8004c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004c3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c3e:	4619      	mov	r1, r3
 8004c40:	483a      	ldr	r0, [pc, #232]	@ (8004d2c <BSP_SDRAM_MspInit+0x1d0>)
 8004c42:	f002 fad1 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004c46:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004c4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c50:	4619      	mov	r1, r3
 8004c52:	4837      	ldr	r0, [pc, #220]	@ (8004d30 <BSP_SDRAM_MspInit+0x1d4>)
 8004c54:	f002 fac8 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004c58:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004c5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c62:	4619      	mov	r1, r3
 8004c64:	4833      	ldr	r0, [pc, #204]	@ (8004d34 <BSP_SDRAM_MspInit+0x1d8>)
 8004c66:	f002 fabf 	bl	80071e8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004c6a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004c70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c74:	4619      	mov	r1, r3
 8004c76:	4830      	ldr	r0, [pc, #192]	@ (8004d38 <BSP_SDRAM_MspInit+0x1dc>)
 8004c78:	f002 fab6 	bl	80071e8 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004c7c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004c82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c86:	4619      	mov	r1, r3
 8004c88:	482c      	ldr	r0, [pc, #176]	@ (8004d3c <BSP_SDRAM_MspInit+0x1e0>)
 8004c8a:	f002 faad 	bl	80071e8 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004c8e:	2328      	movs	r3, #40	@ 0x28
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004c92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c96:	4619      	mov	r1, r3
 8004c98:	4829      	ldr	r0, [pc, #164]	@ (8004d40 <BSP_SDRAM_MspInit+0x1e4>)
 8004c9a:	f002 faa5 	bl	80071e8 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004c9e:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004ca4:	4b27      	ldr	r3, [pc, #156]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004ca6:	2280      	movs	r2, #128	@ 0x80
 8004ca8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004caa:	4b26      	ldr	r3, [pc, #152]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cb0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004cb2:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004cb8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004cba:	4b22      	ldr	r3, [pc, #136]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004cc0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004cc2:	4b20      	ldr	r3, [pc, #128]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cc4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004cc8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004cca:	4b1e      	ldr	r3, [pc, #120]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004cd6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004cde:	4b19      	ldr	r3, [pc, #100]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004ce4:	4b17      	ldr	r3, [pc, #92]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004cea:	4b16      	ldr	r3, [pc, #88]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004cf0:	4b14      	ldr	r3, [pc, #80]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cf2:	4a15      	ldr	r2, [pc, #84]	@ (8004d48 <BSP_SDRAM_MspInit+0x1ec>)
 8004cf4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a12      	ldr	r2, [pc, #72]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cfc:	4a11      	ldr	r2, [pc, #68]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004d02:	4810      	ldr	r0, [pc, #64]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004d04:	f001 fba0 	bl	8006448 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004d08:	480e      	ldr	r0, [pc, #56]	@ (8004d44 <BSP_SDRAM_MspInit+0x1e8>)
 8004d0a:	f001 faef 	bl	80062ec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	210f      	movs	r1, #15
 8004d12:	2038      	movs	r0, #56	@ 0x38
 8004d14:	f001 fac0 	bl	8006298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004d18:	2038      	movs	r0, #56	@ 0x38
 8004d1a:	f001 fad9 	bl	80062d0 <HAL_NVIC_EnableIRQ>
}
 8004d1e:	bf00      	nop
 8004d20:	3740      	adds	r7, #64	@ 0x40
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40020800 	.word	0x40020800
 8004d30:	40020c00 	.word	0x40020c00
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40021400 	.word	0x40021400
 8004d3c:	40021800 	.word	0x40021800
 8004d40:	40021c00 	.word	0x40021c00
 8004d44:	20000c64 	.word	0x20000c64
 8004d48:	40026410 	.word	0x40026410

08004d4c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	4603      	mov	r3, r0
 8004d54:	460a      	mov	r2, r1
 8004d56:	80fb      	strh	r3, [r7, #6]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004d60:	4a14      	ldr	r2, [pc, #80]	@ (8004db4 <BSP_TS_Init+0x68>)
 8004d62:	88fb      	ldrh	r3, [r7, #6]
 8004d64:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004d66:	4a14      	ldr	r2, [pc, #80]	@ (8004db8 <BSP_TS_Init+0x6c>)
 8004d68:	88bb      	ldrh	r3, [r7, #4]
 8004d6a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004d6c:	4b13      	ldr	r3, [pc, #76]	@ (8004dbc <BSP_TS_Init+0x70>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2070      	movs	r0, #112	@ 0x70
 8004d72:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004d74:	4b11      	ldr	r3, [pc, #68]	@ (8004dbc <BSP_TS_Init+0x70>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2070      	movs	r0, #112	@ 0x70
 8004d7a:	4798      	blx	r3
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b51      	cmp	r3, #81	@ 0x51
 8004d80:	d110      	bne.n	8004da4 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004d82:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <BSP_TS_Init+0x74>)
 8004d84:	4a0d      	ldr	r2, [pc, #52]	@ (8004dbc <BSP_TS_Init+0x70>)
 8004d86:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004d88:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc4 <BSP_TS_Init+0x78>)
 8004d8a:	2270      	movs	r2, #112	@ 0x70
 8004d8c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc8 <BSP_TS_Init+0x7c>)
 8004d90:	2208      	movs	r2, #8
 8004d92:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004d94:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc0 <BSP_TS_Init+0x74>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc4 <BSP_TS_Init+0x78>)
 8004d9c:	7812      	ldrb	r2, [r2, #0]
 8004d9e:	4610      	mov	r0, r2
 8004da0:	4798      	blx	r3
 8004da2:	e001      	b.n	8004da8 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004da4:	2303      	movs	r3, #3
 8004da6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000cc8 	.word	0x20000cc8
 8004db8:	20000cca 	.word	0x20000cca
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	20000cc4 	.word	0x20000cc4
 8004dc4:	20000ccd 	.word	0x20000ccd
 8004dc8:	20000ccc 	.word	0x20000ccc

08004dcc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b097      	sub	sp, #92	@ 0x5c
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8004de6:	4bb8      	ldr	r3, [pc, #736]	@ (80050c8 <BSP_TS_GetState+0x2fc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	4ab7      	ldr	r2, [pc, #732]	@ (80050cc <BSP_TS_GetState+0x300>)
 8004dee:	7812      	ldrb	r2, [r2, #0]
 8004df0:	4610      	mov	r0, r2
 8004df2:	4798      	blx	r3
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8198 	beq.w	8005136 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004e06:	2300      	movs	r3, #0
 8004e08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e0a:	e187      	b.n	800511c <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004e0c:	4bae      	ldr	r3, [pc, #696]	@ (80050c8 <BSP_TS_GetState+0x2fc>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	4aae      	ldr	r2, [pc, #696]	@ (80050cc <BSP_TS_GetState+0x300>)
 8004e14:	7812      	ldrb	r2, [r2, #0]
 8004e16:	4614      	mov	r4, r2
 8004e18:	f107 0120 	add.w	r1, r7, #32
 8004e1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e1e:	0052      	lsls	r2, r2, #1
 8004e20:	1888      	adds	r0, r1, r2
 8004e22:	f107 0114 	add.w	r1, r7, #20
 8004e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e28:	0052      	lsls	r2, r2, #1
 8004e2a:	440a      	add	r2, r1
 8004e2c:	4601      	mov	r1, r0
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004e32:	4ba7      	ldr	r3, [pc, #668]	@ (80050d0 <BSP_TS_GetState+0x304>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d117      	bne.n	8004e6a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	3350      	adds	r3, #80	@ 0x50
 8004e40:	443b      	add	r3, r7
 8004e42:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	3350      	adds	r3, #80	@ 0x50
 8004e4c:	443b      	add	r3, r7
 8004e4e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	3350      	adds	r3, #80	@ 0x50
 8004e58:	443b      	add	r3, r7
 8004e5a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	3350      	adds	r3, #80	@ 0x50
 8004e64:	443b      	add	r3, r7
 8004e66:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004e6a:	4b99      	ldr	r3, [pc, #612]	@ (80050d0 <BSP_TS_GetState+0x304>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00e      	beq.n	8004e94 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8004e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	3350      	adds	r3, #80	@ 0x50
 8004e7c:	443b      	add	r3, r7
 8004e7e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004e82:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	3350      	adds	r3, #80	@ 0x50
 8004e8e:	443b      	add	r3, r7
 8004e90:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004e94:	4b8e      	ldr	r3, [pc, #568]	@ (80050d0 <BSP_TS_GetState+0x304>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8004ea0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	3350      	adds	r3, #80	@ 0x50
 8004ea6:	443b      	add	r3, r7
 8004ea8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004eac:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	3350      	adds	r3, #80	@ 0x50
 8004eb8:	443b      	add	r3, r7
 8004eba:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004ebe:	4b84      	ldr	r3, [pc, #528]	@ (80050d0 <BSP_TS_GetState+0x304>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d017      	beq.n	8004efa <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8004eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	3350      	adds	r3, #80	@ 0x50
 8004ed0:	443b      	add	r3, r7
 8004ed2:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	3350      	adds	r3, #80	@ 0x50
 8004edc:	443b      	add	r3, r7
 8004ede:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	3350      	adds	r3, #80	@ 0x50
 8004ee8:	443b      	add	r3, r7
 8004eea:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004eee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	3350      	adds	r3, #80	@ 0x50
 8004ef4:	443b      	add	r3, r7
 8004ef6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	3350      	adds	r3, #80	@ 0x50
 8004f00:	443b      	add	r3, r7
 8004f02:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f06:	4619      	mov	r1, r3
 8004f08:	4a72      	ldr	r2, [pc, #456]	@ (80050d4 <BSP_TS_GetState+0x308>)
 8004f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f10:	4299      	cmp	r1, r3
 8004f12:	d90d      	bls.n	8004f30 <BSP_TS_GetState+0x164>
 8004f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	3350      	adds	r3, #80	@ 0x50
 8004f1a:	443b      	add	r3, r7
 8004f1c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004f20:	496c      	ldr	r1, [pc, #432]	@ (80050d4 <BSP_TS_GetState+0x308>)
 8004f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	e00c      	b.n	8004f4a <BSP_TS_GetState+0x17e>
 8004f30:	4a68      	ldr	r2, [pc, #416]	@ (80050d4 <BSP_TS_GetState+0x308>)
 8004f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	3350      	adds	r3, #80	@ 0x50
 8004f40:	443b      	add	r3, r7
 8004f42:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	3350      	adds	r3, #80	@ 0x50
 8004f54:	443b      	add	r3, r7
 8004f56:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	4a5e      	ldr	r2, [pc, #376]	@ (80050d8 <BSP_TS_GetState+0x30c>)
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f64:	4299      	cmp	r1, r3
 8004f66:	d90d      	bls.n	8004f84 <BSP_TS_GetState+0x1b8>
 8004f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	3350      	adds	r3, #80	@ 0x50
 8004f6e:	443b      	add	r3, r7
 8004f70:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8004f74:	4958      	ldr	r1, [pc, #352]	@ (80050d8 <BSP_TS_GetState+0x30c>)
 8004f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	e00c      	b.n	8004f9e <BSP_TS_GetState+0x1d2>
 8004f84:	4a54      	ldr	r2, [pc, #336]	@ (80050d8 <BSP_TS_GetState+0x30c>)
 8004f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	3350      	adds	r3, #80	@ 0x50
 8004f94:	443b      	add	r3, r7
 8004f96:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8004fa2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8004fa6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004faa:	4413      	add	r3, r2
 8004fac:	2b05      	cmp	r3, #5
 8004fae:	dd15      	ble.n	8004fdc <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8004fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	3350      	adds	r3, #80	@ 0x50
 8004fb6:	443b      	add	r3, r7
 8004fb8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4a45      	ldr	r2, [pc, #276]	@ (80050d4 <BSP_TS_GetState+0x308>)
 8004fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8004fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	3350      	adds	r3, #80	@ 0x50
 8004fcc:	443b      	add	r3, r7
 8004fce:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4a40      	ldr	r2, [pc, #256]	@ (80050d8 <BSP_TS_GetState+0x30c>)
 8004fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <BSP_TS_GetState+0x300>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b70      	cmp	r3, #112	@ 0x70
 8004fe2:	d119      	bne.n	8005018 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	3350      	adds	r3, #80	@ 0x50
 8004fea:	443b      	add	r3, r7
 8004fec:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	3350      	adds	r3, #80	@ 0x50
 8005002:	443b      	add	r3, r7
 8005004:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800500c:	3304      	adds	r3, #4
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4413      	add	r3, r2
 8005012:	460a      	mov	r2, r1
 8005014:	809a      	strh	r2, [r3, #4]
 8005016:	e022      	b.n	800505e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8005018:	4b30      	ldr	r3, [pc, #192]	@ (80050dc <BSP_TS_GetState+0x310>)
 800501a:	881b      	ldrh	r3, [r3, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	4a2d      	ldr	r2, [pc, #180]	@ (80050d4 <BSP_TS_GetState+0x308>)
 8005020:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	fb01 f303 	mul.w	r3, r1, r3
 800502a:	0b1b      	lsrs	r3, r3, #12
 800502c:	b299      	uxth	r1, r3
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	4413      	add	r3, r2
 8005036:	460a      	mov	r2, r1
 8005038:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <BSP_TS_GetState+0x314>)
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	4619      	mov	r1, r3
 8005040:	4a25      	ldr	r2, [pc, #148]	@ (80050d8 <BSP_TS_GetState+0x30c>)
 8005042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	0b1b      	lsrs	r3, r3, #12
 800504e:	b299      	uxth	r1, r3
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005054:	3304      	adds	r3, #4
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	4413      	add	r3, r2
 800505a:	460a      	mov	r2, r1
 800505c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800505e:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <BSP_TS_GetState+0x300>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f107 010c 	add.w	r1, r7, #12
 8005068:	f107 0210 	add.w	r2, r7, #16
 800506c:	f107 0308 	add.w	r3, r7, #8
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	460b      	mov	r3, r1
 8005074:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005076:	f7fd fb85 	bl	8002784 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	b2d9      	uxtb	r1, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005082:	4413      	add	r3, r2
 8005084:	3316      	adds	r3, #22
 8005086:	460a      	mov	r2, r1
 8005088:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	b2d9      	uxtb	r1, r3
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005092:	4413      	add	r3, r2
 8005094:	3320      	adds	r3, #32
 8005096:	460a      	mov	r2, r1
 8005098:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b03      	cmp	r3, #3
 800509e:	d836      	bhi.n	800510e <BSP_TS_GetState+0x342>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <BSP_TS_GetState+0x2dc>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050e5 	.word	0x080050e5
 80050b0:	080050f3 	.word	0x080050f3
 80050b4:	08005101 	.word	0x08005101
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050bc:	4413      	add	r3, r2
 80050be:	331b      	adds	r3, #27
 80050c0:	2201      	movs	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
          break;
 80050c4:	e027      	b.n	8005116 <BSP_TS_GetState+0x34a>
 80050c6:	bf00      	nop
 80050c8:	20000cc4 	.word	0x20000cc4
 80050cc:	20000ccd 	.word	0x20000ccd
 80050d0:	20000ccc 	.word	0x20000ccc
 80050d4:	20000cd0 	.word	0x20000cd0
 80050d8:	20000ce4 	.word	0x20000ce4
 80050dc:	20000cc8 	.word	0x20000cc8
 80050e0:	20000cca 	.word	0x20000cca
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050e8:	4413      	add	r3, r2
 80050ea:	331b      	adds	r3, #27
 80050ec:	2202      	movs	r2, #2
 80050ee:	701a      	strb	r2, [r3, #0]
          break;
 80050f0:	e011      	b.n	8005116 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050f6:	4413      	add	r3, r2
 80050f8:	331b      	adds	r3, #27
 80050fa:	2203      	movs	r2, #3
 80050fc:	701a      	strb	r2, [r3, #0]
          break;
 80050fe:	e00a      	b.n	8005116 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005104:	4413      	add	r3, r2
 8005106:	331b      	adds	r3, #27
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
          break;
 800510c:	e003      	b.n	8005116 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8005114:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8005116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005118:	3301      	adds	r3, #1
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005124:	4293      	cmp	r3, r2
 8005126:	f4ff ae71 	bcc.w	8004e0c <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f80a 	bl	8005144 <BSP_TS_Get_GestureId>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005136:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800513a:	4618      	mov	r0, r3
 800513c:	3754      	adds	r7, #84	@ 0x54
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}
 8005142:	bf00      	nop

08005144 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8005154:	4b3b      	ldr	r3, [pc, #236]	@ (8005244 <BSP_TS_Get_GestureId+0x100>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	f107 0308 	add.w	r3, r7, #8
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fd faf6 	bl	8002752 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b49      	cmp	r3, #73	@ 0x49
 800516a:	d05e      	beq.n	800522a <BSP_TS_Get_GestureId+0xe6>
 800516c:	2b49      	cmp	r3, #73	@ 0x49
 800516e:	d860      	bhi.n	8005232 <BSP_TS_Get_GestureId+0xee>
 8005170:	2b1c      	cmp	r3, #28
 8005172:	d83f      	bhi.n	80051f4 <BSP_TS_Get_GestureId+0xb0>
 8005174:	2b1c      	cmp	r3, #28
 8005176:	d85c      	bhi.n	8005232 <BSP_TS_Get_GestureId+0xee>
 8005178:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <BSP_TS_Get_GestureId+0x3c>)
 800517a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517e:	bf00      	nop
 8005180:	080051fb 	.word	0x080051fb
 8005184:	08005233 	.word	0x08005233
 8005188:	08005233 	.word	0x08005233
 800518c:	08005233 	.word	0x08005233
 8005190:	08005233 	.word	0x08005233
 8005194:	08005233 	.word	0x08005233
 8005198:	08005233 	.word	0x08005233
 800519c:	08005233 	.word	0x08005233
 80051a0:	08005233 	.word	0x08005233
 80051a4:	08005233 	.word	0x08005233
 80051a8:	08005233 	.word	0x08005233
 80051ac:	08005233 	.word	0x08005233
 80051b0:	08005233 	.word	0x08005233
 80051b4:	08005233 	.word	0x08005233
 80051b8:	08005233 	.word	0x08005233
 80051bc:	08005233 	.word	0x08005233
 80051c0:	08005203 	.word	0x08005203
 80051c4:	08005233 	.word	0x08005233
 80051c8:	08005233 	.word	0x08005233
 80051cc:	08005233 	.word	0x08005233
 80051d0:	0800520b 	.word	0x0800520b
 80051d4:	08005233 	.word	0x08005233
 80051d8:	08005233 	.word	0x08005233
 80051dc:	08005233 	.word	0x08005233
 80051e0:	08005213 	.word	0x08005213
 80051e4:	08005233 	.word	0x08005233
 80051e8:	08005233 	.word	0x08005233
 80051ec:	08005233 	.word	0x08005233
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	2b40      	cmp	r3, #64	@ 0x40
 80051f6:	d014      	beq.n	8005222 <BSP_TS_Get_GestureId+0xde>
 80051f8:	e01b      	b.n	8005232 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005200:	e01a      	b.n	8005238 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005208:	e016      	b.n	8005238 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005210:	e012      	b.n	8005238 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2203      	movs	r2, #3
 8005216:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005218:	e00e      	b.n	8005238 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2204      	movs	r2, #4
 800521e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005220:	e00a      	b.n	8005238 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2205      	movs	r2, #5
 8005226:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005228:	e006      	b.n	8005238 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2206      	movs	r2, #6
 800522e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8005230:	e002      	b.n	8005238 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	73fb      	strb	r3, [r7, #15]
      break;
 8005236:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8005238:	7bfb      	ldrb	r3, [r7, #15]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000ccd 	.word	0x20000ccd

08005248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800524e:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <HAL_MspInit+0x4c>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	4a10      	ldr	r2, [pc, #64]	@ (8005294 <HAL_MspInit+0x4c>)
 8005254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005258:	6413      	str	r3, [r2, #64]	@ 0x40
 800525a:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <HAL_MspInit+0x4c>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005266:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <HAL_MspInit+0x4c>)
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	4a0a      	ldr	r2, [pc, #40]	@ (8005294 <HAL_MspInit+0x4c>)
 800526c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005270:	6453      	str	r3, [r2, #68]	@ 0x44
 8005272:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <HAL_MspInit+0x4c>)
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	210f      	movs	r1, #15
 8005282:	f06f 0001 	mvn.w	r0, #1
 8005286:	f001 f807 	bl	8006298 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40023800 	.word	0x40023800

08005298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b08e      	sub	sp, #56	@ 0x38
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80052a8:	4b33      	ldr	r3, [pc, #204]	@ (8005378 <HAL_InitTick+0xe0>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	4a32      	ldr	r2, [pc, #200]	@ (8005378 <HAL_InitTick+0xe0>)
 80052ae:	f043 0310 	orr.w	r3, r3, #16
 80052b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80052b4:	4b30      	ldr	r3, [pc, #192]	@ (8005378 <HAL_InitTick+0xe0>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	f003 0310 	and.w	r3, r3, #16
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052c0:	f107 0210 	add.w	r2, r7, #16
 80052c4:	f107 0314 	add.w	r3, r7, #20
 80052c8:	4611      	mov	r1, r2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f003 ff76 	bl	80091bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80052da:	f003 ff47 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 80052de:	6378      	str	r0, [r7, #52]	@ 0x34
 80052e0:	e004      	b.n	80052ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80052e2:	f003 ff43 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 80052e6:	4603      	mov	r3, r0
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ee:	4a23      	ldr	r2, [pc, #140]	@ (800537c <HAL_InitTick+0xe4>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	0c9b      	lsrs	r3, r3, #18
 80052f6:	3b01      	subs	r3, #1
 80052f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80052fa:	4b21      	ldr	r3, [pc, #132]	@ (8005380 <HAL_InitTick+0xe8>)
 80052fc:	4a21      	ldr	r2, [pc, #132]	@ (8005384 <HAL_InitTick+0xec>)
 80052fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005300:	4b1f      	ldr	r3, [pc, #124]	@ (8005380 <HAL_InitTick+0xe8>)
 8005302:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005306:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005308:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <HAL_InitTick+0xe8>)
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800530e:	4b1c      	ldr	r3, [pc, #112]	@ (8005380 <HAL_InitTick+0xe8>)
 8005310:	2200      	movs	r2, #0
 8005312:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005314:	4b1a      	ldr	r3, [pc, #104]	@ (8005380 <HAL_InitTick+0xe8>)
 8005316:	2200      	movs	r2, #0
 8005318:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800531a:	4b19      	ldr	r3, [pc, #100]	@ (8005380 <HAL_InitTick+0xe8>)
 800531c:	2200      	movs	r2, #0
 800531e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005320:	4817      	ldr	r0, [pc, #92]	@ (8005380 <HAL_InitTick+0xe8>)
 8005322:	f005 fd92 	bl	800ae4a <HAL_TIM_Base_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800532c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005330:	2b00      	cmp	r3, #0
 8005332:	d11b      	bne.n	800536c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005334:	4812      	ldr	r0, [pc, #72]	@ (8005380 <HAL_InitTick+0xe8>)
 8005336:	f005 fddf 	bl	800aef8 <HAL_TIM_Base_Start_IT>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005340:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005344:	2b00      	cmp	r3, #0
 8005346:	d111      	bne.n	800536c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005348:	2036      	movs	r0, #54	@ 0x36
 800534a:	f000 ffc1 	bl	80062d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b0f      	cmp	r3, #15
 8005352:	d808      	bhi.n	8005366 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005354:	2200      	movs	r2, #0
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	2036      	movs	r0, #54	@ 0x36
 800535a:	f000 ff9d 	bl	8006298 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800535e:	4a0a      	ldr	r2, [pc, #40]	@ (8005388 <HAL_InitTick+0xf0>)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e002      	b.n	800536c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800536c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005370:	4618      	mov	r0, r3
 8005372:	3738      	adds	r7, #56	@ 0x38
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40023800 	.word	0x40023800
 800537c:	431bde83 	.word	0x431bde83
 8005380:	20000cf8 	.word	0x20000cf8
 8005384:	40001000 	.word	0x40001000
 8005388:	2000004c 	.word	0x2000004c

0800538c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005390:	bf00      	nop
 8005392:	e7fd      	b.n	8005390 <NMI_Handler+0x4>

08005394 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005398:	bf00      	nop
 800539a:	e7fd      	b.n	8005398 <HardFault_Handler+0x4>

0800539c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053a0:	bf00      	nop
 80053a2:	e7fd      	b.n	80053a0 <MemManage_Handler+0x4>

080053a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <BusFault_Handler+0x4>

080053ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <UsageFault_Handler+0x4>

080053b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053b8:	bf00      	nop
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
	...

080053c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80053c8:	4802      	ldr	r0, [pc, #8]	@ (80053d4 <TIM6_DAC_IRQHandler+0x10>)
 80053ca:	f005 fe0d 	bl	800afe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000cf8 	.word	0x20000cf8

080053d8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80053dc:	4802      	ldr	r0, [pc, #8]	@ (80053e8 <DMA2_Stream3_IRQHandler+0x10>)
 80053de:	f001 f8f1 	bl	80065c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80053e2:	bf00      	nop
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20000968 	.word	0x20000968

080053ec <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80053f0:	4802      	ldr	r0, [pc, #8]	@ (80053fc <DMA2_Stream4_IRQHandler+0x10>)
 80053f2:	f001 f8e7 	bl	80065c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80053f6:	bf00      	nop
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	20000820 	.word	0x20000820

08005400 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005404:	4802      	ldr	r0, [pc, #8]	@ (8005410 <DMA2_Stream6_IRQHandler+0x10>)
 8005406:	f001 f8dd 	bl	80065c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200009c8 	.word	0x200009c8

08005414 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8005418:	4802      	ldr	r0, [pc, #8]	@ (8005424 <DMA2_Stream7_IRQHandler+0x10>)
 800541a:	f001 f8d3 	bl	80065c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800541e:	bf00      	nop
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000880 	.word	0x20000880

08005428 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800542c:	4802      	ldr	r0, [pc, #8]	@ (8005438 <LTDC_IRQHandler+0x10>)
 800542e:	f002 ff33 	bl	8008298 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005432:	bf00      	nop
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000660 	.word	0x20000660

0800543c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005440:	4802      	ldr	r0, [pc, #8]	@ (800544c <DMA2D_IRQHandler+0x10>)
 8005442:	f001 fc93 	bl	8006d6c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005446:	bf00      	nop
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000160 	.word	0x20000160

08005450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
	return 1;
 8005454:	2301      	movs	r3, #1
}
 8005456:	4618      	mov	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <_kill>:

int _kill(int pid, int sig)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800546a:	f00a ff4f 	bl	801030c <__errno>
 800546e:	4603      	mov	r3, r0
 8005470:	2216      	movs	r2, #22
 8005472:	601a      	str	r2, [r3, #0]
	return -1;
 8005474:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_exit>:

void _exit (int status)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005488:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ffe7 	bl	8005460 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005492:	bf00      	nop
 8005494:	e7fd      	b.n	8005492 <_exit+0x12>

08005496 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b086      	sub	sp, #24
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	e00a      	b.n	80054be <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054a8:	f3af 8000 	nop.w
 80054ac:	4601      	mov	r1, r0
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	60ba      	str	r2, [r7, #8]
 80054b4:	b2ca      	uxtb	r2, r1
 80054b6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3301      	adds	r3, #1
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	dbf0      	blt.n	80054a8 <_read+0x12>
	}

return len;
 80054c6:	687b      	ldr	r3, [r7, #4]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	e009      	b.n	80054f6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	60ba      	str	r2, [r7, #8]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	dbf1      	blt.n	80054e2 <_write+0x12>
	}
	return len;
 80054fe:	687b      	ldr	r3, [r7, #4]
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <_close>:

int _close(int file)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	return -1;
 8005510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005514:	4618      	mov	r0, r3
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005530:	605a      	str	r2, [r3, #4]
	return 0;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <_isatty>:

int _isatty(int file)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	return 1;
 8005548:	2301      	movs	r3, #1
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	607a      	str	r2, [r7, #4]
	return 0;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005578:	4a14      	ldr	r2, [pc, #80]	@ (80055cc <_sbrk+0x5c>)
 800557a:	4b15      	ldr	r3, [pc, #84]	@ (80055d0 <_sbrk+0x60>)
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005584:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <_sbrk+0x64>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800558c:	4b11      	ldr	r3, [pc, #68]	@ (80055d4 <_sbrk+0x64>)
 800558e:	4a12      	ldr	r2, [pc, #72]	@ (80055d8 <_sbrk+0x68>)
 8005590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005592:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <_sbrk+0x64>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	429a      	cmp	r2, r3
 800559e:	d207      	bcs.n	80055b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055a0:	f00a feb4 	bl	801030c <__errno>
 80055a4:	4603      	mov	r3, r0
 80055a6:	220c      	movs	r2, #12
 80055a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055ae:	e009      	b.n	80055c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055b0:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <_sbrk+0x64>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80055b6:	4b07      	ldr	r3, [pc, #28]	@ (80055d4 <_sbrk+0x64>)
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4413      	add	r3, r2
 80055be:	4a05      	ldr	r2, [pc, #20]	@ (80055d4 <_sbrk+0x64>)
 80055c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055c2:	68fb      	ldr	r3, [r7, #12]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20050000 	.word	0x20050000
 80055d0:	00000400 	.word	0x00000400
 80055d4:	20000d44 	.word	0x20000d44
 80055d8:	20004cd0 	.word	0x20004cd0

080055dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055e0:	4b06      	ldr	r3, [pc, #24]	@ (80055fc <SystemInit+0x20>)
 80055e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e6:	4a05      	ldr	r2, [pc, #20]	@ (80055fc <SystemInit+0x20>)
 80055e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055f0:	bf00      	nop
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	e000ed00 	.word	0xe000ed00

08005600 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005606:	f107 0310 	add.w	r3, r7, #16
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	605a      	str	r2, [r3, #4]
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
 800561c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800561e:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <MX_TIM5_Init+0x94>)
 8005620:	4a1d      	ldr	r2, [pc, #116]	@ (8005698 <MX_TIM5_Init+0x98>)
 8005622:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8005624:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <MX_TIM5_Init+0x94>)
 8005626:	2200      	movs	r2, #0
 8005628:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800562a:	4b1a      	ldr	r3, [pc, #104]	@ (8005694 <MX_TIM5_Init+0x94>)
 800562c:	2200      	movs	r2, #0
 800562e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005630:	4b18      	ldr	r3, [pc, #96]	@ (8005694 <MX_TIM5_Init+0x94>)
 8005632:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005636:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005638:	4b16      	ldr	r3, [pc, #88]	@ (8005694 <MX_TIM5_Init+0x94>)
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800563e:	4b15      	ldr	r3, [pc, #84]	@ (8005694 <MX_TIM5_Init+0x94>)
 8005640:	2200      	movs	r2, #0
 8005642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005644:	4813      	ldr	r0, [pc, #76]	@ (8005694 <MX_TIM5_Init+0x94>)
 8005646:	f005 fc00 	bl	800ae4a <HAL_TIM_Base_Init>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005650:	f7fd fede 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005658:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800565a:	f107 0310 	add.w	r3, r7, #16
 800565e:	4619      	mov	r1, r3
 8005660:	480c      	ldr	r0, [pc, #48]	@ (8005694 <MX_TIM5_Init+0x94>)
 8005662:	f005 fde1 	bl	800b228 <HAL_TIM_ConfigClockSource>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800566c:	f7fd fed0 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005670:	2300      	movs	r3, #0
 8005672:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005678:	1d3b      	adds	r3, r7, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4805      	ldr	r0, [pc, #20]	@ (8005694 <MX_TIM5_Init+0x94>)
 800567e:	f005 ffff 	bl	800b680 <HAL_TIMEx_MasterConfigSynchronization>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005688:	f7fd fec2 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800568c:	bf00      	nop
 800568e:	3720      	adds	r7, #32
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	20000d48 	.word	0x20000d48
 8005698:	40000c00 	.word	0x40000c00

0800569c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <HAL_TIM_Base_MspInit+0x38>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d10b      	bne.n	80056c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <HAL_TIM_Base_MspInit+0x3c>)
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	4a09      	ldr	r2, [pc, #36]	@ (80056d8 <HAL_TIM_Base_MspInit+0x3c>)
 80056b4:	f043 0308 	orr.w	r3, r3, #8
 80056b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ba:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <HAL_TIM_Base_MspInit+0x3c>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40023800 	.word	0x40023800

080056dc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056e0:	4b14      	ldr	r3, [pc, #80]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 80056e2:	4a15      	ldr	r2, [pc, #84]	@ (8005738 <MX_USART1_UART_Init+0x5c>)
 80056e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056e6:	4b13      	ldr	r3, [pc, #76]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 80056e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056ee:	4b11      	ldr	r3, [pc, #68]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005700:	4b0c      	ldr	r3, [pc, #48]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 8005702:	220c      	movs	r2, #12
 8005704:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005706:	4b0b      	ldr	r3, [pc, #44]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 8005708:	2200      	movs	r2, #0
 800570a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800570c:	4b09      	ldr	r3, [pc, #36]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 800570e:	2200      	movs	r2, #0
 8005710:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005712:	4b08      	ldr	r3, [pc, #32]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 8005714:	2200      	movs	r2, #0
 8005716:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005718:	4b06      	ldr	r3, [pc, #24]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 800571a:	2200      	movs	r2, #0
 800571c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800571e:	4805      	ldr	r0, [pc, #20]	@ (8005734 <MX_USART1_UART_Init+0x58>)
 8005720:	f006 f85a 	bl	800b7d8 <HAL_UART_Init>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800572a:	f7fd fe71 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000d94 	.word	0x20000d94
 8005738:	40011000 	.word	0x40011000

0800573c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b0ac      	sub	sp, #176	@ 0xb0
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005744:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005754:	f107 0318 	add.w	r3, r7, #24
 8005758:	2284      	movs	r2, #132	@ 0x84
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f00a fd30 	bl	80101c2 <memset>
  if(uartHandle->Instance==USART1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a32      	ldr	r2, [pc, #200]	@ (8005830 <HAL_UART_MspInit+0xf4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d15c      	bne.n	8005826 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800576c:	2340      	movs	r3, #64	@ 0x40
 800576e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005770:	2300      	movs	r3, #0
 8005772:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005774:	f107 0318 	add.w	r3, r7, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f003 fd51 	bl	8009220 <HAL_RCCEx_PeriphCLKConfig>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005784:	f7fd fe44 	bl	8003410 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005788:	4b2a      	ldr	r3, [pc, #168]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 800578a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578c:	4a29      	ldr	r2, [pc, #164]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 800578e:	f043 0310 	orr.w	r3, r3, #16
 8005792:	6453      	str	r3, [r2, #68]	@ 0x44
 8005794:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 8005796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057a0:	4b24      	ldr	r3, [pc, #144]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	4a23      	ldr	r2, [pc, #140]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 80057a6:	f043 0302 	orr.w	r3, r3, #2
 80057aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80057ac:	4b21      	ldr	r3, [pc, #132]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80057c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <HAL_UART_MspInit+0xf8>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80057d0:	2380      	movs	r3, #128	@ 0x80
 80057d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d6:	2302      	movs	r3, #2
 80057d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80057e8:	2307      	movs	r3, #7
 80057ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80057ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80057f2:	4619      	mov	r1, r3
 80057f4:	4810      	ldr	r0, [pc, #64]	@ (8005838 <HAL_UART_MspInit+0xfc>)
 80057f6:	f001 fcf7 	bl	80071e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80057fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005802:	2302      	movs	r3, #2
 8005804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580e:	2300      	movs	r3, #0
 8005810:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005814:	2307      	movs	r3, #7
 8005816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800581a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800581e:	4619      	mov	r1, r3
 8005820:	4806      	ldr	r0, [pc, #24]	@ (800583c <HAL_UART_MspInit+0x100>)
 8005822:	f001 fce1 	bl	80071e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005826:	bf00      	nop
 8005828:	37b0      	adds	r7, #176	@ 0xb0
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40011000 	.word	0x40011000
 8005834:	40023800 	.word	0x40023800
 8005838:	40020400 	.word	0x40020400
 800583c:	40020000 	.word	0x40020000

08005840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005844:	480d      	ldr	r0, [pc, #52]	@ (800587c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005846:	490e      	ldr	r1, [pc, #56]	@ (8005880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005848:	4a0e      	ldr	r2, [pc, #56]	@ (8005884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800584a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800584c:	e002      	b.n	8005854 <LoopCopyDataInit>

0800584e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800584e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005852:	3304      	adds	r3, #4

08005854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005858:	d3f9      	bcc.n	800584e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800585a:	4a0b      	ldr	r2, [pc, #44]	@ (8005888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800585c:	4c0b      	ldr	r4, [pc, #44]	@ (800588c <LoopFillZerobss+0x26>)
  movs r3, #0
 800585e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005860:	e001      	b.n	8005866 <LoopFillZerobss>

08005862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005864:	3204      	adds	r2, #4

08005866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005868:	d3fb      	bcc.n	8005862 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800586a:	f7ff feb7 	bl	80055dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800586e:	f00a fd53 	bl	8010318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005872:	f7fd fca5 	bl	80031c0 <main>
  bx  lr    
 8005876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005878:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800587c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005880:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8005884:	0801f8e8 	.word	0x0801f8e8
  ldr r2, =_sbss
 8005888:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 800588c:	20004cd0 	.word	0x20004cd0

08005890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005890:	e7fe      	b.n	8005890 <ADC_IRQHandler>

08005892 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005896:	2003      	movs	r0, #3
 8005898:	f000 fcf3 	bl	8006282 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800589c:	200f      	movs	r0, #15
 800589e:	f7ff fcfb 	bl	8005298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058a2:	f7ff fcd1 	bl	8005248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058b0:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_IncTick+0x20>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	4b06      	ldr	r3, [pc, #24]	@ (80058d0 <HAL_IncTick+0x24>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4413      	add	r3, r2
 80058bc:	4a04      	ldr	r2, [pc, #16]	@ (80058d0 <HAL_IncTick+0x24>)
 80058be:	6013      	str	r3, [r2, #0]
}
 80058c0:	bf00      	nop
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	20000050 	.word	0x20000050
 80058d0:	20000e1c 	.word	0x20000e1c

080058d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return uwTick;
 80058d8:	4b03      	ldr	r3, [pc, #12]	@ (80058e8 <HAL_GetTick+0x14>)
 80058da:	681b      	ldr	r3, [r3, #0]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	20000e1c 	.word	0x20000e1c

080058ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058f4:	f7ff ffee 	bl	80058d4 <HAL_GetTick>
 80058f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005904:	d005      	beq.n	8005912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005906:	4b0a      	ldr	r3, [pc, #40]	@ (8005930 <HAL_Delay+0x44>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	461a      	mov	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4413      	add	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005912:	bf00      	nop
 8005914:	f7ff ffde 	bl	80058d4 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	429a      	cmp	r2, r3
 8005922:	d8f7      	bhi.n	8005914 <HAL_Delay+0x28>
  {
  }
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000050 	.word	0x20000050

08005934 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e031      	b.n	80059ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d109      	bne.n	8005966 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb fab6 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b00      	cmp	r3, #0
 8005970:	d116      	bne.n	80059a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005976:	4b10      	ldr	r3, [pc, #64]	@ (80059b8 <HAL_ADC_Init+0x84>)
 8005978:	4013      	ands	r3, r2
 800597a:	f043 0202 	orr.w	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fad6 	bl	8005f34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	f023 0303 	bic.w	r3, r3, #3
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	641a      	str	r2, [r3, #64]	@ 0x40
 800599e:	e001      	b.n	80059a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	ffffeefd 	.word	0xffffeefd

080059bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_ADC_Start+0x1a>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e0ad      	b.n	8005b32 <HAL_ADC_Start+0x176>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d018      	beq.n	8005a1e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80059fc:	4b50      	ldr	r3, [pc, #320]	@ (8005b40 <HAL_ADC_Start+0x184>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a50      	ldr	r2, [pc, #320]	@ (8005b44 <HAL_ADC_Start+0x188>)
 8005a02:	fba2 2303 	umull	r2, r3, r2, r3
 8005a06:	0c9a      	lsrs	r2, r3, #18
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a10:	e002      	b.n	8005a18 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f9      	bne.n	8005a12 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d175      	bne.n	8005b18 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a30:	4b45      	ldr	r3, [pc, #276]	@ (8005b48 <HAL_ADC_Start+0x18c>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d007      	beq.n	8005a5a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005a52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a66:	d106      	bne.n	8005a76 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6c:	f023 0206 	bic.w	r2, r3, #6
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	645a      	str	r2, [r3, #68]	@ 0x44
 8005a74:	e002      	b.n	8005a7c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005a8c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b4c <HAL_ADC_Start+0x190>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d143      	bne.n	8005b30 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ab6:	609a      	str	r2, [r3, #8]
 8005ab8:	e03a      	b.n	8005b30 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a24      	ldr	r2, [pc, #144]	@ (8005b50 <HAL_ADC_Start+0x194>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10e      	bne.n	8005ae2 <HAL_ADC_Start+0x126>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d107      	bne.n	8005ae2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005ae0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <HAL_ADC_Start+0x190>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d120      	bne.n	8005b30 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a18      	ldr	r2, [pc, #96]	@ (8005b54 <HAL_ADC_Start+0x198>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d11b      	bne.n	8005b30 <HAL_ADC_Start+0x174>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d114      	bne.n	8005b30 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	e00b      	b.n	8005b30 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1c:	f043 0210 	orr.w	r2, r3, #16
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b28:	f043 0201 	orr.w	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000048 	.word	0x20000048
 8005b44:	431bde83 	.word	0x431bde83
 8005b48:	fffff8fe 	.word	0xfffff8fe
 8005b4c:	40012300 	.word	0x40012300
 8005b50:	40012000 	.word	0x40012000
 8005b54:	40012200 	.word	0x40012200

08005b58 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b74:	d113      	bne.n	8005b9e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b84:	d10b      	bne.n	8005b9e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	f043 0220 	orr.w	r2, r3, #32
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e063      	b.n	8005c66 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005b9e:	f7ff fe99 	bl	80058d4 <HAL_GetTick>
 8005ba2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005ba4:	e021      	b.n	8005bea <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bac:	d01d      	beq.n	8005bea <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <HAL_ADC_PollForConversion+0x6c>
 8005bb4:	f7ff fe8e 	bl	80058d4 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d212      	bcs.n	8005bea <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d00b      	beq.n	8005bea <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	f043 0204 	orr.w	r2, r3, #4
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e03d      	b.n	8005c66 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d1d6      	bne.n	8005ba6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0212 	mvn.w	r2, #18
 8005c00:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d123      	bne.n	8005c64 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11f      	bne.n	8005c64 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d111      	bne.n	8005c64 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d105      	bne.n	8005c64 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5c:	f043 0201 	orr.w	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d101      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x1c>
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	e136      	b.n	8005f12 <HAL_ADC_ConfigChannel+0x28a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b09      	cmp	r3, #9
 8005cb2:	d93a      	bls.n	8005d2a <HAL_ADC_ConfigChannel+0xa2>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cbc:	d035      	beq.n	8005d2a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68d9      	ldr	r1, [r3, #12]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	3b1e      	subs	r3, #30
 8005cd4:	2207      	movs	r2, #7
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43da      	mvns	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	400a      	ands	r2, r1
 8005ce2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a8d      	ldr	r2, [pc, #564]	@ (8005f20 <HAL_ADC_ConfigChannel+0x298>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d10a      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68d9      	ldr	r1, [r3, #12]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	061a      	lsls	r2, r3, #24
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d02:	e035      	b.n	8005d70 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68d9      	ldr	r1, [r3, #12]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	4618      	mov	r0, r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	4403      	add	r3, r0
 8005d1c:	3b1e      	subs	r3, #30
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005d28:	e022      	b.n	8005d70 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6919      	ldr	r1, [r3, #16]
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	2207      	movs	r2, #7
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43da      	mvns	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	400a      	ands	r2, r1
 8005d4c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6919      	ldr	r1, [r3, #16]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	4618      	mov	r0, r3
 8005d60:	4603      	mov	r3, r0
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4403      	add	r3, r0
 8005d66:	409a      	lsls	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b06      	cmp	r3, #6
 8005d76:	d824      	bhi.n	8005dc2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	4613      	mov	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	3b05      	subs	r3, #5
 8005d8a:	221f      	movs	r2, #31
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	43da      	mvns	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	400a      	ands	r2, r1
 8005d98:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	4618      	mov	r0, r3
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	3b05      	subs	r3, #5
 8005db4:	fa00 f203 	lsl.w	r2, r0, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	635a      	str	r2, [r3, #52]	@ 0x34
 8005dc0:	e04c      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	2b0c      	cmp	r3, #12
 8005dc8:	d824      	bhi.n	8005e14 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	3b23      	subs	r3, #35	@ 0x23
 8005ddc:	221f      	movs	r2, #31
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	43da      	mvns	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	400a      	ands	r2, r1
 8005dea:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4618      	mov	r0, r3
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	3b23      	subs	r3, #35	@ 0x23
 8005e06:	fa00 f203 	lsl.w	r2, r0, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e12:	e023      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	3b41      	subs	r3, #65	@ 0x41
 8005e26:	221f      	movs	r2, #31
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43da      	mvns	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	400a      	ands	r2, r1
 8005e34:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	4618      	mov	r0, r3
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3b41      	subs	r3, #65	@ 0x41
 8005e50:	fa00 f203 	lsl.w	r2, r0, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a30      	ldr	r2, [pc, #192]	@ (8005f24 <HAL_ADC_ConfigChannel+0x29c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d10a      	bne.n	8005e7c <HAL_ADC_ConfigChannel+0x1f4>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e6e:	d105      	bne.n	8005e7c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005e70:	4b2d      	ldr	r3, [pc, #180]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4a2c      	ldr	r2, [pc, #176]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e76:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005e7a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a28      	ldr	r2, [pc, #160]	@ (8005f24 <HAL_ADC_ConfigChannel+0x29c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10f      	bne.n	8005ea6 <HAL_ADC_ConfigChannel+0x21e>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b12      	cmp	r3, #18
 8005e8c:	d10b      	bne.n	8005ea6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005e8e:	4b26      	ldr	r3, [pc, #152]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4a25      	ldr	r2, [pc, #148]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e94:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e98:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e9a:	4b23      	ldr	r3, [pc, #140]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	4a22      	ldr	r2, [pc, #136]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ea0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005ea4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8005f24 <HAL_ADC_ConfigChannel+0x29c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d12b      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x280>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f20 <HAL_ADC_ConfigChannel+0x298>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d003      	beq.n	8005ec2 <HAL_ADC_ConfigChannel+0x23a>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b11      	cmp	r3, #17
 8005ec0:	d122      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005ec2:	4b19      	ldr	r3, [pc, #100]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4a18      	ldr	r2, [pc, #96]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ec8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005ecc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005ece:	4b16      	ldr	r3, [pc, #88]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	@ (8005f28 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ed4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ed8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a10      	ldr	r2, [pc, #64]	@ (8005f20 <HAL_ADC_ConfigChannel+0x298>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d111      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ee4:	4b11      	ldr	r3, [pc, #68]	@ (8005f2c <HAL_ADC_ConfigChannel+0x2a4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a11      	ldr	r2, [pc, #68]	@ (8005f30 <HAL_ADC_ConfigChannel+0x2a8>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	0c9a      	lsrs	r2, r3, #18
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005efa:	e002      	b.n	8005f02 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f9      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	10000012 	.word	0x10000012
 8005f24:	40012000 	.word	0x40012000
 8005f28:	40012300 	.word	0x40012300
 8005f2c:	20000048 	.word	0x20000048
 8005f30:	431bde83 	.word	0x431bde83

08005f34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005f3c:	4b78      	ldr	r3, [pc, #480]	@ (8006120 <ADC_Init+0x1ec>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4a77      	ldr	r2, [pc, #476]	@ (8006120 <ADC_Init+0x1ec>)
 8005f42:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005f46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005f48:	4b75      	ldr	r3, [pc, #468]	@ (8006120 <ADC_Init+0x1ec>)
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4973      	ldr	r1, [pc, #460]	@ (8006120 <ADC_Init+0x1ec>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6859      	ldr	r1, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	021a      	lsls	r2, r3, #8
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685a      	ldr	r2, [r3, #4]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	6859      	ldr	r1, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6899      	ldr	r1, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	4a58      	ldr	r2, [pc, #352]	@ (8006124 <ADC_Init+0x1f0>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d022      	beq.n	800600e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6899      	ldr	r1, [r3, #8]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6899      	ldr	r1, [r3, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	609a      	str	r2, [r3, #8]
 800600c:	e00f      	b.n	800602e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800601c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800602c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0202 	bic.w	r2, r2, #2
 800603c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6899      	ldr	r1, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	005a      	lsls	r2, r3, #1
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01b      	beq.n	8006094 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800606a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800607a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006086:	3b01      	subs	r3, #1
 8006088:	035a      	lsls	r2, r3, #13
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	e007      	b.n	80060a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80060b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	3b01      	subs	r3, #1
 80060c0:	051a      	lsls	r2, r3, #20
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80060d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6899      	ldr	r1, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060e6:	025a      	lsls	r2, r3, #9
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6899      	ldr	r1, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	029a      	lsls	r2, r3, #10
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	430a      	orrs	r2, r1
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	40012300 	.word	0x40012300
 8006124:	0f000001 	.word	0x0f000001

08006128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006138:	4b0b      	ldr	r3, [pc, #44]	@ (8006168 <__NVIC_SetPriorityGrouping+0x40>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006144:	4013      	ands	r3, r2
 8006146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006150:	4b06      	ldr	r3, [pc, #24]	@ (800616c <__NVIC_SetPriorityGrouping+0x44>)
 8006152:	4313      	orrs	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006156:	4a04      	ldr	r2, [pc, #16]	@ (8006168 <__NVIC_SetPriorityGrouping+0x40>)
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	60d3      	str	r3, [r2, #12]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	e000ed00 	.word	0xe000ed00
 800616c:	05fa0000 	.word	0x05fa0000

08006170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006174:	4b04      	ldr	r3, [pc, #16]	@ (8006188 <__NVIC_GetPriorityGrouping+0x18>)
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	0a1b      	lsrs	r3, r3, #8
 800617a:	f003 0307 	and.w	r3, r3, #7
}
 800617e:	4618      	mov	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	e000ed00 	.word	0xe000ed00

0800618c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	4603      	mov	r3, r0
 8006194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800619a:	2b00      	cmp	r3, #0
 800619c:	db0b      	blt.n	80061b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800619e:	79fb      	ldrb	r3, [r7, #7]
 80061a0:	f003 021f 	and.w	r2, r3, #31
 80061a4:	4907      	ldr	r1, [pc, #28]	@ (80061c4 <__NVIC_EnableIRQ+0x38>)
 80061a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	2001      	movs	r0, #1
 80061ae:	fa00 f202 	lsl.w	r2, r0, r2
 80061b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	e000e100 	.word	0xe000e100

080061c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	6039      	str	r1, [r7, #0]
 80061d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	db0a      	blt.n	80061f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	490c      	ldr	r1, [pc, #48]	@ (8006214 <__NVIC_SetPriority+0x4c>)
 80061e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e6:	0112      	lsls	r2, r2, #4
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	440b      	add	r3, r1
 80061ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061f0:	e00a      	b.n	8006208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	4908      	ldr	r1, [pc, #32]	@ (8006218 <__NVIC_SetPriority+0x50>)
 80061f8:	79fb      	ldrb	r3, [r7, #7]
 80061fa:	f003 030f 	and.w	r3, r3, #15
 80061fe:	3b04      	subs	r3, #4
 8006200:	0112      	lsls	r2, r2, #4
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	440b      	add	r3, r1
 8006206:	761a      	strb	r2, [r3, #24]
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	e000e100 	.word	0xe000e100
 8006218:	e000ed00 	.word	0xe000ed00

0800621c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	@ 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f1c3 0307 	rsb	r3, r3, #7
 8006236:	2b04      	cmp	r3, #4
 8006238:	bf28      	it	cs
 800623a:	2304      	movcs	r3, #4
 800623c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	3304      	adds	r3, #4
 8006242:	2b06      	cmp	r3, #6
 8006244:	d902      	bls.n	800624c <NVIC_EncodePriority+0x30>
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3b03      	subs	r3, #3
 800624a:	e000      	b.n	800624e <NVIC_EncodePriority+0x32>
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006250:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43da      	mvns	r2, r3
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	401a      	ands	r2, r3
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006264:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	fa01 f303 	lsl.w	r3, r1, r3
 800626e:	43d9      	mvns	r1, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006274:	4313      	orrs	r3, r2
         );
}
 8006276:	4618      	mov	r0, r3
 8006278:	3724      	adds	r7, #36	@ 0x24
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7ff ff4c 	bl	8006128 <__NVIC_SetPriorityGrouping>
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80062a6:	2300      	movs	r3, #0
 80062a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062aa:	f7ff ff61 	bl	8006170 <__NVIC_GetPriorityGrouping>
 80062ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	6978      	ldr	r0, [r7, #20]
 80062b6:	f7ff ffb1 	bl	800621c <NVIC_EncodePriority>
 80062ba:	4602      	mov	r2, r0
 80062bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062c0:	4611      	mov	r1, r2
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff ff80 	bl	80061c8 <__NVIC_SetPriority>
}
 80062c8:	bf00      	nop
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80062da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff ff54 	bl	800618c <__NVIC_EnableIRQ>
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062f8:	f7ff faec 	bl	80058d4 <HAL_GetTick>
 80062fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e099      	b.n	800643c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0201 	bic.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006328:	e00f      	b.n	800634a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800632a:	f7ff fad3 	bl	80058d4 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b05      	cmp	r3, #5
 8006336:	d908      	bls.n	800634a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2220      	movs	r2, #32
 800633c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2203      	movs	r2, #3
 8006342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e078      	b.n	800643c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e8      	bne.n	800632a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4b38      	ldr	r3, [pc, #224]	@ (8006444 <HAL_DMA_Init+0x158>)
 8006364:	4013      	ands	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006376:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800638e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d107      	bne.n	80063b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ac:	4313      	orrs	r3, r2
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063da:	2b04      	cmp	r3, #4
 80063dc:	d117      	bne.n	800640e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fae1 	bl	80069b8 <DMA_CheckFifoParam>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d008      	beq.n	800640e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2240      	movs	r2, #64	@ 0x40
 8006400:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800640a:	2301      	movs	r3, #1
 800640c:	e016      	b.n	800643c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fa98 	bl	800694c <DMA_CalcBaseAndBitshift>
 800641c:	4603      	mov	r3, r0
 800641e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006424:	223f      	movs	r2, #63	@ 0x3f
 8006426:	409a      	lsls	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	f010803f 	.word	0xf010803f

08006448 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e050      	b.n	80064fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d101      	bne.n	800646a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
 8006468:	e048      	b.n	80064fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2200      	movs	r2, #0
 8006488:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2200      	movs	r2, #0
 8006498:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2221      	movs	r2, #33	@ 0x21
 80064a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fa4e 	bl	800694c <DMA_CalcBaseAndBitshift>
 80064b0:	4603      	mov	r3, r0
 80064b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b8:	223f      	movs	r2, #63	@ 0x3f
 80064ba:	409a      	lsls	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006522:	2b01      	cmp	r3, #1
 8006524:	d101      	bne.n	800652a <HAL_DMA_Start_IT+0x26>
 8006526:	2302      	movs	r3, #2
 8006528:	e048      	b.n	80065bc <HAL_DMA_Start_IT+0xb8>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2201      	movs	r2, #1
 800652e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d137      	bne.n	80065ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2202      	movs	r2, #2
 8006542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f9cc 	bl	80068f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800655c:	223f      	movs	r2, #63	@ 0x3f
 800655e:	409a      	lsls	r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0216 	orr.w	r2, r2, #22
 8006572:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006582:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0208 	orr.w	r2, r2, #8
 800659a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
 80065ac:	e005      	b.n	80065ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80065b6:	2302      	movs	r3, #2
 80065b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80065d0:	4b8e      	ldr	r3, [pc, #568]	@ (800680c <HAL_DMA_IRQHandler+0x248>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a8e      	ldr	r2, [pc, #568]	@ (8006810 <HAL_DMA_IRQHandler+0x24c>)
 80065d6:	fba2 2303 	umull	r2, r3, r2, r3
 80065da:	0a9b      	lsrs	r3, r3, #10
 80065dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ee:	2208      	movs	r2, #8
 80065f0:	409a      	lsls	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01a      	beq.n	8006630 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0204 	bic.w	r2, r2, #4
 8006616:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800661c:	2208      	movs	r2, #8
 800661e:	409a      	lsls	r2, r3
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006628:	f043 0201 	orr.w	r2, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006634:	2201      	movs	r2, #1
 8006636:	409a      	lsls	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d012      	beq.n	8006666 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006652:	2201      	movs	r2, #1
 8006654:	409a      	lsls	r2, r3
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665e:	f043 0202 	orr.w	r2, r3, #2
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666a:	2204      	movs	r2, #4
 800666c:	409a      	lsls	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d012      	beq.n	800669c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00b      	beq.n	800669c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006688:	2204      	movs	r2, #4
 800668a:	409a      	lsls	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006694:	f043 0204 	orr.w	r2, r3, #4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a0:	2210      	movs	r2, #16
 80066a2:	409a      	lsls	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4013      	ands	r3, r2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d043      	beq.n	8006734 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d03c      	beq.n	8006734 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066be:	2210      	movs	r2, #16
 80066c0:	409a      	lsls	r2, r3
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d018      	beq.n	8006706 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d024      	beq.n	8006734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
 80066f2:	e01f      	b.n	8006734 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01b      	beq.n	8006734 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	4798      	blx	r3
 8006704:	e016      	b.n	8006734 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006710:	2b00      	cmp	r3, #0
 8006712:	d107      	bne.n	8006724 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 0208 	bic.w	r2, r2, #8
 8006722:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006738:	2220      	movs	r2, #32
 800673a:	409a      	lsls	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 808f 	beq.w	8006864 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8087 	beq.w	8006864 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675a:	2220      	movs	r2, #32
 800675c:	409a      	lsls	r2, r3
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b05      	cmp	r3, #5
 800676c:	d136      	bne.n	80067dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0216 	bic.w	r2, r2, #22
 800677c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800678c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <HAL_DMA_IRQHandler+0x1da>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679a:	2b00      	cmp	r3, #0
 800679c:	d007      	beq.n	80067ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0208 	bic.w	r2, r2, #8
 80067ac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b2:	223f      	movs	r2, #63	@ 0x3f
 80067b4:	409a      	lsls	r2, r3
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d07e      	beq.n	80068d0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
        }
        return;
 80067da:	e079      	b.n	80068d0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d01d      	beq.n	8006826 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10d      	bne.n	8006814 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d031      	beq.n	8006864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
 8006808:	e02c      	b.n	8006864 <HAL_DMA_IRQHandler+0x2a0>
 800680a:	bf00      	nop
 800680c:	20000048 	.word	0x20000048
 8006810:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d023      	beq.n	8006864 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	4798      	blx	r3
 8006824:	e01e      	b.n	8006864 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10f      	bne.n	8006854 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0210 	bic.w	r2, r2, #16
 8006842:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006868:	2b00      	cmp	r3, #0
 800686a:	d032      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b00      	cmp	r3, #0
 8006876:	d022      	beq.n	80068be <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2205      	movs	r2, #5
 800687c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0201 	bic.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	3301      	adds	r3, #1
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	429a      	cmp	r2, r3
 800689a:	d307      	bcc.n	80068ac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1f2      	bne.n	8006890 <HAL_DMA_IRQHandler+0x2cc>
 80068aa:	e000      	b.n	80068ae <HAL_DMA_IRQHandler+0x2ea>
          break;
 80068ac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	4798      	blx	r3
 80068ce:	e000      	b.n	80068d2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80068d0:	bf00      	nop
    }
  }
}
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800690c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b40      	cmp	r3, #64	@ 0x40
 800691c:	d108      	bne.n	8006930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800692e:	e007      	b.n	8006940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	60da      	str	r2, [r3, #12]
}
 8006940:	bf00      	nop
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	b2db      	uxtb	r3, r3
 800695a:	3b10      	subs	r3, #16
 800695c:	4a13      	ldr	r2, [pc, #76]	@ (80069ac <DMA_CalcBaseAndBitshift+0x60>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	091b      	lsrs	r3, r3, #4
 8006964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006966:	4a12      	ldr	r2, [pc, #72]	@ (80069b0 <DMA_CalcBaseAndBitshift+0x64>)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d908      	bls.n	800698c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <DMA_CalcBaseAndBitshift+0x68>)
 8006982:	4013      	ands	r3, r2
 8006984:	1d1a      	adds	r2, r3, #4
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	659a      	str	r2, [r3, #88]	@ 0x58
 800698a:	e006      	b.n	800699a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	4b08      	ldr	r3, [pc, #32]	@ (80069b4 <DMA_CalcBaseAndBitshift+0x68>)
 8006994:	4013      	ands	r3, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	aaaaaaab 	.word	0xaaaaaaab
 80069b0:	0801f7dc 	.word	0x0801f7dc
 80069b4:	fffffc00 	.word	0xfffffc00

080069b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d11f      	bne.n	8006a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d856      	bhi.n	8006a86 <DMA_CheckFifoParam+0xce>
 80069d8:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <DMA_CheckFifoParam+0x28>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	08006a03 	.word	0x08006a03
 80069e8:	080069f1 	.word	0x080069f1
 80069ec:	08006a87 	.word	0x08006a87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d046      	beq.n	8006a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a00:	e043      	b.n	8006a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a0a:	d140      	bne.n	8006a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a10:	e03d      	b.n	8006a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a1a:	d121      	bne.n	8006a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d837      	bhi.n	8006a92 <DMA_CheckFifoParam+0xda>
 8006a22:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <DMA_CheckFifoParam+0x70>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a39 	.word	0x08006a39
 8006a2c:	08006a3f 	.word	0x08006a3f
 8006a30:	08006a39 	.word	0x08006a39
 8006a34:	08006a51 	.word	0x08006a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3c:	e030      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d025      	beq.n	8006a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a4e:	e022      	b.n	8006a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006a58:	d11f      	bne.n	8006a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a5e:	e01c      	b.n	8006a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d903      	bls.n	8006a6e <DMA_CheckFifoParam+0xb6>
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d003      	beq.n	8006a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a6c:	e018      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	73fb      	strb	r3, [r7, #15]
      break;
 8006a72:	e015      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00e      	beq.n	8006a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
      break;
 8006a84:	e00b      	b.n	8006a9e <DMA_CheckFifoParam+0xe6>
      break;
 8006a86:	bf00      	nop
 8006a88:	e00a      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8006a8a:	bf00      	nop
 8006a8c:	e008      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8006a8e:	bf00      	nop
 8006a90:	e006      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8006a92:	bf00      	nop
 8006a94:	e004      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8006a96:	bf00      	nop
 8006a98:	e002      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a9a:	bf00      	nop
 8006a9c:	e000      	b.n	8006aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8006a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop

08006ab0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e039      	b.n	8006b36 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fa faca 	bl	8001070 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b00:	f023 0107 	bic.w	r1, r3, #7
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b16:	4b0a      	ldr	r3, [pc, #40]	@ (8006b40 <HAL_DMA2D_Init+0x90>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68d1      	ldr	r1, [r2, #12]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6812      	ldr	r2, [r2, #0]
 8006b22:	430b      	orrs	r3, r1
 8006b24:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	ffffc000 	.word	0xffffc000

08006b44 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af02      	add	r7, sp, #8
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_DMA2D_Start+0x1c>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e018      	b.n	8006b92 <HAL_DMA2D_Start+0x4e>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fa98 	bl	80070b0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d056      	beq.n	8006c64 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bb6:	f7fe fe8d 	bl	80058d4 <HAL_GetTick>
 8006bba:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006bbc:	e04b      	b.n	8006c56 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d023      	beq.n	8006c18 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bde:	f043 0202 	orr.w	r2, r3, #2
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d005      	beq.n	8006bfc <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf4:	f043 0201 	orr.w	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2221      	movs	r2, #33	@ 0x21
 8006c02:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2204      	movs	r2, #4
 8006c08:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e0a5      	b.n	8006d64 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c1e:	d01a      	beq.n	8006c56 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c20:	f7fe fe58 	bl	80058d4 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d302      	bcc.n	8006c36 <HAL_DMA2D_PollForTransfer+0x9c>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10f      	bne.n	8006c56 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3a:	f043 0220 	orr.w	r2, r3, #32
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2203      	movs	r2, #3
 8006c46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e086      	b.n	8006d64 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0ac      	beq.n	8006bbe <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f003 0320 	and.w	r3, r3, #32
 8006c6e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c76:	f003 0320 	and.w	r3, r3, #32
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d061      	beq.n	8006d4a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c86:	f7fe fe25 	bl	80058d4 <HAL_GetTick>
 8006c8a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006c8c:	e056      	b.n	8006d3c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d02e      	beq.n	8006cfe <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 0308 	and.w	r3, r3, #8
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cae:	f043 0204 	orr.w	r2, r3, #4
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f003 0320 	and.w	r3, r3, #32
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc4:	f043 0202 	orr.w	r2, r3, #2
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cda:	f043 0201 	orr.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2229      	movs	r2, #41	@ 0x29
 8006ce8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2204      	movs	r2, #4
 8006cee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e032      	b.n	8006d64 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d04:	d01a      	beq.n	8006d3c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d06:	f7fe fde5 	bl	80058d4 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d302      	bcc.n	8006d1c <HAL_DMA2D_PollForTransfer+0x182>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10f      	bne.n	8006d3c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e013      	b.n	8006d64 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f003 0310 	and.w	r3, r3, #16
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0a1      	beq.n	8006c8e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2212      	movs	r2, #18
 8006d50:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d026      	beq.n	8006ddc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d021      	beq.n	8006ddc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006da6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2201      	movs	r2, #1
 8006dba:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2204      	movs	r2, #4
 8006dc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0320 	and.w	r3, r3, #32
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d026      	beq.n	8006e34 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d021      	beq.n	8006e34 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dfe:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2220      	movs	r2, #32
 8006e06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0c:	f043 0202 	orr.w	r2, r3, #2
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2204      	movs	r2, #4
 8006e18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d026      	beq.n	8006e8c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d021      	beq.n	8006e8c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2208      	movs	r2, #8
 8006e5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e64:	f043 0204 	orr.w	r2, r3, #4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d003      	beq.n	8006e8c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d013      	beq.n	8006ebe <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00e      	beq.n	8006ebe <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006eae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2204      	movs	r2, #4
 8006eb6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f853 	bl	8006f64 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d024      	beq.n	8006f12 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01f      	beq.n	8006f12 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006ee0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01f      	beq.n	8006f5c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d01a      	beq.n	8006f5c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f34:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2210      	movs	r2, #16
 8006f3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f80e 	bl	8006f78 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006f5c:	bf00      	nop
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_DMA2D_ConfigLayer+0x20>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e079      	b.n	80070a0 <HAL_DMA2D_ConfigLayer+0x114>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	3318      	adds	r3, #24
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006fd6:	4b35      	ldr	r3, [pc, #212]	@ (80070ac <HAL_DMA2D_ConfigLayer+0x120>)
 8006fd8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b0a      	cmp	r3, #10
 8006fe0:	d003      	beq.n	8006fea <HAL_DMA2D_ConfigLayer+0x5e>
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b09      	cmp	r3, #9
 8006fe8:	d107      	bne.n	8006ffa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e005      	b.n	8007006 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	061b      	lsls	r3, r3, #24
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d120      	bne.n	800704e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	43db      	mvns	r3, r3
 8007016:	ea02 0103 	and.w	r1, r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	430a      	orrs	r2, r1
 8007022:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	6812      	ldr	r2, [r2, #0]
 800702c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b0a      	cmp	r3, #10
 8007034:	d003      	beq.n	800703e <HAL_DMA2D_ConfigLayer+0xb2>
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2b09      	cmp	r3, #9
 800703c:	d127      	bne.n	800708e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800704a:	629a      	str	r2, [r3, #40]	@ 0x28
 800704c:	e01f      	b.n	800708e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	43db      	mvns	r3, r3
 8007058:	ea02 0103 	and.w	r1, r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	430a      	orrs	r2, r1
 8007064:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	6812      	ldr	r2, [r2, #0]
 800706e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2b0a      	cmp	r3, #10
 8007076:	d003      	beq.n	8007080 <HAL_DMA2D_ConfigLayer+0xf4>
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b09      	cmp	r3, #9
 800707e:	d106      	bne.n	800708e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800708c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	371c      	adds	r7, #28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	ff03000f 	.word	0xff03000f

080070b0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b08b      	sub	sp, #44	@ 0x2c
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070c4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	041a      	lsls	r2, r3, #16
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	431a      	orrs	r2, r3
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070e8:	d174      	bne.n	80071d4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80070f0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070f8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007100:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d108      	bne.n	8007122 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	431a      	orrs	r2, r3
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	4313      	orrs	r3, r2
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007120:	e053      	b.n	80071ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d106      	bne.n	8007138 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4313      	orrs	r3, r2
 8007130:	697a      	ldr	r2, [r7, #20]
 8007132:	4313      	orrs	r3, r2
 8007134:	627b      	str	r3, [r7, #36]	@ 0x24
 8007136:	e048      	b.n	80071ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d111      	bne.n	8007164 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	0cdb      	lsrs	r3, r3, #19
 8007144:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	0a9b      	lsrs	r3, r3, #10
 800714a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	08db      	lsrs	r3, r3, #3
 8007150:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	02db      	lsls	r3, r3, #11
 800715a:	4313      	orrs	r3, r2
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
 8007162:	e032      	b.n	80071ca <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	2b03      	cmp	r3, #3
 800716a:	d117      	bne.n	800719c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	0fdb      	lsrs	r3, r3, #31
 8007170:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	0cdb      	lsrs	r3, r3, #19
 8007176:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	0adb      	lsrs	r3, r3, #11
 800717c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	029b      	lsls	r3, r3, #10
 800718c:	431a      	orrs	r2, r3
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	03db      	lsls	r3, r3, #15
 8007192:	4313      	orrs	r3, r2
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
 800719a:	e016      	b.n	80071ca <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	0f1b      	lsrs	r3, r3, #28
 80071a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	0d1b      	lsrs	r3, r3, #20
 80071a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	0b1b      	lsrs	r3, r3, #12
 80071ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	011a      	lsls	r2, r3, #4
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	021b      	lsls	r3, r3, #8
 80071bc:	431a      	orrs	r2, r3
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	031b      	lsls	r3, r3, #12
 80071c2:	4313      	orrs	r3, r2
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071d0:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80071d2:	e003      	b.n	80071dc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	60da      	str	r2, [r3, #12]
}
 80071dc:	bf00      	nop
 80071de:	372c      	adds	r7, #44	@ 0x2c
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b089      	sub	sp, #36	@ 0x24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80071fa:	2300      	movs	r3, #0
 80071fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80071fe:	2300      	movs	r3, #0
 8007200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8007202:	2300      	movs	r3, #0
 8007204:	61fb      	str	r3, [r7, #28]
 8007206:	e175      	b.n	80074f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007208:	2201      	movs	r2, #1
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	fa02 f303 	lsl.w	r3, r2, r3
 8007210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	429a      	cmp	r2, r3
 8007222:	f040 8164 	bne.w	80074ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f003 0303 	and.w	r3, r3, #3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d005      	beq.n	800723e <HAL_GPIO_Init+0x56>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d130      	bne.n	80072a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	005b      	lsls	r3, r3, #1
 8007248:	2203      	movs	r2, #3
 800724a:	fa02 f303 	lsl.w	r3, r2, r3
 800724e:	43db      	mvns	r3, r3
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	4013      	ands	r3, r2
 8007254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	4313      	orrs	r3, r2
 8007266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007274:	2201      	movs	r2, #1
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	fa02 f303 	lsl.w	r3, r2, r3
 800727c:	43db      	mvns	r3, r3
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	4013      	ands	r3, r2
 8007282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	091b      	lsrs	r3, r3, #4
 800728a:	f003 0201 	and.w	r2, r3, #1
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	fa02 f303 	lsl.w	r3, r2, r3
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	4313      	orrs	r3, r2
 8007298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d017      	beq.n	80072dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	2203      	movs	r2, #3
 80072b8:	fa02 f303 	lsl.w	r3, r2, r3
 80072bc:	43db      	mvns	r3, r3
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	4013      	ands	r3, r2
 80072c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	fa02 f303 	lsl.w	r3, r2, r3
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f003 0303 	and.w	r3, r3, #3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d123      	bne.n	8007330 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	08da      	lsrs	r2, r3, #3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3208      	adds	r2, #8
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	220f      	movs	r2, #15
 8007300:	fa02 f303 	lsl.w	r3, r2, r3
 8007304:	43db      	mvns	r3, r3
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	4013      	ands	r3, r2
 800730a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	fa02 f303 	lsl.w	r3, r2, r3
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	4313      	orrs	r3, r2
 8007320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	08da      	lsrs	r2, r3, #3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3208      	adds	r2, #8
 800732a:	69b9      	ldr	r1, [r7, #24]
 800732c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	2203      	movs	r2, #3
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	43db      	mvns	r3, r3
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	4013      	ands	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f003 0203 	and.w	r2, r3, #3
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	fa02 f303 	lsl.w	r3, r2, r3
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	4313      	orrs	r3, r2
 800735c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800736c:	2b00      	cmp	r3, #0
 800736e:	f000 80be 	beq.w	80074ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007372:	4b66      	ldr	r3, [pc, #408]	@ (800750c <HAL_GPIO_Init+0x324>)
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	4a65      	ldr	r2, [pc, #404]	@ (800750c <HAL_GPIO_Init+0x324>)
 8007378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800737c:	6453      	str	r3, [r2, #68]	@ 0x44
 800737e:	4b63      	ldr	r3, [pc, #396]	@ (800750c <HAL_GPIO_Init+0x324>)
 8007380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800738a:	4a61      	ldr	r2, [pc, #388]	@ (8007510 <HAL_GPIO_Init+0x328>)
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	089b      	lsrs	r3, r3, #2
 8007390:	3302      	adds	r3, #2
 8007392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007396:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	220f      	movs	r2, #15
 80073a2:	fa02 f303 	lsl.w	r3, r2, r3
 80073a6:	43db      	mvns	r3, r3
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	4013      	ands	r3, r2
 80073ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a58      	ldr	r2, [pc, #352]	@ (8007514 <HAL_GPIO_Init+0x32c>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d037      	beq.n	8007426 <HAL_GPIO_Init+0x23e>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a57      	ldr	r2, [pc, #348]	@ (8007518 <HAL_GPIO_Init+0x330>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d031      	beq.n	8007422 <HAL_GPIO_Init+0x23a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a56      	ldr	r2, [pc, #344]	@ (800751c <HAL_GPIO_Init+0x334>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d02b      	beq.n	800741e <HAL_GPIO_Init+0x236>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a55      	ldr	r2, [pc, #340]	@ (8007520 <HAL_GPIO_Init+0x338>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d025      	beq.n	800741a <HAL_GPIO_Init+0x232>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a54      	ldr	r2, [pc, #336]	@ (8007524 <HAL_GPIO_Init+0x33c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d01f      	beq.n	8007416 <HAL_GPIO_Init+0x22e>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a53      	ldr	r2, [pc, #332]	@ (8007528 <HAL_GPIO_Init+0x340>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d019      	beq.n	8007412 <HAL_GPIO_Init+0x22a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a52      	ldr	r2, [pc, #328]	@ (800752c <HAL_GPIO_Init+0x344>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <HAL_GPIO_Init+0x226>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a51      	ldr	r2, [pc, #324]	@ (8007530 <HAL_GPIO_Init+0x348>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00d      	beq.n	800740a <HAL_GPIO_Init+0x222>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a50      	ldr	r2, [pc, #320]	@ (8007534 <HAL_GPIO_Init+0x34c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d007      	beq.n	8007406 <HAL_GPIO_Init+0x21e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a4f      	ldr	r2, [pc, #316]	@ (8007538 <HAL_GPIO_Init+0x350>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d101      	bne.n	8007402 <HAL_GPIO_Init+0x21a>
 80073fe:	2309      	movs	r3, #9
 8007400:	e012      	b.n	8007428 <HAL_GPIO_Init+0x240>
 8007402:	230a      	movs	r3, #10
 8007404:	e010      	b.n	8007428 <HAL_GPIO_Init+0x240>
 8007406:	2308      	movs	r3, #8
 8007408:	e00e      	b.n	8007428 <HAL_GPIO_Init+0x240>
 800740a:	2307      	movs	r3, #7
 800740c:	e00c      	b.n	8007428 <HAL_GPIO_Init+0x240>
 800740e:	2306      	movs	r3, #6
 8007410:	e00a      	b.n	8007428 <HAL_GPIO_Init+0x240>
 8007412:	2305      	movs	r3, #5
 8007414:	e008      	b.n	8007428 <HAL_GPIO_Init+0x240>
 8007416:	2304      	movs	r3, #4
 8007418:	e006      	b.n	8007428 <HAL_GPIO_Init+0x240>
 800741a:	2303      	movs	r3, #3
 800741c:	e004      	b.n	8007428 <HAL_GPIO_Init+0x240>
 800741e:	2302      	movs	r3, #2
 8007420:	e002      	b.n	8007428 <HAL_GPIO_Init+0x240>
 8007422:	2301      	movs	r3, #1
 8007424:	e000      	b.n	8007428 <HAL_GPIO_Init+0x240>
 8007426:	2300      	movs	r3, #0
 8007428:	69fa      	ldr	r2, [r7, #28]
 800742a:	f002 0203 	and.w	r2, r2, #3
 800742e:	0092      	lsls	r2, r2, #2
 8007430:	4093      	lsls	r3, r2
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	4313      	orrs	r3, r2
 8007436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007438:	4935      	ldr	r1, [pc, #212]	@ (8007510 <HAL_GPIO_Init+0x328>)
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	089b      	lsrs	r3, r3, #2
 800743e:	3302      	adds	r3, #2
 8007440:	69ba      	ldr	r2, [r7, #24]
 8007442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007446:	4b3d      	ldr	r3, [pc, #244]	@ (800753c <HAL_GPIO_Init+0x354>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	43db      	mvns	r3, r3
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	4013      	ands	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800746a:	4a34      	ldr	r2, [pc, #208]	@ (800753c <HAL_GPIO_Init+0x354>)
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007470:	4b32      	ldr	r3, [pc, #200]	@ (800753c <HAL_GPIO_Init+0x354>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	43db      	mvns	r3, r3
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	4013      	ands	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007494:	4a29      	ldr	r2, [pc, #164]	@ (800753c <HAL_GPIO_Init+0x354>)
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800749a:	4b28      	ldr	r3, [pc, #160]	@ (800753c <HAL_GPIO_Init+0x354>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	43db      	mvns	r3, r3
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	4013      	ands	r3, r2
 80074a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074be:	4a1f      	ldr	r2, [pc, #124]	@ (800753c <HAL_GPIO_Init+0x354>)
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074c4:	4b1d      	ldr	r3, [pc, #116]	@ (800753c <HAL_GPIO_Init+0x354>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4013      	ands	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074e8:	4a14      	ldr	r2, [pc, #80]	@ (800753c <HAL_GPIO_Init+0x354>)
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	3301      	adds	r3, #1
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	2b0f      	cmp	r3, #15
 80074f8:	f67f ae86 	bls.w	8007208 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80074fc:	bf00      	nop
 80074fe:	bf00      	nop
 8007500:	3724      	adds	r7, #36	@ 0x24
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	40023800 	.word	0x40023800
 8007510:	40013800 	.word	0x40013800
 8007514:	40020000 	.word	0x40020000
 8007518:	40020400 	.word	0x40020400
 800751c:	40020800 	.word	0x40020800
 8007520:	40020c00 	.word	0x40020c00
 8007524:	40021000 	.word	0x40021000
 8007528:	40021400 	.word	0x40021400
 800752c:	40021800 	.word	0x40021800
 8007530:	40021c00 	.word	0x40021c00
 8007534:	40022000 	.word	0x40022000
 8007538:	40022400 	.word	0x40022400
 800753c:	40013c00 	.word	0x40013c00

08007540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	887b      	ldrh	r3, [r7, #2]
 8007552:	4013      	ands	r3, r2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	e001      	b.n	8007562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	807b      	strh	r3, [r7, #2]
 800757c:	4613      	mov	r3, r2
 800757e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007580:	787b      	ldrb	r3, [r7, #1]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007586:	887a      	ldrh	r2, [r7, #2]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800758c:	e003      	b.n	8007596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800758e:	887b      	ldrh	r3, [r7, #2]
 8007590:	041a      	lsls	r2, r3, #16
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	619a      	str	r2, [r3, #24]
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e07f      	b.n	80076b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f8a9 	bl	8007722 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2224      	movs	r2, #36	@ 0x24
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80075f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007604:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d107      	bne.n	800761e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800761a:	609a      	str	r2, [r3, #8]
 800761c:	e006      	b.n	800762c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800762a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d104      	bne.n	800763e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800763c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6859      	ldr	r1, [r3, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	4b1d      	ldr	r3, [pc, #116]	@ (80076c0 <HAL_I2C_Init+0x11c>)
 800764a:	430b      	orrs	r3, r1
 800764c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800765c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69d9      	ldr	r1, [r3, #28]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	430a      	orrs	r2, r1
 8007686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f042 0201 	orr.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	02008000 	.word	0x02008000

080076c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e021      	b.n	800771a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2224      	movs	r2, #36	@ 0x24
 80076da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0201 	bic.w	r2, r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f821 	bl	8007736 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800772a:	bf00      	nop
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
	...

0800774c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af02      	add	r7, sp, #8
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	4608      	mov	r0, r1
 8007756:	4611      	mov	r1, r2
 8007758:	461a      	mov	r2, r3
 800775a:	4603      	mov	r3, r0
 800775c:	817b      	strh	r3, [r7, #10]
 800775e:	460b      	mov	r3, r1
 8007760:	813b      	strh	r3, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b20      	cmp	r3, #32
 8007770:	f040 80f9 	bne.w	8007966 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <HAL_I2C_Mem_Write+0x34>
 800777a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	d105      	bne.n	800778c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007786:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e0ed      	b.n	8007968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007792:	2b01      	cmp	r3, #1
 8007794:	d101      	bne.n	800779a <HAL_I2C_Mem_Write+0x4e>
 8007796:	2302      	movs	r3, #2
 8007798:	e0e6      	b.n	8007968 <HAL_I2C_Mem_Write+0x21c>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077a2:	f7fe f897 	bl	80058d4 <HAL_GetTick>
 80077a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	2319      	movs	r3, #25
 80077ae:	2201      	movs	r2, #1
 80077b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fad1 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e0d1      	b.n	8007968 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2221      	movs	r2, #33	@ 0x21
 80077c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2240      	movs	r2, #64	@ 0x40
 80077d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a3a      	ldr	r2, [r7, #32]
 80077de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80077e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077ec:	88f8      	ldrh	r0, [r7, #6]
 80077ee:	893a      	ldrh	r2, [r7, #8]
 80077f0:	8979      	ldrh	r1, [r7, #10]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4603      	mov	r3, r0
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f9e1 	bl	8007bc4 <I2C_RequestMemoryWrite>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e0a9      	b.n	8007968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007818:	b29b      	uxth	r3, r3
 800781a:	2bff      	cmp	r3, #255	@ 0xff
 800781c:	d90e      	bls.n	800783c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	22ff      	movs	r2, #255	@ 0xff
 8007822:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007828:	b2da      	uxtb	r2, r3
 800782a:	8979      	ldrh	r1, [r7, #10]
 800782c:	2300      	movs	r3, #0
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fc2d 	bl	8008094 <I2C_TransferConfig>
 800783a:	e00f      	b.n	800785c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800784a:	b2da      	uxtb	r2, r3
 800784c:	8979      	ldrh	r1, [r7, #10]
 800784e:	2300      	movs	r3, #0
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fc1c 	bl	8008094 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fabb 	bl	8007ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e07b      	b.n	8007968 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	781a      	ldrb	r2, [r3, #0]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007898:	3b01      	subs	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d034      	beq.n	8007914 <HAL_I2C_Mem_Write+0x1c8>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d130      	bne.n	8007914 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b8:	2200      	movs	r2, #0
 80078ba:	2180      	movs	r1, #128	@ 0x80
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fa4d 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e04d      	b.n	8007968 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	2bff      	cmp	r3, #255	@ 0xff
 80078d4:	d90e      	bls.n	80078f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	22ff      	movs	r2, #255	@ 0xff
 80078da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	8979      	ldrh	r1, [r7, #10]
 80078e4:	2300      	movs	r3, #0
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f000 fbd1 	bl	8008094 <I2C_TransferConfig>
 80078f2:	e00f      	b.n	8007914 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007902:	b2da      	uxtb	r2, r3
 8007904:	8979      	ldrh	r1, [r7, #10]
 8007906:	2300      	movs	r3, #0
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fbc0 	bl	8008094 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d19e      	bne.n	800785c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fa9a 	bl	8007e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e01a      	b.n	8007968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2220      	movs	r2, #32
 8007938:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6859      	ldr	r1, [r3, #4]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	4b0a      	ldr	r3, [pc, #40]	@ (8007970 <HAL_I2C_Mem_Write+0x224>)
 8007946:	400b      	ands	r3, r1
 8007948:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007962:	2300      	movs	r3, #0
 8007964:	e000      	b.n	8007968 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007966:	2302      	movs	r3, #2
  }
}
 8007968:	4618      	mov	r0, r3
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	fe00e800 	.word	0xfe00e800

08007974 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af02      	add	r7, sp, #8
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	4608      	mov	r0, r1
 800797e:	4611      	mov	r1, r2
 8007980:	461a      	mov	r2, r3
 8007982:	4603      	mov	r3, r0
 8007984:	817b      	strh	r3, [r7, #10]
 8007986:	460b      	mov	r3, r1
 8007988:	813b      	strh	r3, [r7, #8]
 800798a:	4613      	mov	r3, r2
 800798c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b20      	cmp	r3, #32
 8007998:	f040 80fd 	bne.w	8007b96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_I2C_Mem_Read+0x34>
 80079a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d105      	bne.n	80079b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e0f1      	b.n	8007b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_I2C_Mem_Read+0x4e>
 80079be:	2302      	movs	r3, #2
 80079c0:	e0ea      	b.n	8007b98 <HAL_I2C_Mem_Read+0x224>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079ca:	f7fd ff83 	bl	80058d4 <HAL_GetTick>
 80079ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	2319      	movs	r3, #25
 80079d6:	2201      	movs	r2, #1
 80079d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f9bd 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0d5      	b.n	8007b98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2222      	movs	r2, #34	@ 0x22
 80079f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2240      	movs	r2, #64	@ 0x40
 80079f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a3a      	ldr	r2, [r7, #32]
 8007a06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a14:	88f8      	ldrh	r0, [r7, #6]
 8007a16:	893a      	ldrh	r2, [r7, #8]
 8007a18:	8979      	ldrh	r1, [r7, #10]
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	4603      	mov	r3, r0
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f921 	bl	8007c6c <I2C_RequestMemoryRead>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e0ad      	b.n	8007b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	2bff      	cmp	r3, #255	@ 0xff
 8007a44:	d90e      	bls.n	8007a64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	22ff      	movs	r2, #255	@ 0xff
 8007a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	8979      	ldrh	r1, [r7, #10]
 8007a54:	4b52      	ldr	r3, [pc, #328]	@ (8007ba0 <HAL_I2C_Mem_Read+0x22c>)
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fb19 	bl	8008094 <I2C_TransferConfig>
 8007a62:	e00f      	b.n	8007a84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	8979      	ldrh	r1, [r7, #10]
 8007a76:	4b4a      	ldr	r3, [pc, #296]	@ (8007ba0 <HAL_I2C_Mem_Read+0x22c>)
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fb08 	bl	8008094 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2104      	movs	r1, #4
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f964 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e07c      	b.n	8007b98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007aba:	3b01      	subs	r3, #1
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d034      	beq.n	8007b44 <HAL_I2C_Mem_Read+0x1d0>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d130      	bne.n	8007b44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	2200      	movs	r2, #0
 8007aea:	2180      	movs	r1, #128	@ 0x80
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f935 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e04d      	b.n	8007b98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2bff      	cmp	r3, #255	@ 0xff
 8007b04:	d90e      	bls.n	8007b24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	22ff      	movs	r2, #255	@ 0xff
 8007b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	8979      	ldrh	r1, [r7, #10]
 8007b14:	2300      	movs	r3, #0
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 fab9 	bl	8008094 <I2C_TransferConfig>
 8007b22:	e00f      	b.n	8007b44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	8979      	ldrh	r1, [r7, #10]
 8007b36:	2300      	movs	r3, #0
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 faa8 	bl	8008094 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d19a      	bne.n	8007a84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f982 	bl	8007e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e01a      	b.n	8007b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2220      	movs	r2, #32
 8007b68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6859      	ldr	r1, [r3, #4]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba4 <HAL_I2C_Mem_Read+0x230>)
 8007b76:	400b      	ands	r3, r1
 8007b78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	e000      	b.n	8007b98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007b96:	2302      	movs	r3, #2
  }
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	80002400 	.word	0x80002400
 8007ba4:	fe00e800 	.word	0xfe00e800

08007ba8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bb6:	b2db      	uxtb	r3, r3
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	4608      	mov	r0, r1
 8007bce:	4611      	mov	r1, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	817b      	strh	r3, [r7, #10]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	813b      	strh	r3, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	8979      	ldrh	r1, [r7, #10]
 8007be4:	4b20      	ldr	r3, [pc, #128]	@ (8007c68 <I2C_RequestMemoryWrite+0xa4>)
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f000 fa51 	bl	8008094 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	69b9      	ldr	r1, [r7, #24]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f8f0 	bl	8007ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e02c      	b.n	8007c60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d105      	bne.n	8007c18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c0c:	893b      	ldrh	r3, [r7, #8]
 8007c0e:	b2da      	uxtb	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c16:	e015      	b.n	8007c44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c18:	893b      	ldrh	r3, [r7, #8]
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	69b9      	ldr	r1, [r7, #24]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 f8d6 	bl	8007ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	e012      	b.n	8007c60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c3a:	893b      	ldrh	r3, [r7, #8]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2180      	movs	r1, #128	@ 0x80
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f884 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e000      	b.n	8007c60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	80002000 	.word	0x80002000

08007c6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	4608      	mov	r0, r1
 8007c76:	4611      	mov	r1, r2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	817b      	strh	r3, [r7, #10]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	813b      	strh	r3, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	8979      	ldrh	r1, [r7, #10]
 8007c8c:	4b20      	ldr	r3, [pc, #128]	@ (8007d10 <I2C_RequestMemoryRead+0xa4>)
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	2300      	movs	r3, #0
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f9fe 	bl	8008094 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	69b9      	ldr	r1, [r7, #24]
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f89d 	bl	8007ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d001      	beq.n	8007cac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e02c      	b.n	8007d06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d105      	bne.n	8007cbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007cb2:	893b      	ldrh	r3, [r7, #8]
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cbc:	e015      	b.n	8007cea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007cbe:	893b      	ldrh	r3, [r7, #8]
 8007cc0:	0a1b      	lsrs	r3, r3, #8
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	69b9      	ldr	r1, [r7, #24]
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f000 f883 	bl	8007ddc <I2C_WaitOnTXISFlagUntilTimeout>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e012      	b.n	8007d06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ce0:	893b      	ldrh	r3, [r7, #8]
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	9300      	str	r3, [sp, #0]
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2140      	movs	r1, #64	@ 0x40
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f000 f831 	bl	8007d5c <I2C_WaitOnFlagUntilTimeout>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e000      	b.n	8007d06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	80002000 	.word	0x80002000

08007d14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d103      	bne.n	8007d32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d007      	beq.n	8007d50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0201 	orr.w	r2, r2, #1
 8007d4e:	619a      	str	r2, [r3, #24]
  }
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d6c:	e022      	b.n	8007db4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d74:	d01e      	beq.n	8007db4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d76:	f7fd fdad 	bl	80058d4 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d113      	bne.n	8007db4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d90:	f043 0220 	orr.w	r2, r3, #32
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2220      	movs	r2, #32
 8007d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e00f      	b.n	8007dd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	bf0c      	ite	eq
 8007dc4:	2301      	moveq	r3, #1
 8007dc6:	2300      	movne	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	79fb      	ldrb	r3, [r7, #7]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d0cd      	beq.n	8007d6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007de8:	e02c      	b.n	8007e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f000 f870 	bl	8007ed4 <I2C_IsErrorOccurred>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e02a      	b.n	8007e54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e04:	d01e      	beq.n	8007e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e06:	f7fd fd65 	bl	80058d4 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d302      	bcc.n	8007e1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d113      	bne.n	8007e44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e20:	f043 0220 	orr.w	r2, r3, #32
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2220      	movs	r2, #32
 8007e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e007      	b.n	8007e54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	699b      	ldr	r3, [r3, #24]
 8007e4a:	f003 0302 	and.w	r3, r3, #2
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d1cb      	bne.n	8007dea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e68:	e028      	b.n	8007ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f830 	bl	8007ed4 <I2C_IsErrorOccurred>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e026      	b.n	8007ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e7e:	f7fd fd29 	bl	80058d4 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d302      	bcc.n	8007e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d113      	bne.n	8007ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e98:	f043 0220 	orr.w	r2, r3, #32
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e007      	b.n	8007ecc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	f003 0320 	and.w	r3, r3, #32
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d1cf      	bne.n	8007e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b08a      	sub	sp, #40	@ 0x28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d068      	beq.n	8007fd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2210      	movs	r2, #16
 8007f06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f08:	e049      	b.n	8007f9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f10:	d045      	beq.n	8007f9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007f12:	f7fd fcdf 	bl	80058d4 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d302      	bcc.n	8007f28 <I2C_IsErrorOccurred+0x54>
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d13a      	bne.n	8007f9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f4a:	d121      	bne.n	8007f90 <I2C_IsErrorOccurred+0xbc>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f52:	d01d      	beq.n	8007f90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007f54:	7cfb      	ldrb	r3, [r7, #19]
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d01a      	beq.n	8007f90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f6a:	f7fd fcb3 	bl	80058d4 <HAL_GetTick>
 8007f6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f70:	e00e      	b.n	8007f90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f72:	f7fd fcaf 	bl	80058d4 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b19      	cmp	r3, #25
 8007f7e:	d907      	bls.n	8007f90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	f043 0320 	orr.w	r3, r3, #32
 8007f86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007f8e:	e006      	b.n	8007f9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d1e9      	bne.n	8007f72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f003 0320 	and.w	r3, r3, #32
 8007fa8:	2b20      	cmp	r3, #32
 8007faa:	d003      	beq.n	8007fb4 <I2C_IsErrorOccurred+0xe0>
 8007fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0aa      	beq.n	8007f0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d103      	bne.n	8007fc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2220      	movs	r2, #32
 8007fc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	f043 0304 	orr.w	r3, r3, #4
 8007fca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	f043 0301 	orr.w	r3, r3, #1
 8007fea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	f043 0308 	orr.w	r3, r3, #8
 800800c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008016:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00b      	beq.n	8008040 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	f043 0302 	orr.w	r3, r3, #2
 800802e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008038:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01c      	beq.n	8008082 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f7ff fe63 	bl	8007d14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	6859      	ldr	r1, [r3, #4]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	4b0d      	ldr	r3, [pc, #52]	@ (8008090 <I2C_IsErrorOccurred+0x1bc>)
 800805a:	400b      	ands	r3, r1
 800805c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	431a      	orrs	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2220      	movs	r2, #32
 800806e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008082:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008086:	4618      	mov	r0, r3
 8008088:	3728      	adds	r7, #40	@ 0x28
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	fe00e800 	.word	0xfe00e800

08008094 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	607b      	str	r3, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	817b      	strh	r3, [r7, #10]
 80080a2:	4613      	mov	r3, r2
 80080a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080a6:	897b      	ldrh	r3, [r7, #10]
 80080a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080ac:	7a7b      	ldrb	r3, [r7, #9]
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	4313      	orrs	r3, r2
 80080be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	0d5b      	lsrs	r3, r3, #21
 80080ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80080d2:	4b08      	ldr	r3, [pc, #32]	@ (80080f4 <I2C_TransferConfig+0x60>)
 80080d4:	430b      	orrs	r3, r1
 80080d6:	43db      	mvns	r3, r3
 80080d8:	ea02 0103 	and.w	r1, r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80080e6:	bf00      	nop
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	03ff63ff 	.word	0x03ff63ff

080080f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e0bf      	b.n	800828a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fa ff86 	bl	8003030 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699a      	ldr	r2, [r3, #24]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800813a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6999      	ldr	r1, [r3, #24]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008150:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6899      	ldr	r1, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	4b4a      	ldr	r3, [pc, #296]	@ (8008294 <HAL_LTDC_Init+0x19c>)
 800816c:	400b      	ands	r3, r1
 800816e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	041b      	lsls	r3, r3, #16
 8008176:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6899      	ldr	r1, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	430a      	orrs	r2, r1
 800818c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68d9      	ldr	r1, [r3, #12]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	4b3e      	ldr	r3, [pc, #248]	@ (8008294 <HAL_LTDC_Init+0x19c>)
 800819a:	400b      	ands	r3, r1
 800819c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	041b      	lsls	r3, r3, #16
 80081a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68d9      	ldr	r1, [r3, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1a      	ldr	r2, [r3, #32]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	431a      	orrs	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	430a      	orrs	r2, r1
 80081ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6919      	ldr	r1, [r3, #16]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	4b33      	ldr	r3, [pc, #204]	@ (8008294 <HAL_LTDC_Init+0x19c>)
 80081c8:	400b      	ands	r3, r1
 80081ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d0:	041b      	lsls	r3, r3, #16
 80081d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6919      	ldr	r1, [r3, #16]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	431a      	orrs	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6959      	ldr	r1, [r3, #20]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	4b27      	ldr	r3, [pc, #156]	@ (8008294 <HAL_LTDC_Init+0x19c>)
 80081f6:	400b      	ands	r3, r1
 80081f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6959      	ldr	r1, [r3, #20]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	431a      	orrs	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8008228:	041b      	lsls	r3, r3, #16
 800822a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800823a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4313      	orrs	r3, r2
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	430a      	orrs	r2, r1
 8008256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0206 	orr.w	r2, r2, #6
 8008266:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	699a      	ldr	r2, [r3, #24]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f042 0201 	orr.w	r2, r2, #1
 8008276:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	f000f800 	.word	0xf000f800

08008298 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f003 0304 	and.w	r3, r3, #4
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d023      	beq.n	8008302 <HAL_LTDC_IRQHandler+0x6a>
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01e      	beq.n	8008302 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0204 	bic.w	r2, r2, #4
 80082d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2204      	movs	r2, #4
 80082da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80082e2:	f043 0201 	orr.w	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2204      	movs	r2, #4
 80082f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f86f 	bl	80083e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d023      	beq.n	8008354 <HAL_LTDC_IRQHandler+0xbc>
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01e      	beq.n	8008354 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0202 	bic.w	r2, r2, #2
 8008324:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2202      	movs	r2, #2
 800832c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008334:	f043 0202 	orr.w	r2, r3, #2
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2204      	movs	r2, #4
 8008342:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 f846 	bl	80083e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d01b      	beq.n	8008396 <HAL_LTDC_IRQHandler+0xfe>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d016      	beq.n	8008396 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0201 	bic.w	r2, r2, #1
 8008376:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2201      	movs	r2, #1
 800837e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f82f 	bl	80083f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01b      	beq.n	80083d8 <HAL_LTDC_IRQHandler+0x140>
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f003 0308 	and.w	r3, r3, #8
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d016      	beq.n	80083d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0208 	bic.w	r2, r2, #8
 80083b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2208      	movs	r2, #8
 80083c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f818 	bl	8008408 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800841c:	b5b0      	push	{r4, r5, r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_LTDC_ConfigLayer+0x1a>
 8008432:	2302      	movs	r3, #2
 8008434:	e02c      	b.n	8008490 <HAL_LTDC_ConfigLayer+0x74>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2202      	movs	r2, #2
 8008442:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2134      	movs	r1, #52	@ 0x34
 800844c:	fb01 f303 	mul.w	r3, r1, r3
 8008450:	4413      	add	r3, r2
 8008452:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	4614      	mov	r4, r2
 800845a:	461d      	mov	r5, r3
 800845c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800845e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	68b9      	ldr	r1, [r7, #8]
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 f81f 	bl	80084b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2201      	movs	r2, #1
 800847c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bdb0      	pop	{r4, r5, r7, pc}

08008498 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80084a6:	b2db      	uxtb	r3, r3
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b089      	sub	sp, #36	@ 0x24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084d0:	4413      	add	r3, r2
 80084d2:	041b      	lsls	r3, r3, #16
 80084d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	461a      	mov	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	01db      	lsls	r3, r3, #7
 80084e0:	4413      	add	r3, r2
 80084e2:	3384      	adds	r3, #132	@ 0x84
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	4611      	mov	r1, r2
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	01d2      	lsls	r2, r2, #7
 80084f0:	440a      	add	r2, r1
 80084f2:	3284      	adds	r2, #132	@ 0x84
 80084f4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80084f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	0c1b      	lsrs	r3, r3, #16
 8008506:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800850a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800850c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4619      	mov	r1, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	01db      	lsls	r3, r3, #7
 8008518:	440b      	add	r3, r1
 800851a:	3384      	adds	r3, #132	@ 0x84
 800851c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008522:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008532:	4413      	add	r3, r2
 8008534:	041b      	lsls	r3, r3, #16
 8008536:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	01db      	lsls	r3, r3, #7
 8008542:	4413      	add	r3, r2
 8008544:	3384      	adds	r3, #132	@ 0x84
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	6812      	ldr	r2, [r2, #0]
 800854c:	4611      	mov	r1, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	01d2      	lsls	r2, r2, #7
 8008552:	440a      	add	r2, r1
 8008554:	3284      	adds	r2, #132	@ 0x84
 8008556:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800855a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800856a:	4413      	add	r3, r2
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4619      	mov	r1, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	01db      	lsls	r3, r3, #7
 8008578:	440b      	add	r3, r1
 800857a:	3384      	adds	r3, #132	@ 0x84
 800857c:	4619      	mov	r1, r3
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	4313      	orrs	r3, r2
 8008582:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	01db      	lsls	r3, r3, #7
 800858e:	4413      	add	r3, r2
 8008590:	3384      	adds	r3, #132	@ 0x84
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	6812      	ldr	r2, [r2, #0]
 8008598:	4611      	mov	r1, r2
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	01d2      	lsls	r2, r2, #7
 800859e:	440a      	add	r2, r1
 80085a0:	3284      	adds	r2, #132	@ 0x84
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	01db      	lsls	r3, r3, #7
 80085b2:	4413      	add	r3, r2
 80085b4:	3384      	adds	r3, #132	@ 0x84
 80085b6:	461a      	mov	r2, r3
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80085c4:	021b      	lsls	r3, r3, #8
 80085c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80085ce:	041b      	lsls	r3, r3, #16
 80085d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	061b      	lsls	r3, r3, #24
 80085d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	01db      	lsls	r3, r3, #7
 80085e4:	4413      	add	r3, r2
 80085e6:	3384      	adds	r3, #132	@ 0x84
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	01db      	lsls	r3, r3, #7
 80085f4:	4413      	add	r3, r2
 80085f6:	3384      	adds	r3, #132	@ 0x84
 80085f8:	461a      	mov	r2, r3
 80085fa:	2300      	movs	r3, #0
 80085fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008604:	461a      	mov	r2, r3
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	431a      	orrs	r2, r3
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	431a      	orrs	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4619      	mov	r1, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	01db      	lsls	r3, r3, #7
 8008618:	440b      	add	r3, r1
 800861a:	3384      	adds	r3, #132	@ 0x84
 800861c:	4619      	mov	r1, r3
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	01db      	lsls	r3, r3, #7
 800862e:	4413      	add	r3, r2
 8008630:	3384      	adds	r3, #132	@ 0x84
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	6812      	ldr	r2, [r2, #0]
 8008638:	4611      	mov	r1, r2
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	01d2      	lsls	r2, r2, #7
 800863e:	440a      	add	r2, r1
 8008640:	3284      	adds	r2, #132	@ 0x84
 8008642:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008646:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	461a      	mov	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	01db      	lsls	r3, r3, #7
 8008652:	4413      	add	r3, r2
 8008654:	3384      	adds	r3, #132	@ 0x84
 8008656:	461a      	mov	r2, r3
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	01db      	lsls	r3, r3, #7
 8008668:	4413      	add	r3, r2
 800866a:	3384      	adds	r3, #132	@ 0x84
 800866c:	69da      	ldr	r2, [r3, #28]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4619      	mov	r1, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	01db      	lsls	r3, r3, #7
 8008678:	440b      	add	r3, r1
 800867a:	3384      	adds	r3, #132	@ 0x84
 800867c:	4619      	mov	r1, r3
 800867e:	4b58      	ldr	r3, [pc, #352]	@ (80087e0 <LTDC_SetConfig+0x32c>)
 8008680:	4013      	ands	r3, r2
 8008682:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	69da      	ldr	r2, [r3, #28]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	6a1b      	ldr	r3, [r3, #32]
 800868c:	68f9      	ldr	r1, [r7, #12]
 800868e:	6809      	ldr	r1, [r1, #0]
 8008690:	4608      	mov	r0, r1
 8008692:	6879      	ldr	r1, [r7, #4]
 8008694:	01c9      	lsls	r1, r1, #7
 8008696:	4401      	add	r1, r0
 8008698:	3184      	adds	r1, #132	@ 0x84
 800869a:	4313      	orrs	r3, r2
 800869c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	01db      	lsls	r3, r3, #7
 80086a8:	4413      	add	r3, r2
 80086aa:	3384      	adds	r3, #132	@ 0x84
 80086ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	461a      	mov	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	01db      	lsls	r3, r3, #7
 80086b8:	4413      	add	r3, r2
 80086ba:	3384      	adds	r3, #132	@ 0x84
 80086bc:	461a      	mov	r2, r3
 80086be:	2300      	movs	r3, #0
 80086c0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	01db      	lsls	r3, r3, #7
 80086cc:	4413      	add	r3, r2
 80086ce:	3384      	adds	r3, #132	@ 0x84
 80086d0:	461a      	mov	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d102      	bne.n	80086e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80086e0:	2304      	movs	r3, #4
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	e01b      	b.n	800871e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d102      	bne.n	80086f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80086ee:	2303      	movs	r3, #3
 80086f0:	61fb      	str	r3, [r7, #28]
 80086f2:	e014      	b.n	800871e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d00b      	beq.n	8008714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008700:	2b02      	cmp	r3, #2
 8008702:	d007      	beq.n	8008714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008708:	2b03      	cmp	r3, #3
 800870a:	d003      	beq.n	8008714 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008710:	2b07      	cmp	r3, #7
 8008712:	d102      	bne.n	800871a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008714:	2302      	movs	r3, #2
 8008716:	61fb      	str	r3, [r7, #28]
 8008718:	e001      	b.n	800871e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800871a:	2301      	movs	r3, #1
 800871c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	01db      	lsls	r3, r3, #7
 8008728:	4413      	add	r3, r2
 800872a:	3384      	adds	r3, #132	@ 0x84
 800872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	6812      	ldr	r2, [r2, #0]
 8008732:	4611      	mov	r1, r2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	01d2      	lsls	r2, r2, #7
 8008738:	440a      	add	r2, r1
 800873a:	3284      	adds	r2, #132	@ 0x84
 800873c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8008740:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	fb02 f303 	mul.w	r3, r2, r3
 800874c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	6859      	ldr	r1, [r3, #4]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	1acb      	subs	r3, r1, r3
 8008758:	69f9      	ldr	r1, [r7, #28]
 800875a:	fb01 f303 	mul.w	r3, r1, r3
 800875e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008760:	68f9      	ldr	r1, [r7, #12]
 8008762:	6809      	ldr	r1, [r1, #0]
 8008764:	4608      	mov	r0, r1
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	01c9      	lsls	r1, r1, #7
 800876a:	4401      	add	r1, r0
 800876c:	3184      	adds	r1, #132	@ 0x84
 800876e:	4313      	orrs	r3, r2
 8008770:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	01db      	lsls	r3, r3, #7
 800877c:	4413      	add	r3, r2
 800877e:	3384      	adds	r3, #132	@ 0x84
 8008780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4619      	mov	r1, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	01db      	lsls	r3, r3, #7
 800878c:	440b      	add	r3, r1
 800878e:	3384      	adds	r3, #132	@ 0x84
 8008790:	4619      	mov	r1, r3
 8008792:	4b14      	ldr	r3, [pc, #80]	@ (80087e4 <LTDC_SetConfig+0x330>)
 8008794:	4013      	ands	r3, r2
 8008796:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	461a      	mov	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	01db      	lsls	r3, r3, #7
 80087a2:	4413      	add	r3, r2
 80087a4:	3384      	adds	r3, #132	@ 0x84
 80087a6:	461a      	mov	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	01db      	lsls	r3, r3, #7
 80087b8:	4413      	add	r3, r2
 80087ba:	3384      	adds	r3, #132	@ 0x84
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	4611      	mov	r1, r2
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	01d2      	lsls	r2, r2, #7
 80087c8:	440a      	add	r2, r1
 80087ca:	3284      	adds	r2, #132	@ 0x84
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	6013      	str	r3, [r2, #0]
}
 80087d2:	bf00      	nop
 80087d4:	3724      	adds	r7, #36	@ 0x24
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	fffff8f8 	.word	0xfffff8f8
 80087e4:	fffff800 	.word	0xfffff800

080087e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80087e8:	b480      	push	{r7}
 80087ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087ec:	4b05      	ldr	r3, [pc, #20]	@ (8008804 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a04      	ldr	r2, [pc, #16]	@ (8008804 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087f6:	6013      	str	r3, [r2, #0]
}
 80087f8:	bf00      	nop
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	40007000 	.word	0x40007000

08008808 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800880e:	2300      	movs	r3, #0
 8008810:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008812:	4b23      	ldr	r3, [pc, #140]	@ (80088a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	4a22      	ldr	r2, [pc, #136]	@ (80088a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800881c:	6413      	str	r3, [r2, #64]	@ 0x40
 800881e:	4b20      	ldr	r3, [pc, #128]	@ (80088a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8008820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800882a:	4b1e      	ldr	r3, [pc, #120]	@ (80088a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a1d      	ldr	r2, [pc, #116]	@ (80088a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008834:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008836:	f7fd f84d 	bl	80058d4 <HAL_GetTick>
 800883a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800883c:	e009      	b.n	8008852 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800883e:	f7fd f849 	bl	80058d4 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800884c:	d901      	bls.n	8008852 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e022      	b.n	8008898 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008852:	4b14      	ldr	r3, [pc, #80]	@ (80088a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800885a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800885e:	d1ee      	bne.n	800883e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008860:	4b10      	ldr	r3, [pc, #64]	@ (80088a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a0f      	ldr	r2, [pc, #60]	@ (80088a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800886a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800886c:	f7fd f832 	bl	80058d4 <HAL_GetTick>
 8008870:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008872:	e009      	b.n	8008888 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008874:	f7fd f82e 	bl	80058d4 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008882:	d901      	bls.n	8008888 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e007      	b.n	8008898 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008888:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008890:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008894:	d1ee      	bne.n	8008874 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	40023800 	.word	0x40023800
 80088a4:	40007000 	.word	0x40007000

080088a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80088b0:	2300      	movs	r3, #0
 80088b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e291      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f000 8087 	beq.w	80089da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088cc:	4b96      	ldr	r3, [pc, #600]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 030c 	and.w	r3, r3, #12
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d00c      	beq.n	80088f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088d8:	4b93      	ldr	r3, [pc, #588]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f003 030c 	and.w	r3, r3, #12
 80088e0:	2b08      	cmp	r3, #8
 80088e2:	d112      	bne.n	800890a <HAL_RCC_OscConfig+0x62>
 80088e4:	4b90      	ldr	r3, [pc, #576]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088f0:	d10b      	bne.n	800890a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088f2:	4b8d      	ldr	r3, [pc, #564]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d06c      	beq.n	80089d8 <HAL_RCC_OscConfig+0x130>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d168      	bne.n	80089d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e26b      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008912:	d106      	bne.n	8008922 <HAL_RCC_OscConfig+0x7a>
 8008914:	4b84      	ldr	r3, [pc, #528]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a83      	ldr	r2, [pc, #524]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 800891a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	e02e      	b.n	8008980 <HAL_RCC_OscConfig+0xd8>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d10c      	bne.n	8008944 <HAL_RCC_OscConfig+0x9c>
 800892a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008930:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	4b7c      	ldr	r3, [pc, #496]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a7b      	ldr	r2, [pc, #492]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 800893c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	e01d      	b.n	8008980 <HAL_RCC_OscConfig+0xd8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800894c:	d10c      	bne.n	8008968 <HAL_RCC_OscConfig+0xc0>
 800894e:	4b76      	ldr	r3, [pc, #472]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a75      	ldr	r2, [pc, #468]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	4b73      	ldr	r3, [pc, #460]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a72      	ldr	r2, [pc, #456]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	e00b      	b.n	8008980 <HAL_RCC_OscConfig+0xd8>
 8008968:	4b6f      	ldr	r3, [pc, #444]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a6e      	ldr	r2, [pc, #440]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 800896e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008972:	6013      	str	r3, [r2, #0]
 8008974:	4b6c      	ldr	r3, [pc, #432]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a6b      	ldr	r2, [pc, #428]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 800897a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800897e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d013      	beq.n	80089b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008988:	f7fc ffa4 	bl	80058d4 <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008990:	f7fc ffa0 	bl	80058d4 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b64      	cmp	r3, #100	@ 0x64
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e21f      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089a2:	4b61      	ldr	r3, [pc, #388]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f0      	beq.n	8008990 <HAL_RCC_OscConfig+0xe8>
 80089ae:	e014      	b.n	80089da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b0:	f7fc ff90 	bl	80058d4 <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089b8:	f7fc ff8c 	bl	80058d4 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b64      	cmp	r3, #100	@ 0x64
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e20b      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089ca:	4b57      	ldr	r3, [pc, #348]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f0      	bne.n	80089b8 <HAL_RCC_OscConfig+0x110>
 80089d6:	e000      	b.n	80089da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d069      	beq.n	8008aba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089e6:	4b50      	ldr	r3, [pc, #320]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f003 030c 	and.w	r3, r3, #12
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089f2:	4b4d      	ldr	r3, [pc, #308]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f003 030c 	and.w	r3, r3, #12
 80089fa:	2b08      	cmp	r3, #8
 80089fc:	d11c      	bne.n	8008a38 <HAL_RCC_OscConfig+0x190>
 80089fe:	4b4a      	ldr	r3, [pc, #296]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d116      	bne.n	8008a38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a0a:	4b47      	ldr	r3, [pc, #284]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0302 	and.w	r3, r3, #2
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d005      	beq.n	8008a22 <HAL_RCC_OscConfig+0x17a>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d001      	beq.n	8008a22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e1df      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a22:	4b41      	ldr	r3, [pc, #260]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	493d      	ldr	r1, [pc, #244]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a36:	e040      	b.n	8008aba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d023      	beq.n	8008a88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a40:	4b39      	ldr	r3, [pc, #228]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a38      	ldr	r2, [pc, #224]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a46:	f043 0301 	orr.w	r3, r3, #1
 8008a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4c:	f7fc ff42 	bl	80058d4 <HAL_GetTick>
 8008a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a52:	e008      	b.n	8008a66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a54:	f7fc ff3e 	bl	80058d4 <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e1bd      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a66:	4b30      	ldr	r3, [pc, #192]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d0f0      	beq.n	8008a54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a72:	4b2d      	ldr	r3, [pc, #180]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	4929      	ldr	r1, [pc, #164]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	600b      	str	r3, [r1, #0]
 8008a86:	e018      	b.n	8008aba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a88:	4b27      	ldr	r3, [pc, #156]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a26      	ldr	r2, [pc, #152]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008a8e:	f023 0301 	bic.w	r3, r3, #1
 8008a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a94:	f7fc ff1e 	bl	80058d4 <HAL_GetTick>
 8008a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a9a:	e008      	b.n	8008aae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a9c:	f7fc ff1a 	bl	80058d4 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e199      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aae:	4b1e      	ldr	r3, [pc, #120]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1f0      	bne.n	8008a9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0308 	and.w	r3, r3, #8
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d038      	beq.n	8008b38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d019      	beq.n	8008b02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ace:	4b16      	ldr	r3, [pc, #88]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad2:	4a15      	ldr	r2, [pc, #84]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008ad4:	f043 0301 	orr.w	r3, r3, #1
 8008ad8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ada:	f7fc fefb 	bl	80058d4 <HAL_GetTick>
 8008ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ae0:	e008      	b.n	8008af4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ae2:	f7fc fef7 	bl	80058d4 <HAL_GetTick>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d901      	bls.n	8008af4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e176      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008af4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0f0      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x23a>
 8008b00:	e01a      	b.n	8008b38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b02:	4b09      	ldr	r3, [pc, #36]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b06:	4a08      	ldr	r2, [pc, #32]	@ (8008b28 <HAL_RCC_OscConfig+0x280>)
 8008b08:	f023 0301 	bic.w	r3, r3, #1
 8008b0c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b0e:	f7fc fee1 	bl	80058d4 <HAL_GetTick>
 8008b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b14:	e00a      	b.n	8008b2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b16:	f7fc fedd 	bl	80058d4 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d903      	bls.n	8008b2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e15c      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
 8008b28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b2c:	4b91      	ldr	r3, [pc, #580]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b30:	f003 0302 	and.w	r3, r3, #2
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1ee      	bne.n	8008b16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 80a4 	beq.w	8008c8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b46:	4b8b      	ldr	r3, [pc, #556]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10d      	bne.n	8008b6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b52:	4b88      	ldr	r3, [pc, #544]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b56:	4a87      	ldr	r2, [pc, #540]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b5e:	4b85      	ldr	r3, [pc, #532]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b66:	60bb      	str	r3, [r7, #8]
 8008b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b6e:	4b82      	ldr	r3, [pc, #520]	@ (8008d78 <HAL_RCC_OscConfig+0x4d0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d118      	bne.n	8008bac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008b7a:	4b7f      	ldr	r3, [pc, #508]	@ (8008d78 <HAL_RCC_OscConfig+0x4d0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a7e      	ldr	r2, [pc, #504]	@ (8008d78 <HAL_RCC_OscConfig+0x4d0>)
 8008b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b86:	f7fc fea5 	bl	80058d4 <HAL_GetTick>
 8008b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b8c:	e008      	b.n	8008ba0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b8e:	f7fc fea1 	bl	80058d4 <HAL_GetTick>
 8008b92:	4602      	mov	r2, r0
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b64      	cmp	r3, #100	@ 0x64
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e120      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008ba0:	4b75      	ldr	r3, [pc, #468]	@ (8008d78 <HAL_RCC_OscConfig+0x4d0>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d0f0      	beq.n	8008b8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d106      	bne.n	8008bc2 <HAL_RCC_OscConfig+0x31a>
 8008bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bb8:	4a6e      	ldr	r2, [pc, #440]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bba:	f043 0301 	orr.w	r3, r3, #1
 8008bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bc0:	e02d      	b.n	8008c1e <HAL_RCC_OscConfig+0x376>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10c      	bne.n	8008be4 <HAL_RCC_OscConfig+0x33c>
 8008bca:	4b6a      	ldr	r3, [pc, #424]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bce:	4a69      	ldr	r2, [pc, #420]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bd0:	f023 0301 	bic.w	r3, r3, #1
 8008bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bd6:	4b67      	ldr	r3, [pc, #412]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bda:	4a66      	ldr	r2, [pc, #408]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bdc:	f023 0304 	bic.w	r3, r3, #4
 8008be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008be2:	e01c      	b.n	8008c1e <HAL_RCC_OscConfig+0x376>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2b05      	cmp	r3, #5
 8008bea:	d10c      	bne.n	8008c06 <HAL_RCC_OscConfig+0x35e>
 8008bec:	4b61      	ldr	r3, [pc, #388]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf0:	4a60      	ldr	r2, [pc, #384]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bf2:	f043 0304 	orr.w	r3, r3, #4
 8008bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008bfe:	f043 0301 	orr.w	r3, r3, #1
 8008c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c04:	e00b      	b.n	8008c1e <HAL_RCC_OscConfig+0x376>
 8008c06:	4b5b      	ldr	r3, [pc, #364]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c0a:	4a5a      	ldr	r2, [pc, #360]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c0c:	f023 0301 	bic.w	r3, r3, #1
 8008c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c12:	4b58      	ldr	r3, [pc, #352]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c16:	4a57      	ldr	r2, [pc, #348]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c18:	f023 0304 	bic.w	r3, r3, #4
 8008c1c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d015      	beq.n	8008c52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c26:	f7fc fe55 	bl	80058d4 <HAL_GetTick>
 8008c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c2c:	e00a      	b.n	8008c44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c2e:	f7fc fe51 	bl	80058d4 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d901      	bls.n	8008c44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e0ce      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c44:	4b4b      	ldr	r3, [pc, #300]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c48:	f003 0302 	and.w	r3, r3, #2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0ee      	beq.n	8008c2e <HAL_RCC_OscConfig+0x386>
 8008c50:	e014      	b.n	8008c7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c52:	f7fc fe3f 	bl	80058d4 <HAL_GetTick>
 8008c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c58:	e00a      	b.n	8008c70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c5a:	f7fc fe3b 	bl	80058d4 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d901      	bls.n	8008c70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e0b8      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c70:	4b40      	ldr	r3, [pc, #256]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c74:	f003 0302 	and.w	r3, r3, #2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1ee      	bne.n	8008c5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c7c:	7dfb      	ldrb	r3, [r7, #23]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d105      	bne.n	8008c8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c82:	4b3c      	ldr	r3, [pc, #240]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c86:	4a3b      	ldr	r2, [pc, #236]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c8c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80a4 	beq.w	8008de0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c98:	4b36      	ldr	r3, [pc, #216]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 030c 	and.w	r3, r3, #12
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d06b      	beq.n	8008d7c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d149      	bne.n	8008d40 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cac:	4b31      	ldr	r3, [pc, #196]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a30      	ldr	r2, [pc, #192]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cb8:	f7fc fe0c 	bl	80058d4 <HAL_GetTick>
 8008cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cbe:	e008      	b.n	8008cd2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cc0:	f7fc fe08 	bl	80058d4 <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e087      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cd2:	4b28      	ldr	r3, [pc, #160]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1f0      	bne.n	8008cc0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69da      	ldr	r2, [r3, #28]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cec:	019b      	lsls	r3, r3, #6
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf4:	085b      	lsrs	r3, r3, #1
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	041b      	lsls	r3, r3, #16
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d00:	061b      	lsls	r3, r3, #24
 8008d02:	4313      	orrs	r3, r2
 8008d04:	4a1b      	ldr	r2, [pc, #108]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008d06:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d0a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d0c:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a18      	ldr	r2, [pc, #96]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7fc fddc 	bl	80058d4 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d20:	f7fc fdd8 	bl	80058d4 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e057      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d32:	4b10      	ldr	r3, [pc, #64]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0f0      	beq.n	8008d20 <HAL_RCC_OscConfig+0x478>
 8008d3e:	e04f      	b.n	8008de0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d40:	4b0c      	ldr	r3, [pc, #48]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a0b      	ldr	r2, [pc, #44]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d4c:	f7fc fdc2 	bl	80058d4 <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d52:	e008      	b.n	8008d66 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d54:	f7fc fdbe 	bl	80058d4 <HAL_GetTick>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d901      	bls.n	8008d66 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008d62:	2303      	movs	r3, #3
 8008d64:	e03d      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d66:	4b03      	ldr	r3, [pc, #12]	@ (8008d74 <HAL_RCC_OscConfig+0x4cc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1f0      	bne.n	8008d54 <HAL_RCC_OscConfig+0x4ac>
 8008d72:	e035      	b.n	8008de0 <HAL_RCC_OscConfig+0x538>
 8008d74:	40023800 	.word	0x40023800
 8008d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008dec <HAL_RCC_OscConfig+0x544>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d028      	beq.n	8008ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d121      	bne.n	8008ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d11a      	bne.n	8008ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008dac:	4013      	ands	r3, r2
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008db2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d111      	bne.n	8008ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d107      	bne.n	8008ddc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d001      	beq.n	8008de0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e000      	b.n	8008de2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3718      	adds	r7, #24
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	40023800 	.word	0x40023800

08008df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e0d0      	b.n	8008faa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e08:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 030f 	and.w	r3, r3, #15
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d910      	bls.n	8008e38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e16:	4b67      	ldr	r3, [pc, #412]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f023 020f 	bic.w	r2, r3, #15
 8008e1e:	4965      	ldr	r1, [pc, #404]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e26:	4b63      	ldr	r3, [pc, #396]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 030f 	and.w	r3, r3, #15
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d001      	beq.n	8008e38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e0b8      	b.n	8008faa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d020      	beq.n	8008e86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e50:	4b59      	ldr	r3, [pc, #356]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	4a58      	ldr	r2, [pc, #352]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008e5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0308 	and.w	r3, r3, #8
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d005      	beq.n	8008e74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e68:	4b53      	ldr	r3, [pc, #332]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	4a52      	ldr	r2, [pc, #328]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e74:	4b50      	ldr	r3, [pc, #320]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	494d      	ldr	r1, [pc, #308]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d040      	beq.n	8008f14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d107      	bne.n	8008eaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e9a:	4b47      	ldr	r3, [pc, #284]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d115      	bne.n	8008ed2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e07f      	b.n	8008faa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d107      	bne.n	8008ec2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008eb2:	4b41      	ldr	r3, [pc, #260]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e073      	b.n	8008faa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e06b      	b.n	8008faa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ed2:	4b39      	ldr	r3, [pc, #228]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f023 0203 	bic.w	r2, r3, #3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	4936      	ldr	r1, [pc, #216]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ee4:	f7fc fcf6 	bl	80058d4 <HAL_GetTick>
 8008ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eea:	e00a      	b.n	8008f02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008eec:	f7fc fcf2 	bl	80058d4 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e053      	b.n	8008faa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f02:	4b2d      	ldr	r3, [pc, #180]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f003 020c 	and.w	r2, r3, #12
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d1eb      	bne.n	8008eec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f14:	4b27      	ldr	r3, [pc, #156]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d210      	bcs.n	8008f44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f22:	4b24      	ldr	r3, [pc, #144]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f023 020f 	bic.w	r2, r3, #15
 8008f2a:	4922      	ldr	r1, [pc, #136]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f32:	4b20      	ldr	r3, [pc, #128]	@ (8008fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	683a      	ldr	r2, [r7, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d001      	beq.n	8008f44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e032      	b.n	8008faa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d008      	beq.n	8008f62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f50:	4b19      	ldr	r3, [pc, #100]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	4916      	ldr	r1, [pc, #88]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0308 	and.w	r3, r3, #8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d009      	beq.n	8008f82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f6e:	4b12      	ldr	r3, [pc, #72]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	490e      	ldr	r1, [pc, #56]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f82:	f000 f821 	bl	8008fc8 <HAL_RCC_GetSysClockFreq>
 8008f86:	4602      	mov	r2, r0
 8008f88:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	091b      	lsrs	r3, r3, #4
 8008f8e:	f003 030f 	and.w	r3, r3, #15
 8008f92:	490a      	ldr	r1, [pc, #40]	@ (8008fbc <HAL_RCC_ClockConfig+0x1cc>)
 8008f94:	5ccb      	ldrb	r3, [r1, r3]
 8008f96:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9a:	4a09      	ldr	r2, [pc, #36]	@ (8008fc0 <HAL_RCC_ClockConfig+0x1d0>)
 8008f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f9e:	4b09      	ldr	r3, [pc, #36]	@ (8008fc4 <HAL_RCC_ClockConfig+0x1d4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fc f978 	bl	8005298 <HAL_InitTick>

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	40023c00 	.word	0x40023c00
 8008fb8:	40023800 	.word	0x40023800
 8008fbc:	0801f7c4 	.word	0x0801f7c4
 8008fc0:	20000048 	.word	0x20000048
 8008fc4:	2000004c 	.word	0x2000004c

08008fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fcc:	b090      	sub	sp, #64	@ 0x40
 8008fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd8:	2300      	movs	r3, #0
 8008fda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fe0:	4b59      	ldr	r3, [pc, #356]	@ (8009148 <HAL_RCC_GetSysClockFreq+0x180>)
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	f003 030c 	and.w	r3, r3, #12
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d00d      	beq.n	8009008 <HAL_RCC_GetSysClockFreq+0x40>
 8008fec:	2b08      	cmp	r3, #8
 8008fee:	f200 80a1 	bhi.w	8009134 <HAL_RCC_GetSysClockFreq+0x16c>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <HAL_RCC_GetSysClockFreq+0x34>
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d003      	beq.n	8009002 <HAL_RCC_GetSysClockFreq+0x3a>
 8008ffa:	e09b      	b.n	8009134 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ffc:	4b53      	ldr	r3, [pc, #332]	@ (800914c <HAL_RCC_GetSysClockFreq+0x184>)
 8008ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009000:	e09b      	b.n	800913a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009002:	4b53      	ldr	r3, [pc, #332]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x188>)
 8009004:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009006:	e098      	b.n	800913a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009008:	4b4f      	ldr	r3, [pc, #316]	@ (8009148 <HAL_RCC_GetSysClockFreq+0x180>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009010:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009012:	4b4d      	ldr	r3, [pc, #308]	@ (8009148 <HAL_RCC_GetSysClockFreq+0x180>)
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d028      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800901e:	4b4a      	ldr	r3, [pc, #296]	@ (8009148 <HAL_RCC_GetSysClockFreq+0x180>)
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	099b      	lsrs	r3, r3, #6
 8009024:	2200      	movs	r2, #0
 8009026:	623b      	str	r3, [r7, #32]
 8009028:	627a      	str	r2, [r7, #36]	@ 0x24
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009030:	2100      	movs	r1, #0
 8009032:	4b47      	ldr	r3, [pc, #284]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x188>)
 8009034:	fb03 f201 	mul.w	r2, r3, r1
 8009038:	2300      	movs	r3, #0
 800903a:	fb00 f303 	mul.w	r3, r0, r3
 800903e:	4413      	add	r3, r2
 8009040:	4a43      	ldr	r2, [pc, #268]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x188>)
 8009042:	fba0 1202 	umull	r1, r2, r0, r2
 8009046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009048:	460a      	mov	r2, r1
 800904a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800904c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800904e:	4413      	add	r3, r2
 8009050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009054:	2200      	movs	r2, #0
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	61fa      	str	r2, [r7, #28]
 800905a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800905e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009062:	f7f7 fd13 	bl	8000a8c <__aeabi_uldivmod>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	4613      	mov	r3, r2
 800906c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800906e:	e053      	b.n	8009118 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009070:	4b35      	ldr	r3, [pc, #212]	@ (8009148 <HAL_RCC_GetSysClockFreq+0x180>)
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	099b      	lsrs	r3, r3, #6
 8009076:	2200      	movs	r2, #0
 8009078:	613b      	str	r3, [r7, #16]
 800907a:	617a      	str	r2, [r7, #20]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009082:	f04f 0b00 	mov.w	fp, #0
 8009086:	4652      	mov	r2, sl
 8009088:	465b      	mov	r3, fp
 800908a:	f04f 0000 	mov.w	r0, #0
 800908e:	f04f 0100 	mov.w	r1, #0
 8009092:	0159      	lsls	r1, r3, #5
 8009094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009098:	0150      	lsls	r0, r2, #5
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	ebb2 080a 	subs.w	r8, r2, sl
 80090a2:	eb63 090b 	sbc.w	r9, r3, fp
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80090b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80090b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80090ba:	ebb2 0408 	subs.w	r4, r2, r8
 80090be:	eb63 0509 	sbc.w	r5, r3, r9
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	00eb      	lsls	r3, r5, #3
 80090cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80090d0:	00e2      	lsls	r2, r4, #3
 80090d2:	4614      	mov	r4, r2
 80090d4:	461d      	mov	r5, r3
 80090d6:	eb14 030a 	adds.w	r3, r4, sl
 80090da:	603b      	str	r3, [r7, #0]
 80090dc:	eb45 030b 	adc.w	r3, r5, fp
 80090e0:	607b      	str	r3, [r7, #4]
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80090ee:	4629      	mov	r1, r5
 80090f0:	028b      	lsls	r3, r1, #10
 80090f2:	4621      	mov	r1, r4
 80090f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80090f8:	4621      	mov	r1, r4
 80090fa:	028a      	lsls	r2, r1, #10
 80090fc:	4610      	mov	r0, r2
 80090fe:	4619      	mov	r1, r3
 8009100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009102:	2200      	movs	r2, #0
 8009104:	60bb      	str	r3, [r7, #8]
 8009106:	60fa      	str	r2, [r7, #12]
 8009108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800910c:	f7f7 fcbe 	bl	8000a8c <__aeabi_uldivmod>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4613      	mov	r3, r2
 8009116:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009118:	4b0b      	ldr	r3, [pc, #44]	@ (8009148 <HAL_RCC_GetSysClockFreq+0x180>)
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	0c1b      	lsrs	r3, r3, #16
 800911e:	f003 0303 	and.w	r3, r3, #3
 8009122:	3301      	adds	r3, #1
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009128:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800912a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009130:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009132:	e002      	b.n	800913a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009134:	4b05      	ldr	r3, [pc, #20]	@ (800914c <HAL_RCC_GetSysClockFreq+0x184>)
 8009136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800913a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800913c:	4618      	mov	r0, r3
 800913e:	3740      	adds	r7, #64	@ 0x40
 8009140:	46bd      	mov	sp, r7
 8009142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009146:	bf00      	nop
 8009148:	40023800 	.word	0x40023800
 800914c:	00f42400 	.word	0x00f42400
 8009150:	017d7840 	.word	0x017d7840

08009154 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009158:	4b03      	ldr	r3, [pc, #12]	@ (8009168 <HAL_RCC_GetHCLKFreq+0x14>)
 800915a:	681b      	ldr	r3, [r3, #0]
}
 800915c:	4618      	mov	r0, r3
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20000048 	.word	0x20000048

0800916c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009170:	f7ff fff0 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 8009174:	4602      	mov	r2, r0
 8009176:	4b05      	ldr	r3, [pc, #20]	@ (800918c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	0a9b      	lsrs	r3, r3, #10
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	4903      	ldr	r1, [pc, #12]	@ (8009190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009182:	5ccb      	ldrb	r3, [r1, r3]
 8009184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009188:	4618      	mov	r0, r3
 800918a:	bd80      	pop	{r7, pc}
 800918c:	40023800 	.word	0x40023800
 8009190:	0801f7d4 	.word	0x0801f7d4

08009194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009198:	f7ff ffdc 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 800919c:	4602      	mov	r2, r0
 800919e:	4b05      	ldr	r3, [pc, #20]	@ (80091b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	0b5b      	lsrs	r3, r3, #13
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	4903      	ldr	r1, [pc, #12]	@ (80091b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091aa:	5ccb      	ldrb	r3, [r1, r3]
 80091ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40023800 	.word	0x40023800
 80091b8:	0801f7d4 	.word	0x0801f7d4

080091bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	220f      	movs	r2, #15
 80091ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80091cc:	4b12      	ldr	r3, [pc, #72]	@ (8009218 <HAL_RCC_GetClockConfig+0x5c>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f003 0203 	and.w	r2, r3, #3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80091d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009218 <HAL_RCC_GetClockConfig+0x5c>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80091e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009218 <HAL_RCC_GetClockConfig+0x5c>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80091f0:	4b09      	ldr	r3, [pc, #36]	@ (8009218 <HAL_RCC_GetClockConfig+0x5c>)
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80091fe:	4b07      	ldr	r3, [pc, #28]	@ (800921c <HAL_RCC_GetClockConfig+0x60>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f003 020f 	and.w	r2, r3, #15
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	601a      	str	r2, [r3, #0]
}
 800920a:	bf00      	nop
 800920c:	370c      	adds	r7, #12
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	40023800 	.word	0x40023800
 800921c:	40023c00 	.word	0x40023c00

08009220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d012      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009248:	4b69      	ldr	r3, [pc, #420]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	4a68      	ldr	r2, [pc, #416]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800924e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009252:	6093      	str	r3, [r2, #8]
 8009254:	4b66      	ldr	r3, [pc, #408]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800925c:	4964      	ldr	r1, [pc, #400]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800925e:	4313      	orrs	r3, r2
 8009260:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009266:	2b00      	cmp	r3, #0
 8009268:	d101      	bne.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800926a:	2301      	movs	r3, #1
 800926c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d017      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800927a:	4b5d      	ldr	r3, [pc, #372]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800927c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009280:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009288:	4959      	ldr	r1, [pc, #356]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800928a:	4313      	orrs	r3, r2
 800928c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009294:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009298:	d101      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800929a:	2301      	movs	r3, #1
 800929c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80092a6:	2301      	movs	r3, #1
 80092a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d017      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80092b6:	4b4e      	ldr	r3, [pc, #312]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c4:	494a      	ldr	r1, [pc, #296]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092d4:	d101      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80092d6:	2301      	movs	r3, #1
 80092d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80092e2:	2301      	movs	r3, #1
 80092e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80092f2:	2301      	movs	r3, #1
 80092f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f000 808b 	beq.w	800941a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009304:	4b3a      	ldr	r3, [pc, #232]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009308:	4a39      	ldr	r2, [pc, #228]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800930a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800930e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009310:	4b37      	ldr	r3, [pc, #220]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009318:	60bb      	str	r3, [r7, #8]
 800931a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800931c:	4b35      	ldr	r3, [pc, #212]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a34      	ldr	r2, [pc, #208]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009328:	f7fc fad4 	bl	80058d4 <HAL_GetTick>
 800932c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800932e:	e008      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009330:	f7fc fad0 	bl	80058d4 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b64      	cmp	r3, #100	@ 0x64
 800933c:	d901      	bls.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800933e:	2303      	movs	r3, #3
 8009340:	e357      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009342:	4b2c      	ldr	r3, [pc, #176]	@ (80093f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0f0      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800934e:	4b28      	ldr	r3, [pc, #160]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009356:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d035      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	429a      	cmp	r2, r3
 800936a:	d02e      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800936c:	4b20      	ldr	r3, [pc, #128]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800936e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009374:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009376:	4b1e      	ldr	r3, [pc, #120]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800937a:	4a1d      	ldr	r2, [pc, #116]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800937c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009380:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009382:	4b1b      	ldr	r3, [pc, #108]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009386:	4a1a      	ldr	r2, [pc, #104]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800938c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800938e:	4a18      	ldr	r2, [pc, #96]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009394:	4b16      	ldr	r3, [pc, #88]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b01      	cmp	r3, #1
 800939e:	d114      	bne.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a0:	f7fc fa98 	bl	80058d4 <HAL_GetTick>
 80093a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093a6:	e00a      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093a8:	f7fc fa94 	bl	80058d4 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d901      	bls.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e319      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80093be:	4b0c      	ldr	r3, [pc, #48]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0ee      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093d6:	d111      	bne.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80093d8:	4b05      	ldr	r3, [pc, #20]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80093e4:	4b04      	ldr	r3, [pc, #16]	@ (80093f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80093e6:	400b      	ands	r3, r1
 80093e8:	4901      	ldr	r1, [pc, #4]	@ (80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	608b      	str	r3, [r1, #8]
 80093ee:	e00b      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80093f0:	40023800 	.word	0x40023800
 80093f4:	40007000 	.word	0x40007000
 80093f8:	0ffffcff 	.word	0x0ffffcff
 80093fc:	4baa      	ldr	r3, [pc, #680]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	4aa9      	ldr	r2, [pc, #676]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009402:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009406:	6093      	str	r3, [r2, #8]
 8009408:	4ba7      	ldr	r3, [pc, #668]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800940a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009414:	49a4      	ldr	r1, [pc, #656]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009416:	4313      	orrs	r3, r2
 8009418:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0310 	and.w	r3, r3, #16
 8009422:	2b00      	cmp	r3, #0
 8009424:	d010      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009426:	4ba0      	ldr	r3, [pc, #640]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800942c:	4a9e      	ldr	r2, [pc, #632]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800942e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009432:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009436:	4b9c      	ldr	r3, [pc, #624]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009438:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009440:	4999      	ldr	r1, [pc, #612]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009442:	4313      	orrs	r3, r2
 8009444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009454:	4b94      	ldr	r3, [pc, #592]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800945a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009462:	4991      	ldr	r1, [pc, #580]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009464:	4313      	orrs	r3, r2
 8009466:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009476:	4b8c      	ldr	r3, [pc, #560]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800947c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009484:	4988      	ldr	r1, [pc, #544]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009486:	4313      	orrs	r3, r2
 8009488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00a      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009498:	4b83      	ldr	r3, [pc, #524]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800949a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800949e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094a6:	4980      	ldr	r1, [pc, #512]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00a      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80094ba:	4b7b      	ldr	r3, [pc, #492]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094c8:	4977      	ldr	r1, [pc, #476]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00a      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094dc:	4b72      	ldr	r3, [pc, #456]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e2:	f023 0203 	bic.w	r2, r3, #3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ea:	496f      	ldr	r1, [pc, #444]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00a      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094fe:	4b6a      	ldr	r3, [pc, #424]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009504:	f023 020c 	bic.w	r2, r3, #12
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800950c:	4966      	ldr	r1, [pc, #408]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800950e:	4313      	orrs	r3, r2
 8009510:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00a      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009520:	4b61      	ldr	r3, [pc, #388]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009526:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800952e:	495e      	ldr	r1, [pc, #376]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009530:	4313      	orrs	r3, r2
 8009532:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009542:	4b59      	ldr	r3, [pc, #356]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009548:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009550:	4955      	ldr	r1, [pc, #340]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009552:	4313      	orrs	r3, r2
 8009554:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00a      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009564:	4b50      	ldr	r3, [pc, #320]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009572:	494d      	ldr	r1, [pc, #308]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009574:	4313      	orrs	r3, r2
 8009576:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00a      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009586:	4b48      	ldr	r3, [pc, #288]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009594:	4944      	ldr	r1, [pc, #272]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009596:	4313      	orrs	r3, r2
 8009598:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00a      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80095a8:	4b3f      	ldr	r3, [pc, #252]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095b6:	493c      	ldr	r1, [pc, #240]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80095ca:	4b37      	ldr	r3, [pc, #220]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d8:	4933      	ldr	r1, [pc, #204]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095ec:	4b2e      	ldr	r3, [pc, #184]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095f2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095fa:	492b      	ldr	r1, [pc, #172]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d011      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800960e:	4b26      	ldr	r3, [pc, #152]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009614:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800961c:	4922      	ldr	r1, [pc, #136]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800961e:	4313      	orrs	r3, r2
 8009620:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800962c:	d101      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800962e:	2301      	movs	r3, #1
 8009630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0308 	and.w	r3, r3, #8
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800963e:	2301      	movs	r3, #1
 8009640:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00a      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800964e:	4b16      	ldr	r3, [pc, #88]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009654:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800965c:	4912      	ldr	r1, [pc, #72]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800965e:	4313      	orrs	r3, r2
 8009660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009670:	4b0d      	ldr	r3, [pc, #52]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009676:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009680:	4909      	ldr	r1, [pc, #36]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009682:	4313      	orrs	r3, r2
 8009684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d006      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009696:	2b00      	cmp	r3, #0
 8009698:	f000 80d9 	beq.w	800984e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800969c:	4b02      	ldr	r3, [pc, #8]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a01      	ldr	r2, [pc, #4]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096a6:	e001      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80096a8:	40023800 	.word	0x40023800
 80096ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ae:	f7fc f911 	bl	80058d4 <HAL_GetTick>
 80096b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096b4:	e008      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80096b6:	f7fc f90d 	bl	80058d4 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b64      	cmp	r3, #100	@ 0x64
 80096c2:	d901      	bls.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e194      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80096c8:	4b6c      	ldr	r3, [pc, #432]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1f0      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d021      	beq.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d11d      	bne.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80096e8:	4b64      	ldr	r3, [pc, #400]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096ee:	0c1b      	lsrs	r3, r3, #16
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80096f6:	4b61      	ldr	r3, [pc, #388]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80096f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096fc:	0e1b      	lsrs	r3, r3, #24
 80096fe:	f003 030f 	and.w	r3, r3, #15
 8009702:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	019a      	lsls	r2, r3, #6
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	431a      	orrs	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	061b      	lsls	r3, r3, #24
 8009714:	431a      	orrs	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	071b      	lsls	r3, r3, #28
 800971c:	4957      	ldr	r1, [pc, #348]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800971e:	4313      	orrs	r3, r2
 8009720:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800972c:	2b00      	cmp	r3, #0
 800972e:	d004      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009734:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009738:	d00a      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009742:	2b00      	cmp	r3, #0
 8009744:	d02e      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800974e:	d129      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009750:	4b4a      	ldr	r3, [pc, #296]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009756:	0c1b      	lsrs	r3, r3, #16
 8009758:	f003 0303 	and.w	r3, r3, #3
 800975c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800975e:	4b47      	ldr	r3, [pc, #284]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009764:	0f1b      	lsrs	r3, r3, #28
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	019a      	lsls	r2, r3, #6
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	041b      	lsls	r3, r3, #16
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	061b      	lsls	r3, r3, #24
 800977e:	431a      	orrs	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	071b      	lsls	r3, r3, #28
 8009784:	493d      	ldr	r1, [pc, #244]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009786:	4313      	orrs	r3, r2
 8009788:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800978c:	4b3b      	ldr	r3, [pc, #236]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800978e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009792:	f023 021f 	bic.w	r2, r3, #31
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979a:	3b01      	subs	r3, #1
 800979c:	4937      	ldr	r1, [pc, #220]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d01d      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80097b0:	4b32      	ldr	r3, [pc, #200]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097b6:	0e1b      	lsrs	r3, r3, #24
 80097b8:	f003 030f 	and.w	r3, r3, #15
 80097bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097be:	4b2f      	ldr	r3, [pc, #188]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097c4:	0f1b      	lsrs	r3, r3, #28
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	019a      	lsls	r2, r3, #6
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	691b      	ldr	r3, [r3, #16]
 80097d6:	041b      	lsls	r3, r3, #16
 80097d8:	431a      	orrs	r2, r3
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	061b      	lsls	r3, r3, #24
 80097de:	431a      	orrs	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	071b      	lsls	r3, r3, #28
 80097e4:	4925      	ldr	r1, [pc, #148]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d011      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	019a      	lsls	r2, r3, #6
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	041b      	lsls	r3, r3, #16
 8009804:	431a      	orrs	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	061b      	lsls	r3, r3, #24
 800980c:	431a      	orrs	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	071b      	lsls	r3, r3, #28
 8009814:	4919      	ldr	r1, [pc, #100]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009816:	4313      	orrs	r3, r2
 8009818:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800981c:	4b17      	ldr	r3, [pc, #92]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a16      	ldr	r2, [pc, #88]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009822:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009828:	f7fc f854 	bl	80058d4 <HAL_GetTick>
 800982c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800982e:	e008      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009830:	f7fc f850 	bl	80058d4 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b64      	cmp	r3, #100	@ 0x64
 800983c:	d901      	bls.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e0d7      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009842:	4b0e      	ldr	r3, [pc, #56]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0f0      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	2b01      	cmp	r3, #1
 8009852:	f040 80cd 	bne.w	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009856:	4b09      	ldr	r3, [pc, #36]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a08      	ldr	r2, [pc, #32]	@ (800987c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800985c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009860:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009862:	f7fc f837 	bl	80058d4 <HAL_GetTick>
 8009866:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009868:	e00a      	b.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800986a:	f7fc f833 	bl	80058d4 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	2b64      	cmp	r3, #100	@ 0x64
 8009876:	d903      	bls.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e0ba      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800987c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009880:	4b5e      	ldr	r3, [pc, #376]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800988c:	d0ed      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d009      	beq.n	80098b6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d02e      	beq.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d12a      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80098b6:	4b51      	ldr	r3, [pc, #324]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098bc:	0c1b      	lsrs	r3, r3, #16
 80098be:	f003 0303 	and.w	r3, r3, #3
 80098c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80098c4:	4b4d      	ldr	r3, [pc, #308]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098ca:	0f1b      	lsrs	r3, r3, #28
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	019a      	lsls	r2, r3, #6
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	041b      	lsls	r3, r3, #16
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	061b      	lsls	r3, r3, #24
 80098e4:	431a      	orrs	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	071b      	lsls	r3, r3, #28
 80098ea:	4944      	ldr	r1, [pc, #272]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098ec:	4313      	orrs	r3, r2
 80098ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80098f2:	4b42      	ldr	r3, [pc, #264]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009900:	3b01      	subs	r3, #1
 8009902:	021b      	lsls	r3, r3, #8
 8009904:	493d      	ldr	r1, [pc, #244]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009906:	4313      	orrs	r3, r2
 8009908:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009914:	2b00      	cmp	r3, #0
 8009916:	d022      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800991c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009920:	d11d      	bne.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009922:	4b36      	ldr	r3, [pc, #216]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009928:	0e1b      	lsrs	r3, r3, #24
 800992a:	f003 030f 	and.w	r3, r3, #15
 800992e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009930:	4b32      	ldr	r3, [pc, #200]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009936:	0f1b      	lsrs	r3, r3, #28
 8009938:	f003 0307 	and.w	r3, r3, #7
 800993c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	019a      	lsls	r2, r3, #6
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	041b      	lsls	r3, r3, #16
 800994a:	431a      	orrs	r2, r3
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	061b      	lsls	r3, r3, #24
 8009950:	431a      	orrs	r2, r3
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	071b      	lsls	r3, r3, #28
 8009956:	4929      	ldr	r1, [pc, #164]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009958:	4313      	orrs	r3, r2
 800995a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0308 	and.w	r3, r3, #8
 8009966:	2b00      	cmp	r3, #0
 8009968:	d028      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800996a:	4b24      	ldr	r3, [pc, #144]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800996c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009970:	0e1b      	lsrs	r3, r3, #24
 8009972:	f003 030f 	and.w	r3, r3, #15
 8009976:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009978:	4b20      	ldr	r3, [pc, #128]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800997a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997e:	0c1b      	lsrs	r3, r3, #16
 8009980:	f003 0303 	and.w	r3, r3, #3
 8009984:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	019a      	lsls	r2, r3, #6
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	041b      	lsls	r3, r3, #16
 8009990:	431a      	orrs	r2, r3
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	061b      	lsls	r3, r3, #24
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	071b      	lsls	r3, r3, #28
 800999e:	4917      	ldr	r1, [pc, #92]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80099a6:	4b15      	ldr	r3, [pc, #84]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b4:	4911      	ldr	r1, [pc, #68]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80099bc:	4b0f      	ldr	r3, [pc, #60]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a0e      	ldr	r2, [pc, #56]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099c8:	f7fb ff84 	bl	80058d4 <HAL_GetTick>
 80099cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099ce:	e008      	b.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80099d0:	f7fb ff80 	bl	80058d4 <HAL_GetTick>
 80099d4:	4602      	mov	r2, r0
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	1ad3      	subs	r3, r2, r3
 80099da:	2b64      	cmp	r3, #100	@ 0x64
 80099dc:	d901      	bls.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e007      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80099e2:	4b06      	ldr	r3, [pc, #24]	@ (80099fc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099ee:	d1ef      	bne.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3720      	adds	r7, #32
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	40023800 	.word	0x40023800

08009a00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8009a10:	2300      	movs	r3, #0
 8009a12:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a1e:	f040 808d 	bne.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009a22:	4b93      	ldr	r3, [pc, #588]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a28:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009a30:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a38:	d07c      	beq.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a40:	d87b      	bhi.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d004      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a4e:	d039      	beq.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009a50:	e073      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009a52:	4b87      	ldr	r3, [pc, #540]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d108      	bne.n	8009a70 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009a5e:	4b84      	ldr	r3, [pc, #528]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a66:	4a83      	ldr	r2, [pc, #524]	@ (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a6c:	613b      	str	r3, [r7, #16]
 8009a6e:	e007      	b.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009a70:	4b7f      	ldr	r3, [pc, #508]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a78:	4a7f      	ldr	r2, [pc, #508]	@ (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a7e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009a80:	4b7b      	ldr	r3, [pc, #492]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a86:	0e1b      	lsrs	r3, r3, #24
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009a8e:	4b78      	ldr	r3, [pc, #480]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a94:	099b      	lsrs	r3, r3, #6
 8009a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	fb03 f202 	mul.w	r2, r3, r2
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aa6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009aa8:	4b71      	ldr	r3, [pc, #452]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009aae:	0a1b      	lsrs	r3, r3, #8
 8009ab0:	f003 031f 	and.w	r3, r3, #31
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ac0:	617b      	str	r3, [r7, #20]
        break;
 8009ac2:	e03b      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d108      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009ad0:	4b67      	ldr	r3, [pc, #412]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ad8:	4a66      	ldr	r2, [pc, #408]	@ (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	e007      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009ae2:	4b63      	ldr	r3, [pc, #396]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009aea:	4a63      	ldr	r2, [pc, #396]	@ (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009af2:	4b5f      	ldr	r3, [pc, #380]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009af8:	0e1b      	lsrs	r3, r3, #24
 8009afa:	f003 030f 	and.w	r3, r3, #15
 8009afe:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009b00:	4b5b      	ldr	r3, [pc, #364]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b06:	099b      	lsrs	r3, r3, #6
 8009b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	fb03 f202 	mul.w	r2, r3, r2
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b18:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009b1a:	4b55      	ldr	r3, [pc, #340]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b20:	f003 031f 	and.w	r3, r3, #31
 8009b24:	3301      	adds	r3, #1
 8009b26:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b30:	617b      	str	r3, [r7, #20]
        break;
 8009b32:	e003      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b34:	4b51      	ldr	r3, [pc, #324]	@ (8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009b36:	617b      	str	r3, [r7, #20]
        break;
 8009b38:	e000      	b.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8009b3a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b42:	f040 808d 	bne.w	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009b46:	4b4a      	ldr	r3, [pc, #296]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b4c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009b54:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b5c:	d07c      	beq.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b64:	d87b      	bhi.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d004      	beq.n	8009b76 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b72:	d039      	beq.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009b74:	e073      	b.n	8009c5e <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009b76:	4b3e      	ldr	r3, [pc, #248]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d108      	bne.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009b82:	4b3b      	ldr	r3, [pc, #236]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b8a:	4a3a      	ldr	r2, [pc, #232]	@ (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b90:	613b      	str	r3, [r7, #16]
 8009b92:	e007      	b.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009b94:	4b36      	ldr	r3, [pc, #216]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b9c:	4a36      	ldr	r2, [pc, #216]	@ (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ba2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009ba4:	4b32      	ldr	r3, [pc, #200]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009baa:	0e1b      	lsrs	r3, r3, #24
 8009bac:	f003 030f 	and.w	r3, r3, #15
 8009bb0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb8:	099b      	lsrs	r3, r3, #6
 8009bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	fb03 f202 	mul.w	r2, r3, r2
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009bcc:	4b28      	ldr	r3, [pc, #160]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bd2:	0a1b      	lsrs	r3, r3, #8
 8009bd4:	f003 031f 	and.w	r3, r3, #31
 8009bd8:	3301      	adds	r3, #1
 8009bda:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009bdc:	697a      	ldr	r2, [r7, #20]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009be4:	617b      	str	r3, [r7, #20]
        break;
 8009be6:	e03b      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009be8:	4b21      	ldr	r3, [pc, #132]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d108      	bne.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c02:	613b      	str	r3, [r7, #16]
 8009c04:	e007      	b.n	8009c16 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009c06:	4b1a      	ldr	r3, [pc, #104]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8009c78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c14:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009c16:	4b16      	ldr	r3, [pc, #88]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c1c:	0e1b      	lsrs	r3, r3, #24
 8009c1e:	f003 030f 	and.w	r3, r3, #15
 8009c22:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009c24:	4b12      	ldr	r3, [pc, #72]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c2a:	099b      	lsrs	r3, r3, #6
 8009c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	fb03 f202 	mul.w	r2, r3, r2
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c44:	f003 031f 	and.w	r3, r3, #31
 8009c48:	3301      	adds	r3, #1
 8009c4a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c54:	617b      	str	r3, [r7, #20]
        break;
 8009c56:	e003      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009c58:	4b08      	ldr	r3, [pc, #32]	@ (8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009c5a:	617b      	str	r3, [r7, #20]
        break;
 8009c5c:	e000      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 8009c5e:	bf00      	nop
      }
    }
  }

  return frequency;
 8009c60:	697b      	ldr	r3, [r7, #20]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	371c      	adds	r7, #28
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	40023800 	.word	0x40023800
 8009c74:	00f42400 	.word	0x00f42400
 8009c78:	017d7840 	.word	0x017d7840
 8009c7c:	00bb8000 	.word	0x00bb8000

08009c80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d101      	bne.n	8009c9e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e156      	b.n	8009f4c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f7f9 fc5a 	bl	800356c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 f95b 	bl	8009f7c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d00c      	beq.n	8009ce8 <HAL_SAI_Init+0x68>
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d80d      	bhi.n	8009cee <HAL_SAI_Init+0x6e>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <HAL_SAI_Init+0x5c>
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d003      	beq.n	8009ce2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009cda:	e008      	b.n	8009cee <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	61fb      	str	r3, [r7, #28]
      break;
 8009ce0:	e006      	b.n	8009cf0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009ce2:	2310      	movs	r3, #16
 8009ce4:	61fb      	str	r3, [r7, #28]
      break;
 8009ce6:	e003      	b.n	8009cf0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009ce8:	2320      	movs	r3, #32
 8009cea:	61fb      	str	r3, [r7, #28]
      break;
 8009cec:	e000      	b.n	8009cf0 <HAL_SAI_Init+0x70>
      break;
 8009cee:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d81e      	bhi.n	8009d36 <HAL_SAI_Init+0xb6>
 8009cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8009d00 <HAL_SAI_Init+0x80>)
 8009cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfe:	bf00      	nop
 8009d00:	08009d11 	.word	0x08009d11
 8009d04:	08009d17 	.word	0x08009d17
 8009d08:	08009d1f 	.word	0x08009d1f
 8009d0c:	08009d27 	.word	0x08009d27
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d14:	e010      	b.n	8009d38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d1a:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d1c:	e00c      	b.n	8009d38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009d1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d22:	617b      	str	r3, [r7, #20]
    }
    break;
 8009d24:	e008      	b.n	8009d38 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009d26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009d2a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	f043 0301 	orr.w	r3, r3, #1
 8009d32:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009d34:	e000      	b.n	8009d38 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009d36:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a85      	ldr	r2, [pc, #532]	@ (8009f54 <HAL_SAI_Init+0x2d4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d004      	beq.n	8009d4c <HAL_SAI_Init+0xcc>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a84      	ldr	r2, [pc, #528]	@ (8009f58 <HAL_SAI_Init+0x2d8>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d103      	bne.n	8009d54 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009d4c:	4a83      	ldr	r2, [pc, #524]	@ (8009f5c <HAL_SAI_Init+0x2dc>)
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	6013      	str	r3, [r2, #0]
 8009d52:	e002      	b.n	8009d5a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009d54:	4a82      	ldr	r2, [pc, #520]	@ (8009f60 <HAL_SAI_Init+0x2e0>)
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d04c      	beq.n	8009dfc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a7a      	ldr	r2, [pc, #488]	@ (8009f54 <HAL_SAI_Init+0x2d4>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d004      	beq.n	8009d7a <HAL_SAI_Init+0xfa>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a78      	ldr	r2, [pc, #480]	@ (8009f58 <HAL_SAI_Init+0x2d8>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d104      	bne.n	8009d84 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009d7a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009d7e:	f7ff fe3f 	bl	8009a00 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d82:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a76      	ldr	r2, [pc, #472]	@ (8009f64 <HAL_SAI_Init+0x2e4>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d004      	beq.n	8009d98 <HAL_SAI_Init+0x118>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a75      	ldr	r2, [pc, #468]	@ (8009f68 <HAL_SAI_Init+0x2e8>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d104      	bne.n	8009da2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009d98:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009d9c:	f7ff fe30 	bl	8009a00 <HAL_RCCEx_GetPeriphCLKFreq>
 8009da0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009da2:	693a      	ldr	r2, [r7, #16]
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	005b      	lsls	r3, r3, #1
 8009dac:	461a      	mov	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	025b      	lsls	r3, r3, #9
 8009db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	4a6b      	ldr	r2, [pc, #428]	@ (8009f6c <HAL_SAI_Init+0x2ec>)
 8009dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc2:	08da      	lsrs	r2, r3, #3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009dc8:	68f9      	ldr	r1, [r7, #12]
 8009dca:	4b68      	ldr	r3, [pc, #416]	@ (8009f6c <HAL_SAI_Init+0x2ec>)
 8009dcc:	fba3 2301 	umull	r2, r3, r3, r1
 8009dd0:	08da      	lsrs	r2, r3, #3
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	1aca      	subs	r2, r1, r3
 8009ddc:	2a08      	cmp	r2, #8
 8009dde:	d904      	bls.n	8009dea <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d104      	bne.n	8009dfc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a1b      	ldr	r3, [r3, #32]
 8009df6:	085a      	lsrs	r2, r3, #1
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <HAL_SAI_Init+0x18c>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d109      	bne.n	8009e20 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d101      	bne.n	8009e18 <HAL_SAI_Init+0x198>
 8009e14:	2300      	movs	r3, #0
 8009e16:	e001      	b.n	8009e1c <HAL_SAI_Init+0x19c>
 8009e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e1c:	61bb      	str	r3, [r7, #24]
 8009e1e:	e008      	b.n	8009e32 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d102      	bne.n	8009e2e <HAL_SAI_Init+0x1ae>
 8009e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e2c:	e000      	b.n	8009e30 <HAL_SAI_Init+0x1b0>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6819      	ldr	r1, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8009f70 <HAL_SAI_Init+0x2f0>)
 8009e3e:	400b      	ands	r3, r1
 8009e40:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	6819      	ldr	r1, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e56:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8009e6a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009e76:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	051b      	lsls	r3, r3, #20
 8009e7e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	430a      	orrs	r2, r1
 8009e86:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6859      	ldr	r1, [r3, #4]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	4b38      	ldr	r3, [pc, #224]	@ (8009f74 <HAL_SAI_Init+0x2f4>)
 8009e94:	400b      	ands	r3, r1
 8009e96:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6859      	ldr	r1, [r3, #4]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	699a      	ldr	r2, [r3, #24]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eac:	431a      	orrs	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	430a      	orrs	r2, r1
 8009eb4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6899      	ldr	r1, [r3, #8]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8009f78 <HAL_SAI_Init+0x2f8>)
 8009ec2:	400b      	ands	r3, r1
 8009ec4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6899      	ldr	r1, [r3, #8]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009ed6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8009edc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8009ee2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009eec:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68d9      	ldr	r1, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009f04:	400b      	ands	r3, r1
 8009f06:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68d9      	ldr	r1, [r3, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f16:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f1c:	041b      	lsls	r3, r3, #16
 8009f1e:	431a      	orrs	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f24:	3b01      	subs	r3, #1
 8009f26:	021b      	lsls	r3, r3, #8
 8009f28:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3720      	adds	r7, #32
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	40015804 	.word	0x40015804
 8009f58:	40015824 	.word	0x40015824
 8009f5c:	40015800 	.word	0x40015800
 8009f60:	40015c00 	.word	0x40015c00
 8009f64:	40015c04 	.word	0x40015c04
 8009f68:	40015c24 	.word	0x40015c24
 8009f6c:	cccccccd 	.word	0xcccccccd
 8009f70:	ff05c010 	.word	0xff05c010
 8009f74:	ffff1ff0 	.word	0xffff1ff0
 8009f78:	fff88000 	.word	0xfff88000

08009f7c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b085      	sub	sp, #20
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009f84:	4b17      	ldr	r3, [pc, #92]	@ (8009fe4 <SAI_Disable+0x68>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a17      	ldr	r2, [pc, #92]	@ (8009fe8 <SAI_Disable+0x6c>)
 8009f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f8e:	0b1b      	lsrs	r3, r3, #12
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009f94:	2300      	movs	r3, #0
 8009f96:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8009fa6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	1e5a      	subs	r2, r3, #1
 8009fac:	60fa      	str	r2, [r7, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10a      	bne.n	8009fc8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	72fb      	strb	r3, [r7, #11]
      break;
 8009fc6:	e006      	b.n	8009fd6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1e8      	bne.n	8009fa8 <SAI_Disable+0x2c>

  return status;
 8009fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	20000048 	.word	0x20000048
 8009fe8:	95cbec1b 	.word	0x95cbec1b

08009fec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e022      	b.n	800a044 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b00      	cmp	r3, #0
 800a008:	d105      	bne.n	800a016 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7f9 fba9 	bl	8003768 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2203      	movs	r2, #3
 800a01a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 f814 	bl	800a04c <HAL_SD_InitCard>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e00a      	b.n	800a044 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a04c:	b5b0      	push	{r4, r5, r7, lr}
 800a04e:	b08e      	sub	sp, #56	@ 0x38
 800a050:	af04      	add	r7, sp, #16
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a054:	2300      	movs	r3, #0
 800a056:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a058:	2300      	movs	r3, #0
 800a05a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a05c:	2300      	movs	r3, #0
 800a05e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a060:	2300      	movs	r3, #0
 800a062:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a064:	2300      	movs	r3, #0
 800a066:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a068:	2376      	movs	r3, #118	@ 0x76
 800a06a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681d      	ldr	r5, [r3, #0]
 800a070:	466c      	mov	r4, sp
 800a072:	f107 0314 	add.w	r3, r7, #20
 800a076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a07a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a07e:	f107 0308 	add.w	r3, r7, #8
 800a082:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a084:	4628      	mov	r0, r5
 800a086:	f002 f8fb 	bl	800c280 <SDMMC_Init>
 800a08a:	4603      	mov	r3, r0
 800a08c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e059      	b.n	800a150 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0aa:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f002 f911 	bl	800c2d8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0c4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a0c6:	2002      	movs	r0, #2
 800a0c8:	f7fb fc10 	bl	80058ec <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fd75 	bl	800abbc <SD_PowerON>
 800a0d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00b      	beq.n	800a0f2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	431a      	orrs	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e02e      	b.n	800a150 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fc94 	bl	800aa20 <SD_InitCard>
 800a0f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00b      	beq.n	800a118 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e01b      	b.n	800a150 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a120:	4618      	mov	r0, r3
 800a122:	f002 f96b 	bl	800c3fc <SDMMC_CmdBlockLength>
 800a126:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a128:	6a3b      	ldr	r3, [r7, #32]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00f      	beq.n	800a14e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a09      	ldr	r2, [pc, #36]	@ (800a158 <HAL_SD_InitCard+0x10c>)
 800a134:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	431a      	orrs	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e000      	b.n	800a150 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3728      	adds	r7, #40	@ 0x28
 800a154:	46bd      	mov	sp, r7
 800a156:	bdb0      	pop	{r4, r5, r7, pc}
 800a158:	004005ff 	.word	0x004005ff

0800a15c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b08c      	sub	sp, #48	@ 0x30
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
 800a168:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d107      	bne.n	800a184 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a178:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e0c3      	b.n	800a30c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	f040 80bc 	bne.w	800a30a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	441a      	add	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d907      	bls.n	800a1b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1aa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e0aa      	b.n	800a30c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a1d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1da:	4a4e      	ldr	r2, [pc, #312]	@ (800a314 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a1dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e2:	4a4d      	ldr	r2, [pc, #308]	@ (800a318 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a1e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	430a      	orrs	r2, r1
 800a210:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3380      	adds	r3, #128	@ 0x80
 800a21c:	4619      	mov	r1, r3
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	025b      	lsls	r3, r3, #9
 800a224:	089b      	lsrs	r3, r3, #2
 800a226:	f7fc f96d 	bl	8006504 <HAL_DMA_Start_IT>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d017      	beq.n	800a260 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800a23e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a35      	ldr	r2, [pc, #212]	@ (800a31c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a246:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a24c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2201      	movs	r2, #1
 800a258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e055      	b.n	800a30c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f042 0208 	orr.w	r2, r2, #8
 800a26e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a274:	2b01      	cmp	r3, #1
 800a276:	d002      	beq.n	800a27e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	025b      	lsls	r3, r3, #9
 800a27c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a27e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a282:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	025b      	lsls	r3, r3, #9
 800a288:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a28a:	2390      	movs	r3, #144	@ 0x90
 800a28c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a28e:	2302      	movs	r3, #2
 800a290:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a292:	2300      	movs	r3, #0
 800a294:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a296:	2301      	movs	r3, #1
 800a298:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f107 0210 	add.w	r2, r7, #16
 800a2a2:	4611      	mov	r1, r2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f002 f87d 	bl	800c3a4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d90a      	bls.n	800a2c6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2282      	movs	r2, #130	@ 0x82
 800a2b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f002 f8e1 	bl	800c484 <SDMMC_CmdReadMultiBlock>
 800a2c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a2c4:	e009      	b.n	800a2da <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2281      	movs	r2, #129	@ 0x81
 800a2ca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f002 f8b4 	bl	800c440 <SDMMC_CmdReadSingleBlock>
 800a2d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d012      	beq.n	800a306 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a0d      	ldr	r2, [pc, #52]	@ (800a31c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a2e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	e002      	b.n	800a30c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a306:	2300      	movs	r3, #0
 800a308:	e000      	b.n	800a30c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a30a:	2302      	movs	r3, #2
  }
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3730      	adds	r7, #48	@ 0x30
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	0800a90b 	.word	0x0800a90b
 800a318:	0800a97d 	.word	0x0800a97d
 800a31c:	004005ff 	.word	0x004005ff

0800a320 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08c      	sub	sp, #48	@ 0x30
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d107      	bne.n	800a348 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a33c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e0c6      	b.n	800a4d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	2b01      	cmp	r3, #1
 800a352:	f040 80bf 	bne.w	800a4d4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a35c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	441a      	add	r2, r3
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a366:	429a      	cmp	r2, r3
 800a368:	d907      	bls.n	800a37a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e0ad      	b.n	800a4d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2203      	movs	r2, #3
 800a37e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2200      	movs	r2, #0
 800a388:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f042 021a 	orr.w	r2, r2, #26
 800a398:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a39e:	4a50      	ldr	r2, [pc, #320]	@ (800a4e0 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a3a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3a6:	4a4f      	ldr	r2, [pc, #316]	@ (800a4e4 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a3a8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d002      	beq.n	800a3c0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3bc:	025b      	lsls	r3, r3, #9
 800a3be:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d90a      	bls.n	800a3dc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	22a0      	movs	r2, #160	@ 0xa0
 800a3ca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f002 f89a 	bl	800c50c <SDMMC_CmdWriteMultiBlock>
 800a3d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a3da:	e009      	b.n	800a3f0 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2290      	movs	r2, #144	@ 0x90
 800a3e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f002 f86d 	bl	800c4c8 <SDMMC_CmdWriteSingleBlock>
 800a3ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d012      	beq.n	800a41c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a3b      	ldr	r2, [pc, #236]	@ (800a4e8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a3fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a404:	431a      	orrs	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e05c      	b.n	800a4d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f042 0208 	orr.w	r2, r2, #8
 800a42a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a430:	2240      	movs	r2, #64	@ 0x40
 800a432:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a444:	689a      	ldr	r2, [r3, #8]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3380      	adds	r3, #128	@ 0x80
 800a45c:	461a      	mov	r2, r3
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	025b      	lsls	r3, r3, #9
 800a462:	089b      	lsrs	r3, r3, #2
 800a464:	f7fc f84e 	bl	8006504 <HAL_DMA_Start_IT>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d01a      	beq.n	800a4a4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 021a 	bic.w	r2, r2, #26
 800a47c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a19      	ldr	r2, [pc, #100]	@ (800a4e8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a484:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e018      	b.n	800a4d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4a8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	025b      	lsls	r3, r3, #9
 800a4ae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a4b0:	2390      	movs	r3, #144	@ 0x90
 800a4b2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f107 0210 	add.w	r2, r7, #16
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f001 ff6a 	bl	800c3a4 <SDMMC_ConfigData>

      return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	e000      	b.n	800a4d6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a4d4:	2302      	movs	r3, #2
  }
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3730      	adds	r7, #48	@ 0x30
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	bf00      	nop
 800a4e0:	0800a8e1 	.word	0x0800a8e1
 800a4e4:	0800a97d 	.word	0x0800a97d
 800a4e8:	004005ff 	.word	0x004005ff

0800a4ec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a50e:	0f9b      	lsrs	r3, r3, #30
 800a510:	b2da      	uxtb	r2, r3
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a51a:	0e9b      	lsrs	r3, r3, #26
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f003 030f 	and.w	r3, r3, #15
 800a522:	b2da      	uxtb	r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a52c:	0e1b      	lsrs	r3, r3, #24
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	f003 0303 	and.w	r3, r3, #3
 800a534:	b2da      	uxtb	r2, r3
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a53e:	0c1b      	lsrs	r3, r3, #16
 800a540:	b2da      	uxtb	r2, r3
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a54a:	0a1b      	lsrs	r3, r3, #8
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a556:	b2da      	uxtb	r2, r3
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a560:	0d1b      	lsrs	r3, r3, #20
 800a562:	b29a      	uxth	r2, r3
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a56c:	0c1b      	lsrs	r3, r3, #16
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	b2da      	uxtb	r2, r3
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a57e:	0bdb      	lsrs	r3, r3, #15
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	b2da      	uxtb	r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a590:	0b9b      	lsrs	r3, r3, #14
 800a592:	b2db      	uxtb	r3, r3
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5a2:	0b5b      	lsrs	r3, r3, #13
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	f003 0301 	and.w	r3, r3, #1
 800a5aa:	b2da      	uxtb	r2, r3
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5b4:	0b1b      	lsrs	r3, r3, #12
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d163      	bne.n	800a698 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a5d4:	009a      	lsls	r2, r3, #2
 800a5d6:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a5da:	4013      	ands	r3, r2
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a5e0:	0f92      	lsrs	r2, r2, #30
 800a5e2:	431a      	orrs	r2, r3
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5ec:	0edb      	lsrs	r3, r3, #27
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	f003 0307 	and.w	r3, r3, #7
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5fe:	0e1b      	lsrs	r3, r3, #24
 800a600:	b2db      	uxtb	r3, r3
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	b2da      	uxtb	r2, r3
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a610:	0d5b      	lsrs	r3, r3, #21
 800a612:	b2db      	uxtb	r3, r3
 800a614:	f003 0307 	and.w	r3, r3, #7
 800a618:	b2da      	uxtb	r2, r3
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a622:	0c9b      	lsrs	r3, r3, #18
 800a624:	b2db      	uxtb	r3, r3
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a634:	0bdb      	lsrs	r3, r3, #15
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f003 0307 	and.w	r3, r3, #7
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	7e1b      	ldrb	r3, [r3, #24]
 800a650:	b2db      	uxtb	r3, r3
 800a652:	f003 0307 	and.w	r3, r3, #7
 800a656:	3302      	adds	r3, #2
 800a658:	2201      	movs	r2, #1
 800a65a:	fa02 f303 	lsl.w	r3, r2, r3
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a662:	fb03 f202 	mul.w	r2, r3, r2
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	7a1b      	ldrb	r3, [r3, #8]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	f003 030f 	and.w	r3, r3, #15
 800a674:	2201      	movs	r2, #1
 800a676:	409a      	lsls	r2, r3
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a684:	0a52      	lsrs	r2, r2, #9
 800a686:	fb03 f202 	mul.w	r2, r3, r2
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a694:	661a      	str	r2, [r3, #96]	@ 0x60
 800a696:	e031      	b.n	800a6fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d11d      	bne.n	800a6dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a6a4:	041b      	lsls	r3, r3, #16
 800a6a6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6ae:	0c1b      	lsrs	r3, r3, #16
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	029a      	lsls	r2, r3, #10
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6d0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	661a      	str	r2, [r3, #96]	@ 0x60
 800a6da:	e00f      	b.n	800a6fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a58      	ldr	r2, [pc, #352]	@ (800a844 <HAL_SD_GetCardCSD+0x344>)
 800a6e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e09d      	b.n	800a838 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a700:	0b9b      	lsrs	r3, r3, #14
 800a702:	b2db      	uxtb	r3, r3
 800a704:	f003 0301 	and.w	r3, r3, #1
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a712:	09db      	lsrs	r3, r3, #7
 800a714:	b2db      	uxtb	r3, r3
 800a716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a724:	b2db      	uxtb	r3, r3
 800a726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a734:	0fdb      	lsrs	r3, r3, #31
 800a736:	b2da      	uxtb	r2, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a740:	0f5b      	lsrs	r3, r3, #29
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0303 	and.w	r3, r3, #3
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a752:	0e9b      	lsrs	r3, r3, #26
 800a754:	b2db      	uxtb	r3, r3
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a764:	0d9b      	lsrs	r3, r3, #22
 800a766:	b2db      	uxtb	r3, r3
 800a768:	f003 030f 	and.w	r3, r3, #15
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a776:	0d5b      	lsrs	r3, r3, #21
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a792:	0c1b      	lsrs	r3, r3, #16
 800a794:	b2db      	uxtb	r3, r3
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7a6:	0bdb      	lsrs	r3, r3, #15
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ba:	0b9b      	lsrs	r3, r3, #14
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7ce:	0b5b      	lsrs	r3, r3, #13
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7e2:	0b1b      	lsrs	r3, r3, #12
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	f003 0301 	and.w	r3, r3, #1
 800a7ea:	b2da      	uxtb	r2, r3
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7f6:	0a9b      	lsrs	r3, r3, #10
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a80a:	0a1b      	lsrs	r3, r3, #8
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f003 0303 	and.w	r3, r3, #3
 800a812:	b2da      	uxtb	r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a81e:	085b      	lsrs	r3, r3, #1
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr
 800a844:	004005ff 	.word	0x004005ff

0800a848 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a8ac:	f107 030c 	add.w	r3, r7, #12
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fa10 	bl	800acd8 <SD_SendStatus>
 800a8b8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	0a5b      	lsrs	r3, r3, #9
 800a8d0:	f003 030f 	and.w	r3, r3, #15
 800a8d4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a8d6:	693b      	ldr	r3, [r7, #16]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ec:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8fc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a8fe:	bf00      	nop
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a916:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a91c:	2b82      	cmp	r3, #130	@ 0x82
 800a91e:	d111      	bne.n	800a944 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4618      	mov	r0, r3
 800a926:	f001 fe13 	bl	800c550 <SDMMC_CmdStopTransfer>
 800a92a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d008      	beq.n	800a944 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	431a      	orrs	r2, r3
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f7ff fdd4 	bl	800a4ec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f022 0208 	bic.w	r2, r2, #8
 800a952:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a95c:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f002 fa17 	bl	800cda0 <HAL_SD_RxCpltCallback>
#endif
}
 800a972:	bf00      	nop
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
	...

0800a97c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a988:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7fb ffa4 	bl	80068d8 <HAL_DMA_GetError>
 800a990:	4603      	mov	r3, r0
 800a992:	2b02      	cmp	r3, #2
 800a994:	d03e      	beq.n	800aa14 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a99a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a99c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9a4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d002      	beq.n	800a9b2 <SD_DMAError+0x36>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d12d      	bne.n	800aa0e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a19      	ldr	r2, [pc, #100]	@ (800aa1c <SD_DMAError+0xa0>)
 800a9b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a9c8:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a9d6:	6978      	ldr	r0, [r7, #20]
 800a9d8:	f7ff ff62 	bl	800a8a0 <HAL_SD_GetCardState>
 800a9dc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b06      	cmp	r3, #6
 800a9e2:	d002      	beq.n	800a9ea <SD_DMAError+0x6e>
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2b05      	cmp	r3, #5
 800a9e8:	d10a      	bne.n	800aa00 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f001 fdae 	bl	800c550 <SDMMC_CmdStopTransfer>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	2201      	movs	r2, #1
 800aa04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aa0e:	6978      	ldr	r0, [r7, #20]
 800aa10:	f7ff fd6c 	bl	800a4ec <HAL_SD_ErrorCallback>
#endif
  }
}
 800aa14:	bf00      	nop
 800aa16:	3718      	adds	r7, #24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	004005ff 	.word	0x004005ff

0800aa20 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa20:	b5b0      	push	{r4, r5, r7, lr}
 800aa22:	b094      	sub	sp, #80	@ 0x50
 800aa24:	af04      	add	r7, sp, #16
 800aa26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f001 fc5f 	bl	800c2f4 <SDMMC_GetPowerState>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d102      	bne.n	800aa42 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa3c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800aa40:	e0b8      	b.n	800abb4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d02f      	beq.n	800aaaa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f001 fe46 	bl	800c6e0 <SDMMC_CmdSendCID>
 800aa54:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <SD_InitCard+0x40>
    {
      return errorstate;
 800aa5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa5e:	e0a9      	b.n	800abb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2100      	movs	r1, #0
 800aa66:	4618      	mov	r0, r3
 800aa68:	f001 fc89 	bl	800c37e <SDMMC_GetResponse>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2104      	movs	r1, #4
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 fc80 	bl	800c37e <SDMMC_GetResponse>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2108      	movs	r1, #8
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f001 fc77 	bl	800c37e <SDMMC_GetResponse>
 800aa90:	4602      	mov	r2, r0
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	210c      	movs	r1, #12
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f001 fc6e 	bl	800c37e <SDMMC_GetResponse>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d00d      	beq.n	800aace <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f107 020e 	add.w	r2, r7, #14
 800aaba:	4611      	mov	r1, r2
 800aabc:	4618      	mov	r0, r3
 800aabe:	f001 fe4c 	bl	800c75a <SDMMC_CmdSetRelAdd>
 800aac2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <SD_InitCard+0xae>
    {
      return errorstate;
 800aaca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aacc:	e072      	b.n	800abb4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d036      	beq.n	800ab44 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800aad6:	89fb      	ldrh	r3, [r7, #14]
 800aad8:	461a      	mov	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aae6:	041b      	lsls	r3, r3, #16
 800aae8:	4619      	mov	r1, r3
 800aaea:	4610      	mov	r0, r2
 800aaec:	f001 fe16 	bl	800c71c <SDMMC_CmdSendCSD>
 800aaf0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <SD_InitCard+0xdc>
    {
      return errorstate;
 800aaf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aafa:	e05b      	b.n	800abb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2100      	movs	r1, #0
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 fc3b 	bl	800c37e <SDMMC_GetResponse>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2104      	movs	r1, #4
 800ab14:	4618      	mov	r0, r3
 800ab16:	f001 fc32 	bl	800c37e <SDMMC_GetResponse>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2108      	movs	r1, #8
 800ab26:	4618      	mov	r0, r3
 800ab28:	f001 fc29 	bl	800c37e <SDMMC_GetResponse>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	210c      	movs	r1, #12
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 fc20 	bl	800c37e <SDMMC_GetResponse>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2104      	movs	r1, #4
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f001 fc17 	bl	800c37e <SDMMC_GetResponse>
 800ab50:	4603      	mov	r3, r0
 800ab52:	0d1a      	lsrs	r2, r3, #20
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ab58:	f107 0310 	add.w	r3, r7, #16
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fcce 	bl	800a500 <HAL_SD_GetCardCSD>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d002      	beq.n	800ab70 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ab6e:	e021      	b.n	800abb4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6819      	ldr	r1, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab78:	041b      	lsls	r3, r3, #16
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	461c      	mov	r4, r3
 800ab7e:	4615      	mov	r5, r2
 800ab80:	4622      	mov	r2, r4
 800ab82:	462b      	mov	r3, r5
 800ab84:	4608      	mov	r0, r1
 800ab86:	f001 fd05 	bl	800c594 <SDMMC_CmdSelDesel>
 800ab8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <SD_InitCard+0x176>
  {
    return errorstate;
 800ab92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab94:	e00e      	b.n	800abb4 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681d      	ldr	r5, [r3, #0]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	466c      	mov	r4, sp
 800ab9e:	f103 0210 	add.w	r2, r3, #16
 800aba2:	ca07      	ldmia	r2, {r0, r1, r2}
 800aba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aba8:	3304      	adds	r3, #4
 800abaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abac:	4628      	mov	r0, r5
 800abae:	f001 fb67 	bl	800c280 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800abb2:	2300      	movs	r3, #0
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3740      	adds	r7, #64	@ 0x40
 800abb8:	46bd      	mov	sp, r7
 800abba:	bdb0      	pop	{r4, r5, r7, pc}

0800abbc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800abc8:	2300      	movs	r3, #0
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	2300      	movs	r3, #0
 800abce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 fd00 	bl	800c5da <SDMMC_CmdGoIdleState>
 800abda:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	e072      	b.n	800accc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4618      	mov	r0, r3
 800abec:	f001 fd13 	bl	800c616 <SDMMC_CmdOperCond>
 800abf0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00d      	beq.n	800ac14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f001 fce9 	bl	800c5da <SDMMC_CmdGoIdleState>
 800ac08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d004      	beq.n	800ac1a <SD_PowerON+0x5e>
    {
      return errorstate;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	e05b      	b.n	800accc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d137      	bne.n	800ac92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2100      	movs	r1, #0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f001 fd13 	bl	800c654 <SDMMC_CmdAppCommand>
 800ac2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d02d      	beq.n	800ac92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac36:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ac3a:	e047      	b.n	800accc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2100      	movs	r1, #0
 800ac42:	4618      	mov	r0, r3
 800ac44:	f001 fd06 	bl	800c654 <SDMMC_CmdAppCommand>
 800ac48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d001      	beq.n	800ac54 <SD_PowerON+0x98>
    {
      return errorstate;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	e03b      	b.n	800accc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	491e      	ldr	r1, [pc, #120]	@ (800acd4 <SD_PowerON+0x118>)
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f001 fd1c 	bl	800c698 <SDMMC_CmdAppOperCommand>
 800ac60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac68:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ac6c:	e02e      	b.n	800accc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2100      	movs	r1, #0
 800ac74:	4618      	mov	r0, r3
 800ac76:	f001 fb82 	bl	800c37e <SDMMC_GetResponse>
 800ac7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	0fdb      	lsrs	r3, r3, #31
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d101      	bne.n	800ac88 <SD_PowerON+0xcc>
 800ac84:	2301      	movs	r3, #1
 800ac86:	e000      	b.n	800ac8a <SD_PowerON+0xce>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	613b      	str	r3, [r7, #16]

    count++;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d802      	bhi.n	800aca2 <SD_PowerON+0xe6>
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0cc      	beq.n	800ac3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d902      	bls.n	800acb2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800acac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800acb0:	e00c      	b.n	800accc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2201      	movs	r2, #1
 800acc0:	645a      	str	r2, [r3, #68]	@ 0x44
 800acc2:	e002      	b.n	800acca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3718      	adds	r7, #24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	c1100000 	.word	0xc1100000

0800acd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ace8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800acec:	e018      	b.n	800ad20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acf6:	041b      	lsls	r3, r3, #16
 800acf8:	4619      	mov	r1, r3
 800acfa:	4610      	mov	r0, r2
 800acfc:	f001 fd4e 	bl	800c79c <SDMMC_CmdSendStatus>
 800ad00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	e009      	b.n	800ad20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2100      	movs	r1, #0
 800ad12:	4618      	mov	r0, r3
 800ad14:	f001 fb33 	bl	800c37e <SDMMC_GetResponse>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e025      	b.n	800ad88 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d106      	bne.n	800ad56 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7f6 fa93 	bl	800127c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2202      	movs	r2, #2
 800ad5a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	3304      	adds	r3, #4
 800ad66:	4619      	mov	r1, r3
 800ad68:	4610      	mov	r0, r2
 800ad6a:	f001 f987 	bl	800c07c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	461a      	mov	r2, r3
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	f001 f9db 	bl	800c134 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ada2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ada4:	7dfb      	ldrb	r3, [r7, #23]
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d101      	bne.n	800adae <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800adaa:	2302      	movs	r3, #2
 800adac:	e021      	b.n	800adf2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800adae:	7dfb      	ldrb	r3, [r7, #23]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d002      	beq.n	800adba <HAL_SDRAM_SendCommand+0x2a>
 800adb4:	7dfb      	ldrb	r3, [r7, #23]
 800adb6:	2b05      	cmp	r3, #5
 800adb8:	d118      	bne.n	800adec <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2202      	movs	r2, #2
 800adbe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	68b9      	ldr	r1, [r7, #8]
 800adca:	4618      	mov	r0, r3
 800adcc:	f001 fa1c 	bl	800c208 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d104      	bne.n	800ade2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2205      	movs	r2, #5
 800addc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ade0:	e006      	b.n	800adf0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800adea:	e001      	b.n	800adf0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e000      	b.n	800adf2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b082      	sub	sp, #8
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d101      	bne.n	800ae14 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ae10:	2302      	movs	r3, #2
 800ae12:	e016      	b.n	800ae42 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d10f      	bne.n	800ae40 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2202      	movs	r2, #2
 800ae24:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f001 fa0e 	bl	800c250 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	e000      	b.n	800ae42 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800ae40:	2301      	movs	r3, #1
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e049      	b.n	800aef0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d106      	bne.n	800ae76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f7fa fc13 	bl	800569c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2202      	movs	r2, #2
 800ae7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4619      	mov	r1, r3
 800ae88:	4610      	mov	r0, r2
 800ae8a:	f000 fabf 	bl	800b40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2201      	movs	r2, #1
 800ae92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2201      	movs	r2, #1
 800aeca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2201      	movs	r2, #1
 800aed2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af06:	b2db      	uxtb	r3, r3
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d001      	beq.n	800af10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e054      	b.n	800afba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f042 0201 	orr.w	r2, r2, #1
 800af26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a26      	ldr	r2, [pc, #152]	@ (800afc8 <HAL_TIM_Base_Start_IT+0xd0>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d022      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0x80>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af3a:	d01d      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0x80>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a22      	ldr	r2, [pc, #136]	@ (800afcc <HAL_TIM_Base_Start_IT+0xd4>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d018      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0x80>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a21      	ldr	r2, [pc, #132]	@ (800afd0 <HAL_TIM_Base_Start_IT+0xd8>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d013      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0x80>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a1f      	ldr	r2, [pc, #124]	@ (800afd4 <HAL_TIM_Base_Start_IT+0xdc>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d00e      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0x80>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a1e      	ldr	r2, [pc, #120]	@ (800afd8 <HAL_TIM_Base_Start_IT+0xe0>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d009      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0x80>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a1c      	ldr	r2, [pc, #112]	@ (800afdc <HAL_TIM_Base_Start_IT+0xe4>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d004      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0x80>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a1b      	ldr	r2, [pc, #108]	@ (800afe0 <HAL_TIM_Base_Start_IT+0xe8>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d115      	bne.n	800afa4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689a      	ldr	r2, [r3, #8]
 800af7e:	4b19      	ldr	r3, [pc, #100]	@ (800afe4 <HAL_TIM_Base_Start_IT+0xec>)
 800af80:	4013      	ands	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2b06      	cmp	r3, #6
 800af88:	d015      	beq.n	800afb6 <HAL_TIM_Base_Start_IT+0xbe>
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af90:	d011      	beq.n	800afb6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f042 0201 	orr.w	r2, r2, #1
 800afa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afa2:	e008      	b.n	800afb6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f042 0201 	orr.w	r2, r2, #1
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	e000      	b.n	800afb8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800afb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	40010000 	.word	0x40010000
 800afcc:	40000400 	.word	0x40000400
 800afd0:	40000800 	.word	0x40000800
 800afd4:	40000c00 	.word	0x40000c00
 800afd8:	40010400 	.word	0x40010400
 800afdc:	40014000 	.word	0x40014000
 800afe0:	40001800 	.word	0x40001800
 800afe4:	00010007 	.word	0x00010007

0800afe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	691b      	ldr	r3, [r3, #16]
 800aff6:	f003 0302 	and.w	r3, r3, #2
 800affa:	2b02      	cmp	r3, #2
 800affc:	d122      	bne.n	800b044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68db      	ldr	r3, [r3, #12]
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b02      	cmp	r3, #2
 800b00a:	d11b      	bne.n	800b044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f06f 0202 	mvn.w	r2, #2
 800b014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	f003 0303 	and.w	r3, r3, #3
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f9d0 	bl	800b3d0 <HAL_TIM_IC_CaptureCallback>
 800b030:	e005      	b.n	800b03e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f9c2 	bl	800b3bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f9d3 	bl	800b3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	f003 0304 	and.w	r3, r3, #4
 800b04e:	2b04      	cmp	r3, #4
 800b050:	d122      	bne.n	800b098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	f003 0304 	and.w	r3, r3, #4
 800b05c:	2b04      	cmp	r3, #4
 800b05e:	d11b      	bne.n	800b098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f06f 0204 	mvn.w	r2, #4
 800b068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2202      	movs	r2, #2
 800b06e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d003      	beq.n	800b086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f9a6 	bl	800b3d0 <HAL_TIM_IC_CaptureCallback>
 800b084:	e005      	b.n	800b092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f998 	bl	800b3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f9a9 	bl	800b3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	f003 0308 	and.w	r3, r3, #8
 800b0a2:	2b08      	cmp	r3, #8
 800b0a4:	d122      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	f003 0308 	and.w	r3, r3, #8
 800b0b0:	2b08      	cmp	r3, #8
 800b0b2:	d11b      	bne.n	800b0ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f06f 0208 	mvn.w	r2, #8
 800b0bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2204      	movs	r2, #4
 800b0c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	69db      	ldr	r3, [r3, #28]
 800b0ca:	f003 0303 	and.w	r3, r3, #3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d003      	beq.n	800b0da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f97c 	bl	800b3d0 <HAL_TIM_IC_CaptureCallback>
 800b0d8:	e005      	b.n	800b0e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f96e 	bl	800b3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f97f 	bl	800b3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	f003 0310 	and.w	r3, r3, #16
 800b0f6:	2b10      	cmp	r3, #16
 800b0f8:	d122      	bne.n	800b140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	f003 0310 	and.w	r3, r3, #16
 800b104:	2b10      	cmp	r3, #16
 800b106:	d11b      	bne.n	800b140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f06f 0210 	mvn.w	r2, #16
 800b110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2208      	movs	r2, #8
 800b116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b122:	2b00      	cmp	r3, #0
 800b124:	d003      	beq.n	800b12e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f952 	bl	800b3d0 <HAL_TIM_IC_CaptureCallback>
 800b12c:	e005      	b.n	800b13a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f944 	bl	800b3bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f955 	bl	800b3e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d10e      	bne.n	800b16c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d107      	bne.n	800b16c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f06f 0201 	mvn.w	r2, #1
 800b164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7f8 f940 	bl	80033ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b176:	2b80      	cmp	r3, #128	@ 0x80
 800b178:	d10e      	bne.n	800b198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b184:	2b80      	cmp	r3, #128	@ 0x80
 800b186:	d107      	bne.n	800b198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fb0c 	bl	800b7b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	691b      	ldr	r3, [r3, #16]
 800b19e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1a6:	d10e      	bne.n	800b1c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1b2:	2b80      	cmp	r3, #128	@ 0x80
 800b1b4:	d107      	bne.n	800b1c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b1be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 faff 	bl	800b7c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d0:	2b40      	cmp	r3, #64	@ 0x40
 800b1d2:	d10e      	bne.n	800b1f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1de:	2b40      	cmp	r3, #64	@ 0x40
 800b1e0:	d107      	bne.n	800b1f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f903 	bl	800b3f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	f003 0320 	and.w	r3, r3, #32
 800b1fc:	2b20      	cmp	r3, #32
 800b1fe:	d10e      	bne.n	800b21e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	f003 0320 	and.w	r3, r3, #32
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	d107      	bne.n	800b21e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f06f 0220 	mvn.w	r2, #32
 800b216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fabf 	bl	800b79c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b21e:	bf00      	nop
 800b220:	3708      	adds	r7, #8
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d101      	bne.n	800b244 <HAL_TIM_ConfigClockSource+0x1c>
 800b240:	2302      	movs	r3, #2
 800b242:	e0b4      	b.n	800b3ae <HAL_TIM_ConfigClockSource+0x186>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2202      	movs	r2, #2
 800b250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	4b56      	ldr	r3, [pc, #344]	@ (800b3b8 <HAL_TIM_ConfigClockSource+0x190>)
 800b260:	4013      	ands	r3, r2
 800b262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b26a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b27c:	d03e      	beq.n	800b2fc <HAL_TIM_ConfigClockSource+0xd4>
 800b27e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b282:	f200 8087 	bhi.w	800b394 <HAL_TIM_ConfigClockSource+0x16c>
 800b286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b28a:	f000 8086 	beq.w	800b39a <HAL_TIM_ConfigClockSource+0x172>
 800b28e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b292:	d87f      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x16c>
 800b294:	2b70      	cmp	r3, #112	@ 0x70
 800b296:	d01a      	beq.n	800b2ce <HAL_TIM_ConfigClockSource+0xa6>
 800b298:	2b70      	cmp	r3, #112	@ 0x70
 800b29a:	d87b      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x16c>
 800b29c:	2b60      	cmp	r3, #96	@ 0x60
 800b29e:	d050      	beq.n	800b342 <HAL_TIM_ConfigClockSource+0x11a>
 800b2a0:	2b60      	cmp	r3, #96	@ 0x60
 800b2a2:	d877      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x16c>
 800b2a4:	2b50      	cmp	r3, #80	@ 0x50
 800b2a6:	d03c      	beq.n	800b322 <HAL_TIM_ConfigClockSource+0xfa>
 800b2a8:	2b50      	cmp	r3, #80	@ 0x50
 800b2aa:	d873      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x16c>
 800b2ac:	2b40      	cmp	r3, #64	@ 0x40
 800b2ae:	d058      	beq.n	800b362 <HAL_TIM_ConfigClockSource+0x13a>
 800b2b0:	2b40      	cmp	r3, #64	@ 0x40
 800b2b2:	d86f      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x16c>
 800b2b4:	2b30      	cmp	r3, #48	@ 0x30
 800b2b6:	d064      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x15a>
 800b2b8:	2b30      	cmp	r3, #48	@ 0x30
 800b2ba:	d86b      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x16c>
 800b2bc:	2b20      	cmp	r3, #32
 800b2be:	d060      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x15a>
 800b2c0:	2b20      	cmp	r3, #32
 800b2c2:	d867      	bhi.n	800b394 <HAL_TIM_ConfigClockSource+0x16c>
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d05c      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x15a>
 800b2c8:	2b10      	cmp	r3, #16
 800b2ca:	d05a      	beq.n	800b382 <HAL_TIM_ConfigClockSource+0x15a>
 800b2cc:	e062      	b.n	800b394 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b2de:	f000 f9af 	bl	800b640 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b2f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	609a      	str	r2, [r3, #8]
      break;
 800b2fa:	e04f      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b30c:	f000 f998 	bl	800b640 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b31e:	609a      	str	r2, [r3, #8]
      break;
 800b320:	e03c      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b32e:	461a      	mov	r2, r3
 800b330:	f000 f90c 	bl	800b54c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2150      	movs	r1, #80	@ 0x50
 800b33a:	4618      	mov	r0, r3
 800b33c:	f000 f965 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b340:	e02c      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b34e:	461a      	mov	r2, r3
 800b350:	f000 f92b 	bl	800b5aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2160      	movs	r1, #96	@ 0x60
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 f955 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b360:	e01c      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b36e:	461a      	mov	r2, r3
 800b370:	f000 f8ec 	bl	800b54c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2140      	movs	r1, #64	@ 0x40
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 f945 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b380:	e00c      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f000 f93c 	bl	800b60a <TIM_ITRx_SetConfig>
      break;
 800b392:	e003      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	73fb      	strb	r3, [r7, #15]
      break;
 800b398:	e000      	b.n	800b39c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b39a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	fffeff88 	.word	0xfffeff88

0800b3bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b3d8:	bf00      	nop
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b400:	bf00      	nop
 800b402:	370c      	adds	r7, #12
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a40      	ldr	r2, [pc, #256]	@ (800b520 <TIM_Base_SetConfig+0x114>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d013      	beq.n	800b44c <TIM_Base_SetConfig+0x40>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b42a:	d00f      	beq.n	800b44c <TIM_Base_SetConfig+0x40>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a3d      	ldr	r2, [pc, #244]	@ (800b524 <TIM_Base_SetConfig+0x118>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00b      	beq.n	800b44c <TIM_Base_SetConfig+0x40>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a3c      	ldr	r2, [pc, #240]	@ (800b528 <TIM_Base_SetConfig+0x11c>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d007      	beq.n	800b44c <TIM_Base_SetConfig+0x40>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a3b      	ldr	r2, [pc, #236]	@ (800b52c <TIM_Base_SetConfig+0x120>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d003      	beq.n	800b44c <TIM_Base_SetConfig+0x40>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a3a      	ldr	r2, [pc, #232]	@ (800b530 <TIM_Base_SetConfig+0x124>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d108      	bne.n	800b45e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a2f      	ldr	r2, [pc, #188]	@ (800b520 <TIM_Base_SetConfig+0x114>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d02b      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b46c:	d027      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a2c      	ldr	r2, [pc, #176]	@ (800b524 <TIM_Base_SetConfig+0x118>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d023      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a2b      	ldr	r2, [pc, #172]	@ (800b528 <TIM_Base_SetConfig+0x11c>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d01f      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a2a      	ldr	r2, [pc, #168]	@ (800b52c <TIM_Base_SetConfig+0x120>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d01b      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a29      	ldr	r2, [pc, #164]	@ (800b530 <TIM_Base_SetConfig+0x124>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d017      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a28      	ldr	r2, [pc, #160]	@ (800b534 <TIM_Base_SetConfig+0x128>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d013      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a27      	ldr	r2, [pc, #156]	@ (800b538 <TIM_Base_SetConfig+0x12c>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d00f      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a26      	ldr	r2, [pc, #152]	@ (800b53c <TIM_Base_SetConfig+0x130>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d00b      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	4a25      	ldr	r2, [pc, #148]	@ (800b540 <TIM_Base_SetConfig+0x134>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d007      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a24      	ldr	r2, [pc, #144]	@ (800b544 <TIM_Base_SetConfig+0x138>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d003      	beq.n	800b4be <TIM_Base_SetConfig+0xb2>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a23      	ldr	r2, [pc, #140]	@ (800b548 <TIM_Base_SetConfig+0x13c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d108      	bne.n	800b4d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b4c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4a0a      	ldr	r2, [pc, #40]	@ (800b520 <TIM_Base_SetConfig+0x114>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d003      	beq.n	800b504 <TIM_Base_SetConfig+0xf8>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	4a0c      	ldr	r2, [pc, #48]	@ (800b530 <TIM_Base_SetConfig+0x124>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d103      	bne.n	800b50c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	691a      	ldr	r2, [r3, #16]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	615a      	str	r2, [r3, #20]
}
 800b512:	bf00      	nop
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	40010000 	.word	0x40010000
 800b524:	40000400 	.word	0x40000400
 800b528:	40000800 	.word	0x40000800
 800b52c:	40000c00 	.word	0x40000c00
 800b530:	40010400 	.word	0x40010400
 800b534:	40014000 	.word	0x40014000
 800b538:	40014400 	.word	0x40014400
 800b53c:	40014800 	.word	0x40014800
 800b540:	40001800 	.word	0x40001800
 800b544:	40001c00 	.word	0x40001c00
 800b548:	40002000 	.word	0x40002000

0800b54c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b087      	sub	sp, #28
 800b550:	af00      	add	r7, sp, #0
 800b552:	60f8      	str	r0, [r7, #12]
 800b554:	60b9      	str	r1, [r7, #8]
 800b556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6a1b      	ldr	r3, [r3, #32]
 800b55c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6a1b      	ldr	r3, [r3, #32]
 800b562:	f023 0201 	bic.w	r2, r3, #1
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	699b      	ldr	r3, [r3, #24]
 800b56e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	4313      	orrs	r3, r2
 800b580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f023 030a 	bic.w	r3, r3, #10
 800b588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	4313      	orrs	r3, r2
 800b590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	697a      	ldr	r2, [r7, #20]
 800b59c:	621a      	str	r2, [r3, #32]
}
 800b59e:	bf00      	nop
 800b5a0:	371c      	adds	r7, #28
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr

0800b5aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b087      	sub	sp, #28
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	f023 0210 	bic.w	r2, r3, #16
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b5d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	031b      	lsls	r3, r3, #12
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b5e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	011b      	lsls	r3, r3, #4
 800b5ec:	693a      	ldr	r2, [r7, #16]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	693a      	ldr	r2, [r7, #16]
 800b5fc:	621a      	str	r2, [r3, #32]
}
 800b5fe:	bf00      	nop
 800b600:	371c      	adds	r7, #28
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b620:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b622:	683a      	ldr	r2, [r7, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4313      	orrs	r3, r2
 800b628:	f043 0307 	orr.w	r3, r3, #7
 800b62c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68fa      	ldr	r2, [r7, #12]
 800b632:	609a      	str	r2, [r3, #8]
}
 800b634:	bf00      	nop
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	607a      	str	r2, [r7, #4]
 800b64c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b65a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	021a      	lsls	r2, r3, #8
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	431a      	orrs	r2, r3
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	4313      	orrs	r3, r2
 800b668:	697a      	ldr	r2, [r7, #20]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	609a      	str	r2, [r3, #8]
}
 800b674:	bf00      	nop
 800b676:	371c      	adds	r7, #28
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b690:	2b01      	cmp	r3, #1
 800b692:	d101      	bne.n	800b698 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b694:	2302      	movs	r3, #2
 800b696:	e06d      	b.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a30      	ldr	r2, [pc, #192]	@ (800b780 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d004      	beq.n	800b6cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a2f      	ldr	r2, [pc, #188]	@ (800b784 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d108      	bne.n	800b6de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b6d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	68fa      	ldr	r2, [r7, #12]
 800b6f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a20      	ldr	r2, [pc, #128]	@ (800b780 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d022      	beq.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b70a:	d01d      	beq.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a1d      	ldr	r2, [pc, #116]	@ (800b788 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d018      	beq.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a1c      	ldr	r2, [pc, #112]	@ (800b78c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d013      	beq.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	4a1a      	ldr	r2, [pc, #104]	@ (800b790 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d00e      	beq.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4a15      	ldr	r2, [pc, #84]	@ (800b784 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d009      	beq.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a16      	ldr	r2, [pc, #88]	@ (800b794 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d004      	beq.n	800b748 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	4a15      	ldr	r2, [pc, #84]	@ (800b798 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d10c      	bne.n	800b762 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b74e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	4313      	orrs	r3, r2
 800b758:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr
 800b780:	40010000 	.word	0x40010000
 800b784:	40010400 	.word	0x40010400
 800b788:	40000400 	.word	0x40000400
 800b78c:	40000800 	.word	0x40000800
 800b790:	40000c00 	.word	0x40000c00
 800b794:	40014000 	.word	0x40014000
 800b798:	40001800 	.word	0x40001800

0800b79c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7b8:	bf00      	nop
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e040      	b.n	800b86c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7f9 ff9e 	bl	800573c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2224      	movs	r2, #36	@ 0x24
 800b804:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f022 0201 	bic.w	r2, r2, #1
 800b814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 f82c 	bl	800b874 <UART_SetConfig>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d101      	bne.n	800b826 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e022      	b.n	800b86c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fa84 	bl	800bd3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	689a      	ldr	r2, [r3, #8]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f042 0201 	orr.w	r2, r2, #1
 800b862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fb0b 	bl	800be80 <UART_CheckIdleState>
 800b86a:	4603      	mov	r3, r0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b088      	sub	sp, #32
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	689a      	ldr	r2, [r3, #8]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	431a      	orrs	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	431a      	orrs	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	69db      	ldr	r3, [r3, #28]
 800b894:	4313      	orrs	r3, r2
 800b896:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4ba6      	ldr	r3, [pc, #664]	@ (800bb38 <UART_SetConfig+0x2c4>)
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	6812      	ldr	r2, [r2, #0]
 800b8a6:	6979      	ldr	r1, [r7, #20]
 800b8a8:	430b      	orrs	r3, r1
 800b8aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a1b      	ldr	r3, [r3, #32]
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	430a      	orrs	r2, r1
 800b8e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a94      	ldr	r2, [pc, #592]	@ (800bb3c <UART_SetConfig+0x2c8>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d120      	bne.n	800b932 <UART_SetConfig+0xbe>
 800b8f0:	4b93      	ldr	r3, [pc, #588]	@ (800bb40 <UART_SetConfig+0x2cc>)
 800b8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8f6:	f003 0303 	and.w	r3, r3, #3
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	d816      	bhi.n	800b92c <UART_SetConfig+0xb8>
 800b8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b904 <UART_SetConfig+0x90>)
 800b900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b904:	0800b915 	.word	0x0800b915
 800b908:	0800b921 	.word	0x0800b921
 800b90c:	0800b91b 	.word	0x0800b91b
 800b910:	0800b927 	.word	0x0800b927
 800b914:	2301      	movs	r3, #1
 800b916:	77fb      	strb	r3, [r7, #31]
 800b918:	e150      	b.n	800bbbc <UART_SetConfig+0x348>
 800b91a:	2302      	movs	r3, #2
 800b91c:	77fb      	strb	r3, [r7, #31]
 800b91e:	e14d      	b.n	800bbbc <UART_SetConfig+0x348>
 800b920:	2304      	movs	r3, #4
 800b922:	77fb      	strb	r3, [r7, #31]
 800b924:	e14a      	b.n	800bbbc <UART_SetConfig+0x348>
 800b926:	2308      	movs	r3, #8
 800b928:	77fb      	strb	r3, [r7, #31]
 800b92a:	e147      	b.n	800bbbc <UART_SetConfig+0x348>
 800b92c:	2310      	movs	r3, #16
 800b92e:	77fb      	strb	r3, [r7, #31]
 800b930:	e144      	b.n	800bbbc <UART_SetConfig+0x348>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a83      	ldr	r2, [pc, #524]	@ (800bb44 <UART_SetConfig+0x2d0>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d132      	bne.n	800b9a2 <UART_SetConfig+0x12e>
 800b93c:	4b80      	ldr	r3, [pc, #512]	@ (800bb40 <UART_SetConfig+0x2cc>)
 800b93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b942:	f003 030c 	and.w	r3, r3, #12
 800b946:	2b0c      	cmp	r3, #12
 800b948:	d828      	bhi.n	800b99c <UART_SetConfig+0x128>
 800b94a:	a201      	add	r2, pc, #4	@ (adr r2, 800b950 <UART_SetConfig+0xdc>)
 800b94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b950:	0800b985 	.word	0x0800b985
 800b954:	0800b99d 	.word	0x0800b99d
 800b958:	0800b99d 	.word	0x0800b99d
 800b95c:	0800b99d 	.word	0x0800b99d
 800b960:	0800b991 	.word	0x0800b991
 800b964:	0800b99d 	.word	0x0800b99d
 800b968:	0800b99d 	.word	0x0800b99d
 800b96c:	0800b99d 	.word	0x0800b99d
 800b970:	0800b98b 	.word	0x0800b98b
 800b974:	0800b99d 	.word	0x0800b99d
 800b978:	0800b99d 	.word	0x0800b99d
 800b97c:	0800b99d 	.word	0x0800b99d
 800b980:	0800b997 	.word	0x0800b997
 800b984:	2300      	movs	r3, #0
 800b986:	77fb      	strb	r3, [r7, #31]
 800b988:	e118      	b.n	800bbbc <UART_SetConfig+0x348>
 800b98a:	2302      	movs	r3, #2
 800b98c:	77fb      	strb	r3, [r7, #31]
 800b98e:	e115      	b.n	800bbbc <UART_SetConfig+0x348>
 800b990:	2304      	movs	r3, #4
 800b992:	77fb      	strb	r3, [r7, #31]
 800b994:	e112      	b.n	800bbbc <UART_SetConfig+0x348>
 800b996:	2308      	movs	r3, #8
 800b998:	77fb      	strb	r3, [r7, #31]
 800b99a:	e10f      	b.n	800bbbc <UART_SetConfig+0x348>
 800b99c:	2310      	movs	r3, #16
 800b99e:	77fb      	strb	r3, [r7, #31]
 800b9a0:	e10c      	b.n	800bbbc <UART_SetConfig+0x348>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a68      	ldr	r2, [pc, #416]	@ (800bb48 <UART_SetConfig+0x2d4>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d120      	bne.n	800b9ee <UART_SetConfig+0x17a>
 800b9ac:	4b64      	ldr	r3, [pc, #400]	@ (800bb40 <UART_SetConfig+0x2cc>)
 800b9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b9b6:	2b30      	cmp	r3, #48	@ 0x30
 800b9b8:	d013      	beq.n	800b9e2 <UART_SetConfig+0x16e>
 800b9ba:	2b30      	cmp	r3, #48	@ 0x30
 800b9bc:	d814      	bhi.n	800b9e8 <UART_SetConfig+0x174>
 800b9be:	2b20      	cmp	r3, #32
 800b9c0:	d009      	beq.n	800b9d6 <UART_SetConfig+0x162>
 800b9c2:	2b20      	cmp	r3, #32
 800b9c4:	d810      	bhi.n	800b9e8 <UART_SetConfig+0x174>
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <UART_SetConfig+0x15c>
 800b9ca:	2b10      	cmp	r3, #16
 800b9cc:	d006      	beq.n	800b9dc <UART_SetConfig+0x168>
 800b9ce:	e00b      	b.n	800b9e8 <UART_SetConfig+0x174>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	77fb      	strb	r3, [r7, #31]
 800b9d4:	e0f2      	b.n	800bbbc <UART_SetConfig+0x348>
 800b9d6:	2302      	movs	r3, #2
 800b9d8:	77fb      	strb	r3, [r7, #31]
 800b9da:	e0ef      	b.n	800bbbc <UART_SetConfig+0x348>
 800b9dc:	2304      	movs	r3, #4
 800b9de:	77fb      	strb	r3, [r7, #31]
 800b9e0:	e0ec      	b.n	800bbbc <UART_SetConfig+0x348>
 800b9e2:	2308      	movs	r3, #8
 800b9e4:	77fb      	strb	r3, [r7, #31]
 800b9e6:	e0e9      	b.n	800bbbc <UART_SetConfig+0x348>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	77fb      	strb	r3, [r7, #31]
 800b9ec:	e0e6      	b.n	800bbbc <UART_SetConfig+0x348>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a56      	ldr	r2, [pc, #344]	@ (800bb4c <UART_SetConfig+0x2d8>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d120      	bne.n	800ba3a <UART_SetConfig+0x1c6>
 800b9f8:	4b51      	ldr	r3, [pc, #324]	@ (800bb40 <UART_SetConfig+0x2cc>)
 800b9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9fe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba02:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba04:	d013      	beq.n	800ba2e <UART_SetConfig+0x1ba>
 800ba06:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba08:	d814      	bhi.n	800ba34 <UART_SetConfig+0x1c0>
 800ba0a:	2b80      	cmp	r3, #128	@ 0x80
 800ba0c:	d009      	beq.n	800ba22 <UART_SetConfig+0x1ae>
 800ba0e:	2b80      	cmp	r3, #128	@ 0x80
 800ba10:	d810      	bhi.n	800ba34 <UART_SetConfig+0x1c0>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <UART_SetConfig+0x1a8>
 800ba16:	2b40      	cmp	r3, #64	@ 0x40
 800ba18:	d006      	beq.n	800ba28 <UART_SetConfig+0x1b4>
 800ba1a:	e00b      	b.n	800ba34 <UART_SetConfig+0x1c0>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	77fb      	strb	r3, [r7, #31]
 800ba20:	e0cc      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba22:	2302      	movs	r3, #2
 800ba24:	77fb      	strb	r3, [r7, #31]
 800ba26:	e0c9      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba28:	2304      	movs	r3, #4
 800ba2a:	77fb      	strb	r3, [r7, #31]
 800ba2c:	e0c6      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba2e:	2308      	movs	r3, #8
 800ba30:	77fb      	strb	r3, [r7, #31]
 800ba32:	e0c3      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba34:	2310      	movs	r3, #16
 800ba36:	77fb      	strb	r3, [r7, #31]
 800ba38:	e0c0      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a44      	ldr	r2, [pc, #272]	@ (800bb50 <UART_SetConfig+0x2dc>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d125      	bne.n	800ba90 <UART_SetConfig+0x21c>
 800ba44:	4b3e      	ldr	r3, [pc, #248]	@ (800bb40 <UART_SetConfig+0x2cc>)
 800ba46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba52:	d017      	beq.n	800ba84 <UART_SetConfig+0x210>
 800ba54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ba58:	d817      	bhi.n	800ba8a <UART_SetConfig+0x216>
 800ba5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba5e:	d00b      	beq.n	800ba78 <UART_SetConfig+0x204>
 800ba60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba64:	d811      	bhi.n	800ba8a <UART_SetConfig+0x216>
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <UART_SetConfig+0x1fe>
 800ba6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba6e:	d006      	beq.n	800ba7e <UART_SetConfig+0x20a>
 800ba70:	e00b      	b.n	800ba8a <UART_SetConfig+0x216>
 800ba72:	2300      	movs	r3, #0
 800ba74:	77fb      	strb	r3, [r7, #31]
 800ba76:	e0a1      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba78:	2302      	movs	r3, #2
 800ba7a:	77fb      	strb	r3, [r7, #31]
 800ba7c:	e09e      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba7e:	2304      	movs	r3, #4
 800ba80:	77fb      	strb	r3, [r7, #31]
 800ba82:	e09b      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba84:	2308      	movs	r3, #8
 800ba86:	77fb      	strb	r3, [r7, #31]
 800ba88:	e098      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba8a:	2310      	movs	r3, #16
 800ba8c:	77fb      	strb	r3, [r7, #31]
 800ba8e:	e095      	b.n	800bbbc <UART_SetConfig+0x348>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a2f      	ldr	r2, [pc, #188]	@ (800bb54 <UART_SetConfig+0x2e0>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d125      	bne.n	800bae6 <UART_SetConfig+0x272>
 800ba9a:	4b29      	ldr	r3, [pc, #164]	@ (800bb40 <UART_SetConfig+0x2cc>)
 800ba9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baa0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800baa4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800baa8:	d017      	beq.n	800bada <UART_SetConfig+0x266>
 800baaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800baae:	d817      	bhi.n	800bae0 <UART_SetConfig+0x26c>
 800bab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bab4:	d00b      	beq.n	800bace <UART_SetConfig+0x25a>
 800bab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800baba:	d811      	bhi.n	800bae0 <UART_SetConfig+0x26c>
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <UART_SetConfig+0x254>
 800bac0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bac4:	d006      	beq.n	800bad4 <UART_SetConfig+0x260>
 800bac6:	e00b      	b.n	800bae0 <UART_SetConfig+0x26c>
 800bac8:	2301      	movs	r3, #1
 800baca:	77fb      	strb	r3, [r7, #31]
 800bacc:	e076      	b.n	800bbbc <UART_SetConfig+0x348>
 800bace:	2302      	movs	r3, #2
 800bad0:	77fb      	strb	r3, [r7, #31]
 800bad2:	e073      	b.n	800bbbc <UART_SetConfig+0x348>
 800bad4:	2304      	movs	r3, #4
 800bad6:	77fb      	strb	r3, [r7, #31]
 800bad8:	e070      	b.n	800bbbc <UART_SetConfig+0x348>
 800bada:	2308      	movs	r3, #8
 800badc:	77fb      	strb	r3, [r7, #31]
 800bade:	e06d      	b.n	800bbbc <UART_SetConfig+0x348>
 800bae0:	2310      	movs	r3, #16
 800bae2:	77fb      	strb	r3, [r7, #31]
 800bae4:	e06a      	b.n	800bbbc <UART_SetConfig+0x348>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a1b      	ldr	r2, [pc, #108]	@ (800bb58 <UART_SetConfig+0x2e4>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d138      	bne.n	800bb62 <UART_SetConfig+0x2ee>
 800baf0:	4b13      	ldr	r3, [pc, #76]	@ (800bb40 <UART_SetConfig+0x2cc>)
 800baf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800baf6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bafa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bafe:	d017      	beq.n	800bb30 <UART_SetConfig+0x2bc>
 800bb00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb04:	d82a      	bhi.n	800bb5c <UART_SetConfig+0x2e8>
 800bb06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb0a:	d00b      	beq.n	800bb24 <UART_SetConfig+0x2b0>
 800bb0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb10:	d824      	bhi.n	800bb5c <UART_SetConfig+0x2e8>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <UART_SetConfig+0x2aa>
 800bb16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb1a:	d006      	beq.n	800bb2a <UART_SetConfig+0x2b6>
 800bb1c:	e01e      	b.n	800bb5c <UART_SetConfig+0x2e8>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	77fb      	strb	r3, [r7, #31]
 800bb22:	e04b      	b.n	800bbbc <UART_SetConfig+0x348>
 800bb24:	2302      	movs	r3, #2
 800bb26:	77fb      	strb	r3, [r7, #31]
 800bb28:	e048      	b.n	800bbbc <UART_SetConfig+0x348>
 800bb2a:	2304      	movs	r3, #4
 800bb2c:	77fb      	strb	r3, [r7, #31]
 800bb2e:	e045      	b.n	800bbbc <UART_SetConfig+0x348>
 800bb30:	2308      	movs	r3, #8
 800bb32:	77fb      	strb	r3, [r7, #31]
 800bb34:	e042      	b.n	800bbbc <UART_SetConfig+0x348>
 800bb36:	bf00      	nop
 800bb38:	efff69f3 	.word	0xefff69f3
 800bb3c:	40011000 	.word	0x40011000
 800bb40:	40023800 	.word	0x40023800
 800bb44:	40004400 	.word	0x40004400
 800bb48:	40004800 	.word	0x40004800
 800bb4c:	40004c00 	.word	0x40004c00
 800bb50:	40005000 	.word	0x40005000
 800bb54:	40011400 	.word	0x40011400
 800bb58:	40007800 	.word	0x40007800
 800bb5c:	2310      	movs	r3, #16
 800bb5e:	77fb      	strb	r3, [r7, #31]
 800bb60:	e02c      	b.n	800bbbc <UART_SetConfig+0x348>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4a72      	ldr	r2, [pc, #456]	@ (800bd30 <UART_SetConfig+0x4bc>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d125      	bne.n	800bbb8 <UART_SetConfig+0x344>
 800bb6c:	4b71      	ldr	r3, [pc, #452]	@ (800bd34 <UART_SetConfig+0x4c0>)
 800bb6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb72:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bb76:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bb7a:	d017      	beq.n	800bbac <UART_SetConfig+0x338>
 800bb7c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bb80:	d817      	bhi.n	800bbb2 <UART_SetConfig+0x33e>
 800bb82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb86:	d00b      	beq.n	800bba0 <UART_SetConfig+0x32c>
 800bb88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb8c:	d811      	bhi.n	800bbb2 <UART_SetConfig+0x33e>
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d003      	beq.n	800bb9a <UART_SetConfig+0x326>
 800bb92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bb96:	d006      	beq.n	800bba6 <UART_SetConfig+0x332>
 800bb98:	e00b      	b.n	800bbb2 <UART_SetConfig+0x33e>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	77fb      	strb	r3, [r7, #31]
 800bb9e:	e00d      	b.n	800bbbc <UART_SetConfig+0x348>
 800bba0:	2302      	movs	r3, #2
 800bba2:	77fb      	strb	r3, [r7, #31]
 800bba4:	e00a      	b.n	800bbbc <UART_SetConfig+0x348>
 800bba6:	2304      	movs	r3, #4
 800bba8:	77fb      	strb	r3, [r7, #31]
 800bbaa:	e007      	b.n	800bbbc <UART_SetConfig+0x348>
 800bbac:	2308      	movs	r3, #8
 800bbae:	77fb      	strb	r3, [r7, #31]
 800bbb0:	e004      	b.n	800bbbc <UART_SetConfig+0x348>
 800bbb2:	2310      	movs	r3, #16
 800bbb4:	77fb      	strb	r3, [r7, #31]
 800bbb6:	e001      	b.n	800bbbc <UART_SetConfig+0x348>
 800bbb8:	2310      	movs	r3, #16
 800bbba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbc4:	d15b      	bne.n	800bc7e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bbc6:	7ffb      	ldrb	r3, [r7, #31]
 800bbc8:	2b08      	cmp	r3, #8
 800bbca:	d828      	bhi.n	800bc1e <UART_SetConfig+0x3aa>
 800bbcc:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <UART_SetConfig+0x360>)
 800bbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd2:	bf00      	nop
 800bbd4:	0800bbf9 	.word	0x0800bbf9
 800bbd8:	0800bc01 	.word	0x0800bc01
 800bbdc:	0800bc09 	.word	0x0800bc09
 800bbe0:	0800bc1f 	.word	0x0800bc1f
 800bbe4:	0800bc0f 	.word	0x0800bc0f
 800bbe8:	0800bc1f 	.word	0x0800bc1f
 800bbec:	0800bc1f 	.word	0x0800bc1f
 800bbf0:	0800bc1f 	.word	0x0800bc1f
 800bbf4:	0800bc17 	.word	0x0800bc17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbf8:	f7fd fab8 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 800bbfc:	61b8      	str	r0, [r7, #24]
        break;
 800bbfe:	e013      	b.n	800bc28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc00:	f7fd fac8 	bl	8009194 <HAL_RCC_GetPCLK2Freq>
 800bc04:	61b8      	str	r0, [r7, #24]
        break;
 800bc06:	e00f      	b.n	800bc28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc08:	4b4b      	ldr	r3, [pc, #300]	@ (800bd38 <UART_SetConfig+0x4c4>)
 800bc0a:	61bb      	str	r3, [r7, #24]
        break;
 800bc0c:	e00c      	b.n	800bc28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc0e:	f7fd f9db 	bl	8008fc8 <HAL_RCC_GetSysClockFreq>
 800bc12:	61b8      	str	r0, [r7, #24]
        break;
 800bc14:	e008      	b.n	800bc28 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc1a:	61bb      	str	r3, [r7, #24]
        break;
 800bc1c:	e004      	b.n	800bc28 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	77bb      	strb	r3, [r7, #30]
        break;
 800bc26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d074      	beq.n	800bd18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bc2e:	69bb      	ldr	r3, [r7, #24]
 800bc30:	005a      	lsls	r2, r3, #1
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	085b      	lsrs	r3, r3, #1
 800bc38:	441a      	add	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	2b0f      	cmp	r3, #15
 800bc48:	d916      	bls.n	800bc78 <UART_SetConfig+0x404>
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc50:	d212      	bcs.n	800bc78 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	f023 030f 	bic.w	r3, r3, #15
 800bc5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	085b      	lsrs	r3, r3, #1
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	f003 0307 	and.w	r3, r3, #7
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	89fb      	ldrh	r3, [r7, #14]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	89fa      	ldrh	r2, [r7, #14]
 800bc74:	60da      	str	r2, [r3, #12]
 800bc76:	e04f      	b.n	800bd18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	77bb      	strb	r3, [r7, #30]
 800bc7c:	e04c      	b.n	800bd18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc7e:	7ffb      	ldrb	r3, [r7, #31]
 800bc80:	2b08      	cmp	r3, #8
 800bc82:	d828      	bhi.n	800bcd6 <UART_SetConfig+0x462>
 800bc84:	a201      	add	r2, pc, #4	@ (adr r2, 800bc8c <UART_SetConfig+0x418>)
 800bc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8a:	bf00      	nop
 800bc8c:	0800bcb1 	.word	0x0800bcb1
 800bc90:	0800bcb9 	.word	0x0800bcb9
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	0800bcd7 	.word	0x0800bcd7
 800bc9c:	0800bcc7 	.word	0x0800bcc7
 800bca0:	0800bcd7 	.word	0x0800bcd7
 800bca4:	0800bcd7 	.word	0x0800bcd7
 800bca8:	0800bcd7 	.word	0x0800bcd7
 800bcac:	0800bccf 	.word	0x0800bccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcb0:	f7fd fa5c 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 800bcb4:	61b8      	str	r0, [r7, #24]
        break;
 800bcb6:	e013      	b.n	800bce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcb8:	f7fd fa6c 	bl	8009194 <HAL_RCC_GetPCLK2Freq>
 800bcbc:	61b8      	str	r0, [r7, #24]
        break;
 800bcbe:	e00f      	b.n	800bce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcc0:	4b1d      	ldr	r3, [pc, #116]	@ (800bd38 <UART_SetConfig+0x4c4>)
 800bcc2:	61bb      	str	r3, [r7, #24]
        break;
 800bcc4:	e00c      	b.n	800bce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcc6:	f7fd f97f 	bl	8008fc8 <HAL_RCC_GetSysClockFreq>
 800bcca:	61b8      	str	r0, [r7, #24]
        break;
 800bccc:	e008      	b.n	800bce0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcd2:	61bb      	str	r3, [r7, #24]
        break;
 800bcd4:	e004      	b.n	800bce0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	77bb      	strb	r3, [r7, #30]
        break;
 800bcde:	bf00      	nop
    }

    if (pclk != 0U)
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d018      	beq.n	800bd18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	085a      	lsrs	r2, r3, #1
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	441a      	add	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2b0f      	cmp	r3, #15
 800bcfe:	d909      	bls.n	800bd14 <UART_SetConfig+0x4a0>
 800bd00:	693b      	ldr	r3, [r7, #16]
 800bd02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd06:	d205      	bcs.n	800bd14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	60da      	str	r2, [r3, #12]
 800bd12:	e001      	b.n	800bd18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800bd24:	7fbb      	ldrb	r3, [r7, #30]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3720      	adds	r7, #32
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	40007c00 	.word	0x40007c00
 800bd34:	40023800 	.word	0x40023800
 800bd38:	00f42400 	.word	0x00f42400

0800bd3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd48:	f003 0301 	and.w	r3, r3, #1
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00a      	beq.n	800bd66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	430a      	orrs	r2, r1
 800bd64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd6a:	f003 0302 	and.w	r3, r3, #2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00a      	beq.n	800bd88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	430a      	orrs	r2, r1
 800bd86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd8c:	f003 0304 	and.w	r3, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00a      	beq.n	800bdaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	430a      	orrs	r2, r1
 800bda8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdae:	f003 0308 	and.w	r3, r3, #8
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d00a      	beq.n	800bdcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd0:	f003 0310 	and.w	r3, r3, #16
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00a      	beq.n	800bdee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	430a      	orrs	r2, r1
 800bdec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf2:	f003 0320 	and.w	r3, r3, #32
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00a      	beq.n	800be10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	430a      	orrs	r2, r1
 800be0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d01a      	beq.n	800be52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be3a:	d10a      	bne.n	800be52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	430a      	orrs	r2, r1
 800be72:	605a      	str	r2, [r3, #4]
  }
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b086      	sub	sp, #24
 800be84:	af02      	add	r7, sp, #8
 800be86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800be90:	f7f9 fd20 	bl	80058d4 <HAL_GetTick>
 800be94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0308 	and.w	r3, r3, #8
 800bea0:	2b08      	cmp	r3, #8
 800bea2:	d10e      	bne.n	800bec2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bea4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f81b 	bl	800beee <UART_WaitOnFlagUntilTimeout>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e011      	b.n	800bee6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2220      	movs	r2, #32
 800bec6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2220      	movs	r2, #32
 800becc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bee4:	2300      	movs	r3, #0
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b09c      	sub	sp, #112	@ 0x70
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	60f8      	str	r0, [r7, #12]
 800bef6:	60b9      	str	r1, [r7, #8]
 800bef8:	603b      	str	r3, [r7, #0]
 800befa:	4613      	mov	r3, r2
 800befc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800befe:	e0a7      	b.n	800c050 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf06:	f000 80a3 	beq.w	800c050 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf0a:	f7f9 fce3 	bl	80058d4 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d302      	bcc.n	800bf20 <UART_WaitOnFlagUntilTimeout+0x32>
 800bf1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d13f      	bne.n	800bfa0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf28:	e853 3f00 	ldrex	r3, [r3]
 800bf2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bf2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf30:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bf34:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bf40:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bf44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bf46:	e841 2300 	strex	r3, r2, [r1]
 800bf4a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bf4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1e6      	bne.n	800bf20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	3308      	adds	r3, #8
 800bf58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf5c:	e853 3f00 	ldrex	r3, [r3]
 800bf60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf64:	f023 0301 	bic.w	r3, r3, #1
 800bf68:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3308      	adds	r3, #8
 800bf70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf72:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bf74:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bf78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf7a:	e841 2300 	strex	r3, r2, [r1]
 800bf7e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bf80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1e5      	bne.n	800bf52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2220      	movs	r2, #32
 800bf8a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e068      	b.n	800c072 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 0304 	and.w	r3, r3, #4
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d050      	beq.n	800c050 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	69db      	ldr	r3, [r3, #28]
 800bfb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfbc:	d148      	bne.n	800c050 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bfc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd0:	e853 3f00 	ldrex	r3, [r3]
 800bfd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bfdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfe6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfe8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bfec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bfee:	e841 2300 	strex	r3, r2, [r1]
 800bff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1e6      	bne.n	800bfc8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	3308      	adds	r3, #8
 800c000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	e853 3f00 	ldrex	r3, [r3]
 800c008:	613b      	str	r3, [r7, #16]
   return(result);
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	f023 0301 	bic.w	r3, r3, #1
 800c010:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	3308      	adds	r3, #8
 800c018:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c01a:	623a      	str	r2, [r7, #32]
 800c01c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01e:	69f9      	ldr	r1, [r7, #28]
 800c020:	6a3a      	ldr	r2, [r7, #32]
 800c022:	e841 2300 	strex	r3, r2, [r1]
 800c026:	61bb      	str	r3, [r7, #24]
   return(result);
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1e5      	bne.n	800bffa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2220      	movs	r2, #32
 800c032:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2220      	movs	r2, #32
 800c038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2220      	movs	r2, #32
 800c040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c04c:	2303      	movs	r3, #3
 800c04e:	e010      	b.n	800c072 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	69da      	ldr	r2, [r3, #28]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	4013      	ands	r3, r2
 800c05a:	68ba      	ldr	r2, [r7, #8]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	bf0c      	ite	eq
 800c060:	2301      	moveq	r3, #1
 800c062:	2300      	movne	r3, #0
 800c064:	b2db      	uxtb	r3, r3
 800c066:	461a      	mov	r2, r3
 800c068:	79fb      	ldrb	r3, [r7, #7]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	f43f af48 	beq.w	800bf00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3770      	adds	r7, #112	@ 0x70
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d121      	bne.n	800c0d2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4b27      	ldr	r3, [pc, #156]	@ (800c130 <FMC_SDRAM_Init+0xb4>)
 800c094:	4013      	ands	r3, r2
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	6851      	ldr	r1, [r2, #4]
 800c09a:	683a      	ldr	r2, [r7, #0]
 800c09c:	6892      	ldr	r2, [r2, #8]
 800c09e:	4311      	orrs	r1, r2
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	68d2      	ldr	r2, [r2, #12]
 800c0a4:	4311      	orrs	r1, r2
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	6912      	ldr	r2, [r2, #16]
 800c0aa:	4311      	orrs	r1, r2
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	6952      	ldr	r2, [r2, #20]
 800c0b0:	4311      	orrs	r1, r2
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	6992      	ldr	r2, [r2, #24]
 800c0b6:	4311      	orrs	r1, r2
 800c0b8:	683a      	ldr	r2, [r7, #0]
 800c0ba:	69d2      	ldr	r2, [r2, #28]
 800c0bc:	4311      	orrs	r1, r2
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	6a12      	ldr	r2, [r2, #32]
 800c0c2:	4311      	orrs	r1, r2
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c0c8:	430a      	orrs	r2, r1
 800c0ca:	431a      	orrs	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	e026      	b.n	800c120 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	69d9      	ldr	r1, [r3, #28]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	4319      	orrs	r1, r3
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e8:	430b      	orrs	r3, r1
 800c0ea:	431a      	orrs	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c130 <FMC_SDRAM_Init+0xb4>)
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	683a      	ldr	r2, [r7, #0]
 800c0fa:	6851      	ldr	r1, [r2, #4]
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	6892      	ldr	r2, [r2, #8]
 800c100:	4311      	orrs	r1, r2
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	68d2      	ldr	r2, [r2, #12]
 800c106:	4311      	orrs	r1, r2
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	6912      	ldr	r2, [r2, #16]
 800c10c:	4311      	orrs	r1, r2
 800c10e:	683a      	ldr	r2, [r7, #0]
 800c110:	6952      	ldr	r2, [r2, #20]
 800c112:	4311      	orrs	r1, r2
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	6992      	ldr	r2, [r2, #24]
 800c118:	430a      	orrs	r2, r1
 800c11a:	431a      	orrs	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	370c      	adds	r7, #12
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	ffff8000 	.word	0xffff8000

0800c134 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d128      	bne.n	800c198 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	1e59      	subs	r1, r3, #1
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	3b01      	subs	r3, #1
 800c15a:	011b      	lsls	r3, r3, #4
 800c15c:	4319      	orrs	r1, r3
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	3b01      	subs	r3, #1
 800c164:	021b      	lsls	r3, r3, #8
 800c166:	4319      	orrs	r1, r3
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	3b01      	subs	r3, #1
 800c16e:	031b      	lsls	r3, r3, #12
 800c170:	4319      	orrs	r1, r3
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	3b01      	subs	r3, #1
 800c178:	041b      	lsls	r3, r3, #16
 800c17a:	4319      	orrs	r1, r3
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	695b      	ldr	r3, [r3, #20]
 800c180:	3b01      	subs	r3, #1
 800c182:	051b      	lsls	r3, r3, #20
 800c184:	4319      	orrs	r1, r3
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	699b      	ldr	r3, [r3, #24]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	061b      	lsls	r3, r3, #24
 800c18e:	430b      	orrs	r3, r1
 800c190:	431a      	orrs	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	609a      	str	r2, [r3, #8]
 800c196:	e02d      	b.n	800c1f4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	689a      	ldr	r2, [r3, #8]
 800c19c:	4b19      	ldr	r3, [pc, #100]	@ (800c204 <FMC_SDRAM_Timing_Init+0xd0>)
 800c19e:	4013      	ands	r3, r2
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	68d2      	ldr	r2, [r2, #12]
 800c1a4:	3a01      	subs	r2, #1
 800c1a6:	0311      	lsls	r1, r2, #12
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	6952      	ldr	r2, [r2, #20]
 800c1ac:	3a01      	subs	r2, #1
 800c1ae:	0512      	lsls	r2, r2, #20
 800c1b0:	430a      	orrs	r2, r1
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	1e59      	subs	r1, r3, #1
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	3b01      	subs	r3, #1
 800c1cc:	011b      	lsls	r3, r3, #4
 800c1ce:	4319      	orrs	r1, r3
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	021b      	lsls	r3, r3, #8
 800c1d8:	4319      	orrs	r1, r3
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	041b      	lsls	r3, r3, #16
 800c1e2:	4319      	orrs	r1, r3
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	699b      	ldr	r3, [r3, #24]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	061b      	lsls	r3, r3, #24
 800c1ec:	430b      	orrs	r3, r1
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	ff0f0fff 	.word	0xff0f0fff

0800c208 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	691a      	ldr	r2, [r3, #16]
 800c218:	4b0c      	ldr	r3, [pc, #48]	@ (800c24c <FMC_SDRAM_SendCommand+0x44>)
 800c21a:	4013      	ands	r3, r2
 800c21c:	68ba      	ldr	r2, [r7, #8]
 800c21e:	6811      	ldr	r1, [r2, #0]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	6852      	ldr	r2, [r2, #4]
 800c224:	4311      	orrs	r1, r2
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	6892      	ldr	r2, [r2, #8]
 800c22a:	3a01      	subs	r2, #1
 800c22c:	0152      	lsls	r2, r2, #5
 800c22e:	4311      	orrs	r1, r2
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	68d2      	ldr	r2, [r2, #12]
 800c234:	0252      	lsls	r2, r2, #9
 800c236:	430a      	orrs	r2, r1
 800c238:	431a      	orrs	r2, r3
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	ffc00000 	.word	0xffc00000

0800c250 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	695a      	ldr	r2, [r3, #20]
 800c25e:	4b07      	ldr	r3, [pc, #28]	@ (800c27c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c260:	4013      	ands	r3, r2
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	0052      	lsls	r2, r2, #1
 800c266:	431a      	orrs	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c26c:	2300      	movs	r3, #0
}
 800c26e:	4618      	mov	r0, r3
 800c270:	370c      	adds	r7, #12
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	ffffc001 	.word	0xffffc001

0800c280 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c280:	b084      	sub	sp, #16
 800c282:	b480      	push	{r7}
 800c284:	b085      	sub	sp, #20
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	f107 001c 	add.w	r0, r7, #28
 800c28e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c296:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c298:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c29a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c29e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c2a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c2a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c2aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	685a      	ldr	r2, [r3, #4]
 800c2b6:	4b07      	ldr	r3, [pc, #28]	@ (800c2d4 <SDMMC_Init+0x54>)
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	431a      	orrs	r2, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3714      	adds	r7, #20
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	b004      	add	sp, #16
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	ffff8100 	.word	0xffff8100

0800c2d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c2d8:	b480      	push	{r7}
 800c2da:	b083      	sub	sp, #12
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2203      	movs	r2, #3
 800c2e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	370c      	adds	r7, #12
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f2:	4770      	bx	lr

0800c2f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 0303 	and.w	r3, r3, #3
}
 800c304:	4618      	mov	r0, r3
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c32e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c334:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c33a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	4313      	orrs	r3, r2
 800c340:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	68da      	ldr	r2, [r3, #12]
 800c346:	4b06      	ldr	r3, [pc, #24]	@ (800c360 <SDMMC_SendCommand+0x50>)
 800c348:	4013      	ands	r3, r2
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	431a      	orrs	r2, r3
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	fffff000 	.word	0xfffff000

0800c364 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	b2db      	uxtb	r3, r3
}
 800c372:	4618      	mov	r0, r3
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3314      	adds	r3, #20
 800c38c:	461a      	mov	r2, r3
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	4413      	add	r3, r2
 800c392:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
}  
 800c398:	4618      	mov	r0, r3
 800c39a:	3714      	adds	r7, #20
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b085      	sub	sp, #20
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	681a      	ldr	r2, [r3, #0]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c3ca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c3d0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c3d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	431a      	orrs	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0

}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b088      	sub	sp, #32
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c40a:	2310      	movs	r3, #16
 800c40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c40e:	2340      	movs	r3, #64	@ 0x40
 800c410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c412:	2300      	movs	r3, #0
 800c414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c41a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c41c:	f107 0308 	add.w	r3, r7, #8
 800c420:	4619      	mov	r1, r3
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7ff ff74 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c42c:	2110      	movs	r1, #16
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f9d6 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c436:	69fb      	ldr	r3, [r7, #28]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3720      	adds	r7, #32
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b088      	sub	sp, #32
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c44e:	2311      	movs	r3, #17
 800c450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c452:	2340      	movs	r3, #64	@ 0x40
 800c454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c45a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c45e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f7ff ff52 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c46c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c470:	2111      	movs	r1, #17
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f9b4 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c47a:	69fb      	ldr	r3, [r7, #28]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3720      	adds	r7, #32
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b088      	sub	sp, #32
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c492:	2312      	movs	r3, #18
 800c494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c496:	2340      	movs	r3, #64	@ 0x40
 800c498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c49a:	2300      	movs	r3, #0
 800c49c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c49e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4a4:	f107 0308 	add.w	r3, r7, #8
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff ff30 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c4b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4b4:	2112      	movs	r1, #18
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 f992 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4be:	69fb      	ldr	r3, [r7, #28]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3720      	adds	r7, #32
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c4d6:	2318      	movs	r3, #24
 800c4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4da:	2340      	movs	r3, #64	@ 0x40
 800c4dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4e8:	f107 0308 	add.w	r3, r7, #8
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7ff ff0e 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c4f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c4f8:	2118      	movs	r1, #24
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f970 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c502:	69fb      	ldr	r3, [r7, #28]
}
 800c504:	4618      	mov	r0, r3
 800c506:	3720      	adds	r7, #32
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b088      	sub	sp, #32
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c51a:	2319      	movs	r3, #25
 800c51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c51e:	2340      	movs	r3, #64	@ 0x40
 800c520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c522:	2300      	movs	r3, #0
 800c524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c52a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c52c:	f107 0308 	add.w	r3, r7, #8
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7ff feec 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c53c:	2119      	movs	r1, #25
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f94e 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c546:	69fb      	ldr	r3, [r7, #28]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3720      	adds	r7, #32
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b088      	sub	sp, #32
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c558:	2300      	movs	r3, #0
 800c55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c55c:	230c      	movs	r3, #12
 800c55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c560:	2340      	movs	r3, #64	@ 0x40
 800c562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c564:	2300      	movs	r3, #0
 800c566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c56c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c56e:	f107 0308 	add.w	r3, r7, #8
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff fecb 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c57a:	4a05      	ldr	r2, [pc, #20]	@ (800c590 <SDMMC_CmdStopTransfer+0x40>)
 800c57c:	210c      	movs	r1, #12
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 f92e 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c586:	69fb      	ldr	r3, [r7, #28]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3720      	adds	r7, #32
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	05f5e100 	.word	0x05f5e100

0800c594 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b08a      	sub	sp, #40	@ 0x28
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c5a4:	2307      	movs	r3, #7
 800c5a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5a8:	2340      	movs	r3, #64	@ 0x40
 800c5aa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5b4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5b6:	f107 0310 	add.w	r3, r7, #16
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f7ff fea7 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c5c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5c6:	2107      	movs	r1, #7
 800c5c8:	68f8      	ldr	r0, [r7, #12]
 800c5ca:	f000 f909 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c5ce:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c5d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3728      	adds	r7, #40	@ 0x28
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b088      	sub	sp, #32
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff fe86 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 fb23 	bl	800cc50 <SDMMC_GetCmdError>
 800c60a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c60c:	69fb      	ldr	r3, [r7, #28]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3720      	adds	r7, #32
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}

0800c616 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b088      	sub	sp, #32
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c61e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c624:	2308      	movs	r3, #8
 800c626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c628:	2340      	movs	r3, #64	@ 0x40
 800c62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c62c:	2300      	movs	r3, #0
 800c62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c630:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c636:	f107 0308 	add.w	r3, r7, #8
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f7ff fe67 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fab6 	bl	800cbb4 <SDMMC_GetCmdResp7>
 800c648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c64a:	69fb      	ldr	r3, [r7, #28]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b088      	sub	sp, #32
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c662:	2337      	movs	r3, #55	@ 0x37
 800c664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c666:	2340      	movs	r3, #64	@ 0x40
 800c668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c66a:	2300      	movs	r3, #0
 800c66c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c66e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c672:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c674:	f107 0308 	add.w	r3, r7, #8
 800c678:	4619      	mov	r1, r3
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f7ff fe48 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c680:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c684:	2137      	movs	r1, #55	@ 0x37
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f8aa 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c68c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c68e:	69fb      	ldr	r3, [r7, #28]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3720      	adds	r7, #32
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b088      	sub	sp, #32
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	4b0d      	ldr	r3, [pc, #52]	@ (800c6dc <SDMMC_CmdAppOperCommand+0x44>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c6aa:	2329      	movs	r3, #41	@ 0x29
 800c6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6ae:	2340      	movs	r3, #64	@ 0x40
 800c6b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6bc:	f107 0308 	add.w	r3, r7, #8
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff fe24 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f9bf 	bl	800ca4c <SDMMC_GetCmdResp3>
 800c6ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6d0:	69fb      	ldr	r3, [r7, #28]
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3720      	adds	r7, #32
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	80100000 	.word	0x80100000

0800c6e0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b088      	sub	sp, #32
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c6f0:	23c0      	movs	r3, #192	@ 0xc0
 800c6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6fe:	f107 0308 	add.w	r3, r7, #8
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7ff fe03 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f956 	bl	800c9bc <SDMMC_GetCmdResp2>
 800c710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c712:	69fb      	ldr	r3, [r7, #28]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3720      	adds	r7, #32
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c72a:	2309      	movs	r3, #9
 800c72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c72e:	23c0      	movs	r3, #192	@ 0xc0
 800c730:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c732:	2300      	movs	r3, #0
 800c734:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c73a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c73c:	f107 0308 	add.w	r3, r7, #8
 800c740:	4619      	mov	r1, r3
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff fde4 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f937 	bl	800c9bc <SDMMC_GetCmdResp2>
 800c74e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c750:	69fb      	ldr	r3, [r7, #28]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3720      	adds	r7, #32
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b088      	sub	sp, #32
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c764:	2300      	movs	r3, #0
 800c766:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c768:	2303      	movs	r3, #3
 800c76a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c76c:	2340      	movs	r3, #64	@ 0x40
 800c76e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c770:	2300      	movs	r3, #0
 800c772:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c778:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c77a:	f107 0308 	add.w	r3, r7, #8
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff fdc5 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	2103      	movs	r1, #3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f99c 	bl	800cac8 <SDMMC_GetCmdResp6>
 800c790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c792:	69fb      	ldr	r3, [r7, #28]
}
 800c794:	4618      	mov	r0, r3
 800c796:	3720      	adds	r7, #32
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}

0800c79c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c7aa:	230d      	movs	r3, #13
 800c7ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7ae:	2340      	movs	r3, #64	@ 0x40
 800c7b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7bc:	f107 0308 	add.w	r3, r7, #8
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7ff fda4 	bl	800c310 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c7c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7cc:	210d      	movs	r1, #13
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f806 	bl	800c7e0 <SDMMC_GetCmdResp1>
 800c7d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7d6:	69fb      	ldr	r3, [r7, #28]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3720      	adds	r7, #32
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b088      	sub	sp, #32
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c7ee:	4b70      	ldr	r3, [pc, #448]	@ (800c9b0 <SDMMC_GetCmdResp1+0x1d0>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a70      	ldr	r2, [pc, #448]	@ (800c9b4 <SDMMC_GetCmdResp1+0x1d4>)
 800c7f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f8:	0a5a      	lsrs	r2, r3, #9
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	fb02 f303 	mul.w	r3, r2, r3
 800c800:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	1e5a      	subs	r2, r3, #1
 800c806:	61fa      	str	r2, [r7, #28]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d102      	bne.n	800c812 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c80c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c810:	e0c9      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c816:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c818:	69bb      	ldr	r3, [r7, #24]
 800c81a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d0ef      	beq.n	800c802 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d1ea      	bne.n	800c802 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c830:	f003 0304 	and.w	r3, r3, #4
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2204      	movs	r2, #4
 800c83c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c83e:	2304      	movs	r3, #4
 800c840:	e0b1      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c846:	f003 0301 	and.w	r3, r3, #1
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2201      	movs	r2, #1
 800c852:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c854:	2301      	movs	r3, #1
 800c856:	e0a6      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	22c5      	movs	r2, #197	@ 0xc5
 800c85c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c85e:	68f8      	ldr	r0, [r7, #12]
 800c860:	f7ff fd80 	bl	800c364 <SDMMC_GetCommandResponse>
 800c864:	4603      	mov	r3, r0
 800c866:	461a      	mov	r2, r3
 800c868:	7afb      	ldrb	r3, [r7, #11]
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d001      	beq.n	800c872 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c86e:	2301      	movs	r3, #1
 800c870:	e099      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c872:	2100      	movs	r1, #0
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7ff fd82 	bl	800c37e <SDMMC_GetResponse>
 800c87a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	4b4e      	ldr	r3, [pc, #312]	@ (800c9b8 <SDMMC_GetCmdResp1+0x1d8>)
 800c880:	4013      	ands	r3, r2
 800c882:	2b00      	cmp	r3, #0
 800c884:	d101      	bne.n	800c88a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c886:	2300      	movs	r3, #0
 800c888:	e08d      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	da02      	bge.n	800c896 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c890:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c894:	e087      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c8a0:	2340      	movs	r3, #64	@ 0x40
 800c8a2:	e080      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d001      	beq.n	800c8b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c8ae:	2380      	movs	r3, #128	@ 0x80
 800c8b0:	e079      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c8bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c8c0:	e071      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c8cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8d0:	e069      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d002      	beq.n	800c8e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c8dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8e0:	e061      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d002      	beq.n	800c8f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c8ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c8f0:	e059      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c8fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c900:	e051      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c90c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c910:	e049      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c91c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c920:	e041      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d002      	beq.n	800c932 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c92c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c930:	e039      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c93c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c940:	e031      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c94c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c950:	e029      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c95c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c960:	e021      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c96c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c970:	e019      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c97c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c980:	e011      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d002      	beq.n	800c992 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c98c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c990:	e009      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	f003 0308 	and.w	r3, r3, #8
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c99c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c9a0:	e001      	b.n	800c9a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c9a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3720      	adds	r7, #32
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20000048 	.word	0x20000048
 800c9b4:	10624dd3 	.word	0x10624dd3
 800c9b8:	fdffe008 	.word	0xfdffe008

0800c9bc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c9c4:	4b1f      	ldr	r3, [pc, #124]	@ (800ca44 <SDMMC_GetCmdResp2+0x88>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a1f      	ldr	r2, [pc, #124]	@ (800ca48 <SDMMC_GetCmdResp2+0x8c>)
 800c9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c9ce:	0a5b      	lsrs	r3, r3, #9
 800c9d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9d4:	fb02 f303 	mul.w	r3, r2, r3
 800c9d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	1e5a      	subs	r2, r3, #1
 800c9de:	60fa      	str	r2, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d102      	bne.n	800c9ea <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c9e8:	e026      	b.n	800ca38 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0ef      	beq.n	800c9da <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1ea      	bne.n	800c9da <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca08:	f003 0304 	and.w	r3, r3, #4
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d004      	beq.n	800ca1a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2204      	movs	r2, #4
 800ca14:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca16:	2304      	movs	r3, #4
 800ca18:	e00e      	b.n	800ca38 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d004      	beq.n	800ca30 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2201      	movs	r2, #1
 800ca2a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e003      	b.n	800ca38 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	22c5      	movs	r2, #197	@ 0xc5
 800ca34:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ca36:	2300      	movs	r3, #0
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	20000048 	.word	0x20000048
 800ca48:	10624dd3 	.word	0x10624dd3

0800ca4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca54:	4b1a      	ldr	r3, [pc, #104]	@ (800cac0 <SDMMC_GetCmdResp3+0x74>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4a1a      	ldr	r2, [pc, #104]	@ (800cac4 <SDMMC_GetCmdResp3+0x78>)
 800ca5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca5e:	0a5b      	lsrs	r3, r3, #9
 800ca60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca64:	fb02 f303 	mul.w	r3, r2, r3
 800ca68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	1e5a      	subs	r2, r3, #1
 800ca6e:	60fa      	str	r2, [r7, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d102      	bne.n	800ca7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ca78:	e01b      	b.n	800cab2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d0ef      	beq.n	800ca6a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1ea      	bne.n	800ca6a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca98:	f003 0304 	and.w	r3, r3, #4
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d004      	beq.n	800caaa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2204      	movs	r2, #4
 800caa4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800caa6:	2304      	movs	r3, #4
 800caa8:	e003      	b.n	800cab2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	22c5      	movs	r2, #197	@ 0xc5
 800caae:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3714      	adds	r7, #20
 800cab6:	46bd      	mov	sp, r7
 800cab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop
 800cac0:	20000048 	.word	0x20000048
 800cac4:	10624dd3 	.word	0x10624dd3

0800cac8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	460b      	mov	r3, r1
 800cad2:	607a      	str	r2, [r7, #4]
 800cad4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cad6:	4b35      	ldr	r3, [pc, #212]	@ (800cbac <SDMMC_GetCmdResp6+0xe4>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a35      	ldr	r2, [pc, #212]	@ (800cbb0 <SDMMC_GetCmdResp6+0xe8>)
 800cadc:	fba2 2303 	umull	r2, r3, r2, r3
 800cae0:	0a5b      	lsrs	r3, r3, #9
 800cae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cae6:	fb02 f303 	mul.w	r3, r2, r3
 800caea:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	1e5a      	subs	r2, r3, #1
 800caf0:	61fa      	str	r2, [r7, #28]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d102      	bne.n	800cafc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800caf6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cafa:	e052      	b.n	800cba2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb00:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d0ef      	beq.n	800caec <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1ea      	bne.n	800caec <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb1a:	f003 0304 	and.w	r3, r3, #4
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d004      	beq.n	800cb2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2204      	movs	r2, #4
 800cb26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb28:	2304      	movs	r3, #4
 800cb2a:	e03a      	b.n	800cba2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb30:	f003 0301 	and.w	r3, r3, #1
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d004      	beq.n	800cb42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e02f      	b.n	800cba2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f7ff fc0e 	bl	800c364 <SDMMC_GetCommandResponse>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	7afb      	ldrb	r3, [r7, #11]
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d001      	beq.n	800cb56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb52:	2301      	movs	r3, #1
 800cb54:	e025      	b.n	800cba2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	22c5      	movs	r2, #197	@ 0xc5
 800cb5a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f7ff fc0d 	bl	800c37e <SDMMC_GetResponse>
 800cb64:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d106      	bne.n	800cb7e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	0c1b      	lsrs	r3, r3, #16
 800cb74:	b29a      	uxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e011      	b.n	800cba2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d002      	beq.n	800cb8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cb8c:	e009      	b.n	800cba2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cb9c:	e001      	b.n	800cba2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3720      	adds	r7, #32
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20000048 	.word	0x20000048
 800cbb0:	10624dd3 	.word	0x10624dd3

0800cbb4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbbc:	4b22      	ldr	r3, [pc, #136]	@ (800cc48 <SDMMC_GetCmdResp7+0x94>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a22      	ldr	r2, [pc, #136]	@ (800cc4c <SDMMC_GetCmdResp7+0x98>)
 800cbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc6:	0a5b      	lsrs	r3, r3, #9
 800cbc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbcc:	fb02 f303 	mul.w	r3, r2, r3
 800cbd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	1e5a      	subs	r2, r3, #1
 800cbd6:	60fa      	str	r2, [r7, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cbe0:	e02c      	b.n	800cc3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbe6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0ef      	beq.n	800cbd2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1ea      	bne.n	800cbd2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc00:	f003 0304 	and.w	r3, r3, #4
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d004      	beq.n	800cc12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2204      	movs	r2, #4
 800cc0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc0e:	2304      	movs	r3, #4
 800cc10:	e014      	b.n	800cc3c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc16:	f003 0301 	and.w	r3, r3, #1
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d004      	beq.n	800cc28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2201      	movs	r2, #1
 800cc22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc24:	2301      	movs	r3, #1
 800cc26:	e009      	b.n	800cc3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2240      	movs	r2, #64	@ 0x40
 800cc38:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cc3a:	2300      	movs	r3, #0
  
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	20000048 	.word	0x20000048
 800cc4c:	10624dd3 	.word	0x10624dd3

0800cc50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b085      	sub	sp, #20
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc58:	4b11      	ldr	r3, [pc, #68]	@ (800cca0 <SDMMC_GetCmdError+0x50>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a11      	ldr	r2, [pc, #68]	@ (800cca4 <SDMMC_GetCmdError+0x54>)
 800cc5e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc62:	0a5b      	lsrs	r3, r3, #9
 800cc64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc68:	fb02 f303 	mul.w	r3, r2, r3
 800cc6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	1e5a      	subs	r2, r3, #1
 800cc72:	60fa      	str	r2, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d102      	bne.n	800cc7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc7c:	e009      	b.n	800cc92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0f1      	beq.n	800cc6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	22c5      	movs	r2, #197	@ 0xc5
 800cc8e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	20000048 	.word	0x20000048
 800cca4:	10624dd3 	.word	0x10624dd3

0800cca8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ccac:	4904      	ldr	r1, [pc, #16]	@ (800ccc0 <MX_FATFS_Init+0x18>)
 800ccae:	4805      	ldr	r0, [pc, #20]	@ (800ccc4 <MX_FATFS_Init+0x1c>)
 800ccb0:	f000 fa88 	bl	800d1c4 <FATFS_LinkDriver>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	4b03      	ldr	r3, [pc, #12]	@ (800ccc8 <MX_FATFS_Init+0x20>)
 800ccba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ccbc:	bf00      	nop
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	20000e24 	.word	0x20000e24
 800ccc4:	0801f7e4 	.word	0x0801f7e4
 800ccc8:	20000e20 	.word	0x20000e20

0800cccc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ccd6:	f000 f86d 	bl	800cdb4 <BSP_SD_IsDetected>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d001      	beq.n	800cce4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cce0:	2302      	movs	r3, #2
 800cce2:	e005      	b.n	800ccf0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cce4:	4804      	ldr	r0, [pc, #16]	@ (800ccf8 <BSP_SD_Init+0x2c>)
 800cce6:	f7fd f981 	bl	8009fec <HAL_SD_Init>
 800ccea:	4603      	mov	r3, r0
 800ccec:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ccee:	79fb      	ldrb	r3, [r7, #7]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	200008e4 	.word	0x200008e4

0800ccfc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cd08:	2300      	movs	r3, #0
 800cd0a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	68f9      	ldr	r1, [r7, #12]
 800cd12:	4806      	ldr	r0, [pc, #24]	@ (800cd2c <BSP_SD_ReadBlocks_DMA+0x30>)
 800cd14:	f7fd fa22 	bl	800a15c <HAL_SD_ReadBlocks_DMA>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd22:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3718      	adds	r7, #24
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	200008e4 	.word	0x200008e4

0800cd30 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	68ba      	ldr	r2, [r7, #8]
 800cd44:	68f9      	ldr	r1, [r7, #12]
 800cd46:	4806      	ldr	r0, [pc, #24]	@ (800cd60 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cd48:	f7fd faea 	bl	800a320 <HAL_SD_WriteBlocks_DMA>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d001      	beq.n	800cd56 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cd52:	2301      	movs	r3, #1
 800cd54:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cd56:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3718      	adds	r7, #24
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	200008e4 	.word	0x200008e4

0800cd64 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cd68:	4805      	ldr	r0, [pc, #20]	@ (800cd80 <BSP_SD_GetCardState+0x1c>)
 800cd6a:	f7fd fd99 	bl	800a8a0 <HAL_SD_GetCardState>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b04      	cmp	r3, #4
 800cd72:	bf14      	ite	ne
 800cd74:	2301      	movne	r3, #1
 800cd76:	2300      	moveq	r3, #0
 800cd78:	b2db      	uxtb	r3, r3
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	200008e4 	.word	0x200008e4

0800cd84 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	4803      	ldr	r0, [pc, #12]	@ (800cd9c <BSP_SD_GetCardInfo+0x18>)
 800cd90:	f7fd fd5a 	bl	800a848 <HAL_SD_GetCardInfo>
}
 800cd94:	bf00      	nop
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	200008e4 	.word	0x200008e4

0800cda0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cda8:	f000 f9b2 	bl	800d110 <BSP_SD_ReadCpltCallback>
}
 800cdac:	bf00      	nop
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cdbe:	f000 f80b 	bl	800cdd8 <BSP_PlatformIsDetected>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	b2db      	uxtb	r3, r3
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3708      	adds	r7, #8
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cdde:	2301      	movs	r3, #1
 800cde0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cde2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cde6:	4806      	ldr	r0, [pc, #24]	@ (800ce00 <BSP_PlatformIsDetected+0x28>)
 800cde8:	f7fa fbaa 	bl	8007540 <HAL_GPIO_ReadPin>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d001      	beq.n	800cdf6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	40020800 	.word	0x40020800

0800ce04 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ce0c:	f000 fa26 	bl	800d25c <osKernelSysTick>
 800ce10:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ce12:	e006      	b.n	800ce22 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce14:	f7ff ffa6 	bl	800cd64 <BSP_SD_GetCardState>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e009      	b.n	800ce36 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ce22:	f000 fa1b 	bl	800d25c <osKernelSysTick>
 800ce26:	4602      	mov	r2, r0
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d8f0      	bhi.n	800ce14 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ce32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
	...

0800ce40 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ce4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce78 <SD_CheckStatus+0x38>)
 800ce4c:	2201      	movs	r2, #1
 800ce4e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce50:	f7ff ff88 	bl	800cd64 <BSP_SD_GetCardState>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d107      	bne.n	800ce6a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ce5a:	4b07      	ldr	r3, [pc, #28]	@ (800ce78 <SD_CheckStatus+0x38>)
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	f023 0301 	bic.w	r3, r3, #1
 800ce64:	b2da      	uxtb	r2, r3
 800ce66:	4b04      	ldr	r3, [pc, #16]	@ (800ce78 <SD_CheckStatus+0x38>)
 800ce68:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ce6a:	4b03      	ldr	r3, [pc, #12]	@ (800ce78 <SD_CheckStatus+0x38>)
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	b2db      	uxtb	r3, r3
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	20000051 	.word	0x20000051

0800ce7c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ce7c:	b590      	push	{r4, r7, lr}
 800ce7e:	b087      	sub	sp, #28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	4603      	mov	r3, r0
 800ce84:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ce86:	4b20      	ldr	r3, [pc, #128]	@ (800cf08 <SD_initialize+0x8c>)
 800ce88:	2201      	movs	r2, #1
 800ce8a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ce8c:	f000 f9da 	bl	800d244 <osKernelRunning>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d030      	beq.n	800cef8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ce96:	f7ff ff19 	bl	800cccc <BSP_SD_Init>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d107      	bne.n	800ceb0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff ffcc 	bl	800ce40 <SD_CheckStatus>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	461a      	mov	r2, r3
 800ceac:	4b16      	ldr	r3, [pc, #88]	@ (800cf08 <SD_initialize+0x8c>)
 800ceae:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ceb0:	4b15      	ldr	r3, [pc, #84]	@ (800cf08 <SD_initialize+0x8c>)
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d01e      	beq.n	800cef8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ceba:	4b14      	ldr	r3, [pc, #80]	@ (800cf0c <SD_initialize+0x90>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d10e      	bne.n	800cee0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800cec2:	4b13      	ldr	r3, [pc, #76]	@ (800cf10 <SD_initialize+0x94>)
 800cec4:	f107 0408 	add.w	r4, r7, #8
 800cec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ceca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800cece:	f107 0308 	add.w	r3, r7, #8
 800ced2:	2100      	movs	r1, #0
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 fa49 	bl	800d36c <osMessageCreate>
 800ceda:	4603      	mov	r3, r0
 800cedc:	4a0b      	ldr	r2, [pc, #44]	@ (800cf0c <SD_initialize+0x90>)
 800cede:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800cee0:	4b0a      	ldr	r3, [pc, #40]	@ (800cf0c <SD_initialize+0x90>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d107      	bne.n	800cef8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800cee8:	4b07      	ldr	r3, [pc, #28]	@ (800cf08 <SD_initialize+0x8c>)
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	f043 0301 	orr.w	r3, r3, #1
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	4b04      	ldr	r3, [pc, #16]	@ (800cf08 <SD_initialize+0x8c>)
 800cef6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cef8:	4b03      	ldr	r3, [pc, #12]	@ (800cf08 <SD_initialize+0x8c>)
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	b2db      	uxtb	r3, r3
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd90      	pop	{r4, r7, pc}
 800cf06:	bf00      	nop
 800cf08:	20000051 	.word	0x20000051
 800cf0c:	20000e28 	.word	0x20000e28
 800cf10:	080114e0 	.word	0x080114e0

0800cf14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cf1e:	79fb      	ldrb	r3, [r7, #7]
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7ff ff8d 	bl	800ce40 <SD_CheckStatus>
 800cf26:	4603      	mov	r3, r0
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08a      	sub	sp, #40	@ 0x28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	607a      	str	r2, [r7, #4]
 800cf3a:	603b      	str	r3, [r7, #0]
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800cf40:	2301      	movs	r3, #1
 800cf42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cf46:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cf4a:	f7ff ff5b 	bl	800ce04 <SD_CheckStatusWithTimeout>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	da02      	bge.n	800cf5a <SD_read+0x2a>
  {
    return res;
 800cf54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cf58:	e032      	b.n	800cfc0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	6879      	ldr	r1, [r7, #4]
 800cf5e:	68b8      	ldr	r0, [r7, #8]
 800cf60:	f7ff fecc 	bl	800ccfc <BSP_SD_ReadBlocks_DMA>
 800cf64:	4603      	mov	r3, r0
 800cf66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800cf6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d124      	bne.n	800cfbc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cf72:	4b15      	ldr	r3, [pc, #84]	@ (800cfc8 <SD_read+0x98>)
 800cf74:	6819      	ldr	r1, [r3, #0]
 800cf76:	f107 0314 	add.w	r3, r7, #20
 800cf7a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f000 fa5c 	bl	800d43c <osMessageGet>

    if (event.status == osEventMessage)
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	2b10      	cmp	r3, #16
 800cf88:	d118      	bne.n	800cfbc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	d115      	bne.n	800cfbc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800cf90:	f000 f964 	bl	800d25c <osKernelSysTick>
 800cf94:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cf96:	e008      	b.n	800cfaa <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cf98:	f7ff fee4 	bl	800cd64 <BSP_SD_GetCardState>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d103      	bne.n	800cfaa <SD_read+0x7a>
              {
                res = RES_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cfa8:	e008      	b.n	800cfbc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cfaa:	f000 f957 	bl	800d25c <osKernelSysTick>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	6a3b      	ldr	r3, [r7, #32]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d9ed      	bls.n	800cf98 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800cfbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3728      	adds	r7, #40	@ 0x28
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20000e28 	.word	0x20000e28

0800cfcc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08a      	sub	sp, #40	@ 0x28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60b9      	str	r1, [r7, #8]
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	603b      	str	r3, [r7, #0]
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cfe2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cfe6:	f7ff ff0d 	bl	800ce04 <SD_CheckStatusWithTimeout>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	da02      	bge.n	800cff6 <SD_write+0x2a>
  {
    return res;
 800cff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cff4:	e02e      	b.n	800d054 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	6879      	ldr	r1, [r7, #4]
 800cffa:	68b8      	ldr	r0, [r7, #8]
 800cffc:	f7ff fe98 	bl	800cd30 <BSP_SD_WriteBlocks_DMA>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d124      	bne.n	800d050 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d006:	4b15      	ldr	r3, [pc, #84]	@ (800d05c <SD_write+0x90>)
 800d008:	6819      	ldr	r1, [r3, #0]
 800d00a:	f107 0314 	add.w	r3, r7, #20
 800d00e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d012:	4618      	mov	r0, r3
 800d014:	f000 fa12 	bl	800d43c <osMessageGet>

    if (event.status == osEventMessage)
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	2b10      	cmp	r3, #16
 800d01c:	d118      	bne.n	800d050 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	2b02      	cmp	r3, #2
 800d022:	d115      	bne.n	800d050 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d024:	f000 f91a 	bl	800d25c <osKernelSysTick>
 800d028:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d02a:	e008      	b.n	800d03e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d02c:	f7ff fe9a 	bl	800cd64 <BSP_SD_GetCardState>
 800d030:	4603      	mov	r3, r0
 800d032:	2b00      	cmp	r3, #0
 800d034:	d103      	bne.n	800d03e <SD_write+0x72>
          {
            res = RES_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d03c:	e008      	b.n	800d050 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d03e:	f000 f90d 	bl	800d25c <osKernelSysTick>
 800d042:	4602      	mov	r2, r0
 800d044:	6a3b      	ldr	r3, [r7, #32]
 800d046:	1ad3      	subs	r3, r2, r3
 800d048:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d9ed      	bls.n	800d02c <SD_write+0x60>
    }

  }
#endif

  return res;
 800d050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d054:	4618      	mov	r0, r3
 800d056:	3728      	adds	r7, #40	@ 0x28
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	20000e28 	.word	0x20000e28

0800d060 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b08c      	sub	sp, #48	@ 0x30
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	603a      	str	r2, [r7, #0]
 800d06a:	71fb      	strb	r3, [r7, #7]
 800d06c:	460b      	mov	r3, r1
 800d06e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d076:	4b25      	ldr	r3, [pc, #148]	@ (800d10c <SD_ioctl+0xac>)
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	f003 0301 	and.w	r3, r3, #1
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <SD_ioctl+0x28>
 800d084:	2303      	movs	r3, #3
 800d086:	e03c      	b.n	800d102 <SD_ioctl+0xa2>

  switch (cmd)
 800d088:	79bb      	ldrb	r3, [r7, #6]
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d834      	bhi.n	800d0f8 <SD_ioctl+0x98>
 800d08e:	a201      	add	r2, pc, #4	@ (adr r2, 800d094 <SD_ioctl+0x34>)
 800d090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d094:	0800d0a5 	.word	0x0800d0a5
 800d098:	0800d0ad 	.word	0x0800d0ad
 800d09c:	0800d0c5 	.word	0x0800d0c5
 800d0a0:	0800d0df 	.word	0x0800d0df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d0aa:	e028      	b.n	800d0fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0ac:	f107 030c 	add.w	r3, r7, #12
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7ff fe67 	bl	800cd84 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d0c2:	e01c      	b.n	800d0fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0c4:	f107 030c 	add.w	r3, r7, #12
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7ff fe5b 	bl	800cd84 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d0dc:	e00f      	b.n	800d0fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0de:	f107 030c 	add.w	r3, r7, #12
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff fe4e 	bl	800cd84 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ea:	0a5a      	lsrs	r2, r3, #9
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d0f6:	e002      	b.n	800d0fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d0f8:	2304      	movs	r3, #4
 800d0fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d0fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d102:	4618      	mov	r0, r3
 800d104:	3730      	adds	r7, #48	@ 0x30
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	20000051 	.word	0x20000051

0800d110 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d114:	4b04      	ldr	r3, [pc, #16]	@ (800d128 <BSP_SD_ReadCpltCallback+0x18>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2200      	movs	r2, #0
 800d11a:	2101      	movs	r1, #1
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 f94d 	bl	800d3bc <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800d122:	bf00      	nop
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20000e28 	.word	0x20000e28

0800d12c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	60b9      	str	r1, [r7, #8]
 800d136:	4613      	mov	r3, r2
 800d138:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d13a:	2301      	movs	r3, #1
 800d13c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d142:	4b1f      	ldr	r3, [pc, #124]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d144:	7a5b      	ldrb	r3, [r3, #9]
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d131      	bne.n	800d1b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d14c:	4b1c      	ldr	r3, [pc, #112]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d14e:	7a5b      	ldrb	r3, [r3, #9]
 800d150:	b2db      	uxtb	r3, r3
 800d152:	461a      	mov	r2, r3
 800d154:	4b1a      	ldr	r3, [pc, #104]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d156:	2100      	movs	r1, #0
 800d158:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d15a:	4b19      	ldr	r3, [pc, #100]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d15c:	7a5b      	ldrb	r3, [r3, #9]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	4a17      	ldr	r2, [pc, #92]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d16a:	4b15      	ldr	r3, [pc, #84]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d16c:	7a5b      	ldrb	r3, [r3, #9]
 800d16e:	b2db      	uxtb	r3, r3
 800d170:	461a      	mov	r2, r3
 800d172:	4b13      	ldr	r3, [pc, #76]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d174:	4413      	add	r3, r2
 800d176:	79fa      	ldrb	r2, [r7, #7]
 800d178:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d17a:	4b11      	ldr	r3, [pc, #68]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d17c:	7a5b      	ldrb	r3, [r3, #9]
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	b2d1      	uxtb	r1, r2
 800d184:	4a0e      	ldr	r2, [pc, #56]	@ (800d1c0 <FATFS_LinkDriverEx+0x94>)
 800d186:	7251      	strb	r1, [r2, #9]
 800d188:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d18a:	7dbb      	ldrb	r3, [r7, #22]
 800d18c:	3330      	adds	r3, #48	@ 0x30
 800d18e:	b2da      	uxtb	r2, r3
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	3301      	adds	r3, #1
 800d198:	223a      	movs	r2, #58	@ 0x3a
 800d19a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	3302      	adds	r3, #2
 800d1a0:	222f      	movs	r2, #47	@ 0x2f
 800d1a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	3303      	adds	r3, #3
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	371c      	adds	r7, #28
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
 800d1be:	bf00      	nop
 800d1c0:	20000e2c 	.word	0x20000e2c

0800d1c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b082      	sub	sp, #8
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff ffaa 	bl	800d12c <FATFS_LinkDriverEx>
 800d1d8:	4603      	mov	r3, r0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b085      	sub	sp, #20
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d1f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1f4:	2b84      	cmp	r3, #132	@ 0x84
 800d1f6:	d005      	beq.n	800d204 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d1f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	4413      	add	r3, r2
 800d200:	3303      	adds	r3, #3
 800d202:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d204:	68fb      	ldr	r3, [r7, #12]
}
 800d206:	4618      	mov	r0, r3
 800d208:	3714      	adds	r7, #20
 800d20a:	46bd      	mov	sp, r7
 800d20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d210:	4770      	bx	lr

0800d212 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d212:	b480      	push	{r7}
 800d214:	b083      	sub	sp, #12
 800d216:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d218:	f3ef 8305 	mrs	r3, IPSR
 800d21c:	607b      	str	r3, [r7, #4]
  return(result);
 800d21e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d220:	2b00      	cmp	r3, #0
 800d222:	bf14      	ite	ne
 800d224:	2301      	movne	r3, #1
 800d226:	2300      	moveq	r3, #0
 800d228:	b2db      	uxtb	r3, r3
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	370c      	adds	r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d234:	4770      	bx	lr

0800d236 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d23a:	f001 fb9d 	bl	800e978 <vTaskStartScheduler>
  
  return osOK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	bd80      	pop	{r7, pc}

0800d244 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800d248:	f001 ffec 	bl	800f224 <xTaskGetSchedulerState>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d101      	bne.n	800d256 <osKernelRunning+0x12>
    return 0;
 800d252:	2300      	movs	r3, #0
 800d254:	e000      	b.n	800d258 <osKernelRunning+0x14>
  else
    return 1;
 800d256:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800d258:	4618      	mov	r0, r3
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800d260:	f7ff ffd7 	bl	800d212 <inHandlerMode>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800d26a:	f001 fcb1 	bl	800ebd0 <xTaskGetTickCountFromISR>
 800d26e:	4603      	mov	r3, r0
 800d270:	e002      	b.n	800d278 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800d272:	f001 fc9d 	bl	800ebb0 <xTaskGetTickCount>
 800d276:	4603      	mov	r3, r0
  }
}
 800d278:	4618      	mov	r0, r3
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d27e:	b089      	sub	sp, #36	@ 0x24
 800d280:	af04      	add	r7, sp, #16
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d020      	beq.n	800d2d0 <osThreadCreate+0x54>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d01c      	beq.n	800d2d0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685c      	ldr	r4, [r3, #4]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	691e      	ldr	r6, [r3, #16]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff ff9a 	bl	800d1e2 <makeFreeRtosPriority>
 800d2ae:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	695b      	ldr	r3, [r3, #20]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2b8:	9202      	str	r2, [sp, #8]
 800d2ba:	9301      	str	r3, [sp, #4]
 800d2bc:	9100      	str	r1, [sp, #0]
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	4632      	mov	r2, r6
 800d2c2:	4629      	mov	r1, r5
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f001 f8e1 	bl	800e48c <xTaskCreateStatic>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	60fb      	str	r3, [r7, #12]
 800d2ce:	e01c      	b.n	800d30a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685c      	ldr	r4, [r3, #4]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2dc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7ff ff7c 	bl	800d1e2 <makeFreeRtosPriority>
 800d2ea:	4602      	mov	r2, r0
 800d2ec:	f107 030c 	add.w	r3, r7, #12
 800d2f0:	9301      	str	r3, [sp, #4]
 800d2f2:	9200      	str	r2, [sp, #0]
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	4632      	mov	r2, r6
 800d2f8:	4629      	mov	r1, r5
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f001 f92c 	bl	800e558 <xTaskCreate>
 800d300:	4603      	mov	r3, r0
 800d302:	2b01      	cmp	r3, #1
 800d304:	d001      	beq.n	800d30a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d306:	2300      	movs	r3, #0
 800d308:	e000      	b.n	800d30c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d30a:	68fb      	ldr	r3, [r7, #12]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3714      	adds	r7, #20
 800d310:	46bd      	mov	sp, r7
 800d312:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d314 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <osDelay+0x16>
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	e000      	b.n	800d32c <osDelay+0x18>
 800d32a:	2301      	movs	r3, #1
 800d32c:	4618      	mov	r0, r3
 800d32e:	f001 faeb 	bl	800e908 <vTaskDelay>
  
  return osOK;
 800d332:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d007      	beq.n	800d35c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	4619      	mov	r1, r3
 800d352:	2001      	movs	r0, #1
 800d354:	f000 fb21 	bl	800d99a <xQueueCreateMutexStatic>
 800d358:	4603      	mov	r3, r0
 800d35a:	e003      	b.n	800d364 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800d35c:	2001      	movs	r0, #1
 800d35e:	f000 fb04 	bl	800d96a <xQueueCreateMutex>
 800d362:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d36c:	b590      	push	{r4, r7, lr}
 800d36e:	b085      	sub	sp, #20
 800d370:	af02      	add	r7, sp, #8
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	689b      	ldr	r3, [r3, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d011      	beq.n	800d3a2 <osMessageCreate+0x36>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00d      	beq.n	800d3a2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6818      	ldr	r0, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6859      	ldr	r1, [r3, #4]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	689a      	ldr	r2, [r3, #8]
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	2400      	movs	r4, #0
 800d398:	9400      	str	r4, [sp, #0]
 800d39a:	f000 f9e3 	bl	800d764 <xQueueGenericCreateStatic>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	e008      	b.n	800d3b4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6818      	ldr	r0, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	f000 fa60 	bl	800d872 <xQueueGenericCreate>
 800d3b2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd90      	pop	{r4, r7, pc}

0800d3bc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b086      	sub	sp, #24
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d101      	bne.n	800d3da <osMessagePut+0x1e>
    ticks = 1;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d3da:	f7ff ff1a 	bl	800d212 <inHandlerMode>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d018      	beq.n	800d416 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d3e4:	f107 0210 	add.w	r2, r7, #16
 800d3e8:	f107 0108 	add.w	r1, r7, #8
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f000 fbf8 	bl	800dbe4 <xQueueGenericSendFromISR>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d001      	beq.n	800d3fe <osMessagePut+0x42>
      return osErrorOS;
 800d3fa:	23ff      	movs	r3, #255	@ 0xff
 800d3fc:	e018      	b.n	800d430 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d014      	beq.n	800d42e <osMessagePut+0x72>
 800d404:	4b0c      	ldr	r3, [pc, #48]	@ (800d438 <osMessagePut+0x7c>)
 800d406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d40a:	601a      	str	r2, [r3, #0]
 800d40c:	f3bf 8f4f 	dsb	sy
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	e00b      	b.n	800d42e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d416:	f107 0108 	add.w	r1, r7, #8
 800d41a:	2300      	movs	r3, #0
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f000 fad6 	bl	800d9d0 <xQueueGenericSend>
 800d424:	4603      	mov	r3, r0
 800d426:	2b01      	cmp	r3, #1
 800d428:	d001      	beq.n	800d42e <osMessagePut+0x72>
      return osErrorOS;
 800d42a:	23ff      	movs	r3, #255	@ 0xff
 800d42c:	e000      	b.n	800d430 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d42e:	2300      	movs	r3, #0
}
 800d430:	4618      	mov	r0, r3
 800d432:	3718      	adds	r7, #24
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	e000ed04 	.word	0xe000ed04

0800d43c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d43c:	b590      	push	{r4, r7, lr}
 800d43e:	b08b      	sub	sp, #44	@ 0x2c
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d44c:	2300      	movs	r3, #0
 800d44e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10a      	bne.n	800d46c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d456:	2380      	movs	r3, #128	@ 0x80
 800d458:	617b      	str	r3, [r7, #20]
    return event;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	461c      	mov	r4, r3
 800d45e:	f107 0314 	add.w	r3, r7, #20
 800d462:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d46a:	e054      	b.n	800d516 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d46c:	2300      	movs	r3, #0
 800d46e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d470:	2300      	movs	r3, #0
 800d472:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d47a:	d103      	bne.n	800d484 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d47c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d480:	627b      	str	r3, [r7, #36]	@ 0x24
 800d482:	e009      	b.n	800d498 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800d48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d490:	2b00      	cmp	r3, #0
 800d492:	d101      	bne.n	800d498 <osMessageGet+0x5c>
      ticks = 1;
 800d494:	2301      	movs	r3, #1
 800d496:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d498:	f7ff febb 	bl	800d212 <inHandlerMode>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d01c      	beq.n	800d4dc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d4a2:	f107 0220 	add.w	r2, r7, #32
 800d4a6:	f107 0314 	add.w	r3, r7, #20
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	68b8      	ldr	r0, [r7, #8]
 800d4b0:	f000 fe3c 	bl	800e12c <xQueueReceiveFromISR>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d102      	bne.n	800d4c0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d4ba:	2310      	movs	r3, #16
 800d4bc:	617b      	str	r3, [r7, #20]
 800d4be:	e001      	b.n	800d4c4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d4c4:	6a3b      	ldr	r3, [r7, #32]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d01d      	beq.n	800d506 <osMessageGet+0xca>
 800d4ca:	4b15      	ldr	r3, [pc, #84]	@ (800d520 <osMessageGet+0xe4>)
 800d4cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4d0:	601a      	str	r2, [r3, #0]
 800d4d2:	f3bf 8f4f 	dsb	sy
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	e014      	b.n	800d506 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d4dc:	f107 0314 	add.w	r3, r7, #20
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	68b8      	ldr	r0, [r7, #8]
 800d4e8:	f000 fc20 	bl	800dd2c <xQueueReceive>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d102      	bne.n	800d4f8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d4f2:	2310      	movs	r3, #16
 800d4f4:	617b      	str	r3, [r7, #20]
 800d4f6:	e006      	b.n	800d506 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d101      	bne.n	800d502 <osMessageGet+0xc6>
 800d4fe:	2300      	movs	r3, #0
 800d500:	e000      	b.n	800d504 <osMessageGet+0xc8>
 800d502:	2340      	movs	r3, #64	@ 0x40
 800d504:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	461c      	mov	r4, r3
 800d50a:	f107 0314 	add.w	r3, r7, #20
 800d50e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d512:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	372c      	adds	r7, #44	@ 0x2c
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd90      	pop	{r4, r7, pc}
 800d51e:	bf00      	nop
 800d520:	e000ed04 	.word	0xe000ed04

0800d524 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f103 0208 	add.w	r2, r3, #8
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d53c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f103 0208 	add.w	r2, r3, #8
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f103 0208 	add.w	r2, r3, #8
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d558:	bf00      	nop
 800d55a:	370c      	adds	r7, #12
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	2200      	movs	r2, #0
 800d570:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d572:	bf00      	nop
 800d574:	370c      	adds	r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr

0800d57e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d57e:	b480      	push	{r7}
 800d580:	b085      	sub	sp, #20
 800d582:	af00      	add	r7, sp, #0
 800d584:	6078      	str	r0, [r7, #4]
 800d586:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	689a      	ldr	r2, [r3, #8]
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	683a      	ldr	r2, [r7, #0]
 800d5a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	1c5a      	adds	r2, r3, #1
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	601a      	str	r2, [r3, #0]
}
 800d5ba:	bf00      	nop
 800d5bc:	3714      	adds	r7, #20
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr

0800d5c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5c6:	b480      	push	{r7}
 800d5c8:	b085      	sub	sp, #20
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
 800d5ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5dc:	d103      	bne.n	800d5e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	e00c      	b.n	800d600 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	3308      	adds	r3, #8
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	e002      	b.n	800d5f4 <vListInsert+0x2e>
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	60fb      	str	r3, [r7, #12]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d2f6      	bcs.n	800d5ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	685a      	ldr	r2, [r3, #4]
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	683a      	ldr	r2, [r7, #0]
 800d60e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	68fa      	ldr	r2, [r7, #12]
 800d614:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	683a      	ldr	r2, [r7, #0]
 800d61a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	687a      	ldr	r2, [r7, #4]
 800d620:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	601a      	str	r2, [r3, #0]
}
 800d62c:	bf00      	nop
 800d62e:	3714      	adds	r7, #20
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d638:	b480      	push	{r7}
 800d63a:	b085      	sub	sp, #20
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	6892      	ldr	r2, [r2, #8]
 800d64e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	6852      	ldr	r2, [r2, #4]
 800d658:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	429a      	cmp	r2, r3
 800d662:	d103      	bne.n	800d66c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	689a      	ldr	r2, [r3, #8]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	1e5a      	subs	r2, r3, #1
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3714      	adds	r7, #20
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10d      	bne.n	800d6bc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a4:	b672      	cpsid	i
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	b662      	cpsie	i
 800d6b4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d6b6:	bf00      	nop
 800d6b8:	bf00      	nop
 800d6ba:	e7fd      	b.n	800d6b8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d6bc:	f002 f906 	bl	800f8cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6c8:	68f9      	ldr	r1, [r7, #12]
 800d6ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6cc:	fb01 f303 	mul.w	r3, r1, r3
 800d6d0:	441a      	add	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	68f9      	ldr	r1, [r7, #12]
 800d6f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d6f2:	fb01 f303 	mul.w	r3, r1, r3
 800d6f6:	441a      	add	r2, r3
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	22ff      	movs	r2, #255	@ 0xff
 800d700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	22ff      	movs	r2, #255	@ 0xff
 800d708:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d114      	bne.n	800d73c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	691b      	ldr	r3, [r3, #16]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d01a      	beq.n	800d750 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	3310      	adds	r3, #16
 800d71e:	4618      	mov	r0, r3
 800d720:	f001 fbb2 	bl	800ee88 <xTaskRemoveFromEventList>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d012      	beq.n	800d750 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d72a:	4b0d      	ldr	r3, [pc, #52]	@ (800d760 <xQueueGenericReset+0xd4>)
 800d72c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	e009      	b.n	800d750 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	3310      	adds	r3, #16
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff feef 	bl	800d524 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	3324      	adds	r3, #36	@ 0x24
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7ff feea 	bl	800d524 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d750:	f002 f8f2 	bl	800f938 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d754:	2301      	movs	r3, #1
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	e000ed04 	.word	0xe000ed04

0800d764 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d764:	b580      	push	{r7, lr}
 800d766:	b08e      	sub	sp, #56	@ 0x38
 800d768:	af02      	add	r7, sp, #8
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
 800d770:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d10d      	bne.n	800d794 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d77c:	b672      	cpsid	i
 800d77e:	f383 8811 	msr	BASEPRI, r3
 800d782:	f3bf 8f6f 	isb	sy
 800d786:	f3bf 8f4f 	dsb	sy
 800d78a:	b662      	cpsie	i
 800d78c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d78e:	bf00      	nop
 800d790:	bf00      	nop
 800d792:	e7fd      	b.n	800d790 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d10d      	bne.n	800d7b6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800d79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d79e:	b672      	cpsid	i
 800d7a0:	f383 8811 	msr	BASEPRI, r3
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	f3bf 8f4f 	dsb	sy
 800d7ac:	b662      	cpsie	i
 800d7ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d7b0:	bf00      	nop
 800d7b2:	bf00      	nop
 800d7b4:	e7fd      	b.n	800d7b2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <xQueueGenericCreateStatic+0x5e>
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d001      	beq.n	800d7c6 <xQueueGenericCreateStatic+0x62>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e000      	b.n	800d7c8 <xQueueGenericCreateStatic+0x64>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10d      	bne.n	800d7e8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d0:	b672      	cpsid	i
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	b662      	cpsie	i
 800d7e0:	623b      	str	r3, [r7, #32]
}
 800d7e2:	bf00      	nop
 800d7e4:	bf00      	nop
 800d7e6:	e7fd      	b.n	800d7e4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d102      	bne.n	800d7f4 <xQueueGenericCreateStatic+0x90>
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d101      	bne.n	800d7f8 <xQueueGenericCreateStatic+0x94>
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	e000      	b.n	800d7fa <xQueueGenericCreateStatic+0x96>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d10d      	bne.n	800d81a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d802:	b672      	cpsid	i
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	b662      	cpsie	i
 800d812:	61fb      	str	r3, [r7, #28]
}
 800d814:	bf00      	nop
 800d816:	bf00      	nop
 800d818:	e7fd      	b.n	800d816 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d81a:	2348      	movs	r3, #72	@ 0x48
 800d81c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	2b48      	cmp	r3, #72	@ 0x48
 800d822:	d00d      	beq.n	800d840 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d828:	b672      	cpsid	i
 800d82a:	f383 8811 	msr	BASEPRI, r3
 800d82e:	f3bf 8f6f 	isb	sy
 800d832:	f3bf 8f4f 	dsb	sy
 800d836:	b662      	cpsie	i
 800d838:	61bb      	str	r3, [r7, #24]
}
 800d83a:	bf00      	nop
 800d83c:	bf00      	nop
 800d83e:	e7fd      	b.n	800d83c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d840:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00d      	beq.n	800d868 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d854:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	4613      	mov	r3, r2
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	68b9      	ldr	r1, [r7, #8]
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 f848 	bl	800d8f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3730      	adds	r7, #48	@ 0x30
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d872:	b580      	push	{r7, lr}
 800d874:	b08a      	sub	sp, #40	@ 0x28
 800d876:	af02      	add	r7, sp, #8
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	4613      	mov	r3, r2
 800d87e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10d      	bne.n	800d8a2 <xQueueGenericCreate+0x30>
	__asm volatile
 800d886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88a:	b672      	cpsid	i
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	b662      	cpsie	i
 800d89a:	613b      	str	r3, [r7, #16]
}
 800d89c:	bf00      	nop
 800d89e:	bf00      	nop
 800d8a0:	e7fd      	b.n	800d89e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d102      	bne.n	800d8ae <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61fb      	str	r3, [r7, #28]
 800d8ac:	e004      	b.n	800d8b8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	68ba      	ldr	r2, [r7, #8]
 800d8b2:	fb02 f303 	mul.w	r3, r2, r3
 800d8b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	3348      	adds	r3, #72	@ 0x48
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f002 f933 	bl	800fb28 <pvPortMalloc>
 800d8c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d011      	beq.n	800d8ee <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	3348      	adds	r3, #72	@ 0x48
 800d8d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d8d4:	69bb      	ldr	r3, [r7, #24]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d8dc:	79fa      	ldrb	r2, [r7, #7]
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	9300      	str	r3, [sp, #0]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	697a      	ldr	r2, [r7, #20]
 800d8e6:	68b9      	ldr	r1, [r7, #8]
 800d8e8:	68f8      	ldr	r0, [r7, #12]
 800d8ea:	f000 f805 	bl	800d8f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d8ee:	69bb      	ldr	r3, [r7, #24]
	}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3720      	adds	r7, #32
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	607a      	str	r2, [r7, #4]
 800d904:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d103      	bne.n	800d914 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	69ba      	ldr	r2, [r7, #24]
 800d910:	601a      	str	r2, [r3, #0]
 800d912:	e002      	b.n	800d91a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d914:	69bb      	ldr	r3, [r7, #24]
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d91a:	69bb      	ldr	r3, [r7, #24]
 800d91c:	68fa      	ldr	r2, [r7, #12]
 800d91e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	68ba      	ldr	r2, [r7, #8]
 800d924:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d926:	2101      	movs	r1, #1
 800d928:	69b8      	ldr	r0, [r7, #24]
 800d92a:	f7ff feaf 	bl	800d68c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d92e:	bf00      	nop
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d00e      	beq.n	800d962 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2200      	movs	r2, #0
 800d948:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d956:	2300      	movs	r3, #0
 800d958:	2200      	movs	r2, #0
 800d95a:	2100      	movs	r1, #0
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 f837 	bl	800d9d0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d962:	bf00      	nop
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b086      	sub	sp, #24
 800d96e:	af00      	add	r7, sp, #0
 800d970:	4603      	mov	r3, r0
 800d972:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d974:	2301      	movs	r3, #1
 800d976:	617b      	str	r3, [r7, #20]
 800d978:	2300      	movs	r3, #0
 800d97a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d97c:	79fb      	ldrb	r3, [r7, #7]
 800d97e:	461a      	mov	r2, r3
 800d980:	6939      	ldr	r1, [r7, #16]
 800d982:	6978      	ldr	r0, [r7, #20]
 800d984:	f7ff ff75 	bl	800d872 <xQueueGenericCreate>
 800d988:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f7ff ffd3 	bl	800d936 <prvInitialiseMutex>

		return xNewQueue;
 800d990:	68fb      	ldr	r3, [r7, #12]
	}
 800d992:	4618      	mov	r0, r3
 800d994:	3718      	adds	r7, #24
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b088      	sub	sp, #32
 800d99e:	af02      	add	r7, sp, #8
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	6039      	str	r1, [r7, #0]
 800d9a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	617b      	str	r3, [r7, #20]
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d9ae:	79fb      	ldrb	r3, [r7, #7]
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	6939      	ldr	r1, [r7, #16]
 800d9b8:	6978      	ldr	r0, [r7, #20]
 800d9ba:	f7ff fed3 	bl	800d764 <xQueueGenericCreateStatic>
 800d9be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f7ff ffb8 	bl	800d936 <prvInitialiseMutex>

		return xNewQueue;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
	}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3718      	adds	r7, #24
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b08e      	sub	sp, #56	@ 0x38
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d10d      	bne.n	800da08 <xQueueGenericSend+0x38>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f0:	b672      	cpsid	i
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	b662      	cpsie	i
 800da00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da02:	bf00      	nop
 800da04:	bf00      	nop
 800da06:	e7fd      	b.n	800da04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d103      	bne.n	800da16 <xQueueGenericSend+0x46>
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da12:	2b00      	cmp	r3, #0
 800da14:	d101      	bne.n	800da1a <xQueueGenericSend+0x4a>
 800da16:	2301      	movs	r3, #1
 800da18:	e000      	b.n	800da1c <xQueueGenericSend+0x4c>
 800da1a:	2300      	movs	r3, #0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d10d      	bne.n	800da3c <xQueueGenericSend+0x6c>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da24:	b672      	cpsid	i
 800da26:	f383 8811 	msr	BASEPRI, r3
 800da2a:	f3bf 8f6f 	isb	sy
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	b662      	cpsie	i
 800da34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	e7fd      	b.n	800da38 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	2b02      	cmp	r3, #2
 800da40:	d103      	bne.n	800da4a <xQueueGenericSend+0x7a>
 800da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da46:	2b01      	cmp	r3, #1
 800da48:	d101      	bne.n	800da4e <xQueueGenericSend+0x7e>
 800da4a:	2301      	movs	r3, #1
 800da4c:	e000      	b.n	800da50 <xQueueGenericSend+0x80>
 800da4e:	2300      	movs	r3, #0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10d      	bne.n	800da70 <xQueueGenericSend+0xa0>
	__asm volatile
 800da54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da58:	b672      	cpsid	i
 800da5a:	f383 8811 	msr	BASEPRI, r3
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	f3bf 8f4f 	dsb	sy
 800da66:	b662      	cpsie	i
 800da68:	623b      	str	r3, [r7, #32]
}
 800da6a:	bf00      	nop
 800da6c:	bf00      	nop
 800da6e:	e7fd      	b.n	800da6c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da70:	f001 fbd8 	bl	800f224 <xTaskGetSchedulerState>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d102      	bne.n	800da80 <xQueueGenericSend+0xb0>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <xQueueGenericSend+0xb4>
 800da80:	2301      	movs	r3, #1
 800da82:	e000      	b.n	800da86 <xQueueGenericSend+0xb6>
 800da84:	2300      	movs	r3, #0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d10d      	bne.n	800daa6 <xQueueGenericSend+0xd6>
	__asm volatile
 800da8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da8e:	b672      	cpsid	i
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	b662      	cpsie	i
 800da9e:	61fb      	str	r3, [r7, #28]
}
 800daa0:	bf00      	nop
 800daa2:	bf00      	nop
 800daa4:	e7fd      	b.n	800daa2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800daa6:	f001 ff11 	bl	800f8cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800daaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800daae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d302      	bcc.n	800dabc <xQueueGenericSend+0xec>
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	2b02      	cmp	r3, #2
 800daba:	d129      	bne.n	800db10 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	68b9      	ldr	r1, [r7, #8]
 800dac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dac2:	f000 fbd3 	bl	800e26c <prvCopyDataToQueue>
 800dac6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d010      	beq.n	800daf2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad2:	3324      	adds	r3, #36	@ 0x24
 800dad4:	4618      	mov	r0, r3
 800dad6:	f001 f9d7 	bl	800ee88 <xTaskRemoveFromEventList>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d013      	beq.n	800db08 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800dae0:	4b3f      	ldr	r3, [pc, #252]	@ (800dbe0 <xQueueGenericSend+0x210>)
 800dae2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	f3bf 8f4f 	dsb	sy
 800daec:	f3bf 8f6f 	isb	sy
 800daf0:	e00a      	b.n	800db08 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800daf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d007      	beq.n	800db08 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800daf8:	4b39      	ldr	r3, [pc, #228]	@ (800dbe0 <xQueueGenericSend+0x210>)
 800dafa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	f3bf 8f4f 	dsb	sy
 800db04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800db08:	f001 ff16 	bl	800f938 <vPortExitCritical>
				return pdPASS;
 800db0c:	2301      	movs	r3, #1
 800db0e:	e063      	b.n	800dbd8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d103      	bne.n	800db1e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db16:	f001 ff0f 	bl	800f938 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800db1a:	2300      	movs	r3, #0
 800db1c:	e05c      	b.n	800dbd8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db20:	2b00      	cmp	r3, #0
 800db22:	d106      	bne.n	800db32 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db24:	f107 0314 	add.w	r3, r7, #20
 800db28:	4618      	mov	r0, r3
 800db2a:	f001 fa13 	bl	800ef54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db2e:	2301      	movs	r3, #1
 800db30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db32:	f001 ff01 	bl	800f938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db36:	f000 ff8d 	bl	800ea54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db3a:	f001 fec7 	bl	800f8cc <vPortEnterCritical>
 800db3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db44:	b25b      	sxtb	r3, r3
 800db46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db4a:	d103      	bne.n	800db54 <xQueueGenericSend+0x184>
 800db4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db4e:	2200      	movs	r2, #0
 800db50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db5a:	b25b      	sxtb	r3, r3
 800db5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db60:	d103      	bne.n	800db6a <xQueueGenericSend+0x19a>
 800db62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db64:	2200      	movs	r2, #0
 800db66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db6a:	f001 fee5 	bl	800f938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db6e:	1d3a      	adds	r2, r7, #4
 800db70:	f107 0314 	add.w	r3, r7, #20
 800db74:	4611      	mov	r1, r2
 800db76:	4618      	mov	r0, r3
 800db78:	f001 fa02 	bl	800ef80 <xTaskCheckForTimeOut>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d124      	bne.n	800dbcc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800db82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db84:	f000 fc6a 	bl	800e45c <prvIsQueueFull>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d018      	beq.n	800dbc0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800db8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db90:	3310      	adds	r3, #16
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	4611      	mov	r1, r2
 800db96:	4618      	mov	r0, r3
 800db98:	f001 f94e 	bl	800ee38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800db9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db9e:	f000 fbf5 	bl	800e38c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dba2:	f000 ff65 	bl	800ea70 <xTaskResumeAll>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f47f af7c 	bne.w	800daa6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800dbae:	4b0c      	ldr	r3, [pc, #48]	@ (800dbe0 <xQueueGenericSend+0x210>)
 800dbb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbb4:	601a      	str	r2, [r3, #0]
 800dbb6:	f3bf 8f4f 	dsb	sy
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	e772      	b.n	800daa6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dbc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbc2:	f000 fbe3 	bl	800e38c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbc6:	f000 ff53 	bl	800ea70 <xTaskResumeAll>
 800dbca:	e76c      	b.n	800daa6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dbcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dbce:	f000 fbdd 	bl	800e38c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbd2:	f000 ff4d 	bl	800ea70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dbd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3738      	adds	r7, #56	@ 0x38
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	e000ed04 	.word	0xe000ed04

0800dbe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b08e      	sub	sp, #56	@ 0x38
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10d      	bne.n	800dc18 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc00:	b672      	cpsid	i
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	b662      	cpsie	i
 800dc10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dc12:	bf00      	nop
 800dc14:	bf00      	nop
 800dc16:	e7fd      	b.n	800dc14 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d103      	bne.n	800dc26 <xQueueGenericSendFromISR+0x42>
 800dc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d101      	bne.n	800dc2a <xQueueGenericSendFromISR+0x46>
 800dc26:	2301      	movs	r3, #1
 800dc28:	e000      	b.n	800dc2c <xQueueGenericSendFromISR+0x48>
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10d      	bne.n	800dc4c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800dc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc34:	b672      	cpsid	i
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	b662      	cpsie	i
 800dc44:	623b      	str	r3, [r7, #32]
}
 800dc46:	bf00      	nop
 800dc48:	bf00      	nop
 800dc4a:	e7fd      	b.n	800dc48 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	2b02      	cmp	r3, #2
 800dc50:	d103      	bne.n	800dc5a <xQueueGenericSendFromISR+0x76>
 800dc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d101      	bne.n	800dc5e <xQueueGenericSendFromISR+0x7a>
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e000      	b.n	800dc60 <xQueueGenericSendFromISR+0x7c>
 800dc5e:	2300      	movs	r3, #0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10d      	bne.n	800dc80 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800dc64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc68:	b672      	cpsid	i
 800dc6a:	f383 8811 	msr	BASEPRI, r3
 800dc6e:	f3bf 8f6f 	isb	sy
 800dc72:	f3bf 8f4f 	dsb	sy
 800dc76:	b662      	cpsie	i
 800dc78:	61fb      	str	r3, [r7, #28]
}
 800dc7a:	bf00      	nop
 800dc7c:	bf00      	nop
 800dc7e:	e7fd      	b.n	800dc7c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc80:	f001 ff0c 	bl	800fa9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800dc84:	f3ef 8211 	mrs	r2, BASEPRI
 800dc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8c:	b672      	cpsid	i
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	b662      	cpsie	i
 800dc9c:	61ba      	str	r2, [r7, #24]
 800dc9e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800dca0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dca6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d302      	bcc.n	800dcb6 <xQueueGenericSendFromISR+0xd2>
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	2b02      	cmp	r3, #2
 800dcb4:	d12c      	bne.n	800dd10 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	68b9      	ldr	r1, [r7, #8]
 800dcc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dcc6:	f000 fad1 	bl	800e26c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dcca:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800dcce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dcd2:	d112      	bne.n	800dcfa <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d016      	beq.n	800dd0a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcde:	3324      	adds	r3, #36	@ 0x24
 800dce0:	4618      	mov	r0, r3
 800dce2:	f001 f8d1 	bl	800ee88 <xTaskRemoveFromEventList>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d00e      	beq.n	800dd0a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00b      	beq.n	800dd0a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	601a      	str	r2, [r3, #0]
 800dcf8:	e007      	b.n	800dd0a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dcfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dcfe:	3301      	adds	r3, #1
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	b25a      	sxtb	r2, r3
 800dd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800dd0e:	e001      	b.n	800dd14 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dd10:	2300      	movs	r3, #0
 800dd12:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd16:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dd1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3738      	adds	r7, #56	@ 0x38
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
	...

0800dd2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b08c      	sub	sp, #48	@ 0x30
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dd40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d10d      	bne.n	800dd62 <xQueueReceive+0x36>
	__asm volatile
 800dd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd4a:	b672      	cpsid	i
 800dd4c:	f383 8811 	msr	BASEPRI, r3
 800dd50:	f3bf 8f6f 	isb	sy
 800dd54:	f3bf 8f4f 	dsb	sy
 800dd58:	b662      	cpsie	i
 800dd5a:	623b      	str	r3, [r7, #32]
}
 800dd5c:	bf00      	nop
 800dd5e:	bf00      	nop
 800dd60:	e7fd      	b.n	800dd5e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d103      	bne.n	800dd70 <xQueueReceive+0x44>
 800dd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <xQueueReceive+0x48>
 800dd70:	2301      	movs	r3, #1
 800dd72:	e000      	b.n	800dd76 <xQueueReceive+0x4a>
 800dd74:	2300      	movs	r3, #0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d10d      	bne.n	800dd96 <xQueueReceive+0x6a>
	__asm volatile
 800dd7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd7e:	b672      	cpsid	i
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
 800dd8c:	b662      	cpsie	i
 800dd8e:	61fb      	str	r3, [r7, #28]
}
 800dd90:	bf00      	nop
 800dd92:	bf00      	nop
 800dd94:	e7fd      	b.n	800dd92 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dd96:	f001 fa45 	bl	800f224 <xTaskGetSchedulerState>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d102      	bne.n	800dda6 <xQueueReceive+0x7a>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d101      	bne.n	800ddaa <xQueueReceive+0x7e>
 800dda6:	2301      	movs	r3, #1
 800dda8:	e000      	b.n	800ddac <xQueueReceive+0x80>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d10d      	bne.n	800ddcc <xQueueReceive+0xa0>
	__asm volatile
 800ddb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb4:	b672      	cpsid	i
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	b662      	cpsie	i
 800ddc4:	61bb      	str	r3, [r7, #24]
}
 800ddc6:	bf00      	nop
 800ddc8:	bf00      	nop
 800ddca:	e7fd      	b.n	800ddc8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ddcc:	f001 fd7e 	bl	800f8cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d01f      	beq.n	800de1c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dddc:	68b9      	ldr	r1, [r7, #8]
 800ddde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dde0:	f000 faae 	bl	800e340 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde6:	1e5a      	subs	r2, r3, #1
 800dde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00f      	beq.n	800de14 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddf6:	3310      	adds	r3, #16
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f001 f845 	bl	800ee88 <xTaskRemoveFromEventList>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d007      	beq.n	800de14 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800de04:	4b3c      	ldr	r3, [pc, #240]	@ (800def8 <xQueueReceive+0x1cc>)
 800de06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de0a:	601a      	str	r2, [r3, #0]
 800de0c:	f3bf 8f4f 	dsb	sy
 800de10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800de14:	f001 fd90 	bl	800f938 <vPortExitCritical>
				return pdPASS;
 800de18:	2301      	movs	r3, #1
 800de1a:	e069      	b.n	800def0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d103      	bne.n	800de2a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800de22:	f001 fd89 	bl	800f938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800de26:	2300      	movs	r3, #0
 800de28:	e062      	b.n	800def0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800de2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d106      	bne.n	800de3e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800de30:	f107 0310 	add.w	r3, r7, #16
 800de34:	4618      	mov	r0, r3
 800de36:	f001 f88d 	bl	800ef54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800de3a:	2301      	movs	r3, #1
 800de3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800de3e:	f001 fd7b 	bl	800f938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800de42:	f000 fe07 	bl	800ea54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800de46:	f001 fd41 	bl	800f8cc <vPortEnterCritical>
 800de4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de50:	b25b      	sxtb	r3, r3
 800de52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de56:	d103      	bne.n	800de60 <xQueueReceive+0x134>
 800de58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de5a:	2200      	movs	r2, #0
 800de5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de66:	b25b      	sxtb	r3, r3
 800de68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de6c:	d103      	bne.n	800de76 <xQueueReceive+0x14a>
 800de6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de76:	f001 fd5f 	bl	800f938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800de7a:	1d3a      	adds	r2, r7, #4
 800de7c:	f107 0310 	add.w	r3, r7, #16
 800de80:	4611      	mov	r1, r2
 800de82:	4618      	mov	r0, r3
 800de84:	f001 f87c 	bl	800ef80 <xTaskCheckForTimeOut>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d123      	bne.n	800ded6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800de90:	f000 face 	bl	800e430 <prvIsQueueEmpty>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d017      	beq.n	800deca <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800de9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de9c:	3324      	adds	r3, #36	@ 0x24
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	4611      	mov	r1, r2
 800dea2:	4618      	mov	r0, r3
 800dea4:	f000 ffc8 	bl	800ee38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dea8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800deaa:	f000 fa6f 	bl	800e38c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800deae:	f000 fddf 	bl	800ea70 <xTaskResumeAll>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d189      	bne.n	800ddcc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800deb8:	4b0f      	ldr	r3, [pc, #60]	@ (800def8 <xQueueReceive+0x1cc>)
 800deba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800debe:	601a      	str	r2, [r3, #0]
 800dec0:	f3bf 8f4f 	dsb	sy
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	e780      	b.n	800ddcc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800deca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800decc:	f000 fa5e 	bl	800e38c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ded0:	f000 fdce 	bl	800ea70 <xTaskResumeAll>
 800ded4:	e77a      	b.n	800ddcc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ded6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ded8:	f000 fa58 	bl	800e38c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dedc:	f000 fdc8 	bl	800ea70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dee2:	f000 faa5 	bl	800e430 <prvIsQueueEmpty>
 800dee6:	4603      	mov	r3, r0
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f43f af6f 	beq.w	800ddcc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800deee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800def0:	4618      	mov	r0, r3
 800def2:	3730      	adds	r7, #48	@ 0x30
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	e000ed04 	.word	0xe000ed04

0800defc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b08e      	sub	sp, #56	@ 0x38
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800df06:	2300      	movs	r3, #0
 800df08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800df0e:	2300      	movs	r3, #0
 800df10:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800df12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df14:	2b00      	cmp	r3, #0
 800df16:	d10d      	bne.n	800df34 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800df18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df1c:	b672      	cpsid	i
 800df1e:	f383 8811 	msr	BASEPRI, r3
 800df22:	f3bf 8f6f 	isb	sy
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	b662      	cpsie	i
 800df2c:	623b      	str	r3, [r7, #32]
}
 800df2e:	bf00      	nop
 800df30:	bf00      	nop
 800df32:	e7fd      	b.n	800df30 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800df34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d00d      	beq.n	800df58 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800df3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df40:	b672      	cpsid	i
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	b662      	cpsie	i
 800df50:	61fb      	str	r3, [r7, #28]
}
 800df52:	bf00      	nop
 800df54:	bf00      	nop
 800df56:	e7fd      	b.n	800df54 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800df58:	f001 f964 	bl	800f224 <xTaskGetSchedulerState>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d102      	bne.n	800df68 <xQueueSemaphoreTake+0x6c>
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d101      	bne.n	800df6c <xQueueSemaphoreTake+0x70>
 800df68:	2301      	movs	r3, #1
 800df6a:	e000      	b.n	800df6e <xQueueSemaphoreTake+0x72>
 800df6c:	2300      	movs	r3, #0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d10d      	bne.n	800df8e <xQueueSemaphoreTake+0x92>
	__asm volatile
 800df72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df76:	b672      	cpsid	i
 800df78:	f383 8811 	msr	BASEPRI, r3
 800df7c:	f3bf 8f6f 	isb	sy
 800df80:	f3bf 8f4f 	dsb	sy
 800df84:	b662      	cpsie	i
 800df86:	61bb      	str	r3, [r7, #24]
}
 800df88:	bf00      	nop
 800df8a:	bf00      	nop
 800df8c:	e7fd      	b.n	800df8a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df8e:	f001 fc9d 	bl	800f8cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800df92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800df98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d024      	beq.n	800dfe8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800df9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa0:	1e5a      	subs	r2, r3, #1
 800dfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d104      	bne.n	800dfb8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dfae:	f001 fb03 	bl	800f5b8 <pvTaskIncrementMutexHeldCount>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00f      	beq.n	800dfe0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc2:	3310      	adds	r3, #16
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 ff5f 	bl	800ee88 <xTaskRemoveFromEventList>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d007      	beq.n	800dfe0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dfd0:	4b55      	ldr	r3, [pc, #340]	@ (800e128 <xQueueSemaphoreTake+0x22c>)
 800dfd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	f3bf 8f4f 	dsb	sy
 800dfdc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dfe0:	f001 fcaa 	bl	800f938 <vPortExitCritical>
				return pdPASS;
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	e09a      	b.n	800e11e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d114      	bne.n	800e018 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d00d      	beq.n	800e010 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800dff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff8:	b672      	cpsid	i
 800dffa:	f383 8811 	msr	BASEPRI, r3
 800dffe:	f3bf 8f6f 	isb	sy
 800e002:	f3bf 8f4f 	dsb	sy
 800e006:	b662      	cpsie	i
 800e008:	617b      	str	r3, [r7, #20]
}
 800e00a:	bf00      	nop
 800e00c:	bf00      	nop
 800e00e:	e7fd      	b.n	800e00c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e010:	f001 fc92 	bl	800f938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e014:	2300      	movs	r3, #0
 800e016:	e082      	b.n	800e11e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d106      	bne.n	800e02c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e01e:	f107 030c 	add.w	r3, r7, #12
 800e022:	4618      	mov	r0, r3
 800e024:	f000 ff96 	bl	800ef54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e028:	2301      	movs	r3, #1
 800e02a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e02c:	f001 fc84 	bl	800f938 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e030:	f000 fd10 	bl	800ea54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e034:	f001 fc4a 	bl	800f8cc <vPortEnterCritical>
 800e038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e03e:	b25b      	sxtb	r3, r3
 800e040:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e044:	d103      	bne.n	800e04e <xQueueSemaphoreTake+0x152>
 800e046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e048:	2200      	movs	r2, #0
 800e04a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e054:	b25b      	sxtb	r3, r3
 800e056:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e05a:	d103      	bne.n	800e064 <xQueueSemaphoreTake+0x168>
 800e05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05e:	2200      	movs	r2, #0
 800e060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e064:	f001 fc68 	bl	800f938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e068:	463a      	mov	r2, r7
 800e06a:	f107 030c 	add.w	r3, r7, #12
 800e06e:	4611      	mov	r1, r2
 800e070:	4618      	mov	r0, r3
 800e072:	f000 ff85 	bl	800ef80 <xTaskCheckForTimeOut>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d132      	bne.n	800e0e2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e07c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e07e:	f000 f9d7 	bl	800e430 <prvIsQueueEmpty>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	d026      	beq.n	800e0d6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d109      	bne.n	800e0a4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e090:	f001 fc1c 	bl	800f8cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	4618      	mov	r0, r3
 800e09a:	f001 f8e1 	bl	800f260 <xTaskPriorityInherit>
 800e09e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e0a0:	f001 fc4a 	bl	800f938 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a6:	3324      	adds	r3, #36	@ 0x24
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	4611      	mov	r1, r2
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f000 fec3 	bl	800ee38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e0b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0b4:	f000 f96a 	bl	800e38c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e0b8:	f000 fcda 	bl	800ea70 <xTaskResumeAll>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f47f af65 	bne.w	800df8e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e0c4:	4b18      	ldr	r3, [pc, #96]	@ (800e128 <xQueueSemaphoreTake+0x22c>)
 800e0c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0ca:	601a      	str	r2, [r3, #0]
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	f3bf 8f6f 	isb	sy
 800e0d4:	e75b      	b.n	800df8e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e0d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0d8:	f000 f958 	bl	800e38c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e0dc:	f000 fcc8 	bl	800ea70 <xTaskResumeAll>
 800e0e0:	e755      	b.n	800df8e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e0e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0e4:	f000 f952 	bl	800e38c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e0e8:	f000 fcc2 	bl	800ea70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e0ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0ee:	f000 f99f 	bl	800e430 <prvIsQueueEmpty>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f43f af4a 	beq.w	800df8e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00d      	beq.n	800e11c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e100:	f001 fbe4 	bl	800f8cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e104:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e106:	f000 f899 	bl	800e23c <prvGetDisinheritPriorityAfterTimeout>
 800e10a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e112:	4618      	mov	r0, r3
 800e114:	f001 f9b0 	bl	800f478 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e118:	f001 fc0e 	bl	800f938 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e11c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3738      	adds	r7, #56	@ 0x38
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	e000ed04 	.word	0xe000ed04

0800e12c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b08e      	sub	sp, #56	@ 0x38
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10d      	bne.n	800e15e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e146:	b672      	cpsid	i
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	b662      	cpsie	i
 800e156:	623b      	str	r3, [r7, #32]
}
 800e158:	bf00      	nop
 800e15a:	bf00      	nop
 800e15c:	e7fd      	b.n	800e15a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d103      	bne.n	800e16c <xQueueReceiveFromISR+0x40>
 800e164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <xQueueReceiveFromISR+0x44>
 800e16c:	2301      	movs	r3, #1
 800e16e:	e000      	b.n	800e172 <xQueueReceiveFromISR+0x46>
 800e170:	2300      	movs	r3, #0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d10d      	bne.n	800e192 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e17a:	b672      	cpsid	i
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	b662      	cpsie	i
 800e18a:	61fb      	str	r3, [r7, #28]
}
 800e18c:	bf00      	nop
 800e18e:	bf00      	nop
 800e190:	e7fd      	b.n	800e18e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e192:	f001 fc83 	bl	800fa9c <vPortValidateInterruptPriority>
	__asm volatile
 800e196:	f3ef 8211 	mrs	r2, BASEPRI
 800e19a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e19e:	b672      	cpsid	i
 800e1a0:	f383 8811 	msr	BASEPRI, r3
 800e1a4:	f3bf 8f6f 	isb	sy
 800e1a8:	f3bf 8f4f 	dsb	sy
 800e1ac:	b662      	cpsie	i
 800e1ae:	61ba      	str	r2, [r7, #24]
 800e1b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e1b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d02f      	beq.n	800e222 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e1c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e1cc:	68b9      	ldr	r1, [r7, #8]
 800e1ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e1d0:	f000 f8b6 	bl	800e340 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d6:	1e5a      	subs	r2, r3, #1
 800e1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e1dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e1e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e1e4:	d112      	bne.n	800e20c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d016      	beq.n	800e21c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f0:	3310      	adds	r3, #16
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f000 fe48 	bl	800ee88 <xTaskRemoveFromEventList>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d00e      	beq.n	800e21c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00b      	beq.n	800e21c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	601a      	str	r2, [r3, #0]
 800e20a:	e007      	b.n	800e21c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e20c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e210:	3301      	adds	r3, #1
 800e212:	b2db      	uxtb	r3, r3
 800e214:	b25a      	sxtb	r2, r3
 800e216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e21c:	2301      	movs	r3, #1
 800e21e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e220:	e001      	b.n	800e226 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e222:	2300      	movs	r3, #0
 800e224:	637b      	str	r3, [r7, #52]	@ 0x34
 800e226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e228:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	f383 8811 	msr	BASEPRI, r3
}
 800e230:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e234:	4618      	mov	r0, r3
 800e236:	3738      	adds	r7, #56	@ 0x38
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e23c:	b480      	push	{r7}
 800e23e:	b085      	sub	sp, #20
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d006      	beq.n	800e25a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f1c3 0307 	rsb	r3, r3, #7
 800e256:	60fb      	str	r3, [r7, #12]
 800e258:	e001      	b.n	800e25e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e25a:	2300      	movs	r3, #0
 800e25c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e25e:	68fb      	ldr	r3, [r7, #12]
	}
 800e260:	4618      	mov	r0, r3
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr

0800e26c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e278:	2300      	movs	r3, #0
 800e27a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e280:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10d      	bne.n	800e2a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d14d      	bne.n	800e32e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	4618      	mov	r0, r3
 800e298:	f001 f862 	bl	800f360 <xTaskPriorityDisinherit>
 800e29c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	609a      	str	r2, [r3, #8]
 800e2a4:	e043      	b.n	800e32e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d119      	bne.n	800e2e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	6858      	ldr	r0, [r3, #4]
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	68b9      	ldr	r1, [r7, #8]
 800e2b8:	f002 f855 	bl	8010366 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2c4:	441a      	add	r2, r3
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	685a      	ldr	r2, [r3, #4]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d32b      	bcc.n	800e32e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	605a      	str	r2, [r3, #4]
 800e2de:	e026      	b.n	800e32e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	68d8      	ldr	r0, [r3, #12]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	68b9      	ldr	r1, [r7, #8]
 800e2ec:	f002 f83b 	bl	8010366 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	68da      	ldr	r2, [r3, #12]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2f8:	425b      	negs	r3, r3
 800e2fa:	441a      	add	r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	68da      	ldr	r2, [r3, #12]
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d207      	bcs.n	800e31c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	689a      	ldr	r2, [r3, #8]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e314:	425b      	negs	r3, r3
 800e316:	441a      	add	r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2b02      	cmp	r3, #2
 800e320:	d105      	bne.n	800e32e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d002      	beq.n	800e32e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e336:	697b      	ldr	r3, [r7, #20]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d018      	beq.n	800e384 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	68da      	ldr	r2, [r3, #12]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e35a:	441a      	add	r2, r3
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	68da      	ldr	r2, [r3, #12]
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	429a      	cmp	r2, r3
 800e36a:	d303      	bcc.n	800e374 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	68d9      	ldr	r1, [r3, #12]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e37c:	461a      	mov	r2, r3
 800e37e:	6838      	ldr	r0, [r7, #0]
 800e380:	f001 fff1 	bl	8010366 <memcpy>
	}
}
 800e384:	bf00      	nop
 800e386:	3708      	adds	r7, #8
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e394:	f001 fa9a 	bl	800f8cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e39e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3a0:	e011      	b.n	800e3c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d012      	beq.n	800e3d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3324      	adds	r3, #36	@ 0x24
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f000 fd6a 	bl	800ee88 <xTaskRemoveFromEventList>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d001      	beq.n	800e3be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e3ba:	f000 fe49 	bl	800f050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	dce9      	bgt.n	800e3a2 <prvUnlockQueue+0x16>
 800e3ce:	e000      	b.n	800e3d2 <prvUnlockQueue+0x46>
					break;
 800e3d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	22ff      	movs	r2, #255	@ 0xff
 800e3d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e3da:	f001 faad 	bl	800f938 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e3de:	f001 fa75 	bl	800f8cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e3e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e3ea:	e011      	b.n	800e410 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	691b      	ldr	r3, [r3, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d012      	beq.n	800e41a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	3310      	adds	r3, #16
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f000 fd45 	bl	800ee88 <xTaskRemoveFromEventList>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e404:	f000 fe24 	bl	800f050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e408:	7bbb      	ldrb	r3, [r7, #14]
 800e40a:	3b01      	subs	r3, #1
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e414:	2b00      	cmp	r3, #0
 800e416:	dce9      	bgt.n	800e3ec <prvUnlockQueue+0x60>
 800e418:	e000      	b.n	800e41c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e41a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	22ff      	movs	r2, #255	@ 0xff
 800e420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e424:	f001 fa88 	bl	800f938 <vPortExitCritical>
}
 800e428:	bf00      	nop
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e438:	f001 fa48 	bl	800f8cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e440:	2b00      	cmp	r3, #0
 800e442:	d102      	bne.n	800e44a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e444:	2301      	movs	r3, #1
 800e446:	60fb      	str	r3, [r7, #12]
 800e448:	e001      	b.n	800e44e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e44a:	2300      	movs	r3, #0
 800e44c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e44e:	f001 fa73 	bl	800f938 <vPortExitCritical>

	return xReturn;
 800e452:	68fb      	ldr	r3, [r7, #12]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e464:	f001 fa32 	bl	800f8cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e470:	429a      	cmp	r2, r3
 800e472:	d102      	bne.n	800e47a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e474:	2301      	movs	r3, #1
 800e476:	60fb      	str	r3, [r7, #12]
 800e478:	e001      	b.n	800e47e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e47a:	2300      	movs	r3, #0
 800e47c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e47e:	f001 fa5b 	bl	800f938 <vPortExitCritical>

	return xReturn;
 800e482:	68fb      	ldr	r3, [r7, #12]
}
 800e484:	4618      	mov	r0, r3
 800e486:	3710      	adds	r7, #16
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}

0800e48c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b08e      	sub	sp, #56	@ 0x38
 800e490:	af04      	add	r7, sp, #16
 800e492:	60f8      	str	r0, [r7, #12]
 800e494:	60b9      	str	r1, [r7, #8]
 800e496:	607a      	str	r2, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e49a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d10d      	bne.n	800e4bc <xTaskCreateStatic+0x30>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a4:	b672      	cpsid	i
 800e4a6:	f383 8811 	msr	BASEPRI, r3
 800e4aa:	f3bf 8f6f 	isb	sy
 800e4ae:	f3bf 8f4f 	dsb	sy
 800e4b2:	b662      	cpsie	i
 800e4b4:	623b      	str	r3, [r7, #32]
}
 800e4b6:	bf00      	nop
 800e4b8:	bf00      	nop
 800e4ba:	e7fd      	b.n	800e4b8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d10d      	bne.n	800e4de <xTaskCreateStatic+0x52>
	__asm volatile
 800e4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c6:	b672      	cpsid	i
 800e4c8:	f383 8811 	msr	BASEPRI, r3
 800e4cc:	f3bf 8f6f 	isb	sy
 800e4d0:	f3bf 8f4f 	dsb	sy
 800e4d4:	b662      	cpsie	i
 800e4d6:	61fb      	str	r3, [r7, #28]
}
 800e4d8:	bf00      	nop
 800e4da:	bf00      	nop
 800e4dc:	e7fd      	b.n	800e4da <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e4de:	23a0      	movs	r3, #160	@ 0xa0
 800e4e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	2ba0      	cmp	r3, #160	@ 0xa0
 800e4e6:	d00d      	beq.n	800e504 <xTaskCreateStatic+0x78>
	__asm volatile
 800e4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4ec:	b672      	cpsid	i
 800e4ee:	f383 8811 	msr	BASEPRI, r3
 800e4f2:	f3bf 8f6f 	isb	sy
 800e4f6:	f3bf 8f4f 	dsb	sy
 800e4fa:	b662      	cpsie	i
 800e4fc:	61bb      	str	r3, [r7, #24]
}
 800e4fe:	bf00      	nop
 800e500:	bf00      	nop
 800e502:	e7fd      	b.n	800e500 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e504:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d01e      	beq.n	800e54a <xTaskCreateStatic+0xbe>
 800e50c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d01b      	beq.n	800e54a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e514:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e51a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e51e:	2202      	movs	r2, #2
 800e520:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e524:	2300      	movs	r3, #0
 800e526:	9303      	str	r3, [sp, #12]
 800e528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52a:	9302      	str	r3, [sp, #8]
 800e52c:	f107 0314 	add.w	r3, r7, #20
 800e530:	9301      	str	r3, [sp, #4]
 800e532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e534:	9300      	str	r3, [sp, #0]
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	68b9      	ldr	r1, [r7, #8]
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f000 f851 	bl	800e5e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e542:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e544:	f000 f8f0 	bl	800e728 <prvAddNewTaskToReadyList>
 800e548:	e001      	b.n	800e54e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800e54a:	2300      	movs	r3, #0
 800e54c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e54e:	697b      	ldr	r3, [r7, #20]
	}
 800e550:	4618      	mov	r0, r3
 800e552:	3728      	adds	r7, #40	@ 0x28
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}

0800e558 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b08c      	sub	sp, #48	@ 0x30
 800e55c:	af04      	add	r7, sp, #16
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	603b      	str	r3, [r7, #0]
 800e564:	4613      	mov	r3, r2
 800e566:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e568:	88fb      	ldrh	r3, [r7, #6]
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	4618      	mov	r0, r3
 800e56e:	f001 fadb 	bl	800fb28 <pvPortMalloc>
 800e572:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e574:	697b      	ldr	r3, [r7, #20]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00e      	beq.n	800e598 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e57a:	20a0      	movs	r0, #160	@ 0xa0
 800e57c:	f001 fad4 	bl	800fb28 <pvPortMalloc>
 800e580:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d003      	beq.n	800e590 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e58e:	e005      	b.n	800e59c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e590:	6978      	ldr	r0, [r7, #20]
 800e592:	f001 fb97 	bl	800fcc4 <vPortFree>
 800e596:	e001      	b.n	800e59c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e598:	2300      	movs	r3, #0
 800e59a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d017      	beq.n	800e5d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e5aa:	88fa      	ldrh	r2, [r7, #6]
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	9303      	str	r3, [sp, #12]
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	9302      	str	r3, [sp, #8]
 800e5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5b6:	9301      	str	r3, [sp, #4]
 800e5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ba:	9300      	str	r3, [sp, #0]
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	68b9      	ldr	r1, [r7, #8]
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f000 f80f 	bl	800e5e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e5c6:	69f8      	ldr	r0, [r7, #28]
 800e5c8:	f000 f8ae 	bl	800e728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	61bb      	str	r3, [r7, #24]
 800e5d0:	e002      	b.n	800e5d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e5d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e5d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e5d8:	69bb      	ldr	r3, [r7, #24]
	}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3720      	adds	r7, #32
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
	...

0800e5e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
 800e5f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e5f6:	6879      	ldr	r1, [r7, #4]
 800e5f8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e5fc:	440b      	add	r3, r1
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	4413      	add	r3, r2
 800e602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	f023 0307 	bic.w	r3, r3, #7
 800e60a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	f003 0307 	and.w	r3, r3, #7
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00d      	beq.n	800e632 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61a:	b672      	cpsid	i
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	b662      	cpsie	i
 800e62a:	617b      	str	r3, [r7, #20]
}
 800e62c:	bf00      	nop
 800e62e:	bf00      	nop
 800e630:	e7fd      	b.n	800e62e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d01f      	beq.n	800e678 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e638:	2300      	movs	r3, #0
 800e63a:	61fb      	str	r3, [r7, #28]
 800e63c:	e012      	b.n	800e664 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	4413      	add	r3, r2
 800e644:	7819      	ldrb	r1, [r3, #0]
 800e646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	4413      	add	r3, r2
 800e64c:	3334      	adds	r3, #52	@ 0x34
 800e64e:	460a      	mov	r2, r1
 800e650:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e652:	68ba      	ldr	r2, [r7, #8]
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	4413      	add	r3, r2
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d006      	beq.n	800e66c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	3301      	adds	r3, #1
 800e662:	61fb      	str	r3, [r7, #28]
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	2b0f      	cmp	r3, #15
 800e668:	d9e9      	bls.n	800e63e <prvInitialiseNewTask+0x5a>
 800e66a:	e000      	b.n	800e66e <prvInitialiseNewTask+0x8a>
			{
				break;
 800e66c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e676:	e003      	b.n	800e680 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67a:	2200      	movs	r2, #0
 800e67c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e682:	2b06      	cmp	r3, #6
 800e684:	d901      	bls.n	800e68a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e686:	2306      	movs	r3, #6
 800e688:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e68e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e694:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e698:	2200      	movs	r2, #0
 800e69a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e69e:	3304      	adds	r3, #4
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fe ff5f 	bl	800d564 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a8:	3318      	adds	r3, #24
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe ff5a 	bl	800d564 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b8:	f1c3 0207 	rsb	r2, r3, #7
 800e6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d8:	334c      	adds	r3, #76	@ 0x4c
 800e6da:	224c      	movs	r2, #76	@ 0x4c
 800e6dc:	2100      	movs	r1, #0
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f001 fd6f 	bl	80101c2 <memset>
 800e6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e6:	4a0d      	ldr	r2, [pc, #52]	@ (800e71c <prvInitialiseNewTask+0x138>)
 800e6e8:	651a      	str	r2, [r3, #80]	@ 0x50
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ec:	4a0c      	ldr	r2, [pc, #48]	@ (800e720 <prvInitialiseNewTask+0x13c>)
 800e6ee:	655a      	str	r2, [r3, #84]	@ 0x54
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f2:	4a0c      	ldr	r2, [pc, #48]	@ (800e724 <prvInitialiseNewTask+0x140>)
 800e6f4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e6f6:	683a      	ldr	r2, [r7, #0]
 800e6f8:	68f9      	ldr	r1, [r7, #12]
 800e6fa:	69b8      	ldr	r0, [r7, #24]
 800e6fc:	f000 ffd6 	bl	800f6ac <pxPortInitialiseStack>
 800e700:	4602      	mov	r2, r0
 800e702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e704:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d002      	beq.n	800e712 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e70e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e710:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e712:	bf00      	nop
 800e714:	3720      	adds	r7, #32
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	20004b84 	.word	0x20004b84
 800e720:	20004bec 	.word	0x20004bec
 800e724:	20004c54 	.word	0x20004c54

0800e728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e730:	f001 f8cc 	bl	800f8cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e734:	4b2a      	ldr	r3, [pc, #168]	@ (800e7e0 <prvAddNewTaskToReadyList+0xb8>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3301      	adds	r3, #1
 800e73a:	4a29      	ldr	r2, [pc, #164]	@ (800e7e0 <prvAddNewTaskToReadyList+0xb8>)
 800e73c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e73e:	4b29      	ldr	r3, [pc, #164]	@ (800e7e4 <prvAddNewTaskToReadyList+0xbc>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d109      	bne.n	800e75a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e746:	4a27      	ldr	r2, [pc, #156]	@ (800e7e4 <prvAddNewTaskToReadyList+0xbc>)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e74c:	4b24      	ldr	r3, [pc, #144]	@ (800e7e0 <prvAddNewTaskToReadyList+0xb8>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2b01      	cmp	r3, #1
 800e752:	d110      	bne.n	800e776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e754:	f000 fca0 	bl	800f098 <prvInitialiseTaskLists>
 800e758:	e00d      	b.n	800e776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e75a:	4b23      	ldr	r3, [pc, #140]	@ (800e7e8 <prvAddNewTaskToReadyList+0xc0>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d109      	bne.n	800e776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e762:	4b20      	ldr	r3, [pc, #128]	@ (800e7e4 <prvAddNewTaskToReadyList+0xbc>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d802      	bhi.n	800e776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e770:	4a1c      	ldr	r2, [pc, #112]	@ (800e7e4 <prvAddNewTaskToReadyList+0xbc>)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e776:	4b1d      	ldr	r3, [pc, #116]	@ (800e7ec <prvAddNewTaskToReadyList+0xc4>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	3301      	adds	r3, #1
 800e77c:	4a1b      	ldr	r2, [pc, #108]	@ (800e7ec <prvAddNewTaskToReadyList+0xc4>)
 800e77e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e784:	2201      	movs	r2, #1
 800e786:	409a      	lsls	r2, r3
 800e788:	4b19      	ldr	r3, [pc, #100]	@ (800e7f0 <prvAddNewTaskToReadyList+0xc8>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4313      	orrs	r3, r2
 800e78e:	4a18      	ldr	r2, [pc, #96]	@ (800e7f0 <prvAddNewTaskToReadyList+0xc8>)
 800e790:	6013      	str	r3, [r2, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e796:	4613      	mov	r3, r2
 800e798:	009b      	lsls	r3, r3, #2
 800e79a:	4413      	add	r3, r2
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	4a15      	ldr	r2, [pc, #84]	@ (800e7f4 <prvAddNewTaskToReadyList+0xcc>)
 800e7a0:	441a      	add	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	3304      	adds	r3, #4
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	f7fe fee8 	bl	800d57e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e7ae:	f001 f8c3 	bl	800f938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e7b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e7e8 <prvAddNewTaskToReadyList+0xc0>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00e      	beq.n	800e7d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e7ba:	4b0a      	ldr	r3, [pc, #40]	@ (800e7e4 <prvAddNewTaskToReadyList+0xbc>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d207      	bcs.n	800e7d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e7c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e7f8 <prvAddNewTaskToReadyList+0xd0>)
 800e7ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e7d8:	bf00      	nop
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	20000f38 	.word	0x20000f38
 800e7e4:	20000e38 	.word	0x20000e38
 800e7e8:	20000f44 	.word	0x20000f44
 800e7ec:	20000f54 	.word	0x20000f54
 800e7f0:	20000f40 	.word	0x20000f40
 800e7f4:	20000e3c 	.word	0x20000e3c
 800e7f8:	e000ed04 	.word	0xe000ed04

0800e7fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b08a      	sub	sp, #40	@ 0x28
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e806:	2300      	movs	r3, #0
 800e808:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d10d      	bne.n	800e82c <vTaskDelayUntil+0x30>
	__asm volatile
 800e810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e814:	b672      	cpsid	i
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	b662      	cpsie	i
 800e824:	617b      	str	r3, [r7, #20]
}
 800e826:	bf00      	nop
 800e828:	bf00      	nop
 800e82a:	e7fd      	b.n	800e828 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10d      	bne.n	800e84e <vTaskDelayUntil+0x52>
	__asm volatile
 800e832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e836:	b672      	cpsid	i
 800e838:	f383 8811 	msr	BASEPRI, r3
 800e83c:	f3bf 8f6f 	isb	sy
 800e840:	f3bf 8f4f 	dsb	sy
 800e844:	b662      	cpsie	i
 800e846:	613b      	str	r3, [r7, #16]
}
 800e848:	bf00      	nop
 800e84a:	bf00      	nop
 800e84c:	e7fd      	b.n	800e84a <vTaskDelayUntil+0x4e>
		configASSERT( uxSchedulerSuspended == 0 );
 800e84e:	4b2b      	ldr	r3, [pc, #172]	@ (800e8fc <vTaskDelayUntil+0x100>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00d      	beq.n	800e872 <vTaskDelayUntil+0x76>
	__asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85a:	b672      	cpsid	i
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	b662      	cpsie	i
 800e86a:	60fb      	str	r3, [r7, #12]
}
 800e86c:	bf00      	nop
 800e86e:	bf00      	nop
 800e870:	e7fd      	b.n	800e86e <vTaskDelayUntil+0x72>

		vTaskSuspendAll();
 800e872:	f000 f8ef 	bl	800ea54 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e876:	4b22      	ldr	r3, [pc, #136]	@ (800e900 <vTaskDelayUntil+0x104>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	683a      	ldr	r2, [r7, #0]
 800e882:	4413      	add	r3, r2
 800e884:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	6a3a      	ldr	r2, [r7, #32]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d20b      	bcs.n	800e8a8 <vTaskDelayUntil+0xac>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	69fa      	ldr	r2, [r7, #28]
 800e896:	429a      	cmp	r2, r3
 800e898:	d211      	bcs.n	800e8be <vTaskDelayUntil+0xc2>
 800e89a:	69fa      	ldr	r2, [r7, #28]
 800e89c:	6a3b      	ldr	r3, [r7, #32]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d90d      	bls.n	800e8be <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8a6:	e00a      	b.n	800e8be <vTaskDelayUntil+0xc2>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	69fa      	ldr	r2, [r7, #28]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d303      	bcc.n	800e8ba <vTaskDelayUntil+0xbe>
 800e8b2:	69fa      	ldr	r2, [r7, #28]
 800e8b4:	6a3b      	ldr	r3, [r7, #32]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d901      	bls.n	800e8be <vTaskDelayUntil+0xc2>
				{
					xShouldDelay = pdTRUE;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	69fa      	ldr	r2, [r7, #28]
 800e8c2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d006      	beq.n	800e8d8 <vTaskDelayUntil+0xdc>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e8ca:	69fa      	ldr	r2, [r7, #28]
 800e8cc:	6a3b      	ldr	r3, [r7, #32]
 800e8ce:	1ad3      	subs	r3, r2, r3
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fe84 	bl	800f5e0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e8d8:	f000 f8ca 	bl	800ea70 <xTaskResumeAll>
 800e8dc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e8de:	69bb      	ldr	r3, [r7, #24]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d107      	bne.n	800e8f4 <vTaskDelayUntil+0xf8>
		{
			portYIELD_WITHIN_API();
 800e8e4:	4b07      	ldr	r3, [pc, #28]	@ (800e904 <vTaskDelayUntil+0x108>)
 800e8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8ea:	601a      	str	r2, [r3, #0]
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8f4:	bf00      	nop
 800e8f6:	3728      	adds	r7, #40	@ 0x28
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	20000f60 	.word	0x20000f60
 800e900:	20000f3c 	.word	0x20000f3c
 800e904:	e000ed04 	.word	0xe000ed04

0800e908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e910:	2300      	movs	r3, #0
 800e912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d01a      	beq.n	800e950 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e91a:	4b15      	ldr	r3, [pc, #84]	@ (800e970 <vTaskDelay+0x68>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00d      	beq.n	800e93e <vTaskDelay+0x36>
	__asm volatile
 800e922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e926:	b672      	cpsid	i
 800e928:	f383 8811 	msr	BASEPRI, r3
 800e92c:	f3bf 8f6f 	isb	sy
 800e930:	f3bf 8f4f 	dsb	sy
 800e934:	b662      	cpsie	i
 800e936:	60bb      	str	r3, [r7, #8]
}
 800e938:	bf00      	nop
 800e93a:	bf00      	nop
 800e93c:	e7fd      	b.n	800e93a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800e93e:	f000 f889 	bl	800ea54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e942:	2100      	movs	r1, #0
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f000 fe4b 	bl	800f5e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e94a:	f000 f891 	bl	800ea70 <xTaskResumeAll>
 800e94e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d107      	bne.n	800e966 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800e956:	4b07      	ldr	r3, [pc, #28]	@ (800e974 <vTaskDelay+0x6c>)
 800e958:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e95c:	601a      	str	r2, [r3, #0]
 800e95e:	f3bf 8f4f 	dsb	sy
 800e962:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e966:	bf00      	nop
 800e968:	3710      	adds	r7, #16
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	20000f60 	.word	0x20000f60
 800e974:	e000ed04 	.word	0xe000ed04

0800e978 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	@ 0x28
 800e97c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e97e:	2300      	movs	r3, #0
 800e980:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e982:	2300      	movs	r3, #0
 800e984:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e986:	463a      	mov	r2, r7
 800e988:	1d39      	adds	r1, r7, #4
 800e98a:	f107 0308 	add.w	r3, r7, #8
 800e98e:	4618      	mov	r0, r3
 800e990:	f7f2 fc7e 	bl	8001290 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e994:	6839      	ldr	r1, [r7, #0]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	68ba      	ldr	r2, [r7, #8]
 800e99a:	9202      	str	r2, [sp, #8]
 800e99c:	9301      	str	r3, [sp, #4]
 800e99e:	2300      	movs	r3, #0
 800e9a0:	9300      	str	r3, [sp, #0]
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	460a      	mov	r2, r1
 800e9a6:	4923      	ldr	r1, [pc, #140]	@ (800ea34 <vTaskStartScheduler+0xbc>)
 800e9a8:	4823      	ldr	r0, [pc, #140]	@ (800ea38 <vTaskStartScheduler+0xc0>)
 800e9aa:	f7ff fd6f 	bl	800e48c <xTaskCreateStatic>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	4a22      	ldr	r2, [pc, #136]	@ (800ea3c <vTaskStartScheduler+0xc4>)
 800e9b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e9b4:	4b21      	ldr	r3, [pc, #132]	@ (800ea3c <vTaskStartScheduler+0xc4>)
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d002      	beq.n	800e9c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e9bc:	2301      	movs	r3, #1
 800e9be:	617b      	str	r3, [r7, #20]
 800e9c0:	e001      	b.n	800e9c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d11d      	bne.n	800ea08 <vTaskStartScheduler+0x90>
	__asm volatile
 800e9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9d0:	b672      	cpsid	i
 800e9d2:	f383 8811 	msr	BASEPRI, r3
 800e9d6:	f3bf 8f6f 	isb	sy
 800e9da:	f3bf 8f4f 	dsb	sy
 800e9de:	b662      	cpsie	i
 800e9e0:	613b      	str	r3, [r7, #16]
}
 800e9e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e9e4:	4b16      	ldr	r3, [pc, #88]	@ (800ea40 <vTaskStartScheduler+0xc8>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	334c      	adds	r3, #76	@ 0x4c
 800e9ea:	4a16      	ldr	r2, [pc, #88]	@ (800ea44 <vTaskStartScheduler+0xcc>)
 800e9ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e9ee:	4b16      	ldr	r3, [pc, #88]	@ (800ea48 <vTaskStartScheduler+0xd0>)
 800e9f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e9f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e9f6:	4b15      	ldr	r3, [pc, #84]	@ (800ea4c <vTaskStartScheduler+0xd4>)
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e9fc:	4b14      	ldr	r3, [pc, #80]	@ (800ea50 <vTaskStartScheduler+0xd8>)
 800e9fe:	2200      	movs	r2, #0
 800ea00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ea02:	f000 fee5 	bl	800f7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ea06:	e011      	b.n	800ea2c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ea0e:	d10d      	bne.n	800ea2c <vTaskStartScheduler+0xb4>
	__asm volatile
 800ea10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea14:	b672      	cpsid	i
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	b662      	cpsie	i
 800ea24:	60fb      	str	r3, [r7, #12]
}
 800ea26:	bf00      	nop
 800ea28:	bf00      	nop
 800ea2a:	e7fd      	b.n	800ea28 <vTaskStartScheduler+0xb0>
}
 800ea2c:	bf00      	nop
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	080114f0 	.word	0x080114f0
 800ea38:	0800f069 	.word	0x0800f069
 800ea3c:	20000f5c 	.word	0x20000f5c
 800ea40:	20000e38 	.word	0x20000e38
 800ea44:	20000064 	.word	0x20000064
 800ea48:	20000f58 	.word	0x20000f58
 800ea4c:	20000f44 	.word	0x20000f44
 800ea50:	20000f3c 	.word	0x20000f3c

0800ea54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ea54:	b480      	push	{r7}
 800ea56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ea58:	4b04      	ldr	r3, [pc, #16]	@ (800ea6c <vTaskSuspendAll+0x18>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	4a03      	ldr	r2, [pc, #12]	@ (800ea6c <vTaskSuspendAll+0x18>)
 800ea60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ea62:	bf00      	nop
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr
 800ea6c:	20000f60 	.word	0x20000f60

0800ea70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ea76:	2300      	movs	r3, #0
 800ea78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ea7e:	4b43      	ldr	r3, [pc, #268]	@ (800eb8c <xTaskResumeAll+0x11c>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d10d      	bne.n	800eaa2 <xTaskResumeAll+0x32>
	__asm volatile
 800ea86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8a:	b672      	cpsid	i
 800ea8c:	f383 8811 	msr	BASEPRI, r3
 800ea90:	f3bf 8f6f 	isb	sy
 800ea94:	f3bf 8f4f 	dsb	sy
 800ea98:	b662      	cpsie	i
 800ea9a:	603b      	str	r3, [r7, #0]
}
 800ea9c:	bf00      	nop
 800ea9e:	bf00      	nop
 800eaa0:	e7fd      	b.n	800ea9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eaa2:	f000 ff13 	bl	800f8cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eaa6:	4b39      	ldr	r3, [pc, #228]	@ (800eb8c <xTaskResumeAll+0x11c>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	4a37      	ldr	r2, [pc, #220]	@ (800eb8c <xTaskResumeAll+0x11c>)
 800eaae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eab0:	4b36      	ldr	r3, [pc, #216]	@ (800eb8c <xTaskResumeAll+0x11c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d161      	bne.n	800eb7c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eab8:	4b35      	ldr	r3, [pc, #212]	@ (800eb90 <xTaskResumeAll+0x120>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d05d      	beq.n	800eb7c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eac0:	e02e      	b.n	800eb20 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eac2:	4b34      	ldr	r3, [pc, #208]	@ (800eb94 <xTaskResumeAll+0x124>)
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	3318      	adds	r3, #24
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fe fdb2 	bl	800d638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	3304      	adds	r3, #4
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fe fdad 	bl	800d638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eae2:	2201      	movs	r2, #1
 800eae4:	409a      	lsls	r2, r3
 800eae6:	4b2c      	ldr	r3, [pc, #176]	@ (800eb98 <xTaskResumeAll+0x128>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	4a2a      	ldr	r2, [pc, #168]	@ (800eb98 <xTaskResumeAll+0x128>)
 800eaee:	6013      	str	r3, [r2, #0]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	4413      	add	r3, r2
 800eafa:	009b      	lsls	r3, r3, #2
 800eafc:	4a27      	ldr	r2, [pc, #156]	@ (800eb9c <xTaskResumeAll+0x12c>)
 800eafe:	441a      	add	r2, r3
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	3304      	adds	r3, #4
 800eb04:	4619      	mov	r1, r3
 800eb06:	4610      	mov	r0, r2
 800eb08:	f7fe fd39 	bl	800d57e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eb10:	4b23      	ldr	r3, [pc, #140]	@ (800eba0 <xTaskResumeAll+0x130>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d302      	bcc.n	800eb20 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800eb1a:	4b22      	ldr	r3, [pc, #136]	@ (800eba4 <xTaskResumeAll+0x134>)
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eb20:	4b1c      	ldr	r3, [pc, #112]	@ (800eb94 <xTaskResumeAll+0x124>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1cc      	bne.n	800eac2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800eb2e:	f000 fb59 	bl	800f1e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800eb32:	4b1d      	ldr	r3, [pc, #116]	@ (800eba8 <xTaskResumeAll+0x138>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d010      	beq.n	800eb60 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800eb3e:	f000 f859 	bl	800ebf4 <xTaskIncrementTick>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d002      	beq.n	800eb4e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800eb48:	4b16      	ldr	r3, [pc, #88]	@ (800eba4 <xTaskResumeAll+0x134>)
 800eb4a:	2201      	movs	r2, #1
 800eb4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	3b01      	subs	r3, #1
 800eb52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1f1      	bne.n	800eb3e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800eb5a:	4b13      	ldr	r3, [pc, #76]	@ (800eba8 <xTaskResumeAll+0x138>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800eb60:	4b10      	ldr	r3, [pc, #64]	@ (800eba4 <xTaskResumeAll+0x134>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d009      	beq.n	800eb7c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800eb6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ebac <xTaskResumeAll+0x13c>)
 800eb6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb72:	601a      	str	r2, [r3, #0]
 800eb74:	f3bf 8f4f 	dsb	sy
 800eb78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eb7c:	f000 fedc 	bl	800f938 <vPortExitCritical>

	return xAlreadyYielded;
 800eb80:	68bb      	ldr	r3, [r7, #8]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	20000f60 	.word	0x20000f60
 800eb90:	20000f38 	.word	0x20000f38
 800eb94:	20000ef8 	.word	0x20000ef8
 800eb98:	20000f40 	.word	0x20000f40
 800eb9c:	20000e3c 	.word	0x20000e3c
 800eba0:	20000e38 	.word	0x20000e38
 800eba4:	20000f4c 	.word	0x20000f4c
 800eba8:	20000f48 	.word	0x20000f48
 800ebac:	e000ed04 	.word	0xe000ed04

0800ebb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ebb6:	4b05      	ldr	r3, [pc, #20]	@ (800ebcc <xTaskGetTickCount+0x1c>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ebbc:	687b      	ldr	r3, [r7, #4]
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	370c      	adds	r7, #12
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	20000f3c 	.word	0x20000f3c

0800ebd0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebd6:	f000 ff61 	bl	800fa9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ebda:	2300      	movs	r3, #0
 800ebdc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ebde:	4b04      	ldr	r3, [pc, #16]	@ (800ebf0 <xTaskGetTickCountFromISR+0x20>)
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ebe4:	683b      	ldr	r3, [r7, #0]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	20000f3c 	.word	0x20000f3c

0800ebf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b086      	sub	sp, #24
 800ebf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebfe:	4b50      	ldr	r3, [pc, #320]	@ (800ed40 <xTaskIncrementTick+0x14c>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	f040 808b 	bne.w	800ed1e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ec08:	4b4e      	ldr	r3, [pc, #312]	@ (800ed44 <xTaskIncrementTick+0x150>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ec10:	4a4c      	ldr	r2, [pc, #304]	@ (800ed44 <xTaskIncrementTick+0x150>)
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d123      	bne.n	800ec64 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ec1c:	4b4a      	ldr	r3, [pc, #296]	@ (800ed48 <xTaskIncrementTick+0x154>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d00d      	beq.n	800ec42 <xTaskIncrementTick+0x4e>
	__asm volatile
 800ec26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2a:	b672      	cpsid	i
 800ec2c:	f383 8811 	msr	BASEPRI, r3
 800ec30:	f3bf 8f6f 	isb	sy
 800ec34:	f3bf 8f4f 	dsb	sy
 800ec38:	b662      	cpsie	i
 800ec3a:	603b      	str	r3, [r7, #0]
}
 800ec3c:	bf00      	nop
 800ec3e:	bf00      	nop
 800ec40:	e7fd      	b.n	800ec3e <xTaskIncrementTick+0x4a>
 800ec42:	4b41      	ldr	r3, [pc, #260]	@ (800ed48 <xTaskIncrementTick+0x154>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	60fb      	str	r3, [r7, #12]
 800ec48:	4b40      	ldr	r3, [pc, #256]	@ (800ed4c <xTaskIncrementTick+0x158>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4a3e      	ldr	r2, [pc, #248]	@ (800ed48 <xTaskIncrementTick+0x154>)
 800ec4e:	6013      	str	r3, [r2, #0]
 800ec50:	4a3e      	ldr	r2, [pc, #248]	@ (800ed4c <xTaskIncrementTick+0x158>)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6013      	str	r3, [r2, #0]
 800ec56:	4b3e      	ldr	r3, [pc, #248]	@ (800ed50 <xTaskIncrementTick+0x15c>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	4a3c      	ldr	r2, [pc, #240]	@ (800ed50 <xTaskIncrementTick+0x15c>)
 800ec5e:	6013      	str	r3, [r2, #0]
 800ec60:	f000 fac0 	bl	800f1e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ec64:	4b3b      	ldr	r3, [pc, #236]	@ (800ed54 <xTaskIncrementTick+0x160>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	693a      	ldr	r2, [r7, #16]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d348      	bcc.n	800ed00 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec6e:	4b36      	ldr	r3, [pc, #216]	@ (800ed48 <xTaskIncrementTick+0x154>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d104      	bne.n	800ec82 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec78:	4b36      	ldr	r3, [pc, #216]	@ (800ed54 <xTaskIncrementTick+0x160>)
 800ec7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ec7e:	601a      	str	r2, [r3, #0]
					break;
 800ec80:	e03e      	b.n	800ed00 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec82:	4b31      	ldr	r3, [pc, #196]	@ (800ed48 <xTaskIncrementTick+0x154>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	68db      	ldr	r3, [r3, #12]
 800ec8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ec92:	693a      	ldr	r2, [r7, #16]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d203      	bcs.n	800eca2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ec9a:	4a2e      	ldr	r2, [pc, #184]	@ (800ed54 <xTaskIncrementTick+0x160>)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800eca0:	e02e      	b.n	800ed00 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	3304      	adds	r3, #4
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7fe fcc6 	bl	800d638 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d004      	beq.n	800ecbe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	3318      	adds	r3, #24
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7fe fcbd 	bl	800d638 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ecbe:	68bb      	ldr	r3, [r7, #8]
 800ecc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	409a      	lsls	r2, r3
 800ecc6:	4b24      	ldr	r3, [pc, #144]	@ (800ed58 <xTaskIncrementTick+0x164>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	4a22      	ldr	r2, [pc, #136]	@ (800ed58 <xTaskIncrementTick+0x164>)
 800ecce:	6013      	str	r3, [r2, #0]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecd4:	4613      	mov	r3, r2
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	4413      	add	r3, r2
 800ecda:	009b      	lsls	r3, r3, #2
 800ecdc:	4a1f      	ldr	r2, [pc, #124]	@ (800ed5c <xTaskIncrementTick+0x168>)
 800ecde:	441a      	add	r2, r3
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	3304      	adds	r3, #4
 800ece4:	4619      	mov	r1, r3
 800ece6:	4610      	mov	r0, r2
 800ece8:	f7fe fc49 	bl	800d57e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecf0:	4b1b      	ldr	r3, [pc, #108]	@ (800ed60 <xTaskIncrementTick+0x16c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d3b9      	bcc.n	800ec6e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecfe:	e7b6      	b.n	800ec6e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ed00:	4b17      	ldr	r3, [pc, #92]	@ (800ed60 <xTaskIncrementTick+0x16c>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed06:	4915      	ldr	r1, [pc, #84]	@ (800ed5c <xTaskIncrementTick+0x168>)
 800ed08:	4613      	mov	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4413      	add	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	440b      	add	r3, r1
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d907      	bls.n	800ed28 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	617b      	str	r3, [r7, #20]
 800ed1c:	e004      	b.n	800ed28 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ed1e:	4b11      	ldr	r3, [pc, #68]	@ (800ed64 <xTaskIncrementTick+0x170>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	3301      	adds	r3, #1
 800ed24:	4a0f      	ldr	r2, [pc, #60]	@ (800ed64 <xTaskIncrementTick+0x170>)
 800ed26:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ed28:	4b0f      	ldr	r3, [pc, #60]	@ (800ed68 <xTaskIncrementTick+0x174>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d001      	beq.n	800ed34 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ed30:	2301      	movs	r3, #1
 800ed32:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ed34:	697b      	ldr	r3, [r7, #20]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3718      	adds	r7, #24
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	20000f60 	.word	0x20000f60
 800ed44:	20000f3c 	.word	0x20000f3c
 800ed48:	20000ef0 	.word	0x20000ef0
 800ed4c:	20000ef4 	.word	0x20000ef4
 800ed50:	20000f50 	.word	0x20000f50
 800ed54:	20000f58 	.word	0x20000f58
 800ed58:	20000f40 	.word	0x20000f40
 800ed5c:	20000e3c 	.word	0x20000e3c
 800ed60:	20000e38 	.word	0x20000e38
 800ed64:	20000f48 	.word	0x20000f48
 800ed68:	20000f4c 	.word	0x20000f4c

0800ed6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b087      	sub	sp, #28
 800ed70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ed72:	4b2b      	ldr	r3, [pc, #172]	@ (800ee20 <vTaskSwitchContext+0xb4>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d003      	beq.n	800ed82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ed7a:	4b2a      	ldr	r3, [pc, #168]	@ (800ee24 <vTaskSwitchContext+0xb8>)
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ed80:	e047      	b.n	800ee12 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ed82:	4b28      	ldr	r3, [pc, #160]	@ (800ee24 <vTaskSwitchContext+0xb8>)
 800ed84:	2200      	movs	r2, #0
 800ed86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed88:	4b27      	ldr	r3, [pc, #156]	@ (800ee28 <vTaskSwitchContext+0xbc>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	fab3 f383 	clz	r3, r3
 800ed94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ed96:	7afb      	ldrb	r3, [r7, #11]
 800ed98:	f1c3 031f 	rsb	r3, r3, #31
 800ed9c:	617b      	str	r3, [r7, #20]
 800ed9e:	4923      	ldr	r1, [pc, #140]	@ (800ee2c <vTaskSwitchContext+0xc0>)
 800eda0:	697a      	ldr	r2, [r7, #20]
 800eda2:	4613      	mov	r3, r2
 800eda4:	009b      	lsls	r3, r3, #2
 800eda6:	4413      	add	r3, r2
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	440b      	add	r3, r1
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d10d      	bne.n	800edce <vTaskSwitchContext+0x62>
	__asm volatile
 800edb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb6:	b672      	cpsid	i
 800edb8:	f383 8811 	msr	BASEPRI, r3
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f3bf 8f4f 	dsb	sy
 800edc4:	b662      	cpsie	i
 800edc6:	607b      	str	r3, [r7, #4]
}
 800edc8:	bf00      	nop
 800edca:	bf00      	nop
 800edcc:	e7fd      	b.n	800edca <vTaskSwitchContext+0x5e>
 800edce:	697a      	ldr	r2, [r7, #20]
 800edd0:	4613      	mov	r3, r2
 800edd2:	009b      	lsls	r3, r3, #2
 800edd4:	4413      	add	r3, r2
 800edd6:	009b      	lsls	r3, r3, #2
 800edd8:	4a14      	ldr	r2, [pc, #80]	@ (800ee2c <vTaskSwitchContext+0xc0>)
 800edda:	4413      	add	r3, r2
 800eddc:	613b      	str	r3, [r7, #16]
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	685a      	ldr	r2, [r3, #4]
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	605a      	str	r2, [r3, #4]
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	685a      	ldr	r2, [r3, #4]
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	3308      	adds	r3, #8
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d104      	bne.n	800edfe <vTaskSwitchContext+0x92>
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	685a      	ldr	r2, [r3, #4]
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	605a      	str	r2, [r3, #4]
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	4a0a      	ldr	r2, [pc, #40]	@ (800ee30 <vTaskSwitchContext+0xc4>)
 800ee06:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ee08:	4b09      	ldr	r3, [pc, #36]	@ (800ee30 <vTaskSwitchContext+0xc4>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	334c      	adds	r3, #76	@ 0x4c
 800ee0e:	4a09      	ldr	r2, [pc, #36]	@ (800ee34 <vTaskSwitchContext+0xc8>)
 800ee10:	6013      	str	r3, [r2, #0]
}
 800ee12:	bf00      	nop
 800ee14:	371c      	adds	r7, #28
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop
 800ee20:	20000f60 	.word	0x20000f60
 800ee24:	20000f4c 	.word	0x20000f4c
 800ee28:	20000f40 	.word	0x20000f40
 800ee2c:	20000e3c 	.word	0x20000e3c
 800ee30:	20000e38 	.word	0x20000e38
 800ee34:	20000064 	.word	0x20000064

0800ee38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10d      	bne.n	800ee64 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800ee48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee4c:	b672      	cpsid	i
 800ee4e:	f383 8811 	msr	BASEPRI, r3
 800ee52:	f3bf 8f6f 	isb	sy
 800ee56:	f3bf 8f4f 	dsb	sy
 800ee5a:	b662      	cpsie	i
 800ee5c:	60fb      	str	r3, [r7, #12]
}
 800ee5e:	bf00      	nop
 800ee60:	bf00      	nop
 800ee62:	e7fd      	b.n	800ee60 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ee64:	4b07      	ldr	r3, [pc, #28]	@ (800ee84 <vTaskPlaceOnEventList+0x4c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	3318      	adds	r3, #24
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f7fe fbaa 	bl	800d5c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee72:	2101      	movs	r1, #1
 800ee74:	6838      	ldr	r0, [r7, #0]
 800ee76:	f000 fbb3 	bl	800f5e0 <prvAddCurrentTaskToDelayedList>
}
 800ee7a:	bf00      	nop
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	20000e38 	.word	0x20000e38

0800ee88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10d      	bne.n	800eeba <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800ee9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eea2:	b672      	cpsid	i
 800eea4:	f383 8811 	msr	BASEPRI, r3
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	f3bf 8f4f 	dsb	sy
 800eeb0:	b662      	cpsie	i
 800eeb2:	60fb      	str	r3, [r7, #12]
}
 800eeb4:	bf00      	nop
 800eeb6:	bf00      	nop
 800eeb8:	e7fd      	b.n	800eeb6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	3318      	adds	r3, #24
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fe fbba 	bl	800d638 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eec4:	4b1d      	ldr	r3, [pc, #116]	@ (800ef3c <xTaskRemoveFromEventList+0xb4>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d11c      	bne.n	800ef06 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	3304      	adds	r3, #4
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe fbb1 	bl	800d638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeda:	2201      	movs	r2, #1
 800eedc:	409a      	lsls	r2, r3
 800eede:	4b18      	ldr	r3, [pc, #96]	@ (800ef40 <xTaskRemoveFromEventList+0xb8>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	4a16      	ldr	r2, [pc, #88]	@ (800ef40 <xTaskRemoveFromEventList+0xb8>)
 800eee6:	6013      	str	r3, [r2, #0]
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeec:	4613      	mov	r3, r2
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	4413      	add	r3, r2
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	4a13      	ldr	r2, [pc, #76]	@ (800ef44 <xTaskRemoveFromEventList+0xbc>)
 800eef6:	441a      	add	r2, r3
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	3304      	adds	r3, #4
 800eefc:	4619      	mov	r1, r3
 800eefe:	4610      	mov	r0, r2
 800ef00:	f7fe fb3d 	bl	800d57e <vListInsertEnd>
 800ef04:	e005      	b.n	800ef12 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	3318      	adds	r3, #24
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	480e      	ldr	r0, [pc, #56]	@ (800ef48 <xTaskRemoveFromEventList+0xc0>)
 800ef0e:	f7fe fb36 	bl	800d57e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef16:	4b0d      	ldr	r3, [pc, #52]	@ (800ef4c <xTaskRemoveFromEventList+0xc4>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d905      	bls.n	800ef2c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ef20:	2301      	movs	r3, #1
 800ef22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ef24:	4b0a      	ldr	r3, [pc, #40]	@ (800ef50 <xTaskRemoveFromEventList+0xc8>)
 800ef26:	2201      	movs	r2, #1
 800ef28:	601a      	str	r2, [r3, #0]
 800ef2a:	e001      	b.n	800ef30 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ef30:	697b      	ldr	r3, [r7, #20]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3718      	adds	r7, #24
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	20000f60 	.word	0x20000f60
 800ef40:	20000f40 	.word	0x20000f40
 800ef44:	20000e3c 	.word	0x20000e3c
 800ef48:	20000ef8 	.word	0x20000ef8
 800ef4c:	20000e38 	.word	0x20000e38
 800ef50:	20000f4c 	.word	0x20000f4c

0800ef54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ef54:	b480      	push	{r7}
 800ef56:	b083      	sub	sp, #12
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ef5c:	4b06      	ldr	r3, [pc, #24]	@ (800ef78 <vTaskInternalSetTimeOutState+0x24>)
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ef64:	4b05      	ldr	r3, [pc, #20]	@ (800ef7c <vTaskInternalSetTimeOutState+0x28>)
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	605a      	str	r2, [r3, #4]
}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr
 800ef78:	20000f50 	.word	0x20000f50
 800ef7c:	20000f3c 	.word	0x20000f3c

0800ef80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b088      	sub	sp, #32
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d10d      	bne.n	800efac <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800ef90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef94:	b672      	cpsid	i
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	b662      	cpsie	i
 800efa4:	613b      	str	r3, [r7, #16]
}
 800efa6:	bf00      	nop
 800efa8:	bf00      	nop
 800efaa:	e7fd      	b.n	800efa8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10d      	bne.n	800efce <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800efb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb6:	b672      	cpsid	i
 800efb8:	f383 8811 	msr	BASEPRI, r3
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	b662      	cpsie	i
 800efc6:	60fb      	str	r3, [r7, #12]
}
 800efc8:	bf00      	nop
 800efca:	bf00      	nop
 800efcc:	e7fd      	b.n	800efca <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800efce:	f000 fc7d 	bl	800f8cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800efd2:	4b1d      	ldr	r3, [pc, #116]	@ (800f048 <xTaskCheckForTimeOut+0xc8>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	69ba      	ldr	r2, [r7, #24]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800efea:	d102      	bne.n	800eff2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800efec:	2300      	movs	r3, #0
 800efee:	61fb      	str	r3, [r7, #28]
 800eff0:	e023      	b.n	800f03a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	4b15      	ldr	r3, [pc, #84]	@ (800f04c <xTaskCheckForTimeOut+0xcc>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	429a      	cmp	r2, r3
 800effc:	d007      	beq.n	800f00e <xTaskCheckForTimeOut+0x8e>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	69ba      	ldr	r2, [r7, #24]
 800f004:	429a      	cmp	r2, r3
 800f006:	d302      	bcc.n	800f00e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f008:	2301      	movs	r3, #1
 800f00a:	61fb      	str	r3, [r7, #28]
 800f00c:	e015      	b.n	800f03a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	697a      	ldr	r2, [r7, #20]
 800f014:	429a      	cmp	r2, r3
 800f016:	d20b      	bcs.n	800f030 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	1ad2      	subs	r2, r2, r3
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f7ff ff95 	bl	800ef54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f02a:	2300      	movs	r3, #0
 800f02c:	61fb      	str	r3, [r7, #28]
 800f02e:	e004      	b.n	800f03a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	2200      	movs	r2, #0
 800f034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f036:	2301      	movs	r3, #1
 800f038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f03a:	f000 fc7d 	bl	800f938 <vPortExitCritical>

	return xReturn;
 800f03e:	69fb      	ldr	r3, [r7, #28]
}
 800f040:	4618      	mov	r0, r3
 800f042:	3720      	adds	r7, #32
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	20000f3c 	.word	0x20000f3c
 800f04c:	20000f50 	.word	0x20000f50

0800f050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f050:	b480      	push	{r7}
 800f052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f054:	4b03      	ldr	r3, [pc, #12]	@ (800f064 <vTaskMissedYield+0x14>)
 800f056:	2201      	movs	r2, #1
 800f058:	601a      	str	r2, [r3, #0]
}
 800f05a:	bf00      	nop
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr
 800f064:	20000f4c 	.word	0x20000f4c

0800f068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b082      	sub	sp, #8
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f070:	f000 f852 	bl	800f118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f074:	4b06      	ldr	r3, [pc, #24]	@ (800f090 <prvIdleTask+0x28>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b01      	cmp	r3, #1
 800f07a:	d9f9      	bls.n	800f070 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f07c:	4b05      	ldr	r3, [pc, #20]	@ (800f094 <prvIdleTask+0x2c>)
 800f07e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f082:	601a      	str	r2, [r3, #0]
 800f084:	f3bf 8f4f 	dsb	sy
 800f088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f08c:	e7f0      	b.n	800f070 <prvIdleTask+0x8>
 800f08e:	bf00      	nop
 800f090:	20000e3c 	.word	0x20000e3c
 800f094:	e000ed04 	.word	0xe000ed04

0800f098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f09e:	2300      	movs	r3, #0
 800f0a0:	607b      	str	r3, [r7, #4]
 800f0a2:	e00c      	b.n	800f0be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f0a4:	687a      	ldr	r2, [r7, #4]
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	009b      	lsls	r3, r3, #2
 800f0aa:	4413      	add	r3, r2
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	4a12      	ldr	r2, [pc, #72]	@ (800f0f8 <prvInitialiseTaskLists+0x60>)
 800f0b0:	4413      	add	r3, r2
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fa36 	bl	800d524 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	607b      	str	r3, [r7, #4]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2b06      	cmp	r3, #6
 800f0c2:	d9ef      	bls.n	800f0a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f0c4:	480d      	ldr	r0, [pc, #52]	@ (800f0fc <prvInitialiseTaskLists+0x64>)
 800f0c6:	f7fe fa2d 	bl	800d524 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f0ca:	480d      	ldr	r0, [pc, #52]	@ (800f100 <prvInitialiseTaskLists+0x68>)
 800f0cc:	f7fe fa2a 	bl	800d524 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f0d0:	480c      	ldr	r0, [pc, #48]	@ (800f104 <prvInitialiseTaskLists+0x6c>)
 800f0d2:	f7fe fa27 	bl	800d524 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f0d6:	480c      	ldr	r0, [pc, #48]	@ (800f108 <prvInitialiseTaskLists+0x70>)
 800f0d8:	f7fe fa24 	bl	800d524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f0dc:	480b      	ldr	r0, [pc, #44]	@ (800f10c <prvInitialiseTaskLists+0x74>)
 800f0de:	f7fe fa21 	bl	800d524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f0e2:	4b0b      	ldr	r3, [pc, #44]	@ (800f110 <prvInitialiseTaskLists+0x78>)
 800f0e4:	4a05      	ldr	r2, [pc, #20]	@ (800f0fc <prvInitialiseTaskLists+0x64>)
 800f0e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f0e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f114 <prvInitialiseTaskLists+0x7c>)
 800f0ea:	4a05      	ldr	r2, [pc, #20]	@ (800f100 <prvInitialiseTaskLists+0x68>)
 800f0ec:	601a      	str	r2, [r3, #0]
}
 800f0ee:	bf00      	nop
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	20000e3c 	.word	0x20000e3c
 800f0fc:	20000ec8 	.word	0x20000ec8
 800f100:	20000edc 	.word	0x20000edc
 800f104:	20000ef8 	.word	0x20000ef8
 800f108:	20000f0c 	.word	0x20000f0c
 800f10c:	20000f24 	.word	0x20000f24
 800f110:	20000ef0 	.word	0x20000ef0
 800f114:	20000ef4 	.word	0x20000ef4

0800f118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f11e:	e019      	b.n	800f154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f120:	f000 fbd4 	bl	800f8cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f124:	4b10      	ldr	r3, [pc, #64]	@ (800f168 <prvCheckTasksWaitingTermination+0x50>)
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	3304      	adds	r3, #4
 800f130:	4618      	mov	r0, r3
 800f132:	f7fe fa81 	bl	800d638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f136:	4b0d      	ldr	r3, [pc, #52]	@ (800f16c <prvCheckTasksWaitingTermination+0x54>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	4a0b      	ldr	r2, [pc, #44]	@ (800f16c <prvCheckTasksWaitingTermination+0x54>)
 800f13e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f140:	4b0b      	ldr	r3, [pc, #44]	@ (800f170 <prvCheckTasksWaitingTermination+0x58>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	3b01      	subs	r3, #1
 800f146:	4a0a      	ldr	r2, [pc, #40]	@ (800f170 <prvCheckTasksWaitingTermination+0x58>)
 800f148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f14a:	f000 fbf5 	bl	800f938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 f810 	bl	800f174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f154:	4b06      	ldr	r3, [pc, #24]	@ (800f170 <prvCheckTasksWaitingTermination+0x58>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1e1      	bne.n	800f120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f15c:	bf00      	nop
 800f15e:	bf00      	nop
 800f160:	3708      	adds	r7, #8
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	20000f0c 	.word	0x20000f0c
 800f16c:	20000f38 	.word	0x20000f38
 800f170:	20000f20 	.word	0x20000f20

0800f174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	334c      	adds	r3, #76	@ 0x4c
 800f180:	4618      	mov	r0, r3
 800f182:	f001 f837 	bl	80101f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d108      	bne.n	800f1a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f194:	4618      	mov	r0, r3
 800f196:	f000 fd95 	bl	800fcc4 <vPortFree>
				vPortFree( pxTCB );
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f000 fd92 	bl	800fcc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f1a0:	e01b      	b.n	800f1da <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d103      	bne.n	800f1b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fd89 	bl	800fcc4 <vPortFree>
	}
 800f1b2:	e012      	b.n	800f1da <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800f1ba:	2b02      	cmp	r3, #2
 800f1bc:	d00d      	beq.n	800f1da <prvDeleteTCB+0x66>
	__asm volatile
 800f1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1c2:	b672      	cpsid	i
 800f1c4:	f383 8811 	msr	BASEPRI, r3
 800f1c8:	f3bf 8f6f 	isb	sy
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	b662      	cpsie	i
 800f1d2:	60fb      	str	r3, [r7, #12]
}
 800f1d4:	bf00      	nop
 800f1d6:	bf00      	nop
 800f1d8:	e7fd      	b.n	800f1d6 <prvDeleteTCB+0x62>
	}
 800f1da:	bf00      	nop
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
	...

0800f1e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b083      	sub	sp, #12
 800f1e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800f21c <prvResetNextTaskUnblockTime+0x38>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d104      	bne.n	800f1fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f1f4:	4b0a      	ldr	r3, [pc, #40]	@ (800f220 <prvResetNextTaskUnblockTime+0x3c>)
 800f1f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f1fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f1fc:	e008      	b.n	800f210 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1fe:	4b07      	ldr	r3, [pc, #28]	@ (800f21c <prvResetNextTaskUnblockTime+0x38>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	4a04      	ldr	r2, [pc, #16]	@ (800f220 <prvResetNextTaskUnblockTime+0x3c>)
 800f20e:	6013      	str	r3, [r2, #0]
}
 800f210:	bf00      	nop
 800f212:	370c      	adds	r7, #12
 800f214:	46bd      	mov	sp, r7
 800f216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21a:	4770      	bx	lr
 800f21c:	20000ef0 	.word	0x20000ef0
 800f220:	20000f58 	.word	0x20000f58

0800f224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f22a:	4b0b      	ldr	r3, [pc, #44]	@ (800f258 <xTaskGetSchedulerState+0x34>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d102      	bne.n	800f238 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f232:	2301      	movs	r3, #1
 800f234:	607b      	str	r3, [r7, #4]
 800f236:	e008      	b.n	800f24a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f238:	4b08      	ldr	r3, [pc, #32]	@ (800f25c <xTaskGetSchedulerState+0x38>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d102      	bne.n	800f246 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f240:	2302      	movs	r3, #2
 800f242:	607b      	str	r3, [r7, #4]
 800f244:	e001      	b.n	800f24a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f246:	2300      	movs	r3, #0
 800f248:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f24a:	687b      	ldr	r3, [r7, #4]
	}
 800f24c:	4618      	mov	r0, r3
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	20000f44 	.word	0x20000f44
 800f25c:	20000f60 	.word	0x20000f60

0800f260 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f26c:	2300      	movs	r3, #0
 800f26e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d069      	beq.n	800f34a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f27a:	4b36      	ldr	r3, [pc, #216]	@ (800f354 <xTaskPriorityInherit+0xf4>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f280:	429a      	cmp	r2, r3
 800f282:	d259      	bcs.n	800f338 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f284:	68bb      	ldr	r3, [r7, #8]
 800f286:	699b      	ldr	r3, [r3, #24]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	db06      	blt.n	800f29a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f28c:	4b31      	ldr	r3, [pc, #196]	@ (800f354 <xTaskPriorityInherit+0xf4>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f292:	f1c3 0207 	rsb	r2, r3, #7
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f29a:	68bb      	ldr	r3, [r7, #8]
 800f29c:	6959      	ldr	r1, [r3, #20]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4413      	add	r3, r2
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	4a2b      	ldr	r2, [pc, #172]	@ (800f358 <xTaskPriorityInherit+0xf8>)
 800f2ac:	4413      	add	r3, r2
 800f2ae:	4299      	cmp	r1, r3
 800f2b0:	d13a      	bne.n	800f328 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	3304      	adds	r3, #4
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7fe f9be 	bl	800d638 <uxListRemove>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d115      	bne.n	800f2ee <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2c6:	4924      	ldr	r1, [pc, #144]	@ (800f358 <xTaskPriorityInherit+0xf8>)
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	4413      	add	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	440b      	add	r3, r1
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10a      	bne.n	800f2ee <xTaskPriorityInherit+0x8e>
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2dc:	2201      	movs	r2, #1
 800f2de:	fa02 f303 	lsl.w	r3, r2, r3
 800f2e2:	43da      	mvns	r2, r3
 800f2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800f35c <xTaskPriorityInherit+0xfc>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	4a1c      	ldr	r2, [pc, #112]	@ (800f35c <xTaskPriorityInherit+0xfc>)
 800f2ec:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f2ee:	4b19      	ldr	r3, [pc, #100]	@ (800f354 <xTaskPriorityInherit+0xf4>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	409a      	lsls	r2, r3
 800f300:	4b16      	ldr	r3, [pc, #88]	@ (800f35c <xTaskPriorityInherit+0xfc>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	4313      	orrs	r3, r2
 800f306:	4a15      	ldr	r2, [pc, #84]	@ (800f35c <xTaskPriorityInherit+0xfc>)
 800f308:	6013      	str	r3, [r2, #0]
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f30e:	4613      	mov	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4413      	add	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4a10      	ldr	r2, [pc, #64]	@ (800f358 <xTaskPriorityInherit+0xf8>)
 800f318:	441a      	add	r2, r3
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	3304      	adds	r3, #4
 800f31e:	4619      	mov	r1, r3
 800f320:	4610      	mov	r0, r2
 800f322:	f7fe f92c 	bl	800d57e <vListInsertEnd>
 800f326:	e004      	b.n	800f332 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f328:	4b0a      	ldr	r3, [pc, #40]	@ (800f354 <xTaskPriorityInherit+0xf4>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f332:	2301      	movs	r3, #1
 800f334:	60fb      	str	r3, [r7, #12]
 800f336:	e008      	b.n	800f34a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f33c:	4b05      	ldr	r3, [pc, #20]	@ (800f354 <xTaskPriorityInherit+0xf4>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f342:	429a      	cmp	r2, r3
 800f344:	d201      	bcs.n	800f34a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f346:	2301      	movs	r3, #1
 800f348:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f34a:	68fb      	ldr	r3, [r7, #12]
	}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3710      	adds	r7, #16
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	20000e38 	.word	0x20000e38
 800f358:	20000e3c 	.word	0x20000e3c
 800f35c:	20000f40 	.word	0x20000f40

0800f360 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f360:	b580      	push	{r7, lr}
 800f362:	b086      	sub	sp, #24
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f36c:	2300      	movs	r3, #0
 800f36e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d074      	beq.n	800f460 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f376:	4b3d      	ldr	r3, [pc, #244]	@ (800f46c <xTaskPriorityDisinherit+0x10c>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	693a      	ldr	r2, [r7, #16]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d00d      	beq.n	800f39c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800f380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f384:	b672      	cpsid	i
 800f386:	f383 8811 	msr	BASEPRI, r3
 800f38a:	f3bf 8f6f 	isb	sy
 800f38e:	f3bf 8f4f 	dsb	sy
 800f392:	b662      	cpsie	i
 800f394:	60fb      	str	r3, [r7, #12]
}
 800f396:	bf00      	nop
 800f398:	bf00      	nop
 800f39a:	e7fd      	b.n	800f398 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d10d      	bne.n	800f3c0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800f3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a8:	b672      	cpsid	i
 800f3aa:	f383 8811 	msr	BASEPRI, r3
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	f3bf 8f4f 	dsb	sy
 800f3b6:	b662      	cpsie	i
 800f3b8:	60bb      	str	r3, [r7, #8]
}
 800f3ba:	bf00      	nop
 800f3bc:	bf00      	nop
 800f3be:	e7fd      	b.n	800f3bc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3c4:	1e5a      	subs	r2, r3, #1
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d044      	beq.n	800f460 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d140      	bne.n	800f460 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fe f928 	bl	800d638 <uxListRemove>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d115      	bne.n	800f41a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3f2:	491f      	ldr	r1, [pc, #124]	@ (800f470 <xTaskPriorityDisinherit+0x110>)
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	4413      	add	r3, r2
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	440b      	add	r3, r1
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d10a      	bne.n	800f41a <xTaskPriorityDisinherit+0xba>
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f408:	2201      	movs	r2, #1
 800f40a:	fa02 f303 	lsl.w	r3, r2, r3
 800f40e:	43da      	mvns	r2, r3
 800f410:	4b18      	ldr	r3, [pc, #96]	@ (800f474 <xTaskPriorityDisinherit+0x114>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4013      	ands	r3, r2
 800f416:	4a17      	ldr	r2, [pc, #92]	@ (800f474 <xTaskPriorityDisinherit+0x114>)
 800f418:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f426:	f1c3 0207 	rsb	r2, r3, #7
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f42e:	693b      	ldr	r3, [r7, #16]
 800f430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f432:	2201      	movs	r2, #1
 800f434:	409a      	lsls	r2, r3
 800f436:	4b0f      	ldr	r3, [pc, #60]	@ (800f474 <xTaskPriorityDisinherit+0x114>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	4a0d      	ldr	r2, [pc, #52]	@ (800f474 <xTaskPriorityDisinherit+0x114>)
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f444:	4613      	mov	r3, r2
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	4413      	add	r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4a08      	ldr	r2, [pc, #32]	@ (800f470 <xTaskPriorityDisinherit+0x110>)
 800f44e:	441a      	add	r2, r3
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	3304      	adds	r3, #4
 800f454:	4619      	mov	r1, r3
 800f456:	4610      	mov	r0, r2
 800f458:	f7fe f891 	bl	800d57e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f45c:	2301      	movs	r3, #1
 800f45e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f460:	697b      	ldr	r3, [r7, #20]
	}
 800f462:	4618      	mov	r0, r3
 800f464:	3718      	adds	r7, #24
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	20000e38 	.word	0x20000e38
 800f470:	20000e3c 	.word	0x20000e3c
 800f474:	20000f40 	.word	0x20000f40

0800f478 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b088      	sub	sp, #32
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f486:	2301      	movs	r3, #1
 800f488:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f000 8089 	beq.w	800f5a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f496:	2b00      	cmp	r3, #0
 800f498:	d10d      	bne.n	800f4b6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800f49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f49e:	b672      	cpsid	i
 800f4a0:	f383 8811 	msr	BASEPRI, r3
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	b662      	cpsie	i
 800f4ae:	60fb      	str	r3, [r7, #12]
}
 800f4b0:	bf00      	nop
 800f4b2:	bf00      	nop
 800f4b4:	e7fd      	b.n	800f4b2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f4b6:	69bb      	ldr	r3, [r7, #24]
 800f4b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4ba:	683a      	ldr	r2, [r7, #0]
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d902      	bls.n	800f4c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	61fb      	str	r3, [r7, #28]
 800f4c4:	e002      	b.n	800f4cc <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f4c6:	69bb      	ldr	r3, [r7, #24]
 800f4c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4d0:	69fa      	ldr	r2, [r7, #28]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d066      	beq.n	800f5a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f4d6:	69bb      	ldr	r3, [r7, #24]
 800f4d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d161      	bne.n	800f5a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f4e0:	4b32      	ldr	r3, [pc, #200]	@ (800f5ac <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	69ba      	ldr	r2, [r7, #24]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d10d      	bne.n	800f506 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800f4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ee:	b672      	cpsid	i
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	b662      	cpsie	i
 800f4fe:	60bb      	str	r3, [r7, #8]
}
 800f500:	bf00      	nop
 800f502:	bf00      	nop
 800f504:	e7fd      	b.n	800f502 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f506:	69bb      	ldr	r3, [r7, #24]
 800f508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f50a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	69fa      	ldr	r2, [r7, #28]
 800f510:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	2b00      	cmp	r3, #0
 800f518:	db04      	blt.n	800f524 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	f1c3 0207 	rsb	r2, r3, #7
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	6959      	ldr	r1, [r3, #20]
 800f528:	693a      	ldr	r2, [r7, #16]
 800f52a:	4613      	mov	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	4a1f      	ldr	r2, [pc, #124]	@ (800f5b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f534:	4413      	add	r3, r2
 800f536:	4299      	cmp	r1, r3
 800f538:	d134      	bne.n	800f5a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f53a:	69bb      	ldr	r3, [r7, #24]
 800f53c:	3304      	adds	r3, #4
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fe f87a 	bl	800d638 <uxListRemove>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d115      	bne.n	800f576 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f54e:	4918      	ldr	r1, [pc, #96]	@ (800f5b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f550:	4613      	mov	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4413      	add	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	440b      	add	r3, r1
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d10a      	bne.n	800f576 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f564:	2201      	movs	r2, #1
 800f566:	fa02 f303 	lsl.w	r3, r2, r3
 800f56a:	43da      	mvns	r2, r3
 800f56c:	4b11      	ldr	r3, [pc, #68]	@ (800f5b4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4013      	ands	r3, r2
 800f572:	4a10      	ldr	r2, [pc, #64]	@ (800f5b4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f574:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f57a:	2201      	movs	r2, #1
 800f57c:	409a      	lsls	r2, r3
 800f57e:	4b0d      	ldr	r3, [pc, #52]	@ (800f5b4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	4313      	orrs	r3, r2
 800f584:	4a0b      	ldr	r2, [pc, #44]	@ (800f5b4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800f586:	6013      	str	r3, [r2, #0]
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f58c:	4613      	mov	r3, r2
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	4413      	add	r3, r2
 800f592:	009b      	lsls	r3, r3, #2
 800f594:	4a06      	ldr	r2, [pc, #24]	@ (800f5b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800f596:	441a      	add	r2, r3
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	3304      	adds	r3, #4
 800f59c:	4619      	mov	r1, r3
 800f59e:	4610      	mov	r0, r2
 800f5a0:	f7fd ffed 	bl	800d57e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f5a4:	bf00      	nop
 800f5a6:	3720      	adds	r7, #32
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	20000e38 	.word	0x20000e38
 800f5b0:	20000e3c 	.word	0x20000e3c
 800f5b4:	20000f40 	.word	0x20000f40

0800f5b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f5b8:	b480      	push	{r7}
 800f5ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f5bc:	4b07      	ldr	r3, [pc, #28]	@ (800f5dc <pvTaskIncrementMutexHeldCount+0x24>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d004      	beq.n	800f5ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f5c4:	4b05      	ldr	r3, [pc, #20]	@ (800f5dc <pvTaskIncrementMutexHeldCount+0x24>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f5ca:	3201      	adds	r2, #1
 800f5cc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800f5ce:	4b03      	ldr	r3, [pc, #12]	@ (800f5dc <pvTaskIncrementMutexHeldCount+0x24>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
	}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr
 800f5dc:	20000e38 	.word	0x20000e38

0800f5e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f5ea:	4b29      	ldr	r3, [pc, #164]	@ (800f690 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f5f0:	4b28      	ldr	r3, [pc, #160]	@ (800f694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	3304      	adds	r3, #4
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fe f81e 	bl	800d638 <uxListRemove>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10b      	bne.n	800f61a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f602:	4b24      	ldr	r3, [pc, #144]	@ (800f694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f608:	2201      	movs	r2, #1
 800f60a:	fa02 f303 	lsl.w	r3, r2, r3
 800f60e:	43da      	mvns	r2, r3
 800f610:	4b21      	ldr	r3, [pc, #132]	@ (800f698 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4013      	ands	r3, r2
 800f616:	4a20      	ldr	r2, [pc, #128]	@ (800f698 <prvAddCurrentTaskToDelayedList+0xb8>)
 800f618:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f620:	d10a      	bne.n	800f638 <prvAddCurrentTaskToDelayedList+0x58>
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d007      	beq.n	800f638 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f628:	4b1a      	ldr	r3, [pc, #104]	@ (800f694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3304      	adds	r3, #4
 800f62e:	4619      	mov	r1, r3
 800f630:	481a      	ldr	r0, [pc, #104]	@ (800f69c <prvAddCurrentTaskToDelayedList+0xbc>)
 800f632:	f7fd ffa4 	bl	800d57e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f636:	e026      	b.n	800f686 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4413      	add	r3, r2
 800f63e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f640:	4b14      	ldr	r3, [pc, #80]	@ (800f694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f648:	68ba      	ldr	r2, [r7, #8]
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d209      	bcs.n	800f664 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f650:	4b13      	ldr	r3, [pc, #76]	@ (800f6a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	4b0f      	ldr	r3, [pc, #60]	@ (800f694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	3304      	adds	r3, #4
 800f65a:	4619      	mov	r1, r3
 800f65c:	4610      	mov	r0, r2
 800f65e:	f7fd ffb2 	bl	800d5c6 <vListInsert>
}
 800f662:	e010      	b.n	800f686 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f664:	4b0f      	ldr	r3, [pc, #60]	@ (800f6a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	4b0a      	ldr	r3, [pc, #40]	@ (800f694 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	3304      	adds	r3, #4
 800f66e:	4619      	mov	r1, r3
 800f670:	4610      	mov	r0, r2
 800f672:	f7fd ffa8 	bl	800d5c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f676:	4b0c      	ldr	r3, [pc, #48]	@ (800f6a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d202      	bcs.n	800f686 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f680:	4a09      	ldr	r2, [pc, #36]	@ (800f6a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	6013      	str	r3, [r2, #0]
}
 800f686:	bf00      	nop
 800f688:	3710      	adds	r7, #16
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	20000f3c 	.word	0x20000f3c
 800f694:	20000e38 	.word	0x20000e38
 800f698:	20000f40 	.word	0x20000f40
 800f69c:	20000f24 	.word	0x20000f24
 800f6a0:	20000ef4 	.word	0x20000ef4
 800f6a4:	20000ef0 	.word	0x20000ef0
 800f6a8:	20000f58 	.word	0x20000f58

0800f6ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	3b04      	subs	r3, #4
 800f6bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f6c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	3b04      	subs	r3, #4
 800f6ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	f023 0201 	bic.w	r2, r3, #1
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	3b04      	subs	r3, #4
 800f6da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f6dc:	4a0c      	ldr	r2, [pc, #48]	@ (800f710 <pxPortInitialiseStack+0x64>)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	3b14      	subs	r3, #20
 800f6e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	3b04      	subs	r3, #4
 800f6f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f06f 0202 	mvn.w	r2, #2
 800f6fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	3b20      	subs	r3, #32
 800f700:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f702:	68fb      	ldr	r3, [r7, #12]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr
 800f710:	0800f715 	.word	0x0800f715

0800f714 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f714:	b480      	push	{r7}
 800f716:	b085      	sub	sp, #20
 800f718:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f71a:	2300      	movs	r3, #0
 800f71c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f71e:	4b15      	ldr	r3, [pc, #84]	@ (800f774 <prvTaskExitError+0x60>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f726:	d00d      	beq.n	800f744 <prvTaskExitError+0x30>
	__asm volatile
 800f728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f72c:	b672      	cpsid	i
 800f72e:	f383 8811 	msr	BASEPRI, r3
 800f732:	f3bf 8f6f 	isb	sy
 800f736:	f3bf 8f4f 	dsb	sy
 800f73a:	b662      	cpsie	i
 800f73c:	60fb      	str	r3, [r7, #12]
}
 800f73e:	bf00      	nop
 800f740:	bf00      	nop
 800f742:	e7fd      	b.n	800f740 <prvTaskExitError+0x2c>
	__asm volatile
 800f744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f748:	b672      	cpsid	i
 800f74a:	f383 8811 	msr	BASEPRI, r3
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	b662      	cpsie	i
 800f758:	60bb      	str	r3, [r7, #8]
}
 800f75a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f75c:	bf00      	nop
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d0fc      	beq.n	800f75e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f764:	bf00      	nop
 800f766:	bf00      	nop
 800f768:	3714      	adds	r7, #20
 800f76a:	46bd      	mov	sp, r7
 800f76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop
 800f774:	20000054 	.word	0x20000054
	...

0800f780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f780:	4b07      	ldr	r3, [pc, #28]	@ (800f7a0 <pxCurrentTCBConst2>)
 800f782:	6819      	ldr	r1, [r3, #0]
 800f784:	6808      	ldr	r0, [r1, #0]
 800f786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78a:	f380 8809 	msr	PSP, r0
 800f78e:	f3bf 8f6f 	isb	sy
 800f792:	f04f 0000 	mov.w	r0, #0
 800f796:	f380 8811 	msr	BASEPRI, r0
 800f79a:	4770      	bx	lr
 800f79c:	f3af 8000 	nop.w

0800f7a0 <pxCurrentTCBConst2>:
 800f7a0:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7a4:	bf00      	nop
 800f7a6:	bf00      	nop

0800f7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7a8:	4808      	ldr	r0, [pc, #32]	@ (800f7cc <prvPortStartFirstTask+0x24>)
 800f7aa:	6800      	ldr	r0, [r0, #0]
 800f7ac:	6800      	ldr	r0, [r0, #0]
 800f7ae:	f380 8808 	msr	MSP, r0
 800f7b2:	f04f 0000 	mov.w	r0, #0
 800f7b6:	f380 8814 	msr	CONTROL, r0
 800f7ba:	b662      	cpsie	i
 800f7bc:	b661      	cpsie	f
 800f7be:	f3bf 8f4f 	dsb	sy
 800f7c2:	f3bf 8f6f 	isb	sy
 800f7c6:	df00      	svc	0
 800f7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f7ca:	bf00      	nop
 800f7cc:	e000ed08 	.word	0xe000ed08

0800f7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f7d6:	4b37      	ldr	r3, [pc, #220]	@ (800f8b4 <xPortStartScheduler+0xe4>)
 800f7d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	22ff      	movs	r2, #255	@ 0xff
 800f7e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f7f0:	78fb      	ldrb	r3, [r7, #3]
 800f7f2:	b2db      	uxtb	r3, r3
 800f7f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800f8b8 <xPortStartScheduler+0xe8>)
 800f7fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f7fe:	4b2f      	ldr	r3, [pc, #188]	@ (800f8bc <xPortStartScheduler+0xec>)
 800f800:	2207      	movs	r2, #7
 800f802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f804:	e009      	b.n	800f81a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f806:	4b2d      	ldr	r3, [pc, #180]	@ (800f8bc <xPortStartScheduler+0xec>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	3b01      	subs	r3, #1
 800f80c:	4a2b      	ldr	r2, [pc, #172]	@ (800f8bc <xPortStartScheduler+0xec>)
 800f80e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f810:	78fb      	ldrb	r3, [r7, #3]
 800f812:	b2db      	uxtb	r3, r3
 800f814:	005b      	lsls	r3, r3, #1
 800f816:	b2db      	uxtb	r3, r3
 800f818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f81a:	78fb      	ldrb	r3, [r7, #3]
 800f81c:	b2db      	uxtb	r3, r3
 800f81e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f822:	2b80      	cmp	r3, #128	@ 0x80
 800f824:	d0ef      	beq.n	800f806 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f826:	4b25      	ldr	r3, [pc, #148]	@ (800f8bc <xPortStartScheduler+0xec>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f1c3 0307 	rsb	r3, r3, #7
 800f82e:	2b04      	cmp	r3, #4
 800f830:	d00d      	beq.n	800f84e <xPortStartScheduler+0x7e>
	__asm volatile
 800f832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f836:	b672      	cpsid	i
 800f838:	f383 8811 	msr	BASEPRI, r3
 800f83c:	f3bf 8f6f 	isb	sy
 800f840:	f3bf 8f4f 	dsb	sy
 800f844:	b662      	cpsie	i
 800f846:	60bb      	str	r3, [r7, #8]
}
 800f848:	bf00      	nop
 800f84a:	bf00      	nop
 800f84c:	e7fd      	b.n	800f84a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f84e:	4b1b      	ldr	r3, [pc, #108]	@ (800f8bc <xPortStartScheduler+0xec>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	021b      	lsls	r3, r3, #8
 800f854:	4a19      	ldr	r2, [pc, #100]	@ (800f8bc <xPortStartScheduler+0xec>)
 800f856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f858:	4b18      	ldr	r3, [pc, #96]	@ (800f8bc <xPortStartScheduler+0xec>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f860:	4a16      	ldr	r2, [pc, #88]	@ (800f8bc <xPortStartScheduler+0xec>)
 800f862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	b2da      	uxtb	r2, r3
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f86c:	4b14      	ldr	r3, [pc, #80]	@ (800f8c0 <xPortStartScheduler+0xf0>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a13      	ldr	r2, [pc, #76]	@ (800f8c0 <xPortStartScheduler+0xf0>)
 800f872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f878:	4b11      	ldr	r3, [pc, #68]	@ (800f8c0 <xPortStartScheduler+0xf0>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a10      	ldr	r2, [pc, #64]	@ (800f8c0 <xPortStartScheduler+0xf0>)
 800f87e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f884:	f000 f8dc 	bl	800fa40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f888:	4b0e      	ldr	r3, [pc, #56]	@ (800f8c4 <xPortStartScheduler+0xf4>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f88e:	f000 f8fb 	bl	800fa88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f892:	4b0d      	ldr	r3, [pc, #52]	@ (800f8c8 <xPortStartScheduler+0xf8>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a0c      	ldr	r2, [pc, #48]	@ (800f8c8 <xPortStartScheduler+0xf8>)
 800f898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f89c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f89e:	f7ff ff83 	bl	800f7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f8a2:	f7ff fa63 	bl	800ed6c <vTaskSwitchContext>
	prvTaskExitError();
 800f8a6:	f7ff ff35 	bl	800f714 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f8aa:	2300      	movs	r3, #0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3710      	adds	r7, #16
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}
 800f8b4:	e000e400 	.word	0xe000e400
 800f8b8:	20000f64 	.word	0x20000f64
 800f8bc:	20000f68 	.word	0x20000f68
 800f8c0:	e000ed20 	.word	0xe000ed20
 800f8c4:	20000054 	.word	0x20000054
 800f8c8:	e000ef34 	.word	0xe000ef34

0800f8cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
	__asm volatile
 800f8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8d6:	b672      	cpsid	i
 800f8d8:	f383 8811 	msr	BASEPRI, r3
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	f3bf 8f4f 	dsb	sy
 800f8e4:	b662      	cpsie	i
 800f8e6:	607b      	str	r3, [r7, #4]
}
 800f8e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f8ea:	4b11      	ldr	r3, [pc, #68]	@ (800f930 <vPortEnterCritical+0x64>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	4a0f      	ldr	r2, [pc, #60]	@ (800f930 <vPortEnterCritical+0x64>)
 800f8f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f8f4:	4b0e      	ldr	r3, [pc, #56]	@ (800f930 <vPortEnterCritical+0x64>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d112      	bne.n	800f922 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800f934 <vPortEnterCritical+0x68>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00d      	beq.n	800f922 <vPortEnterCritical+0x56>
	__asm volatile
 800f906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f90a:	b672      	cpsid	i
 800f90c:	f383 8811 	msr	BASEPRI, r3
 800f910:	f3bf 8f6f 	isb	sy
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	b662      	cpsie	i
 800f91a:	603b      	str	r3, [r7, #0]
}
 800f91c:	bf00      	nop
 800f91e:	bf00      	nop
 800f920:	e7fd      	b.n	800f91e <vPortEnterCritical+0x52>
	}
}
 800f922:	bf00      	nop
 800f924:	370c      	adds	r7, #12
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr
 800f92e:	bf00      	nop
 800f930:	20000054 	.word	0x20000054
 800f934:	e000ed04 	.word	0xe000ed04

0800f938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f93e:	4b13      	ldr	r3, [pc, #76]	@ (800f98c <vPortExitCritical+0x54>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d10d      	bne.n	800f962 <vPortExitCritical+0x2a>
	__asm volatile
 800f946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f94a:	b672      	cpsid	i
 800f94c:	f383 8811 	msr	BASEPRI, r3
 800f950:	f3bf 8f6f 	isb	sy
 800f954:	f3bf 8f4f 	dsb	sy
 800f958:	b662      	cpsie	i
 800f95a:	607b      	str	r3, [r7, #4]
}
 800f95c:	bf00      	nop
 800f95e:	bf00      	nop
 800f960:	e7fd      	b.n	800f95e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f962:	4b0a      	ldr	r3, [pc, #40]	@ (800f98c <vPortExitCritical+0x54>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	3b01      	subs	r3, #1
 800f968:	4a08      	ldr	r2, [pc, #32]	@ (800f98c <vPortExitCritical+0x54>)
 800f96a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f96c:	4b07      	ldr	r3, [pc, #28]	@ (800f98c <vPortExitCritical+0x54>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d105      	bne.n	800f980 <vPortExitCritical+0x48>
 800f974:	2300      	movs	r3, #0
 800f976:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	f383 8811 	msr	BASEPRI, r3
}
 800f97e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f980:	bf00      	nop
 800f982:	370c      	adds	r7, #12
 800f984:	46bd      	mov	sp, r7
 800f986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98a:	4770      	bx	lr
 800f98c:	20000054 	.word	0x20000054

0800f990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f990:	f3ef 8009 	mrs	r0, PSP
 800f994:	f3bf 8f6f 	isb	sy
 800f998:	4b15      	ldr	r3, [pc, #84]	@ (800f9f0 <pxCurrentTCBConst>)
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	f01e 0f10 	tst.w	lr, #16
 800f9a0:	bf08      	it	eq
 800f9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9aa:	6010      	str	r0, [r2, #0]
 800f9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f9b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800f9b4:	b672      	cpsid	i
 800f9b6:	f380 8811 	msr	BASEPRI, r0
 800f9ba:	f3bf 8f4f 	dsb	sy
 800f9be:	f3bf 8f6f 	isb	sy
 800f9c2:	b662      	cpsie	i
 800f9c4:	f7ff f9d2 	bl	800ed6c <vTaskSwitchContext>
 800f9c8:	f04f 0000 	mov.w	r0, #0
 800f9cc:	f380 8811 	msr	BASEPRI, r0
 800f9d0:	bc09      	pop	{r0, r3}
 800f9d2:	6819      	ldr	r1, [r3, #0]
 800f9d4:	6808      	ldr	r0, [r1, #0]
 800f9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9da:	f01e 0f10 	tst.w	lr, #16
 800f9de:	bf08      	it	eq
 800f9e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f9e4:	f380 8809 	msr	PSP, r0
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	4770      	bx	lr
 800f9ee:	bf00      	nop

0800f9f0 <pxCurrentTCBConst>:
 800f9f0:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f9f4:	bf00      	nop
 800f9f6:	bf00      	nop

0800f9f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b082      	sub	sp, #8
 800f9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800f9fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa02:	b672      	cpsid	i
 800fa04:	f383 8811 	msr	BASEPRI, r3
 800fa08:	f3bf 8f6f 	isb	sy
 800fa0c:	f3bf 8f4f 	dsb	sy
 800fa10:	b662      	cpsie	i
 800fa12:	607b      	str	r3, [r7, #4]
}
 800fa14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa16:	f7ff f8ed 	bl	800ebf4 <xTaskIncrementTick>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d003      	beq.n	800fa28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa20:	4b06      	ldr	r3, [pc, #24]	@ (800fa3c <SysTick_Handler+0x44>)
 800fa22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa26:	601a      	str	r2, [r3, #0]
 800fa28:	2300      	movs	r3, #0
 800fa2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	f383 8811 	msr	BASEPRI, r3
}
 800fa32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fa34:	bf00      	nop
 800fa36:	3708      	adds	r7, #8
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	e000ed04 	.word	0xe000ed04

0800fa40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fa40:	b480      	push	{r7}
 800fa42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fa44:	4b0b      	ldr	r3, [pc, #44]	@ (800fa74 <vPortSetupTimerInterrupt+0x34>)
 800fa46:	2200      	movs	r2, #0
 800fa48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fa4a:	4b0b      	ldr	r3, [pc, #44]	@ (800fa78 <vPortSetupTimerInterrupt+0x38>)
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fa50:	4b0a      	ldr	r3, [pc, #40]	@ (800fa7c <vPortSetupTimerInterrupt+0x3c>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	4a0a      	ldr	r2, [pc, #40]	@ (800fa80 <vPortSetupTimerInterrupt+0x40>)
 800fa56:	fba2 2303 	umull	r2, r3, r2, r3
 800fa5a:	099b      	lsrs	r3, r3, #6
 800fa5c:	4a09      	ldr	r2, [pc, #36]	@ (800fa84 <vPortSetupTimerInterrupt+0x44>)
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fa62:	4b04      	ldr	r3, [pc, #16]	@ (800fa74 <vPortSetupTimerInterrupt+0x34>)
 800fa64:	2207      	movs	r2, #7
 800fa66:	601a      	str	r2, [r3, #0]
}
 800fa68:	bf00      	nop
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	e000e010 	.word	0xe000e010
 800fa78:	e000e018 	.word	0xe000e018
 800fa7c:	20000048 	.word	0x20000048
 800fa80:	10624dd3 	.word	0x10624dd3
 800fa84:	e000e014 	.word	0xe000e014

0800fa88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fa88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fa98 <vPortEnableVFP+0x10>
 800fa8c:	6801      	ldr	r1, [r0, #0]
 800fa8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fa92:	6001      	str	r1, [r0, #0]
 800fa94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fa96:	bf00      	nop
 800fa98:	e000ed88 	.word	0xe000ed88

0800fa9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b085      	sub	sp, #20
 800faa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800faa2:	f3ef 8305 	mrs	r3, IPSR
 800faa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2b0f      	cmp	r3, #15
 800faac:	d917      	bls.n	800fade <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800faae:	4a1a      	ldr	r2, [pc, #104]	@ (800fb18 <vPortValidateInterruptPriority+0x7c>)
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	4413      	add	r3, r2
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fab8:	4b18      	ldr	r3, [pc, #96]	@ (800fb1c <vPortValidateInterruptPriority+0x80>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	7afa      	ldrb	r2, [r7, #11]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d20d      	bcs.n	800fade <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800fac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fac6:	b672      	cpsid	i
 800fac8:	f383 8811 	msr	BASEPRI, r3
 800facc:	f3bf 8f6f 	isb	sy
 800fad0:	f3bf 8f4f 	dsb	sy
 800fad4:	b662      	cpsie	i
 800fad6:	607b      	str	r3, [r7, #4]
}
 800fad8:	bf00      	nop
 800fada:	bf00      	nop
 800fadc:	e7fd      	b.n	800fada <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fade:	4b10      	ldr	r3, [pc, #64]	@ (800fb20 <vPortValidateInterruptPriority+0x84>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fae6:	4b0f      	ldr	r3, [pc, #60]	@ (800fb24 <vPortValidateInterruptPriority+0x88>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	429a      	cmp	r2, r3
 800faec:	d90d      	bls.n	800fb0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800faee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faf2:	b672      	cpsid	i
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	b662      	cpsie	i
 800fb02:	603b      	str	r3, [r7, #0]
}
 800fb04:	bf00      	nop
 800fb06:	bf00      	nop
 800fb08:	e7fd      	b.n	800fb06 <vPortValidateInterruptPriority+0x6a>
	}
 800fb0a:	bf00      	nop
 800fb0c:	3714      	adds	r7, #20
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	e000e3f0 	.word	0xe000e3f0
 800fb1c:	20000f64 	.word	0x20000f64
 800fb20:	e000ed0c 	.word	0xe000ed0c
 800fb24:	20000f68 	.word	0x20000f68

0800fb28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08a      	sub	sp, #40	@ 0x28
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb30:	2300      	movs	r3, #0
 800fb32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb34:	f7fe ff8e 	bl	800ea54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fb38:	4b5d      	ldr	r3, [pc, #372]	@ (800fcb0 <pvPortMalloc+0x188>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d101      	bne.n	800fb44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fb40:	f000 f920 	bl	800fd84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fb44:	4b5b      	ldr	r3, [pc, #364]	@ (800fcb4 <pvPortMalloc+0x18c>)
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	4013      	ands	r3, r2
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	f040 8094 	bne.w	800fc7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d020      	beq.n	800fb9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800fb58:	2208      	movs	r2, #8
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f003 0307 	and.w	r3, r3, #7
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d017      	beq.n	800fb9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f023 0307 	bic.w	r3, r3, #7
 800fb70:	3308      	adds	r3, #8
 800fb72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f003 0307 	and.w	r3, r3, #7
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00d      	beq.n	800fb9a <pvPortMalloc+0x72>
	__asm volatile
 800fb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb82:	b672      	cpsid	i
 800fb84:	f383 8811 	msr	BASEPRI, r3
 800fb88:	f3bf 8f6f 	isb	sy
 800fb8c:	f3bf 8f4f 	dsb	sy
 800fb90:	b662      	cpsie	i
 800fb92:	617b      	str	r3, [r7, #20]
}
 800fb94:	bf00      	nop
 800fb96:	bf00      	nop
 800fb98:	e7fd      	b.n	800fb96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d06c      	beq.n	800fc7a <pvPortMalloc+0x152>
 800fba0:	4b45      	ldr	r3, [pc, #276]	@ (800fcb8 <pvPortMalloc+0x190>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d867      	bhi.n	800fc7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fbaa:	4b44      	ldr	r3, [pc, #272]	@ (800fcbc <pvPortMalloc+0x194>)
 800fbac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fbae:	4b43      	ldr	r3, [pc, #268]	@ (800fcbc <pvPortMalloc+0x194>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbb4:	e004      	b.n	800fbc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d903      	bls.n	800fbd2 <pvPortMalloc+0xaa>
 800fbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d1f1      	bne.n	800fbb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fbd2:	4b37      	ldr	r3, [pc, #220]	@ (800fcb0 <pvPortMalloc+0x188>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d04e      	beq.n	800fc7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fbdc:	6a3b      	ldr	r3, [r7, #32]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2208      	movs	r2, #8
 800fbe2:	4413      	add	r3, r2
 800fbe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe8:	681a      	ldr	r2, [r3, #0]
 800fbea:	6a3b      	ldr	r3, [r7, #32]
 800fbec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf0:	685a      	ldr	r2, [r3, #4]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	1ad2      	subs	r2, r2, r3
 800fbf6:	2308      	movs	r3, #8
 800fbf8:	005b      	lsls	r3, r3, #1
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d922      	bls.n	800fc44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fbfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	4413      	add	r3, r2
 800fc04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	f003 0307 	and.w	r3, r3, #7
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d00d      	beq.n	800fc2c <pvPortMalloc+0x104>
	__asm volatile
 800fc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc14:	b672      	cpsid	i
 800fc16:	f383 8811 	msr	BASEPRI, r3
 800fc1a:	f3bf 8f6f 	isb	sy
 800fc1e:	f3bf 8f4f 	dsb	sy
 800fc22:	b662      	cpsie	i
 800fc24:	613b      	str	r3, [r7, #16]
}
 800fc26:	bf00      	nop
 800fc28:	bf00      	nop
 800fc2a:	e7fd      	b.n	800fc28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc2e:	685a      	ldr	r2, [r3, #4]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	1ad2      	subs	r2, r2, r3
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc3e:	69b8      	ldr	r0, [r7, #24]
 800fc40:	f000 f902 	bl	800fe48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc44:	4b1c      	ldr	r3, [pc, #112]	@ (800fcb8 <pvPortMalloc+0x190>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	4a1a      	ldr	r2, [pc, #104]	@ (800fcb8 <pvPortMalloc+0x190>)
 800fc50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fc52:	4b19      	ldr	r3, [pc, #100]	@ (800fcb8 <pvPortMalloc+0x190>)
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	4b1a      	ldr	r3, [pc, #104]	@ (800fcc0 <pvPortMalloc+0x198>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d203      	bcs.n	800fc66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fc5e:	4b16      	ldr	r3, [pc, #88]	@ (800fcb8 <pvPortMalloc+0x190>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4a17      	ldr	r2, [pc, #92]	@ (800fcc0 <pvPortMalloc+0x198>)
 800fc64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc68:	685a      	ldr	r2, [r3, #4]
 800fc6a:	4b12      	ldr	r3, [pc, #72]	@ (800fcb4 <pvPortMalloc+0x18c>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	431a      	orrs	r2, r3
 800fc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc76:	2200      	movs	r2, #0
 800fc78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fc7a:	f7fe fef9 	bl	800ea70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	f003 0307 	and.w	r3, r3, #7
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d00d      	beq.n	800fca4 <pvPortMalloc+0x17c>
	__asm volatile
 800fc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc8c:	b672      	cpsid	i
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	b662      	cpsie	i
 800fc9c:	60fb      	str	r3, [r7, #12]
}
 800fc9e:	bf00      	nop
 800fca0:	bf00      	nop
 800fca2:	e7fd      	b.n	800fca0 <pvPortMalloc+0x178>
	return pvReturn;
 800fca4:	69fb      	ldr	r3, [r7, #28]
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3728      	adds	r7, #40	@ 0x28
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	20004b74 	.word	0x20004b74
 800fcb4:	20004b80 	.word	0x20004b80
 800fcb8:	20004b78 	.word	0x20004b78
 800fcbc:	20004b6c 	.word	0x20004b6c
 800fcc0:	20004b7c 	.word	0x20004b7c

0800fcc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d04e      	beq.n	800fd74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fcd6:	2308      	movs	r3, #8
 800fcd8:	425b      	negs	r3, r3
 800fcda:	697a      	ldr	r2, [r7, #20]
 800fcdc:	4413      	add	r3, r2
 800fcde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	4b24      	ldr	r3, [pc, #144]	@ (800fd7c <vPortFree+0xb8>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4013      	ands	r3, r2
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d10d      	bne.n	800fd0e <vPortFree+0x4a>
	__asm volatile
 800fcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf6:	b672      	cpsid	i
 800fcf8:	f383 8811 	msr	BASEPRI, r3
 800fcfc:	f3bf 8f6f 	isb	sy
 800fd00:	f3bf 8f4f 	dsb	sy
 800fd04:	b662      	cpsie	i
 800fd06:	60fb      	str	r3, [r7, #12]
}
 800fd08:	bf00      	nop
 800fd0a:	bf00      	nop
 800fd0c:	e7fd      	b.n	800fd0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00d      	beq.n	800fd32 <vPortFree+0x6e>
	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1a:	b672      	cpsid	i
 800fd1c:	f383 8811 	msr	BASEPRI, r3
 800fd20:	f3bf 8f6f 	isb	sy
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	b662      	cpsie	i
 800fd2a:	60bb      	str	r3, [r7, #8]
}
 800fd2c:	bf00      	nop
 800fd2e:	bf00      	nop
 800fd30:	e7fd      	b.n	800fd2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	685a      	ldr	r2, [r3, #4]
 800fd36:	4b11      	ldr	r3, [pc, #68]	@ (800fd7c <vPortFree+0xb8>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	4013      	ands	r3, r2
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d019      	beq.n	800fd74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d115      	bne.n	800fd74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd48:	693b      	ldr	r3, [r7, #16]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd7c <vPortFree+0xb8>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	43db      	mvns	r3, r3
 800fd52:	401a      	ands	r2, r3
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd58:	f7fe fe7c 	bl	800ea54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	685a      	ldr	r2, [r3, #4]
 800fd60:	4b07      	ldr	r3, [pc, #28]	@ (800fd80 <vPortFree+0xbc>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4413      	add	r3, r2
 800fd66:	4a06      	ldr	r2, [pc, #24]	@ (800fd80 <vPortFree+0xbc>)
 800fd68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fd6a:	6938      	ldr	r0, [r7, #16]
 800fd6c:	f000 f86c 	bl	800fe48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fd70:	f7fe fe7e 	bl	800ea70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fd74:	bf00      	nop
 800fd76:	3718      	adds	r7, #24
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	20004b80 	.word	0x20004b80
 800fd80:	20004b78 	.word	0x20004b78

0800fd84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fd84:	b480      	push	{r7}
 800fd86:	b085      	sub	sp, #20
 800fd88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fd8a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fd8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fd90:	4b27      	ldr	r3, [pc, #156]	@ (800fe30 <prvHeapInit+0xac>)
 800fd92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f003 0307 	and.w	r3, r3, #7
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00c      	beq.n	800fdb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	3307      	adds	r3, #7
 800fda2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	f023 0307 	bic.w	r3, r3, #7
 800fdaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	4a1f      	ldr	r2, [pc, #124]	@ (800fe30 <prvHeapInit+0xac>)
 800fdb4:	4413      	add	r3, r2
 800fdb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdbc:	4a1d      	ldr	r2, [pc, #116]	@ (800fe34 <prvHeapInit+0xb0>)
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fdc2:	4b1c      	ldr	r3, [pc, #112]	@ (800fe34 <prvHeapInit+0xb0>)
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	4413      	add	r3, r2
 800fdce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fdd0:	2208      	movs	r2, #8
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	1a9b      	subs	r3, r3, r2
 800fdd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f023 0307 	bic.w	r3, r3, #7
 800fdde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	4a15      	ldr	r2, [pc, #84]	@ (800fe38 <prvHeapInit+0xb4>)
 800fde4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fde6:	4b14      	ldr	r3, [pc, #80]	@ (800fe38 <prvHeapInit+0xb4>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2200      	movs	r2, #0
 800fdec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fdee:	4b12      	ldr	r3, [pc, #72]	@ (800fe38 <prvHeapInit+0xb4>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	1ad2      	subs	r2, r2, r3
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe04:	4b0c      	ldr	r3, [pc, #48]	@ (800fe38 <prvHeapInit+0xb4>)
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	4a0a      	ldr	r2, [pc, #40]	@ (800fe3c <prvHeapInit+0xb8>)
 800fe12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	4a09      	ldr	r2, [pc, #36]	@ (800fe40 <prvHeapInit+0xbc>)
 800fe1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe1c:	4b09      	ldr	r3, [pc, #36]	@ (800fe44 <prvHeapInit+0xc0>)
 800fe1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800fe22:	601a      	str	r2, [r3, #0]
}
 800fe24:	bf00      	nop
 800fe26:	3714      	adds	r7, #20
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr
 800fe30:	20000f6c 	.word	0x20000f6c
 800fe34:	20004b6c 	.word	0x20004b6c
 800fe38:	20004b74 	.word	0x20004b74
 800fe3c:	20004b7c 	.word	0x20004b7c
 800fe40:	20004b78 	.word	0x20004b78
 800fe44:	20004b80 	.word	0x20004b80

0800fe48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe50:	4b28      	ldr	r3, [pc, #160]	@ (800fef4 <prvInsertBlockIntoFreeList+0xac>)
 800fe52:	60fb      	str	r3, [r7, #12]
 800fe54:	e002      	b.n	800fe5c <prvInsertBlockIntoFreeList+0x14>
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	60fb      	str	r3, [r7, #12]
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	687a      	ldr	r2, [r7, #4]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d8f7      	bhi.n	800fe56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	4413      	add	r3, r2
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d108      	bne.n	800fe8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	685a      	ldr	r2, [r3, #4]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	441a      	add	r2, r3
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	68ba      	ldr	r2, [r7, #8]
 800fe94:	441a      	add	r2, r3
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d118      	bne.n	800fed0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	4b15      	ldr	r3, [pc, #84]	@ (800fef8 <prvInsertBlockIntoFreeList+0xb0>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	429a      	cmp	r2, r3
 800fea8:	d00d      	beq.n	800fec6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	441a      	add	r2, r3
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	601a      	str	r2, [r3, #0]
 800fec4:	e008      	b.n	800fed8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800fec6:	4b0c      	ldr	r3, [pc, #48]	@ (800fef8 <prvInsertBlockIntoFreeList+0xb0>)
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	601a      	str	r2, [r3, #0]
 800fece:	e003      	b.n	800fed8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d002      	beq.n	800fee6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fee6:	bf00      	nop
 800fee8:	3714      	adds	r7, #20
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	20004b6c 	.word	0x20004b6c
 800fef8:	20004b74 	.word	0x20004b74

0800fefc <rand>:
 800fefc:	4b16      	ldr	r3, [pc, #88]	@ (800ff58 <rand+0x5c>)
 800fefe:	b510      	push	{r4, lr}
 800ff00:	681c      	ldr	r4, [r3, #0]
 800ff02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff04:	b9b3      	cbnz	r3, 800ff34 <rand+0x38>
 800ff06:	2018      	movs	r0, #24
 800ff08:	f000 faa4 	bl	8010454 <malloc>
 800ff0c:	4602      	mov	r2, r0
 800ff0e:	6320      	str	r0, [r4, #48]	@ 0x30
 800ff10:	b920      	cbnz	r0, 800ff1c <rand+0x20>
 800ff12:	4b12      	ldr	r3, [pc, #72]	@ (800ff5c <rand+0x60>)
 800ff14:	4812      	ldr	r0, [pc, #72]	@ (800ff60 <rand+0x64>)
 800ff16:	2152      	movs	r1, #82	@ 0x52
 800ff18:	f000 fa34 	bl	8010384 <__assert_func>
 800ff1c:	4911      	ldr	r1, [pc, #68]	@ (800ff64 <rand+0x68>)
 800ff1e:	4b12      	ldr	r3, [pc, #72]	@ (800ff68 <rand+0x6c>)
 800ff20:	e9c0 1300 	strd	r1, r3, [r0]
 800ff24:	4b11      	ldr	r3, [pc, #68]	@ (800ff6c <rand+0x70>)
 800ff26:	6083      	str	r3, [r0, #8]
 800ff28:	230b      	movs	r3, #11
 800ff2a:	8183      	strh	r3, [r0, #12]
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	2001      	movs	r0, #1
 800ff30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ff34:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ff36:	480e      	ldr	r0, [pc, #56]	@ (800ff70 <rand+0x74>)
 800ff38:	690b      	ldr	r3, [r1, #16]
 800ff3a:	694c      	ldr	r4, [r1, #20]
 800ff3c:	4a0d      	ldr	r2, [pc, #52]	@ (800ff74 <rand+0x78>)
 800ff3e:	4358      	muls	r0, r3
 800ff40:	fb02 0004 	mla	r0, r2, r4, r0
 800ff44:	fba3 3202 	umull	r3, r2, r3, r2
 800ff48:	3301      	adds	r3, #1
 800ff4a:	eb40 0002 	adc.w	r0, r0, r2
 800ff4e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ff52:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ff56:	bd10      	pop	{r4, pc}
 800ff58:	20000064 	.word	0x20000064
 800ff5c:	0801f7f8 	.word	0x0801f7f8
 800ff60:	0801f80f 	.word	0x0801f80f
 800ff64:	abcd330e 	.word	0xabcd330e
 800ff68:	e66d1234 	.word	0xe66d1234
 800ff6c:	0005deec 	.word	0x0005deec
 800ff70:	5851f42d 	.word	0x5851f42d
 800ff74:	4c957f2d 	.word	0x4c957f2d

0800ff78 <std>:
 800ff78:	2300      	movs	r3, #0
 800ff7a:	b510      	push	{r4, lr}
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ff82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff86:	6083      	str	r3, [r0, #8]
 800ff88:	8181      	strh	r1, [r0, #12]
 800ff8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ff8c:	81c2      	strh	r2, [r0, #14]
 800ff8e:	6183      	str	r3, [r0, #24]
 800ff90:	4619      	mov	r1, r3
 800ff92:	2208      	movs	r2, #8
 800ff94:	305c      	adds	r0, #92	@ 0x5c
 800ff96:	f000 f914 	bl	80101c2 <memset>
 800ff9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ffd0 <std+0x58>)
 800ff9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ff9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ffd4 <std+0x5c>)
 800ffa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ffa2:	4b0d      	ldr	r3, [pc, #52]	@ (800ffd8 <std+0x60>)
 800ffa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ffa6:	4b0d      	ldr	r3, [pc, #52]	@ (800ffdc <std+0x64>)
 800ffa8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ffaa:	4b0d      	ldr	r3, [pc, #52]	@ (800ffe0 <std+0x68>)
 800ffac:	6224      	str	r4, [r4, #32]
 800ffae:	429c      	cmp	r4, r3
 800ffb0:	d006      	beq.n	800ffc0 <std+0x48>
 800ffb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ffb6:	4294      	cmp	r4, r2
 800ffb8:	d002      	beq.n	800ffc0 <std+0x48>
 800ffba:	33d0      	adds	r3, #208	@ 0xd0
 800ffbc:	429c      	cmp	r4, r3
 800ffbe:	d105      	bne.n	800ffcc <std+0x54>
 800ffc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ffc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffc8:	f000 b9ca 	b.w	8010360 <__retarget_lock_init_recursive>
 800ffcc:	bd10      	pop	{r4, pc}
 800ffce:	bf00      	nop
 800ffd0:	0801013d 	.word	0x0801013d
 800ffd4:	0801015f 	.word	0x0801015f
 800ffd8:	08010197 	.word	0x08010197
 800ffdc:	080101bb 	.word	0x080101bb
 800ffe0:	20004b84 	.word	0x20004b84

0800ffe4 <stdio_exit_handler>:
 800ffe4:	4a02      	ldr	r2, [pc, #8]	@ (800fff0 <stdio_exit_handler+0xc>)
 800ffe6:	4903      	ldr	r1, [pc, #12]	@ (800fff4 <stdio_exit_handler+0x10>)
 800ffe8:	4803      	ldr	r0, [pc, #12]	@ (800fff8 <stdio_exit_handler+0x14>)
 800ffea:	f000 b869 	b.w	80100c0 <_fwalk_sglue>
 800ffee:	bf00      	nop
 800fff0:	20000058 	.word	0x20000058
 800fff4:	08010c95 	.word	0x08010c95
 800fff8:	20000068 	.word	0x20000068

0800fffc <cleanup_stdio>:
 800fffc:	6841      	ldr	r1, [r0, #4]
 800fffe:	4b0c      	ldr	r3, [pc, #48]	@ (8010030 <cleanup_stdio+0x34>)
 8010000:	4299      	cmp	r1, r3
 8010002:	b510      	push	{r4, lr}
 8010004:	4604      	mov	r4, r0
 8010006:	d001      	beq.n	801000c <cleanup_stdio+0x10>
 8010008:	f000 fe44 	bl	8010c94 <_fflush_r>
 801000c:	68a1      	ldr	r1, [r4, #8]
 801000e:	4b09      	ldr	r3, [pc, #36]	@ (8010034 <cleanup_stdio+0x38>)
 8010010:	4299      	cmp	r1, r3
 8010012:	d002      	beq.n	801001a <cleanup_stdio+0x1e>
 8010014:	4620      	mov	r0, r4
 8010016:	f000 fe3d 	bl	8010c94 <_fflush_r>
 801001a:	68e1      	ldr	r1, [r4, #12]
 801001c:	4b06      	ldr	r3, [pc, #24]	@ (8010038 <cleanup_stdio+0x3c>)
 801001e:	4299      	cmp	r1, r3
 8010020:	d004      	beq.n	801002c <cleanup_stdio+0x30>
 8010022:	4620      	mov	r0, r4
 8010024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010028:	f000 be34 	b.w	8010c94 <_fflush_r>
 801002c:	bd10      	pop	{r4, pc}
 801002e:	bf00      	nop
 8010030:	20004b84 	.word	0x20004b84
 8010034:	20004bec 	.word	0x20004bec
 8010038:	20004c54 	.word	0x20004c54

0801003c <global_stdio_init.part.0>:
 801003c:	b510      	push	{r4, lr}
 801003e:	4b0b      	ldr	r3, [pc, #44]	@ (801006c <global_stdio_init.part.0+0x30>)
 8010040:	4c0b      	ldr	r4, [pc, #44]	@ (8010070 <global_stdio_init.part.0+0x34>)
 8010042:	4a0c      	ldr	r2, [pc, #48]	@ (8010074 <global_stdio_init.part.0+0x38>)
 8010044:	601a      	str	r2, [r3, #0]
 8010046:	4620      	mov	r0, r4
 8010048:	2200      	movs	r2, #0
 801004a:	2104      	movs	r1, #4
 801004c:	f7ff ff94 	bl	800ff78 <std>
 8010050:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010054:	2201      	movs	r2, #1
 8010056:	2109      	movs	r1, #9
 8010058:	f7ff ff8e 	bl	800ff78 <std>
 801005c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010060:	2202      	movs	r2, #2
 8010062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010066:	2112      	movs	r1, #18
 8010068:	f7ff bf86 	b.w	800ff78 <std>
 801006c:	20004cbc 	.word	0x20004cbc
 8010070:	20004b84 	.word	0x20004b84
 8010074:	0800ffe5 	.word	0x0800ffe5

08010078 <__sfp_lock_acquire>:
 8010078:	4801      	ldr	r0, [pc, #4]	@ (8010080 <__sfp_lock_acquire+0x8>)
 801007a:	f000 b972 	b.w	8010362 <__retarget_lock_acquire_recursive>
 801007e:	bf00      	nop
 8010080:	20004cc5 	.word	0x20004cc5

08010084 <__sfp_lock_release>:
 8010084:	4801      	ldr	r0, [pc, #4]	@ (801008c <__sfp_lock_release+0x8>)
 8010086:	f000 b96d 	b.w	8010364 <__retarget_lock_release_recursive>
 801008a:	bf00      	nop
 801008c:	20004cc5 	.word	0x20004cc5

08010090 <__sinit>:
 8010090:	b510      	push	{r4, lr}
 8010092:	4604      	mov	r4, r0
 8010094:	f7ff fff0 	bl	8010078 <__sfp_lock_acquire>
 8010098:	6a23      	ldr	r3, [r4, #32]
 801009a:	b11b      	cbz	r3, 80100a4 <__sinit+0x14>
 801009c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100a0:	f7ff bff0 	b.w	8010084 <__sfp_lock_release>
 80100a4:	4b04      	ldr	r3, [pc, #16]	@ (80100b8 <__sinit+0x28>)
 80100a6:	6223      	str	r3, [r4, #32]
 80100a8:	4b04      	ldr	r3, [pc, #16]	@ (80100bc <__sinit+0x2c>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d1f5      	bne.n	801009c <__sinit+0xc>
 80100b0:	f7ff ffc4 	bl	801003c <global_stdio_init.part.0>
 80100b4:	e7f2      	b.n	801009c <__sinit+0xc>
 80100b6:	bf00      	nop
 80100b8:	0800fffd 	.word	0x0800fffd
 80100bc:	20004cbc 	.word	0x20004cbc

080100c0 <_fwalk_sglue>:
 80100c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100c4:	4607      	mov	r7, r0
 80100c6:	4688      	mov	r8, r1
 80100c8:	4614      	mov	r4, r2
 80100ca:	2600      	movs	r6, #0
 80100cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80100d0:	f1b9 0901 	subs.w	r9, r9, #1
 80100d4:	d505      	bpl.n	80100e2 <_fwalk_sglue+0x22>
 80100d6:	6824      	ldr	r4, [r4, #0]
 80100d8:	2c00      	cmp	r4, #0
 80100da:	d1f7      	bne.n	80100cc <_fwalk_sglue+0xc>
 80100dc:	4630      	mov	r0, r6
 80100de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100e2:	89ab      	ldrh	r3, [r5, #12]
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d907      	bls.n	80100f8 <_fwalk_sglue+0x38>
 80100e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80100ec:	3301      	adds	r3, #1
 80100ee:	d003      	beq.n	80100f8 <_fwalk_sglue+0x38>
 80100f0:	4629      	mov	r1, r5
 80100f2:	4638      	mov	r0, r7
 80100f4:	47c0      	blx	r8
 80100f6:	4306      	orrs	r6, r0
 80100f8:	3568      	adds	r5, #104	@ 0x68
 80100fa:	e7e9      	b.n	80100d0 <_fwalk_sglue+0x10>

080100fc <siprintf>:
 80100fc:	b40e      	push	{r1, r2, r3}
 80100fe:	b500      	push	{lr}
 8010100:	b09c      	sub	sp, #112	@ 0x70
 8010102:	ab1d      	add	r3, sp, #116	@ 0x74
 8010104:	9002      	str	r0, [sp, #8]
 8010106:	9006      	str	r0, [sp, #24]
 8010108:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801010c:	4809      	ldr	r0, [pc, #36]	@ (8010134 <siprintf+0x38>)
 801010e:	9107      	str	r1, [sp, #28]
 8010110:	9104      	str	r1, [sp, #16]
 8010112:	4909      	ldr	r1, [pc, #36]	@ (8010138 <siprintf+0x3c>)
 8010114:	f853 2b04 	ldr.w	r2, [r3], #4
 8010118:	9105      	str	r1, [sp, #20]
 801011a:	6800      	ldr	r0, [r0, #0]
 801011c:	9301      	str	r3, [sp, #4]
 801011e:	a902      	add	r1, sp, #8
 8010120:	f000 faaa 	bl	8010678 <_svfiprintf_r>
 8010124:	9b02      	ldr	r3, [sp, #8]
 8010126:	2200      	movs	r2, #0
 8010128:	701a      	strb	r2, [r3, #0]
 801012a:	b01c      	add	sp, #112	@ 0x70
 801012c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010130:	b003      	add	sp, #12
 8010132:	4770      	bx	lr
 8010134:	20000064 	.word	0x20000064
 8010138:	ffff0208 	.word	0xffff0208

0801013c <__sread>:
 801013c:	b510      	push	{r4, lr}
 801013e:	460c      	mov	r4, r1
 8010140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010144:	f000 f8be 	bl	80102c4 <_read_r>
 8010148:	2800      	cmp	r0, #0
 801014a:	bfab      	itete	ge
 801014c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801014e:	89a3      	ldrhlt	r3, [r4, #12]
 8010150:	181b      	addge	r3, r3, r0
 8010152:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010156:	bfac      	ite	ge
 8010158:	6563      	strge	r3, [r4, #84]	@ 0x54
 801015a:	81a3      	strhlt	r3, [r4, #12]
 801015c:	bd10      	pop	{r4, pc}

0801015e <__swrite>:
 801015e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010162:	461f      	mov	r7, r3
 8010164:	898b      	ldrh	r3, [r1, #12]
 8010166:	05db      	lsls	r3, r3, #23
 8010168:	4605      	mov	r5, r0
 801016a:	460c      	mov	r4, r1
 801016c:	4616      	mov	r6, r2
 801016e:	d505      	bpl.n	801017c <__swrite+0x1e>
 8010170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010174:	2302      	movs	r3, #2
 8010176:	2200      	movs	r2, #0
 8010178:	f000 f892 	bl	80102a0 <_lseek_r>
 801017c:	89a3      	ldrh	r3, [r4, #12]
 801017e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010186:	81a3      	strh	r3, [r4, #12]
 8010188:	4632      	mov	r2, r6
 801018a:	463b      	mov	r3, r7
 801018c:	4628      	mov	r0, r5
 801018e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010192:	f000 b8a9 	b.w	80102e8 <_write_r>

08010196 <__sseek>:
 8010196:	b510      	push	{r4, lr}
 8010198:	460c      	mov	r4, r1
 801019a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801019e:	f000 f87f 	bl	80102a0 <_lseek_r>
 80101a2:	1c43      	adds	r3, r0, #1
 80101a4:	89a3      	ldrh	r3, [r4, #12]
 80101a6:	bf15      	itete	ne
 80101a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80101aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80101ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80101b2:	81a3      	strheq	r3, [r4, #12]
 80101b4:	bf18      	it	ne
 80101b6:	81a3      	strhne	r3, [r4, #12]
 80101b8:	bd10      	pop	{r4, pc}

080101ba <__sclose>:
 80101ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101be:	f000 b809 	b.w	80101d4 <_close_r>

080101c2 <memset>:
 80101c2:	4402      	add	r2, r0
 80101c4:	4603      	mov	r3, r0
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d100      	bne.n	80101cc <memset+0xa>
 80101ca:	4770      	bx	lr
 80101cc:	f803 1b01 	strb.w	r1, [r3], #1
 80101d0:	e7f9      	b.n	80101c6 <memset+0x4>
	...

080101d4 <_close_r>:
 80101d4:	b538      	push	{r3, r4, r5, lr}
 80101d6:	4d06      	ldr	r5, [pc, #24]	@ (80101f0 <_close_r+0x1c>)
 80101d8:	2300      	movs	r3, #0
 80101da:	4604      	mov	r4, r0
 80101dc:	4608      	mov	r0, r1
 80101de:	602b      	str	r3, [r5, #0]
 80101e0:	f7f5 f992 	bl	8005508 <_close>
 80101e4:	1c43      	adds	r3, r0, #1
 80101e6:	d102      	bne.n	80101ee <_close_r+0x1a>
 80101e8:	682b      	ldr	r3, [r5, #0]
 80101ea:	b103      	cbz	r3, 80101ee <_close_r+0x1a>
 80101ec:	6023      	str	r3, [r4, #0]
 80101ee:	bd38      	pop	{r3, r4, r5, pc}
 80101f0:	20004cc0 	.word	0x20004cc0

080101f4 <_reclaim_reent>:
 80101f4:	4b29      	ldr	r3, [pc, #164]	@ (801029c <_reclaim_reent+0xa8>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4283      	cmp	r3, r0
 80101fa:	b570      	push	{r4, r5, r6, lr}
 80101fc:	4604      	mov	r4, r0
 80101fe:	d04b      	beq.n	8010298 <_reclaim_reent+0xa4>
 8010200:	69c3      	ldr	r3, [r0, #28]
 8010202:	b1ab      	cbz	r3, 8010230 <_reclaim_reent+0x3c>
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	b16b      	cbz	r3, 8010224 <_reclaim_reent+0x30>
 8010208:	2500      	movs	r5, #0
 801020a:	69e3      	ldr	r3, [r4, #28]
 801020c:	68db      	ldr	r3, [r3, #12]
 801020e:	5959      	ldr	r1, [r3, r5]
 8010210:	2900      	cmp	r1, #0
 8010212:	d13b      	bne.n	801028c <_reclaim_reent+0x98>
 8010214:	3504      	adds	r5, #4
 8010216:	2d80      	cmp	r5, #128	@ 0x80
 8010218:	d1f7      	bne.n	801020a <_reclaim_reent+0x16>
 801021a:	69e3      	ldr	r3, [r4, #28]
 801021c:	4620      	mov	r0, r4
 801021e:	68d9      	ldr	r1, [r3, #12]
 8010220:	f000 f8ce 	bl	80103c0 <_free_r>
 8010224:	69e3      	ldr	r3, [r4, #28]
 8010226:	6819      	ldr	r1, [r3, #0]
 8010228:	b111      	cbz	r1, 8010230 <_reclaim_reent+0x3c>
 801022a:	4620      	mov	r0, r4
 801022c:	f000 f8c8 	bl	80103c0 <_free_r>
 8010230:	6961      	ldr	r1, [r4, #20]
 8010232:	b111      	cbz	r1, 801023a <_reclaim_reent+0x46>
 8010234:	4620      	mov	r0, r4
 8010236:	f000 f8c3 	bl	80103c0 <_free_r>
 801023a:	69e1      	ldr	r1, [r4, #28]
 801023c:	b111      	cbz	r1, 8010244 <_reclaim_reent+0x50>
 801023e:	4620      	mov	r0, r4
 8010240:	f000 f8be 	bl	80103c0 <_free_r>
 8010244:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010246:	b111      	cbz	r1, 801024e <_reclaim_reent+0x5a>
 8010248:	4620      	mov	r0, r4
 801024a:	f000 f8b9 	bl	80103c0 <_free_r>
 801024e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010250:	b111      	cbz	r1, 8010258 <_reclaim_reent+0x64>
 8010252:	4620      	mov	r0, r4
 8010254:	f000 f8b4 	bl	80103c0 <_free_r>
 8010258:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801025a:	b111      	cbz	r1, 8010262 <_reclaim_reent+0x6e>
 801025c:	4620      	mov	r0, r4
 801025e:	f000 f8af 	bl	80103c0 <_free_r>
 8010262:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8010264:	b111      	cbz	r1, 801026c <_reclaim_reent+0x78>
 8010266:	4620      	mov	r0, r4
 8010268:	f000 f8aa 	bl	80103c0 <_free_r>
 801026c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801026e:	b111      	cbz	r1, 8010276 <_reclaim_reent+0x82>
 8010270:	4620      	mov	r0, r4
 8010272:	f000 f8a5 	bl	80103c0 <_free_r>
 8010276:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8010278:	b111      	cbz	r1, 8010280 <_reclaim_reent+0x8c>
 801027a:	4620      	mov	r0, r4
 801027c:	f000 f8a0 	bl	80103c0 <_free_r>
 8010280:	6a23      	ldr	r3, [r4, #32]
 8010282:	b14b      	cbz	r3, 8010298 <_reclaim_reent+0xa4>
 8010284:	4620      	mov	r0, r4
 8010286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801028a:	4718      	bx	r3
 801028c:	680e      	ldr	r6, [r1, #0]
 801028e:	4620      	mov	r0, r4
 8010290:	f000 f896 	bl	80103c0 <_free_r>
 8010294:	4631      	mov	r1, r6
 8010296:	e7bb      	b.n	8010210 <_reclaim_reent+0x1c>
 8010298:	bd70      	pop	{r4, r5, r6, pc}
 801029a:	bf00      	nop
 801029c:	20000064 	.word	0x20000064

080102a0 <_lseek_r>:
 80102a0:	b538      	push	{r3, r4, r5, lr}
 80102a2:	4d07      	ldr	r5, [pc, #28]	@ (80102c0 <_lseek_r+0x20>)
 80102a4:	4604      	mov	r4, r0
 80102a6:	4608      	mov	r0, r1
 80102a8:	4611      	mov	r1, r2
 80102aa:	2200      	movs	r2, #0
 80102ac:	602a      	str	r2, [r5, #0]
 80102ae:	461a      	mov	r2, r3
 80102b0:	f7f5 f951 	bl	8005556 <_lseek>
 80102b4:	1c43      	adds	r3, r0, #1
 80102b6:	d102      	bne.n	80102be <_lseek_r+0x1e>
 80102b8:	682b      	ldr	r3, [r5, #0]
 80102ba:	b103      	cbz	r3, 80102be <_lseek_r+0x1e>
 80102bc:	6023      	str	r3, [r4, #0]
 80102be:	bd38      	pop	{r3, r4, r5, pc}
 80102c0:	20004cc0 	.word	0x20004cc0

080102c4 <_read_r>:
 80102c4:	b538      	push	{r3, r4, r5, lr}
 80102c6:	4d07      	ldr	r5, [pc, #28]	@ (80102e4 <_read_r+0x20>)
 80102c8:	4604      	mov	r4, r0
 80102ca:	4608      	mov	r0, r1
 80102cc:	4611      	mov	r1, r2
 80102ce:	2200      	movs	r2, #0
 80102d0:	602a      	str	r2, [r5, #0]
 80102d2:	461a      	mov	r2, r3
 80102d4:	f7f5 f8df 	bl	8005496 <_read>
 80102d8:	1c43      	adds	r3, r0, #1
 80102da:	d102      	bne.n	80102e2 <_read_r+0x1e>
 80102dc:	682b      	ldr	r3, [r5, #0]
 80102de:	b103      	cbz	r3, 80102e2 <_read_r+0x1e>
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	bd38      	pop	{r3, r4, r5, pc}
 80102e4:	20004cc0 	.word	0x20004cc0

080102e8 <_write_r>:
 80102e8:	b538      	push	{r3, r4, r5, lr}
 80102ea:	4d07      	ldr	r5, [pc, #28]	@ (8010308 <_write_r+0x20>)
 80102ec:	4604      	mov	r4, r0
 80102ee:	4608      	mov	r0, r1
 80102f0:	4611      	mov	r1, r2
 80102f2:	2200      	movs	r2, #0
 80102f4:	602a      	str	r2, [r5, #0]
 80102f6:	461a      	mov	r2, r3
 80102f8:	f7f5 f8ea 	bl	80054d0 <_write>
 80102fc:	1c43      	adds	r3, r0, #1
 80102fe:	d102      	bne.n	8010306 <_write_r+0x1e>
 8010300:	682b      	ldr	r3, [r5, #0]
 8010302:	b103      	cbz	r3, 8010306 <_write_r+0x1e>
 8010304:	6023      	str	r3, [r4, #0]
 8010306:	bd38      	pop	{r3, r4, r5, pc}
 8010308:	20004cc0 	.word	0x20004cc0

0801030c <__errno>:
 801030c:	4b01      	ldr	r3, [pc, #4]	@ (8010314 <__errno+0x8>)
 801030e:	6818      	ldr	r0, [r3, #0]
 8010310:	4770      	bx	lr
 8010312:	bf00      	nop
 8010314:	20000064 	.word	0x20000064

08010318 <__libc_init_array>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	4d0d      	ldr	r5, [pc, #52]	@ (8010350 <__libc_init_array+0x38>)
 801031c:	4c0d      	ldr	r4, [pc, #52]	@ (8010354 <__libc_init_array+0x3c>)
 801031e:	1b64      	subs	r4, r4, r5
 8010320:	10a4      	asrs	r4, r4, #2
 8010322:	2600      	movs	r6, #0
 8010324:	42a6      	cmp	r6, r4
 8010326:	d109      	bne.n	801033c <__libc_init_array+0x24>
 8010328:	4d0b      	ldr	r5, [pc, #44]	@ (8010358 <__libc_init_array+0x40>)
 801032a:	4c0c      	ldr	r4, [pc, #48]	@ (801035c <__libc_init_array+0x44>)
 801032c:	f000 fff0 	bl	8011310 <_init>
 8010330:	1b64      	subs	r4, r4, r5
 8010332:	10a4      	asrs	r4, r4, #2
 8010334:	2600      	movs	r6, #0
 8010336:	42a6      	cmp	r6, r4
 8010338:	d105      	bne.n	8010346 <__libc_init_array+0x2e>
 801033a:	bd70      	pop	{r4, r5, r6, pc}
 801033c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010340:	4798      	blx	r3
 8010342:	3601      	adds	r6, #1
 8010344:	e7ee      	b.n	8010324 <__libc_init_array+0xc>
 8010346:	f855 3b04 	ldr.w	r3, [r5], #4
 801034a:	4798      	blx	r3
 801034c:	3601      	adds	r6, #1
 801034e:	e7f2      	b.n	8010336 <__libc_init_array+0x1e>
 8010350:	0801f8e0 	.word	0x0801f8e0
 8010354:	0801f8e0 	.word	0x0801f8e0
 8010358:	0801f8e0 	.word	0x0801f8e0
 801035c:	0801f8e4 	.word	0x0801f8e4

08010360 <__retarget_lock_init_recursive>:
 8010360:	4770      	bx	lr

08010362 <__retarget_lock_acquire_recursive>:
 8010362:	4770      	bx	lr

08010364 <__retarget_lock_release_recursive>:
 8010364:	4770      	bx	lr

08010366 <memcpy>:
 8010366:	440a      	add	r2, r1
 8010368:	4291      	cmp	r1, r2
 801036a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801036e:	d100      	bne.n	8010372 <memcpy+0xc>
 8010370:	4770      	bx	lr
 8010372:	b510      	push	{r4, lr}
 8010374:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010378:	f803 4f01 	strb.w	r4, [r3, #1]!
 801037c:	4291      	cmp	r1, r2
 801037e:	d1f9      	bne.n	8010374 <memcpy+0xe>
 8010380:	bd10      	pop	{r4, pc}
	...

08010384 <__assert_func>:
 8010384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010386:	4614      	mov	r4, r2
 8010388:	461a      	mov	r2, r3
 801038a:	4b09      	ldr	r3, [pc, #36]	@ (80103b0 <__assert_func+0x2c>)
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	4605      	mov	r5, r0
 8010390:	68d8      	ldr	r0, [r3, #12]
 8010392:	b954      	cbnz	r4, 80103aa <__assert_func+0x26>
 8010394:	4b07      	ldr	r3, [pc, #28]	@ (80103b4 <__assert_func+0x30>)
 8010396:	461c      	mov	r4, r3
 8010398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801039c:	9100      	str	r1, [sp, #0]
 801039e:	462b      	mov	r3, r5
 80103a0:	4905      	ldr	r1, [pc, #20]	@ (80103b8 <__assert_func+0x34>)
 80103a2:	f000 fc9f 	bl	8010ce4 <fiprintf>
 80103a6:	f000 fcd9 	bl	8010d5c <abort>
 80103aa:	4b04      	ldr	r3, [pc, #16]	@ (80103bc <__assert_func+0x38>)
 80103ac:	e7f4      	b.n	8010398 <__assert_func+0x14>
 80103ae:	bf00      	nop
 80103b0:	20000064 	.word	0x20000064
 80103b4:	0801f8a2 	.word	0x0801f8a2
 80103b8:	0801f874 	.word	0x0801f874
 80103bc:	0801f867 	.word	0x0801f867

080103c0 <_free_r>:
 80103c0:	b538      	push	{r3, r4, r5, lr}
 80103c2:	4605      	mov	r5, r0
 80103c4:	2900      	cmp	r1, #0
 80103c6:	d041      	beq.n	801044c <_free_r+0x8c>
 80103c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103cc:	1f0c      	subs	r4, r1, #4
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	bfb8      	it	lt
 80103d2:	18e4      	addlt	r4, r4, r3
 80103d4:	f000 f8e8 	bl	80105a8 <__malloc_lock>
 80103d8:	4a1d      	ldr	r2, [pc, #116]	@ (8010450 <_free_r+0x90>)
 80103da:	6813      	ldr	r3, [r2, #0]
 80103dc:	b933      	cbnz	r3, 80103ec <_free_r+0x2c>
 80103de:	6063      	str	r3, [r4, #4]
 80103e0:	6014      	str	r4, [r2, #0]
 80103e2:	4628      	mov	r0, r5
 80103e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103e8:	f000 b8e4 	b.w	80105b4 <__malloc_unlock>
 80103ec:	42a3      	cmp	r3, r4
 80103ee:	d908      	bls.n	8010402 <_free_r+0x42>
 80103f0:	6820      	ldr	r0, [r4, #0]
 80103f2:	1821      	adds	r1, r4, r0
 80103f4:	428b      	cmp	r3, r1
 80103f6:	bf01      	itttt	eq
 80103f8:	6819      	ldreq	r1, [r3, #0]
 80103fa:	685b      	ldreq	r3, [r3, #4]
 80103fc:	1809      	addeq	r1, r1, r0
 80103fe:	6021      	streq	r1, [r4, #0]
 8010400:	e7ed      	b.n	80103de <_free_r+0x1e>
 8010402:	461a      	mov	r2, r3
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	b10b      	cbz	r3, 801040c <_free_r+0x4c>
 8010408:	42a3      	cmp	r3, r4
 801040a:	d9fa      	bls.n	8010402 <_free_r+0x42>
 801040c:	6811      	ldr	r1, [r2, #0]
 801040e:	1850      	adds	r0, r2, r1
 8010410:	42a0      	cmp	r0, r4
 8010412:	d10b      	bne.n	801042c <_free_r+0x6c>
 8010414:	6820      	ldr	r0, [r4, #0]
 8010416:	4401      	add	r1, r0
 8010418:	1850      	adds	r0, r2, r1
 801041a:	4283      	cmp	r3, r0
 801041c:	6011      	str	r1, [r2, #0]
 801041e:	d1e0      	bne.n	80103e2 <_free_r+0x22>
 8010420:	6818      	ldr	r0, [r3, #0]
 8010422:	685b      	ldr	r3, [r3, #4]
 8010424:	6053      	str	r3, [r2, #4]
 8010426:	4408      	add	r0, r1
 8010428:	6010      	str	r0, [r2, #0]
 801042a:	e7da      	b.n	80103e2 <_free_r+0x22>
 801042c:	d902      	bls.n	8010434 <_free_r+0x74>
 801042e:	230c      	movs	r3, #12
 8010430:	602b      	str	r3, [r5, #0]
 8010432:	e7d6      	b.n	80103e2 <_free_r+0x22>
 8010434:	6820      	ldr	r0, [r4, #0]
 8010436:	1821      	adds	r1, r4, r0
 8010438:	428b      	cmp	r3, r1
 801043a:	bf04      	itt	eq
 801043c:	6819      	ldreq	r1, [r3, #0]
 801043e:	685b      	ldreq	r3, [r3, #4]
 8010440:	6063      	str	r3, [r4, #4]
 8010442:	bf04      	itt	eq
 8010444:	1809      	addeq	r1, r1, r0
 8010446:	6021      	streq	r1, [r4, #0]
 8010448:	6054      	str	r4, [r2, #4]
 801044a:	e7ca      	b.n	80103e2 <_free_r+0x22>
 801044c:	bd38      	pop	{r3, r4, r5, pc}
 801044e:	bf00      	nop
 8010450:	20004ccc 	.word	0x20004ccc

08010454 <malloc>:
 8010454:	4b02      	ldr	r3, [pc, #8]	@ (8010460 <malloc+0xc>)
 8010456:	4601      	mov	r1, r0
 8010458:	6818      	ldr	r0, [r3, #0]
 801045a:	f000 b825 	b.w	80104a8 <_malloc_r>
 801045e:	bf00      	nop
 8010460:	20000064 	.word	0x20000064

08010464 <sbrk_aligned>:
 8010464:	b570      	push	{r4, r5, r6, lr}
 8010466:	4e0f      	ldr	r6, [pc, #60]	@ (80104a4 <sbrk_aligned+0x40>)
 8010468:	460c      	mov	r4, r1
 801046a:	6831      	ldr	r1, [r6, #0]
 801046c:	4605      	mov	r5, r0
 801046e:	b911      	cbnz	r1, 8010476 <sbrk_aligned+0x12>
 8010470:	f000 fc64 	bl	8010d3c <_sbrk_r>
 8010474:	6030      	str	r0, [r6, #0]
 8010476:	4621      	mov	r1, r4
 8010478:	4628      	mov	r0, r5
 801047a:	f000 fc5f 	bl	8010d3c <_sbrk_r>
 801047e:	1c43      	adds	r3, r0, #1
 8010480:	d103      	bne.n	801048a <sbrk_aligned+0x26>
 8010482:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010486:	4620      	mov	r0, r4
 8010488:	bd70      	pop	{r4, r5, r6, pc}
 801048a:	1cc4      	adds	r4, r0, #3
 801048c:	f024 0403 	bic.w	r4, r4, #3
 8010490:	42a0      	cmp	r0, r4
 8010492:	d0f8      	beq.n	8010486 <sbrk_aligned+0x22>
 8010494:	1a21      	subs	r1, r4, r0
 8010496:	4628      	mov	r0, r5
 8010498:	f000 fc50 	bl	8010d3c <_sbrk_r>
 801049c:	3001      	adds	r0, #1
 801049e:	d1f2      	bne.n	8010486 <sbrk_aligned+0x22>
 80104a0:	e7ef      	b.n	8010482 <sbrk_aligned+0x1e>
 80104a2:	bf00      	nop
 80104a4:	20004cc8 	.word	0x20004cc8

080104a8 <_malloc_r>:
 80104a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104ac:	1ccd      	adds	r5, r1, #3
 80104ae:	f025 0503 	bic.w	r5, r5, #3
 80104b2:	3508      	adds	r5, #8
 80104b4:	2d0c      	cmp	r5, #12
 80104b6:	bf38      	it	cc
 80104b8:	250c      	movcc	r5, #12
 80104ba:	2d00      	cmp	r5, #0
 80104bc:	4606      	mov	r6, r0
 80104be:	db01      	blt.n	80104c4 <_malloc_r+0x1c>
 80104c0:	42a9      	cmp	r1, r5
 80104c2:	d904      	bls.n	80104ce <_malloc_r+0x26>
 80104c4:	230c      	movs	r3, #12
 80104c6:	6033      	str	r3, [r6, #0]
 80104c8:	2000      	movs	r0, #0
 80104ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80105a4 <_malloc_r+0xfc>
 80104d2:	f000 f869 	bl	80105a8 <__malloc_lock>
 80104d6:	f8d8 3000 	ldr.w	r3, [r8]
 80104da:	461c      	mov	r4, r3
 80104dc:	bb44      	cbnz	r4, 8010530 <_malloc_r+0x88>
 80104de:	4629      	mov	r1, r5
 80104e0:	4630      	mov	r0, r6
 80104e2:	f7ff ffbf 	bl	8010464 <sbrk_aligned>
 80104e6:	1c43      	adds	r3, r0, #1
 80104e8:	4604      	mov	r4, r0
 80104ea:	d158      	bne.n	801059e <_malloc_r+0xf6>
 80104ec:	f8d8 4000 	ldr.w	r4, [r8]
 80104f0:	4627      	mov	r7, r4
 80104f2:	2f00      	cmp	r7, #0
 80104f4:	d143      	bne.n	801057e <_malloc_r+0xd6>
 80104f6:	2c00      	cmp	r4, #0
 80104f8:	d04b      	beq.n	8010592 <_malloc_r+0xea>
 80104fa:	6823      	ldr	r3, [r4, #0]
 80104fc:	4639      	mov	r1, r7
 80104fe:	4630      	mov	r0, r6
 8010500:	eb04 0903 	add.w	r9, r4, r3
 8010504:	f000 fc1a 	bl	8010d3c <_sbrk_r>
 8010508:	4581      	cmp	r9, r0
 801050a:	d142      	bne.n	8010592 <_malloc_r+0xea>
 801050c:	6821      	ldr	r1, [r4, #0]
 801050e:	1a6d      	subs	r5, r5, r1
 8010510:	4629      	mov	r1, r5
 8010512:	4630      	mov	r0, r6
 8010514:	f7ff ffa6 	bl	8010464 <sbrk_aligned>
 8010518:	3001      	adds	r0, #1
 801051a:	d03a      	beq.n	8010592 <_malloc_r+0xea>
 801051c:	6823      	ldr	r3, [r4, #0]
 801051e:	442b      	add	r3, r5
 8010520:	6023      	str	r3, [r4, #0]
 8010522:	f8d8 3000 	ldr.w	r3, [r8]
 8010526:	685a      	ldr	r2, [r3, #4]
 8010528:	bb62      	cbnz	r2, 8010584 <_malloc_r+0xdc>
 801052a:	f8c8 7000 	str.w	r7, [r8]
 801052e:	e00f      	b.n	8010550 <_malloc_r+0xa8>
 8010530:	6822      	ldr	r2, [r4, #0]
 8010532:	1b52      	subs	r2, r2, r5
 8010534:	d420      	bmi.n	8010578 <_malloc_r+0xd0>
 8010536:	2a0b      	cmp	r2, #11
 8010538:	d917      	bls.n	801056a <_malloc_r+0xc2>
 801053a:	1961      	adds	r1, r4, r5
 801053c:	42a3      	cmp	r3, r4
 801053e:	6025      	str	r5, [r4, #0]
 8010540:	bf18      	it	ne
 8010542:	6059      	strne	r1, [r3, #4]
 8010544:	6863      	ldr	r3, [r4, #4]
 8010546:	bf08      	it	eq
 8010548:	f8c8 1000 	streq.w	r1, [r8]
 801054c:	5162      	str	r2, [r4, r5]
 801054e:	604b      	str	r3, [r1, #4]
 8010550:	4630      	mov	r0, r6
 8010552:	f000 f82f 	bl	80105b4 <__malloc_unlock>
 8010556:	f104 000b 	add.w	r0, r4, #11
 801055a:	1d23      	adds	r3, r4, #4
 801055c:	f020 0007 	bic.w	r0, r0, #7
 8010560:	1ac2      	subs	r2, r0, r3
 8010562:	bf1c      	itt	ne
 8010564:	1a1b      	subne	r3, r3, r0
 8010566:	50a3      	strne	r3, [r4, r2]
 8010568:	e7af      	b.n	80104ca <_malloc_r+0x22>
 801056a:	6862      	ldr	r2, [r4, #4]
 801056c:	42a3      	cmp	r3, r4
 801056e:	bf0c      	ite	eq
 8010570:	f8c8 2000 	streq.w	r2, [r8]
 8010574:	605a      	strne	r2, [r3, #4]
 8010576:	e7eb      	b.n	8010550 <_malloc_r+0xa8>
 8010578:	4623      	mov	r3, r4
 801057a:	6864      	ldr	r4, [r4, #4]
 801057c:	e7ae      	b.n	80104dc <_malloc_r+0x34>
 801057e:	463c      	mov	r4, r7
 8010580:	687f      	ldr	r7, [r7, #4]
 8010582:	e7b6      	b.n	80104f2 <_malloc_r+0x4a>
 8010584:	461a      	mov	r2, r3
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	42a3      	cmp	r3, r4
 801058a:	d1fb      	bne.n	8010584 <_malloc_r+0xdc>
 801058c:	2300      	movs	r3, #0
 801058e:	6053      	str	r3, [r2, #4]
 8010590:	e7de      	b.n	8010550 <_malloc_r+0xa8>
 8010592:	230c      	movs	r3, #12
 8010594:	6033      	str	r3, [r6, #0]
 8010596:	4630      	mov	r0, r6
 8010598:	f000 f80c 	bl	80105b4 <__malloc_unlock>
 801059c:	e794      	b.n	80104c8 <_malloc_r+0x20>
 801059e:	6005      	str	r5, [r0, #0]
 80105a0:	e7d6      	b.n	8010550 <_malloc_r+0xa8>
 80105a2:	bf00      	nop
 80105a4:	20004ccc 	.word	0x20004ccc

080105a8 <__malloc_lock>:
 80105a8:	4801      	ldr	r0, [pc, #4]	@ (80105b0 <__malloc_lock+0x8>)
 80105aa:	f7ff beda 	b.w	8010362 <__retarget_lock_acquire_recursive>
 80105ae:	bf00      	nop
 80105b0:	20004cc4 	.word	0x20004cc4

080105b4 <__malloc_unlock>:
 80105b4:	4801      	ldr	r0, [pc, #4]	@ (80105bc <__malloc_unlock+0x8>)
 80105b6:	f7ff bed5 	b.w	8010364 <__retarget_lock_release_recursive>
 80105ba:	bf00      	nop
 80105bc:	20004cc4 	.word	0x20004cc4

080105c0 <__ssputs_r>:
 80105c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105c4:	688e      	ldr	r6, [r1, #8]
 80105c6:	461f      	mov	r7, r3
 80105c8:	42be      	cmp	r6, r7
 80105ca:	680b      	ldr	r3, [r1, #0]
 80105cc:	4682      	mov	sl, r0
 80105ce:	460c      	mov	r4, r1
 80105d0:	4690      	mov	r8, r2
 80105d2:	d82d      	bhi.n	8010630 <__ssputs_r+0x70>
 80105d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80105dc:	d026      	beq.n	801062c <__ssputs_r+0x6c>
 80105de:	6965      	ldr	r5, [r4, #20]
 80105e0:	6909      	ldr	r1, [r1, #16]
 80105e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105e6:	eba3 0901 	sub.w	r9, r3, r1
 80105ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105ee:	1c7b      	adds	r3, r7, #1
 80105f0:	444b      	add	r3, r9
 80105f2:	106d      	asrs	r5, r5, #1
 80105f4:	429d      	cmp	r5, r3
 80105f6:	bf38      	it	cc
 80105f8:	461d      	movcc	r5, r3
 80105fa:	0553      	lsls	r3, r2, #21
 80105fc:	d527      	bpl.n	801064e <__ssputs_r+0x8e>
 80105fe:	4629      	mov	r1, r5
 8010600:	f7ff ff52 	bl	80104a8 <_malloc_r>
 8010604:	4606      	mov	r6, r0
 8010606:	b360      	cbz	r0, 8010662 <__ssputs_r+0xa2>
 8010608:	6921      	ldr	r1, [r4, #16]
 801060a:	464a      	mov	r2, r9
 801060c:	f7ff feab 	bl	8010366 <memcpy>
 8010610:	89a3      	ldrh	r3, [r4, #12]
 8010612:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010616:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801061a:	81a3      	strh	r3, [r4, #12]
 801061c:	6126      	str	r6, [r4, #16]
 801061e:	6165      	str	r5, [r4, #20]
 8010620:	444e      	add	r6, r9
 8010622:	eba5 0509 	sub.w	r5, r5, r9
 8010626:	6026      	str	r6, [r4, #0]
 8010628:	60a5      	str	r5, [r4, #8]
 801062a:	463e      	mov	r6, r7
 801062c:	42be      	cmp	r6, r7
 801062e:	d900      	bls.n	8010632 <__ssputs_r+0x72>
 8010630:	463e      	mov	r6, r7
 8010632:	6820      	ldr	r0, [r4, #0]
 8010634:	4632      	mov	r2, r6
 8010636:	4641      	mov	r1, r8
 8010638:	f000 fb66 	bl	8010d08 <memmove>
 801063c:	68a3      	ldr	r3, [r4, #8]
 801063e:	1b9b      	subs	r3, r3, r6
 8010640:	60a3      	str	r3, [r4, #8]
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	4433      	add	r3, r6
 8010646:	6023      	str	r3, [r4, #0]
 8010648:	2000      	movs	r0, #0
 801064a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801064e:	462a      	mov	r2, r5
 8010650:	f000 fb8b 	bl	8010d6a <_realloc_r>
 8010654:	4606      	mov	r6, r0
 8010656:	2800      	cmp	r0, #0
 8010658:	d1e0      	bne.n	801061c <__ssputs_r+0x5c>
 801065a:	6921      	ldr	r1, [r4, #16]
 801065c:	4650      	mov	r0, sl
 801065e:	f7ff feaf 	bl	80103c0 <_free_r>
 8010662:	230c      	movs	r3, #12
 8010664:	f8ca 3000 	str.w	r3, [sl]
 8010668:	89a3      	ldrh	r3, [r4, #12]
 801066a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801066e:	81a3      	strh	r3, [r4, #12]
 8010670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010674:	e7e9      	b.n	801064a <__ssputs_r+0x8a>
	...

08010678 <_svfiprintf_r>:
 8010678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801067c:	4698      	mov	r8, r3
 801067e:	898b      	ldrh	r3, [r1, #12]
 8010680:	061b      	lsls	r3, r3, #24
 8010682:	b09d      	sub	sp, #116	@ 0x74
 8010684:	4607      	mov	r7, r0
 8010686:	460d      	mov	r5, r1
 8010688:	4614      	mov	r4, r2
 801068a:	d510      	bpl.n	80106ae <_svfiprintf_r+0x36>
 801068c:	690b      	ldr	r3, [r1, #16]
 801068e:	b973      	cbnz	r3, 80106ae <_svfiprintf_r+0x36>
 8010690:	2140      	movs	r1, #64	@ 0x40
 8010692:	f7ff ff09 	bl	80104a8 <_malloc_r>
 8010696:	6028      	str	r0, [r5, #0]
 8010698:	6128      	str	r0, [r5, #16]
 801069a:	b930      	cbnz	r0, 80106aa <_svfiprintf_r+0x32>
 801069c:	230c      	movs	r3, #12
 801069e:	603b      	str	r3, [r7, #0]
 80106a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80106a4:	b01d      	add	sp, #116	@ 0x74
 80106a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106aa:	2340      	movs	r3, #64	@ 0x40
 80106ac:	616b      	str	r3, [r5, #20]
 80106ae:	2300      	movs	r3, #0
 80106b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80106b2:	2320      	movs	r3, #32
 80106b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80106b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80106bc:	2330      	movs	r3, #48	@ 0x30
 80106be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801085c <_svfiprintf_r+0x1e4>
 80106c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80106c6:	f04f 0901 	mov.w	r9, #1
 80106ca:	4623      	mov	r3, r4
 80106cc:	469a      	mov	sl, r3
 80106ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106d2:	b10a      	cbz	r2, 80106d8 <_svfiprintf_r+0x60>
 80106d4:	2a25      	cmp	r2, #37	@ 0x25
 80106d6:	d1f9      	bne.n	80106cc <_svfiprintf_r+0x54>
 80106d8:	ebba 0b04 	subs.w	fp, sl, r4
 80106dc:	d00b      	beq.n	80106f6 <_svfiprintf_r+0x7e>
 80106de:	465b      	mov	r3, fp
 80106e0:	4622      	mov	r2, r4
 80106e2:	4629      	mov	r1, r5
 80106e4:	4638      	mov	r0, r7
 80106e6:	f7ff ff6b 	bl	80105c0 <__ssputs_r>
 80106ea:	3001      	adds	r0, #1
 80106ec:	f000 80a7 	beq.w	801083e <_svfiprintf_r+0x1c6>
 80106f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106f2:	445a      	add	r2, fp
 80106f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80106f6:	f89a 3000 	ldrb.w	r3, [sl]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f000 809f 	beq.w	801083e <_svfiprintf_r+0x1c6>
 8010700:	2300      	movs	r3, #0
 8010702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801070a:	f10a 0a01 	add.w	sl, sl, #1
 801070e:	9304      	str	r3, [sp, #16]
 8010710:	9307      	str	r3, [sp, #28]
 8010712:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010716:	931a      	str	r3, [sp, #104]	@ 0x68
 8010718:	4654      	mov	r4, sl
 801071a:	2205      	movs	r2, #5
 801071c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010720:	484e      	ldr	r0, [pc, #312]	@ (801085c <_svfiprintf_r+0x1e4>)
 8010722:	f7ef fd75 	bl	8000210 <memchr>
 8010726:	9a04      	ldr	r2, [sp, #16]
 8010728:	b9d8      	cbnz	r0, 8010762 <_svfiprintf_r+0xea>
 801072a:	06d0      	lsls	r0, r2, #27
 801072c:	bf44      	itt	mi
 801072e:	2320      	movmi	r3, #32
 8010730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010734:	0711      	lsls	r1, r2, #28
 8010736:	bf44      	itt	mi
 8010738:	232b      	movmi	r3, #43	@ 0x2b
 801073a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801073e:	f89a 3000 	ldrb.w	r3, [sl]
 8010742:	2b2a      	cmp	r3, #42	@ 0x2a
 8010744:	d015      	beq.n	8010772 <_svfiprintf_r+0xfa>
 8010746:	9a07      	ldr	r2, [sp, #28]
 8010748:	4654      	mov	r4, sl
 801074a:	2000      	movs	r0, #0
 801074c:	f04f 0c0a 	mov.w	ip, #10
 8010750:	4621      	mov	r1, r4
 8010752:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010756:	3b30      	subs	r3, #48	@ 0x30
 8010758:	2b09      	cmp	r3, #9
 801075a:	d94b      	bls.n	80107f4 <_svfiprintf_r+0x17c>
 801075c:	b1b0      	cbz	r0, 801078c <_svfiprintf_r+0x114>
 801075e:	9207      	str	r2, [sp, #28]
 8010760:	e014      	b.n	801078c <_svfiprintf_r+0x114>
 8010762:	eba0 0308 	sub.w	r3, r0, r8
 8010766:	fa09 f303 	lsl.w	r3, r9, r3
 801076a:	4313      	orrs	r3, r2
 801076c:	9304      	str	r3, [sp, #16]
 801076e:	46a2      	mov	sl, r4
 8010770:	e7d2      	b.n	8010718 <_svfiprintf_r+0xa0>
 8010772:	9b03      	ldr	r3, [sp, #12]
 8010774:	1d19      	adds	r1, r3, #4
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	9103      	str	r1, [sp, #12]
 801077a:	2b00      	cmp	r3, #0
 801077c:	bfbb      	ittet	lt
 801077e:	425b      	neglt	r3, r3
 8010780:	f042 0202 	orrlt.w	r2, r2, #2
 8010784:	9307      	strge	r3, [sp, #28]
 8010786:	9307      	strlt	r3, [sp, #28]
 8010788:	bfb8      	it	lt
 801078a:	9204      	strlt	r2, [sp, #16]
 801078c:	7823      	ldrb	r3, [r4, #0]
 801078e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010790:	d10a      	bne.n	80107a8 <_svfiprintf_r+0x130>
 8010792:	7863      	ldrb	r3, [r4, #1]
 8010794:	2b2a      	cmp	r3, #42	@ 0x2a
 8010796:	d132      	bne.n	80107fe <_svfiprintf_r+0x186>
 8010798:	9b03      	ldr	r3, [sp, #12]
 801079a:	1d1a      	adds	r2, r3, #4
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	9203      	str	r2, [sp, #12]
 80107a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80107a4:	3402      	adds	r4, #2
 80107a6:	9305      	str	r3, [sp, #20]
 80107a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801086c <_svfiprintf_r+0x1f4>
 80107ac:	7821      	ldrb	r1, [r4, #0]
 80107ae:	2203      	movs	r2, #3
 80107b0:	4650      	mov	r0, sl
 80107b2:	f7ef fd2d 	bl	8000210 <memchr>
 80107b6:	b138      	cbz	r0, 80107c8 <_svfiprintf_r+0x150>
 80107b8:	9b04      	ldr	r3, [sp, #16]
 80107ba:	eba0 000a 	sub.w	r0, r0, sl
 80107be:	2240      	movs	r2, #64	@ 0x40
 80107c0:	4082      	lsls	r2, r0
 80107c2:	4313      	orrs	r3, r2
 80107c4:	3401      	adds	r4, #1
 80107c6:	9304      	str	r3, [sp, #16]
 80107c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107cc:	4824      	ldr	r0, [pc, #144]	@ (8010860 <_svfiprintf_r+0x1e8>)
 80107ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107d2:	2206      	movs	r2, #6
 80107d4:	f7ef fd1c 	bl	8000210 <memchr>
 80107d8:	2800      	cmp	r0, #0
 80107da:	d036      	beq.n	801084a <_svfiprintf_r+0x1d2>
 80107dc:	4b21      	ldr	r3, [pc, #132]	@ (8010864 <_svfiprintf_r+0x1ec>)
 80107de:	bb1b      	cbnz	r3, 8010828 <_svfiprintf_r+0x1b0>
 80107e0:	9b03      	ldr	r3, [sp, #12]
 80107e2:	3307      	adds	r3, #7
 80107e4:	f023 0307 	bic.w	r3, r3, #7
 80107e8:	3308      	adds	r3, #8
 80107ea:	9303      	str	r3, [sp, #12]
 80107ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107ee:	4433      	add	r3, r6
 80107f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80107f2:	e76a      	b.n	80106ca <_svfiprintf_r+0x52>
 80107f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80107f8:	460c      	mov	r4, r1
 80107fa:	2001      	movs	r0, #1
 80107fc:	e7a8      	b.n	8010750 <_svfiprintf_r+0xd8>
 80107fe:	2300      	movs	r3, #0
 8010800:	3401      	adds	r4, #1
 8010802:	9305      	str	r3, [sp, #20]
 8010804:	4619      	mov	r1, r3
 8010806:	f04f 0c0a 	mov.w	ip, #10
 801080a:	4620      	mov	r0, r4
 801080c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010810:	3a30      	subs	r2, #48	@ 0x30
 8010812:	2a09      	cmp	r2, #9
 8010814:	d903      	bls.n	801081e <_svfiprintf_r+0x1a6>
 8010816:	2b00      	cmp	r3, #0
 8010818:	d0c6      	beq.n	80107a8 <_svfiprintf_r+0x130>
 801081a:	9105      	str	r1, [sp, #20]
 801081c:	e7c4      	b.n	80107a8 <_svfiprintf_r+0x130>
 801081e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010822:	4604      	mov	r4, r0
 8010824:	2301      	movs	r3, #1
 8010826:	e7f0      	b.n	801080a <_svfiprintf_r+0x192>
 8010828:	ab03      	add	r3, sp, #12
 801082a:	9300      	str	r3, [sp, #0]
 801082c:	462a      	mov	r2, r5
 801082e:	4b0e      	ldr	r3, [pc, #56]	@ (8010868 <_svfiprintf_r+0x1f0>)
 8010830:	a904      	add	r1, sp, #16
 8010832:	4638      	mov	r0, r7
 8010834:	f3af 8000 	nop.w
 8010838:	1c42      	adds	r2, r0, #1
 801083a:	4606      	mov	r6, r0
 801083c:	d1d6      	bne.n	80107ec <_svfiprintf_r+0x174>
 801083e:	89ab      	ldrh	r3, [r5, #12]
 8010840:	065b      	lsls	r3, r3, #25
 8010842:	f53f af2d 	bmi.w	80106a0 <_svfiprintf_r+0x28>
 8010846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010848:	e72c      	b.n	80106a4 <_svfiprintf_r+0x2c>
 801084a:	ab03      	add	r3, sp, #12
 801084c:	9300      	str	r3, [sp, #0]
 801084e:	462a      	mov	r2, r5
 8010850:	4b05      	ldr	r3, [pc, #20]	@ (8010868 <_svfiprintf_r+0x1f0>)
 8010852:	a904      	add	r1, sp, #16
 8010854:	4638      	mov	r0, r7
 8010856:	f000 f879 	bl	801094c <_printf_i>
 801085a:	e7ed      	b.n	8010838 <_svfiprintf_r+0x1c0>
 801085c:	0801f8a3 	.word	0x0801f8a3
 8010860:	0801f8ad 	.word	0x0801f8ad
 8010864:	00000000 	.word	0x00000000
 8010868:	080105c1 	.word	0x080105c1
 801086c:	0801f8a9 	.word	0x0801f8a9

08010870 <_printf_common>:
 8010870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010874:	4616      	mov	r6, r2
 8010876:	4698      	mov	r8, r3
 8010878:	688a      	ldr	r2, [r1, #8]
 801087a:	690b      	ldr	r3, [r1, #16]
 801087c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010880:	4293      	cmp	r3, r2
 8010882:	bfb8      	it	lt
 8010884:	4613      	movlt	r3, r2
 8010886:	6033      	str	r3, [r6, #0]
 8010888:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801088c:	4607      	mov	r7, r0
 801088e:	460c      	mov	r4, r1
 8010890:	b10a      	cbz	r2, 8010896 <_printf_common+0x26>
 8010892:	3301      	adds	r3, #1
 8010894:	6033      	str	r3, [r6, #0]
 8010896:	6823      	ldr	r3, [r4, #0]
 8010898:	0699      	lsls	r1, r3, #26
 801089a:	bf42      	ittt	mi
 801089c:	6833      	ldrmi	r3, [r6, #0]
 801089e:	3302      	addmi	r3, #2
 80108a0:	6033      	strmi	r3, [r6, #0]
 80108a2:	6825      	ldr	r5, [r4, #0]
 80108a4:	f015 0506 	ands.w	r5, r5, #6
 80108a8:	d106      	bne.n	80108b8 <_printf_common+0x48>
 80108aa:	f104 0a19 	add.w	sl, r4, #25
 80108ae:	68e3      	ldr	r3, [r4, #12]
 80108b0:	6832      	ldr	r2, [r6, #0]
 80108b2:	1a9b      	subs	r3, r3, r2
 80108b4:	42ab      	cmp	r3, r5
 80108b6:	dc26      	bgt.n	8010906 <_printf_common+0x96>
 80108b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80108bc:	6822      	ldr	r2, [r4, #0]
 80108be:	3b00      	subs	r3, #0
 80108c0:	bf18      	it	ne
 80108c2:	2301      	movne	r3, #1
 80108c4:	0692      	lsls	r2, r2, #26
 80108c6:	d42b      	bmi.n	8010920 <_printf_common+0xb0>
 80108c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80108cc:	4641      	mov	r1, r8
 80108ce:	4638      	mov	r0, r7
 80108d0:	47c8      	blx	r9
 80108d2:	3001      	adds	r0, #1
 80108d4:	d01e      	beq.n	8010914 <_printf_common+0xa4>
 80108d6:	6823      	ldr	r3, [r4, #0]
 80108d8:	6922      	ldr	r2, [r4, #16]
 80108da:	f003 0306 	and.w	r3, r3, #6
 80108de:	2b04      	cmp	r3, #4
 80108e0:	bf02      	ittt	eq
 80108e2:	68e5      	ldreq	r5, [r4, #12]
 80108e4:	6833      	ldreq	r3, [r6, #0]
 80108e6:	1aed      	subeq	r5, r5, r3
 80108e8:	68a3      	ldr	r3, [r4, #8]
 80108ea:	bf0c      	ite	eq
 80108ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80108f0:	2500      	movne	r5, #0
 80108f2:	4293      	cmp	r3, r2
 80108f4:	bfc4      	itt	gt
 80108f6:	1a9b      	subgt	r3, r3, r2
 80108f8:	18ed      	addgt	r5, r5, r3
 80108fa:	2600      	movs	r6, #0
 80108fc:	341a      	adds	r4, #26
 80108fe:	42b5      	cmp	r5, r6
 8010900:	d11a      	bne.n	8010938 <_printf_common+0xc8>
 8010902:	2000      	movs	r0, #0
 8010904:	e008      	b.n	8010918 <_printf_common+0xa8>
 8010906:	2301      	movs	r3, #1
 8010908:	4652      	mov	r2, sl
 801090a:	4641      	mov	r1, r8
 801090c:	4638      	mov	r0, r7
 801090e:	47c8      	blx	r9
 8010910:	3001      	adds	r0, #1
 8010912:	d103      	bne.n	801091c <_printf_common+0xac>
 8010914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801091c:	3501      	adds	r5, #1
 801091e:	e7c6      	b.n	80108ae <_printf_common+0x3e>
 8010920:	18e1      	adds	r1, r4, r3
 8010922:	1c5a      	adds	r2, r3, #1
 8010924:	2030      	movs	r0, #48	@ 0x30
 8010926:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801092a:	4422      	add	r2, r4
 801092c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010930:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010934:	3302      	adds	r3, #2
 8010936:	e7c7      	b.n	80108c8 <_printf_common+0x58>
 8010938:	2301      	movs	r3, #1
 801093a:	4622      	mov	r2, r4
 801093c:	4641      	mov	r1, r8
 801093e:	4638      	mov	r0, r7
 8010940:	47c8      	blx	r9
 8010942:	3001      	adds	r0, #1
 8010944:	d0e6      	beq.n	8010914 <_printf_common+0xa4>
 8010946:	3601      	adds	r6, #1
 8010948:	e7d9      	b.n	80108fe <_printf_common+0x8e>
	...

0801094c <_printf_i>:
 801094c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010950:	7e0f      	ldrb	r7, [r1, #24]
 8010952:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010954:	2f78      	cmp	r7, #120	@ 0x78
 8010956:	4691      	mov	r9, r2
 8010958:	4680      	mov	r8, r0
 801095a:	460c      	mov	r4, r1
 801095c:	469a      	mov	sl, r3
 801095e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010962:	d807      	bhi.n	8010974 <_printf_i+0x28>
 8010964:	2f62      	cmp	r7, #98	@ 0x62
 8010966:	d80a      	bhi.n	801097e <_printf_i+0x32>
 8010968:	2f00      	cmp	r7, #0
 801096a:	f000 80d2 	beq.w	8010b12 <_printf_i+0x1c6>
 801096e:	2f58      	cmp	r7, #88	@ 0x58
 8010970:	f000 80b9 	beq.w	8010ae6 <_printf_i+0x19a>
 8010974:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010978:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801097c:	e03a      	b.n	80109f4 <_printf_i+0xa8>
 801097e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010982:	2b15      	cmp	r3, #21
 8010984:	d8f6      	bhi.n	8010974 <_printf_i+0x28>
 8010986:	a101      	add	r1, pc, #4	@ (adr r1, 801098c <_printf_i+0x40>)
 8010988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801098c:	080109e5 	.word	0x080109e5
 8010990:	080109f9 	.word	0x080109f9
 8010994:	08010975 	.word	0x08010975
 8010998:	08010975 	.word	0x08010975
 801099c:	08010975 	.word	0x08010975
 80109a0:	08010975 	.word	0x08010975
 80109a4:	080109f9 	.word	0x080109f9
 80109a8:	08010975 	.word	0x08010975
 80109ac:	08010975 	.word	0x08010975
 80109b0:	08010975 	.word	0x08010975
 80109b4:	08010975 	.word	0x08010975
 80109b8:	08010af9 	.word	0x08010af9
 80109bc:	08010a23 	.word	0x08010a23
 80109c0:	08010ab3 	.word	0x08010ab3
 80109c4:	08010975 	.word	0x08010975
 80109c8:	08010975 	.word	0x08010975
 80109cc:	08010b1b 	.word	0x08010b1b
 80109d0:	08010975 	.word	0x08010975
 80109d4:	08010a23 	.word	0x08010a23
 80109d8:	08010975 	.word	0x08010975
 80109dc:	08010975 	.word	0x08010975
 80109e0:	08010abb 	.word	0x08010abb
 80109e4:	6833      	ldr	r3, [r6, #0]
 80109e6:	1d1a      	adds	r2, r3, #4
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	6032      	str	r2, [r6, #0]
 80109ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80109f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80109f4:	2301      	movs	r3, #1
 80109f6:	e09d      	b.n	8010b34 <_printf_i+0x1e8>
 80109f8:	6833      	ldr	r3, [r6, #0]
 80109fa:	6820      	ldr	r0, [r4, #0]
 80109fc:	1d19      	adds	r1, r3, #4
 80109fe:	6031      	str	r1, [r6, #0]
 8010a00:	0606      	lsls	r6, r0, #24
 8010a02:	d501      	bpl.n	8010a08 <_printf_i+0xbc>
 8010a04:	681d      	ldr	r5, [r3, #0]
 8010a06:	e003      	b.n	8010a10 <_printf_i+0xc4>
 8010a08:	0645      	lsls	r5, r0, #25
 8010a0a:	d5fb      	bpl.n	8010a04 <_printf_i+0xb8>
 8010a0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010a10:	2d00      	cmp	r5, #0
 8010a12:	da03      	bge.n	8010a1c <_printf_i+0xd0>
 8010a14:	232d      	movs	r3, #45	@ 0x2d
 8010a16:	426d      	negs	r5, r5
 8010a18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a1c:	4859      	ldr	r0, [pc, #356]	@ (8010b84 <_printf_i+0x238>)
 8010a1e:	230a      	movs	r3, #10
 8010a20:	e011      	b.n	8010a46 <_printf_i+0xfa>
 8010a22:	6821      	ldr	r1, [r4, #0]
 8010a24:	6833      	ldr	r3, [r6, #0]
 8010a26:	0608      	lsls	r0, r1, #24
 8010a28:	f853 5b04 	ldr.w	r5, [r3], #4
 8010a2c:	d402      	bmi.n	8010a34 <_printf_i+0xe8>
 8010a2e:	0649      	lsls	r1, r1, #25
 8010a30:	bf48      	it	mi
 8010a32:	b2ad      	uxthmi	r5, r5
 8010a34:	2f6f      	cmp	r7, #111	@ 0x6f
 8010a36:	4853      	ldr	r0, [pc, #332]	@ (8010b84 <_printf_i+0x238>)
 8010a38:	6033      	str	r3, [r6, #0]
 8010a3a:	bf14      	ite	ne
 8010a3c:	230a      	movne	r3, #10
 8010a3e:	2308      	moveq	r3, #8
 8010a40:	2100      	movs	r1, #0
 8010a42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010a46:	6866      	ldr	r6, [r4, #4]
 8010a48:	60a6      	str	r6, [r4, #8]
 8010a4a:	2e00      	cmp	r6, #0
 8010a4c:	bfa2      	ittt	ge
 8010a4e:	6821      	ldrge	r1, [r4, #0]
 8010a50:	f021 0104 	bicge.w	r1, r1, #4
 8010a54:	6021      	strge	r1, [r4, #0]
 8010a56:	b90d      	cbnz	r5, 8010a5c <_printf_i+0x110>
 8010a58:	2e00      	cmp	r6, #0
 8010a5a:	d04b      	beq.n	8010af4 <_printf_i+0x1a8>
 8010a5c:	4616      	mov	r6, r2
 8010a5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010a62:	fb03 5711 	mls	r7, r3, r1, r5
 8010a66:	5dc7      	ldrb	r7, [r0, r7]
 8010a68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010a6c:	462f      	mov	r7, r5
 8010a6e:	42bb      	cmp	r3, r7
 8010a70:	460d      	mov	r5, r1
 8010a72:	d9f4      	bls.n	8010a5e <_printf_i+0x112>
 8010a74:	2b08      	cmp	r3, #8
 8010a76:	d10b      	bne.n	8010a90 <_printf_i+0x144>
 8010a78:	6823      	ldr	r3, [r4, #0]
 8010a7a:	07df      	lsls	r7, r3, #31
 8010a7c:	d508      	bpl.n	8010a90 <_printf_i+0x144>
 8010a7e:	6923      	ldr	r3, [r4, #16]
 8010a80:	6861      	ldr	r1, [r4, #4]
 8010a82:	4299      	cmp	r1, r3
 8010a84:	bfde      	ittt	le
 8010a86:	2330      	movle	r3, #48	@ 0x30
 8010a88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010a8c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010a90:	1b92      	subs	r2, r2, r6
 8010a92:	6122      	str	r2, [r4, #16]
 8010a94:	f8cd a000 	str.w	sl, [sp]
 8010a98:	464b      	mov	r3, r9
 8010a9a:	aa03      	add	r2, sp, #12
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	4640      	mov	r0, r8
 8010aa0:	f7ff fee6 	bl	8010870 <_printf_common>
 8010aa4:	3001      	adds	r0, #1
 8010aa6:	d14a      	bne.n	8010b3e <_printf_i+0x1f2>
 8010aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010aac:	b004      	add	sp, #16
 8010aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab2:	6823      	ldr	r3, [r4, #0]
 8010ab4:	f043 0320 	orr.w	r3, r3, #32
 8010ab8:	6023      	str	r3, [r4, #0]
 8010aba:	4833      	ldr	r0, [pc, #204]	@ (8010b88 <_printf_i+0x23c>)
 8010abc:	2778      	movs	r7, #120	@ 0x78
 8010abe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010ac2:	6823      	ldr	r3, [r4, #0]
 8010ac4:	6831      	ldr	r1, [r6, #0]
 8010ac6:	061f      	lsls	r7, r3, #24
 8010ac8:	f851 5b04 	ldr.w	r5, [r1], #4
 8010acc:	d402      	bmi.n	8010ad4 <_printf_i+0x188>
 8010ace:	065f      	lsls	r7, r3, #25
 8010ad0:	bf48      	it	mi
 8010ad2:	b2ad      	uxthmi	r5, r5
 8010ad4:	6031      	str	r1, [r6, #0]
 8010ad6:	07d9      	lsls	r1, r3, #31
 8010ad8:	bf44      	itt	mi
 8010ada:	f043 0320 	orrmi.w	r3, r3, #32
 8010ade:	6023      	strmi	r3, [r4, #0]
 8010ae0:	b11d      	cbz	r5, 8010aea <_printf_i+0x19e>
 8010ae2:	2310      	movs	r3, #16
 8010ae4:	e7ac      	b.n	8010a40 <_printf_i+0xf4>
 8010ae6:	4827      	ldr	r0, [pc, #156]	@ (8010b84 <_printf_i+0x238>)
 8010ae8:	e7e9      	b.n	8010abe <_printf_i+0x172>
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	f023 0320 	bic.w	r3, r3, #32
 8010af0:	6023      	str	r3, [r4, #0]
 8010af2:	e7f6      	b.n	8010ae2 <_printf_i+0x196>
 8010af4:	4616      	mov	r6, r2
 8010af6:	e7bd      	b.n	8010a74 <_printf_i+0x128>
 8010af8:	6833      	ldr	r3, [r6, #0]
 8010afa:	6825      	ldr	r5, [r4, #0]
 8010afc:	6961      	ldr	r1, [r4, #20]
 8010afe:	1d18      	adds	r0, r3, #4
 8010b00:	6030      	str	r0, [r6, #0]
 8010b02:	062e      	lsls	r6, r5, #24
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	d501      	bpl.n	8010b0c <_printf_i+0x1c0>
 8010b08:	6019      	str	r1, [r3, #0]
 8010b0a:	e002      	b.n	8010b12 <_printf_i+0x1c6>
 8010b0c:	0668      	lsls	r0, r5, #25
 8010b0e:	d5fb      	bpl.n	8010b08 <_printf_i+0x1bc>
 8010b10:	8019      	strh	r1, [r3, #0]
 8010b12:	2300      	movs	r3, #0
 8010b14:	6123      	str	r3, [r4, #16]
 8010b16:	4616      	mov	r6, r2
 8010b18:	e7bc      	b.n	8010a94 <_printf_i+0x148>
 8010b1a:	6833      	ldr	r3, [r6, #0]
 8010b1c:	1d1a      	adds	r2, r3, #4
 8010b1e:	6032      	str	r2, [r6, #0]
 8010b20:	681e      	ldr	r6, [r3, #0]
 8010b22:	6862      	ldr	r2, [r4, #4]
 8010b24:	2100      	movs	r1, #0
 8010b26:	4630      	mov	r0, r6
 8010b28:	f7ef fb72 	bl	8000210 <memchr>
 8010b2c:	b108      	cbz	r0, 8010b32 <_printf_i+0x1e6>
 8010b2e:	1b80      	subs	r0, r0, r6
 8010b30:	6060      	str	r0, [r4, #4]
 8010b32:	6863      	ldr	r3, [r4, #4]
 8010b34:	6123      	str	r3, [r4, #16]
 8010b36:	2300      	movs	r3, #0
 8010b38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b3c:	e7aa      	b.n	8010a94 <_printf_i+0x148>
 8010b3e:	6923      	ldr	r3, [r4, #16]
 8010b40:	4632      	mov	r2, r6
 8010b42:	4649      	mov	r1, r9
 8010b44:	4640      	mov	r0, r8
 8010b46:	47d0      	blx	sl
 8010b48:	3001      	adds	r0, #1
 8010b4a:	d0ad      	beq.n	8010aa8 <_printf_i+0x15c>
 8010b4c:	6823      	ldr	r3, [r4, #0]
 8010b4e:	079b      	lsls	r3, r3, #30
 8010b50:	d413      	bmi.n	8010b7a <_printf_i+0x22e>
 8010b52:	68e0      	ldr	r0, [r4, #12]
 8010b54:	9b03      	ldr	r3, [sp, #12]
 8010b56:	4298      	cmp	r0, r3
 8010b58:	bfb8      	it	lt
 8010b5a:	4618      	movlt	r0, r3
 8010b5c:	e7a6      	b.n	8010aac <_printf_i+0x160>
 8010b5e:	2301      	movs	r3, #1
 8010b60:	4632      	mov	r2, r6
 8010b62:	4649      	mov	r1, r9
 8010b64:	4640      	mov	r0, r8
 8010b66:	47d0      	blx	sl
 8010b68:	3001      	adds	r0, #1
 8010b6a:	d09d      	beq.n	8010aa8 <_printf_i+0x15c>
 8010b6c:	3501      	adds	r5, #1
 8010b6e:	68e3      	ldr	r3, [r4, #12]
 8010b70:	9903      	ldr	r1, [sp, #12]
 8010b72:	1a5b      	subs	r3, r3, r1
 8010b74:	42ab      	cmp	r3, r5
 8010b76:	dcf2      	bgt.n	8010b5e <_printf_i+0x212>
 8010b78:	e7eb      	b.n	8010b52 <_printf_i+0x206>
 8010b7a:	2500      	movs	r5, #0
 8010b7c:	f104 0619 	add.w	r6, r4, #25
 8010b80:	e7f5      	b.n	8010b6e <_printf_i+0x222>
 8010b82:	bf00      	nop
 8010b84:	0801f8b4 	.word	0x0801f8b4
 8010b88:	0801f8c5 	.word	0x0801f8c5

08010b8c <__sflush_r>:
 8010b8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b94:	0716      	lsls	r6, r2, #28
 8010b96:	4605      	mov	r5, r0
 8010b98:	460c      	mov	r4, r1
 8010b9a:	d454      	bmi.n	8010c46 <__sflush_r+0xba>
 8010b9c:	684b      	ldr	r3, [r1, #4]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	dc02      	bgt.n	8010ba8 <__sflush_r+0x1c>
 8010ba2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	dd48      	ble.n	8010c3a <__sflush_r+0xae>
 8010ba8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010baa:	2e00      	cmp	r6, #0
 8010bac:	d045      	beq.n	8010c3a <__sflush_r+0xae>
 8010bae:	2300      	movs	r3, #0
 8010bb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010bb4:	682f      	ldr	r7, [r5, #0]
 8010bb6:	6a21      	ldr	r1, [r4, #32]
 8010bb8:	602b      	str	r3, [r5, #0]
 8010bba:	d030      	beq.n	8010c1e <__sflush_r+0x92>
 8010bbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bbe:	89a3      	ldrh	r3, [r4, #12]
 8010bc0:	0759      	lsls	r1, r3, #29
 8010bc2:	d505      	bpl.n	8010bd0 <__sflush_r+0x44>
 8010bc4:	6863      	ldr	r3, [r4, #4]
 8010bc6:	1ad2      	subs	r2, r2, r3
 8010bc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bca:	b10b      	cbz	r3, 8010bd0 <__sflush_r+0x44>
 8010bcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010bce:	1ad2      	subs	r2, r2, r3
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bd4:	6a21      	ldr	r1, [r4, #32]
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	47b0      	blx	r6
 8010bda:	1c43      	adds	r3, r0, #1
 8010bdc:	89a3      	ldrh	r3, [r4, #12]
 8010bde:	d106      	bne.n	8010bee <__sflush_r+0x62>
 8010be0:	6829      	ldr	r1, [r5, #0]
 8010be2:	291d      	cmp	r1, #29
 8010be4:	d82b      	bhi.n	8010c3e <__sflush_r+0xb2>
 8010be6:	4a2a      	ldr	r2, [pc, #168]	@ (8010c90 <__sflush_r+0x104>)
 8010be8:	410a      	asrs	r2, r1
 8010bea:	07d6      	lsls	r6, r2, #31
 8010bec:	d427      	bmi.n	8010c3e <__sflush_r+0xb2>
 8010bee:	2200      	movs	r2, #0
 8010bf0:	6062      	str	r2, [r4, #4]
 8010bf2:	04d9      	lsls	r1, r3, #19
 8010bf4:	6922      	ldr	r2, [r4, #16]
 8010bf6:	6022      	str	r2, [r4, #0]
 8010bf8:	d504      	bpl.n	8010c04 <__sflush_r+0x78>
 8010bfa:	1c42      	adds	r2, r0, #1
 8010bfc:	d101      	bne.n	8010c02 <__sflush_r+0x76>
 8010bfe:	682b      	ldr	r3, [r5, #0]
 8010c00:	b903      	cbnz	r3, 8010c04 <__sflush_r+0x78>
 8010c02:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c06:	602f      	str	r7, [r5, #0]
 8010c08:	b1b9      	cbz	r1, 8010c3a <__sflush_r+0xae>
 8010c0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c0e:	4299      	cmp	r1, r3
 8010c10:	d002      	beq.n	8010c18 <__sflush_r+0x8c>
 8010c12:	4628      	mov	r0, r5
 8010c14:	f7ff fbd4 	bl	80103c0 <_free_r>
 8010c18:	2300      	movs	r3, #0
 8010c1a:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c1c:	e00d      	b.n	8010c3a <__sflush_r+0xae>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	4628      	mov	r0, r5
 8010c22:	47b0      	blx	r6
 8010c24:	4602      	mov	r2, r0
 8010c26:	1c50      	adds	r0, r2, #1
 8010c28:	d1c9      	bne.n	8010bbe <__sflush_r+0x32>
 8010c2a:	682b      	ldr	r3, [r5, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d0c6      	beq.n	8010bbe <__sflush_r+0x32>
 8010c30:	2b1d      	cmp	r3, #29
 8010c32:	d001      	beq.n	8010c38 <__sflush_r+0xac>
 8010c34:	2b16      	cmp	r3, #22
 8010c36:	d11e      	bne.n	8010c76 <__sflush_r+0xea>
 8010c38:	602f      	str	r7, [r5, #0]
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	e022      	b.n	8010c84 <__sflush_r+0xf8>
 8010c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c42:	b21b      	sxth	r3, r3
 8010c44:	e01b      	b.n	8010c7e <__sflush_r+0xf2>
 8010c46:	690f      	ldr	r7, [r1, #16]
 8010c48:	2f00      	cmp	r7, #0
 8010c4a:	d0f6      	beq.n	8010c3a <__sflush_r+0xae>
 8010c4c:	0793      	lsls	r3, r2, #30
 8010c4e:	680e      	ldr	r6, [r1, #0]
 8010c50:	bf08      	it	eq
 8010c52:	694b      	ldreq	r3, [r1, #20]
 8010c54:	600f      	str	r7, [r1, #0]
 8010c56:	bf18      	it	ne
 8010c58:	2300      	movne	r3, #0
 8010c5a:	eba6 0807 	sub.w	r8, r6, r7
 8010c5e:	608b      	str	r3, [r1, #8]
 8010c60:	f1b8 0f00 	cmp.w	r8, #0
 8010c64:	dde9      	ble.n	8010c3a <__sflush_r+0xae>
 8010c66:	6a21      	ldr	r1, [r4, #32]
 8010c68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c6a:	4643      	mov	r3, r8
 8010c6c:	463a      	mov	r2, r7
 8010c6e:	4628      	mov	r0, r5
 8010c70:	47b0      	blx	r6
 8010c72:	2800      	cmp	r0, #0
 8010c74:	dc08      	bgt.n	8010c88 <__sflush_r+0xfc>
 8010c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c7e:	81a3      	strh	r3, [r4, #12]
 8010c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c88:	4407      	add	r7, r0
 8010c8a:	eba8 0800 	sub.w	r8, r8, r0
 8010c8e:	e7e7      	b.n	8010c60 <__sflush_r+0xd4>
 8010c90:	dfbffffe 	.word	0xdfbffffe

08010c94 <_fflush_r>:
 8010c94:	b538      	push	{r3, r4, r5, lr}
 8010c96:	690b      	ldr	r3, [r1, #16]
 8010c98:	4605      	mov	r5, r0
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	b913      	cbnz	r3, 8010ca4 <_fflush_r+0x10>
 8010c9e:	2500      	movs	r5, #0
 8010ca0:	4628      	mov	r0, r5
 8010ca2:	bd38      	pop	{r3, r4, r5, pc}
 8010ca4:	b118      	cbz	r0, 8010cae <_fflush_r+0x1a>
 8010ca6:	6a03      	ldr	r3, [r0, #32]
 8010ca8:	b90b      	cbnz	r3, 8010cae <_fflush_r+0x1a>
 8010caa:	f7ff f9f1 	bl	8010090 <__sinit>
 8010cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d0f3      	beq.n	8010c9e <_fflush_r+0xa>
 8010cb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010cb8:	07d0      	lsls	r0, r2, #31
 8010cba:	d404      	bmi.n	8010cc6 <_fflush_r+0x32>
 8010cbc:	0599      	lsls	r1, r3, #22
 8010cbe:	d402      	bmi.n	8010cc6 <_fflush_r+0x32>
 8010cc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cc2:	f7ff fb4e 	bl	8010362 <__retarget_lock_acquire_recursive>
 8010cc6:	4628      	mov	r0, r5
 8010cc8:	4621      	mov	r1, r4
 8010cca:	f7ff ff5f 	bl	8010b8c <__sflush_r>
 8010cce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cd0:	07da      	lsls	r2, r3, #31
 8010cd2:	4605      	mov	r5, r0
 8010cd4:	d4e4      	bmi.n	8010ca0 <_fflush_r+0xc>
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	059b      	lsls	r3, r3, #22
 8010cda:	d4e1      	bmi.n	8010ca0 <_fflush_r+0xc>
 8010cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cde:	f7ff fb41 	bl	8010364 <__retarget_lock_release_recursive>
 8010ce2:	e7dd      	b.n	8010ca0 <_fflush_r+0xc>

08010ce4 <fiprintf>:
 8010ce4:	b40e      	push	{r1, r2, r3}
 8010ce6:	b503      	push	{r0, r1, lr}
 8010ce8:	4601      	mov	r1, r0
 8010cea:	ab03      	add	r3, sp, #12
 8010cec:	4805      	ldr	r0, [pc, #20]	@ (8010d04 <fiprintf+0x20>)
 8010cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cf2:	6800      	ldr	r0, [r0, #0]
 8010cf4:	9301      	str	r3, [sp, #4]
 8010cf6:	f000 f88f 	bl	8010e18 <_vfiprintf_r>
 8010cfa:	b002      	add	sp, #8
 8010cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d00:	b003      	add	sp, #12
 8010d02:	4770      	bx	lr
 8010d04:	20000064 	.word	0x20000064

08010d08 <memmove>:
 8010d08:	4288      	cmp	r0, r1
 8010d0a:	b510      	push	{r4, lr}
 8010d0c:	eb01 0402 	add.w	r4, r1, r2
 8010d10:	d902      	bls.n	8010d18 <memmove+0x10>
 8010d12:	4284      	cmp	r4, r0
 8010d14:	4623      	mov	r3, r4
 8010d16:	d807      	bhi.n	8010d28 <memmove+0x20>
 8010d18:	1e43      	subs	r3, r0, #1
 8010d1a:	42a1      	cmp	r1, r4
 8010d1c:	d008      	beq.n	8010d30 <memmove+0x28>
 8010d1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d26:	e7f8      	b.n	8010d1a <memmove+0x12>
 8010d28:	4402      	add	r2, r0
 8010d2a:	4601      	mov	r1, r0
 8010d2c:	428a      	cmp	r2, r1
 8010d2e:	d100      	bne.n	8010d32 <memmove+0x2a>
 8010d30:	bd10      	pop	{r4, pc}
 8010d32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d3a:	e7f7      	b.n	8010d2c <memmove+0x24>

08010d3c <_sbrk_r>:
 8010d3c:	b538      	push	{r3, r4, r5, lr}
 8010d3e:	4d06      	ldr	r5, [pc, #24]	@ (8010d58 <_sbrk_r+0x1c>)
 8010d40:	2300      	movs	r3, #0
 8010d42:	4604      	mov	r4, r0
 8010d44:	4608      	mov	r0, r1
 8010d46:	602b      	str	r3, [r5, #0]
 8010d48:	f7f4 fc12 	bl	8005570 <_sbrk>
 8010d4c:	1c43      	adds	r3, r0, #1
 8010d4e:	d102      	bne.n	8010d56 <_sbrk_r+0x1a>
 8010d50:	682b      	ldr	r3, [r5, #0]
 8010d52:	b103      	cbz	r3, 8010d56 <_sbrk_r+0x1a>
 8010d54:	6023      	str	r3, [r4, #0]
 8010d56:	bd38      	pop	{r3, r4, r5, pc}
 8010d58:	20004cc0 	.word	0x20004cc0

08010d5c <abort>:
 8010d5c:	b508      	push	{r3, lr}
 8010d5e:	2006      	movs	r0, #6
 8010d60:	f000 fa2e 	bl	80111c0 <raise>
 8010d64:	2001      	movs	r0, #1
 8010d66:	f7f4 fb8b 	bl	8005480 <_exit>

08010d6a <_realloc_r>:
 8010d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d6e:	4680      	mov	r8, r0
 8010d70:	4615      	mov	r5, r2
 8010d72:	460c      	mov	r4, r1
 8010d74:	b921      	cbnz	r1, 8010d80 <_realloc_r+0x16>
 8010d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	f7ff bb94 	b.w	80104a8 <_malloc_r>
 8010d80:	b92a      	cbnz	r2, 8010d8e <_realloc_r+0x24>
 8010d82:	f7ff fb1d 	bl	80103c0 <_free_r>
 8010d86:	2400      	movs	r4, #0
 8010d88:	4620      	mov	r0, r4
 8010d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d8e:	f000 fa33 	bl	80111f8 <_malloc_usable_size_r>
 8010d92:	4285      	cmp	r5, r0
 8010d94:	4606      	mov	r6, r0
 8010d96:	d802      	bhi.n	8010d9e <_realloc_r+0x34>
 8010d98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010d9c:	d8f4      	bhi.n	8010d88 <_realloc_r+0x1e>
 8010d9e:	4629      	mov	r1, r5
 8010da0:	4640      	mov	r0, r8
 8010da2:	f7ff fb81 	bl	80104a8 <_malloc_r>
 8010da6:	4607      	mov	r7, r0
 8010da8:	2800      	cmp	r0, #0
 8010daa:	d0ec      	beq.n	8010d86 <_realloc_r+0x1c>
 8010dac:	42b5      	cmp	r5, r6
 8010dae:	462a      	mov	r2, r5
 8010db0:	4621      	mov	r1, r4
 8010db2:	bf28      	it	cs
 8010db4:	4632      	movcs	r2, r6
 8010db6:	f7ff fad6 	bl	8010366 <memcpy>
 8010dba:	4621      	mov	r1, r4
 8010dbc:	4640      	mov	r0, r8
 8010dbe:	f7ff faff 	bl	80103c0 <_free_r>
 8010dc2:	463c      	mov	r4, r7
 8010dc4:	e7e0      	b.n	8010d88 <_realloc_r+0x1e>

08010dc6 <__sfputc_r>:
 8010dc6:	6893      	ldr	r3, [r2, #8]
 8010dc8:	3b01      	subs	r3, #1
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	b410      	push	{r4}
 8010dce:	6093      	str	r3, [r2, #8]
 8010dd0:	da08      	bge.n	8010de4 <__sfputc_r+0x1e>
 8010dd2:	6994      	ldr	r4, [r2, #24]
 8010dd4:	42a3      	cmp	r3, r4
 8010dd6:	db01      	blt.n	8010ddc <__sfputc_r+0x16>
 8010dd8:	290a      	cmp	r1, #10
 8010dda:	d103      	bne.n	8010de4 <__sfputc_r+0x1e>
 8010ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010de0:	f000 b932 	b.w	8011048 <__swbuf_r>
 8010de4:	6813      	ldr	r3, [r2, #0]
 8010de6:	1c58      	adds	r0, r3, #1
 8010de8:	6010      	str	r0, [r2, #0]
 8010dea:	7019      	strb	r1, [r3, #0]
 8010dec:	4608      	mov	r0, r1
 8010dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <__sfputs_r>:
 8010df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df6:	4606      	mov	r6, r0
 8010df8:	460f      	mov	r7, r1
 8010dfa:	4614      	mov	r4, r2
 8010dfc:	18d5      	adds	r5, r2, r3
 8010dfe:	42ac      	cmp	r4, r5
 8010e00:	d101      	bne.n	8010e06 <__sfputs_r+0x12>
 8010e02:	2000      	movs	r0, #0
 8010e04:	e007      	b.n	8010e16 <__sfputs_r+0x22>
 8010e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e0a:	463a      	mov	r2, r7
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	f7ff ffda 	bl	8010dc6 <__sfputc_r>
 8010e12:	1c43      	adds	r3, r0, #1
 8010e14:	d1f3      	bne.n	8010dfe <__sfputs_r+0xa>
 8010e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e18 <_vfiprintf_r>:
 8010e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	460d      	mov	r5, r1
 8010e1e:	b09d      	sub	sp, #116	@ 0x74
 8010e20:	4614      	mov	r4, r2
 8010e22:	4698      	mov	r8, r3
 8010e24:	4606      	mov	r6, r0
 8010e26:	b118      	cbz	r0, 8010e30 <_vfiprintf_r+0x18>
 8010e28:	6a03      	ldr	r3, [r0, #32]
 8010e2a:	b90b      	cbnz	r3, 8010e30 <_vfiprintf_r+0x18>
 8010e2c:	f7ff f930 	bl	8010090 <__sinit>
 8010e30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e32:	07d9      	lsls	r1, r3, #31
 8010e34:	d405      	bmi.n	8010e42 <_vfiprintf_r+0x2a>
 8010e36:	89ab      	ldrh	r3, [r5, #12]
 8010e38:	059a      	lsls	r2, r3, #22
 8010e3a:	d402      	bmi.n	8010e42 <_vfiprintf_r+0x2a>
 8010e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e3e:	f7ff fa90 	bl	8010362 <__retarget_lock_acquire_recursive>
 8010e42:	89ab      	ldrh	r3, [r5, #12]
 8010e44:	071b      	lsls	r3, r3, #28
 8010e46:	d501      	bpl.n	8010e4c <_vfiprintf_r+0x34>
 8010e48:	692b      	ldr	r3, [r5, #16]
 8010e4a:	b99b      	cbnz	r3, 8010e74 <_vfiprintf_r+0x5c>
 8010e4c:	4629      	mov	r1, r5
 8010e4e:	4630      	mov	r0, r6
 8010e50:	f000 f938 	bl	80110c4 <__swsetup_r>
 8010e54:	b170      	cbz	r0, 8010e74 <_vfiprintf_r+0x5c>
 8010e56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e58:	07dc      	lsls	r4, r3, #31
 8010e5a:	d504      	bpl.n	8010e66 <_vfiprintf_r+0x4e>
 8010e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010e60:	b01d      	add	sp, #116	@ 0x74
 8010e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e66:	89ab      	ldrh	r3, [r5, #12]
 8010e68:	0598      	lsls	r0, r3, #22
 8010e6a:	d4f7      	bmi.n	8010e5c <_vfiprintf_r+0x44>
 8010e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e6e:	f7ff fa79 	bl	8010364 <__retarget_lock_release_recursive>
 8010e72:	e7f3      	b.n	8010e5c <_vfiprintf_r+0x44>
 8010e74:	2300      	movs	r3, #0
 8010e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e78:	2320      	movs	r3, #32
 8010e7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e82:	2330      	movs	r3, #48	@ 0x30
 8010e84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011034 <_vfiprintf_r+0x21c>
 8010e88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e8c:	f04f 0901 	mov.w	r9, #1
 8010e90:	4623      	mov	r3, r4
 8010e92:	469a      	mov	sl, r3
 8010e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e98:	b10a      	cbz	r2, 8010e9e <_vfiprintf_r+0x86>
 8010e9a:	2a25      	cmp	r2, #37	@ 0x25
 8010e9c:	d1f9      	bne.n	8010e92 <_vfiprintf_r+0x7a>
 8010e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8010ea2:	d00b      	beq.n	8010ebc <_vfiprintf_r+0xa4>
 8010ea4:	465b      	mov	r3, fp
 8010ea6:	4622      	mov	r2, r4
 8010ea8:	4629      	mov	r1, r5
 8010eaa:	4630      	mov	r0, r6
 8010eac:	f7ff ffa2 	bl	8010df4 <__sfputs_r>
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	f000 80a7 	beq.w	8011004 <_vfiprintf_r+0x1ec>
 8010eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010eb8:	445a      	add	r2, fp
 8010eba:	9209      	str	r2, [sp, #36]	@ 0x24
 8010ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 809f 	beq.w	8011004 <_vfiprintf_r+0x1ec>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ed0:	f10a 0a01 	add.w	sl, sl, #1
 8010ed4:	9304      	str	r3, [sp, #16]
 8010ed6:	9307      	str	r3, [sp, #28]
 8010ed8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8010ede:	4654      	mov	r4, sl
 8010ee0:	2205      	movs	r2, #5
 8010ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ee6:	4853      	ldr	r0, [pc, #332]	@ (8011034 <_vfiprintf_r+0x21c>)
 8010ee8:	f7ef f992 	bl	8000210 <memchr>
 8010eec:	9a04      	ldr	r2, [sp, #16]
 8010eee:	b9d8      	cbnz	r0, 8010f28 <_vfiprintf_r+0x110>
 8010ef0:	06d1      	lsls	r1, r2, #27
 8010ef2:	bf44      	itt	mi
 8010ef4:	2320      	movmi	r3, #32
 8010ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010efa:	0713      	lsls	r3, r2, #28
 8010efc:	bf44      	itt	mi
 8010efe:	232b      	movmi	r3, #43	@ 0x2b
 8010f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f04:	f89a 3000 	ldrb.w	r3, [sl]
 8010f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f0a:	d015      	beq.n	8010f38 <_vfiprintf_r+0x120>
 8010f0c:	9a07      	ldr	r2, [sp, #28]
 8010f0e:	4654      	mov	r4, sl
 8010f10:	2000      	movs	r0, #0
 8010f12:	f04f 0c0a 	mov.w	ip, #10
 8010f16:	4621      	mov	r1, r4
 8010f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f1c:	3b30      	subs	r3, #48	@ 0x30
 8010f1e:	2b09      	cmp	r3, #9
 8010f20:	d94b      	bls.n	8010fba <_vfiprintf_r+0x1a2>
 8010f22:	b1b0      	cbz	r0, 8010f52 <_vfiprintf_r+0x13a>
 8010f24:	9207      	str	r2, [sp, #28]
 8010f26:	e014      	b.n	8010f52 <_vfiprintf_r+0x13a>
 8010f28:	eba0 0308 	sub.w	r3, r0, r8
 8010f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f30:	4313      	orrs	r3, r2
 8010f32:	9304      	str	r3, [sp, #16]
 8010f34:	46a2      	mov	sl, r4
 8010f36:	e7d2      	b.n	8010ede <_vfiprintf_r+0xc6>
 8010f38:	9b03      	ldr	r3, [sp, #12]
 8010f3a:	1d19      	adds	r1, r3, #4
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	9103      	str	r1, [sp, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	bfbb      	ittet	lt
 8010f44:	425b      	neglt	r3, r3
 8010f46:	f042 0202 	orrlt.w	r2, r2, #2
 8010f4a:	9307      	strge	r3, [sp, #28]
 8010f4c:	9307      	strlt	r3, [sp, #28]
 8010f4e:	bfb8      	it	lt
 8010f50:	9204      	strlt	r2, [sp, #16]
 8010f52:	7823      	ldrb	r3, [r4, #0]
 8010f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f56:	d10a      	bne.n	8010f6e <_vfiprintf_r+0x156>
 8010f58:	7863      	ldrb	r3, [r4, #1]
 8010f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f5c:	d132      	bne.n	8010fc4 <_vfiprintf_r+0x1ac>
 8010f5e:	9b03      	ldr	r3, [sp, #12]
 8010f60:	1d1a      	adds	r2, r3, #4
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	9203      	str	r2, [sp, #12]
 8010f66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f6a:	3402      	adds	r4, #2
 8010f6c:	9305      	str	r3, [sp, #20]
 8010f6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011044 <_vfiprintf_r+0x22c>
 8010f72:	7821      	ldrb	r1, [r4, #0]
 8010f74:	2203      	movs	r2, #3
 8010f76:	4650      	mov	r0, sl
 8010f78:	f7ef f94a 	bl	8000210 <memchr>
 8010f7c:	b138      	cbz	r0, 8010f8e <_vfiprintf_r+0x176>
 8010f7e:	9b04      	ldr	r3, [sp, #16]
 8010f80:	eba0 000a 	sub.w	r0, r0, sl
 8010f84:	2240      	movs	r2, #64	@ 0x40
 8010f86:	4082      	lsls	r2, r0
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	3401      	adds	r4, #1
 8010f8c:	9304      	str	r3, [sp, #16]
 8010f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f92:	4829      	ldr	r0, [pc, #164]	@ (8011038 <_vfiprintf_r+0x220>)
 8010f94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f98:	2206      	movs	r2, #6
 8010f9a:	f7ef f939 	bl	8000210 <memchr>
 8010f9e:	2800      	cmp	r0, #0
 8010fa0:	d03f      	beq.n	8011022 <_vfiprintf_r+0x20a>
 8010fa2:	4b26      	ldr	r3, [pc, #152]	@ (801103c <_vfiprintf_r+0x224>)
 8010fa4:	bb1b      	cbnz	r3, 8010fee <_vfiprintf_r+0x1d6>
 8010fa6:	9b03      	ldr	r3, [sp, #12]
 8010fa8:	3307      	adds	r3, #7
 8010faa:	f023 0307 	bic.w	r3, r3, #7
 8010fae:	3308      	adds	r3, #8
 8010fb0:	9303      	str	r3, [sp, #12]
 8010fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fb4:	443b      	add	r3, r7
 8010fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fb8:	e76a      	b.n	8010e90 <_vfiprintf_r+0x78>
 8010fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	2001      	movs	r0, #1
 8010fc2:	e7a8      	b.n	8010f16 <_vfiprintf_r+0xfe>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	3401      	adds	r4, #1
 8010fc8:	9305      	str	r3, [sp, #20]
 8010fca:	4619      	mov	r1, r3
 8010fcc:	f04f 0c0a 	mov.w	ip, #10
 8010fd0:	4620      	mov	r0, r4
 8010fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fd6:	3a30      	subs	r2, #48	@ 0x30
 8010fd8:	2a09      	cmp	r2, #9
 8010fda:	d903      	bls.n	8010fe4 <_vfiprintf_r+0x1cc>
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d0c6      	beq.n	8010f6e <_vfiprintf_r+0x156>
 8010fe0:	9105      	str	r1, [sp, #20]
 8010fe2:	e7c4      	b.n	8010f6e <_vfiprintf_r+0x156>
 8010fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fe8:	4604      	mov	r4, r0
 8010fea:	2301      	movs	r3, #1
 8010fec:	e7f0      	b.n	8010fd0 <_vfiprintf_r+0x1b8>
 8010fee:	ab03      	add	r3, sp, #12
 8010ff0:	9300      	str	r3, [sp, #0]
 8010ff2:	462a      	mov	r2, r5
 8010ff4:	4b12      	ldr	r3, [pc, #72]	@ (8011040 <_vfiprintf_r+0x228>)
 8010ff6:	a904      	add	r1, sp, #16
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	f3af 8000 	nop.w
 8010ffe:	4607      	mov	r7, r0
 8011000:	1c78      	adds	r0, r7, #1
 8011002:	d1d6      	bne.n	8010fb2 <_vfiprintf_r+0x19a>
 8011004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011006:	07d9      	lsls	r1, r3, #31
 8011008:	d405      	bmi.n	8011016 <_vfiprintf_r+0x1fe>
 801100a:	89ab      	ldrh	r3, [r5, #12]
 801100c:	059a      	lsls	r2, r3, #22
 801100e:	d402      	bmi.n	8011016 <_vfiprintf_r+0x1fe>
 8011010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011012:	f7ff f9a7 	bl	8010364 <__retarget_lock_release_recursive>
 8011016:	89ab      	ldrh	r3, [r5, #12]
 8011018:	065b      	lsls	r3, r3, #25
 801101a:	f53f af1f 	bmi.w	8010e5c <_vfiprintf_r+0x44>
 801101e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011020:	e71e      	b.n	8010e60 <_vfiprintf_r+0x48>
 8011022:	ab03      	add	r3, sp, #12
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	462a      	mov	r2, r5
 8011028:	4b05      	ldr	r3, [pc, #20]	@ (8011040 <_vfiprintf_r+0x228>)
 801102a:	a904      	add	r1, sp, #16
 801102c:	4630      	mov	r0, r6
 801102e:	f7ff fc8d 	bl	801094c <_printf_i>
 8011032:	e7e4      	b.n	8010ffe <_vfiprintf_r+0x1e6>
 8011034:	0801f8a3 	.word	0x0801f8a3
 8011038:	0801f8ad 	.word	0x0801f8ad
 801103c:	00000000 	.word	0x00000000
 8011040:	08010df5 	.word	0x08010df5
 8011044:	0801f8a9 	.word	0x0801f8a9

08011048 <__swbuf_r>:
 8011048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104a:	460e      	mov	r6, r1
 801104c:	4614      	mov	r4, r2
 801104e:	4605      	mov	r5, r0
 8011050:	b118      	cbz	r0, 801105a <__swbuf_r+0x12>
 8011052:	6a03      	ldr	r3, [r0, #32]
 8011054:	b90b      	cbnz	r3, 801105a <__swbuf_r+0x12>
 8011056:	f7ff f81b 	bl	8010090 <__sinit>
 801105a:	69a3      	ldr	r3, [r4, #24]
 801105c:	60a3      	str	r3, [r4, #8]
 801105e:	89a3      	ldrh	r3, [r4, #12]
 8011060:	071a      	lsls	r2, r3, #28
 8011062:	d501      	bpl.n	8011068 <__swbuf_r+0x20>
 8011064:	6923      	ldr	r3, [r4, #16]
 8011066:	b943      	cbnz	r3, 801107a <__swbuf_r+0x32>
 8011068:	4621      	mov	r1, r4
 801106a:	4628      	mov	r0, r5
 801106c:	f000 f82a 	bl	80110c4 <__swsetup_r>
 8011070:	b118      	cbz	r0, 801107a <__swbuf_r+0x32>
 8011072:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011076:	4638      	mov	r0, r7
 8011078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801107a:	6823      	ldr	r3, [r4, #0]
 801107c:	6922      	ldr	r2, [r4, #16]
 801107e:	1a98      	subs	r0, r3, r2
 8011080:	6963      	ldr	r3, [r4, #20]
 8011082:	b2f6      	uxtb	r6, r6
 8011084:	4283      	cmp	r3, r0
 8011086:	4637      	mov	r7, r6
 8011088:	dc05      	bgt.n	8011096 <__swbuf_r+0x4e>
 801108a:	4621      	mov	r1, r4
 801108c:	4628      	mov	r0, r5
 801108e:	f7ff fe01 	bl	8010c94 <_fflush_r>
 8011092:	2800      	cmp	r0, #0
 8011094:	d1ed      	bne.n	8011072 <__swbuf_r+0x2a>
 8011096:	68a3      	ldr	r3, [r4, #8]
 8011098:	3b01      	subs	r3, #1
 801109a:	60a3      	str	r3, [r4, #8]
 801109c:	6823      	ldr	r3, [r4, #0]
 801109e:	1c5a      	adds	r2, r3, #1
 80110a0:	6022      	str	r2, [r4, #0]
 80110a2:	701e      	strb	r6, [r3, #0]
 80110a4:	6962      	ldr	r2, [r4, #20]
 80110a6:	1c43      	adds	r3, r0, #1
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d004      	beq.n	80110b6 <__swbuf_r+0x6e>
 80110ac:	89a3      	ldrh	r3, [r4, #12]
 80110ae:	07db      	lsls	r3, r3, #31
 80110b0:	d5e1      	bpl.n	8011076 <__swbuf_r+0x2e>
 80110b2:	2e0a      	cmp	r6, #10
 80110b4:	d1df      	bne.n	8011076 <__swbuf_r+0x2e>
 80110b6:	4621      	mov	r1, r4
 80110b8:	4628      	mov	r0, r5
 80110ba:	f7ff fdeb 	bl	8010c94 <_fflush_r>
 80110be:	2800      	cmp	r0, #0
 80110c0:	d0d9      	beq.n	8011076 <__swbuf_r+0x2e>
 80110c2:	e7d6      	b.n	8011072 <__swbuf_r+0x2a>

080110c4 <__swsetup_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4b29      	ldr	r3, [pc, #164]	@ (801116c <__swsetup_r+0xa8>)
 80110c8:	4605      	mov	r5, r0
 80110ca:	6818      	ldr	r0, [r3, #0]
 80110cc:	460c      	mov	r4, r1
 80110ce:	b118      	cbz	r0, 80110d8 <__swsetup_r+0x14>
 80110d0:	6a03      	ldr	r3, [r0, #32]
 80110d2:	b90b      	cbnz	r3, 80110d8 <__swsetup_r+0x14>
 80110d4:	f7fe ffdc 	bl	8010090 <__sinit>
 80110d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110dc:	0719      	lsls	r1, r3, #28
 80110de:	d422      	bmi.n	8011126 <__swsetup_r+0x62>
 80110e0:	06da      	lsls	r2, r3, #27
 80110e2:	d407      	bmi.n	80110f4 <__swsetup_r+0x30>
 80110e4:	2209      	movs	r2, #9
 80110e6:	602a      	str	r2, [r5, #0]
 80110e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110ec:	81a3      	strh	r3, [r4, #12]
 80110ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110f2:	e033      	b.n	801115c <__swsetup_r+0x98>
 80110f4:	0758      	lsls	r0, r3, #29
 80110f6:	d512      	bpl.n	801111e <__swsetup_r+0x5a>
 80110f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110fa:	b141      	cbz	r1, 801110e <__swsetup_r+0x4a>
 80110fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011100:	4299      	cmp	r1, r3
 8011102:	d002      	beq.n	801110a <__swsetup_r+0x46>
 8011104:	4628      	mov	r0, r5
 8011106:	f7ff f95b 	bl	80103c0 <_free_r>
 801110a:	2300      	movs	r3, #0
 801110c:	6363      	str	r3, [r4, #52]	@ 0x34
 801110e:	89a3      	ldrh	r3, [r4, #12]
 8011110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011114:	81a3      	strh	r3, [r4, #12]
 8011116:	2300      	movs	r3, #0
 8011118:	6063      	str	r3, [r4, #4]
 801111a:	6923      	ldr	r3, [r4, #16]
 801111c:	6023      	str	r3, [r4, #0]
 801111e:	89a3      	ldrh	r3, [r4, #12]
 8011120:	f043 0308 	orr.w	r3, r3, #8
 8011124:	81a3      	strh	r3, [r4, #12]
 8011126:	6923      	ldr	r3, [r4, #16]
 8011128:	b94b      	cbnz	r3, 801113e <__swsetup_r+0x7a>
 801112a:	89a3      	ldrh	r3, [r4, #12]
 801112c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011134:	d003      	beq.n	801113e <__swsetup_r+0x7a>
 8011136:	4621      	mov	r1, r4
 8011138:	4628      	mov	r0, r5
 801113a:	f000 f88b 	bl	8011254 <__smakebuf_r>
 801113e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011142:	f013 0201 	ands.w	r2, r3, #1
 8011146:	d00a      	beq.n	801115e <__swsetup_r+0x9a>
 8011148:	2200      	movs	r2, #0
 801114a:	60a2      	str	r2, [r4, #8]
 801114c:	6962      	ldr	r2, [r4, #20]
 801114e:	4252      	negs	r2, r2
 8011150:	61a2      	str	r2, [r4, #24]
 8011152:	6922      	ldr	r2, [r4, #16]
 8011154:	b942      	cbnz	r2, 8011168 <__swsetup_r+0xa4>
 8011156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801115a:	d1c5      	bne.n	80110e8 <__swsetup_r+0x24>
 801115c:	bd38      	pop	{r3, r4, r5, pc}
 801115e:	0799      	lsls	r1, r3, #30
 8011160:	bf58      	it	pl
 8011162:	6962      	ldrpl	r2, [r4, #20]
 8011164:	60a2      	str	r2, [r4, #8]
 8011166:	e7f4      	b.n	8011152 <__swsetup_r+0x8e>
 8011168:	2000      	movs	r0, #0
 801116a:	e7f7      	b.n	801115c <__swsetup_r+0x98>
 801116c:	20000064 	.word	0x20000064

08011170 <_raise_r>:
 8011170:	291f      	cmp	r1, #31
 8011172:	b538      	push	{r3, r4, r5, lr}
 8011174:	4605      	mov	r5, r0
 8011176:	460c      	mov	r4, r1
 8011178:	d904      	bls.n	8011184 <_raise_r+0x14>
 801117a:	2316      	movs	r3, #22
 801117c:	6003      	str	r3, [r0, #0]
 801117e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011182:	bd38      	pop	{r3, r4, r5, pc}
 8011184:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011186:	b112      	cbz	r2, 801118e <_raise_r+0x1e>
 8011188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801118c:	b94b      	cbnz	r3, 80111a2 <_raise_r+0x32>
 801118e:	4628      	mov	r0, r5
 8011190:	f000 f830 	bl	80111f4 <_getpid_r>
 8011194:	4622      	mov	r2, r4
 8011196:	4601      	mov	r1, r0
 8011198:	4628      	mov	r0, r5
 801119a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801119e:	f000 b817 	b.w	80111d0 <_kill_r>
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d00a      	beq.n	80111bc <_raise_r+0x4c>
 80111a6:	1c59      	adds	r1, r3, #1
 80111a8:	d103      	bne.n	80111b2 <_raise_r+0x42>
 80111aa:	2316      	movs	r3, #22
 80111ac:	6003      	str	r3, [r0, #0]
 80111ae:	2001      	movs	r0, #1
 80111b0:	e7e7      	b.n	8011182 <_raise_r+0x12>
 80111b2:	2100      	movs	r1, #0
 80111b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80111b8:	4620      	mov	r0, r4
 80111ba:	4798      	blx	r3
 80111bc:	2000      	movs	r0, #0
 80111be:	e7e0      	b.n	8011182 <_raise_r+0x12>

080111c0 <raise>:
 80111c0:	4b02      	ldr	r3, [pc, #8]	@ (80111cc <raise+0xc>)
 80111c2:	4601      	mov	r1, r0
 80111c4:	6818      	ldr	r0, [r3, #0]
 80111c6:	f7ff bfd3 	b.w	8011170 <_raise_r>
 80111ca:	bf00      	nop
 80111cc:	20000064 	.word	0x20000064

080111d0 <_kill_r>:
 80111d0:	b538      	push	{r3, r4, r5, lr}
 80111d2:	4d07      	ldr	r5, [pc, #28]	@ (80111f0 <_kill_r+0x20>)
 80111d4:	2300      	movs	r3, #0
 80111d6:	4604      	mov	r4, r0
 80111d8:	4608      	mov	r0, r1
 80111da:	4611      	mov	r1, r2
 80111dc:	602b      	str	r3, [r5, #0]
 80111de:	f7f4 f93f 	bl	8005460 <_kill>
 80111e2:	1c43      	adds	r3, r0, #1
 80111e4:	d102      	bne.n	80111ec <_kill_r+0x1c>
 80111e6:	682b      	ldr	r3, [r5, #0]
 80111e8:	b103      	cbz	r3, 80111ec <_kill_r+0x1c>
 80111ea:	6023      	str	r3, [r4, #0]
 80111ec:	bd38      	pop	{r3, r4, r5, pc}
 80111ee:	bf00      	nop
 80111f0:	20004cc0 	.word	0x20004cc0

080111f4 <_getpid_r>:
 80111f4:	f7f4 b92c 	b.w	8005450 <_getpid>

080111f8 <_malloc_usable_size_r>:
 80111f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111fc:	1f18      	subs	r0, r3, #4
 80111fe:	2b00      	cmp	r3, #0
 8011200:	bfbc      	itt	lt
 8011202:	580b      	ldrlt	r3, [r1, r0]
 8011204:	18c0      	addlt	r0, r0, r3
 8011206:	4770      	bx	lr

08011208 <__swhatbuf_r>:
 8011208:	b570      	push	{r4, r5, r6, lr}
 801120a:	460c      	mov	r4, r1
 801120c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011210:	2900      	cmp	r1, #0
 8011212:	b096      	sub	sp, #88	@ 0x58
 8011214:	4615      	mov	r5, r2
 8011216:	461e      	mov	r6, r3
 8011218:	da0d      	bge.n	8011236 <__swhatbuf_r+0x2e>
 801121a:	89a3      	ldrh	r3, [r4, #12]
 801121c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011220:	f04f 0100 	mov.w	r1, #0
 8011224:	bf14      	ite	ne
 8011226:	2340      	movne	r3, #64	@ 0x40
 8011228:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801122c:	2000      	movs	r0, #0
 801122e:	6031      	str	r1, [r6, #0]
 8011230:	602b      	str	r3, [r5, #0]
 8011232:	b016      	add	sp, #88	@ 0x58
 8011234:	bd70      	pop	{r4, r5, r6, pc}
 8011236:	466a      	mov	r2, sp
 8011238:	f000 f848 	bl	80112cc <_fstat_r>
 801123c:	2800      	cmp	r0, #0
 801123e:	dbec      	blt.n	801121a <__swhatbuf_r+0x12>
 8011240:	9901      	ldr	r1, [sp, #4]
 8011242:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011246:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801124a:	4259      	negs	r1, r3
 801124c:	4159      	adcs	r1, r3
 801124e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011252:	e7eb      	b.n	801122c <__swhatbuf_r+0x24>

08011254 <__smakebuf_r>:
 8011254:	898b      	ldrh	r3, [r1, #12]
 8011256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011258:	079d      	lsls	r5, r3, #30
 801125a:	4606      	mov	r6, r0
 801125c:	460c      	mov	r4, r1
 801125e:	d507      	bpl.n	8011270 <__smakebuf_r+0x1c>
 8011260:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011264:	6023      	str	r3, [r4, #0]
 8011266:	6123      	str	r3, [r4, #16]
 8011268:	2301      	movs	r3, #1
 801126a:	6163      	str	r3, [r4, #20]
 801126c:	b003      	add	sp, #12
 801126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011270:	ab01      	add	r3, sp, #4
 8011272:	466a      	mov	r2, sp
 8011274:	f7ff ffc8 	bl	8011208 <__swhatbuf_r>
 8011278:	9f00      	ldr	r7, [sp, #0]
 801127a:	4605      	mov	r5, r0
 801127c:	4639      	mov	r1, r7
 801127e:	4630      	mov	r0, r6
 8011280:	f7ff f912 	bl	80104a8 <_malloc_r>
 8011284:	b948      	cbnz	r0, 801129a <__smakebuf_r+0x46>
 8011286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801128a:	059a      	lsls	r2, r3, #22
 801128c:	d4ee      	bmi.n	801126c <__smakebuf_r+0x18>
 801128e:	f023 0303 	bic.w	r3, r3, #3
 8011292:	f043 0302 	orr.w	r3, r3, #2
 8011296:	81a3      	strh	r3, [r4, #12]
 8011298:	e7e2      	b.n	8011260 <__smakebuf_r+0xc>
 801129a:	89a3      	ldrh	r3, [r4, #12]
 801129c:	6020      	str	r0, [r4, #0]
 801129e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112a2:	81a3      	strh	r3, [r4, #12]
 80112a4:	9b01      	ldr	r3, [sp, #4]
 80112a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80112aa:	b15b      	cbz	r3, 80112c4 <__smakebuf_r+0x70>
 80112ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112b0:	4630      	mov	r0, r6
 80112b2:	f000 f81d 	bl	80112f0 <_isatty_r>
 80112b6:	b128      	cbz	r0, 80112c4 <__smakebuf_r+0x70>
 80112b8:	89a3      	ldrh	r3, [r4, #12]
 80112ba:	f023 0303 	bic.w	r3, r3, #3
 80112be:	f043 0301 	orr.w	r3, r3, #1
 80112c2:	81a3      	strh	r3, [r4, #12]
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	431d      	orrs	r5, r3
 80112c8:	81a5      	strh	r5, [r4, #12]
 80112ca:	e7cf      	b.n	801126c <__smakebuf_r+0x18>

080112cc <_fstat_r>:
 80112cc:	b538      	push	{r3, r4, r5, lr}
 80112ce:	4d07      	ldr	r5, [pc, #28]	@ (80112ec <_fstat_r+0x20>)
 80112d0:	2300      	movs	r3, #0
 80112d2:	4604      	mov	r4, r0
 80112d4:	4608      	mov	r0, r1
 80112d6:	4611      	mov	r1, r2
 80112d8:	602b      	str	r3, [r5, #0]
 80112da:	f7f4 f921 	bl	8005520 <_fstat>
 80112de:	1c43      	adds	r3, r0, #1
 80112e0:	d102      	bne.n	80112e8 <_fstat_r+0x1c>
 80112e2:	682b      	ldr	r3, [r5, #0]
 80112e4:	b103      	cbz	r3, 80112e8 <_fstat_r+0x1c>
 80112e6:	6023      	str	r3, [r4, #0]
 80112e8:	bd38      	pop	{r3, r4, r5, pc}
 80112ea:	bf00      	nop
 80112ec:	20004cc0 	.word	0x20004cc0

080112f0 <_isatty_r>:
 80112f0:	b538      	push	{r3, r4, r5, lr}
 80112f2:	4d06      	ldr	r5, [pc, #24]	@ (801130c <_isatty_r+0x1c>)
 80112f4:	2300      	movs	r3, #0
 80112f6:	4604      	mov	r4, r0
 80112f8:	4608      	mov	r0, r1
 80112fa:	602b      	str	r3, [r5, #0]
 80112fc:	f7f4 f920 	bl	8005540 <_isatty>
 8011300:	1c43      	adds	r3, r0, #1
 8011302:	d102      	bne.n	801130a <_isatty_r+0x1a>
 8011304:	682b      	ldr	r3, [r5, #0]
 8011306:	b103      	cbz	r3, 801130a <_isatty_r+0x1a>
 8011308:	6023      	str	r3, [r4, #0]
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	20004cc0 	.word	0x20004cc0

08011310 <_init>:
 8011310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011312:	bf00      	nop
 8011314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011316:	bc08      	pop	{r3}
 8011318:	469e      	mov	lr, r3
 801131a:	4770      	bx	lr

0801131c <_fini>:
 801131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801131e:	bf00      	nop
 8011320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011322:	bc08      	pop	{r3}
 8011324:	469e      	mov	lr, r3
 8011326:	4770      	bx	lr
