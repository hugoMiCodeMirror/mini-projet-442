
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001374c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000295c  0801391c  0801391c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016278  08016278  000180dc  2**0
                  CONTENTS
  4 .ARM          00000008  08016278  08016278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016280  08016280  000180dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016280  08016280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016284  08016284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08016288  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094d8  200000dc  08016364  000180dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200095b4  08016364  000185b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000180dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000322a6  00000000  00000000  0001810c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d67  00000000  00000000  0004a3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ba8  00000000  00000000  00051120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000021d9  00000000  00000000  00053cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000094fa  00000000  00000000  00055ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003682d  00000000  00000000  0005f39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118b5f  00000000  00000000  00095bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ae727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bab0  00000000  00000000  001ae76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001ba21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000dc 	.word	0x200000dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013904 	.word	0x08013904

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000e0 	.word	0x200000e0
 800020c:	08013904 	.word	0x08013904

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3301      	adds	r3, #1
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8000510:	89fb      	ldrh	r3, [r7, #14]
 8000512:	021b      	lsls	r3, r3, #8
 8000514:	b21a      	sxth	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	b21b      	sxth	r3, r3
 800051c:	4313      	orrs	r3, r2
 800051e:	b21b      	sxth	r3, r3
 8000520:	81fb      	strh	r3, [r7, #14]
	return rv;
 8000522:	89fb      	ldrh	r3, [r7, #14]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3303      	adds	r3, #3
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	3202      	adds	r2, #2
 8000548:	7812      	ldrb	r2, [r2, #0]
 800054a:	4313      	orrs	r3, r2
 800054c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	3201      	adds	r2, #1
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	4313      	orrs	r3, r2
 800055a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7812      	ldrb	r2, [r2, #0]
 8000564:	4313      	orrs	r3, r2
 8000566:	60fb      	str	r3, [r7, #12]
	return rv;
 8000568:	68fb      	ldr	r3, [r7, #12]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	1c5a      	adds	r2, r3, #1
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	887a      	ldrh	r2, [r7, #2]
 800058a:	b2d2      	uxtb	r2, r2
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	887b      	ldrh	r3, [r7, #2]
 8000590:	0a1b      	lsrs	r3, r3, #8
 8000592:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	607a      	str	r2, [r7, #4]
 800059a:	887a      	ldrh	r2, [r7, #2]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	701a      	strb	r2, [r3, #0]
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	1c5a      	adds	r2, r3, #1
 80005cc:	607a      	str	r2, [r7, #4]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	b2d2      	uxtb	r2, r2
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	1c5a      	adds	r2, r3, #1
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	683a      	ldr	r2, [r7, #0]
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	607a      	str	r2, [r7, #4]
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	701a      	strb	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00d      	beq.n	800063a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	1c53      	adds	r3, r2, #1
 8000622:	613b      	str	r3, [r7, #16]
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	1c59      	adds	r1, r3, #1
 8000628:	6179      	str	r1, [r7, #20]
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3b01      	subs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f1      	bne.n	800061e <mem_cpy+0x1a>
	}
}
 800063a:	bf00      	nop
 800063c:	371c      	adds	r7, #28
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8000646:	b480      	push	{r7}
 8000648:	b087      	sub	sp, #28
 800064a:	af00      	add	r7, sp, #0
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	60b9      	str	r1, [r7, #8]
 8000650:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	617a      	str	r2, [r7, #20]
 800065c:	68ba      	ldr	r2, [r7, #8]
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3b01      	subs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d1f3      	bne.n	8000656 <mem_set+0x10>
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	371c      	adds	r7, #28
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800067c:	b480      	push	{r7}
 800067e:	b089      	sub	sp, #36	@ 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	61fb      	str	r3, [r7, #28]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	61fa      	str	r2, [r7, #28]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	61ba      	str	r2, [r7, #24]
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	1acb      	subs	r3, r1, r3
 80006a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <mem_cmp+0x40>
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0eb      	beq.n	8000694 <mem_cmp+0x18>

	return r;
 80006bc:	697b      	ldr	r3, [r7, #20]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3724      	adds	r7, #36	@ 0x24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80006ca:	b480      	push	{r7}
 80006cc:	b083      	sub	sp, #12
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80006d4:	e002      	b.n	80006dc <chk_chr+0x12>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d005      	beq.n	80006f0 <chk_chr+0x26>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d1f2      	bne.n	80006d6 <chk_chr+0xc>
	return *str;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d009      	beq.n	8000722 <lock_fs+0x22>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	4618      	mov	r0, r3
 8000714:	f00f feb7 	bl	8010486 <ff_req_grant>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <lock_fs+0x22>
 800071e:	2301      	movs	r3, #1
 8000720:	e000      	b.n	8000724 <lock_fs+0x24>
 8000722:	2300      	movs	r3, #0
}
 8000724:	4618      	mov	r0, r3
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00d      	beq.n	800075a <unlock_fs+0x2e>
 800073e:	78fb      	ldrb	r3, [r7, #3]
 8000740:	2b0c      	cmp	r3, #12
 8000742:	d00a      	beq.n	800075a <unlock_fs+0x2e>
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	2b0b      	cmp	r3, #11
 8000748:	d007      	beq.n	800075a <unlock_fs+0x2e>
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d004      	beq.n	800075a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	4618      	mov	r0, r3
 8000756:	f00f feab 	bl	80104b0 <ff_rel_grant>
	}
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e029      	b.n	80007cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8000778:	4a27      	ldr	r2, [pc, #156]	@ (8000818 <chk_lock+0xb4>)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d01d      	beq.n	80007c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8000786:	4a24      	ldr	r2, [pc, #144]	@ (8000818 <chk_lock+0xb4>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	011b      	lsls	r3, r3, #4
 800078c:	4413      	add	r3, r2
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	429a      	cmp	r2, r3
 8000796:	d116      	bne.n	80007c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8000798:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <chk_lock+0xb4>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	011b      	lsls	r3, r3, #4
 800079e:	4413      	add	r3, r2
 80007a0:	3304      	adds	r3, #4
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d10c      	bne.n	80007c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80007ac:	4a1a      	ldr	r2, [pc, #104]	@ (8000818 <chk_lock+0xb4>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4413      	add	r3, r2
 80007b4:	3308      	adds	r3, #8
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80007bc:	429a      	cmp	r2, r3
 80007be:	d102      	bne.n	80007c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80007c0:	e007      	b.n	80007d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d9d2      	bls.n	8000778 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d109      	bne.n	80007ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d102      	bne.n	80007e4 <chk_lock+0x80>
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d101      	bne.n	80007e8 <chk_lock+0x84>
 80007e4:	2300      	movs	r3, #0
 80007e6:	e010      	b.n	800080a <chk_lock+0xa6>
 80007e8:	2312      	movs	r3, #18
 80007ea:	e00e      	b.n	800080a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d108      	bne.n	8000804 <chk_lock+0xa0>
 80007f2:	4a09      	ldr	r2, [pc, #36]	@ (8000818 <chk_lock+0xb4>)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	4413      	add	r3, r2
 80007fa:	330c      	adds	r3, #12
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000802:	d101      	bne.n	8000808 <chk_lock+0xa4>
 8000804:	2310      	movs	r3, #16
 8000806:	e000      	b.n	800080a <chk_lock+0xa6>
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000100 	.word	0x20000100

0800081c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e002      	b.n	800082e <enq_lock+0x12>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3301      	adds	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d806      	bhi.n	8000842 <enq_lock+0x26>
 8000834:	4a09      	ldr	r2, [pc, #36]	@ (800085c <enq_lock+0x40>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	4413      	add	r3, r2
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f2      	bne.n	8000828 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b02      	cmp	r3, #2
 8000846:	bf14      	ite	ne
 8000848:	2301      	movne	r3, #1
 800084a:	2300      	moveq	r3, #0
 800084c:	b2db      	uxtb	r3, r3
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	20000100 	.word	0x20000100

08000860 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e01f      	b.n	80008b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8000870:	4a41      	ldr	r2, [pc, #260]	@ (8000978 <inc_lock+0x118>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	011b      	lsls	r3, r3, #4
 8000876:	4413      	add	r3, r2
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d113      	bne.n	80008aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8000882:	4a3d      	ldr	r2, [pc, #244]	@ (8000978 <inc_lock+0x118>)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	011b      	lsls	r3, r3, #4
 8000888:	4413      	add	r3, r2
 800088a:	3304      	adds	r3, #4
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8000892:	429a      	cmp	r2, r3
 8000894:	d109      	bne.n	80008aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8000896:	4a38      	ldr	r2, [pc, #224]	@ (8000978 <inc_lock+0x118>)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	011b      	lsls	r3, r3, #4
 800089c:	4413      	add	r3, r2
 800089e:	3308      	adds	r3, #8
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d006      	beq.n	80008b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d9dc      	bls.n	8000870 <inc_lock+0x10>
 80008b6:	e000      	b.n	80008ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80008b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d132      	bne.n	8000926 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	e002      	b.n	80008cc <inc_lock+0x6c>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d806      	bhi.n	80008e0 <inc_lock+0x80>
 80008d2:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <inc_lock+0x118>)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	011b      	lsls	r3, r3, #4
 80008d8:	4413      	add	r3, r2
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1f2      	bne.n	80008c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d101      	bne.n	80008ea <inc_lock+0x8a>
 80008e6:	2300      	movs	r3, #0
 80008e8:	e040      	b.n	800096c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4922      	ldr	r1, [pc, #136]	@ (8000978 <inc_lock+0x118>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	011b      	lsls	r3, r3, #4
 80008f4:	440b      	add	r3, r1
 80008f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	491e      	ldr	r1, [pc, #120]	@ (8000978 <inc_lock+0x118>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	440b      	add	r3, r1
 8000904:	3304      	adds	r3, #4
 8000906:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	695a      	ldr	r2, [r3, #20]
 800090c:	491a      	ldr	r1, [pc, #104]	@ (8000978 <inc_lock+0x118>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	440b      	add	r3, r1
 8000914:	3308      	adds	r3, #8
 8000916:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8000918:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <inc_lock+0x118>)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	4413      	add	r3, r2
 8000920:	330c      	adds	r3, #12
 8000922:	2200      	movs	r2, #0
 8000924:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d009      	beq.n	8000940 <inc_lock+0xe0>
 800092c:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <inc_lock+0x118>)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	4413      	add	r3, r2
 8000934:	330c      	adds	r3, #12
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <inc_lock+0xe0>
 800093c:	2300      	movs	r3, #0
 800093e:	e015      	b.n	800096c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d108      	bne.n	8000958 <inc_lock+0xf8>
 8000946:	4a0c      	ldr	r2, [pc, #48]	@ (8000978 <inc_lock+0x118>)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	011b      	lsls	r3, r3, #4
 800094c:	4413      	add	r3, r2
 800094e:	330c      	adds	r3, #12
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	b29a      	uxth	r2, r3
 8000956:	e001      	b.n	800095c <inc_lock+0xfc>
 8000958:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800095c:	4906      	ldr	r1, [pc, #24]	@ (8000978 <inc_lock+0x118>)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	011b      	lsls	r3, r3, #4
 8000962:	440b      	add	r3, r1
 8000964:	330c      	adds	r3, #12
 8000966:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	20000100 	.word	0x20000100

0800097c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3b01      	subs	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d825      	bhi.n	80009dc <dec_lock+0x60>
		n = Files[i].ctr;
 8000990:	4a17      	ldr	r2, [pc, #92]	@ (80009f0 <dec_lock+0x74>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	011b      	lsls	r3, r3, #4
 8000996:	4413      	add	r3, r2
 8000998:	330c      	adds	r3, #12
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800099e:	89fb      	ldrh	r3, [r7, #14]
 80009a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009a4:	d101      	bne.n	80009aa <dec_lock+0x2e>
 80009a6:	2300      	movs	r3, #0
 80009a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <dec_lock+0x3a>
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80009b6:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <dec_lock+0x74>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	4413      	add	r3, r2
 80009be:	330c      	adds	r3, #12
 80009c0:	89fa      	ldrh	r2, [r7, #14]
 80009c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d105      	bne.n	80009d6 <dec_lock+0x5a>
 80009ca:	4a09      	ldr	r2, [pc, #36]	@ (80009f0 <dec_lock+0x74>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	4413      	add	r3, r2
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	737b      	strb	r3, [r7, #13]
 80009da:	e001      	b.n	80009e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80009dc:	2302      	movs	r3, #2
 80009de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80009e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000100 	.word	0x20000100

080009f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e010      	b.n	8000a24 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8000a02:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <clear_lock+0x44>)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	4413      	add	r3, r2
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d105      	bne.n	8000a1e <clear_lock+0x2a>
 8000a12:	4a09      	ldr	r2, [pc, #36]	@ (8000a38 <clear_lock+0x44>)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	4413      	add	r3, r2
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d9eb      	bls.n	8000a02 <clear_lock+0xe>
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	20000100 	.word	0x20000100

08000a3c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	78db      	ldrb	r3, [r3, #3]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d034      	beq.n	8000aba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	7858      	ldrb	r0, [r3, #1]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000a60:	2301      	movs	r3, #1
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	f00f fc4a 	bl	80102fc <disk_write>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d002      	beq.n	8000a74 <sync_window+0x38>
			res = FR_DISK_ERR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e022      	b.n	8000aba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	1ad2      	subs	r2, r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d217      	bcs.n	8000aba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	789b      	ldrb	r3, [r3, #2]
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	e010      	b.n	8000ab4 <sync_window+0x78>
					wsect += fs->fsize;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	4413      	add	r3, r2
 8000a9a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7858      	ldrb	r0, [r3, #1]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	f00f fc27 	bl	80102fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d8eb      	bhi.n	8000a92 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d01b      	beq.n	8000b14 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ffad 	bl	8000a3c <sync_window>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d113      	bne.n	8000b14 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	7858      	ldrb	r0, [r3, #1]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000af6:	2301      	movs	r3, #1
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	f00f fbdf 	bl	80102bc <disk_read>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d004      	beq.n	8000b0e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff87 	bl	8000a3c <sync_window>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d158      	bne.n	8000bea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d148      	bne.n	8000bd2 <sync_fs+0xb2>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	791b      	ldrb	r3, [r3, #4]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d144      	bne.n	8000bd2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3334      	adds	r3, #52	@ 0x34
 8000b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff fd77 	bl	8000646 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3334      	adds	r3, #52	@ 0x34
 8000b5c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8000b60:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fd06 	bl	8000576 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3334      	adds	r3, #52	@ 0x34
 8000b6e:	4921      	ldr	r1, [pc, #132]	@ (8000bf4 <sync_fs+0xd4>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fd1b 	bl	80005ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3334      	adds	r3, #52	@ 0x34
 8000b7a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8000b7e:	491e      	ldr	r1, [pc, #120]	@ (8000bf8 <sync_fs+0xd8>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fd13 	bl	80005ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3334      	adds	r3, #52	@ 0x34
 8000b8a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4619      	mov	r1, r3
 8000b94:	4610      	mov	r0, r2
 8000b96:	f7ff fd09 	bl	80005ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3334      	adds	r3, #52	@ 0x34
 8000b9e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4610      	mov	r0, r2
 8000baa:	f7ff fcff 	bl	80005ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	7858      	ldrb	r0, [r3, #1]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f00f fb98 	bl	80102fc <disk_write>
			fs->fsi_flag = 0;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	785b      	ldrb	r3, [r3, #1]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f00f fbae 	bl	801033c <disk_ioctl>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <sync_fs+0xca>
 8000be6:	2301      	movs	r3, #1
 8000be8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	41615252 	.word	0x41615252
 8000bf8:	61417272 	.word	0x61417272

08000bfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	3b02      	subs	r3, #2
 8000c0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	3b02      	subs	r3, #2
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d301      	bcc.n	8000c1c <clust2sect+0x20>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e008      	b.n	8000c2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	895b      	ldrh	r3, [r3, #10]
 8000c20:	461a      	mov	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	fb03 f202 	mul.w	r2, r3, r2
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2c:	4413      	add	r3, r2
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d904      	bls.n	8000c5a <get_fat+0x20>
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	683a      	ldr	r2, [r7, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d302      	bcc.n	8000c60 <get_fat+0x26>
		val = 1;	/* Internal error */
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	e08e      	b.n	8000d7e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8000c60:	f04f 33ff 	mov.w	r3, #4294967295
 8000c64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d061      	beq.n	8000d32 <get_fat+0xf8>
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	dc7b      	bgt.n	8000d6a <get_fat+0x130>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d002      	beq.n	8000c7c <get_fat+0x42>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d041      	beq.n	8000cfe <get_fat+0xc4>
 8000c7a:	e076      	b.n	8000d6a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	085b      	lsrs	r3, r3, #1
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	0a5b      	lsrs	r3, r3, #9
 8000c92:	4413      	add	r3, r2
 8000c94:	4619      	mov	r1, r3
 8000c96:	6938      	ldr	r0, [r7, #16]
 8000c98:	f7ff ff14 	bl	8000ac4 <move_window>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d166      	bne.n	8000d70 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	60fa      	str	r2, [r7, #12]
 8000ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4413      	add	r3, r2
 8000cb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000cb4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	0a5b      	lsrs	r3, r3, #9
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	6938      	ldr	r0, [r7, #16]
 8000cc4:	f7ff fefe 	bl	8000ac4 <move_window>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d152      	bne.n	8000d74 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000cdc:	021b      	lsls	r3, r3, #8
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <get_fat+0xba>
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	091b      	lsrs	r3, r3, #4
 8000cf2:	e002      	b.n	8000cfa <get_fat+0xc0>
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfa:	617b      	str	r3, [r7, #20]
			break;
 8000cfc:	e03f      	b.n	8000d7e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	4413      	add	r3, r2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6938      	ldr	r0, [r7, #16]
 8000d0c:	f7ff feda 	bl	8000ac4 <move_window>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d130      	bne.n	8000d78 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8000d24:	4413      	add	r3, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fbea 	bl	8000500 <ld_word>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	617b      	str	r3, [r7, #20]
			break;
 8000d30:	e025      	b.n	8000d7e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	09db      	lsrs	r3, r3, #7
 8000d3a:	4413      	add	r3, r2
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	6938      	ldr	r0, [r7, #16]
 8000d40:	f7ff fec0 	bl	8000ac4 <move_window>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d118      	bne.n	8000d7c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8000d58:	4413      	add	r3, r2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fbe8 	bl	8000530 <ld_dword>
 8000d60:	4603      	mov	r3, r0
 8000d62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000d66:	617b      	str	r3, [r7, #20]
			break;
 8000d68:	e009      	b.n	8000d7e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e006      	b.n	8000d7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000d70:	bf00      	nop
 8000d72:	e004      	b.n	8000d7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8000d74:	bf00      	nop
 8000d76:	e002      	b.n	8000d7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8000d78:	bf00      	nop
 8000d7a:	e000      	b.n	8000d7e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8000d7c:	bf00      	nop
		}
	}

	return val;
 8000d7e:	697b      	ldr	r3, [r7, #20]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8000d94:	2302      	movs	r3, #2
 8000d96:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	f240 80d9 	bls.w	8000f52 <put_fat+0x1ca>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	f080 80d3 	bcs.w	8000f52 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	f000 8096 	beq.w	8000ee2 <put_fat+0x15a>
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	f300 80cb 	bgt.w	8000f52 <put_fat+0x1ca>
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d002      	beq.n	8000dc6 <put_fat+0x3e>
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d06e      	beq.n	8000ea2 <put_fat+0x11a>
 8000dc4:	e0c5      	b.n	8000f52 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	085b      	lsrs	r3, r3, #1
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	0a5b      	lsrs	r3, r3, #9
 8000ddc:	4413      	add	r3, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff fe6f 	bl	8000ac4 <move_window>
 8000de6:	4603      	mov	r3, r0
 8000de8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000dea:	7ffb      	ldrb	r3, [r7, #31]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f040 80a9 	bne.w	8000f44 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	1c59      	adds	r1, r3, #1
 8000dfc:	61b9      	str	r1, [r7, #24]
 8000dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e02:	4413      	add	r3, r2
 8000e04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00d      	beq.n	8000e2c <put_fat+0xa4>
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	b25a      	sxtb	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	4313      	orrs	r3, r2
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	e001      	b.n	8000e30 <put_fat+0xa8>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	697a      	ldr	r2, [r7, #20]
 8000e32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	2201      	movs	r2, #1
 8000e38:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	0a5b      	lsrs	r3, r3, #9
 8000e42:	4413      	add	r3, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff fe3c 	bl	8000ac4 <move_window>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000e50:	7ffb      	ldrb	r3, [r7, #31]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d178      	bne.n	8000f48 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e62:	4413      	add	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <put_fat+0xf0>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	e00e      	b.n	8000e96 <put_fat+0x10e>
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	f023 030f 	bic.w	r3, r3, #15
 8000e82:	b25a      	sxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	4313      	orrs	r3, r2
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	697a      	ldr	r2, [r7, #20]
 8000e98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	70da      	strb	r2, [r3, #3]
			break;
 8000ea0:	e057      	b.n	8000f52 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	4413      	add	r3, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff fe08 	bl	8000ac4 <move_window>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000eb8:	7ffb      	ldrb	r3, [r7, #31]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d146      	bne.n	8000f4c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8000ecc:	4413      	add	r3, r2
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	b292      	uxth	r2, r2
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fb4e 	bl	8000576 <st_word>
			fs->wflag = 1;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	2201      	movs	r2, #1
 8000ede:	70da      	strb	r2, [r3, #3]
			break;
 8000ee0:	e037      	b.n	8000f52 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	09db      	lsrs	r3, r3, #7
 8000eea:	4413      	add	r3, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff fde8 	bl	8000ac4 <move_window>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8000ef8:	7ffb      	ldrb	r3, [r7, #31]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d128      	bne.n	8000f50 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8000f12:	4413      	add	r3, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fb0b 	bl	8000530 <ld_dword>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8000f20:	4323      	orrs	r3, r4
 8000f22:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8000f32:	4413      	add	r3, r2
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fb38 	bl	80005ac <st_dword>
			fs->wflag = 1;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	70da      	strb	r2, [r3, #3]
			break;
 8000f42:	e006      	b.n	8000f52 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8000f44:	bf00      	nop
 8000f46:	e004      	b.n	8000f52 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8000f48:	bf00      	nop
 8000f4a:	e002      	b.n	8000f52 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8000f4c:	bf00      	nop
 8000f4e:	e000      	b.n	8000f52 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8000f50:	bf00      	nop
		}
	}
	return res;
 8000f52:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3724      	adds	r7, #36	@ 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}

08000f5c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d904      	bls.n	8000f82 <remove_chain+0x26>
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d301      	bcc.n	8000f86 <remove_chain+0x2a>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e04b      	b.n	800101e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00c      	beq.n	8000fa6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	69b8      	ldr	r0, [r7, #24]
 8000f94:	f7ff fef8 	bl	8000d88 <put_fat>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8000f9c:	7ffb      	ldrb	r3, [r7, #31]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <remove_chain+0x4a>
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	e03b      	b.n	800101e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	68f8      	ldr	r0, [r7, #12]
 8000faa:	f7ff fe46 	bl	8000c3a <get_fat>
 8000fae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d031      	beq.n	800101a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <remove_chain+0x64>
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e02e      	b.n	800101e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc6:	d101      	bne.n	8000fcc <remove_chain+0x70>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e028      	b.n	800101e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8000fcc:	2200      	movs	r2, #0
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	69b8      	ldr	r0, [r7, #24]
 8000fd2:	f7ff fed9 	bl	8000d88 <put_fat>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8000fda:	7ffb      	ldrb	r3, [r7, #31]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <remove_chain+0x88>
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	e01c      	b.n	800101e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	695a      	ldr	r2, [r3, #20]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	3b02      	subs	r3, #2
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d20b      	bcs.n	800100a <remove_chain+0xae>
			fs->free_clst++;
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	b2da      	uxtb	r2, r3
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3c6      	bcc.n	8000fa6 <remove_chain+0x4a>
 8001018:	e000      	b.n	800101c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800101a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b088      	sub	sp, #32
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10d      	bne.n	8001058 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <create_chain+0x2c>
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	429a      	cmp	r2, r3
 8001050:	d31b      	bcc.n	800108a <create_chain+0x64>
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
 8001056:	e018      	b.n	800108a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fded 	bl	8000c3a <get_fat>
 8001060:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d801      	bhi.n	800106c <create_chain+0x46>
 8001068:	2301      	movs	r3, #1
 800106a:	e070      	b.n	800114e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001072:	d101      	bne.n	8001078 <create_chain+0x52>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	e06a      	b.n	800114e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	429a      	cmp	r2, r3
 8001080:	d201      	bcs.n	8001086 <create_chain+0x60>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	e063      	b.n	800114e <create_chain+0x128>
		scl = clst;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	429a      	cmp	r2, r3
 800109c:	d307      	bcc.n	80010ae <create_chain+0x88>
				ncl = 2;
 800109e:	2302      	movs	r3, #2
 80010a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d901      	bls.n	80010ae <create_chain+0x88>
 80010aa:	2300      	movs	r3, #0
 80010ac:	e04f      	b.n	800114e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80010ae:	69f9      	ldr	r1, [r7, #28]
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff fdc2 	bl	8000c3a <get_fat>
 80010b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00e      	beq.n	80010dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d003      	beq.n	80010cc <create_chain+0xa6>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ca:	d101      	bne.n	80010d0 <create_chain+0xaa>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	e03e      	b.n	800114e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d1da      	bne.n	800108e <create_chain+0x68>
 80010d8:	2300      	movs	r3, #0
 80010da:	e038      	b.n	800114e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80010dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	69f9      	ldr	r1, [r7, #28]
 80010e4:	6938      	ldr	r0, [r7, #16]
 80010e6:	f7ff fe4f 	bl	8000d88 <put_fat>
 80010ea:	4603      	mov	r3, r0
 80010ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d109      	bne.n	8001108 <create_chain+0xe2>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	6839      	ldr	r1, [r7, #0]
 80010fe:	6938      	ldr	r0, [r7, #16]
 8001100:	f7ff fe42 	bl	8000d88 <put_fat>
 8001104:	4603      	mov	r3, r0
 8001106:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d116      	bne.n	800113c <create_chain+0x116>
		fs->last_clst = ncl;
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	695a      	ldr	r2, [r3, #20]
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	3b02      	subs	r3, #2
 800111e:	429a      	cmp	r2, r3
 8001120:	d804      	bhi.n	800112c <create_chain+0x106>
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	1e5a      	subs	r2, r3, #1
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	791b      	ldrb	r3, [r3, #4]
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	b2da      	uxtb	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	711a      	strb	r2, [r3, #4]
 800113a:	e007      	b.n	800114c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d102      	bne.n	8001148 <create_chain+0x122>
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e000      	b.n	800114a <create_chain+0x124>
 8001148:	2301      	movs	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800114c:	69fb      	ldr	r3, [r7, #28]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8001156:	b480      	push	{r7}
 8001158:	b087      	sub	sp, #28
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116a:	3304      	adds	r3, #4
 800116c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	0a5b      	lsrs	r3, r3, #9
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	8952      	ldrh	r2, [r2, #10]
 8001176:	fbb3 f3f2 	udiv	r3, r3, r2
 800117a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1d1a      	adds	r2, r3, #4
 8001180:	613a      	str	r2, [r7, #16]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <clmt_clust+0x3a>
 800118c:	2300      	movs	r3, #0
 800118e:	e010      	b.n	80011b2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	429a      	cmp	r2, r3
 8001196:	d307      	bcc.n	80011a8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	3304      	adds	r3, #4
 80011a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80011a6:	e7e9      	b.n	800117c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80011a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4413      	add	r3, r2
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	371c      	adds	r7, #28
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80011d4:	d204      	bcs.n	80011e0 <dir_sdi+0x22>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80011e0:	2302      	movs	r3, #2
 80011e2:	e063      	b.n	80012ac <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d106      	bne.n	8001204 <dir_sdi+0x46>
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d902      	bls.n	8001204 <dir_sdi+0x46>
		clst = fs->dirbase;
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001202:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10c      	bne.n	8001224 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	095b      	lsrs	r3, r3, #5
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	8912      	ldrh	r2, [r2, #8]
 8001212:	4293      	cmp	r3, r2
 8001214:	d301      	bcc.n	800121a <dir_sdi+0x5c>
 8001216:	2302      	movs	r3, #2
 8001218:	e048      	b.n	80012ac <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	61da      	str	r2, [r3, #28]
 8001222:	e029      	b.n	8001278 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	895b      	ldrh	r3, [r3, #10]
 8001228:	025b      	lsls	r3, r3, #9
 800122a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800122c:	e019      	b.n	8001262 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6979      	ldr	r1, [r7, #20]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fd01 	bl	8000c3a <get_fat>
 8001238:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d101      	bne.n	8001246 <dir_sdi+0x88>
 8001242:	2301      	movs	r3, #1
 8001244:	e032      	b.n	80012ac <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d904      	bls.n	8001256 <dir_sdi+0x98>
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	429a      	cmp	r2, r3
 8001254:	d301      	bcc.n	800125a <dir_sdi+0x9c>
 8001256:	2302      	movs	r3, #2
 8001258:	e028      	b.n	80012ac <dir_sdi+0xee>
			ofs -= csz;
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	429a      	cmp	r2, r3
 8001268:	d2e1      	bcs.n	800122e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800126a:	6979      	ldr	r1, [r7, #20]
 800126c:	6938      	ldr	r0, [r7, #16]
 800126e:	f7ff fcc5 	bl	8000bfc <clust2sect>
 8001272:	4602      	mov	r2, r0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <dir_sdi+0xcc>
 8001286:	2302      	movs	r3, #2
 8001288:	e010      	b.n	80012ac <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69da      	ldr	r2, [r3, #28]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	0a5b      	lsrs	r3, r3, #9
 8001292:	441a      	add	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012a4:	441a      	add	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	3320      	adds	r3, #32
 80012ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <dir_next+0x28>
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80012da:	d301      	bcc.n	80012e0 <dir_next+0x2c>
 80012dc:	2304      	movs	r3, #4
 80012de:	e0aa      	b.n	8001436 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 8098 	bne.w	800141c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	1c5a      	adds	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10b      	bne.n	8001316 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	095b      	lsrs	r3, r3, #5
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	8912      	ldrh	r2, [r2, #8]
 8001306:	4293      	cmp	r3, r2
 8001308:	f0c0 8088 	bcc.w	800141c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
 8001312:	2304      	movs	r3, #4
 8001314:	e08f      	b.n	8001436 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	0a5b      	lsrs	r3, r3, #9
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	8952      	ldrh	r2, [r2, #10]
 800131e:	3a01      	subs	r2, #1
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d17a      	bne.n	800141c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f7ff fc83 	bl	8000c3a <get_fat>
 8001334:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d801      	bhi.n	8001340 <dir_next+0x8c>
 800133c:	2302      	movs	r3, #2
 800133e:	e07a      	b.n	8001436 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001346:	d101      	bne.n	800134c <dir_next+0x98>
 8001348:	2301      	movs	r3, #1
 800134a:	e074      	b.n	8001436 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	429a      	cmp	r2, r3
 8001354:	d358      	bcc.n	8001408 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d104      	bne.n	8001366 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
 8001362:	2304      	movs	r3, #4
 8001364:	e067      	b.n	8001436 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4619      	mov	r1, r3
 800136e:	4610      	mov	r0, r2
 8001370:	f7ff fe59 	bl	8001026 <create_chain>
 8001374:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <dir_next+0xcc>
 800137c:	2307      	movs	r3, #7
 800137e:	e05a      	b.n	8001436 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <dir_next+0xd6>
 8001386:	2302      	movs	r3, #2
 8001388:	e055      	b.n	8001436 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001390:	d101      	bne.n	8001396 <dir_next+0xe2>
 8001392:	2301      	movs	r3, #1
 8001394:	e04f      	b.n	8001436 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7ff fb50 	bl	8000a3c <sync_window>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <dir_next+0xf2>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e047      	b.n	8001436 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	3334      	adds	r3, #52	@ 0x34
 80013aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f948 	bl	8000646 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	6979      	ldr	r1, [r7, #20]
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff fc1d 	bl	8000bfc <clust2sect>
 80013c2:	4602      	mov	r2, r0
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c8:	e012      	b.n	80013f0 <dir_next+0x13c>
						fs->wflag = 1;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2201      	movs	r2, #1
 80013ce:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f7ff fb33 	bl	8000a3c <sync_window>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <dir_next+0x12c>
 80013dc:	2301      	movs	r3, #1
 80013de:	e02a      	b.n	8001436 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	3301      	adds	r3, #1
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	895b      	ldrh	r3, [r3, #10]
 80013f4:	461a      	mov	r2, r3
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d3e6      	bcc.n	80013ca <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad2      	subs	r2, r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800140e:	6979      	ldr	r1, [r7, #20]
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff fbf3 	bl	8000bfc <clust2sect>
 8001416:	4602      	mov	r2, r0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800142e:	441a      	add	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800144e:	2100      	movs	r1, #0
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff feb4 	bl	80011be <dir_sdi>
 8001456:	4603      	mov	r3, r0
 8001458:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d12b      	bne.n	80014b8 <dir_alloc+0x7a>
		n = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4619      	mov	r1, r3
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f7ff fb2a 	bl	8000ac4 <move_window>
 8001470:	4603      	mov	r3, r0
 8001472:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d11d      	bne.n	80014b6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2be5      	cmp	r3, #229	@ 0xe5
 8001482:	d004      	beq.n	800148e <dir_alloc+0x50>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d107      	bne.n	800149e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	3301      	adds	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d102      	bne.n	80014a2 <dir_alloc+0x64>
 800149c:	e00c      	b.n	80014b8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80014a2:	2101      	movs	r1, #1
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff ff05 	bl	80012b4 <dir_next>
 80014aa:	4603      	mov	r3, r0
 80014ac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0d7      	beq.n	8001464 <dir_alloc+0x26>
 80014b4:	e000      	b.n	80014b8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80014b6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d101      	bne.n	80014c2 <dir_alloc+0x84>
 80014be:	2307      	movs	r3, #7
 80014c0:	75fb      	strb	r3, [r7, #23]
	return res;
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	331a      	adds	r3, #26
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f810 	bl	8000500 <ld_word>
 80014e0:	4603      	mov	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d109      	bne.n	8001500 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	3314      	adds	r3, #20
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f805 	bl	8000500 <ld_word>
 80014f6:	4603      	mov	r3, r0
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8001500:	68fb      	ldr	r3, [r7, #12]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	331a      	adds	r3, #26
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	b292      	uxth	r2, r2
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f828 	bl	8000576 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d109      	bne.n	8001542 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	f103 0214 	add.w	r2, r3, #20
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	b29b      	uxth	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	4610      	mov	r0, r2
 800153e:	f7ff f81a 	bl	8000576 <st_word>
	}
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b086      	sub	sp, #24
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8001558:	2100      	movs	r1, #0
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff fe2f 	bl	80011be <dir_sdi>
 8001560:	4603      	mov	r3, r0
 8001562:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8001564:	7dfb      	ldrb	r3, [r7, #23]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <dir_find+0x24>
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	e03e      	b.n	80015ec <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	4619      	mov	r1, r3
 8001574:	6938      	ldr	r0, [r7, #16]
 8001576:	f7ff faa5 	bl	8000ac4 <move_window>
 800157a:	4603      	mov	r3, r0
 800157c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d12f      	bne.n	80015e4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <dir_find+0x4e>
 8001592:	2304      	movs	r3, #4
 8001594:	75fb      	strb	r3, [r7, #23]
 8001596:	e028      	b.n	80015ea <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	330b      	adds	r3, #11
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	330b      	adds	r3, #11
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10a      	bne.n	80015d0 <dir_find+0x86>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a18      	ldr	r0, [r3, #32]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3324      	adds	r3, #36	@ 0x24
 80015c2:	220b      	movs	r2, #11
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff f859 	bl	800067c <mem_cmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00b      	beq.n	80015e8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80015d0:	2100      	movs	r1, #0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fe6e 	bl	80012b4 <dir_next>
 80015d8:	4603      	mov	r3, r0
 80015da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0c5      	beq.n	800156e <dir_find+0x24>
 80015e2:	e002      	b.n	80015ea <dir_find+0xa0>
		if (res != FR_OK) break;
 80015e4:	bf00      	nop
 80015e6:	e000      	b.n	80015ea <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80015e8:	bf00      	nop

	return res;
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8001602:	2101      	movs	r1, #1
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff1a 	bl	800143e <dir_alloc>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d11c      	bne.n	800164e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	4619      	mov	r1, r3
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f7ff fa52 	bl	8000ac4 <move_window>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d111      	bne.n	800164e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	2220      	movs	r2, #32
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f807 	bl	8000646 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a18      	ldr	r0, [r3, #32]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3324      	adds	r3, #36	@ 0x24
 8001640:	220b      	movs	r2, #11
 8001642:	4619      	mov	r1, r3
 8001644:	f7fe ffde 	bl	8000604 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2201      	movs	r2, #1
 800164c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3324      	adds	r3, #36	@ 0x24
 800166c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800166e:	220b      	movs	r2, #11
 8001670:	2120      	movs	r1, #32
 8001672:	68b8      	ldr	r0, [r7, #8]
 8001674:	f7fe ffe7 	bl	8000646 <mem_set>
	si = i = 0; ni = 8;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	2308      	movs	r3, #8
 8001682:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	61fa      	str	r2, [r7, #28]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4413      	add	r3, r2
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001692:	7efb      	ldrb	r3, [r7, #27]
 8001694:	2b20      	cmp	r3, #32
 8001696:	d94e      	bls.n	8001736 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8001698:	7efb      	ldrb	r3, [r7, #27]
 800169a:	2b2f      	cmp	r3, #47	@ 0x2f
 800169c:	d006      	beq.n	80016ac <create_name+0x54>
 800169e:	7efb      	ldrb	r3, [r7, #27]
 80016a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80016a2:	d110      	bne.n	80016c6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80016a4:	e002      	b.n	80016ac <create_name+0x54>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80016b6:	d0f6      	beq.n	80016a6 <create_name+0x4e>
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80016c2:	d0f0      	beq.n	80016a6 <create_name+0x4e>
			break;
 80016c4:	e038      	b.n	8001738 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80016c6:	7efb      	ldrb	r3, [r7, #27]
 80016c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80016ca:	d003      	beq.n	80016d4 <create_name+0x7c>
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d30c      	bcc.n	80016ee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b0b      	cmp	r3, #11
 80016d8:	d002      	beq.n	80016e0 <create_name+0x88>
 80016da:	7efb      	ldrb	r3, [r7, #27]
 80016dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80016de:	d001      	beq.n	80016e4 <create_name+0x8c>
 80016e0:	2306      	movs	r3, #6
 80016e2:	e044      	b.n	800176e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80016e4:	2308      	movs	r3, #8
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	230b      	movs	r3, #11
 80016ea:	617b      	str	r3, [r7, #20]
			continue;
 80016ec:	e022      	b.n	8001734 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80016ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da04      	bge.n	8001700 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80016f6:	7efb      	ldrb	r3, [r7, #27]
 80016f8:	3b80      	subs	r3, #128	@ 0x80
 80016fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001778 <create_name+0x120>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8001700:	7efb      	ldrb	r3, [r7, #27]
 8001702:	4619      	mov	r1, r3
 8001704:	481d      	ldr	r0, [pc, #116]	@ (800177c <create_name+0x124>)
 8001706:	f7fe ffe0 	bl	80006ca <chk_chr>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <create_name+0xbc>
 8001710:	2306      	movs	r3, #6
 8001712:	e02c      	b.n	800176e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8001714:	7efb      	ldrb	r3, [r7, #27]
 8001716:	2b60      	cmp	r3, #96	@ 0x60
 8001718:	d905      	bls.n	8001726 <create_name+0xce>
 800171a:	7efb      	ldrb	r3, [r7, #27]
 800171c:	2b7a      	cmp	r3, #122	@ 0x7a
 800171e:	d802      	bhi.n	8001726 <create_name+0xce>
 8001720:	7efb      	ldrb	r3, [r7, #27]
 8001722:	3b20      	subs	r3, #32
 8001724:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	613a      	str	r2, [r7, #16]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	4413      	add	r3, r2
 8001730:	7efa      	ldrb	r2, [r7, #27]
 8001732:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8001734:	e7a6      	b.n	8001684 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8001736:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	441a      	add	r2, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <create_name+0xf4>
 8001748:	2306      	movs	r3, #6
 800174a:	e010      	b.n	800176e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2be5      	cmp	r3, #229	@ 0xe5
 8001752:	d102      	bne.n	800175a <create_name+0x102>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2205      	movs	r2, #5
 8001758:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800175a:	7efb      	ldrb	r3, [r7, #27]
 800175c:	2b20      	cmp	r3, #32
 800175e:	d801      	bhi.n	8001764 <create_name+0x10c>
 8001760:	2204      	movs	r2, #4
 8001762:	e000      	b.n	8001766 <create_name+0x10e>
 8001764:	2200      	movs	r2, #0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	330b      	adds	r3, #11
 800176a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800176c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800176e:	4618      	mov	r0, r3
 8001770:	3720      	adds	r7, #32
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	08013b2c 	.word	0x08013b2c
 800177c:	0801391c 	.word	0x0801391c

08001780 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8001794:	e002      	b.n	800179c <follow_path+0x1c>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80017a2:	d0f8      	beq.n	8001796 <follow_path+0x16>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80017aa:	d0f4      	beq.n	8001796 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b1f      	cmp	r3, #31
 80017b8:	d80a      	bhi.n	80017d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2280      	movs	r2, #128	@ 0x80
 80017be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80017c2:	2100      	movs	r1, #0
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff fcfa 	bl	80011be <dir_sdi>
 80017ca:	4603      	mov	r3, r0
 80017cc:	75fb      	strb	r3, [r7, #23]
 80017ce:	e043      	b.n	8001858 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80017d0:	463b      	mov	r3, r7
 80017d2:	4619      	mov	r1, r3
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ff3f 	bl	8001658 <create_name>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d134      	bne.n	800184e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff feb0 	bl	800154a <dir_find>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80017f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80017f6:	7dfb      	ldrb	r3, [r7, #23]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d00a      	beq.n	8001812 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80017fc:	7dfb      	ldrb	r3, [r7, #23]
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d127      	bne.n	8001852 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8001802:	7afb      	ldrb	r3, [r7, #11]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d122      	bne.n	8001852 <follow_path+0xd2>
 800180c:	2305      	movs	r3, #5
 800180e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8001810:	e01f      	b.n	8001852 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001812:	7afb      	ldrb	r3, [r7, #11]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d11c      	bne.n	8001856 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	799b      	ldrb	r3, [r3, #6]
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8001828:	2305      	movs	r3, #5
 800182a:	75fb      	strb	r3, [r7, #23]
 800182c:	e014      	b.n	8001858 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183c:	4413      	add	r3, r2
 800183e:	4619      	mov	r1, r3
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7ff fe43 	bl	80014cc <ld_clust>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800184c:	e7c0      	b.n	80017d0 <follow_path+0x50>
			if (res != FR_OK) break;
 800184e:	bf00      	nop
 8001850:	e002      	b.n	8001858 <follow_path+0xd8>
				break;
 8001852:	bf00      	nop
 8001854:	e000      	b.n	8001858 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8001856:	bf00      	nop
			}
		}
	}

	return res;
 8001858:	7dfb      	ldrb	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8001862:	b480      	push	{r7}
 8001864:	b087      	sub	sp, #28
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d031      	beq.n	80018dc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e002      	b.n	8001886 <get_ldnumber+0x24>
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b20      	cmp	r3, #32
 800188c:	d903      	bls.n	8001896 <get_ldnumber+0x34>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b3a      	cmp	r3, #58	@ 0x3a
 8001894:	d1f4      	bne.n	8001880 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b3a      	cmp	r3, #58	@ 0x3a
 800189c:	d11c      	bne.n	80018d8 <get_ldnumber+0x76>
			tp = *path;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	60fa      	str	r2, [r7, #12]
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	3b30      	subs	r3, #48	@ 0x30
 80018ae:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b09      	cmp	r3, #9
 80018b4:	d80e      	bhi.n	80018d4 <get_ldnumber+0x72>
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d10a      	bne.n	80018d4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <get_ldnumber+0x72>
					vol = (int)i;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	e002      	b.n	80018de <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80018dc:	693b      	ldr	r3, [r7, #16]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	70da      	strb	r2, [r3, #3]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001902:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff f8dc 	bl	8000ac4 <move_window>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <check_fs+0x2a>
 8001912:	2304      	movs	r3, #4
 8001914:	e038      	b.n	8001988 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3334      	adds	r3, #52	@ 0x34
 800191a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdee 	bl	8000500 <ld_word>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <check_fs+0x48>
 8001930:	2303      	movs	r3, #3
 8001932:	e029      	b.n	8001988 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800193a:	2be9      	cmp	r3, #233	@ 0xe9
 800193c:	d009      	beq.n	8001952 <check_fs+0x66>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001944:	2beb      	cmp	r3, #235	@ 0xeb
 8001946:	d11e      	bne.n	8001986 <check_fs+0x9a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800194e:	2b90      	cmp	r3, #144	@ 0x90
 8001950:	d119      	bne.n	8001986 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3334      	adds	r3, #52	@ 0x34
 8001956:	3336      	adds	r3, #54	@ 0x36
 8001958:	4618      	mov	r0, r3
 800195a:	f7fe fde9 	bl	8000530 <ld_dword>
 800195e:	4603      	mov	r3, r0
 8001960:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001964:	4a0a      	ldr	r2, [pc, #40]	@ (8001990 <check_fs+0xa4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <check_fs+0x82>
 800196a:	2300      	movs	r3, #0
 800196c:	e00c      	b.n	8001988 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3334      	adds	r3, #52	@ 0x34
 8001972:	3352      	adds	r3, #82	@ 0x52
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fddb 	bl	8000530 <ld_dword>
 800197a:	4603      	mov	r3, r0
 800197c:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <check_fs+0xa8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <check_fs+0x9a>
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8001986:	2302      	movs	r3, #2
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	00544146 	.word	0x00544146
 8001994:	33544146 	.word	0x33544146

08001998 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b096      	sub	sp, #88	@ 0x58
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	4613      	mov	r3, r2
 80019a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff ff58 	bl	8001862 <get_ldnumber>
 80019b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80019b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da01      	bge.n	80019be <find_volume+0x26>
 80019ba:	230b      	movs	r3, #11
 80019bc:	e235      	b.n	8001e2a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80019be:	4aa5      	ldr	r2, [pc, #660]	@ (8001c54 <find_volume+0x2bc>)
 80019c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80019c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <find_volume+0x3a>
 80019ce:	230c      	movs	r3, #12
 80019d0:	e22b      	b.n	8001e2a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80019d2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80019d4:	f7fe fe94 	bl	8000700 <lock_fs>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <find_volume+0x4a>
 80019de:	230f      	movs	r3, #15
 80019e0:	e223      	b.n	8001e2a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80019f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01a      	beq.n	8001a2e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80019f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f00e fc1d 	bl	801023c <disk_status>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8001a08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10c      	bne.n	8001a2e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <find_volume+0x92>
 8001a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8001a26:	230a      	movs	r3, #10
 8001a28:	e1ff      	b.n	8001e2a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e1fd      	b.n	8001e2a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8001a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8001a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a3e:	785b      	ldrb	r3, [r3, #1]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00e fc15 	bl	8010270 <disk_initialize>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8001a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1e6      	b.n	8001e2a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <find_volume+0xda>
 8001a62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8001a6e:	230a      	movs	r3, #10
 8001a70:	e1db      	b.n	8001e2a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8001a76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001a7a:	f7ff ff37 	bl	80018ec <check_fs>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8001a84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d149      	bne.n	8001b20 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a90:	e01e      	b.n	8001ad0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8001a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001a98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8001aa0:	4413      	add	r3, r2
 8001aa2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <find_volume+0x124>
 8001aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab0:	3308      	adds	r3, #8
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd3c 	bl	8000530 <ld_dword>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	e000      	b.n	8001abe <find_volume+0x126>
 8001abc:	2200      	movs	r2, #0
 8001abe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	3358      	adds	r3, #88	@ 0x58
 8001ac4:	443b      	add	r3, r7
 8001ac6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8001aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001acc:	3301      	adds	r3, #1
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d9dd      	bls.n	8001a92 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8001ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <find_volume+0x14e>
 8001ae0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8001ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	3358      	adds	r3, #88	@ 0x58
 8001aec:	443b      	add	r3, r7
 8001aee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8001af2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8001af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <find_volume+0x16e>
 8001afa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001afc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001afe:	f7ff fef5 	bl	80018ec <check_fs>
 8001b02:	4603      	mov	r3, r0
 8001b04:	e000      	b.n	8001b08 <find_volume+0x170>
 8001b06:	2303      	movs	r3, #3
 8001b08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8001b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d905      	bls.n	8001b20 <find_volume+0x188>
 8001b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b16:	3301      	adds	r3, #1
 8001b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8001b1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d9e2      	bls.n	8001ae6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8001b20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d101      	bne.n	8001b2c <find_volume+0x194>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e17e      	b.n	8001e2a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8001b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d901      	bls.n	8001b38 <find_volume+0x1a0>
 8001b34:	230d      	movs	r3, #13
 8001b36:	e178      	b.n	8001e2a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8001b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b3a:	3334      	adds	r3, #52	@ 0x34
 8001b3c:	330b      	adds	r3, #11
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fcde 	bl	8000500 <ld_word>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b4a:	d001      	beq.n	8001b50 <find_volume+0x1b8>
 8001b4c:	230d      	movs	r3, #13
 8001b4e:	e16c      	b.n	8001e2a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8001b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b52:	3334      	adds	r3, #52	@ 0x34
 8001b54:	3316      	adds	r3, #22
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fcd2 	bl	8000500 <ld_word>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8001b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <find_volume+0x1dc>
 8001b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b68:	3334      	adds	r3, #52	@ 0x34
 8001b6a:	3324      	adds	r3, #36	@ 0x24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcdf 	bl	8000530 <ld_dword>
 8001b72:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8001b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b78:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8001b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b7c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8001b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8001b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b86:	789b      	ldrb	r3, [r3, #2]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d005      	beq.n	8001b98 <find_volume+0x200>
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d001      	beq.n	8001b98 <find_volume+0x200>
 8001b94:	230d      	movs	r3, #13
 8001b96:	e148      	b.n	8001e2a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8001b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b9a:	789b      	ldrb	r3, [r3, #2]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8001ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bac:	461a      	mov	r2, r3
 8001bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8001bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb4:	895b      	ldrh	r3, [r3, #10]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d008      	beq.n	8001bcc <find_volume+0x234>
 8001bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bbc:	895b      	ldrh	r3, [r3, #10]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc2:	895b      	ldrh	r3, [r3, #10]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <find_volume+0x238>
 8001bcc:	230d      	movs	r3, #13
 8001bce:	e12c      	b.n	8001e2a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8001bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bd2:	3334      	adds	r3, #52	@ 0x34
 8001bd4:	3311      	adds	r3, #17
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fc92 	bl	8000500 <ld_word>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8001be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001be6:	891b      	ldrh	r3, [r3, #8]
 8001be8:	f003 030f 	and.w	r3, r3, #15
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <find_volume+0x25e>
 8001bf2:	230d      	movs	r3, #13
 8001bf4:	e119      	b.n	8001e2a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8001bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bf8:	3334      	adds	r3, #52	@ 0x34
 8001bfa:	3313      	adds	r3, #19
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fc7f 	bl	8000500 <ld_word>
 8001c02:	4603      	mov	r3, r0
 8001c04:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8001c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d106      	bne.n	8001c1a <find_volume+0x282>
 8001c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0e:	3334      	adds	r3, #52	@ 0x34
 8001c10:	3320      	adds	r3, #32
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc8c 	bl	8000530 <ld_dword>
 8001c18:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8001c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c1c:	3334      	adds	r3, #52	@ 0x34
 8001c1e:	330e      	adds	r3, #14
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fc6d 	bl	8000500 <ld_word>
 8001c26:	4603      	mov	r3, r0
 8001c28:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8001c2a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <find_volume+0x29c>
 8001c30:	230d      	movs	r3, #13
 8001c32:	e0fa      	b.n	8001e2a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8001c34:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c38:	4413      	add	r3, r2
 8001c3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c3c:	8912      	ldrh	r2, [r2, #8]
 8001c3e:	0912      	lsrs	r2, r2, #4
 8001c40:	b292      	uxth	r2, r2
 8001c42:	4413      	add	r3, r2
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8001c46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d204      	bcs.n	8001c58 <find_volume+0x2c0>
 8001c4e:	230d      	movs	r3, #13
 8001c50:	e0eb      	b.n	8001e2a <find_volume+0x492>
 8001c52:	bf00      	nop
 8001c54:	200000f8 	.word	0x200000f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8001c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c60:	8952      	ldrh	r2, [r2, #10]
 8001c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <find_volume+0x2da>
 8001c6e:	230d      	movs	r3, #13
 8001c70:	e0db      	b.n	8001e2a <find_volume+0x492>
		fmt = FS_FAT32;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d802      	bhi.n	8001c88 <find_volume+0x2f0>
 8001c82:	2302      	movs	r3, #2
 8001c84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d802      	bhi.n	8001c98 <find_volume+0x300>
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	1c9a      	adds	r2, r3, #2
 8001c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c9e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8001ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ca4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8001ca6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001caa:	441a      	add	r2, r3
 8001cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8001cb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb4:	441a      	add	r2, r3
 8001cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8001cba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d11e      	bne.n	8001d00 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cc4:	3334      	adds	r3, #52	@ 0x34
 8001cc6:	332a      	adds	r3, #42	@ 0x2a
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc19 	bl	8000500 <ld_word>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <find_volume+0x340>
 8001cd4:	230d      	movs	r3, #13
 8001cd6:	e0a8      	b.n	8001e2a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8001cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cda:	891b      	ldrh	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <find_volume+0x34c>
 8001ce0:	230d      	movs	r3, #13
 8001ce2:	e0a2      	b.n	8001e2a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8001ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ce6:	3334      	adds	r3, #52	@ 0x34
 8001ce8:	332c      	adds	r3, #44	@ 0x2c
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fc20 	bl	8000530 <ld_dword>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cfe:	e01f      	b.n	8001d40 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8001d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d02:	891b      	ldrh	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <find_volume+0x374>
 8001d08:	230d      	movs	r3, #13
 8001d0a:	e08e      	b.n	8001e2a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d12:	441a      	add	r2, r3
 8001d14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d16:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8001d18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d103      	bne.n	8001d28 <find_volume+0x390>
 8001d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	e00a      	b.n	8001d3e <find_volume+0x3a6>
 8001d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4413      	add	r3, r2
 8001d32:	085a      	lsrs	r2, r3, #1
 8001d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8001d3e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8001d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d42:	69da      	ldr	r2, [r3, #28]
 8001d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d46:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d201      	bcs.n	8001d54 <find_volume+0x3bc>
 8001d50:	230d      	movs	r3, #13
 8001d52:	e06a      	b.n	8001e2a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8001d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d56:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5a:	615a      	str	r2, [r3, #20]
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d5e:	695a      	ldr	r2, [r3, #20]
 8001d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d62:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8001d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8001d6a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d149      	bne.n	8001e06 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8001d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d74:	3334      	adds	r3, #52	@ 0x34
 8001d76:	3330      	adds	r3, #48	@ 0x30
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbc1 	bl	8000500 <ld_word>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d140      	bne.n	8001e06 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8001d84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d86:	3301      	adds	r3, #1
 8001d88:	4619      	mov	r1, r3
 8001d8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001d8c:	f7fe fe9a 	bl	8000ac4 <move_window>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d137      	bne.n	8001e06 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8001d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d98:	2200      	movs	r2, #0
 8001d9a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9e:	3334      	adds	r3, #52	@ 0x34
 8001da0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbab 	bl	8000500 <ld_word>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d127      	bne.n	8001e06 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8001db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db8:	3334      	adds	r3, #52	@ 0x34
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fbb8 	bl	8000530 <ld_dword>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e34 <find_volume+0x49c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d11e      	bne.n	8001e06 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8001dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dca:	3334      	adds	r3, #52	@ 0x34
 8001dcc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbad 	bl	8000530 <ld_dword>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a17      	ldr	r2, [pc, #92]	@ (8001e38 <find_volume+0x4a0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d113      	bne.n	8001e06 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8001dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de0:	3334      	adds	r3, #52	@ 0x34
 8001de2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fba2 	bl	8000530 <ld_dword>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8001df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001df4:	3334      	adds	r3, #52	@ 0x34
 8001df6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb98 	bl	8000530 <ld_dword>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e04:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8001e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e08:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001e0c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <find_volume+0x4a4>)
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <find_volume+0x4a4>)
 8001e18:	801a      	strh	r2, [r3, #0]
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <find_volume+0x4a4>)
 8001e1c:	881a      	ldrh	r2, [r3, #0]
 8001e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e20:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8001e22:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e24:	f7fe fde6 	bl	80009f4 <clear_lock>
#endif
	return FR_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3758      	adds	r7, #88	@ 0x58
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	41615252 	.word	0x41615252
 8001e38:	61417272 	.word	0x61417272
 8001e3c:	200000fc 	.word	0x200000fc

08001e40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8001e4a:	2309      	movs	r3, #9
 8001e4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02e      	beq.n	8001eb2 <validate+0x72>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02a      	beq.n	8001eb2 <validate+0x72>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d025      	beq.n	8001eb2 <validate+0x72>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	889a      	ldrh	r2, [r3, #4]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	88db      	ldrh	r3, [r3, #6]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d11e      	bne.n	8001eb2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fc41 	bl	8000700 <lock_fs>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d014      	beq.n	8001eae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f00e f9d6 	bl	801023c <disk_status>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <validate+0x60>
				res = FR_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
 8001e9e:	e008      	b.n	8001eb2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fc40 	bl	800072c <unlock_fs>
 8001eac:	e001      	b.n	8001eb2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8001eae:	230f      	movs	r3, #15
 8001eb0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <validate+0x7e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	e000      	b.n	8001ec0 <validate+0x80>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	6013      	str	r3, [r2, #0]
	return res;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fcbb 	bl	8001862 <get_ldnumber>
 8001eec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da01      	bge.n	8001ef8 <f_mount+0x28>
 8001ef4:	230b      	movs	r3, #11
 8001ef6:	e048      	b.n	8001f8a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8001ef8:	4a26      	ldr	r2, [pc, #152]	@ (8001f94 <f_mount+0xc4>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00f      	beq.n	8001f28 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8001f08:	69b8      	ldr	r0, [r7, #24]
 8001f0a:	f7fe fd73 	bl	80009f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00e faab 	bl	801046e <ff_del_syncobj>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <f_mount+0x52>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e033      	b.n	8001f8a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00f      	beq.n	8001f4e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	330c      	adds	r3, #12
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4610      	mov	r0, r2
 8001f40:	f00e fa75 	bl	801042e <ff_cre_syncobj>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <f_mount+0x7e>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e01d      	b.n	8001f8a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4910      	ldr	r1, [pc, #64]	@ (8001f94 <f_mount+0xc4>)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <f_mount+0x94>
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d001      	beq.n	8001f68 <f_mount+0x98>
 8001f64:	2300      	movs	r3, #0
 8001f66:	e010      	b.n	8001f8a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8001f68:	f107 010c 	add.w	r1, r7, #12
 8001f6c:	f107 0308 	add.w	r3, r7, #8
 8001f70:	2200      	movs	r2, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fd10 	bl	8001998 <find_volume>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	7dfa      	ldrb	r2, [r7, #23]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fbd2 	bl	800072c <unlock_fs>
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200000f8 	.word	0x200000f8

08001f98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b09a      	sub	sp, #104	@ 0x68
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <f_open+0x18>
 8001fac:	2309      	movs	r3, #9
 8001fae:	e1b0      	b.n	8002312 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	f107 0114 	add.w	r1, r7, #20
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fce8 	bl	8001998 <find_volume>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8001fce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 818d 	bne.w	80022f2 <f_open+0x35a>
		dj.obj.fs = fs;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fbcb 	bl	8001780 <follow_path>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8001ff0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d118      	bne.n	800202a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8001ff8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da03      	bge.n	800200a <f_open+0x72>
				res = FR_INVALID_NAME;
 8002002:	2306      	movs	r3, #6
 8002004:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002008:	e00f      	b.n	800202a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b01      	cmp	r3, #1
 800200e:	bf8c      	ite	hi
 8002010:	2301      	movhi	r3, #1
 8002012:	2300      	movls	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fba0 	bl	8000764 <chk_lock>
 8002024:	4603      	mov	r3, r0
 8002026:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 031c 	and.w	r3, r3, #28
 8002030:	2b00      	cmp	r3, #0
 8002032:	d07f      	beq.n	8002134 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8002034:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002038:	2b00      	cmp	r3, #0
 800203a:	d017      	beq.n	800206c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800203c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002040:	2b04      	cmp	r3, #4
 8002042:	d10e      	bne.n	8002062 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8002044:	f7fe fbea 	bl	800081c <enq_lock>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <f_open+0xc4>
 800204e:	f107 0318 	add.w	r3, r7, #24
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff face 	bl	80015f4 <dir_register>
 8002058:	4603      	mov	r3, r0
 800205a:	e000      	b.n	800205e <f_open+0xc6>
 800205c:	2312      	movs	r3, #18
 800205e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	71fb      	strb	r3, [r7, #7]
 800206a:	e010      	b.n	800208e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800206c:	7fbb      	ldrb	r3, [r7, #30]
 800206e:	f003 0311 	and.w	r3, r3, #17
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <f_open+0xe6>
					res = FR_DENIED;
 8002076:	2307      	movs	r3, #7
 8002078:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800207c:	e007      	b.n	800208e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <f_open+0xf6>
 8002088:	2308      	movs	r3, #8
 800208a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800208e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002092:	2b00      	cmp	r3, #0
 8002094:	d168      	bne.n	8002168 <f_open+0x1d0>
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d063      	beq.n	8002168 <f_open+0x1d0>
				dw = GET_FATTIME();
 80020a0:	f00d fe6a 	bl	800fd78 <get_fattime>
 80020a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80020a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a8:	330e      	adds	r3, #14
 80020aa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa7d 	bl	80005ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80020b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b4:	3316      	adds	r3, #22
 80020b6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa77 	bl	80005ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80020be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c0:	330b      	adds	r3, #11
 80020c2:	2220      	movs	r2, #32
 80020c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f9fd 	bl	80014cc <ld_clust>
 80020d2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020d8:	2200      	movs	r2, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fa15 	bl	800150a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80020e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e2:	331c      	adds	r3, #28
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa60 	bl	80005ac <st_dword>
					fs->wflag = 1;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2201      	movs	r2, #1
 80020f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80020f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d037      	beq.n	8002168 <f_open+0x1d0>
						dw = fs->winsect;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80020fe:	f107 0318 	add.w	r3, r7, #24
 8002102:	2200      	movs	r2, #0
 8002104:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe ff28 	bl	8000f5c <remove_chain>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8002112:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002116:	2b00      	cmp	r3, #0
 8002118:	d126      	bne.n	8002168 <f_open+0x1d0>
							res = move_window(fs, dw);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fcd0 	bl	8000ac4 <move_window>
 8002124:	4603      	mov	r3, r0
 8002126:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800212e:	3a01      	subs	r2, #1
 8002130:	611a      	str	r2, [r3, #16]
 8002132:	e019      	b.n	8002168 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8002134:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002138:	2b00      	cmp	r3, #0
 800213a:	d115      	bne.n	8002168 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800213c:	7fbb      	ldrb	r3, [r7, #30]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <f_open+0x1b6>
					res = FR_NO_FILE;
 8002146:	2304      	movs	r3, #4
 8002148:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800214c:	e00c      	b.n	8002168 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <f_open+0x1d0>
 8002158:	7fbb      	ldrb	r3, [r7, #30]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <f_open+0x1d0>
						res = FR_DENIED;
 8002162:	2307      	movs	r3, #7
 8002164:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8002168:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800216c:	2b00      	cmp	r3, #0
 800216e:	d126      	bne.n	80021be <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002180:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800218a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	2b01      	cmp	r3, #1
 8002194:	bf8c      	ite	hi
 8002196:	2301      	movhi	r3, #1
 8002198:	2300      	movls	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fb5b 	bl	8000860 <inc_lock>
 80021aa:	4602      	mov	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <f_open+0x226>
 80021b8:	2302      	movs	r3, #2
 80021ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80021be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 8095 	bne.w	80022f2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f97c 	bl	80014cc <ld_clust>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80021da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021dc:	331c      	adds	r3, #28
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe f9a6 	bl	8000530 <ld_dword>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	88da      	ldrh	r2, [r3, #6]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	79fa      	ldrb	r2, [r7, #7]
 8002202:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3330      	adds	r3, #48	@ 0x30
 800221a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800221e:	2100      	movs	r1, #0
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fa10 	bl	8000646 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d060      	beq.n	80022f2 <f_open+0x35a>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05c      	beq.n	80022f2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	895b      	ldrh	r3, [r3, #10]
 8002244:	025b      	lsls	r3, r3, #9
 8002246:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002254:	e016      	b.n	8002284 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fced 	bl	8000c3a <get_fat>
 8002260:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8002262:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002264:	2b01      	cmp	r3, #1
 8002266:	d802      	bhi.n	800226e <f_open+0x2d6>
 8002268:	2302      	movs	r3, #2
 800226a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800226e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002274:	d102      	bne.n	800227c <f_open+0x2e4>
 8002276:	2301      	movs	r3, #1
 8002278:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800227c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800227e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002284:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <f_open+0x2fc>
 800228c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800228e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002290:	429a      	cmp	r2, r3
 8002292:	d8e0      	bhi.n	8002256 <f_open+0x2be>
				}
				fp->clust = clst;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002298:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800229a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d127      	bne.n	80022f2 <f_open+0x35a>
 80022a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d022      	beq.n	80022f2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fca3 	bl	8000bfc <clust2sect>
 80022b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80022b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <f_open+0x32e>
						res = FR_INT_ERR;
 80022be:	2302      	movs	r3, #2
 80022c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80022c4:	e015      	b.n	80022f2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80022c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022c8:	0a5a      	lsrs	r2, r3, #9
 80022ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022cc:	441a      	add	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	7858      	ldrb	r0, [r3, #1]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	2301      	movs	r3, #1
 80022e2:	f00d ffeb 	bl	80102bc <disk_read>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <f_open+0x35a>
 80022ec:	2301      	movs	r3, #1
 80022ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80022f2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <f_open+0x368>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe fa0f 	bl	800072c <unlock_fs>
 800230e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002312:	4618      	mov	r0, r3
 8002314:	3768      	adds	r7, #104	@ 0x68
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b08e      	sub	sp, #56	@ 0x38
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f107 0214 	add.w	r2, r7, #20
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fd80 	bl	8001e40 <validate>
 8002340:	4603      	mov	r3, r0
 8002342:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8002346:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <f_read+0x44>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	7d5b      	ldrb	r3, [r3, #21]
 8002352:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002356:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <f_read+0x58>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f9e0 	bl	800072c <unlock_fs>
 800236c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002370:	e13d      	b.n	80025ee <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	7d1b      	ldrb	r3, [r3, #20]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <f_read+0x72>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2107      	movs	r1, #7
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f9d2 	bl	800072c <unlock_fs>
 8002388:	2307      	movs	r3, #7
 800238a:	e130      	b.n	80025ee <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	429a      	cmp	r2, r3
 800239e:	f240 811c 	bls.w	80025da <f_read+0x2c0>
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80023a6:	e118      	b.n	80025da <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 80e4 	bne.w	800257e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	0a5b      	lsrs	r3, r3, #9
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	8952      	ldrh	r2, [r2, #10]
 80023c0:	3a01      	subs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d139      	bne.n	8002440 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d103      	bne.n	80023dc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023da:	e013      	b.n	8002404 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	4619      	mov	r1, r3
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7fe feb3 	bl	8001156 <clmt_clust>
 80023f0:	6338      	str	r0, [r7, #48]	@ 0x30
 80023f2:	e007      	b.n	8002404 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f7fe fc1c 	bl	8000c3a <get_fat>
 8002402:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8002404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002406:	2b01      	cmp	r3, #1
 8002408:	d809      	bhi.n	800241e <f_read+0x104>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2202      	movs	r2, #2
 800240e:	755a      	strb	r2, [r3, #21]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2102      	movs	r1, #2
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f989 	bl	800072c <unlock_fs>
 800241a:	2302      	movs	r3, #2
 800241c:	e0e7      	b.n	80025ee <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d109      	bne.n	800243a <f_read+0x120>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	755a      	strb	r2, [r3, #21]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2101      	movs	r1, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f97b 	bl	800072c <unlock_fs>
 8002436:	2301      	movs	r3, #1
 8002438:	e0d9      	b.n	80025ee <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800243e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f7fe fbd7 	bl	8000bfc <clust2sect>
 800244e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <f_read+0x150>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2202      	movs	r2, #2
 800245a:	755a      	strb	r2, [r3, #21]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2102      	movs	r1, #2
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe f963 	bl	800072c <unlock_fs>
 8002466:	2302      	movs	r3, #2
 8002468:	e0c1      	b.n	80025ee <f_read+0x2d4>
			sect += csect;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0a5b      	lsrs	r3, r3, #9
 8002476:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03e      	beq.n	80024fc <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800247e:	69fa      	ldr	r2, [r7, #28]
 8002480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002482:	4413      	add	r3, r2
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	8952      	ldrh	r2, [r2, #10]
 8002488:	4293      	cmp	r3, r2
 800248a:	d905      	bls.n	8002498 <f_read+0x17e>
					cc = fs->csize - csect;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	895b      	ldrh	r3, [r3, #10]
 8002490:	461a      	mov	r2, r3
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	7858      	ldrb	r0, [r3, #1]
 800249c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024a2:	f00d ff0b 	bl	80102bc <disk_read>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d009      	beq.n	80024c0 <f_read+0x1a6>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	755a      	strb	r2, [r3, #21]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f938 	bl	800072c <unlock_fs>
 80024bc:	2301      	movs	r3, #1
 80024be:	e096      	b.n	80025ee <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	7d1b      	ldrb	r3, [r3, #20]
 80024c4:	b25b      	sxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da14      	bge.n	80024f4 <f_read+0x1da>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d90d      	bls.n	80024f4 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	025b      	lsls	r3, r3, #9
 80024e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e4:	18d0      	adds	r0, r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3330      	adds	r3, #48	@ 0x30
 80024ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7fe f888 	bl	8000604 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80024fa:	e05a      	b.n	80025b2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	429a      	cmp	r2, r3
 8002504:	d038      	beq.n	8002578 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	7d1b      	ldrb	r3, [r3, #20]
 800250a:	b25b      	sxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	da1d      	bge.n	800254c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	7858      	ldrb	r0, [r3, #1]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a1a      	ldr	r2, [r3, #32]
 800251e:	2301      	movs	r3, #1
 8002520:	f00d feec 	bl	80102fc <disk_write>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <f_read+0x224>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	755a      	strb	r2, [r3, #21]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f8f9 	bl	800072c <unlock_fs>
 800253a:	2301      	movs	r3, #1
 800253c:	e057      	b.n	80025ee <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	7d1b      	ldrb	r3, [r3, #20]
 8002542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	7858      	ldrb	r0, [r3, #1]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002556:	2301      	movs	r3, #1
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	f00d feaf 	bl	80102bc <disk_read>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <f_read+0x25e>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2201      	movs	r2, #1
 8002568:	755a      	strb	r2, [r3, #21]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2101      	movs	r1, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe f8dc 	bl	800072c <unlock_fs>
 8002574:	2301      	movs	r3, #1
 8002576:	e03a      	b.n	80025ee <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002586:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800258a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800258c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d901      	bls.n	8002598 <f_read+0x27e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a6:	4413      	add	r3, r2
 80025a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025aa:	4619      	mov	r1, r3
 80025ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025ae:	f7fe f829 	bl	8000604 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80025b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b6:	4413      	add	r3, r2
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	441a      	add	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	619a      	str	r2, [r3, #24]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	441a      	add	r2, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f aee3 	bne.w	80023a8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe f8a0 	bl	800072c <unlock_fs>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3738      	adds	r7, #56	@ 0x38
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f107 0208 	add.w	r2, r7, #8
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fc1a 	bl	8001e40 <validate>
 800260c:	4603      	mov	r3, r0
 800260e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d16d      	bne.n	80026f2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7d1b      	ldrb	r3, [r3, #20]
 800261a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d067      	beq.n	80026f2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7d1b      	ldrb	r3, [r3, #20]
 8002626:	b25b      	sxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	da1a      	bge.n	8002662 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	7858      	ldrb	r0, [r3, #1]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1a      	ldr	r2, [r3, #32]
 800263a:	2301      	movs	r3, #1
 800263c:	f00d fe5e 	bl	80102fc <disk_write>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d006      	beq.n	8002654 <f_sync+0x5e>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2101      	movs	r1, #1
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe f86e 	bl	800072c <unlock_fs>
 8002650:	2301      	movs	r3, #1
 8002652:	e055      	b.n	8002700 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	7d1b      	ldrb	r3, [r3, #20]
 8002658:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800265c:	b2da      	uxtb	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8002662:	f00d fb89 	bl	800fd78 <get_fattime>
 8002666:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f7fe fa27 	bl	8000ac4 <move_window>
 8002676:	4603      	mov	r3, r0
 8002678:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800267a:	7dfb      	ldrb	r3, [r7, #23]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d138      	bne.n	80026f2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002684:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	330b      	adds	r3, #11
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	330b      	adds	r3, #11
 8002690:	f042 0220 	orr.w	r2, r2, #32
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	461a      	mov	r2, r3
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	f7fe ff31 	bl	800150a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f103 021c 	add.w	r2, r3, #28
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7fd ff79 	bl	80005ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3316      	adds	r3, #22
 80026be:	6939      	ldr	r1, [r7, #16]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff73 	bl	80005ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3312      	adds	r3, #18
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff52 	bl	8000576 <st_word>
					fs->wflag = 1;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2201      	movs	r2, #1
 80026d6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fa20 	bl	8000b20 <sync_fs>
 80026e0:	4603      	mov	r3, r0
 80026e2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	7d1b      	ldrb	r3, [r3, #20]
 80026e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	7dfa      	ldrb	r2, [r7, #23]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe f817 	bl	800072c <unlock_fs>
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff70 	bl	80025f6 <f_sync>
 8002716:	4603      	mov	r3, r0
 8002718:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800271a:	7bfb      	ldrb	r3, [r7, #15]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d11d      	bne.n	800275c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f107 0208 	add.w	r2, r7, #8
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fb89 	bl	8001e40 <validate>
 800272e:	4603      	mov	r3, r0
 8002730:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe f91d 	bl	800097c <dec_lock>
 8002742:	4603      	mov	r3, r0
 8002744:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f7fd ffe8 	bl	800072c <unlock_fs>
#endif
		}
	}
	return res;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b090      	sub	sp, #64	@ 0x40
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f107 0208 	add.w	r2, r7, #8
 8002776:	4611      	mov	r1, r2
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff fb61 	bl	8001e40 <validate>
 800277e:	4603      	mov	r3, r0
 8002780:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8002784:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002788:	2b00      	cmp	r3, #0
 800278a:	d103      	bne.n	8002794 <f_lseek+0x2e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7d5b      	ldrb	r3, [r3, #21]
 8002790:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8002794:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002798:	2b00      	cmp	r3, #0
 800279a:	d009      	beq.n	80027b0 <f_lseek+0x4a>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd ffc1 	bl	800072c <unlock_fs>
 80027aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80027ae:	e229      	b.n	8002c04 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80ea 	beq.w	800298e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d164      	bne.n	800288c <f_lseek+0x126>
			tbl = fp->cltbl;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	1d1a      	adds	r2, r3, #4
 80027cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	2302      	movs	r3, #2
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80027dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d044      	beq.n	800286c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ec:	3302      	adds	r3, #2
 80027ee:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80027f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f6:	3301      	adds	r3, #1
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fa1b 	bl	8000c3a <get_fat>
 8002804:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	2b01      	cmp	r3, #1
 800280a:	d809      	bhi.n	8002820 <f_lseek+0xba>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	755a      	strb	r2, [r3, #21]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2102      	movs	r1, #2
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd ff88 	bl	800072c <unlock_fs>
 800281c:	2302      	movs	r3, #2
 800281e:	e1f1      	b.n	8002c04 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d109      	bne.n	800283c <f_lseek+0xd6>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	755a      	strb	r2, [r3, #21]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2101      	movs	r1, #1
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd ff7a 	bl	800072c <unlock_fs>
 8002838:	2301      	movs	r3, #1
 800283a:	e1e3      	b.n	8002c04 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3301      	adds	r3, #1
 8002840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002842:	429a      	cmp	r2, r3
 8002844:	d0d4      	beq.n	80027f0 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8002846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	429a      	cmp	r2, r3
 800284c:	d809      	bhi.n	8002862 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 800284e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002850:	1d1a      	adds	r2, r3, #4
 8002852:	627a      	str	r2, [r7, #36]	@ 0x24
 8002854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	1d1a      	adds	r2, r3, #4
 800285c:	627a      	str	r2, [r7, #36]	@ 0x24
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002868:	429a      	cmp	r2, r3
 800286a:	d3ba      	bcc.n	80027e2 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002872:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8002874:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d803      	bhi.n	8002884 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	e1b6      	b.n	8002bf2 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8002884:	2311      	movs	r3, #17
 8002886:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800288a:	e1b2      	b.n	8002bf2 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d902      	bls.n	800289c <f_lseek+0x136>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 81a4 	beq.w	8002bf2 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7fe fc50 	bl	8001156 <clmt_clust>
 80028b6:	4602      	mov	r2, r0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f7fe f999 	bl	8000bfc <clust2sect>
 80028ca:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <f_lseek+0x180>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2202      	movs	r2, #2
 80028d6:	755a      	strb	r2, [r3, #21]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2102      	movs	r1, #2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd ff25 	bl	800072c <unlock_fs>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e18e      	b.n	8002c04 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	0a5b      	lsrs	r3, r3, #9
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	8952      	ldrh	r2, [r2, #10]
 80028f0:	3a01      	subs	r2, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 8175 	beq.w	8002bf2 <f_lseek+0x48c>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	429a      	cmp	r2, r3
 8002910:	f000 816f 	beq.w	8002bf2 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7d1b      	ldrb	r3, [r3, #20]
 8002918:	b25b      	sxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	da1d      	bge.n	800295a <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	7858      	ldrb	r0, [r3, #1]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	2301      	movs	r3, #1
 800292e:	f00d fce5 	bl	80102fc <disk_write>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <f_lseek+0x1e6>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	755a      	strb	r2, [r3, #21]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fef2 	bl	800072c <unlock_fs>
 8002948:	2301      	movs	r3, #1
 800294a:	e15b      	b.n	8002c04 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7d1b      	ldrb	r3, [r3, #20]
 8002950:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002954:	b2da      	uxtb	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	7858      	ldrb	r0, [r3, #1]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002964:	2301      	movs	r3, #1
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	f00d fca8 	bl	80102bc <disk_read>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <f_lseek+0x220>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	755a      	strb	r2, [r3, #21]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fed5 	bl	800072c <unlock_fs>
 8002982:	2301      	movs	r3, #1
 8002984:	e13e      	b.n	8002c04 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	621a      	str	r2, [r3, #32]
 800298c:	e131      	b.n	8002bf2 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d908      	bls.n	80029aa <f_lseek+0x244>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7d1b      	ldrb	r3, [r3, #20]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029b8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80c0 	beq.w	8002b42 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	895b      	ldrh	r3, [r3, #10]
 80029c6:	025b      	lsls	r3, r3, #9
 80029c8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	1e5a      	subs	r2, r3, #1
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	1e59      	subs	r1, r3, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d30f      	bcc.n	8002a08 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	1e5a      	subs	r2, r3, #1
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	425b      	negs	r3, r3
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a06:	e02c      	b.n	8002a62 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d123      	bne.n	8002a5c <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7fe fb04 	bl	8001026 <create_chain>
 8002a1e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8002a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d109      	bne.n	8002a3a <f_lseek+0x2d4>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	755a      	strb	r2, [r3, #21]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2102      	movs	r1, #2
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fd fe7b 	bl	800072c <unlock_fs>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e0e4      	b.n	8002c04 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d109      	bne.n	8002a56 <f_lseek+0x2f0>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	755a      	strb	r2, [r3, #21]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fe6d 	bl	800072c <unlock_fs>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0d6      	b.n	8002c04 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a5a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a60:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8002a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d06c      	beq.n	8002b42 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8002a68:	e044      	b.n	8002af4 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7d1b      	ldrb	r3, [r3, #20]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe fac9 	bl	8001026 <create_chain>
 8002a94:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d108      	bne.n	8002aae <f_lseek+0x348>
							ofs = 0; break;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	e02c      	b.n	8002afc <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fe f8c7 	bl	8000c3a <get_fat>
 8002aac:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8002aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d109      	bne.n	8002aca <f_lseek+0x364>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	755a      	strb	r2, [r3, #21]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fe33 	bl	800072c <unlock_fs>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e09c      	b.n	8002c04 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8002aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d904      	bls.n	8002ada <f_lseek+0x374>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d309      	bcc.n	8002aee <f_lseek+0x388>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	755a      	strb	r2, [r3, #21]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fe21 	bl	800072c <unlock_fs>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e08a      	b.n	8002c04 <f_lseek+0x49e>
					fp->clust = clst;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002af2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8b6      	bhi.n	8002a6a <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699a      	ldr	r2, [r3, #24]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	441a      	add	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d017      	beq.n	8002b42 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f870 	bl	8000bfc <clust2sect>
 8002b1c:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <f_lseek+0x3d2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	755a      	strb	r2, [r3, #21]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fdfc 	bl	800072c <unlock_fs>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e065      	b.n	8002c04 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	0a5b      	lsrs	r3, r3, #9
 8002b3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b3e:	4413      	add	r3, r2
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699a      	ldr	r2, [r3, #24]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d90a      	bls.n	8002b64 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7d1b      	ldrb	r3, [r3, #20]
 8002b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d040      	beq.n	8002bf2 <f_lseek+0x48c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d03b      	beq.n	8002bf2 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7d1b      	ldrb	r3, [r3, #20]
 8002b7e:	b25b      	sxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da1d      	bge.n	8002bc0 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	7858      	ldrb	r0, [r3, #1]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1a      	ldr	r2, [r3, #32]
 8002b92:	2301      	movs	r3, #1
 8002b94:	f00d fbb2 	bl	80102fc <disk_write>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <f_lseek+0x44c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	755a      	strb	r2, [r3, #21]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fdbf 	bl	800072c <unlock_fs>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e028      	b.n	8002c04 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	7d1b      	ldrb	r3, [r3, #20]
 8002bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	7858      	ldrb	r0, [r3, #1]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8002bca:	2301      	movs	r3, #1
 8002bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bce:	f00d fb75 	bl	80102bc <disk_read>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <f_lseek+0x486>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	755a      	strb	r2, [r3, #21]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2101      	movs	r1, #1
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fda2 	bl	800072c <unlock_fs>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e00b      	b.n	8002c04 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bf0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fd96 	bl	800072c <unlock_fs>
 8002c00:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3740      	adds	r7, #64	@ 0x40
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a07      	ldr	r2, [pc, #28]	@ (8002c6c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	4a06      	ldr	r2, [pc, #24]	@ (8002c70 <vApplicationGetIdleTaskMemory+0x30>)
 8002c56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2280      	movs	r2, #128	@ 0x80
 8002c5c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000120 	.word	0x20000120
 8002c70:	20000174 	.word	0x20000174

08002c74 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8002c7e:	20c8      	movs	r0, #200	@ 0xc8
 8002c80:	f001 fe60 	bl	8004944 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002c84:	f000 f9b4 	bl	8002ff0 <ft5336_I2C_InitializeIfRequired>
}
 8002c88:	bf00      	nop
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	4603      	mov	r3, r0
 8002cae:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002cbc:	f000 f998 	bl	8002ff0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	e010      	b.n	8002ce8 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	21a8      	movs	r1, #168	@ 0xa8
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 fe1b 	bl	8004908 <TS_IO_Read>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002cd6:	7b7b      	ldrb	r3, [r7, #13]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b51      	cmp	r3, #81	@ 0x51
 8002cdc:	d101      	bne.n	8002ce2 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d802      	bhi.n	8002cf4 <ft5336_ReadID+0x4e>
 8002cee:	7bbb      	ldrb	r3, [r7, #14]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0e8      	beq.n	8002cc6 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	b2db      	uxtb	r3, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 f97f 	bl	8003010 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 f933 	bl	8002f80 <ft5336_TS_DisableIT>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2102      	movs	r1, #2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 fde5 	bl	8004908 <TS_IO_Read>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d901      	bls.n	8002d5a <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <ft5336_TS_DetectTouch+0x50>)
 8002d60:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8002d62:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <ft5336_TS_DetectTouch+0x50>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	b2db      	uxtb	r3, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000374 	.word	0x20000374

08002d78 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f50 <ft5336_TS_GetXY+0x1d8>)
 8002d9c:	789a      	ldrb	r2, [r3, #2]
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f50 <ft5336_TS_GetXY+0x1d8>)
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	f080 80cf 	bcs.w	8002f46 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002da8:	4b69      	ldr	r3, [pc, #420]	@ (8002f50 <ft5336_TS_GetXY+0x1d8>)
 8002daa:	789b      	ldrb	r3, [r3, #2]
 8002dac:	2b09      	cmp	r3, #9
 8002dae:	d871      	bhi.n	8002e94 <ft5336_TS_GetXY+0x11c>
 8002db0:	a201      	add	r2, pc, #4	@ (adr r2, 8002db8 <ft5336_TS_GetXY+0x40>)
 8002db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db6:	bf00      	nop
 8002db8:	08002de1 	.word	0x08002de1
 8002dbc:	08002df3 	.word	0x08002df3
 8002dc0:	08002e05 	.word	0x08002e05
 8002dc4:	08002e17 	.word	0x08002e17
 8002dc8:	08002e29 	.word	0x08002e29
 8002dcc:	08002e3b 	.word	0x08002e3b
 8002dd0:	08002e4d 	.word	0x08002e4d
 8002dd4:	08002e5f 	.word	0x08002e5f
 8002dd8:	08002e71 	.word	0x08002e71
 8002ddc:	08002e83 	.word	0x08002e83
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8002de0:	2304      	movs	r3, #4
 8002de2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002de4:	2303      	movs	r3, #3
 8002de6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002de8:	2306      	movs	r3, #6
 8002dea:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002dec:	2305      	movs	r3, #5
 8002dee:	753b      	strb	r3, [r7, #20]
      break;
 8002df0:	e051      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8002df2:	230a      	movs	r3, #10
 8002df4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002df6:	2309      	movs	r3, #9
 8002df8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002dfa:	230c      	movs	r3, #12
 8002dfc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8002dfe:	230b      	movs	r3, #11
 8002e00:	753b      	strb	r3, [r7, #20]
      break;
 8002e02:	e048      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002e04:	2310      	movs	r3, #16
 8002e06:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002e0c:	2312      	movs	r3, #18
 8002e0e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8002e10:	2311      	movs	r3, #17
 8002e12:	753b      	strb	r3, [r7, #20]
      break;
 8002e14:	e03f      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8002e16:	2316      	movs	r3, #22
 8002e18:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8002e1a:	2315      	movs	r3, #21
 8002e1c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8002e1e:	2318      	movs	r3, #24
 8002e20:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8002e22:	2317      	movs	r3, #23
 8002e24:	753b      	strb	r3, [r7, #20]
      break;
 8002e26:	e036      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8002e28:	231c      	movs	r3, #28
 8002e2a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8002e2c:	231b      	movs	r3, #27
 8002e2e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8002e30:	231e      	movs	r3, #30
 8002e32:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8002e34:	231d      	movs	r3, #29
 8002e36:	753b      	strb	r3, [r7, #20]
      break;
 8002e38:	e02d      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8002e3a:	2322      	movs	r3, #34	@ 0x22
 8002e3c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8002e3e:	2321      	movs	r3, #33	@ 0x21
 8002e40:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8002e42:	2324      	movs	r3, #36	@ 0x24
 8002e44:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8002e46:	2323      	movs	r3, #35	@ 0x23
 8002e48:	753b      	strb	r3, [r7, #20]
      break;
 8002e4a:	e024      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8002e4c:	2328      	movs	r3, #40	@ 0x28
 8002e4e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8002e50:	2327      	movs	r3, #39	@ 0x27
 8002e52:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8002e54:	232a      	movs	r3, #42	@ 0x2a
 8002e56:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8002e58:	2329      	movs	r3, #41	@ 0x29
 8002e5a:	753b      	strb	r3, [r7, #20]
      break;
 8002e5c:	e01b      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8002e5e:	232e      	movs	r3, #46	@ 0x2e
 8002e60:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8002e62:	232d      	movs	r3, #45	@ 0x2d
 8002e64:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8002e66:	2330      	movs	r3, #48	@ 0x30
 8002e68:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8002e6a:	232f      	movs	r3, #47	@ 0x2f
 8002e6c:	753b      	strb	r3, [r7, #20]
      break;
 8002e6e:	e012      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8002e70:	2334      	movs	r3, #52	@ 0x34
 8002e72:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8002e74:	2333      	movs	r3, #51	@ 0x33
 8002e76:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8002e78:	2336      	movs	r3, #54	@ 0x36
 8002e7a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8002e7c:	2335      	movs	r3, #53	@ 0x35
 8002e7e:	753b      	strb	r3, [r7, #20]
      break;
 8002e80:	e009      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8002e82:	233a      	movs	r3, #58	@ 0x3a
 8002e84:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8002e86:	2339      	movs	r3, #57	@ 0x39
 8002e88:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8002e8a:	233c      	movs	r3, #60	@ 0x3c
 8002e8c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8002e8e:	233b      	movs	r3, #59	@ 0x3b
 8002e90:	753b      	strb	r3, [r7, #20]
      break;
 8002e92:	e000      	b.n	8002e96 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8002e94:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8002e96:	89fb      	ldrh	r3, [r7, #14]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	7dfa      	ldrb	r2, [r7, #23]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 fd32 	bl	8004908 <TS_IO_Read>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b29      	ldr	r3, [pc, #164]	@ (8002f54 <ft5336_TS_GetXY+0x1dc>)
 8002eb0:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	7dba      	ldrb	r2, [r7, #22]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f001 fd24 	bl	8004908 <TS_IO_Read>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	021b      	lsls	r3, r3, #8
 8002eca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002ece:	b21a      	sxth	r2, r3
 8002ed0:	4b20      	ldr	r3, [pc, #128]	@ (8002f54 <ft5336_TS_GetXY+0x1dc>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f54 <ft5336_TS_GetXY+0x1dc>)
 8002ede:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <ft5336_TS_GetXY+0x1dc>)
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8002ee8:	89fb      	ldrh	r3, [r7, #14]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	7d7a      	ldrb	r2, [r7, #21]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 fd09 	bl	8004908 <TS_IO_Read>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8002efa:	7cfb      	ldrb	r3, [r7, #19]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <ft5336_TS_GetXY+0x1dc>)
 8002f02:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8002f04:	89fb      	ldrh	r3, [r7, #14]
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	7d3a      	ldrb	r2, [r7, #20]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 fcfb 	bl	8004908 <TS_IO_Read>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f20:	b21a      	sxth	r2, r3
 8002f22:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <ft5336_TS_GetXY+0x1dc>)
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b21b      	sxth	r3, r3
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b21b      	sxth	r3, r3
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <ft5336_TS_GetXY+0x1dc>)
 8002f30:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <ft5336_TS_GetXY+0x1dc>)
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8002f3a:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <ft5336_TS_GetXY+0x1d8>)
 8002f3c:	789b      	ldrb	r3, [r3, #2]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <ft5336_TS_GetXY+0x1d8>)
 8002f44:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000374 	.word	0x20000374
 8002f54:	20000378 	.word	0x20000378

08002f58 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	21a4      	movs	r1, #164	@ 0xa4
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fcae 	bl	80048d4 <TS_IO_Write>
}
 8002f78:	bf00      	nop
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	21a4      	movs	r1, #164	@ 0xa4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 fc9a 	bl	80048d4 <TS_IO_Write>
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
	...

08002fd8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <ft5336_Get_I2C_InitializedStatus+0x14>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000374 	.word	0x20000374

08002ff0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8002ff4:	f7ff fff0 	bl	8002fd8 <ft5336_Get_I2C_InitializedStatus>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8002ffe:	f001 fc5f 	bl	80048c0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8003002:	4b02      	ldr	r3, [pc, #8]	@ (800300c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]
  }
}
 8003008:	bf00      	nop
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000374 	.word	0x20000374

08003010 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003030:	f3bf 8f4f 	dsb	sy
}
 8003034:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003036:	f3bf 8f6f 	isb	sy
}
 800303a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800303c:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <SCB_EnableICache+0x48>)
 800303e:	2200      	movs	r2, #0
 8003040:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8003044:	f3bf 8f4f 	dsb	sy
}
 8003048:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800304a:	f3bf 8f6f 	isb	sy
}
 800304e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8003050:	4b08      	ldr	r3, [pc, #32]	@ (8003074 <SCB_EnableICache+0x48>)
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	4a07      	ldr	r2, [pc, #28]	@ (8003074 <SCB_EnableICache+0x48>)
 8003056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800305a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800305c:	f3bf 8f4f 	dsb	sy
}
 8003060:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003062:	f3bf 8f6f 	isb	sy
}
 8003066:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800307e:	4b1f      	ldr	r3, [pc, #124]	@ (80030fc <SCB_EnableDCache+0x84>)
 8003080:	2200      	movs	r2, #0
 8003082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003086:	f3bf 8f4f 	dsb	sy
}
 800308a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800308c:	4b1b      	ldr	r3, [pc, #108]	@ (80030fc <SCB_EnableDCache+0x84>)
 800308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003092:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0b5b      	lsrs	r3, r3, #13
 8003098:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800309c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	08db      	lsrs	r3, r3, #3
 80030a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80030b0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80030b6:	4911      	ldr	r1, [pc, #68]	@ (80030fc <SCB_EnableDCache+0x84>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	1e5a      	subs	r2, r3, #1
 80030c2:	60ba      	str	r2, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ef      	bne.n	80030a8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	60fa      	str	r2, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e5      	bne.n	800309e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80030d2:	f3bf 8f4f 	dsb	sy
}
 80030d6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80030d8:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <SCB_EnableDCache+0x84>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	4a07      	ldr	r2, [pc, #28]	@ (80030fc <SCB_EnableDCache+0x84>)
 80030de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80030e4:	f3bf 8f4f 	dsb	sy
}
 80030e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80030ea:	f3bf 8f6f 	isb	sy
}
 80030ee:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <SD_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SD_Init()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
	if (f_mount(&SDFatFS, (TCHAR const *)SDPath, 0) != FR_OK)
 8003104:	2200      	movs	r2, #0
 8003106:	4909      	ldr	r1, [pc, #36]	@ (800312c <SD_Init+0x2c>)
 8003108:	4809      	ldr	r0, [pc, #36]	@ (8003130 <SD_Init+0x30>)
 800310a:	f7fe fee1 	bl	8001ed0 <f_mount>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <SD_Init+0x1a>
	{
		Error_Handler();
 8003114:	f001 fa04 	bl	8004520 <Error_Handler>
	}
	else
	{
		BSP_LCD_DisplayStringAt(0, 40, (uint8_t *)"SD - Mount Ok", CENTER_MODE);
	}
}
 8003118:	e005      	b.n	8003126 <SD_Init+0x26>
		BSP_LCD_DisplayStringAt(0, 40, (uint8_t *)"SD - Mount Ok", CENTER_MODE);
 800311a:	2301      	movs	r3, #1
 800311c:	4a05      	ldr	r2, [pc, #20]	@ (8003134 <SD_Init+0x34>)
 800311e:	2128      	movs	r1, #40	@ 0x28
 8003120:	2000      	movs	r0, #0
 8003122:	f002 f9ff 	bl	8005524 <BSP_LCD_DisplayStringAt>
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20000e68 	.word	0x20000e68
 8003130:	20000e6c 	.word	0x20000e6c
 8003134:	08013960 	.word	0x08013960

08003138 <Audio_Init>:

void Audio_Init(uint32_t freq)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af02      	add	r7, sp, #8
 800313e:	6078      	str	r0, [r7, #4]
	static int init = 0;
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_INPUT_LINE_1,
 8003140:	2302      	movs	r3, #2
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	2310      	movs	r3, #16
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	2102      	movs	r1, #2
 800314a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 800314e:	f001 fdd9 	bl	8004d04 <BSP_AUDIO_IN_OUT_Init>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
		}
	}

	/* Initialize SDRAM buffers */
	//	memset((uint16_t*) AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
	memset((uint16_t *)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8003156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800315a:	2100      	movs	r1, #0
 800315c:	480d      	ldr	r0, [pc, #52]	@ (8003194 <Audio_Init+0x5c>)
 800315e:	f010 fb7f 	bl	8013860 <memset>
	//	memset((uint16_t*) AUDIO_BUFFER_READ, 0, AUDIO_BLOCK_SIZE * 2);

	/* Start Recording */
	BSP_AUDIO_OUT_SetVolume(70);
 8003162:	2046      	movs	r0, #70	@ 0x46
 8003164:	f001 fc24 	bl	80049b0 <BSP_AUDIO_OUT_SetVolume>
	/* Start Playback */
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8003168:	2005      	movs	r0, #5
 800316a:	f001 fc39 	bl	80049e0 <BSP_AUDIO_OUT_SetAudioFrameSlot>
	if (BSP_AUDIO_OUT_Play((uint16_t *)AUDIO_BUFFER_OUT,
 800316e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003172:	4808      	ldr	r0, [pc, #32]	@ (8003194 <Audio_Init+0x5c>)
 8003174:	f001 fbf2 	bl	800495c <BSP_AUDIO_OUT_Play>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <Audio_Init+0x54>
						   AUDIO_BLOCK_SIZE * 2) == AUDIO_OK)
	{

		if (init == 0)
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <Audio_Init+0x60>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <Audio_Init+0x54>
		{
			// sprintf(text,"Aud_freq= %u",(int)freq);
			init = 1;
 8003186:	4b04      	ldr	r3, [pc, #16]	@ (8003198 <Audio_Init+0x60>)
 8003188:	2201      	movs	r2, #1
 800318a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	c007fc00 	.word	0xc007fc00
 8003198:	20000988 	.word	0x20000988

0800319c <read_header>:
								CENTER_MODE);
	}
}

void read_header()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0

	uint32_t data = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
	uint32_t nb_bl;
	uint32_t bytesread;
	uint32_t taille_octet;

	// Lecture du nombre d'octets
	f_lseek(&SDFile, 04);
 80031a6:	2104      	movs	r1, #4
 80031a8:	4818      	ldr	r0, [pc, #96]	@ (800320c <read_header+0x70>)
 80031aa:	f7ff fadc 	bl	8002766 <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 80031ae:	463b      	mov	r3, r7
 80031b0:	1d39      	adds	r1, r7, #4
 80031b2:	2204      	movs	r2, #4
 80031b4:	4815      	ldr	r0, [pc, #84]	@ (800320c <read_header+0x70>)
 80031b6:	f7ff f8b0 	bl	800231a <f_read>
	//	taille_fichier=((data|MASK_32_TO_8_0)<<24)|((data|MASK_32_TO_8_1)<<8)|((data|MASK_32_TO_8_2)>>8)|((data|MASK_32_TO_8_3)>>24);
	taille_octet = data;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	60fb      	str	r3, [r7, #12]
	nb_bl = data / 512;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0a5b      	lsrs	r3, r3, #9
 80031c2:	60bb      	str	r3, [r7, #8]
	NB_Bloc = (uint32_t)nb_bl;
 80031c4:	4a12      	ldr	r2, [pc, #72]	@ (8003210 <read_header+0x74>)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6013      	str	r3, [r2, #0]
	data = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	607b      	str	r3, [r7, #4]

	// Lecture de la fréquence d'échantillonnage
	f_lseek(&SDFile, 24);
 80031ce:	2118      	movs	r1, #24
 80031d0:	480e      	ldr	r0, [pc, #56]	@ (800320c <read_header+0x70>)
 80031d2:	f7ff fac8 	bl	8002766 <f_lseek>
	f_read(&SDFile, &data, 4, (void *)&bytesread);
 80031d6:	463b      	mov	r3, r7
 80031d8:	1d39      	adds	r1, r7, #4
 80031da:	2204      	movs	r2, #4
 80031dc:	480b      	ldr	r0, [pc, #44]	@ (800320c <read_header+0x70>)
 80031de:	f7ff f89c 	bl	800231a <f_read>
	//	freq=((data2|MASK_32_TO_8_0)<<24)|((data2|MASK_32_TO_8_1)<<8)|((data2|MASK_32_TO_8_2)>>8)|((data2|MASK_32_TO_8_3)>>24);
	freq_audio = data;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003214 <read_header+0x78>)
 80031e6:	6013      	str	r3, [r2, #0]

	// Nombre d'octets par secondes
	f_lseek(&SDFile, 28);
 80031e8:	211c      	movs	r1, #28
 80031ea:	4808      	ldr	r0, [pc, #32]	@ (800320c <read_header+0x70>)
 80031ec:	f7ff fabb 	bl	8002766 <f_lseek>
	f_read(&SDFile, (uint8_t *)&data, 4, (void *)&bytesread);
 80031f0:	463b      	mov	r3, r7
 80031f2:	1d39      	adds	r1, r7, #4
 80031f4:	2204      	movs	r2, #4
 80031f6:	4805      	ldr	r0, [pc, #20]	@ (800320c <read_header+0x70>)
 80031f8:	f7ff f88f 	bl	800231a <f_read>
	Nb_octets_seconde = data;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a06      	ldr	r2, [pc, #24]	@ (8003218 <read_header+0x7c>)
 8003200:	6013      	str	r3, [r2, #0]
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200010a0 	.word	0x200010a0
 8003210:	20000910 	.word	0x20000910
 8003214:	20000918 	.word	0x20000918
 8003218:	20000028 	.word	0x20000028

0800321c <Charge_Wave>:

void Charge_Wave()
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0

	f_close(&SDFile);
 8003220:	480b      	ldr	r0, [pc, #44]	@ (8003250 <Charge_Wave+0x34>)
 8003222:	f7ff fa71 	bl	8002708 <f_close>
	f_open(&SDFile, Song_Name, FA_READ);
 8003226:	2201      	movs	r2, #1
 8003228:	490a      	ldr	r1, [pc, #40]	@ (8003254 <Charge_Wave+0x38>)
 800322a:	4809      	ldr	r0, [pc, #36]	@ (8003250 <Charge_Wave+0x34>)
 800322c:	f7fe feb4 	bl	8001f98 <f_open>
	read_header();
 8003230:	f7ff ffb4 	bl	800319c <read_header>
	Audio_Init(freq_audio);
 8003234:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <Charge_Wave+0x3c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff ff7d 	bl	8003138 <Audio_Init>
	f_lseek(&SDFile, 44);
 800323e:	212c      	movs	r1, #44	@ 0x2c
 8003240:	4803      	ldr	r0, [pc, #12]	@ (8003250 <Charge_Wave+0x34>)
 8003242:	f7ff fa90 	bl	8002766 <f_lseek>
	Bloc_Cursor = 0;
 8003246:	4b05      	ldr	r3, [pc, #20]	@ (800325c <Charge_Wave+0x40>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200010a0 	.word	0x200010a0
 8003254:	080139ac 	.word	0x080139ac
 8003258:	20000918 	.word	0x20000918
 800325c:	20000914 	.word	0x20000914

08003260 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003260:	b5b0      	push	{r4, r5, r7, lr}
 8003262:	b0b6      	sub	sp, #216	@ 0xd8
 8003264:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8003266:	f7ff fee1 	bl	800302c <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 800326a:	f7ff ff05 	bl	8003078 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800326e:	f005 f910 	bl	8008492 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003272:	f000 f921 	bl	80034b8 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8003276:	f000 f98f 	bl	8003598 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800327a:	f000 fccd 	bl	8003c18 <MX_GPIO_Init>
	MX_DMA_Init();
 800327e:	f000 fc0d 	bl	8003a9c <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8003282:	f000 fbbb 	bl	80039fc <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8003286:	f00c fd65 	bl	800fd54 <MX_FATFS_Init>
	MX_FMC_Init();
 800328a:	f000 fc3d 	bl	8003b08 <MX_FMC_Init>
	MX_LTDC_Init();
 800328e:	f000 fa8b 	bl	80037a8 <MX_LTDC_Init>
	MX_USART1_UART_Init();
 8003292:	f000 fbd3 	bl	8003a3c <MX_USART1_UART_Init>
	MX_DMA2D_Init();
 8003296:	f000 fa55 	bl	8003744 <MX_DMA2D_Init>
	MX_SAI2_Init();
 800329a:	f000 fb07 	bl	80038ac <MX_SAI2_Init>
	MX_ADC1_Init();
 800329e:	f000 f9ad 	bl	80035fc <MX_ADC1_Init>
	MX_ADC3_Init();
 80032a2:	f000 f9fd 	bl	80036a0 <MX_ADC3_Init>
	/* USER CODE BEGIN 2 */

	// Initialisation de l'écran LCD
	BSP_LCD_Init();
 80032a6:	f001 ff31 	bl	800510c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80032aa:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80032ae:	2000      	movs	r0, #0
 80032b0:	f001 ffc4 	bl	800523c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 80032b4:	f001 ff9a 	bl	80051ec <BSP_LCD_GetXSize>
 80032b8:	4604      	mov	r4, r0
 80032ba:	f001 ffab 	bl	8005214 <BSP_LCD_GetYSize>
 80032be:	4603      	mov	r3, r0
 80032c0:	fb04 f303 	mul.w	r3, r4, r3
 80032c4:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4619      	mov	r1, r3
 80032cc:	2001      	movs	r0, #1
 80032ce:	f001 ffb5 	bl	800523c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(0);
 80032d2:	2000      	movs	r0, #0
 80032d4:	f002 f812 	bl	80052fc <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80032d8:	f04f 30ff 	mov.w	r0, #4294967295
 80032dc:	f002 f8b6 	bl	800544c <BSP_LCD_Clear>
	BSP_LCD_SelectLayer(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f002 f80b 	bl	80052fc <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f002 f8b0 	bl	800544c <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 80032ec:	4861      	ldr	r0, [pc, #388]	@ (8003474 <main+0x214>)
 80032ee:	f002 f87d 	bl	80053ec <BSP_LCD_SetFont>

	// Activer les deux couches
	BSP_LCD_SetLayerVisible(0, ENABLE);
 80032f2:	2101      	movs	r1, #1
 80032f4:	2000      	movs	r0, #0
 80032f6:	f002 f811 	bl	800531c <BSP_LCD_SetLayerVisible>
	BSP_LCD_SetLayerVisible(1, ENABLE);
 80032fa:	2101      	movs	r1, #1
 80032fc:	2001      	movs	r0, #1
 80032fe:	f002 f80d 	bl	800531c <BSP_LCD_SetLayerVisible>

	// Activer le mode multi-couches
	BSP_LCD_SetTransparency(0, 255); // Couche inférieure opaque
 8003302:	21ff      	movs	r1, #255	@ 0xff
 8003304:	2000      	movs	r0, #0
 8003306:	f002 f847 	bl	8005398 <BSP_LCD_SetTransparency>
	BSP_LCD_SetTransparency(1, 0);	 // Couche supérieure transparente
 800330a:	2100      	movs	r1, #0
 800330c:	2001      	movs	r0, #1
 800330e:	f002 f843 	bl	8005398 <BSP_LCD_SetTransparency>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003312:	f001 ff6b 	bl	80051ec <BSP_LCD_GetXSize>
 8003316:	4603      	mov	r3, r0
 8003318:	b29c      	uxth	r4, r3
 800331a:	f001 ff7b 	bl	8005214 <BSP_LCD_GetYSize>
 800331e:	4603      	mov	r3, r0
 8003320:	b29b      	uxth	r3, r3
 8003322:	4619      	mov	r1, r3
 8003324:	4620      	mov	r0, r4
 8003326:	f002 fdd5 	bl	8005ed4 <BSP_TS_Init>
	Audio_Init(Audio_freq);
 800332a:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 800332e:	f7ff ff03 	bl	8003138 <Audio_Init>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of WakeUp */
	osMessageQDef(WakeUp, 1, uint8_t);
 8003332:	4b51      	ldr	r3, [pc, #324]	@ (8003478 <main+0x218>)
 8003334:	f107 04c8 	add.w	r4, r7, #200	@ 0xc8
 8003338:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800333a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	WakeUpHandle = osMessageCreate(osMessageQ(WakeUp), NULL);
 800333e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f00d fa34 	bl	80107b2 <osMessageCreate>
 800334a:	4603      	mov	r3, r0
 800334c:	4a4b      	ldr	r2, [pc, #300]	@ (800347c <main+0x21c>)
 800334e:	6013      	str	r3, [r2, #0]
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */

	/* definition and creation of Play_wav */
	osThreadDef(Play_wav, Play_Wave, osPriorityHigh, 0, 256);
 8003350:	4b4b      	ldr	r3, [pc, #300]	@ (8003480 <main+0x220>)
 8003352:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8003356:	461d      	mov	r5, r3
 8003358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800335a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800335c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003360:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Play_wavHandle = osThreadCreate(osThread(Play_wav), NULL);
 8003364:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f00d f8f8 	bl	8010560 <osThreadCreate>
 8003370:	4603      	mov	r3, r0
 8003372:	4a44      	ldr	r2, [pc, #272]	@ (8003484 <main+0x224>)
 8003374:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* definition and creation of task_Affich_Pic */
	osThreadDef(task_Affich_Pic, Affichage_Pic, osPriorityNormal, 0, 1024);
 8003376:	4b44      	ldr	r3, [pc, #272]	@ (8003488 <main+0x228>)
 8003378:	f107 0490 	add.w	r4, r7, #144	@ 0x90
 800337c:	461d      	mov	r5, r3
 800337e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task_Affich_PicHandle = osThreadCreate(osThread(task_Affich_Pic), NULL);
 800338a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f00d f8e5 	bl	8010560 <osThreadCreate>
 8003396:	4603      	mov	r3, r0
 8003398:	4a3c      	ldr	r2, [pc, #240]	@ (800348c <main+0x22c>)
 800339a:	6013      	str	r3, [r2, #0]

	/* definition and creation of task_Demarrage */
	osThreadDef(task_Demarrage, Demarrage, osPriorityHigh, 0, 1024);
 800339c:	4b3c      	ldr	r3, [pc, #240]	@ (8003490 <main+0x230>)
 800339e:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 80033a2:	461d      	mov	r5, r3
 80033a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task_DemarrageHandle = osThreadCreate(osThread(task_Demarrage), NULL);
 80033b0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00d f8d2 	bl	8010560 <osThreadCreate>
 80033bc:	4603      	mov	r3, r0
 80033be:	4a35      	ldr	r2, [pc, #212]	@ (8003494 <main+0x234>)
 80033c0:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	osThreadDef(task_chgZone, chgZone, osPriorityHigh, 0, 256);
 80033c2:	4b35      	ldr	r3, [pc, #212]	@ (8003498 <main+0x238>)
 80033c4:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80033c8:	461d      	mov	r5, r3
 80033ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task_chgZoneHandle = osThreadCreate(osThread(task_chgZone), NULL);
 80033d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f00d f8bf 	bl	8010560 <osThreadCreate>
 80033e2:	4603      	mov	r3, r0
 80033e4:	4a2d      	ldr	r2, [pc, #180]	@ (800349c <main+0x23c>)
 80033e6:	6013      	str	r3, [r2, #0]
	/* definition and creation of deplacement */
	osThreadDef(task_deplacement, deplacement, osPriorityHigh, 0, 512);
 80033e8:	4b2d      	ldr	r3, [pc, #180]	@ (80034a0 <main+0x240>)
 80033ea:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80033ee:	461d      	mov	r5, r3
 80033f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task_deplacementHandle = osThreadCreate(osThread(task_deplacement), NULL);
 80033fc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f00d f8ac 	bl	8010560 <osThreadCreate>
 8003408:	4603      	mov	r3, r0
 800340a:	4a26      	ldr	r2, [pc, #152]	@ (80034a4 <main+0x244>)
 800340c:	6013      	str	r3, [r2, #0]
	/* definition and creation of deplac_pok */
	osThreadDef(task_deplac_pok, deplac_pok, osPriorityNormal, 0, 1024);
 800340e:	4b26      	ldr	r3, [pc, #152]	@ (80034a8 <main+0x248>)
 8003410:	f107 0420 	add.w	r4, r7, #32
 8003414:	461d      	mov	r5, r3
 8003416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800341a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800341e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task_deplac_pokHandle = osThreadCreate(osThread(task_deplac_pok), NULL);
 8003422:	f107 0320 	add.w	r3, r7, #32
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f00d f899 	bl	8010560 <osThreadCreate>
 800342e:	4603      	mov	r3, r0
 8003430:	4a1e      	ldr	r2, [pc, #120]	@ (80034ac <main+0x24c>)
 8003432:	6013      	str	r3, [r2, #0]
	/* definition and creation of task_combat */
	osThreadDef(task_combat, combat, osPriorityHigh, 0, 1024);
 8003434:	4b1e      	ldr	r3, [pc, #120]	@ (80034b0 <main+0x250>)
 8003436:	1d3c      	adds	r4, r7, #4
 8003438:	461d      	mov	r5, r3
 800343a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800343c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800343e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003442:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	task_combatHandle = osThreadCreate(osThread(task_combat), NULL);
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f00d f888 	bl	8010560 <osThreadCreate>
 8003450:	4603      	mov	r3, r0
 8003452:	4a18      	ldr	r2, [pc, #96]	@ (80034b4 <main+0x254>)
 8003454:	6013      	str	r3, [r2, #0]
	vTaskSuspend(task_combatHandle);
 8003456:	4b17      	ldr	r3, [pc, #92]	@ (80034b4 <main+0x254>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4618      	mov	r0, r3
 800345c:	f00e fd48 	bl	8011ef0 <vTaskSuspend>
	vTaskSuspend(Play_wavHandle);
 8003460:	4b08      	ldr	r3, [pc, #32]	@ (8003484 <main+0x224>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f00e fd43 	bl	8011ef0 <vTaskSuspend>
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 800346a:	f00d f856 	bl	801051a <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <main+0x20e>
 8003472:	bf00      	nop
 8003474:	20000034 	.word	0x20000034
 8003478:	080139b8 	.word	0x080139b8
 800347c:	2000090c 	.word	0x2000090c
 8003480:	080139d4 	.word	0x080139d4
 8003484:	200008f0 	.word	0x200008f0
 8003488:	08013a00 	.word	0x08013a00
 800348c:	200008f4 	.word	0x200008f4
 8003490:	08013a2c 	.word	0x08013a2c
 8003494:	20000900 	.word	0x20000900
 8003498:	08013a58 	.word	0x08013a58
 800349c:	200008fc 	.word	0x200008fc
 80034a0:	08013a88 	.word	0x08013a88
 80034a4:	200008f8 	.word	0x200008f8
 80034a8:	08013ab4 	.word	0x08013ab4
 80034ac:	20000908 	.word	0x20000908
 80034b0:	08013adc 	.word	0x08013adc
 80034b4:	20000904 	.word	0x20000904

080034b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b094      	sub	sp, #80	@ 0x50
 80034bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034be:	f107 0320 	add.w	r3, r7, #32
 80034c2:	2230      	movs	r2, #48	@ 0x30
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f010 f9ca 	bl	8013860 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80034dc:	f007 fe72 	bl	800b1c4 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80034e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003590 <SystemClock_Config+0xd8>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	4a2a      	ldr	r2, [pc, #168]	@ (8003590 <SystemClock_Config+0xd8>)
 80034e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ec:	4b28      	ldr	r3, [pc, #160]	@ (8003590 <SystemClock_Config+0xd8>)
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034f8:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <SystemClock_Config+0xdc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a25      	ldr	r2, [pc, #148]	@ (8003594 <SystemClock_Config+0xdc>)
 80034fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <SystemClock_Config+0xdc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003510:	2301      	movs	r3, #1
 8003512:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003514:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800351a:	2302      	movs	r3, #2
 800351c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800351e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003522:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8003524:	2319      	movs	r3, #25
 8003526:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 400;
 8003528:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800352c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800352e:	2302      	movs	r3, #2
 8003530:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8003532:	2309      	movs	r3, #9
 8003534:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003536:	f107 0320 	add.w	r3, r7, #32
 800353a:	4618      	mov	r0, r3
 800353c:	f007 fea2 	bl	800b284 <HAL_RCC_OscConfig>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8003546:	f000 ffeb 	bl	8004520 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800354a:	f007 fe4b 	bl	800b1e4 <HAL_PWREx_EnableOverDrive>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <SystemClock_Config+0xa0>
	{
		Error_Handler();
 8003554:	f000 ffe4 	bl	8004520 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003558:	230f      	movs	r3, #15
 800355a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800355c:	2302      	movs	r3, #2
 800355e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003564:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003568:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800356a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800356e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8003570:	f107 030c 	add.w	r3, r7, #12
 8003574:	2106      	movs	r1, #6
 8003576:	4618      	mov	r0, r3
 8003578:	f008 f928 	bl	800b7cc <HAL_RCC_ClockConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <SystemClock_Config+0xce>
	{
		Error_Handler();
 8003582:	f000 ffcd 	bl	8004520 <Error_Handler>
	}
}
 8003586:	bf00      	nop
 8003588:	3750      	adds	r7, #80	@ 0x50
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	40007000 	.word	0x40007000

08003598 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b0a2      	sub	sp, #136	@ 0x88
 800359c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	2284      	movs	r2, #132	@ 0x84
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f010 f95b 	bl	8013860 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC | RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_CLK48;
 80035aa:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <PeriphCommonClock_Config+0x60>)
 80035ac:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80035ae:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80035b2:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80035b4:	2305      	movs	r3, #5
 80035b6:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80035b8:	2302      	movs	r3, #2
 80035ba:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80035bc:	2303      	movs	r3, #3
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 80035c0:	2301      	movs	r3, #1
 80035c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80035c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035c8:	633b      	str	r3, [r7, #48]	@ 0x30
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80035ca:	2300      	movs	r3, #0
 80035cc:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80035ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80035d6:	2300      	movs	r3, #0
 80035d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	4618      	mov	r0, r3
 80035e0:	f008 fb0c 	bl	800bbfc <HAL_RCCEx_PeriphCLKConfig>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <PeriphCommonClock_Config+0x56>
	{
		Error_Handler();
 80035ea:	f000 ff99 	bl	8004520 <Error_Handler>
	}
}
 80035ee:	bf00      	nop
 80035f0:	3788      	adds	r7, #136	@ 0x88
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	00b00008 	.word	0x00b00008

080035fc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8003602:	463b      	mov	r3, r7
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800360e:	4b21      	ldr	r3, [pc, #132]	@ (8003694 <MX_ADC1_Init+0x98>)
 8003610:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <MX_ADC1_Init+0x9c>)
 8003612:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003614:	4b1f      	ldr	r3, [pc, #124]	@ (8003694 <MX_ADC1_Init+0x98>)
 8003616:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800361a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800361c:	4b1d      	ldr	r3, [pc, #116]	@ (8003694 <MX_ADC1_Init+0x98>)
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003622:	4b1c      	ldr	r3, [pc, #112]	@ (8003694 <MX_ADC1_Init+0x98>)
 8003624:	2200      	movs	r2, #0
 8003626:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8003628:	4b1a      	ldr	r3, [pc, #104]	@ (8003694 <MX_ADC1_Init+0x98>)
 800362a:	2200      	movs	r2, #0
 800362c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800362e:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <MX_ADC1_Init+0x98>)
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003636:	4b17      	ldr	r3, [pc, #92]	@ (8003694 <MX_ADC1_Init+0x98>)
 8003638:	2200      	movs	r2, #0
 800363a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800363c:	4b15      	ldr	r3, [pc, #84]	@ (8003694 <MX_ADC1_Init+0x98>)
 800363e:	4a17      	ldr	r2, [pc, #92]	@ (800369c <MX_ADC1_Init+0xa0>)
 8003640:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <MX_ADC1_Init+0x98>)
 8003644:	2200      	movs	r2, #0
 8003646:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8003648:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <MX_ADC1_Init+0x98>)
 800364a:	2201      	movs	r2, #1
 800364c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800364e:	4b11      	ldr	r3, [pc, #68]	@ (8003694 <MX_ADC1_Init+0x98>)
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003656:	4b0f      	ldr	r3, [pc, #60]	@ (8003694 <MX_ADC1_Init+0x98>)
 8003658:	2201      	movs	r2, #1
 800365a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800365c:	480d      	ldr	r0, [pc, #52]	@ (8003694 <MX_ADC1_Init+0x98>)
 800365e:	f004 ff69 	bl	8008534 <HAL_ADC_Init>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8003668:	f000 ff5a 	bl	8004520 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800366c:	2300      	movs	r3, #0
 800366e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003670:	2301      	movs	r3, #1
 8003672:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003678:	463b      	mov	r3, r7
 800367a:	4619      	mov	r1, r3
 800367c:	4805      	ldr	r0, [pc, #20]	@ (8003694 <MX_ADC1_Init+0x98>)
 800367e:	f004 ff9d 	bl	80085bc <HAL_ADC_ConfigChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8003688:	f000 ff4a 	bl	8004520 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	2000037c 	.word	0x2000037c
 8003698:	40012000 	.word	0x40012000
 800369c:	0f000001 	.word	0x0f000001

080036a0 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80036a6:	463b      	mov	r3, r7
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	609a      	str	r2, [r3, #8]
 80036b0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC3_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 80036b2:	4b21      	ldr	r3, [pc, #132]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036b4:	4a21      	ldr	r2, [pc, #132]	@ (800373c <MX_ADC3_Init+0x9c>)
 80036b6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80036be:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80036c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 80036cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80036d2:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036da:	4b17      	ldr	r3, [pc, #92]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036dc:	2200      	movs	r2, #0
 80036de:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036e0:	4b15      	ldr	r3, [pc, #84]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036e2:	4a17      	ldr	r2, [pc, #92]	@ (8003740 <MX_ADC3_Init+0xa0>)
 80036e4:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036e6:	4b14      	ldr	r3, [pc, #80]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 80036ec:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 80036f2:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003738 <MX_ADC3_Init+0x98>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8003700:	480d      	ldr	r0, [pc, #52]	@ (8003738 <MX_ADC3_Init+0x98>)
 8003702:	f004 ff17 	bl	8008534 <HAL_ADC_Init>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 800370c:	f000 ff08 	bl	8004520 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8003710:	2306      	movs	r3, #6
 8003712:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003714:	2301      	movs	r3, #1
 8003716:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800371c:	463b      	mov	r3, r7
 800371e:	4619      	mov	r1, r3
 8003720:	4805      	ldr	r0, [pc, #20]	@ (8003738 <MX_ADC3_Init+0x98>)
 8003722:	f004 ff4b 	bl	80085bc <HAL_ADC_ConfigChannel>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 800372c:	f000 fef8 	bl	8004520 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200003c4 	.word	0x200003c4
 800373c:	40012200 	.word	0x40012200
 8003740:	0f000001 	.word	0x0f000001

08003744 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8003748:	4b15      	ldr	r3, [pc, #84]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 800374a:	4a16      	ldr	r2, [pc, #88]	@ (80037a4 <MX_DMA2D_Init+0x60>)
 800374c:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 800374e:	4b14      	ldr	r3, [pc, #80]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 8003750:	2200      	movs	r2, #0
 8003752:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8003754:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800375a:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 800375c:	2200      	movs	r2, #0
 800375e:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 8003762:	2200      	movs	r2, #0
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8003766:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 8003768:	2200      	movs	r2, #0
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8003772:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 8003774:	2200      	movs	r2, #0
 8003776:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003778:	4809      	ldr	r0, [pc, #36]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 800377a:	f005 fe55 	bl	8009428 <HAL_DMA2D_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8003784:	f000 fecc 	bl	8004520 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003788:	2101      	movs	r1, #1
 800378a:	4805      	ldr	r0, [pc, #20]	@ (80037a0 <MX_DMA2D_Init+0x5c>)
 800378c:	f005 ffaa 	bl	80096e4 <HAL_DMA2D_ConfigLayer>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8003796:	f000 fec3 	bl	8004520 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000040c 	.word	0x2000040c
 80037a4:	4002b000 	.word	0x4002b000

080037a8 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b08e      	sub	sp, #56	@ 0x38
 80037ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80037ae:	1d3b      	adds	r3, r7, #4
 80037b0:	2234      	movs	r2, #52	@ 0x34
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f010 f853 	bl	8013860 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80037ba:	4b3a      	ldr	r3, [pc, #232]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037bc:	4a3a      	ldr	r2, [pc, #232]	@ (80038a8 <MX_LTDC_Init+0x100>)
 80037be:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80037c0:	4b38      	ldr	r3, [pc, #224]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80037c6:	4b37      	ldr	r3, [pc, #220]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80037cc:	4b35      	ldr	r3, [pc, #212]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80037d2:	4b34      	ldr	r3, [pc, #208]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 80037d8:	4b32      	ldr	r3, [pc, #200]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037da:	2228      	movs	r2, #40	@ 0x28
 80037dc:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 80037de:	4b31      	ldr	r3, [pc, #196]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037e0:	2209      	movs	r2, #9
 80037e2:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 80037e4:	4b2f      	ldr	r3, [pc, #188]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037e6:	2235      	movs	r2, #53	@ 0x35
 80037e8:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80037ea:	4b2e      	ldr	r3, [pc, #184]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037ec:	220b      	movs	r2, #11
 80037ee:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 80037f0:	4b2c      	ldr	r3, [pc, #176]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037f2:	f240 2215 	movw	r2, #533	@ 0x215
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 80037f8:	4b2a      	ldr	r3, [pc, #168]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 80037fa:	f240 121b 	movw	r2, #283	@ 0x11b
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 565;
 8003800:	4b28      	ldr	r3, [pc, #160]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 8003802:	f240 2235 	movw	r2, #565	@ 0x235
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 285;
 8003808:	4b26      	ldr	r3, [pc, #152]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 800380a:	f240 121d 	movw	r2, #285	@ 0x11d
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8003810:	4b24      	ldr	r3, [pc, #144]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8003818:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 8003820:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003828:	481e      	ldr	r0, [pc, #120]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 800382a:	f007 f91d 	bl	800aa68 <HAL_LTDC_Init>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8003834:	f000 fe74 	bl	8004520 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 800383c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003840:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8003846:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800384a:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800384c:	2302      	movs	r3, #2
 800384e:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8003850:	23ff      	movs	r3, #255	@ 0xff
 8003852:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003858:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800385c:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800385e:	2307      	movs	r3, #7
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8003862:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8003866:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 480;
 8003868:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 272;
 800386e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003872:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003886:	1d3b      	adds	r3, r7, #4
 8003888:	2200      	movs	r2, #0
 800388a:	4619      	mov	r1, r3
 800388c:	4805      	ldr	r0, [pc, #20]	@ (80038a4 <MX_LTDC_Init+0xfc>)
 800388e:	f007 fa7d 	bl	800ad8c <HAL_LTDC_ConfigLayer>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8003898:	f000 fe42 	bl	8004520 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */
}
 800389c:	bf00      	nop
 800389e:	3738      	adds	r7, #56	@ 0x38
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	2000044c 	.word	0x2000044c
 80038a8:	40016800 	.word	0x40016800

080038ac <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 80038b0:	4b4e      	ldr	r3, [pc, #312]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038b2:	4a4f      	ldr	r2, [pc, #316]	@ (80039f0 <MX_SAI2_Init+0x144>)
 80038b4:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80038b6:	4b4d      	ldr	r3, [pc, #308]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80038bc:	4b4b      	ldr	r3, [pc, #300]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038be:	2200      	movs	r2, #0
 80038c0:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80038c2:	4b4a      	ldr	r3, [pc, #296]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038c4:	2240      	movs	r2, #64	@ 0x40
 80038c6:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80038c8:	4b48      	ldr	r3, [pc, #288]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80038ce:	4b47      	ldr	r3, [pc, #284]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80038d4:	4b45      	ldr	r3, [pc, #276]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80038da:	4b44      	ldr	r3, [pc, #272]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038dc:	2200      	movs	r2, #0
 80038de:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80038e0:	4b42      	ldr	r3, [pc, #264]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80038e6:	4b41      	ldr	r3, [pc, #260]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80038ec:	4b3f      	ldr	r3, [pc, #252]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038ee:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80038f2:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80038f4:	4b3d      	ldr	r3, [pc, #244]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80038fa:	4b3c      	ldr	r3, [pc, #240]	@ (80039ec <MX_SAI2_Init+0x140>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003900:	4b3a      	ldr	r3, [pc, #232]	@ (80039ec <MX_SAI2_Init+0x140>)
 8003902:	2200      	movs	r2, #0
 8003904:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003906:	4b39      	ldr	r3, [pc, #228]	@ (80039ec <MX_SAI2_Init+0x140>)
 8003908:	2200      	movs	r2, #0
 800390a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 8;
 800390c:	4b37      	ldr	r3, [pc, #220]	@ (80039ec <MX_SAI2_Init+0x140>)
 800390e:	2208      	movs	r2, #8
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8003912:	4b36      	ldr	r3, [pc, #216]	@ (80039ec <MX_SAI2_Init+0x140>)
 8003914:	2201      	movs	r2, #1
 8003916:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8003918:	4b34      	ldr	r3, [pc, #208]	@ (80039ec <MX_SAI2_Init+0x140>)
 800391a:	2200      	movs	r2, #0
 800391c:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800391e:	4b33      	ldr	r3, [pc, #204]	@ (80039ec <MX_SAI2_Init+0x140>)
 8003920:	2200      	movs	r2, #0
 8003922:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8003924:	4b31      	ldr	r3, [pc, #196]	@ (80039ec <MX_SAI2_Init+0x140>)
 8003926:	2200      	movs	r2, #0
 8003928:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800392a:	4b30      	ldr	r3, [pc, #192]	@ (80039ec <MX_SAI2_Init+0x140>)
 800392c:	2200      	movs	r2, #0
 800392e:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8003930:	4b2e      	ldr	r3, [pc, #184]	@ (80039ec <MX_SAI2_Init+0x140>)
 8003932:	2200      	movs	r2, #0
 8003934:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 1;
 8003936:	4b2d      	ldr	r3, [pc, #180]	@ (80039ec <MX_SAI2_Init+0x140>)
 8003938:	2201      	movs	r2, #1
 800393a:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800393c:	4b2b      	ldr	r3, [pc, #172]	@ (80039ec <MX_SAI2_Init+0x140>)
 800393e:	2200      	movs	r2, #0
 8003940:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8003942:	482a      	ldr	r0, [pc, #168]	@ (80039ec <MX_SAI2_Init+0x140>)
 8003944:	f008 ff96 	bl	800c874 <HAL_SAI_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_SAI2_Init+0xa6>
	{
		Error_Handler();
 800394e:	f000 fde7 	bl	8004520 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8003952:	4b28      	ldr	r3, [pc, #160]	@ (80039f4 <MX_SAI2_Init+0x148>)
 8003954:	4a28      	ldr	r2, [pc, #160]	@ (80039f8 <MX_SAI2_Init+0x14c>)
 8003956:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8003958:	4b26      	ldr	r3, [pc, #152]	@ (80039f4 <MX_SAI2_Init+0x148>)
 800395a:	2200      	movs	r2, #0
 800395c:	631a      	str	r2, [r3, #48]	@ 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800395e:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <MX_SAI2_Init+0x148>)
 8003960:	2203      	movs	r2, #3
 8003962:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8003964:	4b23      	ldr	r3, [pc, #140]	@ (80039f4 <MX_SAI2_Init+0x148>)
 8003966:	2240      	movs	r2, #64	@ 0x40
 8003968:	635a      	str	r2, [r3, #52]	@ 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800396a:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <MX_SAI2_Init+0x148>)
 800396c:	2200      	movs	r2, #0
 800396e:	639a      	str	r2, [r3, #56]	@ 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003970:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <MX_SAI2_Init+0x148>)
 8003972:	2200      	movs	r2, #0
 8003974:	63da      	str	r2, [r3, #60]	@ 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8003976:	4b1f      	ldr	r3, [pc, #124]	@ (80039f4 <MX_SAI2_Init+0x148>)
 8003978:	2201      	movs	r2, #1
 800397a:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800397c:	4b1d      	ldr	r3, [pc, #116]	@ (80039f4 <MX_SAI2_Init+0x148>)
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8003982:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <MX_SAI2_Init+0x148>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003988:	4b1a      	ldr	r3, [pc, #104]	@ (80039f4 <MX_SAI2_Init+0x148>)
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800398e:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <MX_SAI2_Init+0x148>)
 8003990:	2200      	movs	r2, #0
 8003992:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8003994:	4b17      	ldr	r3, [pc, #92]	@ (80039f4 <MX_SAI2_Init+0x148>)
 8003996:	2200      	movs	r2, #0
 8003998:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800399a:	4b16      	ldr	r3, [pc, #88]	@ (80039f4 <MX_SAI2_Init+0x148>)
 800399c:	2200      	movs	r2, #0
 800399e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 8;
 80039a0:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039a2:	2208      	movs	r2, #8
 80039a4:	641a      	str	r2, [r3, #64]	@ 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80039a6:	4b13      	ldr	r3, [pc, #76]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	645a      	str	r2, [r3, #68]	@ 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80039ac:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	649a      	str	r2, [r3, #72]	@ 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80039b2:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	64da      	str	r2, [r3, #76]	@ 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80039b8:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	651a      	str	r2, [r3, #80]	@ 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	655a      	str	r2, [r3, #84]	@ 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	659a      	str	r2, [r3, #88]	@ 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 1;
 80039ca:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	65da      	str	r2, [r3, #92]	@ 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80039d0:	4b08      	ldr	r3, [pc, #32]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80039d6:	4807      	ldr	r0, [pc, #28]	@ (80039f4 <MX_SAI2_Init+0x148>)
 80039d8:	f008 ff4c 	bl	800c874 <HAL_SAI_Init>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_SAI2_Init+0x13a>
	{
		Error_Handler();
 80039e2:	f000 fd9d 	bl	8004520 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200004f4 	.word	0x200004f4
 80039f0:	40015c04 	.word	0x40015c04
 80039f4:	20000578 	.word	0x20000578
 80039f8:	40015c24 	.word	0x40015c24

080039fc <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <MX_SDMMC1_SD_Init+0x38>)
 8003a02:	4a0d      	ldr	r2, [pc, #52]	@ (8003a38 <MX_SDMMC1_SD_Init+0x3c>)
 8003a04:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <MX_SDMMC1_SD_Init+0x38>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <MX_SDMMC1_SD_Init+0x38>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003a12:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <MX_SDMMC1_SD_Init+0x38>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <MX_SDMMC1_SD_Init+0x38>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <MX_SDMMC1_SD_Init+0x38>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <MX_SDMMC1_SD_Init+0x38>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	200006bc 	.word	0x200006bc
 8003a38:	40012c00 	.word	0x40012c00

08003a3c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003a40:	4b14      	ldr	r3, [pc, #80]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a42:	4a15      	ldr	r2, [pc, #84]	@ (8003a98 <MX_USART1_UART_Init+0x5c>)
 8003a44:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003a46:	4b13      	ldr	r3, [pc, #76]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a4c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a4e:	4b11      	ldr	r3, [pc, #68]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003a60:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a62:	220c      	movs	r2, #12
 8003a64:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a66:	4b0b      	ldr	r3, [pc, #44]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a6c:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a72:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a7e:	4805      	ldr	r0, [pc, #20]	@ (8003a94 <MX_USART1_UART_Init+0x58>)
 8003a80:	f00a fee2 	bl	800e848 <HAL_UART_Init>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8003a8a:	f000 fd49 	bl	8004520 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000800 	.word	0x20000800
 8003a98:	40011000 	.word	0x40011000

08003a9c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003aa2:	4b18      	ldr	r3, [pc, #96]	@ (8003b04 <MX_DMA_Init+0x68>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	4a17      	ldr	r2, [pc, #92]	@ (8003b04 <MX_DMA_Init+0x68>)
 8003aa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aae:	4b15      	ldr	r3, [pc, #84]	@ (8003b04 <MX_DMA_Init+0x68>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab6:	607b      	str	r3, [r7, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2105      	movs	r1, #5
 8003abe:	203b      	movs	r0, #59	@ 0x3b
 8003ac0:	f005 f884 	bl	8008bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003ac4:	203b      	movs	r0, #59	@ 0x3b
 8003ac6:	f005 f89d 	bl	8008c04 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2105      	movs	r1, #5
 8003ace:	203c      	movs	r0, #60	@ 0x3c
 8003ad0:	f005 f87c 	bl	8008bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003ad4:	203c      	movs	r0, #60	@ 0x3c
 8003ad6:	f005 f895 	bl	8008c04 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2105      	movs	r1, #5
 8003ade:	2045      	movs	r0, #69	@ 0x45
 8003ae0:	f005 f874 	bl	8008bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003ae4:	2045      	movs	r0, #69	@ 0x45
 8003ae6:	f005 f88d 	bl	8008c04 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2105      	movs	r1, #5
 8003aee:	2046      	movs	r0, #70	@ 0x46
 8003af0:	f005 f86c 	bl	8008bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003af4:	2046      	movs	r0, #70	@ 0x46
 8003af6:	f005 f885 	bl	8008c04 <HAL_NVIC_EnableIRQ>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800

08003b08 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
 8003b1c:	615a      	str	r2, [r3, #20]
 8003b1e:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b20:	4b3a      	ldr	r3, [pc, #232]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b22:	4a3b      	ldr	r2, [pc, #236]	@ (8003c10 <MX_FMC_Init+0x108>)
 8003b24:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003b26:	4b39      	ldr	r3, [pc, #228]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b2c:	4b37      	ldr	r3, [pc, #220]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003b32:	4b36      	ldr	r3, [pc, #216]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b34:	2204      	movs	r2, #4
 8003b36:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003b38:	4b34      	ldr	r3, [pc, #208]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b3e:	4b33      	ldr	r3, [pc, #204]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b40:	2240      	movs	r2, #64	@ 0x40
 8003b42:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8003b44:	4b31      	ldr	r3, [pc, #196]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b46:	2280      	movs	r2, #128	@ 0x80
 8003b48:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b4a:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8003b50:	4b2e      	ldr	r3, [pc, #184]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003b56:	4b2d      	ldr	r3, [pc, #180]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8003b62:	2310      	movs	r3, #16
 8003b64:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8003b66:	2310      	movs	r3, #16
 8003b68:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8003b6e:	2310      	movs	r3, #16
 8003b70:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8003b72:	2310      	movs	r3, #16
 8003b74:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8003b76:	2310      	movs	r3, #16
 8003b78:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8003b7a:	2310      	movs	r3, #16
 8003b7c:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4822      	ldr	r0, [pc, #136]	@ (8003c0c <MX_FMC_Init+0x104>)
 8003b84:	f00a faf0 	bl	800e168 <HAL_SDRAM_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_FMC_Init+0x8a>
	{
		Error_Handler();
 8003b8e:	f000 fcc7 	bl	8004520 <Error_Handler>
	}

	/** Perform the SDRAM2 memory initialization sequence
	 */
	hsdram2.Instance = FMC_SDRAM_DEVICE;
 8003b92:	4b20      	ldr	r3, [pc, #128]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003b94:	4a1e      	ldr	r2, [pc, #120]	@ (8003c10 <MX_FMC_Init+0x108>)
 8003b96:	601a      	str	r2, [r3, #0]
	/* hsdram2.Init */
	hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8003b98:	4b1e      	ldr	r3, [pc, #120]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	605a      	str	r2, [r3, #4]
	hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
	hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003ba6:	2204      	movs	r2, #4
 8003ba8:	60da      	str	r2, [r3, #12]
	hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003bac:	2210      	movs	r2, #16
 8003bae:	611a      	str	r2, [r3, #16]
	hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003bb0:	4b18      	ldr	r3, [pc, #96]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003bb2:	2240      	movs	r2, #64	@ 0x40
 8003bb4:	615a      	str	r2, [r3, #20]
	hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8003bb6:	4b17      	ldr	r3, [pc, #92]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	619a      	str	r2, [r3, #24]
	hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003bbc:	4b15      	ldr	r3, [pc, #84]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
	hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	621a      	str	r2, [r3, #32]
	hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003bce:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 8003bd8:	2310      	movs	r3, #16
 8003bda:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8003bdc:	2310      	movs	r3, #16
 8003bde:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8003be0:	2310      	movs	r3, #16
 8003be2:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8003be4:	2310      	movs	r3, #16
 8003be6:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 8003be8:	2310      	movs	r3, #16
 8003bea:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8003bec:	2310      	movs	r3, #16
 8003bee:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4807      	ldr	r0, [pc, #28]	@ (8003c14 <MX_FMC_Init+0x10c>)
 8003bf6:	f00a fab7 	bl	800e168 <HAL_SDRAM_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_FMC_Init+0xfc>
	{
		Error_Handler();
 8003c00:	f000 fc8e 	bl	8004520 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8003c04:	bf00      	nop
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000888 	.word	0x20000888
 8003c10:	a0000140 	.word	0xa0000140
 8003c14:	200008bc 	.word	0x200008bc

08003c18 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b090      	sub	sp, #64	@ 0x40
 8003c1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	609a      	str	r2, [r3, #8]
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003c2e:	4bae      	ldr	r3, [pc, #696]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	4aad      	ldr	r2, [pc, #692]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c34:	f043 0310 	orr.w	r3, r3, #16
 8003c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c3a:	4bab      	ldr	r3, [pc, #684]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003c46:	4ba8      	ldr	r3, [pc, #672]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	4aa7      	ldr	r2, [pc, #668]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c52:	4ba5      	ldr	r3, [pc, #660]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003c5e:	4ba2      	ldr	r3, [pc, #648]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c62:	4aa1      	ldr	r2, [pc, #644]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c64:	f043 0302 	orr.w	r3, r3, #2
 8003c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003c76:	4b9c      	ldr	r3, [pc, #624]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	4a9b      	ldr	r2, [pc, #620]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c7c:	f043 0308 	orr.w	r3, r3, #8
 8003c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c82:	4b99      	ldr	r3, [pc, #612]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	61fb      	str	r3, [r7, #28]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003c8e:	4b96      	ldr	r3, [pc, #600]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a95      	ldr	r2, [pc, #596]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b93      	ldr	r3, [pc, #588]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca6:	4b90      	ldr	r3, [pc, #576]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	4a8f      	ldr	r2, [pc, #572]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cac:	f043 0301 	orr.w	r3, r3, #1
 8003cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb2:	4b8d      	ldr	r3, [pc, #564]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 8003cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	4a89      	ldr	r2, [pc, #548]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cc4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cca:	4b87      	ldr	r3, [pc, #540]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8003cd6:	4b84      	ldr	r3, [pc, #528]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a83      	ldr	r2, [pc, #524]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b81      	ldr	r3, [pc, #516]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8003cee:	4b7e      	ldr	r3, [pc, #504]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003d06:	4b78      	ldr	r3, [pc, #480]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	4a77      	ldr	r2, [pc, #476]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003d0c:	f043 0320 	orr.w	r3, r3, #32
 8003d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d12:	4b75      	ldr	r3, [pc, #468]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003d1e:	4b72      	ldr	r3, [pc, #456]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	4a71      	ldr	r2, [pc, #452]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee8 <MX_GPIO_Init+0x2d0>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003d36:	2201      	movs	r2, #1
 8003d38:	2120      	movs	r1, #32
 8003d3a:	486c      	ldr	r0, [pc, #432]	@ (8003eec <MX_GPIO_Init+0x2d4>)
 8003d3c:	f006 f8d0 	bl	8009ee0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin, GPIO_PIN_RESET);
 8003d40:	2200      	movs	r2, #0
 8003d42:	f241 010c 	movw	r1, #4108	@ 0x100c
 8003d46:	486a      	ldr	r0, [pc, #424]	@ (8003ef0 <MX_GPIO_Init+0x2d8>)
 8003d48:	f006 f8ca 	bl	8009ee0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2108      	movs	r1, #8
 8003d50:	4868      	ldr	r0, [pc, #416]	@ (8003ef4 <MX_GPIO_Init+0x2dc>)
 8003d52:	f006 f8c5 	bl	8009ee0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin | LED2_Pin | LED1_Pin | LED3_Pin, GPIO_PIN_RESET);
 8003d56:	2200      	movs	r2, #0
 8003d58:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8003d5c:	4866      	ldr	r0, [pc, #408]	@ (8003ef8 <MX_GPIO_Init+0x2e0>)
 8003d5e:	f006 f8bf 	bl	8009ee0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin, GPIO_PIN_RESET);
 8003d62:	2200      	movs	r2, #0
 8003d64:	21c8      	movs	r1, #200	@ 0xc8
 8003d66:	4865      	ldr	r0, [pc, #404]	@ (8003efc <MX_GPIO_Init+0x2e4>)
 8003d68:	f006 f8ba 	bl	8009ee0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d70:	2300      	movs	r3, #0
 8003d72:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d74:	2300      	movs	r3, #0
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4860      	ldr	r0, [pc, #384]	@ (8003f00 <MX_GPIO_Init+0x2e8>)
 8003d80:	f005 fdde 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003d84:	2304      	movs	r3, #4
 8003d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003d94:	2309      	movs	r3, #9
 8003d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003d98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4858      	ldr	r0, [pc, #352]	@ (8003f00 <MX_GPIO_Init+0x2e8>)
 8003da0:	f005 fdce 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8003da4:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db2:	2303      	movs	r3, #3
 8003db4:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003db6:	230b      	movs	r3, #11
 8003db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	484e      	ldr	r0, [pc, #312]	@ (8003efc <MX_GPIO_Init+0x2e4>)
 8003dc2:	f005 fdbd 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 8003dc6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dcc:	2312      	movs	r3, #18
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dd8:	2304      	movs	r3, #4
 8003dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003de0:	4619      	mov	r1, r3
 8003de2:	4848      	ldr	r0, [pc, #288]	@ (8003f04 <MX_GPIO_Init+0x2ec>)
 8003de4:	f005 fdac 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003de8:	2310      	movs	r3, #16
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dec:	2302      	movs	r3, #2
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df4:	2300      	movs	r3, #0
 8003df6:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003dfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e00:	4619      	mov	r1, r3
 8003e02:	4840      	ldr	r0, [pc, #256]	@ (8003f04 <MX_GPIO_Init+0x2ec>)
 8003e04:	f005 fd9c 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	2300      	movs	r3, #0
 8003e16:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003e18:	2308      	movs	r3, #8
 8003e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003e1c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e20:	4619      	mov	r1, r3
 8003e22:	4832      	ldr	r0, [pc, #200]	@ (8003eec <MX_GPIO_Init+0x2d4>)
 8003e24:	f005 fd8c 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	2300      	movs	r3, #0
 8003e38:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003e3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e42:	4619      	mov	r1, r3
 8003e44:	4830      	ldr	r0, [pc, #192]	@ (8003f08 <MX_GPIO_Init+0x2f0>)
 8003e46:	f005 fd7b 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 8003e4a:	2360      	movs	r3, #96	@ 0x60
 8003e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e52:	2300      	movs	r3, #0
 8003e54:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e56:	2300      	movs	r3, #0
 8003e58:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003e5a:	230d      	movs	r3, #13
 8003e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e62:	4619      	mov	r1, r3
 8003e64:	4826      	ldr	r0, [pc, #152]	@ (8003f00 <MX_GPIO_Init+0x2e8>)
 8003e66:	f005 fd6b 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8003e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e70:	2300      	movs	r3, #0
 8003e72:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003e78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4823      	ldr	r0, [pc, #140]	@ (8003f0c <MX_GPIO_Init+0x2f4>)
 8003e80:	f005 fd5e 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003e84:	2340      	movs	r3, #64	@ 0x40
 8003e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e88:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003e8c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003e92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003e96:	4619      	mov	r1, r3
 8003e98:	4814      	ldr	r0, [pc, #80]	@ (8003eec <MX_GPIO_Init+0x2d4>)
 8003e9a:	f005 fd51 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8003e9e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eac:	2303      	movs	r3, #3
 8003eae:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003eb0:	230a      	movs	r3, #10
 8003eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4813      	ldr	r0, [pc, #76]	@ (8003f08 <MX_GPIO_Init+0x2f0>)
 8003ebc:	f005 fd40 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003ed0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4805      	ldr	r0, [pc, #20]	@ (8003eec <MX_GPIO_Init+0x2d4>)
 8003ed8:	f005 fd32 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003edc:	2308      	movs	r3, #8
 8003ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e013      	b.n	8003f10 <MX_GPIO_Init+0x2f8>
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40020c00 	.word	0x40020c00
 8003ef0:	40022000 	.word	0x40022000
 8003ef4:	40022800 	.word	0x40022800
 8003ef8:	40021c00 	.word	0x40021c00
 8003efc:	40021800 	.word	0x40021800
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40020400 	.word	0x40020400
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	40022400 	.word	0x40022400
 8003f10:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f12:	2300      	movs	r3, #0
 8003f14:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003f16:	230d      	movs	r3, #13
 8003f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003f1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f1e:	4619      	mov	r1, r3
 8003f20:	48bb      	ldr	r0, [pc, #748]	@ (8004210 <MX_GPIO_Init+0x5f8>)
 8003f22:	f005 fd0d 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8003f26:	f241 030c 	movw	r3, #4108	@ 0x100c
 8003f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f34:	2300      	movs	r3, #0
 8003f36:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	48b5      	ldr	r0, [pc, #724]	@ (8004214 <MX_GPIO_Init+0x5fc>)
 8003f40:	f005 fcfe 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003f44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003f52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f56:	4619      	mov	r1, r3
 8003f58:	48af      	ldr	r0, [pc, #700]	@ (8004218 <MX_GPIO_Init+0x600>)
 8003f5a:	f005 fcf1 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003f5e:	2308      	movs	r3, #8
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f62:	2301      	movs	r3, #1
 8003f64:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003f6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f72:	4619      	mov	r1, r3
 8003f74:	48a9      	ldr	r0, [pc, #676]	@ (800421c <MX_GPIO_Init+0x604>)
 8003f76:	f005 fce3 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003f7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f80:	2302      	movs	r3, #2
 8003f82:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003f8c:	230d      	movs	r3, #13
 8003f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8003f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f94:	4619      	mov	r1, r3
 8003f96:	48a2      	ldr	r0, [pc, #648]	@ (8004220 <MX_GPIO_Init+0x608>)
 8003f98:	f005 fcd2 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003fa8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fac:	4619      	mov	r1, r3
 8003fae:	4898      	ldr	r0, [pc, #608]	@ (8004210 <MX_GPIO_Init+0x5f8>)
 8003fb0:	f005 fcc6 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8003fb4:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4896      	ldr	r0, [pc, #600]	@ (8004224 <MX_GPIO_Init+0x60c>)
 8003fca:	f005 fcb9 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fde:	2305      	movs	r3, #5
 8003fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003fe2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	488a      	ldr	r0, [pc, #552]	@ (8004214 <MX_GPIO_Init+0x5fc>)
 8003fea:	f005 fca9 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_PWR_EN_Pin LED2_Pin LED1_Pin LED3_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin | LED2_Pin | LED1_Pin | LED3_Pin;
 8003fee:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004004:	4619      	mov	r1, r3
 8004006:	4887      	ldr	r0, [pc, #540]	@ (8004224 <MX_GPIO_Init+0x60c>)
 8004008:	f005 fc9a 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D0_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D0_Pin;
 800400c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401a:	2300      	movs	r3, #0
 800401c:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800401e:	230d      	movs	r3, #13
 8004020:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004026:	4619      	mov	r1, r3
 8004028:	487e      	ldr	r0, [pc, #504]	@ (8004224 <MX_GPIO_Init+0x60c>)
 800402a:	f005 fc89 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800402e:	2301      	movs	r3, #1
 8004030:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004036:	2300      	movs	r3, #0
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403a:	2300      	movs	r3, #0
 800403c:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800403e:	2302      	movs	r3, #2
 8004040:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004042:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004046:	4619      	mov	r1, r3
 8004048:	4872      	ldr	r0, [pc, #456]	@ (8004214 <MX_GPIO_Init+0x5fc>)
 800404a:	f005 fc79 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800404e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004052:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004060:	2301      	movs	r3, #1
 8004062:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004064:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004068:	4619      	mov	r1, r3
 800406a:	486f      	ldr	r0, [pc, #444]	@ (8004228 <MX_GPIO_Init+0x610>)
 800406c:	f005 fc68 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8004070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004074:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004076:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800407a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407c:	2300      	movs	r3, #0
 800407e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8004080:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004084:	4619      	mov	r1, r3
 8004086:	4863      	ldr	r0, [pc, #396]	@ (8004214 <MX_GPIO_Init+0x5fc>)
 8004088:	f005 fc5a 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 800408c:	23c0      	movs	r3, #192	@ 0xc0
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004094:	2300      	movs	r3, #0
 8004096:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004098:	2303      	movs	r3, #3
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800409c:	2308      	movs	r3, #8
 800409e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040a4:	4619      	mov	r1, r3
 80040a6:	485c      	ldr	r0, [pc, #368]	@ (8004218 <MX_GPIO_Init+0x600>)
 80040a8:	f005 fc4a 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80040ac:	2310      	movs	r3, #16
 80040ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b0:	2302      	movs	r3, #2
 80040b2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80040bc:	230a      	movs	r3, #10
 80040be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80040c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040c4:	4619      	mov	r1, r3
 80040c6:	4857      	ldr	r0, [pc, #348]	@ (8004224 <MX_GPIO_Init+0x60c>)
 80040c8:	f005 fc3a 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 80040cc:	23c8      	movs	r3, #200	@ 0xc8
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040d0:	2301      	movs	r3, #1
 80040d2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d4:	2300      	movs	r3, #0
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d8:	2300      	movs	r3, #0
 80040da:	63bb      	str	r3, [r7, #56]	@ 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80040e0:	4619      	mov	r1, r3
 80040e2:	484f      	ldr	r0, [pc, #316]	@ (8004220 <MX_GPIO_Init+0x608>)
 80040e4:	f005 fc2c 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin ULPI_D2_Pin
							 ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin | ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
 80040e8:	f643 4303 	movw	r3, #15363	@ 0x3c03
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f6:	2303      	movs	r3, #3
 80040f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80040fa:	230a      	movs	r3, #10
 80040fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004102:	4619      	mov	r1, r3
 8004104:	4849      	ldr	r0, [pc, #292]	@ (800422c <MX_GPIO_Init+0x614>)
 8004106:	f005 fc1b 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 800410a:	2305      	movs	r3, #5
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410e:	2302      	movs	r3, #2
 8004110:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004112:	2300      	movs	r3, #0
 8004114:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004116:	2303      	movs	r3, #3
 8004118:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800411a:	230a      	movs	r3, #10
 800411c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800411e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004122:	4619      	mov	r1, r3
 8004124:	483c      	ldr	r0, [pc, #240]	@ (8004218 <MX_GPIO_Init+0x600>)
 8004126:	f005 fc0b 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 800412a:	2332      	movs	r3, #50	@ 0x32
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412e:	2302      	movs	r3, #2
 8004130:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004132:	2300      	movs	r3, #0
 8004134:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004136:	2303      	movs	r3, #3
 8004138:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800413a:	230b      	movs	r3, #11
 800413c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800413e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004142:	4619      	mov	r1, r3
 8004144:	4834      	ldr	r0, [pc, #208]	@ (8004218 <MX_GPIO_Init+0x600>)
 8004146:	f005 fbfb 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800414a:	2304      	movs	r3, #4
 800414c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2303      	movs	r3, #3
 8004158:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800415a:	2309      	movs	r3, #9
 800415c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004162:	4619      	mov	r1, r3
 8004164:	4831      	ldr	r0, [pc, #196]	@ (800422c <MX_GPIO_Init+0x614>)
 8004166:	f005 fbeb 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 800416a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800416e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004178:	2303      	movs	r3, #3
 800417a:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800417c:	2309      	movs	r3, #9
 800417e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004184:	4619      	mov	r1, r3
 8004186:	4822      	ldr	r0, [pc, #136]	@ (8004210 <MX_GPIO_Init+0x5f8>)
 8004188:	f005 fbda 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800418c:	2304      	movs	r3, #4
 800418e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004190:	2300      	movs	r3, #0
 8004192:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004194:	2300      	movs	r3, #0
 8004196:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8004198:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800419c:	4619      	mov	r1, r3
 800419e:	4820      	ldr	r0, [pc, #128]	@ (8004220 <MX_GPIO_Init+0x608>)
 80041a0:	f005 fbce 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 80041a4:	2386      	movs	r3, #134	@ 0x86
 80041a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a8:	2302      	movs	r3, #2
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ac:	2300      	movs	r3, #0
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b0:	2303      	movs	r3, #3
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041b4:	230b      	movs	r3, #11
 80041b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041bc:	4619      	mov	r1, r3
 80041be:	481a      	ldr	r0, [pc, #104]	@ (8004228 <MX_GPIO_Init+0x610>)
 80041c0:	f005 fbbe 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 80041c4:	2350      	movs	r3, #80	@ 0x50
 80041c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c8:	2302      	movs	r3, #2
 80041ca:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d0:	2300      	movs	r3, #0
 80041d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80041d4:	230d      	movs	r3, #13
 80041d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041dc:	4619      	mov	r1, r3
 80041de:	4812      	ldr	r0, [pc, #72]	@ (8004228 <MX_GPIO_Init+0x610>)
 80041e0:	f005 fbae 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 80041e4:	2328      	movs	r3, #40	@ 0x28
 80041e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e8:	2302      	movs	r3, #2
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f0:	2303      	movs	r3, #3
 80041f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80041f4:	230a      	movs	r3, #10
 80041f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041fc:	4619      	mov	r1, r3
 80041fe:	480a      	ldr	r0, [pc, #40]	@ (8004228 <MX_GPIO_Init+0x610>)
 8004200:	f005 fb9e 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SDA_Pin;
 8004204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800420a:	2312      	movs	r3, #18
 800420c:	633b      	str	r3, [r7, #48]	@ 0x30
 800420e:	e00f      	b.n	8004230 <MX_GPIO_Init+0x618>
 8004210:	40020c00 	.word	0x40020c00
 8004214:	40022000 	.word	0x40022000
 8004218:	40020800 	.word	0x40020800
 800421c:	40022800 	.word	0x40022800
 8004220:	40021800 	.word	0x40021800
 8004224:	40021c00 	.word	0x40021c00
 8004228:	40020000 	.word	0x40020000
 800422c:	40020400 	.word	0x40020400
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004230:	2300      	movs	r3, #0
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004234:	2303      	movs	r3, #3
 8004236:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004238:	2304      	movs	r3, #4
 800423a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(LCD_SDA_GPIO_Port, &GPIO_InitStruct);
 800423c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004240:	4619      	mov	r1, r3
 8004242:	480c      	ldr	r0, [pc, #48]	@ (8004274 <MX_GPIO_Init+0x65c>)
 8004244:	f005 fb7c 	bl	8009940 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8004248:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800424c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424e:	2302      	movs	r3, #2
 8004250:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004256:	2300      	movs	r3, #0
 8004258:	63bb      	str	r3, [r7, #56]	@ 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800425a:	2305      	movs	r3, #5
 800425c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800425e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004262:	4619      	mov	r1, r3
 8004264:	4804      	ldr	r0, [pc, #16]	@ (8004278 <MX_GPIO_Init+0x660>)
 8004266:	f005 fb6b 	bl	8009940 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800426a:	bf00      	nop
 800426c:	3740      	adds	r7, #64	@ 0x40
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021c00 	.word	0x40021c00
 8004278:	40020400 	.word	0x40020400

0800427c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
	char a = 1;
 8004282:	2301      	movs	r3, #1
 8004284:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a, 0);
 8004286:	4b05      	ldr	r3, [pc, #20]	@ (800429c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x20>)
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	1df9      	adds	r1, r7, #7
 800428c:	2300      	movs	r3, #0
 800428e:	2200      	movs	r2, #0
 8004290:	f00c fe80 	bl	8010f94 <xQueueGenericSendFromISR>
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	2000090c 	.word	0x2000090c

080042a0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
	char a = 0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	71fb      	strb	r3, [r7, #7]
	xQueueSendFromISR(WakeUpHandle, &a, 0);
 80042aa:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x20>)
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	1df9      	adds	r1, r7, #7
 80042b0:	2300      	movs	r3, #0
 80042b2:	2200      	movs	r2, #0
 80042b4:	f00c fe6e 	bl	8010f94 <xQueueGenericSendFromISR>
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	2000090c 	.word	0x2000090c

080042c4 <Play_Wave>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Play_Wave */
void Play_Wave(void const *argument)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	uint32_t bytesread;
	uint32_t taille_octet;
	/* Infinite loop */
	for (;;)
	{
		xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 80042cc:	4b32      	ldr	r3, [pc, #200]	@ (8004398 <Play_Wave+0xd4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f107 0113 	add.w	r1, r7, #19
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
 80042d8:	4618      	mov	r0, r3
 80042da:	f00c ff97 	bl	801120c <xQueueReceive>
		if (i == 0)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d12c      	bne.n	800433e <Play_Wave+0x7a>
		{
			if (Bloc_Cursor++ == NB_Bloc - 1)
 80042e4:	4b2d      	ldr	r3, [pc, #180]	@ (800439c <Play_Wave+0xd8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	492c      	ldr	r1, [pc, #176]	@ (800439c <Play_Wave+0xd8>)
 80042ec:	600a      	str	r2, [r1, #0]
 80042ee:	4a2c      	ldr	r2, [pc, #176]	@ (80043a0 <Play_Wave+0xdc>)
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	3a01      	subs	r2, #1
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d115      	bne.n	8004324 <Play_Wave+0x60>
			{ // fin de musique
				f_close(&SDFile);
 80042f8:	482a      	ldr	r0, [pc, #168]	@ (80043a4 <Play_Wave+0xe0>)
 80042fa:	f7fe fa05 	bl	8002708 <f_close>
				f_open(&SDFile, Song_Name, FA_READ);
 80042fe:	2201      	movs	r2, #1
 8004300:	4929      	ldr	r1, [pc, #164]	@ (80043a8 <Play_Wave+0xe4>)
 8004302:	4828      	ldr	r0, [pc, #160]	@ (80043a4 <Play_Wave+0xe0>)
 8004304:	f7fd fe48 	bl	8001f98 <f_open>
				read_header();
 8004308:	f7fe ff48 	bl	800319c <read_header>
				Audio_Init(freq_audio);
 800430c:	4b27      	ldr	r3, [pc, #156]	@ (80043ac <Play_Wave+0xe8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe ff11 	bl	8003138 <Audio_Init>
				f_lseek(&SDFile, 44);
 8004316:	212c      	movs	r1, #44	@ 0x2c
 8004318:	4822      	ldr	r0, [pc, #136]	@ (80043a4 <Play_Wave+0xe0>)
 800431a:	f7fe fa24 	bl	8002766 <f_lseek>
				Bloc_Cursor = 0;
 800431e:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <Play_Wave+0xd8>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
			}
			f_read(&SDFile, ((uint8_t *)AUDIO_BUFFER_OUT), AUDIO_BLOCK_SIZE, (void *)&bytesread);
 8004324:	f107 030c 	add.w	r3, r7, #12
 8004328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800432c:	4920      	ldr	r1, [pc, #128]	@ (80043b0 <Play_Wave+0xec>)
 800432e:	481d      	ldr	r0, [pc, #116]	@ (80043a4 <Play_Wave+0xe0>)
 8004330:	f7fd fff3 	bl	800231a <f_read>

			taille_octet = 512 * Bloc_Cursor;
 8004334:	4b19      	ldr	r3, [pc, #100]	@ (800439c <Play_Wave+0xd8>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	025b      	lsls	r3, r3, #9
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e7c6      	b.n	80042cc <Play_Wave+0x8>
		}
		else
		{
			if (Bloc_Cursor++ == NB_Bloc - 1)
 800433e:	4b17      	ldr	r3, [pc, #92]	@ (800439c <Play_Wave+0xd8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	4915      	ldr	r1, [pc, #84]	@ (800439c <Play_Wave+0xd8>)
 8004346:	600a      	str	r2, [r1, #0]
 8004348:	4a15      	ldr	r2, [pc, #84]	@ (80043a0 <Play_Wave+0xdc>)
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	3a01      	subs	r2, #1
 800434e:	4293      	cmp	r3, r2
 8004350:	d115      	bne.n	800437e <Play_Wave+0xba>
			{
				f_close(&SDFile);
 8004352:	4814      	ldr	r0, [pc, #80]	@ (80043a4 <Play_Wave+0xe0>)
 8004354:	f7fe f9d8 	bl	8002708 <f_close>
				f_open(&SDFile, Song_Name, FA_READ);
 8004358:	2201      	movs	r2, #1
 800435a:	4913      	ldr	r1, [pc, #76]	@ (80043a8 <Play_Wave+0xe4>)
 800435c:	4811      	ldr	r0, [pc, #68]	@ (80043a4 <Play_Wave+0xe0>)
 800435e:	f7fd fe1b 	bl	8001f98 <f_open>
				read_header();
 8004362:	f7fe ff1b 	bl	800319c <read_header>
				Audio_Init(freq_audio);
 8004366:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <Play_Wave+0xe8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe fee4 	bl	8003138 <Audio_Init>
				f_lseek(&SDFile, 44);
 8004370:	212c      	movs	r1, #44	@ 0x2c
 8004372:	480c      	ldr	r0, [pc, #48]	@ (80043a4 <Play_Wave+0xe0>)
 8004374:	f7fe f9f7 	bl	8002766 <f_lseek>
				Bloc_Cursor = 0;
 8004378:	4b08      	ldr	r3, [pc, #32]	@ (800439c <Play_Wave+0xd8>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
			}
			f_read(&SDFile, ((uint8_t *)AUDIO_BUFFER_OUT + AUDIO_BLOCK_SIZE), AUDIO_BLOCK_SIZE, (void *)&bytesread);
 800437e:	f107 030c 	add.w	r3, r7, #12
 8004382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004386:	490b      	ldr	r1, [pc, #44]	@ (80043b4 <Play_Wave+0xf0>)
 8004388:	4806      	ldr	r0, [pc, #24]	@ (80043a4 <Play_Wave+0xe0>)
 800438a:	f7fd ffc6 	bl	800231a <f_read>

			taille_octet = 512 * Bloc_Cursor;
 800438e:	4b03      	ldr	r3, [pc, #12]	@ (800439c <Play_Wave+0xd8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	025b      	lsls	r3, r3, #9
 8004394:	617b      	str	r3, [r7, #20]
		xQueueReceive(WakeUpHandle, &i, portMAX_DELAY);
 8004396:	e799      	b.n	80042cc <Play_Wave+0x8>
 8004398:	2000090c 	.word	0x2000090c
 800439c:	20000914 	.word	0x20000914
 80043a0:	20000910 	.word	0x20000910
 80043a4:	200010a0 	.word	0x200010a0
 80043a8:	080139ac 	.word	0x080139ac
 80043ac:	20000918 	.word	0x20000918
 80043b0:	c007fc00 	.word	0xc007fc00
 80043b4:	c007fe00 	.word	0xc007fe00

080043b8 <Affichage_Pic>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Affichage_Pic */
void Affichage_Pic(void const *argument)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Affichage_Pic */
	/* Infinite loop */
	for (;;)
	{
		osDelay(100);
 80043c0:	2064      	movs	r0, #100	@ 0x64
 80043c2:	f00c f919 	bl	80105f8 <osDelay>
 80043c6:	e7fb      	b.n	80043c0 <Affichage_Pic+0x8>

080043c8 <deplac_pok>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_deplac_pok */
void deplac_pok(void const *argument)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN deplac_pok */

	for (;;)
	{
		osDelay(150);
 80043d0:	2096      	movs	r0, #150	@ 0x96
 80043d2:	f00c f911 	bl	80105f8 <osDelay>
 80043d6:	e7fb      	b.n	80043d0 <deplac_pok+0x8>

080043d8 <deplacement>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_deplacement */
void deplacement(void const *argument)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN deplacement */
	/* Infinite loop */
	for (;;)
	{
		osDelay(100);
 80043e0:	2064      	movs	r0, #100	@ 0x64
 80043e2:	f00c f909 	bl	80105f8 <osDelay>
 80043e6:	e7fb      	b.n	80043e0 <deplacement+0x8>

080043e8 <combat>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_combat */
void combat(void const *argument)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN combat */
	/* Infinite loop */
	for (;;)
	{
		osDelay(20);
 80043f0:	2014      	movs	r0, #20
 80043f2:	f00c f901 	bl	80105f8 <osDelay>
 80043f6:	e7fb      	b.n	80043f0 <combat+0x8>

080043f8 <Demarrage>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Demarrage */
void Demarrage(void const *argument)
{
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b08b      	sub	sp, #44	@ 0x2c
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Demarrage */
	/* USER CODE BEGIN Demarrage */
	vTaskSuspend(task_deplac_pokHandle);
 8004400:	4b2d      	ldr	r3, [pc, #180]	@ (80044b8 <Demarrage+0xc0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f00d fd73 	bl	8011ef0 <vTaskSuspend>
	vTaskSuspend(task_deplacementHandle);
 800440a:	4b2c      	ldr	r3, [pc, #176]	@ (80044bc <Demarrage+0xc4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f00d fd6e 	bl	8011ef0 <vTaskSuspend>
	vTaskSuspend(task_Affich_PicHandle);
 8004414:	4b2a      	ldr	r3, [pc, #168]	@ (80044c0 <Demarrage+0xc8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f00d fd69 	bl	8011ef0 <vTaskSuspend>
	vTaskDelete(task_combatHandle);
 800441e:	4b29      	ldr	r3, [pc, #164]	@ (80044c4 <Demarrage+0xcc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f00d fc9a 	bl	8011d5c <vTaskDelete>
	vTaskSuspend(task_chgZoneHandle);
 8004428:	4b27      	ldr	r3, [pc, #156]	@ (80044c8 <Demarrage+0xd0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f00d fd5f 	bl	8011ef0 <vTaskSuspend>
	vTaskDelay(100);
 8004432:	2064      	movs	r0, #100	@ 0x64
 8004434:	f00d fd24 	bl	8011e80 <vTaskDelay>

	uint8_t str[30];

	uwInternelBuffer = (uint8_t *)0xC0260000;
 8004438:	4b24      	ldr	r3, [pc, #144]	@ (80044cc <Demarrage+0xd4>)
 800443a:	4a25      	ldr	r2, [pc, #148]	@ (80044d0 <Demarrage+0xd8>)
 800443c:	601a      	str	r2, [r3, #0]
	uwInternelBuffer2 = (uint8_t *)0xC0360000;
 800443e:	4b25      	ldr	r3, [pc, #148]	@ (80044d4 <Demarrage+0xdc>)
 8004440:	4a25      	ldr	r2, [pc, #148]	@ (80044d8 <Demarrage+0xe0>)
 8004442:	601a      	str	r2, [r3, #0]

	uint8_t counter;

	/*##- Initialize the Directory Files pointers (heap) ###################*/
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8004444:	2300      	movs	r3, #0
 8004446:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800444a:	e01e      	b.n	800448a <Demarrage+0x92>
	{
		pDirectoryFiles[counter] = malloc(MAX_BMP_FILE_NAME);
 800444c:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8004450:	200b      	movs	r0, #11
 8004452:	f00f f94f 	bl	80136f4 <malloc>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	4b20      	ldr	r3, [pc, #128]	@ (80044dc <Demarrage+0xe4>)
 800445c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		if (pDirectoryFiles[counter] == NULL)
 8004460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004464:	4a1d      	ldr	r2, [pc, #116]	@ (80044dc <Demarrage+0xe4>)
 8004466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <Demarrage+0x88>
		{
			/* Set the Text Color */
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800446e:	481c      	ldr	r0, [pc, #112]	@ (80044e0 <Demarrage+0xe8>)
 8004470:	f000 ffa4 	bl	80053bc <BSP_LCD_SetTextColor>

			BSP_LCD_DisplayStringAtLine(8,
 8004474:	491b      	ldr	r1, [pc, #108]	@ (80044e4 <Demarrage+0xec>)
 8004476:	2008      	movs	r0, #8
 8004478:	f001 f91c 	bl	80056b4 <BSP_LCD_DisplayStringAtLine>
										(uint8_t *)"  Cannot allocate memory ");

			while (1)
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <Demarrage+0x84>
	for (counter = 0; counter < MAX_BMP_FILES; counter++)
 8004480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004484:	3301      	adds	r3, #1
 8004486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800448a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800448e:	2b18      	cmp	r3, #24
 8004490:	d9dc      	bls.n	800444c <Demarrage+0x54>
		}
	}


	// Lancement de la musique
	SD_Init();
 8004492:	f7fe fe35 	bl	8003100 <SD_Init>
	Charge_Wave(0);
 8004496:	2000      	movs	r0, #0
 8004498:	f7fe fec0 	bl	800321c <Charge_Wave>
	vTaskResume(Play_wavHandle);
 800449c:	4b12      	ldr	r3, [pc, #72]	@ (80044e8 <Demarrage+0xf0>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f00d fdef 	bl	8012084 <vTaskResume>

	vTaskDelay(1000);
 80044a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80044aa:	f00d fce9 	bl	8011e80 <vTaskDelay>

	while (1)
	{
		osDelay(100);
 80044ae:	2064      	movs	r0, #100	@ 0x64
 80044b0:	f00c f8a2 	bl	80105f8 <osDelay>
 80044b4:	e7fb      	b.n	80044ae <Demarrage+0xb6>
 80044b6:	bf00      	nop
 80044b8:	20000908 	.word	0x20000908
 80044bc:	200008f8 	.word	0x200008f8
 80044c0:	200008f4 	.word	0x200008f4
 80044c4:	20000904 	.word	0x20000904
 80044c8:	200008fc 	.word	0x200008fc
 80044cc:	20000980 	.word	0x20000980
 80044d0:	c0260000 	.word	0xc0260000
 80044d4:	20000984 	.word	0x20000984
 80044d8:	c0360000 	.word	0xc0360000
 80044dc:	2000091c 	.word	0x2000091c
 80044e0:	ffff0000 	.word	0xffff0000
 80044e4:	08013af8 	.word	0x08013af8
 80044e8:	200008f0 	.word	0x200008f0

080044ec <chgZone>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_chgZone */
void chgZone(void const *argument)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN chgZone */

	while (1)
	{
		osDelay(50);
 80044f4:	2032      	movs	r0, #50	@ 0x32
 80044f6:	f00c f87f 	bl	80105f8 <osDelay>
 80044fa:	e7fb      	b.n	80044f4 <chgZone+0x8>

080044fc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a04      	ldr	r2, [pc, #16]	@ (800451c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800450e:	f003 ffcd 	bl	80084ac <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40001000 	.word	0x40001000

08004520 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004524:	b672      	cpsid	i
}
 8004526:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <Error_Handler+0x8>

0800452c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08c      	sub	sp, #48	@ 0x30
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a51      	ldr	r2, [pc, #324]	@ (800467c <I2Cx_MspInit+0x150>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d14d      	bne.n	80045d8 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800453c:	4b50      	ldr	r3, [pc, #320]	@ (8004680 <I2Cx_MspInit+0x154>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004540:	4a4f      	ldr	r2, [pc, #316]	@ (8004680 <I2Cx_MspInit+0x154>)
 8004542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004546:	6313      	str	r3, [r2, #48]	@ 0x30
 8004548:	4b4d      	ldr	r3, [pc, #308]	@ (8004680 <I2Cx_MspInit+0x154>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8004558:	2312      	movs	r3, #18
 800455a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004560:	2302      	movs	r3, #2
 8004562:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8004564:	2304      	movs	r3, #4
 8004566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004568:	f107 031c 	add.w	r3, r7, #28
 800456c:	4619      	mov	r1, r3
 800456e:	4845      	ldr	r0, [pc, #276]	@ (8004684 <I2Cx_MspInit+0x158>)
 8004570:	f005 f9e6 	bl	8009940 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8004574:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800457a:	f107 031c 	add.w	r3, r7, #28
 800457e:	4619      	mov	r1, r3
 8004580:	4840      	ldr	r0, [pc, #256]	@ (8004684 <I2Cx_MspInit+0x158>)
 8004582:	f005 f9dd 	bl	8009940 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8004586:	4b3e      	ldr	r3, [pc, #248]	@ (8004680 <I2Cx_MspInit+0x154>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458a:	4a3d      	ldr	r2, [pc, #244]	@ (8004680 <I2Cx_MspInit+0x154>)
 800458c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004590:	6413      	str	r3, [r2, #64]	@ 0x40
 8004592:	4b3b      	ldr	r3, [pc, #236]	@ (8004680 <I2Cx_MspInit+0x154>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800459e:	4b38      	ldr	r3, [pc, #224]	@ (8004680 <I2Cx_MspInit+0x154>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a37      	ldr	r2, [pc, #220]	@ (8004680 <I2Cx_MspInit+0x154>)
 80045a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045a8:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80045aa:	4b35      	ldr	r3, [pc, #212]	@ (8004680 <I2Cx_MspInit+0x154>)
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4a34      	ldr	r2, [pc, #208]	@ (8004680 <I2Cx_MspInit+0x154>)
 80045b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80045b4:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80045b6:	2200      	movs	r2, #0
 80045b8:	210f      	movs	r1, #15
 80045ba:	2048      	movs	r0, #72	@ 0x48
 80045bc:	f004 fb06 	bl	8008bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80045c0:	2048      	movs	r0, #72	@ 0x48
 80045c2:	f004 fb1f 	bl	8008c04 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80045c6:	2200      	movs	r2, #0
 80045c8:	210f      	movs	r1, #15
 80045ca:	2049      	movs	r0, #73	@ 0x49
 80045cc:	f004 fafe 	bl	8008bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80045d0:	2049      	movs	r0, #73	@ 0x49
 80045d2:	f004 fb17 	bl	8008c04 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80045d6:	e04d      	b.n	8004674 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80045d8:	4b29      	ldr	r3, [pc, #164]	@ (8004680 <I2Cx_MspInit+0x154>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	4a28      	ldr	r2, [pc, #160]	@ (8004680 <I2Cx_MspInit+0x154>)
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80045e4:	4b26      	ldr	r3, [pc, #152]	@ (8004680 <I2Cx_MspInit+0x154>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80045f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045f4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80045f6:	2312      	movs	r3, #18
 80045f8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80045fe:	2302      	movs	r3, #2
 8004600:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8004602:	2304      	movs	r3, #4
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004606:	f107 031c 	add.w	r3, r7, #28
 800460a:	4619      	mov	r1, r3
 800460c:	481e      	ldr	r0, [pc, #120]	@ (8004688 <I2Cx_MspInit+0x15c>)
 800460e:	f005 f997 	bl	8009940 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8004612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8004618:	f107 031c 	add.w	r3, r7, #28
 800461c:	4619      	mov	r1, r3
 800461e:	481a      	ldr	r0, [pc, #104]	@ (8004688 <I2Cx_MspInit+0x15c>)
 8004620:	f005 f98e 	bl	8009940 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004624:	4b16      	ldr	r3, [pc, #88]	@ (8004680 <I2Cx_MspInit+0x154>)
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	4a15      	ldr	r2, [pc, #84]	@ (8004680 <I2Cx_MspInit+0x154>)
 800462a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800462e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004630:	4b13      	ldr	r3, [pc, #76]	@ (8004680 <I2Cx_MspInit+0x154>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 800463c:	4b10      	ldr	r3, [pc, #64]	@ (8004680 <I2Cx_MspInit+0x154>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a0f      	ldr	r2, [pc, #60]	@ (8004680 <I2Cx_MspInit+0x154>)
 8004642:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004646:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004648:	4b0d      	ldr	r3, [pc, #52]	@ (8004680 <I2Cx_MspInit+0x154>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	4a0c      	ldr	r2, [pc, #48]	@ (8004680 <I2Cx_MspInit+0x154>)
 800464e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004652:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004654:	2200      	movs	r2, #0
 8004656:	210f      	movs	r1, #15
 8004658:	201f      	movs	r0, #31
 800465a:	f004 fab7 	bl	8008bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800465e:	201f      	movs	r0, #31
 8004660:	f004 fad0 	bl	8008c04 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004664:	2200      	movs	r2, #0
 8004666:	210f      	movs	r1, #15
 8004668:	2020      	movs	r0, #32
 800466a:	f004 faaf 	bl	8008bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800466e:	2020      	movs	r0, #32
 8004670:	f004 fac8 	bl	8008c04 <HAL_NVIC_EnableIRQ>
}
 8004674:	bf00      	nop
 8004676:	3730      	adds	r7, #48	@ 0x30
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	2000098c 	.word	0x2000098c
 8004680:	40023800 	.word	0x40023800
 8004684:	40021c00 	.word	0x40021c00
 8004688:	40020400 	.word	0x40020400

0800468c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f005 ff3f 	bl	800a518 <HAL_I2C_GetState>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d125      	bne.n	80046ec <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a14      	ldr	r2, [pc, #80]	@ (80046f4 <I2Cx_Init+0x68>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a13      	ldr	r2, [pc, #76]	@ (80046f8 <I2Cx_Init+0x6c>)
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	e002      	b.n	80046b6 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a12      	ldr	r2, [pc, #72]	@ (80046fc <I2Cx_Init+0x70>)
 80046b4:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a11      	ldr	r2, [pc, #68]	@ (8004700 <I2Cx_Init+0x74>)
 80046ba:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff ff23 	bl	800452c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f005 fc14 	bl	8009f14 <HAL_I2C_Init>
  }
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2000098c 	.word	0x2000098c
 80046f8:	40005c00 	.word	0x40005c00
 80046fc:	40005400 	.word	0x40005400
 8004700:	40912732 	.word	0x40912732

08004704 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	@ 0x28
 8004708:	af04      	add	r7, sp, #16
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4603      	mov	r3, r0
 8004714:	72fb      	strb	r3, [r7, #11]
 8004716:	460b      	mov	r3, r1
 8004718:	813b      	strh	r3, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004722:	7afb      	ldrb	r3, [r7, #11]
 8004724:	b299      	uxth	r1, r3
 8004726:	88f8      	ldrh	r0, [r7, #6]
 8004728:	893a      	ldrh	r2, [r7, #8]
 800472a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800472e:	9302      	str	r3, [sp, #8]
 8004730:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4603      	mov	r3, r0
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f005 fdd2 	bl	800a2e4 <HAL_I2C_Mem_Read>
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004744:	7dfb      	ldrb	r3, [r7, #23]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d004      	beq.n	8004754 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800474a:	7afb      	ldrb	r3, [r7, #11]
 800474c:	4619      	mov	r1, r3
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f000 f832 	bl	80047b8 <I2Cx_Error>
  }
  return status;    
 8004754:	7dfb      	ldrb	r3, [r7, #23]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b08a      	sub	sp, #40	@ 0x28
 8004762:	af04      	add	r7, sp, #16
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	4608      	mov	r0, r1
 8004768:	4611      	mov	r1, r2
 800476a:	461a      	mov	r2, r3
 800476c:	4603      	mov	r3, r0
 800476e:	72fb      	strb	r3, [r7, #11]
 8004770:	460b      	mov	r3, r1
 8004772:	813b      	strh	r3, [r7, #8]
 8004774:	4613      	mov	r3, r2
 8004776:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800477c:	7afb      	ldrb	r3, [r7, #11]
 800477e:	b299      	uxth	r1, r3
 8004780:	88f8      	ldrh	r0, [r7, #6]
 8004782:	893a      	ldrh	r2, [r7, #8]
 8004784:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004788:	9302      	str	r3, [sp, #8]
 800478a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	4603      	mov	r3, r0
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f005 fc91 	bl	800a0bc <HAL_I2C_Mem_Write>
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	4619      	mov	r1, r3
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f805 	bl	80047b8 <I2Cx_Error>
  }
  return status;
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f005 fc35 	bl	800a034 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ff5e 	bl	800468c <I2Cx_Init>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80047dc:	4802      	ldr	r0, [pc, #8]	@ (80047e8 <AUDIO_IO_Init+0x10>)
 80047de:	f7ff ff55 	bl	800468c <I2Cx_Init>
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000098c 	.word	0x2000098c

080047ec <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af02      	add	r7, sp, #8
 8004802:	4603      	mov	r3, r0
 8004804:	71fb      	strb	r3, [r7, #7]
 8004806:	460b      	mov	r3, r1
 8004808:	80bb      	strh	r3, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	0a1b      	lsrs	r3, r3, #8
 8004816:	b29b      	uxth	r3, r3
 8004818:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800481a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	b21a      	sxth	r2, r3
 8004822:	887b      	ldrh	r3, [r7, #2]
 8004824:	b21b      	sxth	r3, r3
 8004826:	4313      	orrs	r3, r2
 8004828:	b21b      	sxth	r3, r3
 800482a:	b29b      	uxth	r3, r3
 800482c:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800482e:	88ba      	ldrh	r2, [r7, #4]
 8004830:	79f9      	ldrb	r1, [r7, #7]
 8004832:	2302      	movs	r3, #2
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	1cbb      	adds	r3, r7, #2
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	2302      	movs	r3, #2
 800483c:	4803      	ldr	r0, [pc, #12]	@ (800484c <AUDIO_IO_Write+0x50>)
 800483e:	f7ff ff8e 	bl	800475e <I2Cx_WriteMultiple>
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000098c 	.word	0x2000098c

08004850 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af02      	add	r7, sp, #8
 8004856:	4603      	mov	r3, r0
 8004858:	460a      	mov	r2, r1
 800485a:	71fb      	strb	r3, [r7, #7]
 800485c:	4613      	mov	r3, r2
 800485e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	81bb      	strh	r3, [r7, #12]
 8004864:	2300      	movs	r3, #0
 8004866:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8004868:	88ba      	ldrh	r2, [r7, #4]
 800486a:	79f9      	ldrb	r1, [r7, #7]
 800486c:	2302      	movs	r3, #2
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	2302      	movs	r3, #2
 8004878:	480a      	ldr	r0, [pc, #40]	@ (80048a4 <AUDIO_IO_Read+0x54>)
 800487a:	f7ff ff43 	bl	8004704 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800487e:	89bb      	ldrh	r3, [r7, #12]
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8004884:	89bb      	ldrh	r3, [r7, #12]
 8004886:	b21b      	sxth	r3, r3
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	b21a      	sxth	r2, r3
 800488c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004890:	4313      	orrs	r3, r2
 8004892:	b21b      	sxth	r3, r3
 8004894:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8004896:	89fb      	ldrh	r3, [r7, #14]
 8004898:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800489a:	89bb      	ldrh	r3, [r7, #12]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	2000098c 	.word	0x2000098c

080048a8 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f003 fe1b 	bl	80084ec <HAL_Delay>
}
 80048b6:	bf00      	nop
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80048c4:	4802      	ldr	r0, [pc, #8]	@ (80048d0 <TS_IO_Init+0x10>)
 80048c6:	f7ff fee1 	bl	800468c <I2Cx_Init>
}
 80048ca:	bf00      	nop
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	2000098c 	.word	0x2000098c

080048d4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af02      	add	r7, sp, #8
 80048da:	4603      	mov	r3, r0
 80048dc:	71fb      	strb	r3, [r7, #7]
 80048de:	460b      	mov	r3, r1
 80048e0:	71bb      	strb	r3, [r7, #6]
 80048e2:	4613      	mov	r3, r2
 80048e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80048e6:	79bb      	ldrb	r3, [r7, #6]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	79f9      	ldrb	r1, [r7, #7]
 80048ec:	2301      	movs	r3, #1
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	1d7b      	adds	r3, r7, #5
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2301      	movs	r3, #1
 80048f6:	4803      	ldr	r0, [pc, #12]	@ (8004904 <TS_IO_Write+0x30>)
 80048f8:	f7ff ff31 	bl	800475e <I2Cx_WriteMultiple>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	2000098c 	.word	0x2000098c

08004908 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af02      	add	r7, sp, #8
 800490e:	4603      	mov	r3, r0
 8004910:	460a      	mov	r2, r1
 8004912:	71fb      	strb	r3, [r7, #7]
 8004914:	4613      	mov	r3, r2
 8004916:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800491c:	79bb      	ldrb	r3, [r7, #6]
 800491e:	b29a      	uxth	r2, r3
 8004920:	79f9      	ldrb	r1, [r7, #7]
 8004922:	2301      	movs	r3, #1
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	f107 030f 	add.w	r3, r7, #15
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2301      	movs	r3, #1
 800492e:	4804      	ldr	r0, [pc, #16]	@ (8004940 <TS_IO_Read+0x38>)
 8004930:	f7ff fee8 	bl	8004704 <I2Cx_ReadMultiple>

  return read_value;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	2000098c 	.word	0x2000098c

08004944 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f003 fdcd 	bl	80084ec <HAL_Delay>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <BSP_AUDIO_OUT_Play>:
 * @param  pBuffer: Pointer to the buffer
 * @param  Size: Number of audio data in BYTES unit.
 *         In memory, first element is for left channel, second element is for right channel
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_Play(uint16_t *pBuffer, uint32_t Size) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
	/* Call the audio Codec Play function */
	if (audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0) {
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <BSP_AUDIO_OUT_Play+0x4c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	b292      	uxth	r2, r2
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	2034      	movs	r0, #52	@ 0x34
 8004974:	4798      	blx	r3
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <BSP_AUDIO_OUT_Play+0x24>
		return AUDIO_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e00f      	b.n	80049a0 <BSP_AUDIO_OUT_Play+0x44>
	} else {
		/* Update the Media layer and enable it for play */
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004986:	d203      	bcs.n	8004990 <BSP_AUDIO_OUT_Play+0x34>
				DMA_MAX(Size / AUDIODATA_SIZE));
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	085b      	lsrs	r3, r3, #1
		HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer,
 800498c:	b29b      	uxth	r3, r3
 800498e:	e001      	b.n	8004994 <BSP_AUDIO_OUT_Play+0x38>
 8004990:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004994:	461a      	mov	r2, r3
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4804      	ldr	r0, [pc, #16]	@ (80049ac <BSP_AUDIO_OUT_Play+0x50>)
 800499a:	f008 f91f 	bl	800cbdc <HAL_SAI_Transmit_DMA>

		return AUDIO_OK;
 800499e:	2300      	movs	r3, #0
	}
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	200009e0 	.word	0x200009e0
 80049ac:	200009e4 	.word	0x200009e4

080049b0 <BSP_AUDIO_OUT_SetVolume>:
 * @brief  Controls the current audio volume level.
 * @param  Volume: Volume level to be set in percentage from 0% to 100% (0 for
 *         Mute and 100 for Max volume level).
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_OUT_SetVolume(uint8_t Volume) {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	71fb      	strb	r3, [r7, #7]
	/* Call the codec volume control function with converted volume value */
	if (audio_drv->SetVolumeOut(AUDIO_I2C_ADDRESS, Volume) != 0) {
 80049ba:	4b08      	ldr	r3, [pc, #32]	@ (80049dc <BSP_AUDIO_OUT_SetVolume+0x2c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	79fa      	ldrb	r2, [r7, #7]
 80049c2:	4611      	mov	r1, r2
 80049c4:	2034      	movs	r0, #52	@ 0x34
 80049c6:	4798      	blx	r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <BSP_AUDIO_OUT_SetVolume+0x22>
		return AUDIO_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <BSP_AUDIO_OUT_SetVolume+0x24>
	} else {
		/* Return AUDIO_OK when all operations are correctly done */
		return AUDIO_OK;
 80049d2:	2300      	movs	r3, #0
	}
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	200009e0 	.word	0x200009e0

080049e0 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
 *            @arg CODEC_AUDIOFRAME_SLOT_13
 * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
 *         audio frame slot.
 * @retval None
 */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot) {
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 80049e8:	4b0c      	ldr	r3, [pc, #48]	@ (8004a1c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80049f6:	601a      	str	r2, [r3, #0]

	/* Update the SAI audio frame slot configuration */
	haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 80049f8:	4a08      	ldr	r2, [pc, #32]	@ (8004a1c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6613      	str	r3, [r2, #96]	@ 0x60
	HAL_SAI_Init(&haudio_out_sai);
 80049fe:	4807      	ldr	r0, [pc, #28]	@ (8004a1c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8004a00:	f007 ff38 	bl	800c874 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 8004a04:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	200009e4 	.word	0x200009e4

08004a20 <HAL_SAI_TxCpltCallback>:
/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_TransferComplete_CallBack();
 8004a28:	f7ff fc28 	bl	800427c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_SAI_TxHalfCpltCallback>:
/**
 * @brief  Tx Half Transfer completed callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
	BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8004a3c:	f7ff fc30 	bl	80042a0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_SAI_ErrorCallback>:
/**
 * @brief  SAI error callbacks.
 * @param  hsai: SAI handle
 * @retval None
 */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	HAL_SAI_StateTypeDef audio_out_state;
	HAL_SAI_StateTypeDef audio_in_state;

	audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 8004a50:	480e      	ldr	r0, [pc, #56]	@ (8004a8c <HAL_SAI_ErrorCallback+0x44>)
 8004a52:	f008 f973 	bl	800cd3c <HAL_SAI_GetState>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
	audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8004a5a:	480d      	ldr	r0, [pc, #52]	@ (8004a90 <HAL_SAI_ErrorCallback+0x48>)
 8004a5c:	f008 f96e 	bl	800cd3c <HAL_SAI_GetState>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73bb      	strb	r3, [r7, #14]

	/* Determines if it is an audio out or audio in error */
	if ((audio_out_state == HAL_SAI_STATE_BUSY)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d002      	beq.n	8004a70 <HAL_SAI_ErrorCallback+0x28>
			|| (audio_out_state == HAL_SAI_STATE_BUSY_TX)) {
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b12      	cmp	r3, #18
 8004a6e:	d101      	bne.n	8004a74 <HAL_SAI_ErrorCallback+0x2c>
		BSP_AUDIO_OUT_Error_CallBack();
 8004a70:	f000 f810 	bl	8004a94 <BSP_AUDIO_OUT_Error_CallBack>
	}

	if ((audio_in_state == HAL_SAI_STATE_BUSY)
 8004a74:	7bbb      	ldrb	r3, [r7, #14]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d002      	beq.n	8004a80 <HAL_SAI_ErrorCallback+0x38>
			|| (audio_in_state == HAL_SAI_STATE_BUSY_RX)) {
 8004a7a:	7bbb      	ldrb	r3, [r7, #14]
 8004a7c:	2b22      	cmp	r3, #34	@ 0x22
 8004a7e:	d101      	bne.n	8004a84 <HAL_SAI_ErrorCallback+0x3c>
		BSP_AUDIO_IN_Error_CallBack();
 8004a80:	f000 f9be 	bl	8004e00 <BSP_AUDIO_IN_Error_CallBack>
	}
}
 8004a84:	bf00      	nop
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	200009e4 	.word	0x200009e4
 8004a90:	20000a68 	.word	0x20000a68

08004a94 <BSP_AUDIO_OUT_Error_CallBack>:

/**
 * @brief  Manages the DMA FIFO error event.
 * @retval None
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
}
 8004a98:	bf00      	nop
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <BSP_AUDIO_OUT_MspInit>:
 * @brief  Initializes BSP_AUDIO_OUT MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	@ 0x30
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_tx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_OUT_SAIx_CLK_ENABLE();
 8004aae:	4b63      	ldr	r3, [pc, #396]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	4a62      	ldr	r2, [pc, #392]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004ab4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aba:	4b60      	ldr	r3, [pc, #384]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	69bb      	ldr	r3, [r7, #24]

	/* Enable GPIO clock */
	AUDIO_OUT_SAIx_MCLK_ENABLE();
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aca:	4a5c      	ldr	r2, [pc, #368]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
	AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8004ade:	4b57      	ldr	r3, [pc, #348]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	4a56      	ldr	r2, [pc, #344]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aea:	4b54      	ldr	r3, [pc, #336]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	693b      	ldr	r3, [r7, #16]
	AUDIO_OUT_SAIx_FS_ENABLE();
 8004af6:	4b51      	ldr	r3, [pc, #324]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afa:	4a50      	ldr	r2, [pc, #320]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b02:	4b4e      	ldr	r3, [pc, #312]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
	/* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
	gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8004b0e:	2380      	movs	r3, #128	@ 0x80
 8004b10:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004b12:	2302      	movs	r3, #2
 8004b14:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004b16:	2300      	movs	r3, #0
 8004b18:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004b1e:	230a      	movs	r3, #10
 8004b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8004b22:	f107 031c 	add.w	r3, r7, #28
 8004b26:	4619      	mov	r1, r3
 8004b28:	4845      	ldr	r0, [pc, #276]	@ (8004c40 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004b2a:	f004 ff09 	bl	8009940 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8004b2e:	2320      	movs	r3, #32
 8004b30:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004b32:	2302      	movs	r3, #2
 8004b34:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8004b3e:	230a      	movs	r3, #10
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004b42:	f107 031c 	add.w	r3, r7, #28
 8004b46:	4619      	mov	r1, r3
 8004b48:	483d      	ldr	r0, [pc, #244]	@ (8004c40 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004b4a:	f004 fef9 	bl	8009940 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 8004b4e:	2340      	movs	r3, #64	@ 0x40
 8004b50:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004b52:	2302      	movs	r3, #2
 8004b54:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004b5e:	230a      	movs	r3, #10
 8004b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8004b62:	f107 031c 	add.w	r3, r7, #28
 8004b66:	4619      	mov	r1, r3
 8004b68:	4835      	ldr	r0, [pc, #212]	@ (8004c40 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004b6a:	f004 fee9 	bl	8009940 <HAL_GPIO_Init>

	gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8004b6e:	2310      	movs	r3, #16
 8004b70:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004b72:	2302      	movs	r3, #2
 8004b74:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8004b7e:	230a      	movs	r3, #10
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8004b82:	f107 031c 	add.w	r3, r7, #28
 8004b86:	4619      	mov	r1, r3
 8004b88:	482d      	ldr	r0, [pc, #180]	@ (8004c40 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8004b8a:	f004 fed9 	bl	8009940 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	4a2a      	ldr	r2, [pc, #168]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004b94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b9a:	4b28      	ldr	r3, [pc, #160]	@ (8004c3c <BSP_AUDIO_OUT_MspInit+0x198>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba2:	60bb      	str	r3, [r7, #8]
 8004ba4:	68bb      	ldr	r3, [r7, #8]

	if (hsai->Instance == AUDIO_OUT_SAIx) {
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a26      	ldr	r2, [pc, #152]	@ (8004c44 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d138      	bne.n	8004c22 <BSP_AUDIO_OUT_MspInit+0x17e>
		/* Configure the hdma_saiTx handle parameters */
		hdma_sai_tx.Init.Channel = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8004bb0:	4b25      	ldr	r3, [pc, #148]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bb2:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8004bb6:	605a      	str	r2, [r3, #4]
		hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bb8:	4b23      	ldr	r3, [pc, #140]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bba:	2240      	movs	r2, #64	@ 0x40
 8004bbc:	609a      	str	r2, [r3, #8]
		hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bbe:	4b22      	ldr	r3, [pc, #136]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	60da      	str	r2, [r3, #12]
		hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004bc4:	4b20      	ldr	r3, [pc, #128]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bca:	611a      	str	r2, [r3, #16]
		hdma_sai_tx.Init.PeriphDataAlignment =
 8004bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bd2:	615a      	str	r2, [r3, #20]
				AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_tx.Init.MemDataAlignment = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8004bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bd6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bda:	619a      	str	r2, [r3, #24]
		hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004be2:	61da      	str	r2, [r3, #28]
		hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004be4:	4b18      	ldr	r3, [pc, #96]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004be6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004bea:	621a      	str	r2, [r3, #32]
		hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004bec:	4b16      	ldr	r3, [pc, #88]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bee:	2204      	movs	r2, #4
 8004bf0:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004bf2:	4b15      	ldr	r3, [pc, #84]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004bf8:	4b13      	ldr	r3, [pc, #76]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004bfe:	4b12      	ldr	r3, [pc, #72]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8004c04:	4b10      	ldr	r3, [pc, #64]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004c06:	4a11      	ldr	r2, [pc, #68]	@ (8004c4c <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8004c08:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004c10:	4a0d      	ldr	r2, [pc, #52]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_tx);
 8004c16:	480c      	ldr	r0, [pc, #48]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004c18:	f004 f8b0 	bl	8008d7c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_tx);
 8004c1c:	480a      	ldr	r0, [pc, #40]	@ (8004c48 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8004c1e:	f003 ffff 	bl	8008c20 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8004c22:	2200      	movs	r2, #0
 8004c24:	210e      	movs	r1, #14
 8004c26:	203c      	movs	r0, #60	@ 0x3c
 8004c28:	f003 ffd0 	bl	8008bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8004c2c:	203c      	movs	r0, #60	@ 0x3c
 8004c2e:	f003 ffe9 	bl	8008c04 <HAL_NVIC_EnableIRQ>
}
 8004c32:	bf00      	nop
 8004c34:	3730      	adds	r7, #48	@ 0x30
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40022000 	.word	0x40022000
 8004c44:	40015c04 	.word	0x40015c04
 8004c48:	20000aec 	.word	0x20000aec
 8004c4c:	40026470 	.word	0x40026470

08004c50 <BSP_AUDIO_OUT_ClockConfig>:
 * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
 *         Being __weak it can be overwritten by the application
 * @retval None
 */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai,
		uint32_t AudioFreq, void *Params) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b0a6      	sub	sp, #152	@ 0x98
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

	HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004c5c:	f107 0314 	add.w	r3, r7, #20
 8004c60:	4618      	mov	r0, r3
 8004c62:	f007 fbbb 	bl	800c3dc <HAL_RCCEx_GetPeriphCLKConfig>

	/* Set the PLL configuration according to the audio frequency */
	if ((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f245 6222 	movw	r2, #22050	@ 0x5622
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <BSP_AUDIO_OUT_ClockConfig+0x34>
			|| (AudioFreq == AUDIO_FREQUENCY_44K)) {
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d112      	bne.n	8004caa <BSP_AUDIO_OUT_ClockConfig+0x5a>
		/* Configure PLLI2S prescalers */
		/* PLLI2S_VCO: VCO_429M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004c84:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c88:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004c8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c8e:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8004c90:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8004c94:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 8004c96:	2302      	movs	r3, #2
 8004c98:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8004c9a:	2313      	movs	r3, #19
 8004c9c:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004c9e:	f107 0314 	add.w	r3, r7, #20
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f006 ffaa 	bl	800bbfc <HAL_RCCEx_PeriphCLKConfig>
 8004ca8:	e012      	b.n	8004cd0 <BSP_AUDIO_OUT_ClockConfig+0x80>
	{
		/* I2S clock config
		 PLLI2S_VCO: VCO_344M
		 I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
		 I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
		rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8004caa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004cae:	617b      	str	r3, [r7, #20]
		rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8004cb0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004cb4:	657b      	str	r3, [r7, #84]	@ 0x54
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 8004cb6:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8004cba:	61bb      	str	r3, [r7, #24]
		rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8004cbc:	2307      	movs	r3, #7
 8004cbe:	623b      	str	r3, [r7, #32]
		rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	63bb      	str	r3, [r7, #56]	@ 0x38

		HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f006 ff97 	bl	800bbfc <HAL_RCCEx_PeriphCLKConfig>
	}
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	3798      	adds	r7, #152	@ 0x98
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <SAIx_Out_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_Out_DeInit(void) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004cdc:	4b07      	ldr	r3, [pc, #28]	@ (8004cfc <SAIx_Out_DeInit+0x24>)
 8004cde:	4a08      	ldr	r2, [pc, #32]	@ (8004d00 <SAIx_Out_DeInit+0x28>)
 8004ce0:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8004ce2:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <SAIx_Out_DeInit+0x24>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b04      	ldr	r3, [pc, #16]	@ (8004cfc <SAIx_Out_DeInit+0x24>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004cf0:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_out_sai);
 8004cf2:	4802      	ldr	r0, [pc, #8]	@ (8004cfc <SAIx_Out_DeInit+0x24>)
 8004cf4:	f007 ff3c 	bl	800cb70 <HAL_SAI_DeInit>
}
 8004cf8:	bf00      	nop
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	200009e4 	.word	0x200009e4
 8004d00:	40015c04 	.word	0x40015c04

08004d04 <BSP_AUDIO_IN_OUT_Init>:
 * @param  BitRes: Audio frequency to be configured.
 * @param  ChnlNbr: Channel number.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice,
		uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 8004d04:	b590      	push	{r4, r7, lr}
 8004d06:	b089      	sub	sp, #36	@ 0x24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60ba      	str	r2, [r7, #8]
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	4603      	mov	r3, r0
 8004d10:	81fb      	strh	r3, [r7, #14]
 8004d12:	460b      	mov	r3, r1
 8004d14:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = AUDIO_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	77fb      	strb	r3, [r7, #31]
	uint32_t deviceid = 0x00;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
	uint32_t slot_active;

	if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1)
 8004d1e:	89fb      	ldrh	r3, [r7, #14]
 8004d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d24:	d006      	beq.n	8004d34 <BSP_AUDIO_IN_OUT_Init+0x30>
			&& (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)) /* Only MICROPHONE_2 input supported */
 8004d26:	89fb      	ldrh	r3, [r7, #14]
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d2c:	d002      	beq.n	8004d34 <BSP_AUDIO_IN_OUT_Init+0x30>
			{
		ret = AUDIO_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e054      	b.n	8004dde <BSP_AUDIO_IN_OUT_Init+0xda>
	} else {
		/* Disable SAI */
		SAIx_In_DeInit();
 8004d34:	f000 f9d4 	bl	80050e0 <SAIx_In_DeInit>
		SAIx_Out_DeInit();
 8004d38:	f7ff ffce 	bl	8004cd8 <SAIx_Out_DeInit>

		/* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
		BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	4829      	ldr	r0, [pc, #164]	@ (8004de8 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004d42:	f7ff ff85 	bl	8004c50 <BSP_AUDIO_OUT_ClockConfig>

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
		haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004d46:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004d48:	4a28      	ldr	r2, [pc, #160]	@ (8004dec <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8004d4a:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET) {
 8004d4c:	4826      	ldr	r0, [pc, #152]	@ (8004de8 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004d4e:	f007 fff5 	bl	800cd3c <HAL_SAI_GetState>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d103      	bne.n	8004d60 <BSP_AUDIO_IN_OUT_Init+0x5c>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4823      	ldr	r0, [pc, #140]	@ (8004de8 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8004d5c:	f000 f858 	bl	8004e10 <BSP_AUDIO_IN_MspInit>
		}

		/* SAI data transfer preparation:
		 Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
		haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004d60:	4b23      	ldr	r3, [pc, #140]	@ (8004df0 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8004d62:	4a24      	ldr	r2, [pc, #144]	@ (8004df4 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8004d64:	601a      	str	r2, [r3, #0]
		if (HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET) {
 8004d66:	4822      	ldr	r0, [pc, #136]	@ (8004df0 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8004d68:	f007 ffe8 	bl	800cd3c <HAL_SAI_GetState>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <BSP_AUDIO_IN_OUT_Init+0x76>
			/* Init the SAI MSP: this __weak function can be redefined by the application*/
			BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8004d72:	2100      	movs	r1, #0
 8004d74:	481e      	ldr	r0, [pc, #120]	@ (8004df0 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8004d76:	f7ff fe95 	bl	8004aa4 <BSP_AUDIO_OUT_MspInit>

		/* Configure SAI in master mode :
		 *   - SAI2_block_A in master TX mode
		 *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
		 */
		if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2) {
 8004d7a:	89fb      	ldrh	r3, [r7, #14]
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d80:	d102      	bne.n	8004d88 <BSP_AUDIO_IN_OUT_Init+0x84>
			slot_active = CODEC_AUDIOFRAME_SLOT_13;
 8004d82:	230a      	movs	r3, #10
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	e001      	b.n	8004d8c <BSP_AUDIO_IN_OUT_Init+0x88>
		} else {
			slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8004d88:	2305      	movs	r3, #5
 8004d8a:	61bb      	str	r3, [r7, #24]
		}
		SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	69b9      	ldr	r1, [r7, #24]
 8004d90:	2000      	movs	r0, #0
 8004d92:	f000 f8ef 	bl	8004f74 <SAIx_In_Init>

		/* wm8994 codec initialization */
		deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8004d96:	4b18      	ldr	r3, [pc, #96]	@ (8004df8 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2034      	movs	r0, #52	@ 0x34
 8004d9c:	4798      	blx	r3
 8004d9e:	6178      	str	r0, [r7, #20]

		if ((deviceid) == WM8994_ID) {
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f648 1294 	movw	r2, #35220	@ 0x8994
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d109      	bne.n	8004dbe <BSP_AUDIO_IN_OUT_Init+0xba>
			/* Reset the Codec Registers */
			wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8004daa:	4b13      	ldr	r3, [pc, #76]	@ (8004df8 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8004dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dae:	2034      	movs	r0, #52	@ 0x34
 8004db0:	4798      	blx	r3
			/* Initialize the audio driver structure */
			audio_drv = &wm8994_drv;
 8004db2:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8004db4:	4a10      	ldr	r2, [pc, #64]	@ (8004df8 <BSP_AUDIO_IN_OUT_Init+0xf4>)
 8004db6:	601a      	str	r2, [r3, #0]
			ret = AUDIO_OK;
 8004db8:	2300      	movs	r3, #0
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e001      	b.n	8004dc2 <BSP_AUDIO_IN_OUT_Init+0xbe>
		} else {
			ret = AUDIO_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	77fb      	strb	r3, [r7, #31]
		}

		if (ret == AUDIO_OK) {
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <BSP_AUDIO_IN_OUT_Init+0xda>
			/* Initialize the codec internal registers */
			audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100,
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <BSP_AUDIO_IN_OUT_Init+0xf8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681c      	ldr	r4, [r3, #0]
 8004dce:	89fa      	ldrh	r2, [r7, #14]
 8004dd0:	89bb      	ldrh	r3, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	b299      	uxth	r1, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2264      	movs	r2, #100	@ 0x64
 8004dda:	2034      	movs	r0, #52	@ 0x34
 8004ddc:	47a0      	blx	r4
					AudioFreq);
		}
	}
	return ret;
 8004dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3724      	adds	r7, #36	@ 0x24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd90      	pop	{r4, r7, pc}
 8004de8:	20000a68 	.word	0x20000a68
 8004dec:	40015c24 	.word	0x40015c24
 8004df0:	200009e4 	.word	0x200009e4
 8004df4:	40015c04 	.word	0x40015c04
 8004df8:	20000044 	.word	0x20000044
 8004dfc:	200009e0 	.word	0x200009e0

08004e00 <BSP_AUDIO_IN_Error_CallBack>:

/**
 * @brief  Audio IN Error callback function.
 * @retval None
 */
__weak void BSP_AUDIO_IN_Error_CallBack(void) {
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
	/* This function is called when an Interrupt due to transfer error on or peripheral
	 error occurs. */
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <BSP_AUDIO_IN_MspInit>:
 * @brief  Initializes BSP_AUDIO_IN MSP.
 * @param  hsai: SAI handle
 * @param  Params
 * @retval None
 */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08c      	sub	sp, #48	@ 0x30
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_sai_rx;
	GPIO_InitTypeDef gpio_init_structure;

	/* Enable SAI clock */
	AUDIO_IN_SAIx_CLK_ENABLE();
 8004e1a:	4b50      	ldr	r3, [pc, #320]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1e:	4a4f      	ldr	r2, [pc, #316]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e26:	4b4d      	ldr	r3, [pc, #308]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	69bb      	ldr	r3, [r7, #24]

	/* Enable SD GPIO clock */
	AUDIO_IN_SAIx_SD_ENABLE();
 8004e32:	4b4a      	ldr	r3, [pc, #296]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	4a49      	ldr	r2, [pc, #292]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e3e:	4b47      	ldr	r3, [pc, #284]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697b      	ldr	r3, [r7, #20]
	/* CODEC_SAI pin configuration: SD pin */
	gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8004e4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e4e:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004e50:	2302      	movs	r3, #2
 8004e52:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8004e5c:	230a      	movs	r3, #10
 8004e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004e60:	f107 031c 	add.w	r3, r7, #28
 8004e64:	4619      	mov	r1, r3
 8004e66:	483e      	ldr	r0, [pc, #248]	@ (8004f60 <BSP_AUDIO_IN_MspInit+0x150>)
 8004e68:	f004 fd6a 	bl	8009940 <HAL_GPIO_Init>

	/* Enable Audio INT GPIO clock */
	AUDIO_IN_INT_GPIO_ENABLE();
 8004e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	4a3a      	ldr	r2, [pc, #232]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e78:	4b38      	ldr	r3, [pc, #224]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	693b      	ldr	r3, [r7, #16]
	/* Audio INT pin configuration: input */
	gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8004e84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e88:	61fb      	str	r3, [r7, #28]
	gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	623b      	str	r3, [r7, #32]
	gpio_init_structure.Pull = GPIO_NOPULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	627b      	str	r3, [r7, #36]	@ 0x24
	gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004e92:	2302      	movs	r3, #2
 8004e94:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8004e96:	f107 031c 	add.w	r3, r7, #28
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4831      	ldr	r0, [pc, #196]	@ (8004f64 <BSP_AUDIO_IN_MspInit+0x154>)
 8004e9e:	f004 fd4f 	bl	8009940 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004ea8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eae:	4b2b      	ldr	r3, [pc, #172]	@ (8004f5c <BSP_AUDIO_IN_MspInit+0x14c>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]

	if (hsai->Instance == AUDIO_IN_SAIx) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <BSP_AUDIO_IN_MspInit+0x158>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d137      	bne.n	8004f34 <BSP_AUDIO_IN_MspInit+0x124>
		/* Configure the hdma_sai_rx handle parameters */
		hdma_sai_rx.Init.Channel = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8004ec4:	4b29      	ldr	r3, [pc, #164]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	605a      	str	r2, [r3, #4]
		hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eca:	4b28      	ldr	r3, [pc, #160]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	609a      	str	r2, [r3, #8]
		hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ed0:	4b26      	ldr	r3, [pc, #152]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	60da      	str	r2, [r3, #12]
		hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ed6:	4b25      	ldr	r3, [pc, #148]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ed8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004edc:	611a      	str	r2, [r3, #16]
		hdma_sai_rx.Init.PeriphDataAlignment =
 8004ede:	4b23      	ldr	r3, [pc, #140]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ee0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ee4:	615a      	str	r2, [r3, #20]
				AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
		hdma_sai_rx.Init.MemDataAlignment = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004ee6:	4b21      	ldr	r3, [pc, #132]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ee8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004eec:	619a      	str	r2, [r3, #24]
		hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8004eee:	4b1f      	ldr	r3, [pc, #124]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ef0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ef4:	61da      	str	r2, [r3, #28]
		hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004ef8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004efc:	621a      	str	r2, [r3, #32]
		hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004efe:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	625a      	str	r2, [r3, #36]	@ 0x24
		hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004f04:	4b19      	ldr	r3, [pc, #100]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f06:	2203      	movs	r2, #3
 8004f08:	629a      	str	r2, [r3, #40]	@ 0x28
		hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004f0a:	4b18      	ldr	r3, [pc, #96]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
		hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8004f10:	4b16      	ldr	r3, [pc, #88]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	@ 0x30

		hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004f16:	4b15      	ldr	r3, [pc, #84]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f18:	4a15      	ldr	r2, [pc, #84]	@ (8004f70 <BSP_AUDIO_IN_MspInit+0x160>)
 8004f1a:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a13      	ldr	r2, [pc, #76]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f20:	671a      	str	r2, [r3, #112]	@ 0x70
 8004f22:	4a12      	ldr	r2, [pc, #72]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6393      	str	r3, [r2, #56]	@ 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_sai_rx);
 8004f28:	4810      	ldr	r0, [pc, #64]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f2a:	f003 ff27 	bl	8008d7c <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_sai_rx);
 8004f2e:	480f      	ldr	r0, [pc, #60]	@ (8004f6c <BSP_AUDIO_IN_MspInit+0x15c>)
 8004f30:	f003 fe76 	bl	8008c20 <HAL_DMA_Init>
	}

	/* SAI DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004f34:	2200      	movs	r2, #0
 8004f36:	210f      	movs	r1, #15
 8004f38:	2046      	movs	r0, #70	@ 0x46
 8004f3a:	f003 fe47 	bl	8008bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004f3e:	2046      	movs	r0, #70	@ 0x46
 8004f40:	f003 fe60 	bl	8008c04 <HAL_NVIC_EnableIRQ>

	/* Audio INT IRQ Channel configuration */
	HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8004f44:	2200      	movs	r2, #0
 8004f46:	210f      	movs	r1, #15
 8004f48:	2028      	movs	r0, #40	@ 0x28
 8004f4a:	f003 fe3f 	bl	8008bcc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8004f4e:	2028      	movs	r0, #40	@ 0x28
 8004f50:	f003 fe58 	bl	8008c04 <HAL_NVIC_EnableIRQ>
}
 8004f54:	bf00      	nop
 8004f56:	3730      	adds	r7, #48	@ 0x30
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	40021800 	.word	0x40021800
 8004f64:	40021c00 	.word	0x40021c00
 8004f68:	40015c24 	.word	0x40015c24
 8004f6c:	20000b4c 	.word	0x20000b4c
 8004f70:	400264b8 	.word	0x400264b8

08004f74 <SAIx_In_Init>:
 * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
 * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
 * @retval None
 */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive,
		uint32_t AudioFreq) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
	/* Initialize SAI2 block A in MASTER RX */
	/* Initialize the haudio_out_sai Instance parameter */
	haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8004f80:	4b53      	ldr	r3, [pc, #332]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004f82:	4a54      	ldr	r2, [pc, #336]	@ (80050d4 <SAIx_In_Init+0x160>)
 8004f84:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_out_sai);
 8004f86:	4b52      	ldr	r3, [pc, #328]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b50      	ldr	r3, [pc, #320]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f94:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8004f96:	4a4e      	ldr	r2, [pc, #312]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	61d3      	str	r3, [r2, #28]
	haudio_out_sai.Init.AudioMode = SaiOutMode;
 8004f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6053      	str	r3, [r2, #4]
	haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8004fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	615a      	str	r2, [r3, #20]
	haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8004fa8:	4b49      	ldr	r3, [pc, #292]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8004fae:	4b48      	ldr	r3, [pc, #288]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fb0:	2280      	movs	r2, #128	@ 0x80
 8004fb2:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8004fb4:	4b46      	ldr	r3, [pc, #280]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004fba:	4b45      	ldr	r3, [pc, #276]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8004fc0:	4b43      	ldr	r3, [pc, #268]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]
	haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8004fc6:	4b42      	ldr	r3, [pc, #264]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004fcc:	611a      	str	r2, [r3, #16]
	haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8004fce:	4b40      	ldr	r3, [pc, #256]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_out_sai.FrameInit.FrameLength = 64;
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fd6:	2240      	movs	r2, #64	@ 0x40
 8004fd8:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8004fda:	4b3d      	ldr	r3, [pc, #244]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fdc:	2220      	movs	r2, #32
 8004fde:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004fe0:	4b3b      	ldr	r3, [pc, #236]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fe2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004fe6:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004fe8:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8004fee:	4b38      	ldr	r3, [pc, #224]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004ff0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004ff4:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot actives */
	haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8004ff6:	4b36      	ldr	r3, [pc, #216]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8004ffc:	4b34      	ldr	r3, [pc, #208]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_out_sai.SlotInit.SlotNumber = 4;
 8005002:	4b33      	ldr	r3, [pc, #204]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8005004:	2204      	movs	r2, #4
 8005006:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8005008:	4a31      	ldr	r2, [pc, #196]	@ (80050d0 <SAIx_In_Init+0x15c>)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_out_sai);
 800500e:	4830      	ldr	r0, [pc, #192]	@ (80050d0 <SAIx_In_Init+0x15c>)
 8005010:	f007 fc30 	bl	800c874 <HAL_SAI_Init>

	/* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005014:	4b30      	ldr	r3, [pc, #192]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005016:	4a31      	ldr	r2, [pc, #196]	@ (80050dc <SAIx_In_Init+0x168>)
 8005018:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral to allow access to SAI internal registers */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 800501a:	4b2f      	ldr	r3, [pc, #188]	@ (80050d8 <SAIx_In_Init+0x164>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b2d      	ldr	r3, [pc, #180]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005028:	601a      	str	r2, [r3, #0]

	/* Configure SAI_Block_x
	 LSBFirst: Disabled
	 DataSize: 16 */
	haudio_in_sai.Init.AudioFrequency = AudioFreq;
 800502a:	4a2b      	ldr	r2, [pc, #172]	@ (80050d8 <SAIx_In_Init+0x164>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	61d3      	str	r3, [r2, #28]
	haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8005030:	4b29      	ldr	r3, [pc, #164]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005032:	2203      	movs	r2, #3
 8005034:	605a      	str	r2, [r3, #4]
	haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8005036:	4b28      	ldr	r3, [pc, #160]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005038:	2200      	movs	r2, #0
 800503a:	615a      	str	r2, [r3, #20]
	haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 800503c:	4b26      	ldr	r3, [pc, #152]	@ (80050d8 <SAIx_In_Init+0x164>)
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	@ 0x30
	haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8005042:	4b25      	ldr	r3, [pc, #148]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005044:	2280      	movs	r2, #128	@ 0x80
 8005046:	635a      	str	r2, [r3, #52]	@ 0x34
	haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8005048:	4b23      	ldr	r3, [pc, #140]	@ (80050d8 <SAIx_In_Init+0x164>)
 800504a:	2200      	movs	r2, #0
 800504c:	639a      	str	r2, [r3, #56]	@ 0x38
	haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800504e:	4b22      	ldr	r3, [pc, #136]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005050:	2201      	movs	r2, #1
 8005052:	63da      	str	r2, [r3, #60]	@ 0x3c
	haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8005054:	4b20      	ldr	r3, [pc, #128]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005056:	2201      	movs	r2, #1
 8005058:	609a      	str	r2, [r3, #8]
	haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800505a:	4b1f      	ldr	r3, [pc, #124]	@ (80050d8 <SAIx_In_Init+0x164>)
 800505c:	2200      	movs	r2, #0
 800505e:	611a      	str	r2, [r3, #16]
	haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8005060:	4b1d      	ldr	r3, [pc, #116]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005062:	2201      	movs	r2, #1
 8005064:	619a      	str	r2, [r3, #24]
	 Frame Length: 64
	 Frame active Length: 32
	 FS Definition: Start frame + Channel Side identification
	 FS Polarity: FS active Low
	 FS Offset: FS asserted one bit before the first bit of slot 0 */
	haudio_in_sai.FrameInit.FrameLength = 64;
 8005066:	4b1c      	ldr	r3, [pc, #112]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005068:	2240      	movs	r2, #64	@ 0x40
 800506a:	641a      	str	r2, [r3, #64]	@ 0x40
	haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800506c:	4b1a      	ldr	r3, [pc, #104]	@ (80050d8 <SAIx_In_Init+0x164>)
 800506e:	2220      	movs	r2, #32
 8005070:	645a      	str	r2, [r3, #68]	@ 0x44
	haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005072:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005074:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005078:	649a      	str	r2, [r3, #72]	@ 0x48
	haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800507a:	4b17      	ldr	r3, [pc, #92]	@ (80050d8 <SAIx_In_Init+0x164>)
 800507c:	2200      	movs	r2, #0
 800507e:	64da      	str	r2, [r3, #76]	@ 0x4c
	haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005080:	4b15      	ldr	r3, [pc, #84]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005082:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005086:	651a      	str	r2, [r3, #80]	@ 0x50
	/* Configure SAI Block_x Slot
	 Slot First Bit Offset: 0
	 Slot Size  : 16
	 Slot Number: 4
	 Slot Active: All slot active */
	haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8005088:	4b13      	ldr	r3, [pc, #76]	@ (80050d8 <SAIx_In_Init+0x164>)
 800508a:	2200      	movs	r2, #0
 800508c:	655a      	str	r2, [r3, #84]	@ 0x54
	haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800508e:	4b12      	ldr	r3, [pc, #72]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005090:	2200      	movs	r2, #0
 8005092:	659a      	str	r2, [r3, #88]	@ 0x58
	haudio_in_sai.SlotInit.SlotNumber = 4;
 8005094:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <SAIx_In_Init+0x164>)
 8005096:	2204      	movs	r2, #4
 8005098:	65da      	str	r2, [r3, #92]	@ 0x5c
	haudio_in_sai.SlotInit.SlotActive = SlotActive;
 800509a:	4a0f      	ldr	r2, [pc, #60]	@ (80050d8 <SAIx_In_Init+0x164>)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	6613      	str	r3, [r2, #96]	@ 0x60

	HAL_SAI_Init(&haudio_in_sai);
 80050a0:	480d      	ldr	r0, [pc, #52]	@ (80050d8 <SAIx_In_Init+0x164>)
 80050a2:	f007 fbe7 	bl	800c874 <HAL_SAI_Init>

	/* Enable SAI peripheral to generate MCLK */
	__HAL_SAI_ENABLE(&haudio_out_sai);
 80050a6:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <SAIx_In_Init+0x15c>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	4b08      	ldr	r3, [pc, #32]	@ (80050d0 <SAIx_In_Init+0x15c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80050b4:	601a      	str	r2, [r3, #0]

	/* Enable SAI peripheral */
	__HAL_SAI_ENABLE(&haudio_in_sai);
 80050b6:	4b08      	ldr	r3, [pc, #32]	@ (80050d8 <SAIx_In_Init+0x164>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <SAIx_In_Init+0x164>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	200009e4 	.word	0x200009e4
 80050d4:	40015c04 	.word	0x40015c04
 80050d8:	20000a68 	.word	0x20000a68
 80050dc:	40015c24 	.word	0x40015c24

080050e0 <SAIx_In_DeInit>:

/**
 * @brief  Deinitializes the output Audio Codec audio interface (SAI).
 * @retval None
 */
static void SAIx_In_DeInit(void) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
	/* Initialize the haudio_in_sai Instance parameter */
	haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80050e4:	4b07      	ldr	r3, [pc, #28]	@ (8005104 <SAIx_In_DeInit+0x24>)
 80050e6:	4a08      	ldr	r2, [pc, #32]	@ (8005108 <SAIx_In_DeInit+0x28>)
 80050e8:	601a      	str	r2, [r3, #0]

	/* Disable SAI peripheral */
	__HAL_SAI_DISABLE(&haudio_in_sai);
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <SAIx_In_DeInit+0x24>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <SAIx_In_DeInit+0x24>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050f8:	601a      	str	r2, [r3, #0]

	HAL_SAI_DeInit(&haudio_in_sai);
 80050fa:	4802      	ldr	r0, [pc, #8]	@ (8005104 <SAIx_In_DeInit+0x24>)
 80050fc:	f007 fd38 	bl	800cb70 <HAL_SAI_DeInit>
}
 8005100:	bf00      	nop
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000a68 	.word	0x20000a68
 8005108:	40015c24 	.word	0x40015c24

0800510c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8005110:	4b31      	ldr	r3, [pc, #196]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005112:	2228      	movs	r2, #40	@ 0x28
 8005114:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8005116:	4b30      	ldr	r3, [pc, #192]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005118:	2209      	movs	r2, #9
 800511a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800511c:	4b2e      	ldr	r3, [pc, #184]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 800511e:	2235      	movs	r2, #53	@ 0x35
 8005120:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8005122:	4b2d      	ldr	r3, [pc, #180]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005124:	220b      	movs	r2, #11
 8005126:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8005128:	4b2b      	ldr	r3, [pc, #172]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 800512a:	f240 121b 	movw	r2, #283	@ 0x11b
 800512e:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8005130:	4b29      	ldr	r3, [pc, #164]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005132:	f240 2215 	movw	r2, #533	@ 0x215
 8005136:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8005138:	4b27      	ldr	r3, [pc, #156]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 800513a:	f240 121d 	movw	r2, #285	@ 0x11d
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8005140:	4b25      	ldr	r3, [pc, #148]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005142:	f240 2235 	movw	r2, #565	@ 0x235
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8005148:	2100      	movs	r1, #0
 800514a:	4823      	ldr	r0, [pc, #140]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 800514c:	f000 fbec 	bl	8005928 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8005150:	4b21      	ldr	r3, [pc, #132]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005152:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005156:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005158:	4b1f      	ldr	r3, [pc, #124]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 800515a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800515e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8005160:	4b1d      	ldr	r3, [pc, #116]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8005168:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 800516a:	2200      	movs	r2, #0
 800516c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8005170:	4b19      	ldr	r3, [pc, #100]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005178:	4b17      	ldr	r3, [pc, #92]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 800517a:	2200      	movs	r2, #0
 800517c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800517e:	4b16      	ldr	r3, [pc, #88]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005180:	2200      	movs	r2, #0
 8005182:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8005184:	4b14      	ldr	r3, [pc, #80]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005186:	2200      	movs	r2, #0
 8005188:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800518a:	4b13      	ldr	r3, [pc, #76]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 800518c:	2200      	movs	r2, #0
 800518e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8005190:	4b11      	ldr	r3, [pc, #68]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005192:	4a12      	ldr	r2, [pc, #72]	@ (80051dc <BSP_LCD_Init+0xd0>)
 8005194:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8005196:	4810      	ldr	r0, [pc, #64]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 8005198:	f005 fe6c 	bl	800ae74 <HAL_LTDC_GetState>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80051a2:	2100      	movs	r1, #0
 80051a4:	480c      	ldr	r0, [pc, #48]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 80051a6:	f000 fae5 	bl	8005774 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80051aa:	480b      	ldr	r0, [pc, #44]	@ (80051d8 <BSP_LCD_Init+0xcc>)
 80051ac:	f005 fc5c 	bl	800aa68 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80051b0:	2201      	movs	r2, #1
 80051b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80051b6:	480a      	ldr	r0, [pc, #40]	@ (80051e0 <BSP_LCD_Init+0xd4>)
 80051b8:	f004 fe92 	bl	8009ee0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80051bc:	2201      	movs	r2, #1
 80051be:	2108      	movs	r1, #8
 80051c0:	4808      	ldr	r0, [pc, #32]	@ (80051e4 <BSP_LCD_Init+0xd8>)
 80051c2:	f004 fe8d 	bl	8009ee0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80051c6:	f000 fccf 	bl	8005b68 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80051ca:	4807      	ldr	r0, [pc, #28]	@ (80051e8 <BSP_LCD_Init+0xdc>)
 80051cc:	f000 f90e 	bl	80053ec <BSP_LCD_SetFont>
  
  return LCD_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000bac 	.word	0x20000bac
 80051dc:	40016800 	.word	0x40016800
 80051e0:	40022000 	.word	0x40022000
 80051e4:	40022800 	.word	0x40022800
 80051e8:	2000002c 	.word	0x2000002c

080051ec <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80051f0:	4b06      	ldr	r3, [pc, #24]	@ (800520c <BSP_LCD_GetXSize+0x20>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a06      	ldr	r2, [pc, #24]	@ (8005210 <BSP_LCD_GetXSize+0x24>)
 80051f6:	2134      	movs	r1, #52	@ 0x34
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	4413      	add	r3, r2
 80051fe:	3360      	adds	r3, #96	@ 0x60
 8005200:	681b      	ldr	r3, [r3, #0]
}
 8005202:	4618      	mov	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000c94 	.word	0x20000c94
 8005210:	20000bac 	.word	0x20000bac

08005214 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8005218:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <BSP_LCD_GetYSize+0x20>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a06      	ldr	r2, [pc, #24]	@ (8005238 <BSP_LCD_GetYSize+0x24>)
 800521e:	2134      	movs	r1, #52	@ 0x34
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	4413      	add	r3, r2
 8005226:	3364      	adds	r3, #100	@ 0x64
 8005228:	681b      	ldr	r3, [r3, #0]
}
 800522a:	4618      	mov	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	20000c94 	.word	0x20000c94
 8005238:	20000bac 	.word	0x20000bac

0800523c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800523c:	b580      	push	{r7, lr}
 800523e:	b090      	sub	sp, #64	@ 0x40
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	6039      	str	r1, [r7, #0]
 8005246:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800524c:	f7ff ffce 	bl	80051ec <BSP_LCD_GetXSize>
 8005250:	4603      	mov	r3, r0
 8005252:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005258:	f7ff ffdc 	bl	8005214 <BSP_LCD_GetYSize>
 800525c:	4603      	mov	r3, r0
 800525e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8005268:	23ff      	movs	r3, #255	@ 0xff
 800526a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005282:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005286:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005288:	2307      	movs	r3, #7
 800528a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800528c:	f7ff ffae 	bl	80051ec <BSP_LCD_GetXSize>
 8005290:	4603      	mov	r3, r0
 8005292:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8005294:	f7ff ffbe 	bl	8005214 <BSP_LCD_GetYSize>
 8005298:	4603      	mov	r3, r0
 800529a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	f107 030c 	add.w	r3, r7, #12
 80052a2:	4619      	mov	r1, r3
 80052a4:	4812      	ldr	r0, [pc, #72]	@ (80052f0 <BSP_LCD_LayerDefaultInit+0xb4>)
 80052a6:	f005 fd71 	bl	800ad8c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	4911      	ldr	r1, [pc, #68]	@ (80052f4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	3304      	adds	r3, #4
 80052ba:	f04f 32ff 	mov.w	r2, #4294967295
 80052be:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80052c0:	88fa      	ldrh	r2, [r7, #6]
 80052c2:	490c      	ldr	r1, [pc, #48]	@ (80052f4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80052c4:	4613      	mov	r3, r2
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	3308      	adds	r3, #8
 80052d0:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80052d2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	4907      	ldr	r1, [pc, #28]	@ (80052f4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80052d8:	4613      	mov	r3, r2
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80052e6:	601a      	str	r2, [r3, #0]
}
 80052e8:	bf00      	nop
 80052ea:	3740      	adds	r7, #64	@ 0x40
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000bac 	.word	0x20000bac
 80052f4:	20000c98 	.word	0x20000c98
 80052f8:	2000002c 	.word	0x2000002c

080052fc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8005304:	4a04      	ldr	r2, [pc, #16]	@ (8005318 <BSP_LCD_SelectLayer+0x1c>)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6013      	str	r3, [r2, #0]
} 
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000c94 	.word	0x20000c94

0800531c <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d112      	bne.n	8005354 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 800532e:	4b19      	ldr	r3, [pc, #100]	@ (8005394 <BSP_LCD_SetLayerVisible+0x78>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	01db      	lsls	r3, r3, #7
 8005338:	4413      	add	r3, r2
 800533a:	3384      	adds	r3, #132	@ 0x84
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <BSP_LCD_SetLayerVisible+0x78>)
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	4611      	mov	r1, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	01d2      	lsls	r2, r2, #7
 8005348:	440a      	add	r2, r1
 800534a:	3284      	adds	r2, #132	@ 0x84
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	6013      	str	r3, [r2, #0]
 8005352:	e011      	b.n	8005378 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8005354:	4b0f      	ldr	r3, [pc, #60]	@ (8005394 <BSP_LCD_SetLayerVisible+0x78>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	01db      	lsls	r3, r3, #7
 800535e:	4413      	add	r3, r2
 8005360:	3384      	adds	r3, #132	@ 0x84
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a0b      	ldr	r2, [pc, #44]	@ (8005394 <BSP_LCD_SetLayerVisible+0x78>)
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	4611      	mov	r1, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	01d2      	lsls	r2, r2, #7
 800536e:	440a      	add	r2, r1
 8005370:	3284      	adds	r2, #132	@ 0x84
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8005378:	4b06      	ldr	r3, [pc, #24]	@ (8005394 <BSP_LCD_SetLayerVisible+0x78>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800537e:	4b05      	ldr	r3, [pc, #20]	@ (8005394 <BSP_LCD_SetLayerVisible+0x78>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0201 	orr.w	r2, r2, #1
 8005386:	625a      	str	r2, [r3, #36]	@ 0x24
} 
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	20000bac 	.word	0x20000bac

08005398 <BSP_LCD_SetTransparency>:
  * @param  Transparency: Transparency
  *           This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFF 
  * @retval None
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{    
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&hLtdcHandler, Transparency, LayerIndex);
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	4619      	mov	r1, r3
 80053aa:	4803      	ldr	r0, [pc, #12]	@ (80053b8 <BSP_LCD_SetTransparency+0x20>)
 80053ac:	f005 fd2c 	bl	800ae08 <HAL_LTDC_SetAlpha>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000bac 	.word	0x20000bac

080053bc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80053c4:	4b07      	ldr	r3, [pc, #28]	@ (80053e4 <BSP_LCD_SetTextColor+0x28>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4907      	ldr	r1, [pc, #28]	@ (80053e8 <BSP_LCD_SetTextColor+0x2c>)
 80053ca:	4613      	mov	r3, r2
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000c94 	.word	0x20000c94
 80053e8:	20000c98 	.word	0x20000c98

080053ec <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80053f4:	4b08      	ldr	r3, [pc, #32]	@ (8005418 <BSP_LCD_SetFont+0x2c>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4908      	ldr	r1, [pc, #32]	@ (800541c <BSP_LCD_SetFont+0x30>)
 80053fa:	4613      	mov	r3, r2
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	440b      	add	r3, r1
 8005404:	3308      	adds	r3, #8
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000c94 	.word	0x20000c94
 800541c:	20000c98 	.word	0x20000c98

08005420 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8005424:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <BSP_LCD_GetFont+0x24>)
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4907      	ldr	r1, [pc, #28]	@ (8005448 <BSP_LCD_GetFont+0x28>)
 800542a:	4613      	mov	r3, r2
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	3308      	adds	r3, #8
 8005436:	681b      	ldr	r3, [r3, #0]
}
 8005438:	4618      	mov	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000c94 	.word	0x20000c94
 8005448:	20000c98 	.word	0x20000c98

0800544c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800544c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800544e:	b085      	sub	sp, #20
 8005450:	af02      	add	r7, sp, #8
 8005452:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005454:	4b0f      	ldr	r3, [pc, #60]	@ (8005494 <BSP_LCD_Clear+0x48>)
 8005456:	681c      	ldr	r4, [r3, #0]
 8005458:	4b0e      	ldr	r3, [pc, #56]	@ (8005494 <BSP_LCD_Clear+0x48>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0e      	ldr	r2, [pc, #56]	@ (8005498 <BSP_LCD_Clear+0x4c>)
 800545e:	2134      	movs	r1, #52	@ 0x34
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	4413      	add	r3, r2
 8005466:	335c      	adds	r3, #92	@ 0x5c
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461e      	mov	r6, r3
 800546c:	f7ff febe 	bl	80051ec <BSP_LCD_GetXSize>
 8005470:	4605      	mov	r5, r0
 8005472:	f7ff fecf 	bl	8005214 <BSP_LCD_GetYSize>
 8005476:	4602      	mov	r2, r0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	9301      	str	r3, [sp, #4]
 800547c:	2300      	movs	r3, #0
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	462a      	mov	r2, r5
 8005484:	4631      	mov	r1, r6
 8005486:	4620      	mov	r0, r4
 8005488:	f000 fb22 	bl	8005ad0 <LL_FillBuffer>
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005494:	20000c94 	.word	0x20000c94
 8005498:	20000bac 	.word	0x20000bac

0800549c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800549c:	b590      	push	{r4, r7, lr}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	80fb      	strh	r3, [r7, #6]
 80054a6:	460b      	mov	r3, r1
 80054a8:	80bb      	strh	r3, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80054ae:	4b1b      	ldr	r3, [pc, #108]	@ (800551c <BSP_LCD_DisplayChar+0x80>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	491b      	ldr	r1, [pc, #108]	@ (8005520 <BSP_LCD_DisplayChar+0x84>)
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	3308      	adds	r3, #8
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6819      	ldr	r1, [r3, #0]
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80054ca:	4b14      	ldr	r3, [pc, #80]	@ (800551c <BSP_LCD_DisplayChar+0x80>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	4c14      	ldr	r4, [pc, #80]	@ (8005520 <BSP_LCD_DisplayChar+0x84>)
 80054d0:	4613      	mov	r3, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4423      	add	r3, r4
 80054da:	3308      	adds	r3, #8
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80054e0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80054e4:	4b0d      	ldr	r3, [pc, #52]	@ (800551c <BSP_LCD_DisplayChar+0x80>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005520 <BSP_LCD_DisplayChar+0x84>)
 80054ea:	4613      	mov	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4423      	add	r3, r4
 80054f4:	3308      	adds	r3, #8
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	889b      	ldrh	r3, [r3, #4]
 80054fa:	3307      	adds	r3, #7
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da00      	bge.n	8005502 <BSP_LCD_DisplayChar+0x66>
 8005500:	3307      	adds	r3, #7
 8005502:	10db      	asrs	r3, r3, #3
 8005504:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005508:	18ca      	adds	r2, r1, r3
 800550a:	88b9      	ldrh	r1, [r7, #4]
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fa26 	bl	8005960 <DrawChar>
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bd90      	pop	{r4, r7, pc}
 800551c:	20000c94 	.word	0x20000c94
 8005520:	20000c98 	.word	0x20000c98

08005524 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8005524:	b5b0      	push	{r4, r5, r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	60ba      	str	r2, [r7, #8]
 800552c:	461a      	mov	r2, r3
 800552e:	4603      	mov	r3, r0
 8005530:	81fb      	strh	r3, [r7, #14]
 8005532:	460b      	mov	r3, r1
 8005534:	81bb      	strh	r3, [r7, #12]
 8005536:	4613      	mov	r3, r2
 8005538:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800553a:	2301      	movs	r3, #1
 800553c:	83fb      	strh	r3, [r7, #30]
 800553e:	2300      	movs	r3, #0
 8005540:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	2300      	movs	r3, #0
 8005548:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800554e:	e002      	b.n	8005556 <BSP_LCD_DisplayStringAt+0x32>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	3301      	adds	r3, #1
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	617a      	str	r2, [r7, #20]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f6      	bne.n	8005550 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8005562:	f7ff fe43 	bl	80051ec <BSP_LCD_GetXSize>
 8005566:	4601      	mov	r1, r0
 8005568:	4b50      	ldr	r3, [pc, #320]	@ (80056ac <BSP_LCD_DisplayStringAt+0x188>)
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4850      	ldr	r0, [pc, #320]	@ (80056b0 <BSP_LCD_DisplayStringAt+0x18c>)
 800556e:	4613      	mov	r3, r2
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4403      	add	r3, r0
 8005578:	3308      	adds	r3, #8
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	889b      	ldrh	r3, [r3, #4]
 800557e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005582:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d01c      	beq.n	80055c4 <BSP_LCD_DisplayStringAt+0xa0>
 800558a:	2b03      	cmp	r3, #3
 800558c:	dc33      	bgt.n	80055f6 <BSP_LCD_DisplayStringAt+0xd2>
 800558e:	2b01      	cmp	r3, #1
 8005590:	d002      	beq.n	8005598 <BSP_LCD_DisplayStringAt+0x74>
 8005592:	2b02      	cmp	r3, #2
 8005594:	d019      	beq.n	80055ca <BSP_LCD_DisplayStringAt+0xa6>
 8005596:	e02e      	b.n	80055f6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	1ad1      	subs	r1, r2, r3
 800559e:	4b43      	ldr	r3, [pc, #268]	@ (80056ac <BSP_LCD_DisplayStringAt+0x188>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4843      	ldr	r0, [pc, #268]	@ (80056b0 <BSP_LCD_DisplayStringAt+0x18c>)
 80055a4:	4613      	mov	r3, r2
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	4413      	add	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4403      	add	r3, r0
 80055ae:	3308      	adds	r3, #8
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	889b      	ldrh	r3, [r3, #4]
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	085b      	lsrs	r3, r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	89fb      	ldrh	r3, [r7, #14]
 80055be:	4413      	add	r3, r2
 80055c0:	83fb      	strh	r3, [r7, #30]
      break;
 80055c2:	e01b      	b.n	80055fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80055c4:	89fb      	ldrh	r3, [r7, #14]
 80055c6:	83fb      	strh	r3, [r7, #30]
      break;
 80055c8:	e018      	b.n	80055fc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	b299      	uxth	r1, r3
 80055d2:	4b36      	ldr	r3, [pc, #216]	@ (80056ac <BSP_LCD_DisplayStringAt+0x188>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4836      	ldr	r0, [pc, #216]	@ (80056b0 <BSP_LCD_DisplayStringAt+0x18c>)
 80055d8:	4613      	mov	r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4403      	add	r3, r0
 80055e2:	3308      	adds	r3, #8
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	889b      	ldrh	r3, [r3, #4]
 80055e8:	fb11 f303 	smulbb	r3, r1, r3
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	89fb      	ldrh	r3, [r7, #14]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	83fb      	strh	r3, [r7, #30]
      break;
 80055f4:	e002      	b.n	80055fc <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80055f6:	89fb      	ldrh	r3, [r7, #14]
 80055f8:	83fb      	strh	r3, [r7, #30]
      break;
 80055fa:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80055fc:	8bfb      	ldrh	r3, [r7, #30]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <BSP_LCD_DisplayStringAt+0xe6>
 8005602:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005606:	2b00      	cmp	r3, #0
 8005608:	da1d      	bge.n	8005646 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800560e:	e01a      	b.n	8005646 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781a      	ldrb	r2, [r3, #0]
 8005614:	89b9      	ldrh	r1, [r7, #12]
 8005616:	8bfb      	ldrh	r3, [r7, #30]
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff ff3f 	bl	800549c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800561e:	4b23      	ldr	r3, [pc, #140]	@ (80056ac <BSP_LCD_DisplayStringAt+0x188>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4923      	ldr	r1, [pc, #140]	@ (80056b0 <BSP_LCD_DisplayStringAt+0x18c>)
 8005624:	4613      	mov	r3, r2
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	3308      	adds	r3, #8
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	889a      	ldrh	r2, [r3, #4]
 8005634:	8bfb      	ldrh	r3, [r7, #30]
 8005636:	4413      	add	r3, r2
 8005638:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	3301      	adds	r3, #1
 800563e:	60bb      	str	r3, [r7, #8]
    i++;
 8005640:	8bbb      	ldrh	r3, [r7, #28]
 8005642:	3301      	adds	r3, #1
 8005644:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	bf14      	ite	ne
 800564e:	2301      	movne	r3, #1
 8005650:	2300      	moveq	r3, #0
 8005652:	b2dc      	uxtb	r4, r3
 8005654:	f7ff fdca 	bl	80051ec <BSP_LCD_GetXSize>
 8005658:	8bb9      	ldrh	r1, [r7, #28]
 800565a:	4b14      	ldr	r3, [pc, #80]	@ (80056ac <BSP_LCD_DisplayStringAt+0x188>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4d14      	ldr	r5, [pc, #80]	@ (80056b0 <BSP_LCD_DisplayStringAt+0x18c>)
 8005660:	4613      	mov	r3, r2
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	442b      	add	r3, r5
 800566a:	3308      	adds	r3, #8
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	889b      	ldrh	r3, [r3, #4]
 8005670:	fb01 f303 	mul.w	r3, r1, r3
 8005674:	1ac3      	subs	r3, r0, r3
 8005676:	b299      	uxth	r1, r3
 8005678:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <BSP_LCD_DisplayStringAt+0x188>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	480c      	ldr	r0, [pc, #48]	@ (80056b0 <BSP_LCD_DisplayStringAt+0x18c>)
 800567e:	4613      	mov	r3, r2
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4403      	add	r3, r0
 8005688:	3308      	adds	r3, #8
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	889b      	ldrh	r3, [r3, #4]
 800568e:	4299      	cmp	r1, r3
 8005690:	bf2c      	ite	cs
 8005692:	2301      	movcs	r3, #1
 8005694:	2300      	movcc	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	4023      	ands	r3, r4
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1b7      	bne.n	8005610 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80056a0:	bf00      	nop
 80056a2:	bf00      	nop
 80056a4:	3720      	adds	r7, #32
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bdb0      	pop	{r4, r5, r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000c94 	.word	0x20000c94
 80056b0:	20000c98 	.word	0x20000c98

080056b4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	6039      	str	r1, [r7, #0]
 80056be:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80056c0:	f7ff feae 	bl	8005420 <BSP_LCD_GetFont>
 80056c4:	4603      	mov	r3, r0
 80056c6:	88db      	ldrh	r3, [r3, #6]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	fb12 f303 	smulbb	r3, r2, r3
 80056ce:	b299      	uxth	r1, r3
 80056d0:	2303      	movs	r3, #3
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	2000      	movs	r0, #0
 80056d6:	f7ff ff25 	bl	8005524 <BSP_LCD_DisplayStringAt>
}
 80056da:	bf00      	nop
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80056e4:	b5b0      	push	{r4, r5, r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	603a      	str	r2, [r7, #0]
 80056ee:	80fb      	strh	r3, [r7, #6]
 80056f0:	460b      	mov	r3, r1
 80056f2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80056f4:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <BSP_LCD_DrawPixel+0x88>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005770 <BSP_LCD_DrawPixel+0x8c>)
 80056fa:	2134      	movs	r1, #52	@ 0x34
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	4413      	add	r3, r2
 8005702:	3348      	adds	r3, #72	@ 0x48
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b02      	cmp	r3, #2
 8005708:	d116      	bne.n	8005738 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800570a:	4b18      	ldr	r3, [pc, #96]	@ (800576c <BSP_LCD_DrawPixel+0x88>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a18      	ldr	r2, [pc, #96]	@ (8005770 <BSP_LCD_DrawPixel+0x8c>)
 8005710:	2134      	movs	r1, #52	@ 0x34
 8005712:	fb01 f303 	mul.w	r3, r1, r3
 8005716:	4413      	add	r3, r2
 8005718:	335c      	adds	r3, #92	@ 0x5c
 800571a:	681c      	ldr	r4, [r3, #0]
 800571c:	88bd      	ldrh	r5, [r7, #4]
 800571e:	f7ff fd65 	bl	80051ec <BSP_LCD_GetXSize>
 8005722:	4603      	mov	r3, r0
 8005724:	fb03 f205 	mul.w	r2, r3, r5
 8005728:	88fb      	ldrh	r3, [r7, #6]
 800572a:	4413      	add	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4423      	add	r3, r4
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	b292      	uxth	r2, r2
 8005734:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8005736:	e015      	b.n	8005764 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8005738:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <BSP_LCD_DrawPixel+0x88>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a0c      	ldr	r2, [pc, #48]	@ (8005770 <BSP_LCD_DrawPixel+0x8c>)
 800573e:	2134      	movs	r1, #52	@ 0x34
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	4413      	add	r3, r2
 8005746:	335c      	adds	r3, #92	@ 0x5c
 8005748:	681c      	ldr	r4, [r3, #0]
 800574a:	88bd      	ldrh	r5, [r7, #4]
 800574c:	f7ff fd4e 	bl	80051ec <BSP_LCD_GetXSize>
 8005750:	4603      	mov	r3, r0
 8005752:	fb03 f205 	mul.w	r2, r3, r5
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4423      	add	r3, r4
 800575e:	461a      	mov	r2, r3
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6013      	str	r3, [r2, #0]
}
 8005764:	bf00      	nop
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bdb0      	pop	{r4, r5, r7, pc}
 800576c:	20000c94 	.word	0x20000c94
 8005770:	20000bac 	.word	0x20000bac

08005774 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b090      	sub	sp, #64	@ 0x40
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800577e:	4b64      	ldr	r3, [pc, #400]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	4a63      	ldr	r2, [pc, #396]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005784:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005788:	6453      	str	r3, [r2, #68]	@ 0x44
 800578a:	4b61      	ldr	r3, [pc, #388]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 800578c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800578e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8005796:	4b5e      	ldr	r3, [pc, #376]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579a:	4a5d      	ldr	r2, [pc, #372]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 800579c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80057ae:	4b58      	ldr	r3, [pc, #352]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b2:	4a57      	ldr	r2, [pc, #348]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057b4:	f043 0310 	orr.w	r3, r3, #16
 80057b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80057ba:	4b55      	ldr	r3, [pc, #340]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057be:	f003 0310 	and.w	r3, r3, #16
 80057c2:	623b      	str	r3, [r7, #32]
 80057c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80057c6:	4b52      	ldr	r3, [pc, #328]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	4a51      	ldr	r2, [pc, #324]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80057d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80057de:	4b4c      	ldr	r3, [pc, #304]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e2:	4a4b      	ldr	r2, [pc, #300]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80057ea:	4b49      	ldr	r3, [pc, #292]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80057f6:	4b46      	ldr	r3, [pc, #280]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	4a45      	ldr	r2, [pc, #276]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 80057fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005800:	6313      	str	r3, [r2, #48]	@ 0x30
 8005802:	4b43      	ldr	r3, [pc, #268]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800580e:	4b40      	ldr	r3, [pc, #256]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005812:	4a3f      	ldr	r2, [pc, #252]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005814:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005818:	6313      	str	r3, [r2, #48]	@ 0x30
 800581a:	4b3d      	ldr	r3, [pc, #244]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 800581c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8005826:	4b3a      	ldr	r3, [pc, #232]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582a:	4a39      	ldr	r2, [pc, #228]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005830:	6313      	str	r3, [r2, #48]	@ 0x30
 8005832:	4b37      	ldr	r3, [pc, #220]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800583e:	4b34      	ldr	r3, [pc, #208]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	4a33      	ldr	r2, [pc, #204]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 8005844:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005848:	6313      	str	r3, [r2, #48]	@ 0x30
 800584a:	4b31      	ldr	r3, [pc, #196]	@ (8005910 <BSP_LCD_MspInit+0x19c>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8005856:	2310      	movs	r3, #16
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800585a:	2302      	movs	r3, #2
 800585c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800585e:	2300      	movs	r3, #0
 8005860:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005862:	2302      	movs	r3, #2
 8005864:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8005866:	230e      	movs	r3, #14
 8005868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800586a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800586e:	4619      	mov	r1, r3
 8005870:	4828      	ldr	r0, [pc, #160]	@ (8005914 <BSP_LCD_MspInit+0x1a0>)
 8005872:	f004 f865 	bl	8009940 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8005876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800587c:	2302      	movs	r3, #2
 800587e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8005880:	2309      	movs	r3, #9
 8005882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005884:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005888:	4619      	mov	r1, r3
 800588a:	4823      	ldr	r0, [pc, #140]	@ (8005918 <BSP_LCD_MspInit+0x1a4>)
 800588c:	f004 f858 	bl	8009940 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8005890:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8005894:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005896:	2302      	movs	r3, #2
 8005898:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800589a:	230e      	movs	r3, #14
 800589c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800589e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058a2:	4619      	mov	r1, r3
 80058a4:	481d      	ldr	r0, [pc, #116]	@ (800591c <BSP_LCD_MspInit+0x1a8>)
 80058a6:	f004 f84b 	bl	8009940 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80058aa:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80058ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80058b0:	2302      	movs	r3, #2
 80058b2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80058b4:	230e      	movs	r3, #14
 80058b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80058b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058bc:	4619      	mov	r1, r3
 80058be:	4818      	ldr	r0, [pc, #96]	@ (8005920 <BSP_LCD_MspInit+0x1ac>)
 80058c0:	f004 f83e 	bl	8009940 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80058c4:	23f7      	movs	r3, #247	@ 0xf7
 80058c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80058c8:	2302      	movs	r3, #2
 80058ca:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80058cc:	230e      	movs	r3, #14
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80058d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058d4:	4619      	mov	r1, r3
 80058d6:	4813      	ldr	r0, [pc, #76]	@ (8005924 <BSP_LCD_MspInit+0x1b0>)
 80058d8:	f004 f832 	bl	8009940 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80058dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80058e2:	2301      	movs	r3, #1
 80058e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80058e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058ea:	4619      	mov	r1, r3
 80058ec:	480b      	ldr	r0, [pc, #44]	@ (800591c <BSP_LCD_MspInit+0x1a8>)
 80058ee:	f004 f827 	bl	8009940 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80058f2:	2308      	movs	r3, #8
 80058f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80058f6:	2301      	movs	r3, #1
 80058f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80058fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80058fe:	4619      	mov	r1, r3
 8005900:	4808      	ldr	r0, [pc, #32]	@ (8005924 <BSP_LCD_MspInit+0x1b0>)
 8005902:	f004 f81d 	bl	8009940 <HAL_GPIO_Init>
}
 8005906:	bf00      	nop
 8005908:	3740      	adds	r7, #64	@ 0x40
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	40021000 	.word	0x40021000
 8005918:	40021800 	.word	0x40021800
 800591c:	40022000 	.word	0x40022000
 8005920:	40022400 	.word	0x40022400
 8005924:	40022800 	.word	0x40022800

08005928 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8005932:	4b0a      	ldr	r3, [pc, #40]	@ (800595c <BSP_LCD_ClockConfig+0x34>)
 8005934:	2208      	movs	r2, #8
 8005936:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8005938:	4b08      	ldr	r3, [pc, #32]	@ (800595c <BSP_LCD_ClockConfig+0x34>)
 800593a:	22c0      	movs	r2, #192	@ 0xc0
 800593c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800593e:	4b07      	ldr	r3, [pc, #28]	@ (800595c <BSP_LCD_ClockConfig+0x34>)
 8005940:	2205      	movs	r2, #5
 8005942:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005944:	4b05      	ldr	r3, [pc, #20]	@ (800595c <BSP_LCD_ClockConfig+0x34>)
 8005946:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800594a:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800594c:	4803      	ldr	r0, [pc, #12]	@ (800595c <BSP_LCD_ClockConfig+0x34>)
 800594e:	f006 f955 	bl	800bbfc <HAL_RCCEx_PeriphCLKConfig>
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000cb0 	.word	0x20000cb0

08005960 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	603a      	str	r2, [r7, #0]
 800596a:	80fb      	strh	r3, [r7, #6]
 800596c:	460b      	mov	r3, r1
 800596e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8005978:	4b53      	ldr	r3, [pc, #332]	@ (8005ac8 <DrawChar+0x168>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4953      	ldr	r1, [pc, #332]	@ (8005acc <DrawChar+0x16c>)
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	440b      	add	r3, r1
 8005988:	3308      	adds	r3, #8
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	88db      	ldrh	r3, [r3, #6]
 800598e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8005990:	4b4d      	ldr	r3, [pc, #308]	@ (8005ac8 <DrawChar+0x168>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	494d      	ldr	r1, [pc, #308]	@ (8005acc <DrawChar+0x16c>)
 8005996:	4613      	mov	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3308      	adds	r3, #8
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	889b      	ldrh	r3, [r3, #4]
 80059a6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80059a8:	8a3b      	ldrh	r3, [r7, #16]
 80059aa:	3307      	adds	r3, #7
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	da00      	bge.n	80059b2 <DrawChar+0x52>
 80059b0:	3307      	adds	r3, #7
 80059b2:	10db      	asrs	r3, r3, #3
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	8a3b      	ldrh	r3, [r7, #16]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
 80059c6:	e076      	b.n	8005ab6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80059c8:	8a3b      	ldrh	r3, [r7, #16]
 80059ca:	3307      	adds	r3, #7
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	da00      	bge.n	80059d2 <DrawChar+0x72>
 80059d0:	3307      	adds	r3, #7
 80059d2:	10db      	asrs	r3, r3, #3
 80059d4:	461a      	mov	r2, r3
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	fb02 f303 	mul.w	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	4413      	add	r3, r2
 80059e0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80059e2:	8a3b      	ldrh	r3, [r7, #16]
 80059e4:	3307      	adds	r3, #7
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da00      	bge.n	80059ec <DrawChar+0x8c>
 80059ea:	3307      	adds	r3, #7
 80059ec:	10db      	asrs	r3, r3, #3
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d002      	beq.n	80059f8 <DrawChar+0x98>
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d004      	beq.n	8005a00 <DrawChar+0xa0>
 80059f6:	e00c      	b.n	8005a12 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	617b      	str	r3, [r7, #20]
      break;
 80059fe:	e016      	b.n	8005a2e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	3201      	adds	r2, #1
 8005a0a:	7812      	ldrb	r2, [r2, #0]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
      break;
 8005a10:	e00d      	b.n	8005a2e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	041a      	lsls	r2, r3, #16
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	4313      	orrs	r3, r2
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	3202      	adds	r2, #2
 8005a26:	7812      	ldrb	r2, [r2, #0]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
      break;
 8005a2c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
 8005a32:	e036      	b.n	8005aa2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8005a34:	8a3a      	ldrh	r2, [r7, #16]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	1ad2      	subs	r2, r2, r3
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	2201      	movs	r2, #1
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d012      	beq.n	8005a76 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	4413      	add	r3, r2
 8005a58:	b298      	uxth	r0, r3
 8005a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac8 <DrawChar+0x168>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	491b      	ldr	r1, [pc, #108]	@ (8005acc <DrawChar+0x16c>)
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	440b      	add	r3, r1
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	88bb      	ldrh	r3, [r7, #4]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f7ff fe38 	bl	80056e4 <BSP_LCD_DrawPixel>
 8005a74:	e012      	b.n	8005a9c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	b298      	uxth	r0, r3
 8005a80:	4b11      	ldr	r3, [pc, #68]	@ (8005ac8 <DrawChar+0x168>)
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	4911      	ldr	r1, [pc, #68]	@ (8005acc <DrawChar+0x16c>)
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	3304      	adds	r3, #4
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	88bb      	ldrh	r3, [r7, #4]
 8005a96:	4619      	mov	r1, r3
 8005a98:	f7ff fe24 	bl	80056e4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	8a3b      	ldrh	r3, [r7, #16]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d3c4      	bcc.n	8005a34 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8005aaa:	88bb      	ldrh	r3, [r7, #4]
 8005aac:	3301      	adds	r3, #1
 8005aae:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
 8005ab6:	8a7b      	ldrh	r3, [r7, #18]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d384      	bcc.n	80059c8 <DrawChar+0x68>
  }
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000c94 	.word	0x20000c94
 8005acc:	20000c98 	.word	0x20000c98

08005ad0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
 8005adc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8005ade:	4b1e      	ldr	r3, [pc, #120]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005ae0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005ae4:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8005b5c <LL_FillBuffer+0x8c>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1d      	ldr	r2, [pc, #116]	@ (8005b60 <LL_FillBuffer+0x90>)
 8005aec:	2134      	movs	r1, #52	@ 0x34
 8005aee:	fb01 f303 	mul.w	r3, r1, r3
 8005af2:	4413      	add	r3, r2
 8005af4:	3348      	adds	r3, #72	@ 0x48
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d103      	bne.n	8005b04 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8005afc:	4b16      	ldr	r3, [pc, #88]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005afe:	2202      	movs	r2, #2
 8005b00:	609a      	str	r2, [r3, #8]
 8005b02:	e002      	b.n	8005b0a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8005b04:	4b14      	ldr	r3, [pc, #80]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8005b0a:	4a13      	ldr	r2, [pc, #76]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8005b10:	4b11      	ldr	r3, [pc, #68]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005b12:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <LL_FillBuffer+0x94>)
 8005b14:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8005b16:	4810      	ldr	r0, [pc, #64]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005b18:	f003 fc86 	bl	8009428 <HAL_DMA2D_Init>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d115      	bne.n	8005b4e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	480c      	ldr	r0, [pc, #48]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005b26:	f003 fddd 	bl	80096e4 <HAL_DMA2D_ConfigLayer>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10e      	bne.n	8005b4e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69f9      	ldr	r1, [r7, #28]
 8005b3a:	4807      	ldr	r0, [pc, #28]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005b3c:	f003 fcbe 	bl	80094bc <HAL_DMA2D_Start>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d103      	bne.n	8005b4e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8005b46:	210a      	movs	r1, #10
 8005b48:	4803      	ldr	r0, [pc, #12]	@ (8005b58 <LL_FillBuffer+0x88>)
 8005b4a:	f003 fce2 	bl	8009512 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8005b4e:	bf00      	nop
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000c54 	.word	0x20000c54
 8005b5c:	20000c94 	.word	0x20000c94
 8005b60:	20000bac 	.word	0x20000bac
 8005b64:	4002b000 	.word	0x4002b000

08005b68 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8005b6c:	4b29      	ldr	r3, [pc, #164]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c18 <BSP_SDRAM_Init+0xb0>)
 8005b70:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8005b72:	4b2a      	ldr	r3, [pc, #168]	@ (8005c1c <BSP_SDRAM_Init+0xb4>)
 8005b74:	2202      	movs	r2, #2
 8005b76:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8005b78:	4b28      	ldr	r3, [pc, #160]	@ (8005c1c <BSP_SDRAM_Init+0xb4>)
 8005b7a:	2207      	movs	r2, #7
 8005b7c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8005b7e:	4b27      	ldr	r3, [pc, #156]	@ (8005c1c <BSP_SDRAM_Init+0xb4>)
 8005b80:	2204      	movs	r2, #4
 8005b82:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8005b84:	4b25      	ldr	r3, [pc, #148]	@ (8005c1c <BSP_SDRAM_Init+0xb4>)
 8005b86:	2207      	movs	r2, #7
 8005b88:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8005b8a:	4b24      	ldr	r3, [pc, #144]	@ (8005c1c <BSP_SDRAM_Init+0xb4>)
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8005b90:	4b22      	ldr	r3, [pc, #136]	@ (8005c1c <BSP_SDRAM_Init+0xb4>)
 8005b92:	2202      	movs	r2, #2
 8005b94:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8005b96:	4b21      	ldr	r3, [pc, #132]	@ (8005c1c <BSP_SDRAM_Init+0xb4>)
 8005b98:	2202      	movs	r2, #2
 8005b9a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8005b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8005ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005baa:	2204      	movs	r2, #4
 8005bac:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8005bae:	4b19      	ldr	r3, [pc, #100]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005bb4:	4b17      	ldr	r3, [pc, #92]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005bb6:	2240      	movs	r2, #64	@ 0x40
 8005bb8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8005bba:	4b16      	ldr	r3, [pc, #88]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005bbc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bc0:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005bc2:	4b14      	ldr	r3, [pc, #80]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8005bc8:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005bca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bce:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005bd0:	4b10      	ldr	r3, [pc, #64]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005bd2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005bd6:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8005bde:	2100      	movs	r1, #0
 8005be0:	480c      	ldr	r0, [pc, #48]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005be2:	f000 f87f 	bl	8005ce4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8005be6:	490d      	ldr	r1, [pc, #52]	@ (8005c1c <BSP_SDRAM_Init+0xb4>)
 8005be8:	480a      	ldr	r0, [pc, #40]	@ (8005c14 <BSP_SDRAM_Init+0xac>)
 8005bea:	f008 fabd 	bl	800e168 <HAL_SDRAM_Init>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <BSP_SDRAM_Init+0xb8>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	e002      	b.n	8005c02 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8005bfc:	4b08      	ldr	r3, [pc, #32]	@ (8005c20 <BSP_SDRAM_Init+0xb8>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8005c02:	f240 6003 	movw	r0, #1539	@ 0x603
 8005c06:	f000 f80d 	bl	8005c24 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8005c0a:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <BSP_SDRAM_Init+0xb8>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000d34 	.word	0x20000d34
 8005c18:	a0000140 	.word	0xa0000140
 8005c1c:	20000d68 	.word	0x20000d68
 8005c20:	2000003c 	.word	0x2000003c

08005c24 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8005c30:	4b2a      	ldr	r3, [pc, #168]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c32:	2201      	movs	r2, #1
 8005c34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005c36:	4b29      	ldr	r3, [pc, #164]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c38:	2210      	movs	r2, #16
 8005c3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005c3c:	4b27      	ldr	r3, [pc, #156]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005c42:	4b26      	ldr	r3, [pc, #152]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005c48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c4c:	4923      	ldr	r1, [pc, #140]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c4e:	4824      	ldr	r0, [pc, #144]	@ (8005ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005c50:	f008 fabe 	bl	800e1d0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8005c54:	2001      	movs	r0, #1
 8005c56:	f002 fc49 	bl	80084ec <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8005c5a:	4b20      	ldr	r3, [pc, #128]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005c60:	4b1e      	ldr	r3, [pc, #120]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c62:	2210      	movs	r2, #16
 8005c64:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005c66:	4b1d      	ldr	r3, [pc, #116]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8005c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c76:	4919      	ldr	r1, [pc, #100]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c78:	4819      	ldr	r0, [pc, #100]	@ (8005ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005c7a:	f008 faa9 	bl	800e1d0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8005c7e:	4b17      	ldr	r3, [pc, #92]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c80:	2203      	movs	r2, #3
 8005c82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005c84:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c86:	2210      	movs	r2, #16
 8005c88:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8005c8a:	4b14      	ldr	r3, [pc, #80]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005c90:	4b12      	ldr	r3, [pc, #72]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005c96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c9a:	4910      	ldr	r1, [pc, #64]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005c9c:	4810      	ldr	r0, [pc, #64]	@ (8005ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005c9e:	f008 fa97 	bl	800e1d0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005ca2:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8005ca6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005caa:	2204      	movs	r2, #4
 8005cac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005cae:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cb0:	2210      	movs	r2, #16
 8005cb2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005cb4:	4b09      	ldr	r3, [pc, #36]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4a07      	ldr	r2, [pc, #28]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cbe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005cc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005cc4:	4905      	ldr	r1, [pc, #20]	@ (8005cdc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005cc6:	4806      	ldr	r0, [pc, #24]	@ (8005ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005cc8:	f008 fa82 	bl	800e1d0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4804      	ldr	r0, [pc, #16]	@ (8005ce0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005cd0:	f008 fab3 	bl	800e23a <HAL_SDRAM_ProgramRefreshRate>
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000d84 	.word	0x20000d84
 8005ce0:	20000d34 	.word	0x20000d34

08005ce4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b090      	sub	sp, #64	@ 0x40
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005cee:	4b70      	ldr	r3, [pc, #448]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	4a6f      	ldr	r2, [pc, #444]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	6393      	str	r3, [r2, #56]	@ 0x38
 8005cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8005d06:	4b6a      	ldr	r3, [pc, #424]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	4a69      	ldr	r2, [pc, #420]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d12:	4b67      	ldr	r3, [pc, #412]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d1e:	4b64      	ldr	r3, [pc, #400]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d22:	4a63      	ldr	r2, [pc, #396]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d24:	f043 0304 	orr.w	r3, r3, #4
 8005d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d2a:	4b61      	ldr	r3, [pc, #388]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	623b      	str	r3, [r7, #32]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d36:	4b5e      	ldr	r3, [pc, #376]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3a:	4a5d      	ldr	r2, [pc, #372]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d3c:	f043 0308 	orr.w	r3, r3, #8
 8005d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d42:	4b5b      	ldr	r3, [pc, #364]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d46:	f003 0308 	and.w	r3, r3, #8
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005d4e:	4b58      	ldr	r3, [pc, #352]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d52:	4a57      	ldr	r2, [pc, #348]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d54:	f043 0310 	orr.w	r3, r3, #16
 8005d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d5a:	4b55      	ldr	r3, [pc, #340]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005d66:	4b52      	ldr	r3, [pc, #328]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d6a:	4a51      	ldr	r2, [pc, #324]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d6c:	f043 0320 	orr.w	r3, r3, #32
 8005d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d72:	4b4f      	ldr	r3, [pc, #316]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d82:	4a4b      	ldr	r2, [pc, #300]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d8a:	4b49      	ldr	r3, [pc, #292]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005d96:	4b46      	ldr	r3, [pc, #280]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9a:	4a45      	ldr	r2, [pc, #276]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005da2:	4b43      	ldr	r3, [pc, #268]	@ (8005eb0 <BSP_SDRAM_MspInit+0x1cc>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005dae:	2302      	movs	r3, #2
 8005db0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005db2:	2301      	movs	r3, #1
 8005db4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8005db6:	2302      	movs	r3, #2
 8005db8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005dba:	230c      	movs	r3, #12
 8005dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8005dbe:	2308      	movs	r3, #8
 8005dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8005dc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	483a      	ldr	r0, [pc, #232]	@ (8005eb4 <BSP_SDRAM_MspInit+0x1d0>)
 8005dca:	f003 fdb9 	bl	8009940 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8005dce:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005dd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4837      	ldr	r0, [pc, #220]	@ (8005eb8 <BSP_SDRAM_MspInit+0x1d4>)
 8005ddc:	f003 fdb0 	bl	8009940 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005de0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8005de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005de6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005dea:	4619      	mov	r1, r3
 8005dec:	4833      	ldr	r0, [pc, #204]	@ (8005ebc <BSP_SDRAM_MspInit+0x1d8>)
 8005dee:	f003 fda7 	bl	8009940 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005df2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8005df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005df8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4830      	ldr	r0, [pc, #192]	@ (8005ec0 <BSP_SDRAM_MspInit+0x1dc>)
 8005e00:	f003 fd9e 	bl	8009940 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8005e04:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005e0e:	4619      	mov	r1, r3
 8005e10:	482c      	ldr	r0, [pc, #176]	@ (8005ec4 <BSP_SDRAM_MspInit+0x1e0>)
 8005e12:	f003 fd95 	bl	8009940 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8005e16:	2328      	movs	r3, #40	@ 0x28
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005e1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4829      	ldr	r0, [pc, #164]	@ (8005ec8 <BSP_SDRAM_MspInit+0x1e4>)
 8005e22:	f003 fd8d 	bl	8009940 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8005e26:	4b29      	ldr	r3, [pc, #164]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8005e2c:	4b27      	ldr	r3, [pc, #156]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e2e:	2280      	movs	r2, #128	@ 0x80
 8005e30:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8005e32:	4b26      	ldr	r3, [pc, #152]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e38:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8005e3a:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e40:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e42:	4b22      	ldr	r3, [pc, #136]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e48:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8005e4a:	4b20      	ldr	r3, [pc, #128]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005e50:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8005e52:	4b1e      	ldr	r3, [pc, #120]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8005e58:	4b1c      	ldr	r3, [pc, #112]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005e5e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005e66:	4b19      	ldr	r3, [pc, #100]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e68:	2203      	movs	r2, #3
 8005e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005e6c:	4b17      	ldr	r3, [pc, #92]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8005e72:	4b16      	ldr	r3, [pc, #88]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e7a:	4a15      	ldr	r2, [pc, #84]	@ (8005ed0 <BSP_SDRAM_MspInit+0x1ec>)
 8005e7c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a12      	ldr	r2, [pc, #72]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e82:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e84:	4a11      	ldr	r2, [pc, #68]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005e8a:	4810      	ldr	r0, [pc, #64]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e8c:	f002 ff76 	bl	8008d7c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005e90:	480e      	ldr	r0, [pc, #56]	@ (8005ecc <BSP_SDRAM_MspInit+0x1e8>)
 8005e92:	f002 fec5 	bl	8008c20 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8005e96:	2200      	movs	r2, #0
 8005e98:	210f      	movs	r1, #15
 8005e9a:	2038      	movs	r0, #56	@ 0x38
 8005e9c:	f002 fe96 	bl	8008bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005ea0:	2038      	movs	r0, #56	@ 0x38
 8005ea2:	f002 feaf 	bl	8008c04 <HAL_NVIC_EnableIRQ>
}
 8005ea6:	bf00      	nop
 8005ea8:	3740      	adds	r7, #64	@ 0x40
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40023800 	.word	0x40023800
 8005eb4:	40020800 	.word	0x40020800
 8005eb8:	40020c00 	.word	0x40020c00
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	40021400 	.word	0x40021400
 8005ec4:	40021800 	.word	0x40021800
 8005ec8:	40021c00 	.word	0x40021c00
 8005ecc:	20000d94 	.word	0x20000d94
 8005ed0:	40026410 	.word	0x40026410

08005ed4 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	460a      	mov	r2, r1
 8005ede:	80fb      	strh	r3, [r7, #6]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8005ee8:	4a14      	ldr	r2, [pc, #80]	@ (8005f3c <BSP_TS_Init+0x68>)
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8005eee:	4a14      	ldr	r2, [pc, #80]	@ (8005f40 <BSP_TS_Init+0x6c>)
 8005ef0:	88bb      	ldrh	r3, [r7, #4]
 8005ef2:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8005ef4:	4b13      	ldr	r3, [pc, #76]	@ (8005f44 <BSP_TS_Init+0x70>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2070      	movs	r0, #112	@ 0x70
 8005efa:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8005efc:	4b11      	ldr	r3, [pc, #68]	@ (8005f44 <BSP_TS_Init+0x70>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2070      	movs	r0, #112	@ 0x70
 8005f02:	4798      	blx	r3
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b51      	cmp	r3, #81	@ 0x51
 8005f08:	d110      	bne.n	8005f2c <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8005f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f48 <BSP_TS_Init+0x74>)
 8005f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f44 <BSP_TS_Init+0x70>)
 8005f0e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8005f10:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <BSP_TS_Init+0x78>)
 8005f12:	2270      	movs	r2, #112	@ 0x70
 8005f14:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8005f16:	4b0e      	ldr	r3, [pc, #56]	@ (8005f50 <BSP_TS_Init+0x7c>)
 8005f18:	2208      	movs	r2, #8
 8005f1a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <BSP_TS_Init+0x74>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4a0a      	ldr	r2, [pc, #40]	@ (8005f4c <BSP_TS_Init+0x78>)
 8005f24:	7812      	ldrb	r2, [r2, #0]
 8005f26:	4610      	mov	r0, r2
 8005f28:	4798      	blx	r3
 8005f2a:	e001      	b.n	8005f30 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000df8 	.word	0x20000df8
 8005f40:	20000dfa 	.word	0x20000dfa
 8005f44:	20000000 	.word	0x20000000
 8005f48:	20000df4 	.word	0x20000df4
 8005f4c:	20000dfd 	.word	0x20000dfd
 8005f50:	20000dfc 	.word	0x20000dfc

08005f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f5a:	4b11      	ldr	r3, [pc, #68]	@ (8005fa0 <HAL_MspInit+0x4c>)
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f5e:	4a10      	ldr	r2, [pc, #64]	@ (8005fa0 <HAL_MspInit+0x4c>)
 8005f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f66:	4b0e      	ldr	r3, [pc, #56]	@ (8005fa0 <HAL_MspInit+0x4c>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f6e:	607b      	str	r3, [r7, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f72:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa0 <HAL_MspInit+0x4c>)
 8005f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f76:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa0 <HAL_MspInit+0x4c>)
 8005f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f7e:	4b08      	ldr	r3, [pc, #32]	@ (8005fa0 <HAL_MspInit+0x4c>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	210f      	movs	r1, #15
 8005f8e:	f06f 0001 	mvn.w	r0, #1
 8005f92:	f002 fe1b 	bl	8008bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40023800 	.word	0x40023800

08005fa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08c      	sub	sp, #48	@ 0x30
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fac:	f107 031c 	add.w	r3, r7, #28
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a36      	ldr	r2, [pc, #216]	@ (800609c <HAL_ADC_MspInit+0xf8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d124      	bne.n	8006010 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005fc6:	4b36      	ldr	r3, [pc, #216]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fca:	4a35      	ldr	r2, [pc, #212]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8005fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fd2:	4b33      	ldr	r3, [pc, #204]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fde:	4b30      	ldr	r3, [pc, #192]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fea:	4b2d      	ldr	r3, [pc, #180]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8005fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	617b      	str	r3, [r7, #20]
 8005ff4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006002:	f107 031c 	add.w	r3, r7, #28
 8006006:	4619      	mov	r1, r3
 8006008:	4826      	ldr	r0, [pc, #152]	@ (80060a4 <HAL_ADC_MspInit+0x100>)
 800600a:	f003 fc99 	bl	8009940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800600e:	e041      	b.n	8006094 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a24      	ldr	r2, [pc, #144]	@ (80060a8 <HAL_ADC_MspInit+0x104>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d13c      	bne.n	8006094 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800601a:	4b21      	ldr	r3, [pc, #132]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 800601c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601e:	4a20      	ldr	r2, [pc, #128]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8006020:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006024:	6453      	str	r3, [r2, #68]	@ 0x44
 8006026:	4b1e      	ldr	r3, [pc, #120]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8006028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800602e:	613b      	str	r3, [r7, #16]
 8006030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006032:	4b1b      	ldr	r3, [pc, #108]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006036:	4a1a      	ldr	r2, [pc, #104]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8006038:	f043 0320 	orr.w	r3, r3, #32
 800603c:	6313      	str	r3, [r2, #48]	@ 0x30
 800603e:	4b18      	ldr	r3, [pc, #96]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	4a14      	ldr	r2, [pc, #80]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8006050:	f043 0301 	orr.w	r3, r3, #1
 8006054:	6313      	str	r3, [r2, #48]	@ 0x30
 8006056:	4b12      	ldr	r3, [pc, #72]	@ (80060a0 <HAL_ADC_MspInit+0xfc>)
 8006058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8006062:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8006066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006068:	2303      	movs	r3, #3
 800606a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606c:	2300      	movs	r3, #0
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006070:	f107 031c 	add.w	r3, r7, #28
 8006074:	4619      	mov	r1, r3
 8006076:	480d      	ldr	r0, [pc, #52]	@ (80060ac <HAL_ADC_MspInit+0x108>)
 8006078:	f003 fc62 	bl	8009940 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800607c:	2301      	movs	r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006080:	2303      	movs	r3, #3
 8006082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006084:	2300      	movs	r3, #0
 8006086:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006088:	f107 031c 	add.w	r3, r7, #28
 800608c:	4619      	mov	r1, r3
 800608e:	4805      	ldr	r0, [pc, #20]	@ (80060a4 <HAL_ADC_MspInit+0x100>)
 8006090:	f003 fc56 	bl	8009940 <HAL_GPIO_Init>
}
 8006094:	bf00      	nop
 8006096:	3730      	adds	r7, #48	@ 0x30
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40012000 	.word	0x40012000
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40020000 	.word	0x40020000
 80060a8:	40012200 	.word	0x40012200
 80060ac:	40021400 	.word	0x40021400

080060b0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a0a      	ldr	r2, [pc, #40]	@ (80060e8 <HAL_DMA2D_MspInit+0x38>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d10b      	bne.n	80060da <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80060c2:	4b0a      	ldr	r3, [pc, #40]	@ (80060ec <HAL_DMA2D_MspInit+0x3c>)
 80060c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c6:	4a09      	ldr	r2, [pc, #36]	@ (80060ec <HAL_DMA2D_MspInit+0x3c>)
 80060c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80060cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80060ce:	4b07      	ldr	r3, [pc, #28]	@ (80060ec <HAL_DMA2D_MspInit+0x3c>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	4002b000 	.word	0x4002b000
 80060ec:	40023800 	.word	0x40023800

080060f0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b08e      	sub	sp, #56	@ 0x38
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	605a      	str	r2, [r3, #4]
 8006102:	609a      	str	r2, [r3, #8]
 8006104:	60da      	str	r2, [r3, #12]
 8006106:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a55      	ldr	r2, [pc, #340]	@ (8006264 <HAL_LTDC_MspInit+0x174>)
 800610e:	4293      	cmp	r3, r2
 8006110:	f040 80a3 	bne.w	800625a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006114:	4b54      	ldr	r3, [pc, #336]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006118:	4a53      	ldr	r2, [pc, #332]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800611a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800611e:	6453      	str	r3, [r2, #68]	@ 0x44
 8006120:	4b51      	ldr	r3, [pc, #324]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006124:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800612c:	4b4e      	ldr	r3, [pc, #312]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800612e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006130:	4a4d      	ldr	r2, [pc, #308]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006132:	f043 0310 	orr.w	r3, r3, #16
 8006136:	6313      	str	r3, [r2, #48]	@ 0x30
 8006138:	4b4b      	ldr	r3, [pc, #300]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800613a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006144:	4b48      	ldr	r3, [pc, #288]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006148:	4a47      	ldr	r2, [pc, #284]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800614a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800614e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006150:	4b45      	ldr	r3, [pc, #276]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800615c:	4b42      	ldr	r3, [pc, #264]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800615e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006160:	4a41      	ldr	r2, [pc, #260]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006162:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006166:	6313      	str	r3, [r2, #48]	@ 0x30
 8006168:	4b3f      	ldr	r3, [pc, #252]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800616a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800616c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006174:	4b3c      	ldr	r3, [pc, #240]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	4a3b      	ldr	r2, [pc, #236]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800617a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800617e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006180:	4b39      	ldr	r3, [pc, #228]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800618c:	4b36      	ldr	r3, [pc, #216]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	4a35      	ldr	r2, [pc, #212]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 8006192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006196:	6313      	str	r3, [r2, #48]	@ 0x30
 8006198:	4b33      	ldr	r3, [pc, #204]	@ (8006268 <HAL_LTDC_MspInit+0x178>)
 800619a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80061a4:	2310      	movs	r3, #16
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a8:	2302      	movs	r3, #2
 80061aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b0:	2300      	movs	r3, #0
 80061b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80061b4:	230e      	movs	r3, #14
 80061b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80061b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061bc:	4619      	mov	r1, r3
 80061be:	482b      	ldr	r0, [pc, #172]	@ (800626c <HAL_LTDC_MspInit+0x17c>)
 80061c0:	f003 fbbe 	bl	8009940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80061c4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80061c8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ca:	2302      	movs	r3, #2
 80061cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061d2:	2300      	movs	r3, #0
 80061d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80061d6:	230e      	movs	r3, #14
 80061d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80061da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061de:	4619      	mov	r1, r3
 80061e0:	4823      	ldr	r0, [pc, #140]	@ (8006270 <HAL_LTDC_MspInit+0x180>)
 80061e2:	f003 fbad 	bl	8009940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80061e6:	23f7      	movs	r3, #247	@ 0xf7
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ea:	2302      	movs	r3, #2
 80061ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f2:	2300      	movs	r3, #0
 80061f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80061f6:	230e      	movs	r3, #14
 80061f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80061fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061fe:	4619      	mov	r1, r3
 8006200:	481c      	ldr	r0, [pc, #112]	@ (8006274 <HAL_LTDC_MspInit+0x184>)
 8006202:	f003 fb9d 	bl	8009940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8006206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620c:	2302      	movs	r3, #2
 800620e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006210:	2300      	movs	r3, #0
 8006212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006214:	2300      	movs	r3, #0
 8006216:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006218:	2309      	movs	r3, #9
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800621c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006220:	4619      	mov	r1, r3
 8006222:	4815      	ldr	r0, [pc, #84]	@ (8006278 <HAL_LTDC_MspInit+0x188>)
 8006224:	f003 fb8c 	bl	8009940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8006228:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800622c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622e:	2302      	movs	r3, #2
 8006230:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006232:	2300      	movs	r3, #0
 8006234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006236:	2300      	movs	r3, #0
 8006238:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800623a:	230e      	movs	r3, #14
 800623c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800623e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006242:	4619      	mov	r1, r3
 8006244:	480d      	ldr	r0, [pc, #52]	@ (800627c <HAL_LTDC_MspInit+0x18c>)
 8006246:	f003 fb7b 	bl	8009940 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800624a:	2200      	movs	r2, #0
 800624c:	2105      	movs	r1, #5
 800624e:	2058      	movs	r0, #88	@ 0x58
 8006250:	f002 fcbc 	bl	8008bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8006254:	2058      	movs	r0, #88	@ 0x58
 8006256:	f002 fcd5 	bl	8008c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800625a:	bf00      	nop
 800625c:	3738      	adds	r7, #56	@ 0x38
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40016800 	.word	0x40016800
 8006268:	40023800 	.word	0x40023800
 800626c:	40021000 	.word	0x40021000
 8006270:	40022400 	.word	0x40022400
 8006274:	40022800 	.word	0x40022800
 8006278:	40021800 	.word	0x40021800
 800627c:	40022000 	.word	0x40022000

08006280 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	@ 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006288:	f107 0314 	add.w	r3, r7, #20
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	605a      	str	r2, [r3, #4]
 8006292:	609a      	str	r2, [r3, #8]
 8006294:	60da      	str	r2, [r3, #12]
 8006296:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a65      	ldr	r2, [pc, #404]	@ (8006434 <HAL_SD_MspInit+0x1b4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	f040 80c3 	bne.w	800642a <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80062a4:	4b64      	ldr	r3, [pc, #400]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a8:	4a63      	ldr	r2, [pc, #396]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80062b0:	4b61      	ldr	r3, [pc, #388]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	4a5d      	ldr	r2, [pc, #372]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062c2:	f043 0304 	orr.w	r3, r3, #4
 80062c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80062c8:	4b5b      	ldr	r3, [pc, #364]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80062d4:	4b58      	ldr	r3, [pc, #352]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d8:	4a57      	ldr	r2, [pc, #348]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062da:	f043 0308 	orr.w	r3, r3, #8
 80062de:	6313      	str	r3, [r2, #48]	@ 0x30
 80062e0:	4b55      	ldr	r3, [pc, #340]	@ (8006438 <HAL_SD_MspInit+0x1b8>)
 80062e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e4:	f003 0308 	and.w	r3, r3, #8
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80062ec:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80062f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f2:	2302      	movs	r3, #2
 80062f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062fa:	2303      	movs	r3, #3
 80062fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80062fe:	230c      	movs	r3, #12
 8006300:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006302:	f107 0314 	add.w	r3, r7, #20
 8006306:	4619      	mov	r1, r3
 8006308:	484c      	ldr	r0, [pc, #304]	@ (800643c <HAL_SD_MspInit+0x1bc>)
 800630a:	f003 fb19 	bl	8009940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 800630e:	2304      	movs	r3, #4
 8006310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006312:	2302      	movs	r3, #2
 8006314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800631a:	2303      	movs	r3, #3
 800631c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800631e:	230c      	movs	r3, #12
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8006322:	f107 0314 	add.w	r3, r7, #20
 8006326:	4619      	mov	r1, r3
 8006328:	4845      	ldr	r0, [pc, #276]	@ (8006440 <HAL_SD_MspInit+0x1c0>)
 800632a:	f003 fb09 	bl	8009940 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800632e:	4b45      	ldr	r3, [pc, #276]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 8006330:	4a45      	ldr	r2, [pc, #276]	@ (8006448 <HAL_SD_MspInit+0x1c8>)
 8006332:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8006334:	4b43      	ldr	r3, [pc, #268]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 8006336:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800633a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800633c:	4b41      	ldr	r3, [pc, #260]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006342:	4b40      	ldr	r3, [pc, #256]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 8006344:	2200      	movs	r2, #0
 8006346:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006348:	4b3e      	ldr	r3, [pc, #248]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 800634a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800634e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006350:	4b3c      	ldr	r3, [pc, #240]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 8006352:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006356:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006358:	4b3a      	ldr	r3, [pc, #232]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 800635a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800635e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8006360:	4b38      	ldr	r3, [pc, #224]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 8006362:	2220      	movs	r2, #32
 8006364:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006366:	4b37      	ldr	r3, [pc, #220]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 8006368:	2200      	movs	r2, #0
 800636a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800636c:	4b35      	ldr	r3, [pc, #212]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 800636e:	2204      	movs	r2, #4
 8006370:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006372:	4b34      	ldr	r3, [pc, #208]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 8006374:	2203      	movs	r2, #3
 8006376:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006378:	4b32      	ldr	r3, [pc, #200]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 800637a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006380:	4b30      	ldr	r3, [pc, #192]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 8006382:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006386:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8006388:	482e      	ldr	r0, [pc, #184]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 800638a:	f002 fc49 	bl	8008c20 <HAL_DMA_Init>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8006394:	f7fe f8c4 	bl	8004520 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2a      	ldr	r2, [pc, #168]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 800639c:	641a      	str	r2, [r3, #64]	@ 0x40
 800639e:	4a29      	ldr	r2, [pc, #164]	@ (8006444 <HAL_SD_MspInit+0x1c4>)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80063a4:	4b29      	ldr	r3, [pc, #164]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006450 <HAL_SD_MspInit+0x1d0>)
 80063a8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80063aa:	4b28      	ldr	r3, [pc, #160]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80063b0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063b2:	4b26      	ldr	r3, [pc, #152]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063b4:	2240      	movs	r2, #64	@ 0x40
 80063b6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063b8:	4b24      	ldr	r3, [pc, #144]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80063be:	4b23      	ldr	r3, [pc, #140]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80063c4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80063c6:	4b21      	ldr	r3, [pc, #132]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80063cc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80063ce:	4b1f      	ldr	r3, [pc, #124]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80063d4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80063d6:	4b1d      	ldr	r3, [pc, #116]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063d8:	2220      	movs	r2, #32
 80063da:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80063dc:	4b1b      	ldr	r3, [pc, #108]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063de:	2200      	movs	r2, #0
 80063e0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80063e2:	4b1a      	ldr	r3, [pc, #104]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063e4:	2204      	movs	r2, #4
 80063e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80063e8:	4b18      	ldr	r3, [pc, #96]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063ea:	2203      	movs	r2, #3
 80063ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80063ee:	4b17      	ldr	r3, [pc, #92]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80063f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80063f6:	4b15      	ldr	r3, [pc, #84]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 80063f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80063fc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80063fe:	4813      	ldr	r0, [pc, #76]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 8006400:	f002 fc0e 	bl	8008c20 <HAL_DMA_Init>
 8006404:	4603      	mov	r3, r0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d001      	beq.n	800640e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800640a:	f7fe f889 	bl	8004520 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a0e      	ldr	r2, [pc, #56]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 8006412:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006414:	4a0d      	ldr	r2, [pc, #52]	@ (800644c <HAL_SD_MspInit+0x1cc>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800641a:	2200      	movs	r2, #0
 800641c:	2105      	movs	r1, #5
 800641e:	2031      	movs	r0, #49	@ 0x31
 8006420:	f002 fbd4 	bl	8008bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8006424:	2031      	movs	r0, #49	@ 0x31
 8006426:	f002 fbed 	bl	8008c04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800642a:	bf00      	nop
 800642c:	3728      	adds	r7, #40	@ 0x28
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40012c00 	.word	0x40012c00
 8006438:	40023800 	.word	0x40023800
 800643c:	40020800 	.word	0x40020800
 8006440:	40020c00 	.word	0x40020c00
 8006444:	20000740 	.word	0x20000740
 8006448:	40026458 	.word	0x40026458
 800644c:	200007a0 	.word	0x200007a0
 8006450:	400264a0 	.word	0x400264a0

08006454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b0ac      	sub	sp, #176	@ 0xb0
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800645c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	609a      	str	r2, [r3, #8]
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800646c:	f107 0318 	add.w	r3, r7, #24
 8006470:	2284      	movs	r2, #132	@ 0x84
 8006472:	2100      	movs	r1, #0
 8006474:	4618      	mov	r0, r3
 8006476:	f00d f9f3 	bl	8013860 <memset>
  if(huart->Instance==USART1)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a32      	ldr	r2, [pc, #200]	@ (8006548 <HAL_UART_MspInit+0xf4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d15c      	bne.n	800653e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006484:	2340      	movs	r3, #64	@ 0x40
 8006486:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006488:	2300      	movs	r3, #0
 800648a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800648c:	f107 0318 	add.w	r3, r7, #24
 8006490:	4618      	mov	r0, r3
 8006492:	f005 fbb3 	bl	800bbfc <HAL_RCCEx_PeriphCLKConfig>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800649c:	f7fe f840 	bl	8004520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80064a0:	4b2a      	ldr	r3, [pc, #168]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a4:	4a29      	ldr	r2, [pc, #164]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064a6:	f043 0310 	orr.w	r3, r3, #16
 80064aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80064ac:	4b27      	ldr	r3, [pc, #156]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064b8:	4b24      	ldr	r3, [pc, #144]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064bc:	4a23      	ldr	r2, [pc, #140]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064be:	f043 0302 	orr.w	r3, r3, #2
 80064c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80064c4:	4b21      	ldr	r3, [pc, #132]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d0:	4b1e      	ldr	r3, [pc, #120]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d4:	4a1d      	ldr	r2, [pc, #116]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	6313      	str	r3, [r2, #48]	@ 0x30
 80064dc:	4b1b      	ldr	r3, [pc, #108]	@ (800654c <HAL_UART_MspInit+0xf8>)
 80064de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80064e8:	2380      	movs	r3, #128	@ 0x80
 80064ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ee:	2302      	movs	r3, #2
 80064f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006500:	2307      	movs	r3, #7
 8006502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8006506:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800650a:	4619      	mov	r1, r3
 800650c:	4810      	ldr	r0, [pc, #64]	@ (8006550 <HAL_UART_MspInit+0xfc>)
 800650e:	f003 fa17 	bl	8009940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8006512:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006516:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800651a:	2302      	movs	r3, #2
 800651c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006526:	2300      	movs	r3, #0
 8006528:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800652c:	2307      	movs	r3, #7
 800652e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8006532:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006536:	4619      	mov	r1, r3
 8006538:	4806      	ldr	r0, [pc, #24]	@ (8006554 <HAL_UART_MspInit+0x100>)
 800653a:	f003 fa01 	bl	8009940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800653e:	bf00      	nop
 8006540:	37b0      	adds	r7, #176	@ 0xb0
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	40011000 	.word	0x40011000
 800654c:	40023800 	.word	0x40023800
 8006550:	40020400 	.word	0x40020400
 8006554:	40020000 	.word	0x40020000

08006558 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	60da      	str	r2, [r3, #12]
 800656a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800656c:	4b42      	ldr	r3, [pc, #264]	@ (8006678 <HAL_FMC_MspInit+0x120>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d17c      	bne.n	800666e <HAL_FMC_MspInit+0x116>
    return;
  }
  FMC_Initialized = 1;
 8006574:	4b40      	ldr	r3, [pc, #256]	@ (8006678 <HAL_FMC_MspInit+0x120>)
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800657a:	4b40      	ldr	r3, [pc, #256]	@ (800667c <HAL_FMC_MspInit+0x124>)
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	4a3f      	ldr	r2, [pc, #252]	@ (800667c <HAL_FMC_MspInit+0x124>)
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	6393      	str	r3, [r2, #56]	@ 0x38
 8006586:	4b3d      	ldr	r3, [pc, #244]	@ (800667c <HAL_FMC_MspInit+0x124>)
 8006588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8006592:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8006596:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006598:	2302      	movs	r3, #2
 800659a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065a0:	2303      	movs	r3, #3
 80065a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80065a4:	230c      	movs	r3, #12
 80065a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065a8:	1d3b      	adds	r3, r7, #4
 80065aa:	4619      	mov	r1, r3
 80065ac:	4834      	ldr	r0, [pc, #208]	@ (8006680 <HAL_FMC_MspInit+0x128>)
 80065ae:	f003 f9c7 	bl	8009940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80065b2:	2360      	movs	r3, #96	@ 0x60
 80065b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b6:	2302      	movs	r3, #2
 80065b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065be:	2303      	movs	r3, #3
 80065c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80065c2:	230c      	movs	r3, #12
 80065c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	482e      	ldr	r0, [pc, #184]	@ (8006684 <HAL_FMC_MspInit+0x12c>)
 80065cc:	f003 f9b8 	bl	8009940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80065d0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80065d4:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d6:	2302      	movs	r3, #2
 80065d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065de:	2303      	movs	r3, #3
 80065e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80065e2:	230c      	movs	r3, #12
 80065e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80065e6:	1d3b      	adds	r3, r7, #4
 80065e8:	4619      	mov	r1, r3
 80065ea:	4827      	ldr	r0, [pc, #156]	@ (8006688 <HAL_FMC_MspInit+0x130>)
 80065ec:	f003 f9a8 	bl	8009940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80065f0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80065f4:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065f6:	2302      	movs	r3, #2
 80065f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065fe:	2303      	movs	r3, #3
 8006600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006602:	230c      	movs	r3, #12
 8006604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006606:	1d3b      	adds	r3, r7, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4820      	ldr	r0, [pc, #128]	@ (800668c <HAL_FMC_MspInit+0x134>)
 800660c:	f003 f998 	bl	8009940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8006610:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8006614:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006616:	2302      	movs	r3, #2
 8006618:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661a:	2300      	movs	r3, #0
 800661c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800661e:	2303      	movs	r3, #3
 8006620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006622:	230c      	movs	r3, #12
 8006624:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006626:	1d3b      	adds	r3, r7, #4
 8006628:	4619      	mov	r1, r3
 800662a:	4819      	ldr	r0, [pc, #100]	@ (8006690 <HAL_FMC_MspInit+0x138>)
 800662c:	f003 f988 	bl	8009940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8006630:	2328      	movs	r3, #40	@ 0x28
 8006632:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006634:	2302      	movs	r3, #2
 8006636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006638:	2300      	movs	r3, #0
 800663a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800663c:	2303      	movs	r3, #3
 800663e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006640:	230c      	movs	r3, #12
 8006642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006644:	1d3b      	adds	r3, r7, #4
 8006646:	4619      	mov	r1, r3
 8006648:	4812      	ldr	r0, [pc, #72]	@ (8006694 <HAL_FMC_MspInit+0x13c>)
 800664a:	f003 f979 	bl	8009940 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800664e:	2308      	movs	r3, #8
 8006650:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006652:	2302      	movs	r3, #2
 8006654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800665a:	2303      	movs	r3, #3
 800665c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800665e:	230c      	movs	r3, #12
 8006660:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	4619      	mov	r1, r3
 8006666:	480c      	ldr	r0, [pc, #48]	@ (8006698 <HAL_FMC_MspInit+0x140>)
 8006668:	f003 f96a 	bl	8009940 <HAL_GPIO_Init>
 800666c:	e000      	b.n	8006670 <HAL_FMC_MspInit+0x118>
    return;
 800666e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000e00 	.word	0x20000e00
 800667c:	40023800 	.word	0x40023800
 8006680:	40021000 	.word	0x40021000
 8006684:	40020400 	.word	0x40020400
 8006688:	40021800 	.word	0x40021800
 800668c:	40020c00 	.word	0x40020c00
 8006690:	40021400 	.word	0x40021400
 8006694:	40021c00 	.word	0x40021c00
 8006698:	40020800 	.word	0x40020800

0800669c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80066a4:	f7ff ff58 	bl	8006558 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80066a8:	bf00      	nop
 80066aa:	3708      	adds	r7, #8
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08a      	sub	sp, #40	@ 0x28
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a61      	ldr	r2, [pc, #388]	@ (8006844 <HAL_SAI_MspInit+0x194>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d15b      	bne.n	800677a <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80066c2:	4b61      	ldr	r3, [pc, #388]	@ (8006848 <HAL_SAI_MspInit+0x198>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80066ca:	4b60      	ldr	r3, [pc, #384]	@ (800684c <HAL_SAI_MspInit+0x19c>)
 80066cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ce:	4a5f      	ldr	r2, [pc, #380]	@ (800684c <HAL_SAI_MspInit+0x19c>)
 80066d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80066d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80066d6:	4b5d      	ldr	r3, [pc, #372]	@ (800684c <HAL_SAI_MspInit+0x19c>)
 80066d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066de:	613b      	str	r3, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80066e2:	4b59      	ldr	r3, [pc, #356]	@ (8006848 <HAL_SAI_MspInit+0x198>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3301      	adds	r3, #1
 80066e8:	4a57      	ldr	r2, [pc, #348]	@ (8006848 <HAL_SAI_MspInit+0x198>)
 80066ea:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80066ec:	23f0      	movs	r3, #240	@ 0xf0
 80066ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f0:	2302      	movs	r3, #2
 80066f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066f8:	2300      	movs	r3, #0
 80066fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80066fc:	230a      	movs	r3, #10
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006700:	f107 0314 	add.w	r3, r7, #20
 8006704:	4619      	mov	r1, r3
 8006706:	4852      	ldr	r0, [pc, #328]	@ (8006850 <HAL_SAI_MspInit+0x1a0>)
 8006708:	f003 f91a 	bl	8009940 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 800670c:	4b51      	ldr	r3, [pc, #324]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 800670e:	4a52      	ldr	r2, [pc, #328]	@ (8006858 <HAL_SAI_MspInit+0x1a8>)
 8006710:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8006712:	4b50      	ldr	r3, [pc, #320]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006714:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8006718:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800671a:	4b4e      	ldr	r3, [pc, #312]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 800671c:	2240      	movs	r2, #64	@ 0x40
 800671e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006720:	4b4c      	ldr	r3, [pc, #304]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006722:	2200      	movs	r2, #0
 8006724:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8006726:	4b4b      	ldr	r3, [pc, #300]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006728:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800672c:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800672e:	4b49      	ldr	r3, [pc, #292]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006730:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006734:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006736:	4b47      	ldr	r3, [pc, #284]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800673c:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800673e:	4b45      	ldr	r3, [pc, #276]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006744:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8006746:	4b43      	ldr	r3, [pc, #268]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006748:	2200      	movs	r2, #0
 800674a:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800674c:	4b41      	ldr	r3, [pc, #260]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 800674e:	2200      	movs	r2, #0
 8006750:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8006752:	4840      	ldr	r0, [pc, #256]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006754:	f002 fa64 	bl	8008c20 <HAL_DMA_Init>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 800675e:	f7fd fedf 	bl	8004520 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a3b      	ldr	r2, [pc, #236]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006766:	671a      	str	r2, [r3, #112]	@ 0x70
 8006768:	4a3a      	ldr	r2, [pc, #232]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a38      	ldr	r2, [pc, #224]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006772:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006774:	4a37      	ldr	r2, [pc, #220]	@ (8006854 <HAL_SAI_MspInit+0x1a4>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a37      	ldr	r2, [pc, #220]	@ (800685c <HAL_SAI_MspInit+0x1ac>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d15b      	bne.n	800683c <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8006784:	4b30      	ldr	r3, [pc, #192]	@ (8006848 <HAL_SAI_MspInit+0x198>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10b      	bne.n	80067a4 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800678c:	4b2f      	ldr	r3, [pc, #188]	@ (800684c <HAL_SAI_MspInit+0x19c>)
 800678e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006790:	4a2e      	ldr	r2, [pc, #184]	@ (800684c <HAL_SAI_MspInit+0x19c>)
 8006792:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006796:	6453      	str	r3, [r2, #68]	@ 0x44
 8006798:	4b2c      	ldr	r3, [pc, #176]	@ (800684c <HAL_SAI_MspInit+0x19c>)
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80067a4:	4b28      	ldr	r3, [pc, #160]	@ (8006848 <HAL_SAI_MspInit+0x198>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	4a27      	ldr	r2, [pc, #156]	@ (8006848 <HAL_SAI_MspInit+0x198>)
 80067ac:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80067ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b4:	2302      	movs	r3, #2
 80067b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067bc:	2300      	movs	r3, #0
 80067be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80067c0:	230a      	movs	r3, #10
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80067c4:	f107 0314 	add.w	r3, r7, #20
 80067c8:	4619      	mov	r1, r3
 80067ca:	4825      	ldr	r0, [pc, #148]	@ (8006860 <HAL_SAI_MspInit+0x1b0>)
 80067cc:	f003 f8b8 	bl	8009940 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 80067d0:	4b24      	ldr	r3, [pc, #144]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 80067d2:	4a25      	ldr	r2, [pc, #148]	@ (8006868 <HAL_SAI_MspInit+0x1b8>)
 80067d4:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 80067d6:	4b23      	ldr	r3, [pc, #140]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 80067d8:	2200      	movs	r2, #0
 80067da:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067dc:	4b21      	ldr	r3, [pc, #132]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 80067de:	2200      	movs	r2, #0
 80067e0:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e2:	4b20      	ldr	r3, [pc, #128]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80067e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 80067ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067ee:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80067f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 80067f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067f6:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80067f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 80067fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80067fe:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8006800:	4b18      	ldr	r3, [pc, #96]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 8006802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006806:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8006808:	4b16      	ldr	r3, [pc, #88]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 800680a:	2200      	movs	r2, #0
 800680c:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800680e:	4b15      	ldr	r3, [pc, #84]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 8006810:	2200      	movs	r2, #0
 8006812:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8006814:	4813      	ldr	r0, [pc, #76]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 8006816:	f002 fa03 	bl	8008c20 <HAL_DMA_Init>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 8006820:	f7fd fe7e 	bl	8004520 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0f      	ldr	r2, [pc, #60]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 8006828:	671a      	str	r2, [r3, #112]	@ 0x70
 800682a:	4a0e      	ldr	r2, [pc, #56]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a0c      	ldr	r2, [pc, #48]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 8006834:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006836:	4a0b      	ldr	r2, [pc, #44]	@ (8006864 <HAL_SAI_MspInit+0x1b4>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800683c:	bf00      	nop
 800683e:	3728      	adds	r7, #40	@ 0x28
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40015c04 	.word	0x40015c04
 8006848:	20000e04 	.word	0x20000e04
 800684c:	40023800 	.word	0x40023800
 8006850:	40022000 	.word	0x40022000
 8006854:	200005fc 	.word	0x200005fc
 8006858:	40026470 	.word	0x40026470
 800685c:	40015c24 	.word	0x40015c24
 8006860:	40021800 	.word	0x40021800
 8006864:	2000065c 	.word	0x2000065c
 8006868:	400264b8 	.word	0x400264b8

0800686c <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a23      	ldr	r2, [pc, #140]	@ (8006908 <HAL_SAI_MspDeInit+0x9c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d11c      	bne.n	80068b8 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 800687e:	4b23      	ldr	r3, [pc, #140]	@ (800690c <HAL_SAI_MspDeInit+0xa0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3b01      	subs	r3, #1
 8006884:	4a21      	ldr	r2, [pc, #132]	@ (800690c <HAL_SAI_MspDeInit+0xa0>)
 8006886:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8006888:	4b20      	ldr	r3, [pc, #128]	@ (800690c <HAL_SAI_MspDeInit+0xa0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d105      	bne.n	800689c <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8006890:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <HAL_SAI_MspDeInit+0xa4>)
 8006892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006894:	4a1e      	ldr	r2, [pc, #120]	@ (8006910 <HAL_SAI_MspDeInit+0xa4>)
 8006896:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800689a:	6453      	str	r3, [r2, #68]	@ 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 800689c:	21f0      	movs	r1, #240	@ 0xf0
 800689e:	481d      	ldr	r0, [pc, #116]	@ (8006914 <HAL_SAI_MspDeInit+0xa8>)
 80068a0:	f003 f9fa 	bl	8009c98 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a8:	4618      	mov	r0, r3
 80068aa:	f002 fa67 	bl	8008d7c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068b2:	4618      	mov	r0, r3
 80068b4:	f002 fa62 	bl	8008d7c <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <HAL_SAI_MspDeInit+0xac>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d11d      	bne.n	80068fe <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 80068c2:	4b12      	ldr	r3, [pc, #72]	@ (800690c <HAL_SAI_MspDeInit+0xa0>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	4a10      	ldr	r2, [pc, #64]	@ (800690c <HAL_SAI_MspDeInit+0xa0>)
 80068ca:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 80068cc:	4b0f      	ldr	r3, [pc, #60]	@ (800690c <HAL_SAI_MspDeInit+0xa0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 80068d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006910 <HAL_SAI_MspDeInit+0xa4>)
 80068d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006910 <HAL_SAI_MspDeInit+0xa4>)
 80068da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80068de:	6453      	str	r3, [r2, #68]	@ 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 80068e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80068e4:	480d      	ldr	r0, [pc, #52]	@ (800691c <HAL_SAI_MspDeInit+0xb0>)
 80068e6:	f003 f9d7 	bl	8009c98 <HAL_GPIO_DeInit>

    /* SAI2 DMA Deinit */
    HAL_DMA_DeInit(hsai->hdmarx);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ee:	4618      	mov	r0, r3
 80068f0:	f002 fa44 	bl	8008d7c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068f8:	4618      	mov	r0, r3
 80068fa:	f002 fa3f 	bl	8008d7c <HAL_DMA_DeInit>
    }
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40015c04 	.word	0x40015c04
 800690c:	20000e04 	.word	0x20000e04
 8006910:	40023800 	.word	0x40023800
 8006914:	40022000 	.word	0x40022000
 8006918:	40015c24 	.word	0x40015c24
 800691c:	40021800 	.word	0x40021800

08006920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08e      	sub	sp, #56	@ 0x38
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006930:	4b33      	ldr	r3, [pc, #204]	@ (8006a00 <HAL_InitTick+0xe0>)
 8006932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006934:	4a32      	ldr	r2, [pc, #200]	@ (8006a00 <HAL_InitTick+0xe0>)
 8006936:	f043 0310 	orr.w	r3, r3, #16
 800693a:	6413      	str	r3, [r2, #64]	@ 0x40
 800693c:	4b30      	ldr	r3, [pc, #192]	@ (8006a00 <HAL_InitTick+0xe0>)
 800693e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006948:	f107 0210 	add.w	r2, r7, #16
 800694c:	f107 0314 	add.w	r3, r7, #20
 8006950:	4611      	mov	r1, r2
 8006952:	4618      	mov	r0, r3
 8006954:	f005 f920 	bl	800bb98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d103      	bne.n	800696a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006962:	f005 f8f1 	bl	800bb48 <HAL_RCC_GetPCLK1Freq>
 8006966:	6378      	str	r0, [r7, #52]	@ 0x34
 8006968:	e004      	b.n	8006974 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800696a:	f005 f8ed 	bl	800bb48 <HAL_RCC_GetPCLK1Freq>
 800696e:	4603      	mov	r3, r0
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006976:	4a23      	ldr	r2, [pc, #140]	@ (8006a04 <HAL_InitTick+0xe4>)
 8006978:	fba2 2303 	umull	r2, r3, r2, r3
 800697c:	0c9b      	lsrs	r3, r3, #18
 800697e:	3b01      	subs	r3, #1
 8006980:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006982:	4b21      	ldr	r3, [pc, #132]	@ (8006a08 <HAL_InitTick+0xe8>)
 8006984:	4a21      	ldr	r2, [pc, #132]	@ (8006a0c <HAL_InitTick+0xec>)
 8006986:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006988:	4b1f      	ldr	r3, [pc, #124]	@ (8006a08 <HAL_InitTick+0xe8>)
 800698a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800698e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006990:	4a1d      	ldr	r2, [pc, #116]	@ (8006a08 <HAL_InitTick+0xe8>)
 8006992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006994:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006996:	4b1c      	ldr	r3, [pc, #112]	@ (8006a08 <HAL_InitTick+0xe8>)
 8006998:	2200      	movs	r2, #0
 800699a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800699c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a08 <HAL_InitTick+0xe8>)
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069a2:	4b19      	ldr	r3, [pc, #100]	@ (8006a08 <HAL_InitTick+0xe8>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80069a8:	4817      	ldr	r0, [pc, #92]	@ (8006a08 <HAL_InitTick+0xe8>)
 80069aa:	f007 fc6e 	bl	800e28a <HAL_TIM_Base_Init>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80069b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d11b      	bne.n	80069f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80069bc:	4812      	ldr	r0, [pc, #72]	@ (8006a08 <HAL_InitTick+0xe8>)
 80069be:	f007 fcc5 	bl	800e34c <HAL_TIM_Base_Start_IT>
 80069c2:	4603      	mov	r3, r0
 80069c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80069c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d111      	bne.n	80069f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80069d0:	2036      	movs	r0, #54	@ 0x36
 80069d2:	f002 f917 	bl	8008c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b0f      	cmp	r3, #15
 80069da:	d808      	bhi.n	80069ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80069dc:	2200      	movs	r2, #0
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	2036      	movs	r0, #54	@ 0x36
 80069e2:	f002 f8f3 	bl	8008bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80069e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006a10 <HAL_InitTick+0xf0>)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e002      	b.n	80069f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80069f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3738      	adds	r7, #56	@ 0x38
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40023800 	.word	0x40023800
 8006a04:	431bde83 	.word	0x431bde83
 8006a08:	20000e08 	.word	0x20000e08
 8006a0c:	40001000 	.word	0x40001000
 8006a10:	20000080 	.word	0x20000080

08006a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a14:	b480      	push	{r7}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006a18:	bf00      	nop
 8006a1a:	e7fd      	b.n	8006a18 <NMI_Handler+0x4>

08006a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <HardFault_Handler+0x4>

08006a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a28:	bf00      	nop
 8006a2a:	e7fd      	b.n	8006a28 <MemManage_Handler+0x4>

08006a2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <BusFault_Handler+0x4>

08006a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <UsageFault_Handler+0x4>

08006a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a40:	bf00      	nop
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
	...

08006a4c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8006a50:	4802      	ldr	r0, [pc, #8]	@ (8006a5c <SDMMC1_IRQHandler+0x10>)
 8006a52:	f006 fce1 	bl	800d418 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8006a56:	bf00      	nop
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200006bc 	.word	0x200006bc

08006a60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006a64:	4802      	ldr	r0, [pc, #8]	@ (8006a70 <TIM6_DAC_IRQHandler+0x10>)
 8006a66:	f007 fce9 	bl	800e43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006a6a:	bf00      	nop
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20000e08 	.word	0x20000e08

08006a74 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8006a78:	4802      	ldr	r0, [pc, #8]	@ (8006a84 <DMA2_Stream3_IRQHandler+0x10>)
 8006a7a:	f002 fa5f 	bl	8008f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006a7e:	bf00      	nop
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20000740 	.word	0x20000740

08006a88 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8006a8c:	4802      	ldr	r0, [pc, #8]	@ (8006a98 <DMA2_Stream4_IRQHandler+0x10>)
 8006a8e:	f002 fa55 	bl	8008f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006a92:	bf00      	nop
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	200005fc 	.word	0x200005fc

08006a9c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8006aa0:	4802      	ldr	r0, [pc, #8]	@ (8006aac <DMA2_Stream6_IRQHandler+0x10>)
 8006aa2:	f002 fa4b 	bl	8008f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006aa6:	bf00      	nop
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200007a0 	.word	0x200007a0

08006ab0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8006ab4:	4802      	ldr	r0, [pc, #8]	@ (8006ac0 <DMA2_Stream7_IRQHandler+0x10>)
 8006ab6:	f002 fa41 	bl	8008f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8006aba:	bf00      	nop
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	2000065c 	.word	0x2000065c

08006ac4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8006ac8:	4802      	ldr	r0, [pc, #8]	@ (8006ad4 <LTDC_IRQHandler+0x10>)
 8006aca:	f004 f89d 	bl	800ac08 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8006ace:	bf00      	nop
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	2000044c 	.word	0x2000044c

08006ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ae0:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <_sbrk+0x5c>)
 8006ae2:	4b15      	ldr	r3, [pc, #84]	@ (8006b38 <_sbrk+0x60>)
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006aec:	4b13      	ldr	r3, [pc, #76]	@ (8006b3c <_sbrk+0x64>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006af4:	4b11      	ldr	r3, [pc, #68]	@ (8006b3c <_sbrk+0x64>)
 8006af6:	4a12      	ldr	r2, [pc, #72]	@ (8006b40 <_sbrk+0x68>)
 8006af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006afa:	4b10      	ldr	r3, [pc, #64]	@ (8006b3c <_sbrk+0x64>)
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4413      	add	r3, r2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d207      	bcs.n	8006b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006b08:	f00c fec2 	bl	8013890 <__errno>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	220c      	movs	r2, #12
 8006b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295
 8006b16:	e009      	b.n	8006b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006b18:	4b08      	ldr	r3, [pc, #32]	@ (8006b3c <_sbrk+0x64>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006b1e:	4b07      	ldr	r3, [pc, #28]	@ (8006b3c <_sbrk+0x64>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4413      	add	r3, r2
 8006b26:	4a05      	ldr	r2, [pc, #20]	@ (8006b3c <_sbrk+0x64>)
 8006b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20050000 	.word	0x20050000
 8006b38:	00000800 	.word	0x00000800
 8006b3c:	20000e54 	.word	0x20000e54
 8006b40:	200095b8 	.word	0x200095b8

08006b44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006b48:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <SystemInit+0x20>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4e:	4a05      	ldr	r2, [pc, #20]	@ (8006b64 <SystemInit+0x20>)
 8006b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	e000ed00 	.word	0xe000ed00

08006b68 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	607b      	str	r3, [r7, #4]
 8006b70:	4603      	mov	r3, r0
 8006b72:	81fb      	strh	r3, [r7, #14]
 8006b74:	460b      	mov	r3, r1
 8006b76:	81bb      	strh	r3, [r7, #12]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8006b80:	89bb      	ldrh	r3, [r7, #12]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8006b86:	89bb      	ldrh	r3, [r7, #12]
 8006b88:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b8c:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8006b92:	f7fd fe21 	bl	80047d8 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8006b96:	89fb      	ldrh	r3, [r7, #14]
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f001 fc35 	bl	8008410 <CODEC_IO_Write>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8006bb0:	89fb      	ldrh	r3, [r7, #14]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f640 0117 	movw	r1, #2071	@ 0x817
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f001 fc28 	bl	8008410 <CODEC_IO_Write>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8006bca:	89fb      	ldrh	r3, [r7, #14]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 fc1b 	bl	8008410 <CODEC_IO_Write>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	461a      	mov	r2, r3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	4413      	add	r3, r2
 8006be2:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8006be4:	89fb      	ldrh	r3, [r7, #14]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	226c      	movs	r2, #108	@ 0x6c
 8006bea:	2139      	movs	r1, #57	@ 0x39
 8006bec:	4618      	mov	r0, r3
 8006bee:	f001 fc0f 	bl	8008410 <CODEC_IO_Write>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8006bfc:	8afb      	ldrh	r3, [r7, #22]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00c      	beq.n	8006c1c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8006c02:	89fb      	ldrh	r3, [r7, #14]
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2213      	movs	r2, #19
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fc00 	bl	8008410 <CODEC_IO_Write>
 8006c10:	4603      	mov	r3, r0
 8006c12:	461a      	mov	r2, r3
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	4413      	add	r3, r2
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	e00b      	b.n	8006c34 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8006c1c:	89fb      	ldrh	r3, [r7, #14]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2203      	movs	r2, #3
 8006c22:	2101      	movs	r1, #1
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fbf3 	bl	8008410 <CODEC_IO_Write>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	4413      	add	r3, r2
 8006c32:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8006c34:	2032      	movs	r0, #50	@ 0x32
 8006c36:	f7fd fe37 	bl	80048a8 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8006c3a:	8b3b      	ldrh	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 815f 	beq.w	8006f00 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8006c42:	4bae      	ldr	r3, [pc, #696]	@ (8006efc <wm8994_Init+0x394>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8006c48:	8b3b      	ldrh	r3, [r7, #24]
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	f000 808c 	beq.w	8006d68 <wm8994_Init+0x200>
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	f300 8111 	bgt.w	8006e78 <wm8994_Init+0x310>
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d002      	beq.n	8006c60 <wm8994_Init+0xf8>
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d042      	beq.n	8006ce4 <wm8994_Init+0x17c>
 8006c5e:	e10b      	b.n	8006e78 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8006c60:	89fb      	ldrh	r3, [r7, #14]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8006c68:	2105      	movs	r1, #5
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fbd0 	bl	8008410 <CODEC_IO_Write>
 8006c70:	4603      	mov	r3, r0
 8006c72:	461a      	mov	r2, r3
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8006c7a:	89fb      	ldrh	r3, [r7, #14]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f240 6101 	movw	r1, #1537	@ 0x601
 8006c84:	4618      	mov	r0, r3
 8006c86:	f001 fbc3 	bl	8008410 <CODEC_IO_Write>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8006c94:	89fb      	ldrh	r3, [r7, #14]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f240 6102 	movw	r1, #1538	@ 0x602
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f001 fbb6 	bl	8008410 <CODEC_IO_Write>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	4413      	add	r3, r2
 8006cac:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006cae:	89fb      	ldrh	r3, [r7, #14]
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f240 6104 	movw	r1, #1540	@ 0x604
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f001 fba9 	bl	8008410 <CODEC_IO_Write>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8006cc8:	89fb      	ldrh	r3, [r7, #14]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f240 6105 	movw	r1, #1541	@ 0x605
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 fb9c 	bl	8008410 <CODEC_IO_Write>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	4413      	add	r3, r2
 8006ce0:	61fb      	str	r3, [r7, #28]
      break;
 8006ce2:	e110      	b.n	8006f06 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006ce4:	89fb      	ldrh	r3, [r7, #14]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f240 3203 	movw	r2, #771	@ 0x303
 8006cec:	2105      	movs	r1, #5
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fb8e 	bl	8008410 <CODEC_IO_Write>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006cfe:	89fb      	ldrh	r3, [r7, #14]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2201      	movs	r2, #1
 8006d04:	f240 6101 	movw	r1, #1537	@ 0x601
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 fb81 	bl	8008410 <CODEC_IO_Write>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006d18:	89fb      	ldrh	r3, [r7, #14]
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f240 6102 	movw	r1, #1538	@ 0x602
 8006d22:	4618      	mov	r0, r3
 8006d24:	f001 fb74 	bl	8008410 <CODEC_IO_Write>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006d32:	89fb      	ldrh	r3, [r7, #14]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2200      	movs	r2, #0
 8006d38:	f240 6104 	movw	r1, #1540	@ 0x604
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f001 fb67 	bl	8008410 <CODEC_IO_Write>
 8006d42:	4603      	mov	r3, r0
 8006d44:	461a      	mov	r2, r3
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4413      	add	r3, r2
 8006d4a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006d4c:	89fb      	ldrh	r3, [r7, #14]
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2200      	movs	r2, #0
 8006d52:	f240 6105 	movw	r1, #1541	@ 0x605
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 fb5a 	bl	8008410 <CODEC_IO_Write>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	61fb      	str	r3, [r7, #28]
      break;
 8006d66:	e0ce      	b.n	8006f06 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8006d68:	8afb      	ldrh	r3, [r7, #22]
 8006d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d6e:	d141      	bne.n	8006df4 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006d70:	89fb      	ldrh	r3, [r7, #14]
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8006d78:	2105      	movs	r1, #5
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 fb48 	bl	8008410 <CODEC_IO_Write>
 8006d80:	4603      	mov	r3, r0
 8006d82:	461a      	mov	r2, r3
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8006d8a:	89fb      	ldrh	r3, [r7, #14]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2203      	movs	r2, #3
 8006d90:	f240 6101 	movw	r1, #1537	@ 0x601
 8006d94:	4618      	mov	r0, r3
 8006d96:	f001 fb3b 	bl	8008410 <CODEC_IO_Write>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8006da4:	89fb      	ldrh	r3, [r7, #14]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2203      	movs	r2, #3
 8006daa:	f240 6102 	movw	r1, #1538	@ 0x602
 8006dae:	4618      	mov	r0, r3
 8006db0:	f001 fb2e 	bl	8008410 <CODEC_IO_Write>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8006dbe:	89fb      	ldrh	r3, [r7, #14]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	f240 6104 	movw	r1, #1540	@ 0x604
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 fb21 	bl	8008410 <CODEC_IO_Write>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8006dd8:	89fb      	ldrh	r3, [r7, #14]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2203      	movs	r2, #3
 8006dde:	f240 6105 	movw	r1, #1541	@ 0x605
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 fb14 	bl	8008410 <CODEC_IO_Write>
 8006de8:	4603      	mov	r3, r0
 8006dea:	461a      	mov	r2, r3
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	4413      	add	r3, r2
 8006df0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8006df2:	e088      	b.n	8006f06 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8006df4:	89fb      	ldrh	r3, [r7, #14]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8006dfc:	2105      	movs	r1, #5
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f001 fb06 	bl	8008410 <CODEC_IO_Write>
 8006e04:	4603      	mov	r3, r0
 8006e06:	461a      	mov	r2, r3
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006e0e:	89fb      	ldrh	r3, [r7, #14]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2201      	movs	r2, #1
 8006e14:	f240 6101 	movw	r1, #1537	@ 0x601
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 faf9 	bl	8008410 <CODEC_IO_Write>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	461a      	mov	r2, r3
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006e28:	89fb      	ldrh	r3, [r7, #14]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f240 6102 	movw	r1, #1538	@ 0x602
 8006e32:	4618      	mov	r0, r3
 8006e34:	f001 faec 	bl	8008410 <CODEC_IO_Write>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8006e42:	89fb      	ldrh	r3, [r7, #14]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2202      	movs	r2, #2
 8006e48:	f240 6104 	movw	r1, #1540	@ 0x604
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 fadf 	bl	8008410 <CODEC_IO_Write>
 8006e52:	4603      	mov	r3, r0
 8006e54:	461a      	mov	r2, r3
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	4413      	add	r3, r2
 8006e5a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8006e5c:	89fb      	ldrh	r3, [r7, #14]
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2202      	movs	r2, #2
 8006e62:	f240 6105 	movw	r1, #1541	@ 0x605
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 fad2 	bl	8008410 <CODEC_IO_Write>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	461a      	mov	r2, r3
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	61fb      	str	r3, [r7, #28]
      break;
 8006e76:	e046      	b.n	8006f06 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8006e78:	89fb      	ldrh	r3, [r7, #14]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f240 3203 	movw	r2, #771	@ 0x303
 8006e80:	2105      	movs	r1, #5
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fac4 	bl	8008410 <CODEC_IO_Write>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8006e92:	89fb      	ldrh	r3, [r7, #14]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2201      	movs	r2, #1
 8006e98:	f240 6101 	movw	r1, #1537	@ 0x601
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 fab7 	bl	8008410 <CODEC_IO_Write>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8006eac:	89fb      	ldrh	r3, [r7, #14]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f240 6102 	movw	r1, #1538	@ 0x602
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 faaa 	bl	8008410 <CODEC_IO_Write>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	69fb      	ldr	r3, [r7, #28]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8006ec6:	89fb      	ldrh	r3, [r7, #14]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f240 6104 	movw	r1, #1540	@ 0x604
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fa9d 	bl	8008410 <CODEC_IO_Write>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	4413      	add	r3, r2
 8006ede:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8006ee0:	89fb      	ldrh	r3, [r7, #14]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f240 6105 	movw	r1, #1541	@ 0x605
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 fa90 	bl	8008410 <CODEC_IO_Write>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	61fb      	str	r3, [r7, #28]
      break;
 8006efa:	e004      	b.n	8006f06 <wm8994_Init+0x39e>
 8006efc:	20000e58 	.word	0x20000e58
    }
  }
  else
  {
    outputEnabled = 0;
 8006f00:	4ba5      	ldr	r3, [pc, #660]	@ (8007198 <wm8994_Init+0x630>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8006f06:	8afb      	ldrh	r3, [r7, #22]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 81c3 	beq.w	8007294 <wm8994_Init+0x72c>
  {
    inputEnabled = 1;
 8006f0e:	4ba3      	ldr	r3, [pc, #652]	@ (800719c <wm8994_Init+0x634>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8006f14:	8afb      	ldrh	r3, [r7, #22]
 8006f16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f1a:	f000 8141 	beq.w	80071a0 <wm8994_Init+0x638>
 8006f1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f22:	f300 81b3 	bgt.w	800728c <wm8994_Init+0x724>
 8006f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f2a:	d05a      	beq.n	8006fe2 <wm8994_Init+0x47a>
 8006f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f30:	f300 81ac 	bgt.w	800728c <wm8994_Init+0x724>
 8006f34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f38:	f000 80de 	beq.w	80070f8 <wm8994_Init+0x590>
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f40:	f040 81a4 	bne.w	800728c <wm8994_Init+0x724>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8006f44:	89fb      	ldrh	r3, [r7, #14]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8006f4c:	2104      	movs	r1, #4
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 fa5e 	bl	8008410 <CODEC_IO_Write>
 8006f54:	4603      	mov	r3, r0
 8006f56:	461a      	mov	r2, r3
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8006f5e:	89fb      	ldrh	r3, [r7, #14]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	22db      	movs	r2, #219	@ 0xdb
 8006f64:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 fa51 	bl	8008410 <CODEC_IO_Write>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	461a      	mov	r2, r3
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	4413      	add	r3, r2
 8006f76:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8006f80:	2102      	movs	r1, #2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 fa44 	bl	8008410 <CODEC_IO_Write>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	4413      	add	r3, r2
 8006f90:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8006f92:	89fb      	ldrh	r3, [r7, #14]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2202      	movs	r2, #2
 8006f98:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 fa37 	bl	8008410 <CODEC_IO_Write>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	4413      	add	r3, r2
 8006faa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8006fac:	89fb      	ldrh	r3, [r7, #14]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	f240 6109 	movw	r1, #1545	@ 0x609
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fa2a 	bl	8008410 <CODEC_IO_Write>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 8006fc6:	89fb      	ldrh	r3, [r7, #14]
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	220e      	movs	r2, #14
 8006fcc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 fa1d 	bl	8008410 <CODEC_IO_Write>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	61fb      	str	r3, [r7, #28]
      break;
 8006fe0:	e15b      	b.n	800729a <wm8994_Init+0x732>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8006fe2:	89fb      	ldrh	r3, [r7, #14]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2211      	movs	r2, #17
 8006fe8:	2128      	movs	r1, #40	@ 0x28
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 fa10 	bl	8008410 <CODEC_IO_Write>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +0dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0020);
 8006ffa:	89fb      	ldrh	r3, [r7, #14]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2220      	movs	r2, #32
 8007000:	2129      	movs	r1, #41	@ 0x29
 8007002:	4618      	mov	r0, r3
 8007004:	f001 fa04 	bl	8008410 <CODEC_IO_Write>
 8007008:	4603      	mov	r3, r0
 800700a:	461a      	mov	r2, r3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0020);
 8007012:	89fb      	ldrh	r3, [r7, #14]
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2220      	movs	r2, #32
 8007018:	212a      	movs	r1, #42	@ 0x2a
 800701a:	4618      	mov	r0, r3
 800701c:	f001 f9f8 	bl	8008410 <CODEC_IO_Write>
 8007020:	4603      	mov	r3, r0
 8007022:	461a      	mov	r2, r3
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4413      	add	r3, r2
 8007028:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2B, 0x0000);
 800702a:	89fb      	ldrh	r3, [r7, #14]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2200      	movs	r2, #0
 8007030:	212b      	movs	r1, #43	@ 0x2b
 8007032:	4618      	mov	r0, r3
 8007034:	f001 f9ec 	bl	8008410 <CODEC_IO_Write>
 8007038:	4603      	mov	r3, r0
 800703a:	461a      	mov	r2, r3
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	61fb      	str	r3, [r7, #28]
      counter += CODEC_IO_Write(DeviceAddr, 0x2C, 0x0000);
 8007042:	89fb      	ldrh	r3, [r7, #14]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2200      	movs	r2, #0
 8007048:	212c      	movs	r1, #44	@ 0x2c
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f9e0 	bl	8008410 <CODEC_IO_Write>
 8007050:	4603      	mov	r3, r0
 8007052:	461a      	mov	r2, r3
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800705a:	89fb      	ldrh	r3, [r7, #14]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f240 3203 	movw	r2, #771	@ 0x303
 8007062:	2104      	movs	r1, #4
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f9d3 	bl	8008410 <CODEC_IO_Write>
 800706a:	4603      	mov	r3, r0
 800706c:	461a      	mov	r2, r3
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	22db      	movs	r2, #219	@ 0xdb
 800707a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f9c6 	bl	8008410 <CODEC_IO_Write>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800708e:	89fb      	ldrh	r3, [r7, #14]
 8007090:	b2db      	uxtb	r3, r3
 8007092:	f246 3250 	movw	r2, #25424	@ 0x6350
 8007096:	2102      	movs	r1, #2
 8007098:	4618      	mov	r0, r3
 800709a:	f001 f9b9 	bl	8008410 <CODEC_IO_Write>
 800709e:	4603      	mov	r3, r0
 80070a0:	461a      	mov	r2, r3
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80070a8:	89fb      	ldrh	r3, [r7, #14]
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2202      	movs	r2, #2
 80070ae:	f240 6106 	movw	r1, #1542	@ 0x606
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 f9ac 	bl	8008410 <CODEC_IO_Write>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	4413      	add	r3, r2
 80070c0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80070c2:	89fb      	ldrh	r3, [r7, #14]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2202      	movs	r2, #2
 80070c8:	f240 6107 	movw	r1, #1543	@ 0x607
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 f99f 	bl	8008410 <CODEC_IO_Write>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	4413      	add	r3, r2
 80070da:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80070dc:	89fb      	ldrh	r3, [r7, #14]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	220d      	movs	r2, #13
 80070e2:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 f992 	bl	8008410 <CODEC_IO_Write>
 80070ec:	4603      	mov	r3, r0
 80070ee:	461a      	mov	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	4413      	add	r3, r2
 80070f4:	61fb      	str	r3, [r7, #28]
      break;
 80070f6:	e0d0      	b.n	800729a <wm8994_Init+0x732>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80070f8:	89fb      	ldrh	r3, [r7, #14]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8007100:	2104      	movs	r1, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f984 	bl	8008410 <CODEC_IO_Write>
 8007108:	4603      	mov	r3, r0
 800710a:	461a      	mov	r2, r3
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	4413      	add	r3, r2
 8007110:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8007112:	89fb      	ldrh	r3, [r7, #14]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	22db      	movs	r2, #219	@ 0xdb
 8007118:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800711c:	4618      	mov	r0, r3
 800711e:	f001 f977 	bl	8008410 <CODEC_IO_Write>
 8007122:	4603      	mov	r3, r0
 8007124:	461a      	mov	r2, r3
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800712c:	89fb      	ldrh	r3, [r7, #14]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	f246 3250 	movw	r2, #25424	@ 0x6350
 8007134:	2102      	movs	r1, #2
 8007136:	4618      	mov	r0, r3
 8007138:	f001 f96a 	bl	8008410 <CODEC_IO_Write>
 800713c:	4603      	mov	r3, r0
 800713e:	461a      	mov	r2, r3
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	4413      	add	r3, r2
 8007144:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8007146:	89fb      	ldrh	r3, [r7, #14]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2202      	movs	r2, #2
 800714c:	f240 6106 	movw	r1, #1542	@ 0x606
 8007150:	4618      	mov	r0, r3
 8007152:	f001 f95d 	bl	8008410 <CODEC_IO_Write>
 8007156:	4603      	mov	r3, r0
 8007158:	461a      	mov	r2, r3
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8007160:	89fb      	ldrh	r3, [r7, #14]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2202      	movs	r2, #2
 8007166:	f240 6107 	movw	r1, #1543	@ 0x607
 800716a:	4618      	mov	r0, r3
 800716c:	f001 f950 	bl	8008410 <CODEC_IO_Write>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800717a:	89fb      	ldrh	r3, [r7, #14]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	220d      	movs	r2, #13
 8007180:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8007184:	4618      	mov	r0, r3
 8007186:	f001 f943 	bl	8008410 <CODEC_IO_Write>
 800718a:	4603      	mov	r3, r0
 800718c:	461a      	mov	r2, r3
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	61fb      	str	r3, [r7, #28]
      break; 
 8007194:	e081      	b.n	800729a <wm8994_Init+0x732>
 8007196:	bf00      	nop
 8007198:	20000e58 	.word	0x20000e58
 800719c:	20000e5c 	.word	0x20000e5c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80071a0:	89fb      	ldrh	r3, [r7, #14]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80071a8:	2104      	movs	r1, #4
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 f930 	bl	8008410 <CODEC_IO_Write>
 80071b0:	4603      	mov	r3, r0
 80071b2:	461a      	mov	r2, r3
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	4413      	add	r3, r2
 80071b8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80071ba:	89fb      	ldrh	r3, [r7, #14]
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	22db      	movs	r2, #219	@ 0xdb
 80071c0:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 f923 	bl	8008410 <CODEC_IO_Write>
 80071ca:	4603      	mov	r3, r0
 80071cc:	461a      	mov	r2, r3
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80071d4:	89fb      	ldrh	r3, [r7, #14]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	22db      	movs	r2, #219	@ 0xdb
 80071da:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 f916 	bl	8008410 <CODEC_IO_Write>
 80071e4:	4603      	mov	r3, r0
 80071e6:	461a      	mov	r2, r3
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	4413      	add	r3, r2
 80071ec:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80071ee:	89fb      	ldrh	r3, [r7, #14]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 80071f6:	2102      	movs	r1, #2
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 f909 	bl	8008410 <CODEC_IO_Write>
 80071fe:	4603      	mov	r3, r0
 8007200:	461a      	mov	r2, r3
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4413      	add	r3, r2
 8007206:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8007208:	89fb      	ldrh	r3, [r7, #14]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2202      	movs	r2, #2
 800720e:	f240 6106 	movw	r1, #1542	@ 0x606
 8007212:	4618      	mov	r0, r3
 8007214:	f001 f8fc 	bl	8008410 <CODEC_IO_Write>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8007222:	89fb      	ldrh	r3, [r7, #14]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2202      	movs	r2, #2
 8007228:	f240 6107 	movw	r1, #1543	@ 0x607
 800722c:	4618      	mov	r0, r3
 800722e:	f001 f8ef 	bl	8008410 <CODEC_IO_Write>
 8007232:	4603      	mov	r3, r0
 8007234:	461a      	mov	r2, r3
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	4413      	add	r3, r2
 800723a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800723c:	89fb      	ldrh	r3, [r7, #14]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2202      	movs	r2, #2
 8007242:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8007246:	4618      	mov	r0, r3
 8007248:	f001 f8e2 	bl	8008410 <CODEC_IO_Write>
 800724c:	4603      	mov	r3, r0
 800724e:	461a      	mov	r2, r3
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2202      	movs	r2, #2
 800725c:	f240 6109 	movw	r1, #1545	@ 0x609
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f8d5 	bl	8008410 <CODEC_IO_Write>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8007270:	89fb      	ldrh	r3, [r7, #14]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	220d      	movs	r2, #13
 8007276:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800727a:	4618      	mov	r0, r3
 800727c:	f001 f8c8 	bl	8008410 <CODEC_IO_Write>
 8007280:	4603      	mov	r3, r0
 8007282:	461a      	mov	r2, r3
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	61fb      	str	r3, [r7, #28]
      break;    
 800728a:	e006      	b.n	800729a <wm8994_Init+0x732>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	3301      	adds	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
      break;
 8007292:	e002      	b.n	800729a <wm8994_Init+0x732>
    }
  }
  else
  {
    inputEnabled = 0;
 8007294:	4ba4      	ldr	r3, [pc, #656]	@ (8007528 <wm8994_Init+0x9c0>)
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4aa3      	ldr	r2, [pc, #652]	@ (800752c <wm8994_Init+0x9c4>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d079      	beq.n	8007396 <wm8994_Init+0x82e>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4aa1      	ldr	r2, [pc, #644]	@ (800752c <wm8994_Init+0x9c4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	f200 80ad 	bhi.w	8007406 <wm8994_Init+0x89e>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d061      	beq.n	800737a <wm8994_Init+0x812>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80072bc:	4293      	cmp	r3, r2
 80072be:	f200 80a2 	bhi.w	8007406 <wm8994_Init+0x89e>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80072c8:	4293      	cmp	r3, r2
 80072ca:	f000 808e 	beq.w	80073ea <wm8994_Init+0x882>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f64a 4244 	movw	r2, #44100	@ 0xac44
 80072d4:	4293      	cmp	r3, r2
 80072d6:	f200 8096 	bhi.w	8007406 <wm8994_Init+0x89e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80072e0:	d03d      	beq.n	800735e <wm8994_Init+0x7f6>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 80072e8:	f200 808d 	bhi.w	8007406 <wm8994_Init+0x89e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f245 6222 	movw	r2, #22050	@ 0x5622
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d06b      	beq.n	80073ce <wm8994_Init+0x866>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f245 6222 	movw	r2, #22050	@ 0x5622
 80072fc:	4293      	cmp	r3, r2
 80072fe:	f200 8082 	bhi.w	8007406 <wm8994_Init+0x89e>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8007308:	d01b      	beq.n	8007342 <wm8994_Init+0x7da>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8007310:	d879      	bhi.n	8007406 <wm8994_Init+0x89e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8007318:	d005      	beq.n	8007326 <wm8994_Init+0x7be>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8007320:	4293      	cmp	r3, r2
 8007322:	d046      	beq.n	80073b2 <wm8994_Init+0x84a>
 8007324:	e06f      	b.n	8007406 <wm8994_Init+0x89e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8007326:	89fb      	ldrh	r3, [r7, #14]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2203      	movs	r2, #3
 800732c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f86d 	bl	8008410 <CODEC_IO_Write>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	61fb      	str	r3, [r7, #28]
    break;
 8007340:	e06f      	b.n	8007422 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8007342:	89fb      	ldrh	r3, [r7, #14]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2233      	movs	r2, #51	@ 0x33
 8007348:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800734c:	4618      	mov	r0, r3
 800734e:	f001 f85f 	bl	8008410 <CODEC_IO_Write>
 8007352:	4603      	mov	r3, r0
 8007354:	461a      	mov	r2, r3
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	61fb      	str	r3, [r7, #28]
    break;
 800735c:	e061      	b.n	8007422 <wm8994_Init+0x8ba>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800735e:	89fb      	ldrh	r3, [r7, #14]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2263      	movs	r2, #99	@ 0x63
 8007364:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007368:	4618      	mov	r0, r3
 800736a:	f001 f851 	bl	8008410 <CODEC_IO_Write>
 800736e:	4603      	mov	r3, r0
 8007370:	461a      	mov	r2, r3
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	61fb      	str	r3, [r7, #28]
    break;
 8007378:	e053      	b.n	8007422 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800737a:	89fb      	ldrh	r3, [r7, #14]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2283      	movs	r2, #131	@ 0x83
 8007380:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007384:	4618      	mov	r0, r3
 8007386:	f001 f843 	bl	8008410 <CODEC_IO_Write>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	61fb      	str	r3, [r7, #28]
    break;
 8007394:	e045      	b.n	8007422 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8007396:	89fb      	ldrh	r3, [r7, #14]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	22a3      	movs	r2, #163	@ 0xa3
 800739c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f835 	bl	8008410 <CODEC_IO_Write>
 80073a6:	4603      	mov	r3, r0
 80073a8:	461a      	mov	r2, r3
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4413      	add	r3, r2
 80073ae:	61fb      	str	r3, [r7, #28]
    break;
 80073b0:	e037      	b.n	8007422 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80073b2:	89fb      	ldrh	r3, [r7, #14]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2213      	movs	r2, #19
 80073b8:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80073bc:	4618      	mov	r0, r3
 80073be:	f001 f827 	bl	8008410 <CODEC_IO_Write>
 80073c2:	4603      	mov	r3, r0
 80073c4:	461a      	mov	r2, r3
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	4413      	add	r3, r2
 80073ca:	61fb      	str	r3, [r7, #28]
    break;
 80073cc:	e029      	b.n	8007422 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80073ce:	89fb      	ldrh	r3, [r7, #14]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2243      	movs	r2, #67	@ 0x43
 80073d4:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 f819 	bl	8008410 <CODEC_IO_Write>
 80073de:	4603      	mov	r3, r0
 80073e0:	461a      	mov	r2, r3
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	61fb      	str	r3, [r7, #28]
    break;
 80073e8:	e01b      	b.n	8007422 <wm8994_Init+0x8ba>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80073ea:	89fb      	ldrh	r3, [r7, #14]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2273      	movs	r2, #115	@ 0x73
 80073f0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 f80b 	bl	8008410 <CODEC_IO_Write>
 80073fa:	4603      	mov	r3, r0
 80073fc:	461a      	mov	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	61fb      	str	r3, [r7, #28]
    break; 
 8007404:	e00d      	b.n	8007422 <wm8994_Init+0x8ba>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8007406:	89fb      	ldrh	r3, [r7, #14]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2283      	movs	r2, #131	@ 0x83
 800740c:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fffd 	bl	8008410 <CODEC_IO_Write>
 8007416:	4603      	mov	r3, r0
 8007418:	461a      	mov	r2, r3
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	4413      	add	r3, r2
 800741e:	61fb      	str	r3, [r7, #28]
    break; 
 8007420:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8007422:	8afb      	ldrh	r3, [r7, #22]
 8007424:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007428:	d10e      	bne.n	8007448 <wm8994_Init+0x8e0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800742a:	89fb      	ldrh	r3, [r7, #14]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	f244 0218 	movw	r2, #16408	@ 0x4018
 8007432:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007436:	4618      	mov	r0, r3
 8007438:	f000 ffea 	bl	8008410 <CODEC_IO_Write>
 800743c:	4603      	mov	r3, r0
 800743e:	461a      	mov	r2, r3
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	61fb      	str	r3, [r7, #28]
 8007446:	e00d      	b.n	8007464 <wm8994_Init+0x8fc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f244 0210 	movw	r2, #16400	@ 0x4010
 8007450:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007454:	4618      	mov	r0, r3
 8007456:	f000 ffdb 	bl	8008410 <CODEC_IO_Write>
 800745a:	4603      	mov	r3, r0
 800745c:	461a      	mov	r2, r3
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	4413      	add	r3, r2
 8007462:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8007464:	89fb      	ldrh	r3, [r7, #14]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2200      	movs	r2, #0
 800746a:	f240 3102 	movw	r1, #770	@ 0x302
 800746e:	4618      	mov	r0, r3
 8007470:	f000 ffce 	bl	8008410 <CODEC_IO_Write>
 8007474:	4603      	mov	r3, r0
 8007476:	461a      	mov	r2, r3
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	4413      	add	r3, r2
 800747c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	220a      	movs	r2, #10
 8007484:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8007488:	4618      	mov	r0, r3
 800748a:	f000 ffc1 	bl	8008410 <CODEC_IO_Write>
 800748e:	4603      	mov	r3, r0
 8007490:	461a      	mov	r2, r3
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8007498:	89fb      	ldrh	r3, [r7, #14]
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2201      	movs	r2, #1
 800749e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 ffb4 	bl	8008410 <CODEC_IO_Write>
 80074a8:	4603      	mov	r3, r0
 80074aa:	461a      	mov	r2, r3
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80074b2:	8b3b      	ldrh	r3, [r7, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 817b 	beq.w	80077b0 <wm8994_Init+0xc48>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80074ba:	8b3b      	ldrh	r3, [r7, #24]
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d157      	bne.n	8007570 <wm8994_Init+0xa08>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80074c0:	89fb      	ldrh	r3, [r7, #14]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074c8:	212d      	movs	r1, #45	@ 0x2d
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 ffa0 	bl	8008410 <CODEC_IO_Write>
 80074d0:	4603      	mov	r3, r0
 80074d2:	461a      	mov	r2, r3
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	4413      	add	r3, r2
 80074d8:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80074da:	89fb      	ldrh	r3, [r7, #14]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074e2:	212e      	movs	r1, #46	@ 0x2e
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 ff93 	bl	8008410 <CODEC_IO_Write>
 80074ea:	4603      	mov	r3, r0
 80074ec:	461a      	mov	r2, r3
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	4413      	add	r3, r2
 80074f2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80074f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007530 <wm8994_Init+0x9c8>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d01b      	beq.n	8007534 <wm8994_Init+0x9cc>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80074fc:	89fb      	ldrh	r3, [r7, #14]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8007504:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8007508:	4618      	mov	r0, r3
 800750a:	f000 ff81 	bl	8008410 <CODEC_IO_Write>
 800750e:	4603      	mov	r3, r0
 8007510:	461a      	mov	r2, r3
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8007518:	4b05      	ldr	r3, [pc, #20]	@ (8007530 <wm8994_Init+0x9c8>)
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 800751e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8007522:	f7fd f9c1 	bl	80048a8 <AUDIO_IO_Delay>
 8007526:	e016      	b.n	8007556 <wm8994_Init+0x9ee>
 8007528:	20000e5c 	.word	0x20000e5c
 800752c:	00017700 	.word	0x00017700
 8007530:	2000007c 	.word	0x2000007c
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8007534:	89fb      	ldrh	r3, [r7, #14]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f248 1208 	movw	r2, #33032	@ 0x8108
 800753c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8007540:	4618      	mov	r0, r3
 8007542:	f000 ff65 	bl	8008410 <CODEC_IO_Write>
 8007546:	4603      	mov	r3, r0
 8007548:	461a      	mov	r2, r3
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8007550:	2032      	movs	r0, #50	@ 0x32
 8007552:	f7fd f9a9 	bl	80048a8 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2200      	movs	r2, #0
 800755c:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8007560:	4618      	mov	r0, r3
 8007562:	f000 ff55 	bl	8008410 <CODEC_IO_Write>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8007578:	2103      	movs	r1, #3
 800757a:	4618      	mov	r0, r3
 800757c:	f000 ff48 	bl	8008410 <CODEC_IO_Write>
 8007580:	4603      	mov	r3, r0
 8007582:	461a      	mov	r2, r3
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800758a:	89fb      	ldrh	r3, [r7, #14]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2200      	movs	r2, #0
 8007590:	2122      	movs	r1, #34	@ 0x22
 8007592:	4618      	mov	r0, r3
 8007594:	f000 ff3c 	bl	8008410 <CODEC_IO_Write>
 8007598:	4603      	mov	r3, r0
 800759a:	461a      	mov	r2, r3
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4413      	add	r3, r2
 80075a0:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80075a2:	89fb      	ldrh	r3, [r7, #14]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2200      	movs	r2, #0
 80075a8:	2123      	movs	r1, #35	@ 0x23
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 ff30 	bl	8008410 <CODEC_IO_Write>
 80075b0:	4603      	mov	r3, r0
 80075b2:	461a      	mov	r2, r3
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80075ba:	89fb      	ldrh	r3, [r7, #14]
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80075c2:	2136      	movs	r1, #54	@ 0x36
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 ff23 	bl	8008410 <CODEC_IO_Write>
 80075ca:	4603      	mov	r3, r0
 80075cc:	461a      	mov	r2, r3
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	4413      	add	r3, r2
 80075d2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80075d4:	89fb      	ldrh	r3, [r7, #14]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f243 0203 	movw	r2, #12291	@ 0x3003
 80075dc:	2101      	movs	r1, #1
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 ff16 	bl	8008410 <CODEC_IO_Write>
 80075e4:	4603      	mov	r3, r0
 80075e6:	461a      	mov	r2, r3
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	4413      	add	r3, r2
 80075ec:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80075ee:	8afb      	ldrh	r3, [r7, #22]
 80075f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f4:	d10d      	bne.n	8007612 <wm8994_Init+0xaaa>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80075f6:	89fb      	ldrh	r3, [r7, #14]
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	f240 2205 	movw	r2, #517	@ 0x205
 80075fe:	2151      	movs	r1, #81	@ 0x51
 8007600:	4618      	mov	r0, r3
 8007602:	f000 ff05 	bl	8008410 <CODEC_IO_Write>
 8007606:	4603      	mov	r3, r0
 8007608:	461a      	mov	r2, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	e00b      	b.n	800762a <wm8994_Init+0xac2>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8007612:	89fb      	ldrh	r3, [r7, #14]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2205      	movs	r2, #5
 8007618:	2151      	movs	r1, #81	@ 0x51
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fef8 	bl	8008410 <CODEC_IO_Write>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	4413      	add	r3, r2
 8007628:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800762a:	8b7b      	ldrh	r3, [r7, #26]
 800762c:	f443 534c 	orr.w	r3, r3, #13056	@ 0x3300
 8007630:	f043 0303 	orr.w	r3, r3, #3
 8007634:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8007636:	89fb      	ldrh	r3, [r7, #14]
 8007638:	b2db      	uxtb	r3, r3
 800763a:	8b7a      	ldrh	r2, [r7, #26]
 800763c:	2101      	movs	r1, #1
 800763e:	4618      	mov	r0, r3
 8007640:	f000 fee6 	bl	8008410 <CODEC_IO_Write>
 8007644:	4603      	mov	r3, r0
 8007646:	461a      	mov	r2, r3
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 800764e:	89fb      	ldrh	r3, [r7, #14]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2222      	movs	r2, #34	@ 0x22
 8007654:	2160      	movs	r1, #96	@ 0x60
 8007656:	4618      	mov	r0, r3
 8007658:	f000 feda 	bl	8008410 <CODEC_IO_Write>
 800765c:	4603      	mov	r3, r0
 800765e:	461a      	mov	r2, r3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8007666:	89fb      	ldrh	r3, [r7, #14]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	f649 7225 	movw	r2, #40741	@ 0x9f25
 800766e:	214c      	movs	r1, #76	@ 0x4c
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fecd 	bl	8008410 <CODEC_IO_Write>
 8007676:	4603      	mov	r3, r0
 8007678:	461a      	mov	r2, r3
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8007680:	200f      	movs	r0, #15
 8007682:	f7fd f911 	bl	80048a8 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8007686:	89fb      	ldrh	r3, [r7, #14]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2201      	movs	r2, #1
 800768c:	212d      	movs	r1, #45	@ 0x2d
 800768e:	4618      	mov	r0, r3
 8007690:	f000 febe 	bl	8008410 <CODEC_IO_Write>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	4413      	add	r3, r2
 800769c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 800769e:	89fb      	ldrh	r3, [r7, #14]
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2201      	movs	r2, #1
 80076a4:	212e      	movs	r1, #46	@ 0x2e
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 feb2 	bl	8008410 <CODEC_IO_Write>
 80076ac:	4603      	mov	r3, r0
 80076ae:	461a      	mov	r2, r3
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80076b6:	89fb      	ldrh	r3, [r7, #14]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	f44f 724c 	mov.w	r2, #816	@ 0x330
 80076be:	2103      	movs	r1, #3
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fea5 	bl	8008410 <CODEC_IO_Write>
 80076c6:	4603      	mov	r3, r0
 80076c8:	461a      	mov	r2, r3
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	4413      	add	r3, r2
 80076ce:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80076d0:	89fb      	ldrh	r3, [r7, #14]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2233      	movs	r2, #51	@ 0x33
 80076d6:	2154      	movs	r1, #84	@ 0x54
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fe99 	bl	8008410 <CODEC_IO_Write>
 80076de:	4603      	mov	r3, r0
 80076e0:	461a      	mov	r2, r3
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 80076e8:	f240 1001 	movw	r0, #257	@ 0x101
 80076ec:	f7fd f8dc 	bl	80048a8 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80076f0:	89fb      	ldrh	r3, [r7, #14]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	22ee      	movs	r2, #238	@ 0xee
 80076f6:	2160      	movs	r1, #96	@ 0x60
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fe89 	bl	8008410 <CODEC_IO_Write>
 80076fe:	4603      	mov	r3, r0
 8007700:	461a      	mov	r2, r3
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8007708:	89fb      	ldrh	r3, [r7, #14]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	22c0      	movs	r2, #192	@ 0xc0
 800770e:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fe7c 	bl	8008410 <CODEC_IO_Write>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	4413      	add	r3, r2
 8007720:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8007722:	89fb      	ldrh	r3, [r7, #14]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	22c0      	movs	r2, #192	@ 0xc0
 8007728:	f240 6111 	movw	r1, #1553	@ 0x611
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fe6f 	bl	8008410 <CODEC_IO_Write>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800773c:	89fb      	ldrh	r3, [r7, #14]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2210      	movs	r2, #16
 8007742:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fe62 	bl	8008410 <CODEC_IO_Write>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	4413      	add	r3, r2
 8007754:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8007756:	89fb      	ldrh	r3, [r7, #14]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	22c0      	movs	r2, #192	@ 0xc0
 800775c:	f240 6112 	movw	r1, #1554	@ 0x612
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fe55 	bl	8008410 <CODEC_IO_Write>
 8007766:	4603      	mov	r3, r0
 8007768:	461a      	mov	r2, r3
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	4413      	add	r3, r2
 800776e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	22c0      	movs	r2, #192	@ 0xc0
 8007776:	f240 6113 	movw	r1, #1555	@ 0x613
 800777a:	4618      	mov	r0, r3
 800777c:	f000 fe48 	bl	8008410 <CODEC_IO_Write>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	4413      	add	r3, r2
 8007788:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800778a:	89fb      	ldrh	r3, [r7, #14]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2210      	movs	r2, #16
 8007790:	f240 4122 	movw	r1, #1058	@ 0x422
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fe3b 	bl	8008410 <CODEC_IO_Write>
 800779a:	4603      	mov	r3, r0
 800779c:	461a      	mov	r2, r3
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80077a4:	7afa      	ldrb	r2, [r7, #11]
 80077a6:	89fb      	ldrh	r3, [r7, #14]
 80077a8:	4611      	mov	r1, r2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f000 f984 	bl	8007ab8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80077b0:	8afb      	ldrh	r3, [r7, #22]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 80a6 	beq.w	8007904 <wm8994_Init+0xd9c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80077b8:	8afb      	ldrh	r3, [r7, #22]
 80077ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077be:	d003      	beq.n	80077c8 <wm8994_Init+0xc60>
 80077c0:	8afb      	ldrh	r3, [r7, #22]
 80077c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c6:	d12b      	bne.n	8007820 <wm8994_Init+0xcb8>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80077c8:	8b7b      	ldrh	r3, [r7, #26]
 80077ca:	f043 0313 	orr.w	r3, r3, #19
 80077ce:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80077d0:	89fb      	ldrh	r3, [r7, #14]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	8b7a      	ldrh	r2, [r7, #26]
 80077d6:	2101      	movs	r1, #1
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fe19 	bl	8008410 <CODEC_IO_Write>
 80077de:	4603      	mov	r3, r0
 80077e0:	461a      	mov	r2, r3
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	4413      	add	r3, r2
 80077e6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80077e8:	89fb      	ldrh	r3, [r7, #14]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2202      	movs	r2, #2
 80077ee:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fe0c 	bl	8008410 <CODEC_IO_Write>
 80077f8:	4603      	mov	r3, r0
 80077fa:	461a      	mov	r2, r3
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	4413      	add	r3, r2
 8007800:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8007802:	89fb      	ldrh	r3, [r7, #14]
 8007804:	b2db      	uxtb	r3, r3
 8007806:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800780a:	f240 4111 	movw	r1, #1041	@ 0x411
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fdfe 	bl	8008410 <CODEC_IO_Write>
 8007814:	4603      	mov	r3, r0
 8007816:	461a      	mov	r2, r3
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	4413      	add	r3, r2
 800781c:	61fb      	str	r3, [r7, #28]
 800781e:	e06b      	b.n	80078f8 <wm8994_Init+0xd90>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8007820:	8afb      	ldrh	r3, [r7, #22]
 8007822:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007826:	d139      	bne.n	800789c <wm8994_Init+0xd34>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8007828:	8b7b      	ldrh	r3, [r7, #26]
 800782a:	f043 0313 	orr.w	r3, r3, #19
 800782e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8007830:	89fb      	ldrh	r3, [r7, #14]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	8b7a      	ldrh	r2, [r7, #26]
 8007836:	2101      	movs	r1, #1
 8007838:	4618      	mov	r0, r3
 800783a:	f000 fde9 	bl	8008410 <CODEC_IO_Write>
 800783e:	4603      	mov	r3, r0
 8007840:	461a      	mov	r2, r3
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	4413      	add	r3, r2
 8007846:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8007848:	89fb      	ldrh	r3, [r7, #14]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2202      	movs	r2, #2
 800784e:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fddc 	bl	8008410 <CODEC_IO_Write>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8007862:	89fb      	ldrh	r3, [r7, #14]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800786a:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fdce 	bl	8008410 <CODEC_IO_Write>
 8007874:	4603      	mov	r3, r0
 8007876:	461a      	mov	r2, r3
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	4413      	add	r3, r2
 800787c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800787e:	89fb      	ldrh	r3, [r7, #14]
 8007880:	b2db      	uxtb	r3, r3
 8007882:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8007886:	f240 4111 	movw	r1, #1041	@ 0x411
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fdc0 	bl	8008410 <CODEC_IO_Write>
 8007890:	4603      	mov	r3, r0
 8007892:	461a      	mov	r2, r3
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	61fb      	str	r3, [r7, #28]
 800789a:	e02d      	b.n	80078f8 <wm8994_Init+0xd90>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800789c:	8afb      	ldrh	r3, [r7, #22]
 800789e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078a2:	d003      	beq.n	80078ac <wm8994_Init+0xd44>
 80078a4:	8afb      	ldrh	r3, [r7, #22]
 80078a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078aa:	d125      	bne.n	80078f8 <wm8994_Init+0xd90>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x008B);
 80078ac:	89fb      	ldrh	r3, [r7, #14]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	228b      	movs	r2, #139	@ 0x8b
 80078b2:	2118      	movs	r1, #24
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fdab 	bl	8008410 <CODEC_IO_Write>
 80078ba:	4603      	mov	r3, r0
 80078bc:	461a      	mov	r2, r3
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	4413      	add	r3, r2
 80078c2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x008B);
 80078c4:	89fb      	ldrh	r3, [r7, #14]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	228b      	movs	r2, #139	@ 0x8b
 80078ca:	211a      	movs	r1, #26
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fd9f 	bl	8008410 <CODEC_IO_Write>
 80078d2:	4603      	mov	r3, r0
 80078d4:	461a      	mov	r2, r3
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80078dc:	89fb      	ldrh	r3, [r7, #14]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 80078e4:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 fd91 	bl	8008410 <CODEC_IO_Write>
 80078ee:	4603      	mov	r3, r0
 80078f0:	461a      	mov	r2, r3
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80078f8:	7afa      	ldrb	r2, [r7, #11]
 80078fa:	89fb      	ldrh	r3, [r7, #14]
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 f8da 	bl	8007ab8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8007904:	69fb      	ldr	r3, [r7, #28]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3720      	adds	r7, #32
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop

08007910 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8007914:	f7fc ff6a 	bl	80047ec <AUDIO_IO_DeInit>
}
 8007918:	bf00      	nop
 800791a:	bd80      	pop	{r7, pc}

0800791c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8007926:	f7fc ff57 	bl	80047d8 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800792a:	88fb      	ldrh	r3, [r7, #6]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2100      	movs	r1, #0
 8007930:	4618      	mov	r0, r3
 8007932:	f7fc ff8d 	bl	8004850 <AUDIO_IO_Read>
 8007936:	4603      	mov	r3, r0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	80fb      	strh	r3, [r7, #6]
 800794c:	4613      	mov	r3, r2
 800794e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007954:	88fb      	ldrh	r3, [r7, #6]
 8007956:	2100      	movs	r1, #0
 8007958:	4618      	mov	r0, r3
 800795a:	f000 faf3 	bl	8007f44 <wm8994_SetMute>
 800795e:	4602      	mov	r2, r0
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8007966:	68fb      	ldr	r3, [r7, #12]
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	2101      	movs	r1, #1
 8007982:	4618      	mov	r0, r3
 8007984:	f000 fade 	bl	8007f44 <wm8994_SetMute>
 8007988:	4602      	mov	r2, r0
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8007990:	88fb      	ldrh	r3, [r7, #6]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2201      	movs	r2, #1
 8007996:	2102      	movs	r1, #2
 8007998:	4618      	mov	r0, r3
 800799a:	f000 fd39 	bl	8008410 <CODEC_IO_Write>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80079a8:	68fb      	ldr	r3, [r7, #12]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b084      	sub	sp, #16
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	4603      	mov	r3, r0
 80079ba:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f000 fabd 	bl	8007f44 <wm8994_SetMute>
 80079ca:	4602      	mov	r2, r0
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	4413      	add	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80079d2:	68fb      	ldr	r3, [r7, #12]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80079ec:	4b31      	ldr	r3, [pc, #196]	@ (8007ab4 <wm8994_Stop+0xd8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d05a      	beq.n	8007aaa <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80079f4:	88fb      	ldrh	r3, [r7, #6]
 80079f6:	2101      	movs	r1, #1
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 faa3 	bl	8007f44 <wm8994_SetMute>
 80079fe:	4602      	mov	r2, r0
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	4413      	add	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d04e      	beq.n	8007aaa <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a14:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fcf9 	bl	8008410 <CODEC_IO_Write>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	461a      	mov	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8007a28:	88fb      	ldrh	r3, [r7, #6]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a30:	f240 4122 	movw	r1, #1058	@ 0x422
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 fceb 	bl	8008410 <CODEC_IO_Write>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8007a44:	88fb      	ldrh	r3, [r7, #6]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2200      	movs	r2, #0
 8007a4a:	212d      	movs	r1, #45	@ 0x2d
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f000 fcdf 	bl	8008410 <CODEC_IO_Write>
 8007a52:	4603      	mov	r3, r0
 8007a54:	461a      	mov	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8007a5c:	88fb      	ldrh	r3, [r7, #6]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2200      	movs	r2, #0
 8007a62:	212e      	movs	r1, #46	@ 0x2e
 8007a64:	4618      	mov	r0, r3
 8007a66:	f000 fcd3 	bl	8008410 <CODEC_IO_Write>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4413      	add	r3, r2
 8007a72:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2105      	movs	r1, #5
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fcc7 	bl	8008410 <CODEC_IO_Write>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4413      	add	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8007a8c:	88fb      	ldrh	r3, [r7, #6]
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2200      	movs	r2, #0
 8007a92:	2100      	movs	r1, #0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fcbb 	bl	8008410 <CODEC_IO_Write>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8007aa4:	4b03      	ldr	r3, [pc, #12]	@ (8007ab4 <wm8994_Stop+0xd8>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20000e58 	.word	0x20000e58

08007ab8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	460a      	mov	r2, r1
 8007ac2:	80fb      	strh	r3, [r7, #6]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8007acc:	797b      	ldrb	r3, [r7, #5]
 8007ace:	2b64      	cmp	r3, #100	@ 0x64
 8007ad0:	d80b      	bhi.n	8007aea <wm8994_SetVolume+0x32>
 8007ad2:	797a      	ldrb	r2, [r7, #5]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	019b      	lsls	r3, r3, #6
 8007ad8:	1a9b      	subs	r3, r3, r2
 8007ada:	4a86      	ldr	r2, [pc, #536]	@ (8007cf4 <wm8994_SetVolume+0x23c>)
 8007adc:	fb82 1203 	smull	r1, r2, r2, r3
 8007ae0:	1152      	asrs	r2, r2, #5
 8007ae2:	17db      	asrs	r3, r3, #31
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	e000      	b.n	8007aec <wm8994_SetVolume+0x34>
 8007aea:	2364      	movs	r3, #100	@ 0x64
 8007aec:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8007aee:	4b82      	ldr	r3, [pc, #520]	@ (8007cf8 <wm8994_SetVolume+0x240>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 809b 	beq.w	8007c2e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8007af8:	7afb      	ldrb	r3, [r7, #11]
 8007afa:	2b3e      	cmp	r3, #62	@ 0x3e
 8007afc:	d93d      	bls.n	8007b7a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fa1e 	bl	8007f44 <wm8994_SetMute>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8007b10:	88fb      	ldrh	r3, [r7, #6]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f240 127f 	movw	r2, #383	@ 0x17f
 8007b18:	211c      	movs	r1, #28
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fc78 	bl	8008410 <CODEC_IO_Write>
 8007b20:	4603      	mov	r3, r0
 8007b22:	461a      	mov	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f240 127f 	movw	r2, #383	@ 0x17f
 8007b32:	211d      	movs	r1, #29
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fc6b 	bl	8008410 <CODEC_IO_Write>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8007b44:	88fb      	ldrh	r3, [r7, #6]
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f240 127f 	movw	r2, #383	@ 0x17f
 8007b4c:	2126      	movs	r1, #38	@ 0x26
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fc5e 	bl	8008410 <CODEC_IO_Write>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8007b5e:	88fb      	ldrh	r3, [r7, #6]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f240 127f 	movw	r2, #383	@ 0x17f
 8007b66:	2127      	movs	r1, #39	@ 0x27
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fc51 	bl	8008410 <CODEC_IO_Write>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	461a      	mov	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4413      	add	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	e059      	b.n	8007c2e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8007b7a:	797b      	ldrb	r3, [r7, #5]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007b80:	88fb      	ldrh	r3, [r7, #6]
 8007b82:	2101      	movs	r1, #1
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 f9dd 	bl	8007f44 <wm8994_SetMute>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4413      	add	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	e04c      	b.n	8007c2e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007b94:	88fb      	ldrh	r3, [r7, #6]
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 f9d3 	bl	8007f44 <wm8994_SetMute>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	b2d8      	uxtb	r0, r3
 8007baa:	7afb      	ldrb	r3, [r7, #11]
 8007bac:	b21b      	sxth	r3, r3
 8007bae:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007bb2:	b21b      	sxth	r3, r3
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	211c      	movs	r1, #28
 8007bba:	f000 fc29 	bl	8008410 <CODEC_IO_Write>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	b2d8      	uxtb	r0, r3
 8007bcc:	7afb      	ldrb	r3, [r7, #11]
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007bd4:	b21b      	sxth	r3, r3
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	461a      	mov	r2, r3
 8007bda:	211d      	movs	r1, #29
 8007bdc:	f000 fc18 	bl	8008410 <CODEC_IO_Write>
 8007be0:	4603      	mov	r3, r0
 8007be2:	461a      	mov	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8007bea:	88fb      	ldrh	r3, [r7, #6]
 8007bec:	b2d8      	uxtb	r0, r3
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	b21b      	sxth	r3, r3
 8007bf2:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007bf6:	b21b      	sxth	r3, r3
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	2126      	movs	r1, #38	@ 0x26
 8007bfe:	f000 fc07 	bl	8008410 <CODEC_IO_Write>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	4413      	add	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8007c0c:	88fb      	ldrh	r3, [r7, #6]
 8007c0e:	b2d8      	uxtb	r0, r3
 8007c10:	7afb      	ldrb	r3, [r7, #11]
 8007c12:	b21b      	sxth	r3, r3
 8007c14:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007c18:	b21b      	sxth	r3, r3
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	2127      	movs	r1, #39	@ 0x27
 8007c20:	f000 fbf6 	bl	8008410 <CODEC_IO_Write>
 8007c24:	4603      	mov	r3, r0
 8007c26:	461a      	mov	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8007c2e:	4b33      	ldr	r3, [pc, #204]	@ (8007cfc <wm8994_SetVolume+0x244>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d059      	beq.n	8007cea <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8007c36:	797b      	ldrb	r3, [r7, #5]
 8007c38:	2b63      	cmp	r3, #99	@ 0x63
 8007c3a:	d80c      	bhi.n	8007c56 <wm8994_SetVolume+0x19e>
 8007c3c:	797a      	ldrb	r2, [r7, #5]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	011b      	lsls	r3, r3, #4
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	011b      	lsls	r3, r3, #4
 8007c46:	4a2b      	ldr	r2, [pc, #172]	@ (8007cf4 <wm8994_SetVolume+0x23c>)
 8007c48:	fb82 1203 	smull	r1, r2, r2, r3
 8007c4c:	1152      	asrs	r2, r2, #5
 8007c4e:	17db      	asrs	r3, r3, #31
 8007c50:	1ad3      	subs	r3, r2, r3
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	e000      	b.n	8007c58 <wm8994_SetVolume+0x1a0>
 8007c56:	23ef      	movs	r3, #239	@ 0xef
 8007c58:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8007c5a:	88fb      	ldrh	r3, [r7, #6]
 8007c5c:	b2d8      	uxtb	r0, r3
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	b21b      	sxth	r3, r3
 8007c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c66:	b21b      	sxth	r3, r3
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007c70:	f000 fbce 	bl	8008410 <CODEC_IO_Write>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	b2d8      	uxtb	r0, r3
 8007c82:	7afb      	ldrb	r3, [r7, #11]
 8007c84:	b21b      	sxth	r3, r3
 8007c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c8a:	b21b      	sxth	r3, r3
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f240 4101 	movw	r1, #1025	@ 0x401
 8007c94:	f000 fbbc 	bl	8008410 <CODEC_IO_Write>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	b2d8      	uxtb	r0, r3
 8007ca6:	7afb      	ldrb	r3, [r7, #11]
 8007ca8:	b21b      	sxth	r3, r3
 8007caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cae:	b21b      	sxth	r3, r3
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	f240 4104 	movw	r1, #1028	@ 0x404
 8007cb8:	f000 fbaa 	bl	8008410 <CODEC_IO_Write>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	b2d8      	uxtb	r0, r3
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	b21b      	sxth	r3, r3
 8007cce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cd2:	b21b      	sxth	r3, r3
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f240 4105 	movw	r1, #1029	@ 0x405
 8007cdc:	f000 fb98 	bl	8008410 <CODEC_IO_Write>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8007cea:	68fb      	ldr	r3, [r7, #12]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	51eb851f 	.word	0x51eb851f
 8007cf8:	20000e58 	.word	0x20000e58
 8007cfc:	20000e5c 	.word	0x20000e5c

08007d00 <wm8994_SetVolumeOut>:
uint32_t wm8994_SetVolumeOut(uint16_t DeviceAddr, uint8_t Volume) {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	460a      	mov	r2, r1
 8007d0a:	80fb      	strh	r3, [r7, #6]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
	uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8007d14:	797b      	ldrb	r3, [r7, #5]
 8007d16:	2b64      	cmp	r3, #100	@ 0x64
 8007d18:	d80b      	bhi.n	8007d32 <wm8994_SetVolumeOut+0x32>
 8007d1a:	797a      	ldrb	r2, [r7, #5]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	019b      	lsls	r3, r3, #6
 8007d20:	1a9b      	subs	r3, r3, r2
 8007d22:	4a57      	ldr	r2, [pc, #348]	@ (8007e80 <wm8994_SetVolumeOut+0x180>)
 8007d24:	fb82 1203 	smull	r1, r2, r2, r3
 8007d28:	1152      	asrs	r2, r2, #5
 8007d2a:	17db      	asrs	r3, r3, #31
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	e000      	b.n	8007d34 <wm8994_SetVolumeOut+0x34>
 8007d32:	2364      	movs	r3, #100	@ 0x64
 8007d34:	72fb      	strb	r3, [r7, #11]

	/* Output volume */
	if (outputEnabled != 0) {
 8007d36:	4b53      	ldr	r3, [pc, #332]	@ (8007e84 <wm8994_SetVolumeOut+0x184>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 809b 	beq.w	8007e76 <wm8994_SetVolumeOut+0x176>
		if (convertedvol > 0x3E) {
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d44:	d93d      	bls.n	8007dc2 <wm8994_SetVolumeOut+0xc2>
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007d46:	88fb      	ldrh	r3, [r7, #6]
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 f8fa 	bl	8007f44 <wm8994_SetMute>
 8007d50:	4602      	mov	r2, r0
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	4413      	add	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f240 127f 	movw	r2, #383	@ 0x17f
 8007d60:	211c      	movs	r1, #28
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fb54 	bl	8008410 <CODEC_IO_Write>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f240 127f 	movw	r2, #383	@ 0x17f
 8007d7a:	211d      	movs	r1, #29
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fb47 	bl	8008410 <CODEC_IO_Write>
 8007d82:	4603      	mov	r3, r0
 8007d84:	461a      	mov	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4413      	add	r3, r2
 8007d8a:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f240 127f 	movw	r2, #383	@ 0x17f
 8007d94:	2126      	movs	r1, #38	@ 0x26
 8007d96:	4618      	mov	r0, r3
 8007d98:	f000 fb3a 	bl	8008410 <CODEC_IO_Write>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8007da6:	88fb      	ldrh	r3, [r7, #6]
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	f240 127f 	movw	r2, #383	@ 0x17f
 8007dae:	2127      	movs	r1, #39	@ 0x27
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fb2d 	bl	8008410 <CODEC_IO_Write>
 8007db6:	4603      	mov	r3, r0
 8007db8:	461a      	mov	r2, r3
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e059      	b.n	8007e76 <wm8994_SetVolumeOut+0x176>
		} else if (Volume == 0) {
 8007dc2:	797b      	ldrb	r3, [r7, #5]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d109      	bne.n	8007ddc <wm8994_SetVolumeOut+0xdc>
			/* Mute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8007dc8:	88fb      	ldrh	r3, [r7, #6]
 8007dca:	2101      	movs	r1, #1
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f8b9 	bl	8007f44 <wm8994_SetMute>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e04c      	b.n	8007e76 <wm8994_SetVolumeOut+0x176>
		} else {
			/* Unmute audio codec */
			counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	2100      	movs	r1, #0
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 f8af 	bl	8007f44 <wm8994_SetMute>
 8007de6:	4602      	mov	r2, r0
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]

			/* Left Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8007dee:	88fb      	ldrh	r3, [r7, #6]
 8007df0:	b2d8      	uxtb	r0, r3
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	b21b      	sxth	r3, r3
 8007df6:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007dfa:	b21b      	sxth	r3, r3
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	461a      	mov	r2, r3
 8007e00:	211c      	movs	r1, #28
 8007e02:	f000 fb05 	bl	8008410 <CODEC_IO_Write>
 8007e06:	4603      	mov	r3, r0
 8007e08:	461a      	mov	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

			/* Right Headphone Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8007e10:	88fb      	ldrh	r3, [r7, #6]
 8007e12:	b2d8      	uxtb	r0, r3
 8007e14:	7afb      	ldrb	r3, [r7, #11]
 8007e16:	b21b      	sxth	r3, r3
 8007e18:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007e1c:	b21b      	sxth	r3, r3
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	461a      	mov	r2, r3
 8007e22:	211d      	movs	r1, #29
 8007e24:	f000 faf4 	bl	8008410 <CODEC_IO_Write>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4413      	add	r3, r2
 8007e30:	60fb      	str	r3, [r7, #12]

			/* Left Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	b2d8      	uxtb	r0, r3
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	b21b      	sxth	r3, r3
 8007e3a:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007e3e:	b21b      	sxth	r3, r3
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	461a      	mov	r2, r3
 8007e44:	2126      	movs	r1, #38	@ 0x26
 8007e46:	f000 fae3 	bl	8008410 <CODEC_IO_Write>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	60fb      	str	r3, [r7, #12]

			/* Right Speaker Volume */
			counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8007e54:	88fb      	ldrh	r3, [r7, #6]
 8007e56:	b2d8      	uxtb	r0, r3
 8007e58:	7afb      	ldrb	r3, [r7, #11]
 8007e5a:	b21b      	sxth	r3, r3
 8007e5c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8007e60:	b21b      	sxth	r3, r3
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	2127      	movs	r1, #39	@ 0x27
 8007e68:	f000 fad2 	bl	8008410 <CODEC_IO_Write>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4413      	add	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
		}
	}
	return counter;
 8007e76:	68fb      	ldr	r3, [r7, #12]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	51eb851f 	.word	0x51eb851f
 8007e84:	20000e58 	.word	0x20000e58

08007e88 <wm8994_SetVolumeIn>:
uint32_t wm8994_SetVolumeIn(uint16_t DeviceAddr, uint8_t Volume) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	460a      	mov	r2, r1
 8007e92:	80fb      	strh	r3, [r7, #6]
 8007e94:	4613      	mov	r3, r2
 8007e96:	717b      	strb	r3, [r7, #5]
	uint32_t counter = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]
	if (inputEnabled != 0) {
 8007e9c:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <wm8994_SetVolumeIn+0xb8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d047      	beq.n	8007f34 <wm8994_SetVolumeIn+0xac>
		// B1 = 0dB
		/* Left AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x400, Volume | 0x100);
 8007ea4:	88fb      	ldrh	r3, [r7, #6]
 8007ea6:	b2d8      	uxtb	r0, r3
 8007ea8:	797b      	ldrb	r3, [r7, #5]
 8007eaa:	b21b      	sxth	r3, r3
 8007eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eb0:	b21b      	sxth	r3, r3
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007eba:	f000 faa9 	bl	8008410 <CODEC_IO_Write>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC1 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x401, Volume | 0x100);
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	b2d8      	uxtb	r0, r3
 8007ecc:	797b      	ldrb	r3, [r7, #5]
 8007ece:	b21b      	sxth	r3, r3
 8007ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ed4:	b21b      	sxth	r3, r3
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	f240 4101 	movw	r1, #1025	@ 0x401
 8007ede:	f000 fa97 	bl	8008410 <CODEC_IO_Write>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	4413      	add	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]

		/* Left AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x404, Volume | 0x100);
 8007eec:	88fb      	ldrh	r3, [r7, #6]
 8007eee:	b2d8      	uxtb	r0, r3
 8007ef0:	797b      	ldrb	r3, [r7, #5]
 8007ef2:	b21b      	sxth	r3, r3
 8007ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef8:	b21b      	sxth	r3, r3
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	f240 4104 	movw	r1, #1028	@ 0x404
 8007f02:	f000 fa85 	bl	8008410 <CODEC_IO_Write>
 8007f06:	4603      	mov	r3, r0
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]

		/* Right AIF1 ADC2 volume */
		counter += CODEC_IO_Write(DeviceAddr, 0x405, Volume | 0x100);
 8007f10:	88fb      	ldrh	r3, [r7, #6]
 8007f12:	b2d8      	uxtb	r0, r3
 8007f14:	797b      	ldrb	r3, [r7, #5]
 8007f16:	b21b      	sxth	r3, r3
 8007f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f1c:	b21b      	sxth	r3, r3
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	f240 4105 	movw	r1, #1029	@ 0x405
 8007f26:	f000 fa73 	bl	8008410 <CODEC_IO_Write>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4413      	add	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]
	}
	return counter;
 8007f34:	68fb      	ldr	r3, [r7, #12]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000e5c 	.word	0x20000e5c

08007f44 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8007f54:	4b21      	ldr	r3, [pc, #132]	@ (8007fdc <wm8994_SetMute+0x98>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d039      	beq.n	8007fd0 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d11c      	bne.n	8007f9c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f6a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fa4e 	bl	8008410 <CODEC_IO_Write>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f86:	f240 4122 	movw	r1, #1058	@ 0x422
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fa40 	bl	8008410 <CODEC_IO_Write>
 8007f90:	4603      	mov	r3, r0
 8007f92:	461a      	mov	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]
 8007f9a:	e019      	b.n	8007fd0 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2210      	movs	r2, #16
 8007fa2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fa32 	bl	8008410 <CODEC_IO_Write>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8007fb6:	88fb      	ldrh	r3, [r7, #6]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2210      	movs	r2, #16
 8007fbc:	f240 4122 	movw	r1, #1058	@ 0x422
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fa25 	bl	8008410 <CODEC_IO_Write>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	461a      	mov	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4413      	add	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000e58 	.word	0x20000e58

08007fe0 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	460a      	mov	r2, r1
 8007fea:	80fb      	strh	r3, [r7, #6]
 8007fec:	4613      	mov	r3, r2
 8007fee:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8007ff4:	797b      	ldrb	r3, [r7, #5]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	f000 808c 	beq.w	8008114 <wm8994_SetOutputMode+0x134>
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	f300 80cb 	bgt.w	8008198 <wm8994_SetOutputMode+0x1b8>
 8008002:	2b01      	cmp	r3, #1
 8008004:	d002      	beq.n	800800c <wm8994_SetOutputMode+0x2c>
 8008006:	2b02      	cmp	r3, #2
 8008008:	d042      	beq.n	8008090 <wm8994_SetOutputMode+0xb0>
 800800a:	e0c5      	b.n	8008198 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800800c:	88fb      	ldrh	r3, [r7, #6]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8008014:	2105      	movs	r1, #5
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f9fa 	bl	8008410 <CODEC_IO_Write>
 800801c:	4603      	mov	r3, r0
 800801e:	461a      	mov	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2200      	movs	r2, #0
 800802c:	f240 6101 	movw	r1, #1537	@ 0x601
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f9ed 	bl	8008410 <CODEC_IO_Write>
 8008036:	4603      	mov	r3, r0
 8008038:	461a      	mov	r2, r3
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	4413      	add	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8008040:	88fb      	ldrh	r3, [r7, #6]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2200      	movs	r2, #0
 8008046:	f240 6102 	movw	r1, #1538	@ 0x602
 800804a:	4618      	mov	r0, r3
 800804c:	f000 f9e0 	bl	8008410 <CODEC_IO_Write>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800805a:	88fb      	ldrh	r3, [r7, #6]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2202      	movs	r2, #2
 8008060:	f240 6104 	movw	r1, #1540	@ 0x604
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f9d3 	bl	8008410 <CODEC_IO_Write>
 800806a:	4603      	mov	r3, r0
 800806c:	461a      	mov	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8008074:	88fb      	ldrh	r3, [r7, #6]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2202      	movs	r2, #2
 800807a:	f240 6105 	movw	r1, #1541	@ 0x605
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f9c6 	bl	8008410 <CODEC_IO_Write>
 8008084:	4603      	mov	r3, r0
 8008086:	461a      	mov	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]
    break;
 800808e:	e0c5      	b.n	800821c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f240 3203 	movw	r2, #771	@ 0x303
 8008098:	2105      	movs	r1, #5
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f9b8 	bl	8008410 <CODEC_IO_Write>
 80080a0:	4603      	mov	r3, r0
 80080a2:	461a      	mov	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4413      	add	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2201      	movs	r2, #1
 80080b0:	f240 6101 	movw	r1, #1537	@ 0x601
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 f9ab 	bl	8008410 <CODEC_IO_Write>
 80080ba:	4603      	mov	r3, r0
 80080bc:	461a      	mov	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	4413      	add	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2201      	movs	r2, #1
 80080ca:	f240 6102 	movw	r1, #1538	@ 0x602
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f99e 	bl	8008410 <CODEC_IO_Write>
 80080d4:	4603      	mov	r3, r0
 80080d6:	461a      	mov	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4413      	add	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	2200      	movs	r2, #0
 80080e4:	f240 6104 	movw	r1, #1540	@ 0x604
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 f991 	bl	8008410 <CODEC_IO_Write>
 80080ee:	4603      	mov	r3, r0
 80080f0:	461a      	mov	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4413      	add	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2200      	movs	r2, #0
 80080fe:	f240 6105 	movw	r1, #1541	@ 0x605
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f984 	bl	8008410 <CODEC_IO_Write>
 8008108:	4603      	mov	r3, r0
 800810a:	461a      	mov	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	4413      	add	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
    break;
 8008112:	e083      	b.n	800821c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	f640 720f 	movw	r2, #3855	@ 0xf0f
 800811c:	2105      	movs	r1, #5
 800811e:	4618      	mov	r0, r3
 8008120:	f000 f976 	bl	8008410 <CODEC_IO_Write>
 8008124:	4603      	mov	r3, r0
 8008126:	461a      	mov	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800812e:	88fb      	ldrh	r3, [r7, #6]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2201      	movs	r2, #1
 8008134:	f240 6101 	movw	r1, #1537	@ 0x601
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f969 	bl	8008410 <CODEC_IO_Write>
 800813e:	4603      	mov	r3, r0
 8008140:	461a      	mov	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8008148:	88fb      	ldrh	r3, [r7, #6]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2201      	movs	r2, #1
 800814e:	f240 6102 	movw	r1, #1538	@ 0x602
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f95c 	bl	8008410 <CODEC_IO_Write>
 8008158:	4603      	mov	r3, r0
 800815a:	461a      	mov	r2, r3
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4413      	add	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2202      	movs	r2, #2
 8008168:	f240 6104 	movw	r1, #1540	@ 0x604
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f94f 	bl	8008410 <CODEC_IO_Write>
 8008172:	4603      	mov	r3, r0
 8008174:	461a      	mov	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4413      	add	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2202      	movs	r2, #2
 8008182:	f240 6105 	movw	r1, #1541	@ 0x605
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f942 	bl	8008410 <CODEC_IO_Write>
 800818c:	4603      	mov	r3, r0
 800818e:	461a      	mov	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4413      	add	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
    break;
 8008196:	e041      	b.n	800821c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8008198:	88fb      	ldrh	r3, [r7, #6]
 800819a:	b2db      	uxtb	r3, r3
 800819c:	f240 3203 	movw	r2, #771	@ 0x303
 80081a0:	2105      	movs	r1, #5
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 f934 	bl	8008410 <CODEC_IO_Write>
 80081a8:	4603      	mov	r3, r0
 80081aa:	461a      	mov	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4413      	add	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80081b2:	88fb      	ldrh	r3, [r7, #6]
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	2201      	movs	r2, #1
 80081b8:	f240 6101 	movw	r1, #1537	@ 0x601
 80081bc:	4618      	mov	r0, r3
 80081be:	f000 f927 	bl	8008410 <CODEC_IO_Write>
 80081c2:	4603      	mov	r3, r0
 80081c4:	461a      	mov	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4413      	add	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80081cc:	88fb      	ldrh	r3, [r7, #6]
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2201      	movs	r2, #1
 80081d2:	f240 6102 	movw	r1, #1538	@ 0x602
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f91a 	bl	8008410 <CODEC_IO_Write>
 80081dc:	4603      	mov	r3, r0
 80081de:	461a      	mov	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4413      	add	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80081e6:	88fb      	ldrh	r3, [r7, #6]
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2200      	movs	r2, #0
 80081ec:	f240 6104 	movw	r1, #1540	@ 0x604
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f90d 	bl	8008410 <CODEC_IO_Write>
 80081f6:	4603      	mov	r3, r0
 80081f8:	461a      	mov	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8008200:	88fb      	ldrh	r3, [r7, #6]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2200      	movs	r2, #0
 8008206:	f240 6105 	movw	r1, #1541	@ 0x605
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f900 	bl	8008410 <CODEC_IO_Write>
 8008210:	4603      	mov	r3, r0
 8008212:	461a      	mov	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4413      	add	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
    break;    
 800821a:	bf00      	nop
  }  
  return counter;
 800821c:	68fb      	ldr	r3, [r7, #12]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	6039      	str	r1, [r7, #0]
 8008232:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	4a64      	ldr	r2, [pc, #400]	@ (80083cc <wm8994_SetFrequency+0x1a4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d079      	beq.n	8008334 <wm8994_SetFrequency+0x10c>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	4a62      	ldr	r2, [pc, #392]	@ (80083cc <wm8994_SetFrequency+0x1a4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	f200 80ad 	bhi.w	80083a4 <wm8994_SetFrequency+0x17c>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8008250:	4293      	cmp	r3, r2
 8008252:	d061      	beq.n	8008318 <wm8994_SetFrequency+0xf0>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800825a:	4293      	cmp	r3, r2
 800825c:	f200 80a2 	bhi.w	80083a4 <wm8994_SetFrequency+0x17c>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8008266:	4293      	cmp	r3, r2
 8008268:	f000 808e 	beq.w	8008388 <wm8994_SetFrequency+0x160>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8008272:	4293      	cmp	r3, r2
 8008274:	f200 8096 	bhi.w	80083a4 <wm8994_SetFrequency+0x17c>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800827e:	d03d      	beq.n	80082fc <wm8994_SetFrequency+0xd4>
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8008286:	f200 808d 	bhi.w	80083a4 <wm8994_SetFrequency+0x17c>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8008290:	4293      	cmp	r3, r2
 8008292:	d06b      	beq.n	800836c <wm8994_SetFrequency+0x144>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f245 6222 	movw	r2, #22050	@ 0x5622
 800829a:	4293      	cmp	r3, r2
 800829c:	f200 8082 	bhi.w	80083a4 <wm8994_SetFrequency+0x17c>
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80082a6:	d01b      	beq.n	80082e0 <wm8994_SetFrequency+0xb8>
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80082ae:	d879      	bhi.n	80083a4 <wm8994_SetFrequency+0x17c>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80082b6:	d005      	beq.n	80082c4 <wm8994_SetFrequency+0x9c>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80082be:	4293      	cmp	r3, r2
 80082c0:	d046      	beq.n	8008350 <wm8994_SetFrequency+0x128>
 80082c2:	e06f      	b.n	80083a4 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80082c4:	88fb      	ldrh	r3, [r7, #6]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2203      	movs	r2, #3
 80082ca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f89e 	bl	8008410 <CODEC_IO_Write>
 80082d4:	4603      	mov	r3, r0
 80082d6:	461a      	mov	r2, r3
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
    break;
 80082de:	e06f      	b.n	80083c0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2233      	movs	r2, #51	@ 0x33
 80082e6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 f890 	bl	8008410 <CODEC_IO_Write>
 80082f0:	4603      	mov	r3, r0
 80082f2:	461a      	mov	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
    break;
 80082fa:	e061      	b.n	80083c0 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80082fc:	88fb      	ldrh	r3, [r7, #6]
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2263      	movs	r2, #99	@ 0x63
 8008302:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008306:	4618      	mov	r0, r3
 8008308:	f000 f882 	bl	8008410 <CODEC_IO_Write>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
    break;
 8008316:	e053      	b.n	80083c0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2283      	movs	r2, #131	@ 0x83
 800831e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008322:	4618      	mov	r0, r3
 8008324:	f000 f874 	bl	8008410 <CODEC_IO_Write>
 8008328:	4603      	mov	r3, r0
 800832a:	461a      	mov	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
    break;
 8008332:	e045      	b.n	80083c0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8008334:	88fb      	ldrh	r3, [r7, #6]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	22a3      	movs	r2, #163	@ 0xa3
 800833a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800833e:	4618      	mov	r0, r3
 8008340:	f000 f866 	bl	8008410 <CODEC_IO_Write>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	4413      	add	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]
    break;
 800834e:	e037      	b.n	80083c0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2213      	movs	r2, #19
 8008356:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800835a:	4618      	mov	r0, r3
 800835c:	f000 f858 	bl	8008410 <CODEC_IO_Write>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
    break;
 800836a:	e029      	b.n	80083c0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800836c:	88fb      	ldrh	r3, [r7, #6]
 800836e:	b2db      	uxtb	r3, r3
 8008370:	2243      	movs	r2, #67	@ 0x43
 8008372:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008376:	4618      	mov	r0, r3
 8008378:	f000 f84a 	bl	8008410 <CODEC_IO_Write>
 800837c:	4603      	mov	r3, r0
 800837e:	461a      	mov	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]
    break;
 8008386:	e01b      	b.n	80083c0 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8008388:	88fb      	ldrh	r3, [r7, #6]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2273      	movs	r2, #115	@ 0x73
 800838e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8008392:	4618      	mov	r0, r3
 8008394:	f000 f83c 	bl	8008410 <CODEC_IO_Write>
 8008398:	4603      	mov	r3, r0
 800839a:	461a      	mov	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]
    break; 
 80083a2:	e00d      	b.n	80083c0 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2283      	movs	r2, #131	@ 0x83
 80083aa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 f82e 	bl	8008410 <CODEC_IO_Write>
 80083b4:	4603      	mov	r3, r0
 80083b6:	461a      	mov	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	4413      	add	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
    break; 
 80083be:	bf00      	nop
  }
  return counter;
 80083c0:	68fb      	ldr	r3, [r7, #12]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	00017700 	.word	0x00017700

080083d0 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2200      	movs	r2, #0
 80083e4:	2100      	movs	r1, #0
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f812 	bl	8008410 <CODEC_IO_Write>
 80083ec:	4603      	mov	r3, r0
 80083ee:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80083f0:	4b05      	ldr	r3, [pc, #20]	@ (8008408 <wm8994_Reset+0x38>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80083f6:	4b05      	ldr	r3, [pc, #20]	@ (800840c <wm8994_Reset+0x3c>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]

  return counter;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20000e58 	.word	0x20000e58
 800840c:	20000e5c 	.word	0x20000e5c

08008410 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	4603      	mov	r3, r0
 8008418:	71fb      	strb	r3, [r7, #7]
 800841a:	460b      	mov	r3, r1
 800841c:	80bb      	strh	r3, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8008422:	2300      	movs	r3, #0
 8008424:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8008426:	887a      	ldrh	r2, [r7, #2]
 8008428:	88b9      	ldrh	r1, [r7, #4]
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	4618      	mov	r0, r3
 800842e:	f7fc f9e5 	bl	80047fc <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	b2db      	uxtb	r3, r3
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008440:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008478 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008444:	480d      	ldr	r0, [pc, #52]	@ (800847c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008446:	490e      	ldr	r1, [pc, #56]	@ (8008480 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008448:	4a0e      	ldr	r2, [pc, #56]	@ (8008484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800844a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800844c:	e002      	b.n	8008454 <LoopCopyDataInit>

0800844e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800844e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008452:	3304      	adds	r3, #4

08008454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008458:	d3f9      	bcc.n	800844e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800845a:	4a0b      	ldr	r2, [pc, #44]	@ (8008488 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800845c:	4c0b      	ldr	r4, [pc, #44]	@ (800848c <LoopFillZerobss+0x26>)
  movs r3, #0
 800845e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008460:	e001      	b.n	8008466 <LoopFillZerobss>

08008462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008464:	3204      	adds	r2, #4

08008466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008468:	d3fb      	bcc.n	8008462 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800846a:	f7fe fb6b 	bl	8006b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800846e:	f00b fa15 	bl	801389c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008472:	f7fa fef5 	bl	8003260 <main>
  bx  lr    
 8008476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008478:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800847c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008480:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8008484:	08016288 	.word	0x08016288
  ldr r2, =_sbss
 8008488:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 800848c:	200095b4 	.word	0x200095b4

08008490 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008490:	e7fe      	b.n	8008490 <ADC_IRQHandler>

08008492 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008496:	2003      	movs	r0, #3
 8008498:	f000 fb8d 	bl	8008bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800849c:	2000      	movs	r0, #0
 800849e:	f7fe fa3f 	bl	8006920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084a2:	f7fd fd57 	bl	8005f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084b0:	4b06      	ldr	r3, [pc, #24]	@ (80084cc <HAL_IncTick+0x20>)
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b06      	ldr	r3, [pc, #24]	@ (80084d0 <HAL_IncTick+0x24>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4413      	add	r3, r2
 80084bc:	4a04      	ldr	r2, [pc, #16]	@ (80084d0 <HAL_IncTick+0x24>)
 80084be:	6013      	str	r3, [r2, #0]
}
 80084c0:	bf00      	nop
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20000084 	.word	0x20000084
 80084d0:	20000e60 	.word	0x20000e60

080084d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0
  return uwTick;
 80084d8:	4b03      	ldr	r3, [pc, #12]	@ (80084e8 <HAL_GetTick+0x14>)
 80084da:	681b      	ldr	r3, [r3, #0]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	20000e60 	.word	0x20000e60

080084ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084f4:	f7ff ffee 	bl	80084d4 <HAL_GetTick>
 80084f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008504:	d005      	beq.n	8008512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008506:	4b0a      	ldr	r3, [pc, #40]	@ (8008530 <HAL_Delay+0x44>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008512:	bf00      	nop
 8008514:	f7ff ffde 	bl	80084d4 <HAL_GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	429a      	cmp	r2, r3
 8008522:	d8f7      	bhi.n	8008514 <HAL_Delay+0x28>
  {
  }
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000084 	.word	0x20000084

08008534 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e031      	b.n	80085ae <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fd fd26 	bl	8005fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856a:	f003 0310 	and.w	r3, r3, #16
 800856e:	2b00      	cmp	r3, #0
 8008570:	d116      	bne.n	80085a0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008576:	4b10      	ldr	r3, [pc, #64]	@ (80085b8 <HAL_ADC_Init+0x84>)
 8008578:	4013      	ands	r3, r2
 800857a:	f043 0202 	orr.w	r2, r3, #2
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f970 	bl	8008868 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	f043 0201 	orr.w	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	641a      	str	r2, [r3, #64]	@ 0x40
 800859e:	e001      	b.n	80085a4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	ffffeefd 	.word	0xffffeefd

080085bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_ADC_ConfigChannel+0x1c>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e136      	b.n	8008846 <HAL_ADC_ConfigChannel+0x28a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b09      	cmp	r3, #9
 80085e6:	d93a      	bls.n	800865e <HAL_ADC_ConfigChannel+0xa2>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085f0:	d035      	beq.n	800865e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68d9      	ldr	r1, [r3, #12]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	461a      	mov	r2, r3
 8008600:	4613      	mov	r3, r2
 8008602:	005b      	lsls	r3, r3, #1
 8008604:	4413      	add	r3, r2
 8008606:	3b1e      	subs	r3, #30
 8008608:	2207      	movs	r2, #7
 800860a:	fa02 f303 	lsl.w	r3, r2, r3
 800860e:	43da      	mvns	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	400a      	ands	r2, r1
 8008616:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a8d      	ldr	r2, [pc, #564]	@ (8008854 <HAL_ADC_ConfigChannel+0x298>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d10a      	bne.n	8008638 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68d9      	ldr	r1, [r3, #12]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	061a      	lsls	r2, r3, #24
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	430a      	orrs	r2, r1
 8008634:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008636:	e035      	b.n	80086a4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68d9      	ldr	r1, [r3, #12]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	b29b      	uxth	r3, r3
 8008648:	4618      	mov	r0, r3
 800864a:	4603      	mov	r3, r0
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4403      	add	r3, r0
 8008650:	3b1e      	subs	r3, #30
 8008652:	409a      	lsls	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800865c:	e022      	b.n	80086a4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6919      	ldr	r1, [r3, #16]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	b29b      	uxth	r3, r3
 800866a:	461a      	mov	r2, r3
 800866c:	4613      	mov	r3, r2
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	4413      	add	r3, r2
 8008672:	2207      	movs	r2, #7
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	43da      	mvns	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	400a      	ands	r2, r1
 8008680:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6919      	ldr	r1, [r3, #16]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	4618      	mov	r0, r3
 8008694:	4603      	mov	r3, r0
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	4403      	add	r3, r0
 800869a:	409a      	lsls	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	2b06      	cmp	r3, #6
 80086aa:	d824      	bhi.n	80086f6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	3b05      	subs	r3, #5
 80086be:	221f      	movs	r2, #31
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	43da      	mvns	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	400a      	ands	r2, r1
 80086cc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4618      	mov	r0, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	3b05      	subs	r3, #5
 80086e8:	fa00 f203 	lsl.w	r2, r0, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80086f4:	e04c      	b.n	8008790 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	2b0c      	cmp	r3, #12
 80086fc:	d824      	bhi.n	8008748 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	3b23      	subs	r3, #35	@ 0x23
 8008710:	221f      	movs	r2, #31
 8008712:	fa02 f303 	lsl.w	r3, r2, r3
 8008716:	43da      	mvns	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	400a      	ands	r2, r1
 800871e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	4618      	mov	r0, r3
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	4613      	mov	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	3b23      	subs	r3, #35	@ 0x23
 800873a:	fa00 f203 	lsl.w	r2, r0, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	430a      	orrs	r2, r1
 8008744:	631a      	str	r2, [r3, #48]	@ 0x30
 8008746:	e023      	b.n	8008790 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	3b41      	subs	r3, #65	@ 0x41
 800875a:	221f      	movs	r2, #31
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	43da      	mvns	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	400a      	ands	r2, r1
 8008768:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	b29b      	uxth	r3, r3
 8008776:	4618      	mov	r0, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	3b41      	subs	r3, #65	@ 0x41
 8008784:	fa00 f203 	lsl.w	r2, r0, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a30      	ldr	r2, [pc, #192]	@ (8008858 <HAL_ADC_ConfigChannel+0x29c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d10a      	bne.n	80087b0 <HAL_ADC_ConfigChannel+0x1f4>
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087a2:	d105      	bne.n	80087b0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80087a4:	4b2d      	ldr	r3, [pc, #180]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	4a2c      	ldr	r2, [pc, #176]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 80087aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80087ae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a28      	ldr	r2, [pc, #160]	@ (8008858 <HAL_ADC_ConfigChannel+0x29c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d10f      	bne.n	80087da <HAL_ADC_ConfigChannel+0x21e>
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b12      	cmp	r3, #18
 80087c0:	d10b      	bne.n	80087da <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80087c2:	4b26      	ldr	r3, [pc, #152]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	4a25      	ldr	r2, [pc, #148]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 80087c8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80087cc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80087ce:	4b23      	ldr	r3, [pc, #140]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	4a22      	ldr	r2, [pc, #136]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 80087d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80087d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a1e      	ldr	r2, [pc, #120]	@ (8008858 <HAL_ADC_ConfigChannel+0x29c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d12b      	bne.n	800883c <HAL_ADC_ConfigChannel+0x280>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008854 <HAL_ADC_ConfigChannel+0x298>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <HAL_ADC_ConfigChannel+0x23a>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b11      	cmp	r3, #17
 80087f4:	d122      	bne.n	800883c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80087f6:	4b19      	ldr	r3, [pc, #100]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	4a18      	ldr	r2, [pc, #96]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 80087fc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8008800:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008802:	4b16      	ldr	r3, [pc, #88]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	4a15      	ldr	r2, [pc, #84]	@ (800885c <HAL_ADC_ConfigChannel+0x2a0>)
 8008808:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800880c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a10      	ldr	r2, [pc, #64]	@ (8008854 <HAL_ADC_ConfigChannel+0x298>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d111      	bne.n	800883c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008818:	4b11      	ldr	r3, [pc, #68]	@ (8008860 <HAL_ADC_ConfigChannel+0x2a4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a11      	ldr	r2, [pc, #68]	@ (8008864 <HAL_ADC_ConfigChannel+0x2a8>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	0c9a      	lsrs	r2, r3, #18
 8008824:	4613      	mov	r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800882e:	e002      	b.n	8008836 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3b01      	subs	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f9      	bne.n	8008830 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	10000012 	.word	0x10000012
 8008858:	40012000 	.word	0x40012000
 800885c:	40012300 	.word	0x40012300
 8008860:	20000040 	.word	0x20000040
 8008864:	431bde83 	.word	0x431bde83

08008868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008870:	4b78      	ldr	r3, [pc, #480]	@ (8008a54 <ADC_Init+0x1ec>)
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	4a77      	ldr	r2, [pc, #476]	@ (8008a54 <ADC_Init+0x1ec>)
 8008876:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800887a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800887c:	4b75      	ldr	r3, [pc, #468]	@ (8008a54 <ADC_Init+0x1ec>)
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4973      	ldr	r1, [pc, #460]	@ (8008a54 <ADC_Init+0x1ec>)
 8008886:	4313      	orrs	r3, r2
 8008888:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008898:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6859      	ldr	r1, [r3, #4]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	021a      	lsls	r2, r3, #8
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80088bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6859      	ldr	r1, [r3, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689a      	ldr	r2, [r3, #8]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80088de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6899      	ldr	r1, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f6:	4a58      	ldr	r2, [pc, #352]	@ (8008a58 <ADC_Init+0x1f0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d022      	beq.n	8008942 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800890a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6899      	ldr	r1, [r3, #8]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	689a      	ldr	r2, [r3, #8]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800892c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6899      	ldr	r1, [r3, #8]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	609a      	str	r2, [r3, #8]
 8008940:	e00f      	b.n	8008962 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689a      	ldr	r2, [r3, #8]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008950:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008960:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0202 	bic.w	r2, r2, #2
 8008970:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6899      	ldr	r1, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	005a      	lsls	r2, r3, #1
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d01b      	beq.n	80089c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800899e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80089ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6859      	ldr	r1, [r3, #4]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ba:	3b01      	subs	r3, #1
 80089bc:	035a      	lsls	r2, r3, #13
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	605a      	str	r2, [r3, #4]
 80089c6:	e007      	b.n	80089d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80089e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	051a      	lsls	r2, r3, #20
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008a0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6899      	ldr	r1, [r3, #8]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a1a:	025a      	lsls	r2, r3, #9
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689a      	ldr	r2, [r3, #8]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6899      	ldr	r1, [r3, #8]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	029a      	lsls	r2, r3, #10
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
}
 8008a48:	bf00      	nop
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	40012300 	.word	0x40012300
 8008a58:	0f000001 	.word	0x0f000001

08008a5c <__NVIC_SetPriorityGrouping>:
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a9c <__NVIC_SetPriorityGrouping+0x40>)
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008a78:	4013      	ands	r3, r2
 8008a7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008a84:	4b06      	ldr	r3, [pc, #24]	@ (8008aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a8a:	4a04      	ldr	r2, [pc, #16]	@ (8008a9c <__NVIC_SetPriorityGrouping+0x40>)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	60d3      	str	r3, [r2, #12]
}
 8008a90:	bf00      	nop
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	e000ed00 	.word	0xe000ed00
 8008aa0:	05fa0000 	.word	0x05fa0000

08008aa4 <__NVIC_GetPriorityGrouping>:
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008aa8:	4b04      	ldr	r3, [pc, #16]	@ (8008abc <__NVIC_GetPriorityGrouping+0x18>)
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	f003 0307 	and.w	r3, r3, #7
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	e000ed00 	.word	0xe000ed00

08008ac0 <__NVIC_EnableIRQ>:
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	db0b      	blt.n	8008aea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	f003 021f 	and.w	r2, r3, #31
 8008ad8:	4907      	ldr	r1, [pc, #28]	@ (8008af8 <__NVIC_EnableIRQ+0x38>)
 8008ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ade:	095b      	lsrs	r3, r3, #5
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	e000e100 	.word	0xe000e100

08008afc <__NVIC_SetPriority>:
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	db0a      	blt.n	8008b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	490c      	ldr	r1, [pc, #48]	@ (8008b48 <__NVIC_SetPriority+0x4c>)
 8008b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b1a:	0112      	lsls	r2, r2, #4
 8008b1c:	b2d2      	uxtb	r2, r2
 8008b1e:	440b      	add	r3, r1
 8008b20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b24:	e00a      	b.n	8008b3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	4908      	ldr	r1, [pc, #32]	@ (8008b4c <__NVIC_SetPriority+0x50>)
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	f003 030f 	and.w	r3, r3, #15
 8008b32:	3b04      	subs	r3, #4
 8008b34:	0112      	lsls	r2, r2, #4
 8008b36:	b2d2      	uxtb	r2, r2
 8008b38:	440b      	add	r3, r1
 8008b3a:	761a      	strb	r2, [r3, #24]
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	e000e100 	.word	0xe000e100
 8008b4c:	e000ed00 	.word	0xe000ed00

08008b50 <NVIC_EncodePriority>:
{
 8008b50:	b480      	push	{r7}
 8008b52:	b089      	sub	sp, #36	@ 0x24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f003 0307 	and.w	r3, r3, #7
 8008b62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	f1c3 0307 	rsb	r3, r3, #7
 8008b6a:	2b04      	cmp	r3, #4
 8008b6c:	bf28      	it	cs
 8008b6e:	2304      	movcs	r3, #4
 8008b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	3304      	adds	r3, #4
 8008b76:	2b06      	cmp	r3, #6
 8008b78:	d902      	bls.n	8008b80 <NVIC_EncodePriority+0x30>
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	3b03      	subs	r3, #3
 8008b7e:	e000      	b.n	8008b82 <NVIC_EncodePriority+0x32>
 8008b80:	2300      	movs	r3, #0
 8008b82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8e:	43da      	mvns	r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	401a      	ands	r2, r3
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b98:	f04f 31ff 	mov.w	r1, #4294967295
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba2:	43d9      	mvns	r1, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ba8:	4313      	orrs	r3, r2
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3724      	adds	r7, #36	@ 0x24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7ff ff4c 	bl	8008a5c <__NVIC_SetPriorityGrouping>
}
 8008bc4:	bf00      	nop
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b086      	sub	sp, #24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bde:	f7ff ff61 	bl	8008aa4 <__NVIC_GetPriorityGrouping>
 8008be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	6978      	ldr	r0, [r7, #20]
 8008bea:	f7ff ffb1 	bl	8008b50 <NVIC_EncodePriority>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bf4:	4611      	mov	r1, r2
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff ff80 	bl	8008afc <__NVIC_SetPriority>
}
 8008bfc:	bf00      	nop
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff ff54 	bl	8008ac0 <__NVIC_EnableIRQ>
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008c2c:	f7ff fc52 	bl	80084d4 <HAL_GetTick>
 8008c30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e099      	b.n	8008d70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0201 	bic.w	r2, r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c5c:	e00f      	b.n	8008c7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c5e:	f7ff fc39 	bl	80084d4 <HAL_GetTick>
 8008c62:	4602      	mov	r2, r0
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2b05      	cmp	r3, #5
 8008c6a:	d908      	bls.n	8008c7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2203      	movs	r2, #3
 8008c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008c7a:	2303      	movs	r3, #3
 8008c7c:	e078      	b.n	8008d70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1e8      	bne.n	8008c5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	4b38      	ldr	r3, [pc, #224]	@ (8008d78 <HAL_DMA_Init+0x158>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d107      	bne.n	8008ce8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f023 0307 	bic.w	r3, r3, #7
 8008cfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	d117      	bne.n	8008d42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00e      	beq.n	8008d42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fb03 	bl	8009330 <DMA_CheckFifoParam>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d008      	beq.n	8008d42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2240      	movs	r2, #64	@ 0x40
 8008d34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e016      	b.n	8008d70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 faba 	bl	80092c4 <DMA_CalcBaseAndBitshift>
 8008d50:	4603      	mov	r3, r0
 8008d52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d58:	223f      	movs	r2, #63	@ 0x3f
 8008d5a:	409a      	lsls	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3718      	adds	r7, #24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	f010803f 	.word	0xf010803f

08008d7c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	e050      	b.n	8008e30 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d101      	bne.n	8008d9e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	e048      	b.n	8008e30 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f022 0201 	bic.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2221      	movs	r2, #33	@ 0x21
 8008ddc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fa70 	bl	80092c4 <DMA_CalcBaseAndBitshift>
 8008de4:	4603      	mov	r3, r0
 8008de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dec:	223f      	movs	r2, #63	@ 0x3f
 8008dee:	409a      	lsls	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_DMA_Start_IT+0x26>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e048      	b.n	8008ef0 <HAL_DMA_Start_IT+0xb8>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d137      	bne.n	8008ee2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2202      	movs	r2, #2
 8008e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 f9ee 	bl	8009268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e90:	223f      	movs	r2, #63	@ 0x3f
 8008e92:	409a      	lsls	r2, r3
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0216 	orr.w	r2, r2, #22
 8008ea6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	695a      	ldr	r2, [r3, #20]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008eb6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0208 	orr.w	r2, r2, #8
 8008ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f042 0201 	orr.w	r2, r2, #1
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	e005      	b.n	8008eee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008eea:	2302      	movs	r3, #2
 8008eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3718      	adds	r7, #24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d004      	beq.n	8008f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2280      	movs	r2, #128	@ 0x80
 8008f10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e00c      	b.n	8008f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2205      	movs	r2, #5
 8008f1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 0201 	bic.w	r2, r2, #1
 8008f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008f48:	4b8e      	ldr	r3, [pc, #568]	@ (8009184 <HAL_DMA_IRQHandler+0x248>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a8e      	ldr	r2, [pc, #568]	@ (8009188 <HAL_DMA_IRQHandler+0x24c>)
 8008f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f52:	0a9b      	lsrs	r3, r3, #10
 8008f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f66:	2208      	movs	r2, #8
 8008f68:	409a      	lsls	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4013      	ands	r3, r2
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d01a      	beq.n	8008fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0304 	and.w	r3, r3, #4
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d013      	beq.n	8008fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0204 	bic.w	r2, r2, #4
 8008f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f94:	2208      	movs	r2, #8
 8008f96:	409a      	lsls	r2, r3
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa0:	f043 0201 	orr.w	r2, r3, #1
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fac:	2201      	movs	r2, #1
 8008fae:	409a      	lsls	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d012      	beq.n	8008fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	695b      	ldr	r3, [r3, #20]
 8008fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fca:	2201      	movs	r2, #1
 8008fcc:	409a      	lsls	r2, r3
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd6:	f043 0202 	orr.w	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fe2:	2204      	movs	r2, #4
 8008fe4:	409a      	lsls	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d012      	beq.n	8009014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00b      	beq.n	8009014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009000:	2204      	movs	r2, #4
 8009002:	409a      	lsls	r2, r3
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800900c:	f043 0204 	orr.w	r2, r3, #4
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009018:	2210      	movs	r2, #16
 800901a:	409a      	lsls	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4013      	ands	r3, r2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d043      	beq.n	80090ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0308 	and.w	r3, r3, #8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d03c      	beq.n	80090ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009036:	2210      	movs	r2, #16
 8009038:	409a      	lsls	r2, r3
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d018      	beq.n	800907e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d108      	bne.n	800906c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d024      	beq.n	80090ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	4798      	blx	r3
 800906a:	e01f      	b.n	80090ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009070:	2b00      	cmp	r3, #0
 8009072:	d01b      	beq.n	80090ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4798      	blx	r3
 800907c:	e016      	b.n	80090ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	d107      	bne.n	800909c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0208 	bic.w	r2, r2, #8
 800909a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b0:	2220      	movs	r2, #32
 80090b2:	409a      	lsls	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 808f 	beq.w	80091dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0310 	and.w	r3, r3, #16
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8087 	beq.w	80091dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090d2:	2220      	movs	r2, #32
 80090d4:	409a      	lsls	r2, r3
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	d136      	bne.n	8009154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0216 	bic.w	r2, r2, #22
 80090f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695a      	ldr	r2, [r3, #20]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800910a:	2b00      	cmp	r3, #0
 800910c:	d103      	bne.n	8009116 <HAL_DMA_IRQHandler+0x1da>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 0208 	bic.w	r2, r2, #8
 8009124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800912a:	223f      	movs	r2, #63	@ 0x3f
 800912c:	409a      	lsls	r2, r3
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009146:	2b00      	cmp	r3, #0
 8009148:	d07e      	beq.n	8009248 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	4798      	blx	r3
        }
        return;
 8009152:	e079      	b.n	8009248 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800915e:	2b00      	cmp	r3, #0
 8009160:	d01d      	beq.n	800919e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10d      	bne.n	800918c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009174:	2b00      	cmp	r3, #0
 8009176:	d031      	beq.n	80091dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	4798      	blx	r3
 8009180:	e02c      	b.n	80091dc <HAL_DMA_IRQHandler+0x2a0>
 8009182:	bf00      	nop
 8009184:	20000040 	.word	0x20000040
 8009188:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d023      	beq.n	80091dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	4798      	blx	r3
 800919c:	e01e      	b.n	80091dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10f      	bne.n	80091cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0210 	bic.w	r2, r2, #16
 80091ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d032      	beq.n	800924a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d022      	beq.n	8009236 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2205      	movs	r2, #5
 80091f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0201 	bic.w	r2, r2, #1
 8009206:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	3301      	adds	r3, #1
 800920c:	60bb      	str	r3, [r7, #8]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	429a      	cmp	r2, r3
 8009212:	d307      	bcc.n	8009224 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1f2      	bne.n	8009208 <HAL_DMA_IRQHandler+0x2cc>
 8009222:	e000      	b.n	8009226 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009224:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2201      	movs	r2, #1
 800922a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d005      	beq.n	800924a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3
 8009246:	e000      	b.n	800924a <HAL_DMA_IRQHandler+0x30e>
        return;
 8009248:	bf00      	nop
    }
  }
}
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800925c:	4618      	mov	r0, r3
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	2b40      	cmp	r3, #64	@ 0x40
 8009294:	d108      	bne.n	80092a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80092a6:	e007      	b.n	80092b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	60da      	str	r2, [r3, #12]
}
 80092b8:	bf00      	nop
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	3b10      	subs	r3, #16
 80092d4:	4a13      	ldr	r2, [pc, #76]	@ (8009324 <DMA_CalcBaseAndBitshift+0x60>)
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	091b      	lsrs	r3, r3, #4
 80092dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80092de:	4a12      	ldr	r2, [pc, #72]	@ (8009328 <DMA_CalcBaseAndBitshift+0x64>)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b03      	cmp	r3, #3
 80092f0:	d908      	bls.n	8009304 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	4b0c      	ldr	r3, [pc, #48]	@ (800932c <DMA_CalcBaseAndBitshift+0x68>)
 80092fa:	4013      	ands	r3, r2
 80092fc:	1d1a      	adds	r2, r3, #4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	659a      	str	r2, [r3, #88]	@ 0x58
 8009302:	e006      	b.n	8009312 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	4b08      	ldr	r3, [pc, #32]	@ (800932c <DMA_CalcBaseAndBitshift+0x68>)
 800930c:	4013      	ands	r3, r2
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009316:	4618      	mov	r0, r3
 8009318:	3714      	adds	r7, #20
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	aaaaaaab 	.word	0xaaaaaaab
 8009328:	0801625c 	.word	0x0801625c
 800932c:	fffffc00 	.word	0xfffffc00

08009330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d11f      	bne.n	800938a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b03      	cmp	r3, #3
 800934e:	d856      	bhi.n	80093fe <DMA_CheckFifoParam+0xce>
 8009350:	a201      	add	r2, pc, #4	@ (adr r2, 8009358 <DMA_CheckFifoParam+0x28>)
 8009352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009356:	bf00      	nop
 8009358:	08009369 	.word	0x08009369
 800935c:	0800937b 	.word	0x0800937b
 8009360:	08009369 	.word	0x08009369
 8009364:	080093ff 	.word	0x080093ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d046      	beq.n	8009402 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009378:	e043      	b.n	8009402 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009382:	d140      	bne.n	8009406 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009388:	e03d      	b.n	8009406 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009392:	d121      	bne.n	80093d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b03      	cmp	r3, #3
 8009398:	d837      	bhi.n	800940a <DMA_CheckFifoParam+0xda>
 800939a:	a201      	add	r2, pc, #4	@ (adr r2, 80093a0 <DMA_CheckFifoParam+0x70>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	080093b1 	.word	0x080093b1
 80093a4:	080093b7 	.word	0x080093b7
 80093a8:	080093b1 	.word	0x080093b1
 80093ac:	080093c9 	.word	0x080093c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80093b0:	2301      	movs	r3, #1
 80093b2:	73fb      	strb	r3, [r7, #15]
      break;
 80093b4:	e030      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d025      	beq.n	800940e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093c6:	e022      	b.n	800940e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80093d0:	d11f      	bne.n	8009412 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80093d6:	e01c      	b.n	8009412 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d903      	bls.n	80093e6 <DMA_CheckFifoParam+0xb6>
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b03      	cmp	r3, #3
 80093e2:	d003      	beq.n	80093ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80093e4:	e018      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	73fb      	strb	r3, [r7, #15]
      break;
 80093ea:	e015      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00e      	beq.n	8009416 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80093f8:	2301      	movs	r3, #1
 80093fa:	73fb      	strb	r3, [r7, #15]
      break;
 80093fc:	e00b      	b.n	8009416 <DMA_CheckFifoParam+0xe6>
      break;
 80093fe:	bf00      	nop
 8009400:	e00a      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
      break;
 8009402:	bf00      	nop
 8009404:	e008      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
      break;
 8009406:	bf00      	nop
 8009408:	e006      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
      break;
 800940a:	bf00      	nop
 800940c:	e004      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
      break;
 800940e:	bf00      	nop
 8009410:	e002      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
      break;   
 8009412:	bf00      	nop
 8009414:	e000      	b.n	8009418 <DMA_CheckFifoParam+0xe8>
      break;
 8009416:	bf00      	nop
    }
  } 
  
  return status; 
 8009418:	7bfb      	ldrb	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop

08009428 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e039      	b.n	80094ae <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fc fe2e 	bl	80060b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685a      	ldr	r2, [r3, #4]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009478:	f023 0107 	bic.w	r1, r3, #7
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	430a      	orrs	r2, r1
 8009486:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800948e:	4b0a      	ldr	r3, [pc, #40]	@ (80094b8 <HAL_DMA2D_Init+0x90>)
 8009490:	4013      	ands	r3, r2
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	68d1      	ldr	r1, [r2, #12]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6812      	ldr	r2, [r2, #0]
 800949a:	430b      	orrs	r3, r1
 800949c:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	ffffc000 	.word	0xffffc000

080094bc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	607a      	str	r2, [r7, #4]
 80094c8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d101      	bne.n	80094d8 <HAL_DMA2D_Start+0x1c>
 80094d4:	2302      	movs	r3, #2
 80094d6:	e018      	b.n	800950a <HAL_DMA2D_Start+0x4e>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	68b9      	ldr	r1, [r7, #8]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f988 	bl	8009808 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	4618      	mov	r0, r3
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b086      	sub	sp, #24
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800951c:	2300      	movs	r3, #0
 800951e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d056      	beq.n	80095dc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800952e:	f7fe ffd1 	bl	80084d4 <HAL_GetTick>
 8009532:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8009534:	e04b      	b.n	80095ce <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8009544:	2b00      	cmp	r3, #0
 8009546:	d023      	beq.n	8009590 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	2b00      	cmp	r3, #0
 8009550:	d005      	beq.n	800955e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009556:	f043 0202 	orr.w	r2, r3, #2
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d005      	beq.n	8009574 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800956c:	f043 0201 	orr.w	r2, r3, #1
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2221      	movs	r2, #33	@ 0x21
 800957a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2204      	movs	r2, #4
 8009580:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0a5      	b.n	80096dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009596:	d01a      	beq.n	80095ce <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009598:	f7fe ff9c 	bl	80084d4 <HAL_GetTick>
 800959c:	4602      	mov	r2, r0
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d302      	bcc.n	80095ae <HAL_DMA2D_PollForTransfer+0x9c>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10f      	bne.n	80095ce <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095b2:	f043 0220 	orr.w	r2, r3, #32
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2203      	movs	r2, #3
 80095be:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e086      	b.n	80096dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f003 0302 	and.w	r3, r3, #2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d0ac      	beq.n	8009536 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	f003 0320 	and.w	r3, r3, #32
 80095e6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d061      	beq.n	80096c2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80095fe:	f7fe ff69 	bl	80084d4 <HAL_GetTick>
 8009602:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8009604:	e056      	b.n	80096b4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8009614:	2b00      	cmp	r3, #0
 8009616:	d02e      	beq.n	8009676 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f003 0308 	and.w	r3, r3, #8
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009626:	f043 0204 	orr.w	r2, r3, #4
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f003 0320 	and.w	r3, r3, #32
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800963c:	f043 0202 	orr.w	r2, r3, #2
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d005      	beq.n	800965a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009652:	f043 0201 	orr.w	r2, r3, #1
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2229      	movs	r2, #41	@ 0x29
 8009660:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2204      	movs	r2, #4
 8009666:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e032      	b.n	80096dc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967c:	d01a      	beq.n	80096b4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800967e:	f7fe ff29 	bl	80084d4 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	429a      	cmp	r2, r3
 800968c:	d302      	bcc.n	8009694 <HAL_DMA2D_PollForTransfer+0x182>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10f      	bne.n	80096b4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009698:	f043 0220 	orr.w	r2, r3, #32
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2203      	movs	r2, #3
 80096a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80096b0:	2303      	movs	r3, #3
 80096b2:	e013      	b.n	80096dc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f003 0310 	and.w	r3, r3, #16
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0a1      	beq.n	8009606 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2212      	movs	r2, #18
 80096c8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_DMA2D_ConfigLayer+0x20>
 8009700:	2302      	movs	r3, #2
 8009702:	e079      	b.n	80097f8 <HAL_DMA2D_ConfigLayer+0x114>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2202      	movs	r2, #2
 8009710:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	011b      	lsls	r3, r3, #4
 8009718:	3318      	adds	r3, #24
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	4413      	add	r3, r2
 800971e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	041b      	lsls	r3, r3, #16
 800972a:	4313      	orrs	r3, r2
 800972c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800972e:	4b35      	ldr	r3, [pc, #212]	@ (8009804 <HAL_DMA2D_ConfigLayer+0x120>)
 8009730:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	2b0a      	cmp	r3, #10
 8009738:	d003      	beq.n	8009742 <HAL_DMA2D_ConfigLayer+0x5e>
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	2b09      	cmp	r3, #9
 8009740:	d107      	bne.n	8009752 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	4313      	orrs	r3, r2
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e005      	b.n	800975e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	061b      	lsls	r3, r3, #24
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	4313      	orrs	r3, r2
 800975c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d120      	bne.n	80097a6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	43db      	mvns	r3, r3
 800976e:	ea02 0103 	and.w	r1, r2, r3
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	430a      	orrs	r2, r1
 800977a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	6812      	ldr	r2, [r2, #0]
 8009784:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	2b0a      	cmp	r3, #10
 800978c:	d003      	beq.n	8009796 <HAL_DMA2D_ConfigLayer+0xb2>
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b09      	cmp	r3, #9
 8009794:	d127      	bne.n	80097e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	68da      	ldr	r2, [r3, #12]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80097a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80097a4:	e01f      	b.n	80097e6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69da      	ldr	r2, [r3, #28]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	43db      	mvns	r3, r3
 80097b0:	ea02 0103 	and.w	r1, r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	6812      	ldr	r2, [r2, #0]
 80097c6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2b0a      	cmp	r3, #10
 80097ce:	d003      	beq.n	80097d8 <HAL_DMA2D_ConfigLayer+0xf4>
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b09      	cmp	r3, #9
 80097d6:	d106      	bne.n	80097e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	68da      	ldr	r2, [r3, #12]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80097e4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	371c      	adds	r7, #28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	ff03000f 	.word	0xff03000f

08009808 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8009808:	b480      	push	{r7}
 800980a:	b08b      	sub	sp, #44	@ 0x2c
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800981c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	041a      	lsls	r2, r3, #16
 8009824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009826:	431a      	orrs	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	430a      	orrs	r2, r1
 800982e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009840:	d174      	bne.n	800992c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8009848:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009850:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009858:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d108      	bne.n	800987a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	431a      	orrs	r2, r3
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	4313      	orrs	r3, r2
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	627b      	str	r3, [r7, #36]	@ 0x24
 8009878:	e053      	b.n	8009922 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	2b01      	cmp	r3, #1
 8009880:	d106      	bne.n	8009890 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4313      	orrs	r3, r2
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	4313      	orrs	r3, r2
 800988c:	627b      	str	r3, [r7, #36]	@ 0x24
 800988e:	e048      	b.n	8009922 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d111      	bne.n	80098bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	0cdb      	lsrs	r3, r3, #19
 800989c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	0a9b      	lsrs	r3, r3, #10
 80098a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	08db      	lsrs	r3, r3, #3
 80098a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	02db      	lsls	r3, r3, #11
 80098b2:	4313      	orrs	r3, r2
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ba:	e032      	b.n	8009922 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d117      	bne.n	80098f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	0fdb      	lsrs	r3, r3, #31
 80098c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	0cdb      	lsrs	r3, r3, #19
 80098ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	0adb      	lsrs	r3, r3, #11
 80098d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	08db      	lsrs	r3, r3, #3
 80098da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	029b      	lsls	r3, r3, #10
 80098e4:	431a      	orrs	r2, r3
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	03db      	lsls	r3, r3, #15
 80098ea:	4313      	orrs	r3, r2
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80098f2:	e016      	b.n	8009922 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	0f1b      	lsrs	r3, r3, #28
 80098f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	0d1b      	lsrs	r3, r3, #20
 80098fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	0b1b      	lsrs	r3, r3, #12
 8009904:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	091b      	lsrs	r3, r3, #4
 800990a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	011a      	lsls	r2, r3, #4
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	021b      	lsls	r3, r3, #8
 8009914:	431a      	orrs	r2, r3
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	031b      	lsls	r3, r3, #12
 800991a:	4313      	orrs	r3, r2
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	4313      	orrs	r3, r2
 8009920:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009928:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800992a:	e003      	b.n	8009934 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	60da      	str	r2, [r3, #12]
}
 8009934:	bf00      	nop
 8009936:	372c      	adds	r7, #44	@ 0x2c
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr

08009940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009940:	b480      	push	{r7}
 8009942:	b089      	sub	sp, #36	@ 0x24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800994a:	2300      	movs	r3, #0
 800994c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800994e:	2300      	movs	r3, #0
 8009950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009952:	2300      	movs	r3, #0
 8009954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009956:	2300      	movs	r3, #0
 8009958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800995a:	2300      	movs	r3, #0
 800995c:	61fb      	str	r3, [r7, #28]
 800995e:	e175      	b.n	8009c4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009960:	2201      	movs	r2, #1
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	fa02 f303 	lsl.w	r3, r2, r3
 8009968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	697a      	ldr	r2, [r7, #20]
 8009970:	4013      	ands	r3, r2
 8009972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	429a      	cmp	r2, r3
 800997a:	f040 8164 	bne.w	8009c46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	2b01      	cmp	r3, #1
 8009988:	d005      	beq.n	8009996 <HAL_GPIO_Init+0x56>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f003 0303 	and.w	r3, r3, #3
 8009992:	2b02      	cmp	r3, #2
 8009994:	d130      	bne.n	80099f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	2203      	movs	r2, #3
 80099a2:	fa02 f303 	lsl.w	r3, r2, r3
 80099a6:	43db      	mvns	r3, r3
 80099a8:	69ba      	ldr	r2, [r7, #24]
 80099aa:	4013      	ands	r3, r2
 80099ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	68da      	ldr	r2, [r3, #12]
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	4313      	orrs	r3, r2
 80099be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099cc:	2201      	movs	r2, #1
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	fa02 f303 	lsl.w	r3, r2, r3
 80099d4:	43db      	mvns	r3, r3
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	4013      	ands	r3, r2
 80099da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	091b      	lsrs	r3, r3, #4
 80099e2:	f003 0201 	and.w	r2, r3, #1
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ec:	69ba      	ldr	r2, [r7, #24]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	f003 0303 	and.w	r3, r3, #3
 8009a00:	2b03      	cmp	r3, #3
 8009a02:	d017      	beq.n	8009a34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	2203      	movs	r2, #3
 8009a10:	fa02 f303 	lsl.w	r3, r2, r3
 8009a14:	43db      	mvns	r3, r3
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	fa02 f303 	lsl.w	r3, r2, r3
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d123      	bne.n	8009a88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	08da      	lsrs	r2, r3, #3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3208      	adds	r2, #8
 8009a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	f003 0307 	and.w	r3, r3, #7
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	220f      	movs	r2, #15
 8009a58:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5c:	43db      	mvns	r3, r3
 8009a5e:	69ba      	ldr	r2, [r7, #24]
 8009a60:	4013      	ands	r3, r2
 8009a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	691a      	ldr	r2, [r3, #16]
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	fa02 f303 	lsl.w	r3, r2, r3
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	08da      	lsrs	r2, r3, #3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3208      	adds	r2, #8
 8009a82:	69b9      	ldr	r1, [r7, #24]
 8009a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	2203      	movs	r2, #3
 8009a94:	fa02 f303 	lsl.w	r3, r2, r3
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	69ba      	ldr	r2, [r7, #24]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f003 0203 	and.w	r2, r3, #3
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab0:	69ba      	ldr	r2, [r7, #24]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 80be 	beq.w	8009c46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009aca:	4b66      	ldr	r3, [pc, #408]	@ (8009c64 <HAL_GPIO_Init+0x324>)
 8009acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ace:	4a65      	ldr	r2, [pc, #404]	@ (8009c64 <HAL_GPIO_Init+0x324>)
 8009ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ad6:	4b63      	ldr	r3, [pc, #396]	@ (8009c64 <HAL_GPIO_Init+0x324>)
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ade:	60fb      	str	r3, [r7, #12]
 8009ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009ae2:	4a61      	ldr	r2, [pc, #388]	@ (8009c68 <HAL_GPIO_Init+0x328>)
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	089b      	lsrs	r3, r3, #2
 8009ae8:	3302      	adds	r3, #2
 8009aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	f003 0303 	and.w	r3, r3, #3
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	220f      	movs	r2, #15
 8009afa:	fa02 f303 	lsl.w	r3, r2, r3
 8009afe:	43db      	mvns	r3, r3
 8009b00:	69ba      	ldr	r2, [r7, #24]
 8009b02:	4013      	ands	r3, r2
 8009b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a58      	ldr	r2, [pc, #352]	@ (8009c6c <HAL_GPIO_Init+0x32c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d037      	beq.n	8009b7e <HAL_GPIO_Init+0x23e>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a57      	ldr	r2, [pc, #348]	@ (8009c70 <HAL_GPIO_Init+0x330>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d031      	beq.n	8009b7a <HAL_GPIO_Init+0x23a>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a56      	ldr	r2, [pc, #344]	@ (8009c74 <HAL_GPIO_Init+0x334>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d02b      	beq.n	8009b76 <HAL_GPIO_Init+0x236>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a55      	ldr	r2, [pc, #340]	@ (8009c78 <HAL_GPIO_Init+0x338>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d025      	beq.n	8009b72 <HAL_GPIO_Init+0x232>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a54      	ldr	r2, [pc, #336]	@ (8009c7c <HAL_GPIO_Init+0x33c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01f      	beq.n	8009b6e <HAL_GPIO_Init+0x22e>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a53      	ldr	r2, [pc, #332]	@ (8009c80 <HAL_GPIO_Init+0x340>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d019      	beq.n	8009b6a <HAL_GPIO_Init+0x22a>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a52      	ldr	r2, [pc, #328]	@ (8009c84 <HAL_GPIO_Init+0x344>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d013      	beq.n	8009b66 <HAL_GPIO_Init+0x226>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a51      	ldr	r2, [pc, #324]	@ (8009c88 <HAL_GPIO_Init+0x348>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d00d      	beq.n	8009b62 <HAL_GPIO_Init+0x222>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a50      	ldr	r2, [pc, #320]	@ (8009c8c <HAL_GPIO_Init+0x34c>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d007      	beq.n	8009b5e <HAL_GPIO_Init+0x21e>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a4f      	ldr	r2, [pc, #316]	@ (8009c90 <HAL_GPIO_Init+0x350>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d101      	bne.n	8009b5a <HAL_GPIO_Init+0x21a>
 8009b56:	2309      	movs	r3, #9
 8009b58:	e012      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b5a:	230a      	movs	r3, #10
 8009b5c:	e010      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b5e:	2308      	movs	r3, #8
 8009b60:	e00e      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b62:	2307      	movs	r3, #7
 8009b64:	e00c      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b66:	2306      	movs	r3, #6
 8009b68:	e00a      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b6a:	2305      	movs	r3, #5
 8009b6c:	e008      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b6e:	2304      	movs	r3, #4
 8009b70:	e006      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b72:	2303      	movs	r3, #3
 8009b74:	e004      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b76:	2302      	movs	r3, #2
 8009b78:	e002      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e000      	b.n	8009b80 <HAL_GPIO_Init+0x240>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	f002 0203 	and.w	r2, r2, #3
 8009b86:	0092      	lsls	r2, r2, #2
 8009b88:	4093      	lsls	r3, r2
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009b90:	4935      	ldr	r1, [pc, #212]	@ (8009c68 <HAL_GPIO_Init+0x328>)
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	089b      	lsrs	r3, r3, #2
 8009b96:	3302      	adds	r3, #2
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8009c94 <HAL_GPIO_Init+0x354>)
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	43db      	mvns	r3, r3
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	4013      	ands	r3, r2
 8009bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009bc2:	4a34      	ldr	r2, [pc, #208]	@ (8009c94 <HAL_GPIO_Init+0x354>)
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009bc8:	4b32      	ldr	r3, [pc, #200]	@ (8009c94 <HAL_GPIO_Init+0x354>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	43db      	mvns	r3, r3
 8009bd2:	69ba      	ldr	r2, [r7, #24]
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009bec:	4a29      	ldr	r2, [pc, #164]	@ (8009c94 <HAL_GPIO_Init+0x354>)
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009bf2:	4b28      	ldr	r3, [pc, #160]	@ (8009c94 <HAL_GPIO_Init+0x354>)
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	43db      	mvns	r3, r3
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	4013      	ands	r3, r2
 8009c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c16:	4a1f      	ldr	r2, [pc, #124]	@ (8009c94 <HAL_GPIO_Init+0x354>)
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c94 <HAL_GPIO_Init+0x354>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	43db      	mvns	r3, r3
 8009c26:	69ba      	ldr	r2, [r7, #24]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d003      	beq.n	8009c40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c40:	4a14      	ldr	r2, [pc, #80]	@ (8009c94 <HAL_GPIO_Init+0x354>)
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	2b0f      	cmp	r3, #15
 8009c50:	f67f ae86 	bls.w	8009960 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	3724      	adds	r7, #36	@ 0x24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	40023800 	.word	0x40023800
 8009c68:	40013800 	.word	0x40013800
 8009c6c:	40020000 	.word	0x40020000
 8009c70:	40020400 	.word	0x40020400
 8009c74:	40020800 	.word	0x40020800
 8009c78:	40020c00 	.word	0x40020c00
 8009c7c:	40021000 	.word	0x40021000
 8009c80:	40021400 	.word	0x40021400
 8009c84:	40021800 	.word	0x40021800
 8009c88:	40021c00 	.word	0x40021c00
 8009c8c:	40022000 	.word	0x40022000
 8009c90:	40022400 	.word	0x40022400
 8009c94:	40013c00 	.word	0x40013c00

08009c98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8009cae:	2300      	movs	r3, #0
 8009cb0:	617b      	str	r3, [r7, #20]
 8009cb2:	e0d9      	b.n	8009e68 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	f040 80c9 	bne.w	8009e62 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009cd0:	4a6b      	ldr	r2, [pc, #428]	@ (8009e80 <HAL_GPIO_DeInit+0x1e8>)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	089b      	lsrs	r3, r3, #2
 8009cd6:	3302      	adds	r3, #2
 8009cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cdc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	f003 0303 	and.w	r3, r3, #3
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	220f      	movs	r2, #15
 8009ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	4013      	ands	r3, r2
 8009cf0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a63      	ldr	r2, [pc, #396]	@ (8009e84 <HAL_GPIO_DeInit+0x1ec>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d037      	beq.n	8009d6a <HAL_GPIO_DeInit+0xd2>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a62      	ldr	r2, [pc, #392]	@ (8009e88 <HAL_GPIO_DeInit+0x1f0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d031      	beq.n	8009d66 <HAL_GPIO_DeInit+0xce>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a61      	ldr	r2, [pc, #388]	@ (8009e8c <HAL_GPIO_DeInit+0x1f4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d02b      	beq.n	8009d62 <HAL_GPIO_DeInit+0xca>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a60      	ldr	r2, [pc, #384]	@ (8009e90 <HAL_GPIO_DeInit+0x1f8>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d025      	beq.n	8009d5e <HAL_GPIO_DeInit+0xc6>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a5f      	ldr	r2, [pc, #380]	@ (8009e94 <HAL_GPIO_DeInit+0x1fc>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d01f      	beq.n	8009d5a <HAL_GPIO_DeInit+0xc2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a5e      	ldr	r2, [pc, #376]	@ (8009e98 <HAL_GPIO_DeInit+0x200>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d019      	beq.n	8009d56 <HAL_GPIO_DeInit+0xbe>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a5d      	ldr	r2, [pc, #372]	@ (8009e9c <HAL_GPIO_DeInit+0x204>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d013      	beq.n	8009d52 <HAL_GPIO_DeInit+0xba>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a5c      	ldr	r2, [pc, #368]	@ (8009ea0 <HAL_GPIO_DeInit+0x208>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d00d      	beq.n	8009d4e <HAL_GPIO_DeInit+0xb6>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a5b      	ldr	r2, [pc, #364]	@ (8009ea4 <HAL_GPIO_DeInit+0x20c>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d007      	beq.n	8009d4a <HAL_GPIO_DeInit+0xb2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a5a      	ldr	r2, [pc, #360]	@ (8009ea8 <HAL_GPIO_DeInit+0x210>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d101      	bne.n	8009d46 <HAL_GPIO_DeInit+0xae>
 8009d42:	2309      	movs	r3, #9
 8009d44:	e012      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d46:	230a      	movs	r3, #10
 8009d48:	e010      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d4a:	2308      	movs	r3, #8
 8009d4c:	e00e      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d4e:	2307      	movs	r3, #7
 8009d50:	e00c      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d52:	2306      	movs	r3, #6
 8009d54:	e00a      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d56:	2305      	movs	r3, #5
 8009d58:	e008      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d5a:	2304      	movs	r3, #4
 8009d5c:	e006      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e004      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d62:	2302      	movs	r3, #2
 8009d64:	e002      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e000      	b.n	8009d6c <HAL_GPIO_DeInit+0xd4>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	f002 0203 	and.w	r2, r2, #3
 8009d72:	0092      	lsls	r2, r2, #2
 8009d74:	4093      	lsls	r3, r2
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d132      	bne.n	8009de2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8009eac <HAL_GPIO_DeInit+0x214>)
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	43db      	mvns	r3, r3
 8009d84:	4949      	ldr	r1, [pc, #292]	@ (8009eac <HAL_GPIO_DeInit+0x214>)
 8009d86:	4013      	ands	r3, r2
 8009d88:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009d8a:	4b48      	ldr	r3, [pc, #288]	@ (8009eac <HAL_GPIO_DeInit+0x214>)
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	43db      	mvns	r3, r3
 8009d92:	4946      	ldr	r1, [pc, #280]	@ (8009eac <HAL_GPIO_DeInit+0x214>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009d98:	4b44      	ldr	r3, [pc, #272]	@ (8009eac <HAL_GPIO_DeInit+0x214>)
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	43db      	mvns	r3, r3
 8009da0:	4942      	ldr	r1, [pc, #264]	@ (8009eac <HAL_GPIO_DeInit+0x214>)
 8009da2:	4013      	ands	r3, r2
 8009da4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009da6:	4b41      	ldr	r3, [pc, #260]	@ (8009eac <HAL_GPIO_DeInit+0x214>)
 8009da8:	689a      	ldr	r2, [r3, #8]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	43db      	mvns	r3, r3
 8009dae:	493f      	ldr	r1, [pc, #252]	@ (8009eac <HAL_GPIO_DeInit+0x214>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	220f      	movs	r2, #15
 8009dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009dc4:	4a2e      	ldr	r2, [pc, #184]	@ (8009e80 <HAL_GPIO_DeInit+0x1e8>)
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	089b      	lsrs	r3, r3, #2
 8009dca:	3302      	adds	r3, #2
 8009dcc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	43da      	mvns	r2, r3
 8009dd4:	482a      	ldr	r0, [pc, #168]	@ (8009e80 <HAL_GPIO_DeInit+0x1e8>)
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	089b      	lsrs	r3, r3, #2
 8009dda:	400a      	ands	r2, r1
 8009ddc:	3302      	adds	r3, #2
 8009dde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	2103      	movs	r1, #3
 8009dec:	fa01 f303 	lsl.w	r3, r1, r3
 8009df0:	43db      	mvns	r3, r3
 8009df2:	401a      	ands	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	08da      	lsrs	r2, r3, #3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3208      	adds	r2, #8
 8009e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f003 0307 	and.w	r3, r3, #7
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	220f      	movs	r2, #15
 8009e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e12:	43db      	mvns	r3, r3
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	08d2      	lsrs	r2, r2, #3
 8009e18:	4019      	ands	r1, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	3208      	adds	r2, #8
 8009e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68da      	ldr	r2, [r3, #12]
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	2103      	movs	r1, #3
 8009e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e30:	43db      	mvns	r3, r3
 8009e32:	401a      	ands	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	fa01 f303 	lsl.w	r3, r1, r3
 8009e44:	43db      	mvns	r3, r3
 8009e46:	401a      	ands	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	689a      	ldr	r2, [r3, #8]
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	2103      	movs	r1, #3
 8009e56:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5a:	43db      	mvns	r3, r3
 8009e5c:	401a      	ands	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	3301      	adds	r3, #1
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2b0f      	cmp	r3, #15
 8009e6c:	f67f af22 	bls.w	8009cb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
 8009e7e:	bf00      	nop
 8009e80:	40013800 	.word	0x40013800
 8009e84:	40020000 	.word	0x40020000
 8009e88:	40020400 	.word	0x40020400
 8009e8c:	40020800 	.word	0x40020800
 8009e90:	40020c00 	.word	0x40020c00
 8009e94:	40021000 	.word	0x40021000
 8009e98:	40021400 	.word	0x40021400
 8009e9c:	40021800 	.word	0x40021800
 8009ea0:	40021c00 	.word	0x40021c00
 8009ea4:	40022000 	.word	0x40022000
 8009ea8:	40022400 	.word	0x40022400
 8009eac:	40013c00 	.word	0x40013c00

08009eb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b085      	sub	sp, #20
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	887b      	ldrh	r3, [r7, #2]
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	73fb      	strb	r3, [r7, #15]
 8009ecc:	e001      	b.n	8009ed2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3714      	adds	r7, #20
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	807b      	strh	r3, [r7, #2]
 8009eec:	4613      	mov	r3, r2
 8009eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009ef0:	787b      	ldrb	r3, [r7, #1]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ef6:	887a      	ldrh	r2, [r7, #2]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009efc:	e003      	b.n	8009f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009efe:	887b      	ldrh	r3, [r7, #2]
 8009f00:	041a      	lsls	r2, r3, #16
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	619a      	str	r2, [r3, #24]
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
	...

08009f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e07f      	b.n	800a026 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d106      	bne.n	8009f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f8a9 	bl	800a092 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2224      	movs	r2, #36	@ 0x24
 8009f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f022 0201 	bic.w	r2, r2, #1
 8009f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689a      	ldr	r2, [r3, #8]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d107      	bne.n	8009f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689a      	ldr	r2, [r3, #8]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f8a:	609a      	str	r2, [r3, #8]
 8009f8c:	e006      	b.n	8009f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	2b02      	cmp	r3, #2
 8009fa2:	d104      	bne.n	8009fae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6859      	ldr	r1, [r3, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	4b1d      	ldr	r3, [pc, #116]	@ (800a030 <HAL_I2C_Init+0x11c>)
 8009fba:	430b      	orrs	r3, r1
 8009fbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009fcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691a      	ldr	r2, [r3, #16]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	69d9      	ldr	r1, [r3, #28]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a1a      	ldr	r2, [r3, #32]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	430a      	orrs	r2, r1
 8009ff6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2220      	movs	r2, #32
 800a012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	02008000 	.word	0x02008000

0800a034 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e021      	b.n	800a08a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2224      	movs	r2, #36	@ 0x24
 800a04a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f022 0201 	bic.w	r2, r2, #1
 800a05c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f821 	bl	800a0a6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
	...

0800a0bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af02      	add	r7, sp, #8
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	4611      	mov	r1, r2
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	817b      	strh	r3, [r7, #10]
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	813b      	strh	r3, [r7, #8]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	f040 80f9 	bne.w	800a2d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <HAL_I2C_Mem_Write+0x34>
 800a0ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d105      	bne.n	800a0fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0f6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e0ed      	b.n	800a2d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a102:	2b01      	cmp	r3, #1
 800a104:	d101      	bne.n	800a10a <HAL_I2C_Mem_Write+0x4e>
 800a106:	2302      	movs	r3, #2
 800a108:	e0e6      	b.n	800a2d8 <HAL_I2C_Mem_Write+0x21c>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a112:	f7fe f9df 	bl	80084d4 <HAL_GetTick>
 800a116:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	2319      	movs	r3, #25
 800a11e:	2201      	movs	r2, #1
 800a120:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 fad1 	bl	800a6cc <I2C_WaitOnFlagUntilTimeout>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e0d1      	b.n	800a2d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2221      	movs	r2, #33	@ 0x21
 800a138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2240      	movs	r2, #64	@ 0x40
 800a140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6a3a      	ldr	r2, [r7, #32]
 800a14e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a154:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a15c:	88f8      	ldrh	r0, [r7, #6]
 800a15e:	893a      	ldrh	r2, [r7, #8]
 800a160:	8979      	ldrh	r1, [r7, #10]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	4603      	mov	r3, r0
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f9e1 	bl	800a534 <I2C_RequestMemoryWrite>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d005      	beq.n	800a184 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	e0a9      	b.n	800a2d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a188:	b29b      	uxth	r3, r3
 800a18a:	2bff      	cmp	r3, #255	@ 0xff
 800a18c:	d90e      	bls.n	800a1ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	22ff      	movs	r2, #255	@ 0xff
 800a192:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a198:	b2da      	uxtb	r2, r3
 800a19a:	8979      	ldrh	r1, [r7, #10]
 800a19c:	2300      	movs	r3, #0
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 fc2d 	bl	800aa04 <I2C_TransferConfig>
 800a1aa:	e00f      	b.n	800a1cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	8979      	ldrh	r1, [r7, #10]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 fc1c 	bl	800aa04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1cc:	697a      	ldr	r2, [r7, #20]
 800a1ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f000 fabb 	bl	800a74c <I2C_WaitOnTXISFlagUntilTimeout>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d001      	beq.n	800a1e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e07b      	b.n	800a2d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e4:	781a      	ldrb	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f0:	1c5a      	adds	r2, r3, #1
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a208:	3b01      	subs	r3, #1
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a214:	b29b      	uxth	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d034      	beq.n	800a284 <HAL_I2C_Mem_Write+0x1c8>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d130      	bne.n	800a284 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a228:	2200      	movs	r2, #0
 800a22a:	2180      	movs	r1, #128	@ 0x80
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 fa4d 	bl	800a6cc <I2C_WaitOnFlagUntilTimeout>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e04d      	b.n	800a2d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a240:	b29b      	uxth	r3, r3
 800a242:	2bff      	cmp	r3, #255	@ 0xff
 800a244:	d90e      	bls.n	800a264 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	22ff      	movs	r2, #255	@ 0xff
 800a24a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a250:	b2da      	uxtb	r2, r3
 800a252:	8979      	ldrh	r1, [r7, #10]
 800a254:	2300      	movs	r3, #0
 800a256:	9300      	str	r3, [sp, #0]
 800a258:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 fbd1 	bl	800aa04 <I2C_TransferConfig>
 800a262:	e00f      	b.n	800a284 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a268:	b29a      	uxth	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a272:	b2da      	uxtb	r2, r3
 800a274:	8979      	ldrh	r1, [r7, #10]
 800a276:	2300      	movs	r3, #0
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 fbc0 	bl	800aa04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d19e      	bne.n	800a1cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a292:	68f8      	ldr	r0, [r7, #12]
 800a294:	f000 fa9a 	bl	800a7cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d001      	beq.n	800a2a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e01a      	b.n	800a2d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6859      	ldr	r1, [r3, #4]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e0 <HAL_I2C_Mem_Write+0x224>)
 800a2b6:	400b      	ands	r3, r1
 800a2b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e000      	b.n	800a2d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a2d6:	2302      	movs	r3, #2
  }
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	fe00e800 	.word	0xfe00e800

0800a2e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af02      	add	r7, sp, #8
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	817b      	strh	r3, [r7, #10]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	813b      	strh	r3, [r7, #8]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a304:	b2db      	uxtb	r3, r3
 800a306:	2b20      	cmp	r3, #32
 800a308:	f040 80fd 	bne.w	800a506 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <HAL_I2C_Mem_Read+0x34>
 800a312:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a314:	2b00      	cmp	r3, #0
 800a316:	d105      	bne.n	800a324 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a31e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e0f1      	b.n	800a508 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d101      	bne.n	800a332 <HAL_I2C_Mem_Read+0x4e>
 800a32e:	2302      	movs	r3, #2
 800a330:	e0ea      	b.n	800a508 <HAL_I2C_Mem_Read+0x224>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2201      	movs	r2, #1
 800a336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a33a:	f7fe f8cb 	bl	80084d4 <HAL_GetTick>
 800a33e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	2319      	movs	r3, #25
 800a346:	2201      	movs	r2, #1
 800a348:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 f9bd 	bl	800a6cc <I2C_WaitOnFlagUntilTimeout>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e0d5      	b.n	800a508 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2222      	movs	r2, #34	@ 0x22
 800a360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2240      	movs	r2, #64	@ 0x40
 800a368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6a3a      	ldr	r2, [r7, #32]
 800a376:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a37c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a384:	88f8      	ldrh	r0, [r7, #6]
 800a386:	893a      	ldrh	r2, [r7, #8]
 800a388:	8979      	ldrh	r1, [r7, #10]
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	4603      	mov	r3, r0
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f000 f921 	bl	800a5dc <I2C_RequestMemoryRead>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	e0ad      	b.n	800a508 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	2bff      	cmp	r3, #255	@ 0xff
 800a3b4:	d90e      	bls.n	800a3d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	22ff      	movs	r2, #255	@ 0xff
 800a3ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3c0:	b2da      	uxtb	r2, r3
 800a3c2:	8979      	ldrh	r1, [r7, #10]
 800a3c4:	4b52      	ldr	r3, [pc, #328]	@ (800a510 <HAL_I2C_Mem_Read+0x22c>)
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 fb19 	bl	800aa04 <I2C_TransferConfig>
 800a3d2:	e00f      	b.n	800a3f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	8979      	ldrh	r1, [r7, #10]
 800a3e6:	4b4a      	ldr	r3, [pc, #296]	@ (800a510 <HAL_I2C_Mem_Read+0x22c>)
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 fb08 	bl	800aa04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2104      	movs	r1, #4
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f000 f964 	bl	800a6cc <I2C_WaitOnFlagUntilTimeout>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a40a:	2301      	movs	r3, #1
 800a40c:	e07c      	b.n	800a508 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a418:	b2d2      	uxtb	r2, r2
 800a41a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a420:	1c5a      	adds	r2, r3, #1
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a42a:	3b01      	subs	r3, #1
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a436:	b29b      	uxth	r3, r3
 800a438:	3b01      	subs	r3, #1
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d034      	beq.n	800a4b4 <HAL_I2C_Mem_Read+0x1d0>
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d130      	bne.n	800a4b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a458:	2200      	movs	r2, #0
 800a45a:	2180      	movs	r1, #128	@ 0x80
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f935 	bl	800a6cc <I2C_WaitOnFlagUntilTimeout>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e04d      	b.n	800a508 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a470:	b29b      	uxth	r3, r3
 800a472:	2bff      	cmp	r3, #255	@ 0xff
 800a474:	d90e      	bls.n	800a494 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	22ff      	movs	r2, #255	@ 0xff
 800a47a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a480:	b2da      	uxtb	r2, r3
 800a482:	8979      	ldrh	r1, [r7, #10]
 800a484:	2300      	movs	r3, #0
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 fab9 	bl	800aa04 <I2C_TransferConfig>
 800a492:	e00f      	b.n	800a4b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a498:	b29a      	uxth	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4a2:	b2da      	uxtb	r2, r3
 800a4a4:	8979      	ldrh	r1, [r7, #10]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 faa8 	bl	800aa04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d19a      	bne.n	800a3f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 f982 	bl	800a7cc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e01a      	b.n	800a508 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	6859      	ldr	r1, [r3, #4]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a514 <HAL_I2C_Mem_Read+0x230>)
 800a4e6:	400b      	ands	r3, r1
 800a4e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2220      	movs	r2, #32
 800a4ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a502:	2300      	movs	r3, #0
 800a504:	e000      	b.n	800a508 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a506:	2302      	movs	r3, #2
  }
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	80002400 	.word	0x80002400
 800a514:	fe00e800 	.word	0xfe00e800

0800a518 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a526:	b2db      	uxtb	r3, r3
}
 800a528:	4618      	mov	r0, r3
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af02      	add	r7, sp, #8
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	4608      	mov	r0, r1
 800a53e:	4611      	mov	r1, r2
 800a540:	461a      	mov	r2, r3
 800a542:	4603      	mov	r3, r0
 800a544:	817b      	strh	r3, [r7, #10]
 800a546:	460b      	mov	r3, r1
 800a548:	813b      	strh	r3, [r7, #8]
 800a54a:	4613      	mov	r3, r2
 800a54c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	b2da      	uxtb	r2, r3
 800a552:	8979      	ldrh	r1, [r7, #10]
 800a554:	4b20      	ldr	r3, [pc, #128]	@ (800a5d8 <I2C_RequestMemoryWrite+0xa4>)
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	f000 fa51 	bl	800aa04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a562:	69fa      	ldr	r2, [r7, #28]
 800a564:	69b9      	ldr	r1, [r7, #24]
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f000 f8f0 	bl	800a74c <I2C_WaitOnTXISFlagUntilTimeout>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e02c      	b.n	800a5d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a576:	88fb      	ldrh	r3, [r7, #6]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d105      	bne.n	800a588 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a57c:	893b      	ldrh	r3, [r7, #8]
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	629a      	str	r2, [r3, #40]	@ 0x28
 800a586:	e015      	b.n	800a5b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a588:	893b      	ldrh	r3, [r7, #8]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	b2da      	uxtb	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a596:	69fa      	ldr	r2, [r7, #28]
 800a598:	69b9      	ldr	r1, [r7, #24]
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 f8d6 	bl	800a74c <I2C_WaitOnTXISFlagUntilTimeout>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e012      	b.n	800a5d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5aa:	893b      	ldrh	r3, [r7, #8]
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2180      	movs	r1, #128	@ 0x80
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 f884 	bl	800a6cc <I2C_WaitOnFlagUntilTimeout>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	80002000 	.word	0x80002000

0800a5dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b086      	sub	sp, #24
 800a5e0:	af02      	add	r7, sp, #8
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	817b      	strh	r3, [r7, #10]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	813b      	strh	r3, [r7, #8]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	8979      	ldrh	r1, [r7, #10]
 800a5fc:	4b20      	ldr	r3, [pc, #128]	@ (800a680 <I2C_RequestMemoryRead+0xa4>)
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	2300      	movs	r3, #0
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 f9fe 	bl	800aa04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a608:	69fa      	ldr	r2, [r7, #28]
 800a60a:	69b9      	ldr	r1, [r7, #24]
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 f89d 	bl	800a74c <I2C_WaitOnTXISFlagUntilTimeout>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a618:	2301      	movs	r3, #1
 800a61a:	e02c      	b.n	800a676 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a61c:	88fb      	ldrh	r3, [r7, #6]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d105      	bne.n	800a62e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a622:	893b      	ldrh	r3, [r7, #8]
 800a624:	b2da      	uxtb	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a62c:	e015      	b.n	800a65a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a62e:	893b      	ldrh	r3, [r7, #8]
 800a630:	0a1b      	lsrs	r3, r3, #8
 800a632:	b29b      	uxth	r3, r3
 800a634:	b2da      	uxtb	r2, r3
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a63c:	69fa      	ldr	r2, [r7, #28]
 800a63e:	69b9      	ldr	r1, [r7, #24]
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f000 f883 	bl	800a74c <I2C_WaitOnTXISFlagUntilTimeout>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e012      	b.n	800a676 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a650:	893b      	ldrh	r3, [r7, #8]
 800a652:	b2da      	uxtb	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2200      	movs	r2, #0
 800a662:	2140      	movs	r1, #64	@ 0x40
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 f831 	bl	800a6cc <I2C_WaitOnFlagUntilTimeout>
 800a66a:	4603      	mov	r3, r0
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d001      	beq.n	800a674 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e000      	b.n	800a676 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a674:	2300      	movs	r3, #0
}
 800a676:	4618      	mov	r0, r3
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	80002000 	.word	0x80002000

0800a684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b02      	cmp	r3, #2
 800a698:	d103      	bne.n	800a6a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d007      	beq.n	800a6c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699a      	ldr	r2, [r3, #24]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f042 0201 	orr.w	r2, r2, #1
 800a6be:	619a      	str	r2, [r3, #24]
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	603b      	str	r3, [r7, #0]
 800a6d8:	4613      	mov	r3, r2
 800a6da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6dc:	e022      	b.n	800a724 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6e4:	d01e      	beq.n	800a724 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6e6:	f7fd fef5 	bl	80084d4 <HAL_GetTick>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d302      	bcc.n	800a6fc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d113      	bne.n	800a724 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a700:	f043 0220 	orr.w	r2, r3, #32
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e00f      	b.n	800a744 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	699a      	ldr	r2, [r3, #24]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	4013      	ands	r3, r2
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	429a      	cmp	r2, r3
 800a732:	bf0c      	ite	eq
 800a734:	2301      	moveq	r3, #1
 800a736:	2300      	movne	r3, #0
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d0cd      	beq.n	800a6de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a758:	e02c      	b.n	800a7b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	68b9      	ldr	r1, [r7, #8]
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f000 f870 	bl	800a844 <I2C_IsErrorOccurred>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d001      	beq.n	800a76e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	e02a      	b.n	800a7c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a774:	d01e      	beq.n	800a7b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a776:	f7fd fead 	bl	80084d4 <HAL_GetTick>
 800a77a:	4602      	mov	r2, r0
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	429a      	cmp	r2, r3
 800a784:	d302      	bcc.n	800a78c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d113      	bne.n	800a7b4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a790:	f043 0220 	orr.w	r2, r3, #32
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e007      	b.n	800a7c4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d1cb      	bne.n	800a75a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a7c2:	2300      	movs	r3, #0
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7d8:	e028      	b.n	800a82c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	68b9      	ldr	r1, [r7, #8]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 f830 	bl	800a844 <I2C_IsErrorOccurred>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e026      	b.n	800a83c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ee:	f7fd fe71 	bl	80084d4 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d302      	bcc.n	800a804 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d113      	bne.n	800a82c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a808:	f043 0220 	orr.w	r2, r3, #32
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2220      	movs	r2, #32
 800a814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e007      	b.n	800a83c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b20      	cmp	r3, #32
 800a838:	d1cf      	bne.n	800a7da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	@ 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	f003 0310 	and.w	r3, r3, #16
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d068      	beq.n	800a942 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2210      	movs	r2, #16
 800a876:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a878:	e049      	b.n	800a90e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a880:	d045      	beq.n	800a90e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a882:	f7fd fe27 	bl	80084d4 <HAL_GetTick>
 800a886:	4602      	mov	r2, r0
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d302      	bcc.n	800a898 <I2C_IsErrorOccurred+0x54>
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d13a      	bne.n	800a90e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8ba:	d121      	bne.n	800a900 <I2C_IsErrorOccurred+0xbc>
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8c2:	d01d      	beq.n	800a900 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a8c4:	7cfb      	ldrb	r3, [r7, #19]
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d01a      	beq.n	800a900 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a8da:	f7fd fdfb 	bl	80084d4 <HAL_GetTick>
 800a8de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8e0:	e00e      	b.n	800a900 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a8e2:	f7fd fdf7 	bl	80084d4 <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	2b19      	cmp	r3, #25
 800a8ee:	d907      	bls.n	800a900 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	f043 0320 	orr.w	r3, r3, #32
 800a8f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a8fe:	e006      	b.n	800a90e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b20      	cmp	r3, #32
 800a90c:	d1e9      	bne.n	800a8e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	f003 0320 	and.w	r3, r3, #32
 800a918:	2b20      	cmp	r3, #32
 800a91a:	d003      	beq.n	800a924 <I2C_IsErrorOccurred+0xe0>
 800a91c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a920:	2b00      	cmp	r3, #0
 800a922:	d0aa      	beq.n	800a87a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2220      	movs	r2, #32
 800a932:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	f043 0304 	orr.w	r3, r3, #4
 800a93a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a964:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00b      	beq.n	800a98e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	f043 0308 	orr.w	r3, r3, #8
 800a97c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a986:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00b      	beq.n	800a9b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	f043 0302 	orr.w	r3, r3, #2
 800a99e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01c      	beq.n	800a9f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff fe63 	bl	800a684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6859      	ldr	r1, [r3, #4]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <I2C_IsErrorOccurred+0x1bc>)
 800a9ca:	400b      	ands	r3, r1
 800a9cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	431a      	orrs	r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a9f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3728      	adds	r7, #40	@ 0x28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	fe00e800 	.word	0xfe00e800

0800aa04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	607b      	str	r3, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	817b      	strh	r3, [r7, #10]
 800aa12:	4613      	mov	r3, r2
 800aa14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa16:	897b      	ldrh	r3, [r7, #10]
 800aa18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aa1c:	7a7b      	ldrb	r3, [r7, #9]
 800aa1e:	041b      	lsls	r3, r3, #16
 800aa20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa24:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa32:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	0d5b      	lsrs	r3, r3, #21
 800aa3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800aa42:	4b08      	ldr	r3, [pc, #32]	@ (800aa64 <I2C_TransferConfig+0x60>)
 800aa44:	430b      	orrs	r3, r1
 800aa46:	43db      	mvns	r3, r3
 800aa48:	ea02 0103 	and.w	r1, r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aa56:	bf00      	nop
 800aa58:	371c      	adds	r7, #28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	03ff63ff 	.word	0x03ff63ff

0800aa68 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e0bf      	b.n	800abfa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d106      	bne.n	800aa94 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f7fb fb2e 	bl	80060f0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	699a      	ldr	r2, [r3, #24]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800aaaa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6999      	ldr	r1, [r3, #24]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aac0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6899      	ldr	r1, [r3, #8]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	4b4a      	ldr	r3, [pc, #296]	@ (800ac04 <HAL_LTDC_Init+0x19c>)
 800aadc:	400b      	ands	r3, r1
 800aade:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	041b      	lsls	r3, r3, #16
 800aae6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6899      	ldr	r1, [r3, #8]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699a      	ldr	r2, [r3, #24]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	430a      	orrs	r2, r1
 800aafc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68d9      	ldr	r1, [r3, #12]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	4b3e      	ldr	r3, [pc, #248]	@ (800ac04 <HAL_LTDC_Init+0x19c>)
 800ab0a:	400b      	ands	r3, r1
 800ab0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	69db      	ldr	r3, [r3, #28]
 800ab12:	041b      	lsls	r3, r3, #16
 800ab14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68d9      	ldr	r1, [r3, #12]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6a1a      	ldr	r2, [r3, #32]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	430a      	orrs	r2, r1
 800ab2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	6919      	ldr	r1, [r3, #16]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	4b33      	ldr	r3, [pc, #204]	@ (800ac04 <HAL_LTDC_Init+0x19c>)
 800ab38:	400b      	ands	r3, r1
 800ab3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab40:	041b      	lsls	r3, r3, #16
 800ab42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6919      	ldr	r1, [r3, #16]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	431a      	orrs	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	430a      	orrs	r2, r1
 800ab58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	6959      	ldr	r1, [r3, #20]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	4b27      	ldr	r3, [pc, #156]	@ (800ac04 <HAL_LTDC_Init+0x19c>)
 800ab66:	400b      	ands	r3, r1
 800ab68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab6e:	041b      	lsls	r3, r3, #16
 800ab70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6959      	ldr	r1, [r3, #20]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	430a      	orrs	r2, r1
 800ab86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ab98:	041b      	lsls	r3, r3, #16
 800ab9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800abaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800abbe:	431a      	orrs	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f042 0206 	orr.w	r2, r2, #6
 800abd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	699a      	ldr	r2, [r3, #24]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f042 0201 	orr.w	r2, r2, #1
 800abe6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	f000f800 	.word	0xf000f800

0800ac08 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac16:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac1e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d023      	beq.n	800ac72 <HAL_LTDC_IRQHandler+0x6a>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f003 0304 	and.w	r3, r3, #4
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d01e      	beq.n	800ac72 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f022 0204 	bic.w	r2, r2, #4
 800ac42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2204      	movs	r2, #4
 800ac4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac52:	f043 0201 	orr.w	r2, r3, #1
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2204      	movs	r2, #4
 800ac60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f86f 	bl	800ad50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f003 0302 	and.w	r3, r3, #2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d023      	beq.n	800acc4 <HAL_LTDC_IRQHandler+0xbc>
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	f003 0302 	and.w	r3, r3, #2
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d01e      	beq.n	800acc4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f022 0202 	bic.w	r2, r2, #2
 800ac94:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2202      	movs	r2, #2
 800ac9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800aca4:	f043 0202 	orr.w	r2, r3, #2
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2204      	movs	r2, #4
 800acb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 f846 	bl	800ad50 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	2b00      	cmp	r3, #0
 800accc:	d01b      	beq.n	800ad06 <HAL_LTDC_IRQHandler+0xfe>
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d016      	beq.n	800ad06 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 0201 	bic.w	r2, r2, #1
 800ace6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2201      	movs	r2, #1
 800acee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2201      	movs	r2, #1
 800acf4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f82f 	bl	800ad64 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f003 0308 	and.w	r3, r3, #8
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d01b      	beq.n	800ad48 <HAL_LTDC_IRQHandler+0x140>
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f003 0308 	and.w	r3, r3, #8
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d016      	beq.n	800ad48 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f022 0208 	bic.w	r2, r2, #8
 800ad28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2208      	movs	r2, #8
 800ad30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f818 	bl	800ad78 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800ad48:	bf00      	nop
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800ad58:	bf00      	nop
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ad8c:	b5b0      	push	{r4, r5, r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d101      	bne.n	800ada6 <HAL_LTDC_ConfigLayer+0x1a>
 800ada2:	2302      	movs	r3, #2
 800ada4:	e02c      	b.n	800ae00 <HAL_LTDC_ConfigLayer+0x74>
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2202      	movs	r2, #2
 800adb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2134      	movs	r1, #52	@ 0x34
 800adbc:	fb01 f303 	mul.w	r3, r1, r3
 800adc0:	4413      	add	r3, r2
 800adc2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	4614      	mov	r4, r2
 800adca:	461d      	mov	r5, r3
 800adcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800adce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800add0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800add2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800add4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800add6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800add8:	682b      	ldr	r3, [r5, #0]
 800adda:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f000 f855 	bl	800ae90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2201      	movs	r2, #1
 800adec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bdb0      	pop	{r4, r5, r7, pc}

0800ae08 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d101      	bne.n	800ae22 <HAL_LTDC_SetAlpha+0x1a>
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e024      	b.n	800ae6c <HAL_LTDC_SetAlpha+0x64>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2202      	movs	r2, #2
 800ae2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2234      	movs	r2, #52	@ 0x34
 800ae36:	fb02 f303 	mul.w	r3, r2, r3
 800ae3a:	3338      	adds	r3, #56	@ 0x38
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4413      	add	r3, r2
 800ae40:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6979      	ldr	r1, [r7, #20]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 f81f 	bl	800ae90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2201      	movs	r2, #1
 800ae58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800ae82:	b2db      	uxtb	r3, r3
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	370c      	adds	r7, #12
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr

0800ae90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b089      	sub	sp, #36	@ 0x24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	0c1b      	lsrs	r3, r3, #16
 800aea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeac:	4413      	add	r3, r2
 800aeae:	041b      	lsls	r3, r3, #16
 800aeb0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	01db      	lsls	r3, r3, #7
 800aebc:	4413      	add	r3, r2
 800aebe:	3384      	adds	r3, #132	@ 0x84
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	6812      	ldr	r2, [r2, #0]
 800aec6:	4611      	mov	r1, r2
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	01d2      	lsls	r2, r2, #7
 800aecc:	440a      	add	r2, r1
 800aece:	3284      	adds	r2, #132	@ 0x84
 800aed0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800aed4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	0c1b      	lsrs	r3, r3, #16
 800aee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aee6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800aee8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4619      	mov	r1, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	01db      	lsls	r3, r3, #7
 800aef4:	440b      	add	r3, r1
 800aef6:	3384      	adds	r3, #132	@ 0x84
 800aef8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800aefe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	68da      	ldr	r2, [r3, #12]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af0e:	4413      	add	r3, r2
 800af10:	041b      	lsls	r3, r3, #16
 800af12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	461a      	mov	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	01db      	lsls	r3, r3, #7
 800af1e:	4413      	add	r3, r2
 800af20:	3384      	adds	r3, #132	@ 0x84
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	6812      	ldr	r2, [r2, #0]
 800af28:	4611      	mov	r1, r2
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	01d2      	lsls	r2, r2, #7
 800af2e:	440a      	add	r2, r1
 800af30:	3284      	adds	r2, #132	@ 0x84
 800af32:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800af36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	689a      	ldr	r2, [r3, #8]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af46:	4413      	add	r3, r2
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4619      	mov	r1, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	01db      	lsls	r3, r3, #7
 800af54:	440b      	add	r3, r1
 800af56:	3384      	adds	r3, #132	@ 0x84
 800af58:	4619      	mov	r1, r3
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	4313      	orrs	r3, r2
 800af5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	461a      	mov	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	01db      	lsls	r3, r3, #7
 800af6a:	4413      	add	r3, r2
 800af6c:	3384      	adds	r3, #132	@ 0x84
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	6812      	ldr	r2, [r2, #0]
 800af74:	4611      	mov	r1, r2
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	01d2      	lsls	r2, r2, #7
 800af7a:	440a      	add	r2, r1
 800af7c:	3284      	adds	r2, #132	@ 0x84
 800af7e:	f023 0307 	bic.w	r3, r3, #7
 800af82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	461a      	mov	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	01db      	lsls	r3, r3, #7
 800af8e:	4413      	add	r3, r2
 800af90:	3384      	adds	r3, #132	@ 0x84
 800af92:	461a      	mov	r2, r3
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800afa0:	021b      	lsls	r3, r3, #8
 800afa2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800afaa:	041b      	lsls	r3, r3, #16
 800afac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	061b      	lsls	r3, r3, #24
 800afb4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	01db      	lsls	r3, r3, #7
 800afc0:	4413      	add	r3, r2
 800afc2:	3384      	adds	r3, #132	@ 0x84
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	461a      	mov	r2, r3
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	01db      	lsls	r3, r3, #7
 800afd0:	4413      	add	r3, r2
 800afd2:	3384      	adds	r3, #132	@ 0x84
 800afd4:	461a      	mov	r2, r3
 800afd6:	2300      	movs	r3, #0
 800afd8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800afe0:	461a      	mov	r2, r3
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	431a      	orrs	r2, r3
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	431a      	orrs	r2, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4619      	mov	r1, r3
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	01db      	lsls	r3, r3, #7
 800aff4:	440b      	add	r3, r1
 800aff6:	3384      	adds	r3, #132	@ 0x84
 800aff8:	4619      	mov	r1, r3
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	4313      	orrs	r3, r2
 800affe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	461a      	mov	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	01db      	lsls	r3, r3, #7
 800b00a:	4413      	add	r3, r2
 800b00c:	3384      	adds	r3, #132	@ 0x84
 800b00e:	695b      	ldr	r3, [r3, #20]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	6812      	ldr	r2, [r2, #0]
 800b014:	4611      	mov	r1, r2
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	01d2      	lsls	r2, r2, #7
 800b01a:	440a      	add	r2, r1
 800b01c:	3284      	adds	r2, #132	@ 0x84
 800b01e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b022:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	461a      	mov	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	01db      	lsls	r3, r3, #7
 800b02e:	4413      	add	r3, r2
 800b030:	3384      	adds	r3, #132	@ 0x84
 800b032:	461a      	mov	r2, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	695b      	ldr	r3, [r3, #20]
 800b038:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	01db      	lsls	r3, r3, #7
 800b044:	4413      	add	r3, r2
 800b046:	3384      	adds	r3, #132	@ 0x84
 800b048:	69da      	ldr	r2, [r3, #28]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4619      	mov	r1, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	01db      	lsls	r3, r3, #7
 800b054:	440b      	add	r3, r1
 800b056:	3384      	adds	r3, #132	@ 0x84
 800b058:	4619      	mov	r1, r3
 800b05a:	4b58      	ldr	r3, [pc, #352]	@ (800b1bc <LTDC_SetConfig+0x32c>)
 800b05c:	4013      	ands	r3, r2
 800b05e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	69da      	ldr	r2, [r3, #28]
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	68f9      	ldr	r1, [r7, #12]
 800b06a:	6809      	ldr	r1, [r1, #0]
 800b06c:	4608      	mov	r0, r1
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	01c9      	lsls	r1, r1, #7
 800b072:	4401      	add	r1, r0
 800b074:	3184      	adds	r1, #132	@ 0x84
 800b076:	4313      	orrs	r3, r2
 800b078:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	461a      	mov	r2, r3
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	01db      	lsls	r3, r3, #7
 800b084:	4413      	add	r3, r2
 800b086:	3384      	adds	r3, #132	@ 0x84
 800b088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	461a      	mov	r2, r3
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	01db      	lsls	r3, r3, #7
 800b094:	4413      	add	r3, r2
 800b096:	3384      	adds	r3, #132	@ 0x84
 800b098:	461a      	mov	r2, r3
 800b09a:	2300      	movs	r3, #0
 800b09c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	01db      	lsls	r3, r3, #7
 800b0a8:	4413      	add	r3, r2
 800b0aa:	3384      	adds	r3, #132	@ 0x84
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	691b      	ldr	r3, [r3, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b0bc:	2304      	movs	r3, #4
 800b0be:	61fb      	str	r3, [r7, #28]
 800b0c0:	e01b      	b.n	800b0fa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d102      	bne.n	800b0d0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	61fb      	str	r3, [r7, #28]
 800b0ce:	e014      	b.n	800b0fa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	d00b      	beq.n	800b0f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d007      	beq.n	800b0f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d003      	beq.n	800b0f0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b0ec:	2b07      	cmp	r3, #7
 800b0ee:	d102      	bne.n	800b0f6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	61fb      	str	r3, [r7, #28]
 800b0f4:	e001      	b.n	800b0fa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	01db      	lsls	r3, r3, #7
 800b104:	4413      	add	r3, r2
 800b106:	3384      	adds	r3, #132	@ 0x84
 800b108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	6812      	ldr	r2, [r2, #0]
 800b10e:	4611      	mov	r1, r2
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	01d2      	lsls	r2, r2, #7
 800b114:	440a      	add	r2, r1
 800b116:	3284      	adds	r2, #132	@ 0x84
 800b118:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800b11c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b122:	69fa      	ldr	r2, [r7, #28]
 800b124:	fb02 f303 	mul.w	r3, r2, r3
 800b128:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	6859      	ldr	r1, [r3, #4]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	1acb      	subs	r3, r1, r3
 800b134:	69f9      	ldr	r1, [r7, #28]
 800b136:	fb01 f303 	mul.w	r3, r1, r3
 800b13a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b13c:	68f9      	ldr	r1, [r7, #12]
 800b13e:	6809      	ldr	r1, [r1, #0]
 800b140:	4608      	mov	r0, r1
 800b142:	6879      	ldr	r1, [r7, #4]
 800b144:	01c9      	lsls	r1, r1, #7
 800b146:	4401      	add	r1, r0
 800b148:	3184      	adds	r1, #132	@ 0x84
 800b14a:	4313      	orrs	r3, r2
 800b14c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	01db      	lsls	r3, r3, #7
 800b158:	4413      	add	r3, r2
 800b15a:	3384      	adds	r3, #132	@ 0x84
 800b15c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	4619      	mov	r1, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	01db      	lsls	r3, r3, #7
 800b168:	440b      	add	r3, r1
 800b16a:	3384      	adds	r3, #132	@ 0x84
 800b16c:	4619      	mov	r1, r3
 800b16e:	4b14      	ldr	r3, [pc, #80]	@ (800b1c0 <LTDC_SetConfig+0x330>)
 800b170:	4013      	ands	r3, r2
 800b172:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	461a      	mov	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	01db      	lsls	r3, r3, #7
 800b17e:	4413      	add	r3, r2
 800b180:	3384      	adds	r3, #132	@ 0x84
 800b182:	461a      	mov	r2, r3
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b188:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	01db      	lsls	r3, r3, #7
 800b194:	4413      	add	r3, r2
 800b196:	3384      	adds	r3, #132	@ 0x84
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	6812      	ldr	r2, [r2, #0]
 800b19e:	4611      	mov	r1, r2
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	01d2      	lsls	r2, r2, #7
 800b1a4:	440a      	add	r2, r1
 800b1a6:	3284      	adds	r2, #132	@ 0x84
 800b1a8:	f043 0301 	orr.w	r3, r3, #1
 800b1ac:	6013      	str	r3, [r2, #0]
}
 800b1ae:	bf00      	nop
 800b1b0:	3724      	adds	r7, #36	@ 0x24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	fffff8f8 	.word	0xfffff8f8
 800b1c0:	fffff800 	.word	0xfffff800

0800b1c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1c8:	4b05      	ldr	r3, [pc, #20]	@ (800b1e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a04      	ldr	r2, [pc, #16]	@ (800b1e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b1ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b1d2:	6013      	str	r3, [r2, #0]
}
 800b1d4:	bf00      	nop
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	40007000 	.word	0x40007000

0800b1e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b1ee:	4b23      	ldr	r3, [pc, #140]	@ (800b27c <HAL_PWREx_EnableOverDrive+0x98>)
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1f2:	4a22      	ldr	r2, [pc, #136]	@ (800b27c <HAL_PWREx_EnableOverDrive+0x98>)
 800b1f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800b1fa:	4b20      	ldr	r3, [pc, #128]	@ (800b27c <HAL_PWREx_EnableOverDrive+0x98>)
 800b1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b206:	4b1e      	ldr	r3, [pc, #120]	@ (800b280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a1d      	ldr	r2, [pc, #116]	@ (800b280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b20c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b210:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b212:	f7fd f95f 	bl	80084d4 <HAL_GetTick>
 800b216:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b218:	e009      	b.n	800b22e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b21a:	f7fd f95b 	bl	80084d4 <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b228:	d901      	bls.n	800b22e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e022      	b.n	800b274 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b22e:	4b14      	ldr	r3, [pc, #80]	@ (800b280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b23a:	d1ee      	bne.n	800b21a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b23c:	4b10      	ldr	r3, [pc, #64]	@ (800b280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a0f      	ldr	r2, [pc, #60]	@ (800b280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b242:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b246:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b248:	f7fd f944 	bl	80084d4 <HAL_GetTick>
 800b24c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b24e:	e009      	b.n	800b264 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b250:	f7fd f940 	bl	80084d4 <HAL_GetTick>
 800b254:	4602      	mov	r2, r0
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	1ad3      	subs	r3, r2, r3
 800b25a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b25e:	d901      	bls.n	800b264 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b260:	2303      	movs	r3, #3
 800b262:	e007      	b.n	800b274 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b264:	4b06      	ldr	r3, [pc, #24]	@ (800b280 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b26c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b270:	d1ee      	bne.n	800b250 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	40023800 	.word	0x40023800
 800b280:	40007000 	.word	0x40007000

0800b284 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b28c:	2300      	movs	r3, #0
 800b28e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d101      	bne.n	800b29a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e291      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0301 	and.w	r3, r3, #1
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 8087 	beq.w	800b3b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b2a8:	4b96      	ldr	r3, [pc, #600]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	f003 030c 	and.w	r3, r3, #12
 800b2b0:	2b04      	cmp	r3, #4
 800b2b2:	d00c      	beq.n	800b2ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b2b4:	4b93      	ldr	r3, [pc, #588]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f003 030c 	and.w	r3, r3, #12
 800b2bc:	2b08      	cmp	r3, #8
 800b2be:	d112      	bne.n	800b2e6 <HAL_RCC_OscConfig+0x62>
 800b2c0:	4b90      	ldr	r3, [pc, #576]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b2c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b2cc:	d10b      	bne.n	800b2e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2ce:	4b8d      	ldr	r3, [pc, #564]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d06c      	beq.n	800b3b4 <HAL_RCC_OscConfig+0x130>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d168      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e26b      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b2ee:	d106      	bne.n	800b2fe <HAL_RCC_OscConfig+0x7a>
 800b2f0:	4b84      	ldr	r3, [pc, #528]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a83      	ldr	r2, [pc, #524]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b2f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	e02e      	b.n	800b35c <HAL_RCC_OscConfig+0xd8>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10c      	bne.n	800b320 <HAL_RCC_OscConfig+0x9c>
 800b306:	4b7f      	ldr	r3, [pc, #508]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4a7e      	ldr	r2, [pc, #504]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b30c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b310:	6013      	str	r3, [r2, #0]
 800b312:	4b7c      	ldr	r3, [pc, #496]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a7b      	ldr	r2, [pc, #492]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b318:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b31c:	6013      	str	r3, [r2, #0]
 800b31e:	e01d      	b.n	800b35c <HAL_RCC_OscConfig+0xd8>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b328:	d10c      	bne.n	800b344 <HAL_RCC_OscConfig+0xc0>
 800b32a:	4b76      	ldr	r3, [pc, #472]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a75      	ldr	r2, [pc, #468]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b330:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	4b73      	ldr	r3, [pc, #460]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a72      	ldr	r2, [pc, #456]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b33c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b340:	6013      	str	r3, [r2, #0]
 800b342:	e00b      	b.n	800b35c <HAL_RCC_OscConfig+0xd8>
 800b344:	4b6f      	ldr	r3, [pc, #444]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a6e      	ldr	r2, [pc, #440]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b34a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	4b6c      	ldr	r3, [pc, #432]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a6b      	ldr	r2, [pc, #428]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b356:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b35a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d013      	beq.n	800b38c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b364:	f7fd f8b6 	bl	80084d4 <HAL_GetTick>
 800b368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b36a:	e008      	b.n	800b37e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b36c:	f7fd f8b2 	bl	80084d4 <HAL_GetTick>
 800b370:	4602      	mov	r2, r0
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	2b64      	cmp	r3, #100	@ 0x64
 800b378:	d901      	bls.n	800b37e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e21f      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b37e:	4b61      	ldr	r3, [pc, #388]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b386:	2b00      	cmp	r3, #0
 800b388:	d0f0      	beq.n	800b36c <HAL_RCC_OscConfig+0xe8>
 800b38a:	e014      	b.n	800b3b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b38c:	f7fd f8a2 	bl	80084d4 <HAL_GetTick>
 800b390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b392:	e008      	b.n	800b3a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b394:	f7fd f89e 	bl	80084d4 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	2b64      	cmp	r3, #100	@ 0x64
 800b3a0:	d901      	bls.n	800b3a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e20b      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b3a6:	4b57      	ldr	r3, [pc, #348]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1f0      	bne.n	800b394 <HAL_RCC_OscConfig+0x110>
 800b3b2:	e000      	b.n	800b3b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0302 	and.w	r3, r3, #2
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d069      	beq.n	800b496 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b3c2:	4b50      	ldr	r3, [pc, #320]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f003 030c 	and.w	r3, r3, #12
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00b      	beq.n	800b3e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b3ce:	4b4d      	ldr	r3, [pc, #308]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f003 030c 	and.w	r3, r3, #12
 800b3d6:	2b08      	cmp	r3, #8
 800b3d8:	d11c      	bne.n	800b414 <HAL_RCC_OscConfig+0x190>
 800b3da:	4b4a      	ldr	r3, [pc, #296]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d116      	bne.n	800b414 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3e6:	4b47      	ldr	r3, [pc, #284]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 0302 	and.w	r3, r3, #2
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d005      	beq.n	800b3fe <HAL_RCC_OscConfig+0x17a>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d001      	beq.n	800b3fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e1df      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3fe:	4b41      	ldr	r3, [pc, #260]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	00db      	lsls	r3, r3, #3
 800b40c:	493d      	ldr	r1, [pc, #244]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b412:	e040      	b.n	800b496 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d023      	beq.n	800b464 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b41c:	4b39      	ldr	r3, [pc, #228]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a38      	ldr	r2, [pc, #224]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b422:	f043 0301 	orr.w	r3, r3, #1
 800b426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b428:	f7fd f854 	bl	80084d4 <HAL_GetTick>
 800b42c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b42e:	e008      	b.n	800b442 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b430:	f7fd f850 	bl	80084d4 <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d901      	bls.n	800b442 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e1bd      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b442:	4b30      	ldr	r3, [pc, #192]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 0302 	and.w	r3, r3, #2
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d0f0      	beq.n	800b430 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b44e:	4b2d      	ldr	r3, [pc, #180]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	00db      	lsls	r3, r3, #3
 800b45c:	4929      	ldr	r1, [pc, #164]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b45e:	4313      	orrs	r3, r2
 800b460:	600b      	str	r3, [r1, #0]
 800b462:	e018      	b.n	800b496 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b464:	4b27      	ldr	r3, [pc, #156]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a26      	ldr	r2, [pc, #152]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b46a:	f023 0301 	bic.w	r3, r3, #1
 800b46e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b470:	f7fd f830 	bl	80084d4 <HAL_GetTick>
 800b474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b476:	e008      	b.n	800b48a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b478:	f7fd f82c 	bl	80084d4 <HAL_GetTick>
 800b47c:	4602      	mov	r2, r0
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	2b02      	cmp	r3, #2
 800b484:	d901      	bls.n	800b48a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	e199      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b48a:	4b1e      	ldr	r3, [pc, #120]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0302 	and.w	r3, r3, #2
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1f0      	bne.n	800b478 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f003 0308 	and.w	r3, r3, #8
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d038      	beq.n	800b514 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	695b      	ldr	r3, [r3, #20]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d019      	beq.n	800b4de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b4aa:	4b16      	ldr	r3, [pc, #88]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b4ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4ae:	4a15      	ldr	r2, [pc, #84]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b4b0:	f043 0301 	orr.w	r3, r3, #1
 800b4b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4b6:	f7fd f80d 	bl	80084d4 <HAL_GetTick>
 800b4ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4bc:	e008      	b.n	800b4d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4be:	f7fd f809 	bl	80084d4 <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d901      	bls.n	800b4d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e176      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b4d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b4d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d0f0      	beq.n	800b4be <HAL_RCC_OscConfig+0x23a>
 800b4dc:	e01a      	b.n	800b514 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b4de:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b4e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4e2:	4a08      	ldr	r2, [pc, #32]	@ (800b504 <HAL_RCC_OscConfig+0x280>)
 800b4e4:	f023 0301 	bic.w	r3, r3, #1
 800b4e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4ea:	f7fc fff3 	bl	80084d4 <HAL_GetTick>
 800b4ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4f0:	e00a      	b.n	800b508 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b4f2:	f7fc ffef 	bl	80084d4 <HAL_GetTick>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	1ad3      	subs	r3, r2, r3
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d903      	bls.n	800b508 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b500:	2303      	movs	r3, #3
 800b502:	e15c      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
 800b504:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b508:	4b91      	ldr	r3, [pc, #580]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b50a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b50c:	f003 0302 	and.w	r3, r3, #2
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1ee      	bne.n	800b4f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f003 0304 	and.w	r3, r3, #4
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	f000 80a4 	beq.w	800b66a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b522:	4b8b      	ldr	r3, [pc, #556]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10d      	bne.n	800b54a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b52e:	4b88      	ldr	r3, [pc, #544]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b532:	4a87      	ldr	r2, [pc, #540]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b538:	6413      	str	r3, [r2, #64]	@ 0x40
 800b53a:	4b85      	ldr	r3, [pc, #532]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b53c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b53e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b542:	60bb      	str	r3, [r7, #8]
 800b544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b546:	2301      	movs	r3, #1
 800b548:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b54a:	4b82      	ldr	r3, [pc, #520]	@ (800b754 <HAL_RCC_OscConfig+0x4d0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b552:	2b00      	cmp	r3, #0
 800b554:	d118      	bne.n	800b588 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b556:	4b7f      	ldr	r3, [pc, #508]	@ (800b754 <HAL_RCC_OscConfig+0x4d0>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a7e      	ldr	r2, [pc, #504]	@ (800b754 <HAL_RCC_OscConfig+0x4d0>)
 800b55c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b562:	f7fc ffb7 	bl	80084d4 <HAL_GetTick>
 800b566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b568:	e008      	b.n	800b57c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b56a:	f7fc ffb3 	bl	80084d4 <HAL_GetTick>
 800b56e:	4602      	mov	r2, r0
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	2b64      	cmp	r3, #100	@ 0x64
 800b576:	d901      	bls.n	800b57c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b578:	2303      	movs	r3, #3
 800b57a:	e120      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b57c:	4b75      	ldr	r3, [pc, #468]	@ (800b754 <HAL_RCC_OscConfig+0x4d0>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b584:	2b00      	cmp	r3, #0
 800b586:	d0f0      	beq.n	800b56a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d106      	bne.n	800b59e <HAL_RCC_OscConfig+0x31a>
 800b590:	4b6f      	ldr	r3, [pc, #444]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b594:	4a6e      	ldr	r2, [pc, #440]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b596:	f043 0301 	orr.w	r3, r3, #1
 800b59a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b59c:	e02d      	b.n	800b5fa <HAL_RCC_OscConfig+0x376>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10c      	bne.n	800b5c0 <HAL_RCC_OscConfig+0x33c>
 800b5a6:	4b6a      	ldr	r3, [pc, #424]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5aa:	4a69      	ldr	r2, [pc, #420]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5ac:	f023 0301 	bic.w	r3, r3, #1
 800b5b0:	6713      	str	r3, [r2, #112]	@ 0x70
 800b5b2:	4b67      	ldr	r3, [pc, #412]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5b6:	4a66      	ldr	r2, [pc, #408]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5b8:	f023 0304 	bic.w	r3, r3, #4
 800b5bc:	6713      	str	r3, [r2, #112]	@ 0x70
 800b5be:	e01c      	b.n	800b5fa <HAL_RCC_OscConfig+0x376>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	2b05      	cmp	r3, #5
 800b5c6:	d10c      	bne.n	800b5e2 <HAL_RCC_OscConfig+0x35e>
 800b5c8:	4b61      	ldr	r3, [pc, #388]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5cc:	4a60      	ldr	r2, [pc, #384]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5ce:	f043 0304 	orr.w	r3, r3, #4
 800b5d2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b5d4:	4b5e      	ldr	r3, [pc, #376]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5d8:	4a5d      	ldr	r2, [pc, #372]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5da:	f043 0301 	orr.w	r3, r3, #1
 800b5de:	6713      	str	r3, [r2, #112]	@ 0x70
 800b5e0:	e00b      	b.n	800b5fa <HAL_RCC_OscConfig+0x376>
 800b5e2:	4b5b      	ldr	r3, [pc, #364]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5e6:	4a5a      	ldr	r2, [pc, #360]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5e8:	f023 0301 	bic.w	r3, r3, #1
 800b5ec:	6713      	str	r3, [r2, #112]	@ 0x70
 800b5ee:	4b58      	ldr	r3, [pc, #352]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b5f2:	4a57      	ldr	r2, [pc, #348]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b5f4:	f023 0304 	bic.w	r3, r3, #4
 800b5f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d015      	beq.n	800b62e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b602:	f7fc ff67 	bl	80084d4 <HAL_GetTick>
 800b606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b608:	e00a      	b.n	800b620 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b60a:	f7fc ff63 	bl	80084d4 <HAL_GetTick>
 800b60e:	4602      	mov	r2, r0
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	1ad3      	subs	r3, r2, r3
 800b614:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b618:	4293      	cmp	r3, r2
 800b61a:	d901      	bls.n	800b620 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e0ce      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b620:	4b4b      	ldr	r3, [pc, #300]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d0ee      	beq.n	800b60a <HAL_RCC_OscConfig+0x386>
 800b62c:	e014      	b.n	800b658 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b62e:	f7fc ff51 	bl	80084d4 <HAL_GetTick>
 800b632:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b634:	e00a      	b.n	800b64c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b636:	f7fc ff4d 	bl	80084d4 <HAL_GetTick>
 800b63a:	4602      	mov	r2, r0
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b644:	4293      	cmp	r3, r2
 800b646:	d901      	bls.n	800b64c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e0b8      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b64c:	4b40      	ldr	r3, [pc, #256]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b64e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1ee      	bne.n	800b636 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b658:	7dfb      	ldrb	r3, [r7, #23]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d105      	bne.n	800b66a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b65e:	4b3c      	ldr	r3, [pc, #240]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b662:	4a3b      	ldr	r2, [pc, #236]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b668:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 80a4 	beq.w	800b7bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b674:	4b36      	ldr	r3, [pc, #216]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	f003 030c 	and.w	r3, r3, #12
 800b67c:	2b08      	cmp	r3, #8
 800b67e:	d06b      	beq.n	800b758 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	2b02      	cmp	r3, #2
 800b686:	d149      	bne.n	800b71c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b688:	4b31      	ldr	r3, [pc, #196]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a30      	ldr	r2, [pc, #192]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b68e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b694:	f7fc ff1e 	bl	80084d4 <HAL_GetTick>
 800b698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b69a:	e008      	b.n	800b6ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b69c:	f7fc ff1a 	bl	80084d4 <HAL_GetTick>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d901      	bls.n	800b6ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e087      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6ae:	4b28      	ldr	r3, [pc, #160]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1f0      	bne.n	800b69c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	69da      	ldr	r2, [r3, #28]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	431a      	orrs	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6c8:	019b      	lsls	r3, r3, #6
 800b6ca:	431a      	orrs	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d0:	085b      	lsrs	r3, r3, #1
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	041b      	lsls	r3, r3, #16
 800b6d6:	431a      	orrs	r2, r3
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6dc:	061b      	lsls	r3, r3, #24
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	4a1b      	ldr	r2, [pc, #108]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b6e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b6e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b6e8:	4b19      	ldr	r3, [pc, #100]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a18      	ldr	r2, [pc, #96]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b6ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b6f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f4:	f7fc feee 	bl	80084d4 <HAL_GetTick>
 800b6f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6fa:	e008      	b.n	800b70e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b6fc:	f7fc feea 	bl	80084d4 <HAL_GetTick>
 800b700:	4602      	mov	r2, r0
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	1ad3      	subs	r3, r2, r3
 800b706:	2b02      	cmp	r3, #2
 800b708:	d901      	bls.n	800b70e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e057      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b70e:	4b10      	ldr	r3, [pc, #64]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b716:	2b00      	cmp	r3, #0
 800b718:	d0f0      	beq.n	800b6fc <HAL_RCC_OscConfig+0x478>
 800b71a:	e04f      	b.n	800b7bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b71c:	4b0c      	ldr	r3, [pc, #48]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a0b      	ldr	r2, [pc, #44]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b728:	f7fc fed4 	bl	80084d4 <HAL_GetTick>
 800b72c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b72e:	e008      	b.n	800b742 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b730:	f7fc fed0 	bl	80084d4 <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d901      	bls.n	800b742 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e03d      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b742:	4b03      	ldr	r3, [pc, #12]	@ (800b750 <HAL_RCC_OscConfig+0x4cc>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1f0      	bne.n	800b730 <HAL_RCC_OscConfig+0x4ac>
 800b74e:	e035      	b.n	800b7bc <HAL_RCC_OscConfig+0x538>
 800b750:	40023800 	.word	0x40023800
 800b754:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b758:	4b1b      	ldr	r3, [pc, #108]	@ (800b7c8 <HAL_RCC_OscConfig+0x544>)
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	2b01      	cmp	r3, #1
 800b764:	d028      	beq.n	800b7b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b770:	429a      	cmp	r2, r3
 800b772:	d121      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b77e:	429a      	cmp	r2, r3
 800b780:	d11a      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b788:	4013      	ands	r3, r2
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b78e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b790:	4293      	cmp	r3, r2
 800b792:	d111      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b79e:	085b      	lsrs	r3, r3, #1
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d107      	bne.n	800b7b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d001      	beq.n	800b7bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e000      	b.n	800b7be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3718      	adds	r7, #24
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	40023800 	.word	0x40023800

0800b7cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d101      	bne.n	800b7e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e0d0      	b.n	800b986 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b7e4:	4b6a      	ldr	r3, [pc, #424]	@ (800b990 <HAL_RCC_ClockConfig+0x1c4>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 030f 	and.w	r3, r3, #15
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d910      	bls.n	800b814 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7f2:	4b67      	ldr	r3, [pc, #412]	@ (800b990 <HAL_RCC_ClockConfig+0x1c4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f023 020f 	bic.w	r2, r3, #15
 800b7fa:	4965      	ldr	r1, [pc, #404]	@ (800b990 <HAL_RCC_ClockConfig+0x1c4>)
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b802:	4b63      	ldr	r3, [pc, #396]	@ (800b990 <HAL_RCC_ClockConfig+0x1c4>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 030f 	and.w	r3, r3, #15
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d001      	beq.n	800b814 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b810:	2301      	movs	r3, #1
 800b812:	e0b8      	b.n	800b986 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0302 	and.w	r3, r3, #2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d020      	beq.n	800b862 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 0304 	and.w	r3, r3, #4
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d005      	beq.n	800b838 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b82c:	4b59      	ldr	r3, [pc, #356]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	4a58      	ldr	r2, [pc, #352]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0308 	and.w	r3, r3, #8
 800b840:	2b00      	cmp	r3, #0
 800b842:	d005      	beq.n	800b850 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b844:	4b53      	ldr	r3, [pc, #332]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	4a52      	ldr	r2, [pc, #328]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b84a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b84e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b850:	4b50      	ldr	r3, [pc, #320]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	494d      	ldr	r1, [pc, #308]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b85e:	4313      	orrs	r3, r2
 800b860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d040      	beq.n	800b8f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d107      	bne.n	800b886 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b876:	4b47      	ldr	r3, [pc, #284]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d115      	bne.n	800b8ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	e07f      	b.n	800b986 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d107      	bne.n	800b89e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b88e:	4b41      	ldr	r3, [pc, #260]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b896:	2b00      	cmp	r3, #0
 800b898:	d109      	bne.n	800b8ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e073      	b.n	800b986 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b89e:	4b3d      	ldr	r3, [pc, #244]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 0302 	and.w	r3, r3, #2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e06b      	b.n	800b986 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b8ae:	4b39      	ldr	r3, [pc, #228]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	f023 0203 	bic.w	r2, r3, #3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	4936      	ldr	r1, [pc, #216]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8c0:	f7fc fe08 	bl	80084d4 <HAL_GetTick>
 800b8c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8c6:	e00a      	b.n	800b8de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8c8:	f7fc fe04 	bl	80084d4 <HAL_GetTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d901      	bls.n	800b8de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e053      	b.n	800b986 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8de:	4b2d      	ldr	r3, [pc, #180]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f003 020c 	and.w	r2, r3, #12
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d1eb      	bne.n	800b8c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b8f0:	4b27      	ldr	r3, [pc, #156]	@ (800b990 <HAL_RCC_ClockConfig+0x1c4>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f003 030f 	and.w	r3, r3, #15
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d210      	bcs.n	800b920 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8fe:	4b24      	ldr	r3, [pc, #144]	@ (800b990 <HAL_RCC_ClockConfig+0x1c4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f023 020f 	bic.w	r2, r3, #15
 800b906:	4922      	ldr	r1, [pc, #136]	@ (800b990 <HAL_RCC_ClockConfig+0x1c4>)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b90e:	4b20      	ldr	r3, [pc, #128]	@ (800b990 <HAL_RCC_ClockConfig+0x1c4>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 030f 	and.w	r3, r3, #15
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d001      	beq.n	800b920 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e032      	b.n	800b986 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f003 0304 	and.w	r3, r3, #4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d008      	beq.n	800b93e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b92c:	4b19      	ldr	r3, [pc, #100]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b92e:	689b      	ldr	r3, [r3, #8]
 800b930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	4916      	ldr	r1, [pc, #88]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f003 0308 	and.w	r3, r3, #8
 800b946:	2b00      	cmp	r3, #0
 800b948:	d009      	beq.n	800b95e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b94a:	4b12      	ldr	r3, [pc, #72]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	490e      	ldr	r1, [pc, #56]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b95a:	4313      	orrs	r3, r2
 800b95c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b95e:	f000 f821 	bl	800b9a4 <HAL_RCC_GetSysClockFreq>
 800b962:	4602      	mov	r2, r0
 800b964:	4b0b      	ldr	r3, [pc, #44]	@ (800b994 <HAL_RCC_ClockConfig+0x1c8>)
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	091b      	lsrs	r3, r3, #4
 800b96a:	f003 030f 	and.w	r3, r3, #15
 800b96e:	490a      	ldr	r1, [pc, #40]	@ (800b998 <HAL_RCC_ClockConfig+0x1cc>)
 800b970:	5ccb      	ldrb	r3, [r1, r3]
 800b972:	fa22 f303 	lsr.w	r3, r2, r3
 800b976:	4a09      	ldr	r2, [pc, #36]	@ (800b99c <HAL_RCC_ClockConfig+0x1d0>)
 800b978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b97a:	4b09      	ldr	r3, [pc, #36]	@ (800b9a0 <HAL_RCC_ClockConfig+0x1d4>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fa ffce 	bl	8006920 <HAL_InitTick>

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	40023c00 	.word	0x40023c00
 800b994:	40023800 	.word	0x40023800
 800b998:	08016244 	.word	0x08016244
 800b99c:	20000040 	.word	0x20000040
 800b9a0:	20000080 	.word	0x20000080

0800b9a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9a8:	b090      	sub	sp, #64	@ 0x40
 800b9aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b9bc:	4b59      	ldr	r3, [pc, #356]	@ (800bb24 <HAL_RCC_GetSysClockFreq+0x180>)
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	f003 030c 	and.w	r3, r3, #12
 800b9c4:	2b08      	cmp	r3, #8
 800b9c6:	d00d      	beq.n	800b9e4 <HAL_RCC_GetSysClockFreq+0x40>
 800b9c8:	2b08      	cmp	r3, #8
 800b9ca:	f200 80a1 	bhi.w	800bb10 <HAL_RCC_GetSysClockFreq+0x16c>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d002      	beq.n	800b9d8 <HAL_RCC_GetSysClockFreq+0x34>
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	d003      	beq.n	800b9de <HAL_RCC_GetSysClockFreq+0x3a>
 800b9d6:	e09b      	b.n	800bb10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b9d8:	4b53      	ldr	r3, [pc, #332]	@ (800bb28 <HAL_RCC_GetSysClockFreq+0x184>)
 800b9da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b9dc:	e09b      	b.n	800bb16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b9de:	4b53      	ldr	r3, [pc, #332]	@ (800bb2c <HAL_RCC_GetSysClockFreq+0x188>)
 800b9e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b9e2:	e098      	b.n	800bb16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b9e4:	4b4f      	ldr	r3, [pc, #316]	@ (800bb24 <HAL_RCC_GetSysClockFreq+0x180>)
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b9ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b9ee:	4b4d      	ldr	r3, [pc, #308]	@ (800bb24 <HAL_RCC_GetSysClockFreq+0x180>)
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d028      	beq.n	800ba4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b9fa:	4b4a      	ldr	r3, [pc, #296]	@ (800bb24 <HAL_RCC_GetSysClockFreq+0x180>)
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	099b      	lsrs	r3, r3, #6
 800ba00:	2200      	movs	r2, #0
 800ba02:	623b      	str	r3, [r7, #32]
 800ba04:	627a      	str	r2, [r7, #36]	@ 0x24
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	4b47      	ldr	r3, [pc, #284]	@ (800bb2c <HAL_RCC_GetSysClockFreq+0x188>)
 800ba10:	fb03 f201 	mul.w	r2, r3, r1
 800ba14:	2300      	movs	r3, #0
 800ba16:	fb00 f303 	mul.w	r3, r0, r3
 800ba1a:	4413      	add	r3, r2
 800ba1c:	4a43      	ldr	r2, [pc, #268]	@ (800bb2c <HAL_RCC_GetSysClockFreq+0x188>)
 800ba1e:	fba0 1202 	umull	r1, r2, r0, r2
 800ba22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba24:	460a      	mov	r2, r1
 800ba26:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ba28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba2a:	4413      	add	r3, r2
 800ba2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba30:	2200      	movs	r2, #0
 800ba32:	61bb      	str	r3, [r7, #24]
 800ba34:	61fa      	str	r2, [r7, #28]
 800ba36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ba3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800ba3e:	f7f4 fbe7 	bl	8000210 <__aeabi_uldivmod>
 800ba42:	4602      	mov	r2, r0
 800ba44:	460b      	mov	r3, r1
 800ba46:	4613      	mov	r3, r2
 800ba48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba4a:	e053      	b.n	800baf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ba4c:	4b35      	ldr	r3, [pc, #212]	@ (800bb24 <HAL_RCC_GetSysClockFreq+0x180>)
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	099b      	lsrs	r3, r3, #6
 800ba52:	2200      	movs	r2, #0
 800ba54:	613b      	str	r3, [r7, #16]
 800ba56:	617a      	str	r2, [r7, #20]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ba5e:	f04f 0b00 	mov.w	fp, #0
 800ba62:	4652      	mov	r2, sl
 800ba64:	465b      	mov	r3, fp
 800ba66:	f04f 0000 	mov.w	r0, #0
 800ba6a:	f04f 0100 	mov.w	r1, #0
 800ba6e:	0159      	lsls	r1, r3, #5
 800ba70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ba74:	0150      	lsls	r0, r2, #5
 800ba76:	4602      	mov	r2, r0
 800ba78:	460b      	mov	r3, r1
 800ba7a:	ebb2 080a 	subs.w	r8, r2, sl
 800ba7e:	eb63 090b 	sbc.w	r9, r3, fp
 800ba82:	f04f 0200 	mov.w	r2, #0
 800ba86:	f04f 0300 	mov.w	r3, #0
 800ba8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ba8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ba92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ba96:	ebb2 0408 	subs.w	r4, r2, r8
 800ba9a:	eb63 0509 	sbc.w	r5, r3, r9
 800ba9e:	f04f 0200 	mov.w	r2, #0
 800baa2:	f04f 0300 	mov.w	r3, #0
 800baa6:	00eb      	lsls	r3, r5, #3
 800baa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baac:	00e2      	lsls	r2, r4, #3
 800baae:	4614      	mov	r4, r2
 800bab0:	461d      	mov	r5, r3
 800bab2:	eb14 030a 	adds.w	r3, r4, sl
 800bab6:	603b      	str	r3, [r7, #0]
 800bab8:	eb45 030b 	adc.w	r3, r5, fp
 800babc:	607b      	str	r3, [r7, #4]
 800babe:	f04f 0200 	mov.w	r2, #0
 800bac2:	f04f 0300 	mov.w	r3, #0
 800bac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800baca:	4629      	mov	r1, r5
 800bacc:	028b      	lsls	r3, r1, #10
 800bace:	4621      	mov	r1, r4
 800bad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bad4:	4621      	mov	r1, r4
 800bad6:	028a      	lsls	r2, r1, #10
 800bad8:	4610      	mov	r0, r2
 800bada:	4619      	mov	r1, r3
 800badc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bade:	2200      	movs	r2, #0
 800bae0:	60bb      	str	r3, [r7, #8]
 800bae2:	60fa      	str	r2, [r7, #12]
 800bae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bae8:	f7f4 fb92 	bl	8000210 <__aeabi_uldivmod>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	4613      	mov	r3, r2
 800baf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800baf4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb24 <HAL_RCC_GetSysClockFreq+0x180>)
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	0c1b      	lsrs	r3, r3, #16
 800bafa:	f003 0303 	and.w	r3, r3, #3
 800bafe:	3301      	adds	r3, #1
 800bb00:	005b      	lsls	r3, r3, #1
 800bb02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bb04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bb06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb08:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bb0e:	e002      	b.n	800bb16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bb10:	4b05      	ldr	r3, [pc, #20]	@ (800bb28 <HAL_RCC_GetSysClockFreq+0x184>)
 800bb12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bb14:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3740      	adds	r7, #64	@ 0x40
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb22:	bf00      	nop
 800bb24:	40023800 	.word	0x40023800
 800bb28:	00f42400 	.word	0x00f42400
 800bb2c:	017d7840 	.word	0x017d7840

0800bb30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bb30:	b480      	push	{r7}
 800bb32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bb34:	4b03      	ldr	r3, [pc, #12]	@ (800bb44 <HAL_RCC_GetHCLKFreq+0x14>)
 800bb36:	681b      	ldr	r3, [r3, #0]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	20000040 	.word	0x20000040

0800bb48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bb4c:	f7ff fff0 	bl	800bb30 <HAL_RCC_GetHCLKFreq>
 800bb50:	4602      	mov	r2, r0
 800bb52:	4b05      	ldr	r3, [pc, #20]	@ (800bb68 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	0a9b      	lsrs	r3, r3, #10
 800bb58:	f003 0307 	and.w	r3, r3, #7
 800bb5c:	4903      	ldr	r1, [pc, #12]	@ (800bb6c <HAL_RCC_GetPCLK1Freq+0x24>)
 800bb5e:	5ccb      	ldrb	r3, [r1, r3]
 800bb60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	40023800 	.word	0x40023800
 800bb6c:	08016254 	.word	0x08016254

0800bb70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bb74:	f7ff ffdc 	bl	800bb30 <HAL_RCC_GetHCLKFreq>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	4b05      	ldr	r3, [pc, #20]	@ (800bb90 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	0b5b      	lsrs	r3, r3, #13
 800bb80:	f003 0307 	and.w	r3, r3, #7
 800bb84:	4903      	ldr	r1, [pc, #12]	@ (800bb94 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb86:	5ccb      	ldrb	r3, [r1, r3]
 800bb88:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	40023800 	.word	0x40023800
 800bb94:	08016254 	.word	0x08016254

0800bb98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	220f      	movs	r2, #15
 800bba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800bba8:	4b12      	ldr	r3, [pc, #72]	@ (800bbf4 <HAL_RCC_GetClockConfig+0x5c>)
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	f003 0203 	and.w	r2, r3, #3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800bbb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf4 <HAL_RCC_GetClockConfig+0x5c>)
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800bbc0:	4b0c      	ldr	r3, [pc, #48]	@ (800bbf4 <HAL_RCC_GetClockConfig+0x5c>)
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800bbcc:	4b09      	ldr	r3, [pc, #36]	@ (800bbf4 <HAL_RCC_GetClockConfig+0x5c>)
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	08db      	lsrs	r3, r3, #3
 800bbd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800bbda:	4b07      	ldr	r3, [pc, #28]	@ (800bbf8 <HAL_RCC_GetClockConfig+0x60>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 020f 	and.w	r2, r3, #15
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	601a      	str	r2, [r3, #0]
}
 800bbe6:	bf00      	nop
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	40023800 	.word	0x40023800
 800bbf8:	40023c00 	.word	0x40023c00

0800bbfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bc04:	2300      	movs	r3, #0
 800bc06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bc10:	2300      	movs	r3, #0
 800bc12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f003 0301 	and.w	r3, r3, #1
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d012      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bc24:	4b69      	ldr	r3, [pc, #420]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	4a68      	ldr	r2, [pc, #416]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc2a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bc2e:	6093      	str	r3, [r2, #8]
 800bc30:	4b66      	ldr	r3, [pc, #408]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc32:	689a      	ldr	r2, [r3, #8]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc38:	4964      	ldr	r1, [pc, #400]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bc46:	2301      	movs	r3, #1
 800bc48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d017      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc56:	4b5d      	ldr	r3, [pc, #372]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc5c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc64:	4959      	ldr	r1, [pc, #356]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc66:	4313      	orrs	r3, r2
 800bc68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bc74:	d101      	bne.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bc76:	2301      	movs	r3, #1
 800bc78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bc82:	2301      	movs	r3, #1
 800bc84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d017      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bc92:	4b4e      	ldr	r3, [pc, #312]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bc94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc98:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bca0:	494a      	ldr	r1, [pc, #296]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bca2:	4313      	orrs	r3, r2
 800bca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bcb0:	d101      	bne.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d101      	bne.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 0320 	and.w	r3, r3, #32
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 808b 	beq.w	800bdf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bce0:	4b3a      	ldr	r3, [pc, #232]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bce4:	4a39      	ldr	r2, [pc, #228]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bcea:	6413      	str	r3, [r2, #64]	@ 0x40
 800bcec:	4b37      	ldr	r3, [pc, #220]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bcee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bcf4:	60bb      	str	r3, [r7, #8]
 800bcf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bcf8:	4b35      	ldr	r3, [pc, #212]	@ (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a34      	ldr	r2, [pc, #208]	@ (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bcfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd04:	f7fc fbe6 	bl	80084d4 <HAL_GetTick>
 800bd08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bd0a:	e008      	b.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd0c:	f7fc fbe2 	bl	80084d4 <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	2b64      	cmp	r3, #100	@ 0x64
 800bd18:	d901      	bls.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e357      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bd1e:	4b2c      	ldr	r3, [pc, #176]	@ (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0f0      	beq.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bd2a:	4b28      	ldr	r3, [pc, #160]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d035      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd42:	693a      	ldr	r2, [r7, #16]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d02e      	beq.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd48:	4b20      	ldr	r3, [pc, #128]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bd52:	4b1e      	ldr	r3, [pc, #120]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd56:	4a1d      	ldr	r2, [pc, #116]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd5c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bd5e:	4b1b      	ldr	r3, [pc, #108]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd62:	4a1a      	ldr	r2, [pc, #104]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800bd6a:	4a18      	ldr	r2, [pc, #96]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bd70:	4b16      	ldr	r3, [pc, #88]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d114      	bne.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd7c:	f7fc fbaa 	bl	80084d4 <HAL_GetTick>
 800bd80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd82:	e00a      	b.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd84:	f7fc fba6 	bl	80084d4 <HAL_GetTick>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d901      	bls.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e319      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd9e:	f003 0302 	and.w	r3, r3, #2
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d0ee      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdb2:	d111      	bne.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800bdb4:	4b05      	ldr	r3, [pc, #20]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bdc0:	4b04      	ldr	r3, [pc, #16]	@ (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bdc2:	400b      	ands	r3, r1
 800bdc4:	4901      	ldr	r1, [pc, #4]	@ (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	608b      	str	r3, [r1, #8]
 800bdca:	e00b      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800bdcc:	40023800 	.word	0x40023800
 800bdd0:	40007000 	.word	0x40007000
 800bdd4:	0ffffcff 	.word	0x0ffffcff
 800bdd8:	4baa      	ldr	r3, [pc, #680]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	4aa9      	ldr	r2, [pc, #676]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdde:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800bde2:	6093      	str	r3, [r2, #8]
 800bde4:	4ba7      	ldr	r3, [pc, #668]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bde6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdf0:	49a4      	ldr	r1, [pc, #656]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f003 0310 	and.w	r3, r3, #16
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d010      	beq.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800be02:	4ba0      	ldr	r3, [pc, #640]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be08:	4a9e      	ldr	r2, [pc, #632]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be0e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800be12:	4b9c      	ldr	r3, [pc, #624]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be14:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1c:	4999      	ldr	r1, [pc, #612]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00a      	beq.n	800be46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800be30:	4b94      	ldr	r3, [pc, #592]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be36:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be3e:	4991      	ldr	r1, [pc, #580]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be40:	4313      	orrs	r3, r2
 800be42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00a      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800be52:	4b8c      	ldr	r3, [pc, #560]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be60:	4988      	ldr	r1, [pc, #544]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be62:	4313      	orrs	r3, r2
 800be64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00a      	beq.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800be74:	4b83      	ldr	r3, [pc, #524]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be82:	4980      	ldr	r1, [pc, #512]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be84:	4313      	orrs	r3, r2
 800be86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00a      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be96:	4b7b      	ldr	r3, [pc, #492]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800be98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be9c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bea4:	4977      	ldr	r1, [pc, #476]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bea6:	4313      	orrs	r3, r2
 800bea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d00a      	beq.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800beb8:	4b72      	ldr	r3, [pc, #456]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bebe:	f023 0203 	bic.w	r2, r3, #3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bec6:	496f      	ldr	r1, [pc, #444]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bec8:	4313      	orrs	r3, r2
 800beca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00a      	beq.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800beda:	4b6a      	ldr	r3, [pc, #424]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bee0:	f023 020c 	bic.w	r2, r3, #12
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bee8:	4966      	ldr	r1, [pc, #408]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beea:	4313      	orrs	r3, r2
 800beec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00a      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800befc:	4b61      	ldr	r3, [pc, #388]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800befe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf02:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf0a:	495e      	ldr	r1, [pc, #376]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf0c:	4313      	orrs	r3, r2
 800bf0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d00a      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bf1e:	4b59      	ldr	r3, [pc, #356]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf24:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf2c:	4955      	ldr	r1, [pc, #340]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00a      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bf40:	4b50      	ldr	r3, [pc, #320]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf4e:	494d      	ldr	r1, [pc, #308]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf50:	4313      	orrs	r3, r2
 800bf52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00a      	beq.n	800bf78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800bf62:	4b48      	ldr	r3, [pc, #288]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf68:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf70:	4944      	ldr	r1, [pc, #272]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00a      	beq.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800bf84:	4b3f      	ldr	r3, [pc, #252]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf92:	493c      	ldr	r1, [pc, #240]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf94:	4313      	orrs	r3, r2
 800bf96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800bfa6:	4b37      	ldr	r3, [pc, #220]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfb4:	4933      	ldr	r1, [pc, #204]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00a      	beq.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bfc8:	4b2e      	ldr	r3, [pc, #184]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfce:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bfd6:	492b      	ldr	r1, [pc, #172]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d011      	beq.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bfea:	4b26      	ldr	r3, [pc, #152]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bff0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bff8:	4922      	ldr	r1, [pc, #136]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bffa:	4313      	orrs	r3, r2
 800bffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c008:	d101      	bne.n	800c00e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c00a:	2301      	movs	r3, #1
 800c00c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 0308 	and.w	r3, r3, #8
 800c016:	2b00      	cmp	r3, #0
 800c018:	d001      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c01a:	2301      	movs	r3, #1
 800c01c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c02a:	4b16      	ldr	r3, [pc, #88]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c030:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c038:	4912      	ldr	r1, [pc, #72]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c03a:	4313      	orrs	r3, r2
 800c03c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00b      	beq.n	800c064 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c04c:	4b0d      	ldr	r3, [pc, #52]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c052:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c05c:	4909      	ldr	r1, [pc, #36]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c05e:	4313      	orrs	r3, r2
 800c060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	2b01      	cmp	r3, #1
 800c068:	d006      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c072:	2b00      	cmp	r3, #0
 800c074:	f000 80d9 	beq.w	800c22a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c078:	4b02      	ldr	r3, [pc, #8]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a01      	ldr	r2, [pc, #4]	@ (800c084 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c07e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c082:	e001      	b.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c084:	40023800 	.word	0x40023800
 800c088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c08a:	f7fc fa23 	bl	80084d4 <HAL_GetTick>
 800c08e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c090:	e008      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c092:	f7fc fa1f 	bl	80084d4 <HAL_GetTick>
 800c096:	4602      	mov	r2, r0
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	1ad3      	subs	r3, r2, r3
 800c09c:	2b64      	cmp	r3, #100	@ 0x64
 800c09e:	d901      	bls.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0a0:	2303      	movs	r3, #3
 800c0a2:	e194      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c0a4:	4b6c      	ldr	r3, [pc, #432]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1f0      	bne.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f003 0301 	and.w	r3, r3, #1
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d021      	beq.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d11d      	bne.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c0c4:	4b64      	ldr	r3, [pc, #400]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0ca:	0c1b      	lsrs	r3, r3, #16
 800c0cc:	f003 0303 	and.w	r3, r3, #3
 800c0d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c0d2:	4b61      	ldr	r3, [pc, #388]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c0d8:	0e1b      	lsrs	r3, r3, #24
 800c0da:	f003 030f 	and.w	r3, r3, #15
 800c0de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	019a      	lsls	r2, r3, #6
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	041b      	lsls	r3, r3, #16
 800c0ea:	431a      	orrs	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	061b      	lsls	r3, r3, #24
 800c0f0:	431a      	orrs	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	689b      	ldr	r3, [r3, #8]
 800c0f6:	071b      	lsls	r3, r3, #28
 800c0f8:	4957      	ldr	r1, [pc, #348]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d004      	beq.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c114:	d00a      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d02e      	beq.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c126:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c12a:	d129      	bne.n	800c180 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c12c:	4b4a      	ldr	r3, [pc, #296]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c132:	0c1b      	lsrs	r3, r3, #16
 800c134:	f003 0303 	and.w	r3, r3, #3
 800c138:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c13a:	4b47      	ldr	r3, [pc, #284]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c140:	0f1b      	lsrs	r3, r3, #28
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	019a      	lsls	r2, r3, #6
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	041b      	lsls	r3, r3, #16
 800c152:	431a      	orrs	r2, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	061b      	lsls	r3, r3, #24
 800c15a:	431a      	orrs	r2, r3
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	071b      	lsls	r3, r3, #28
 800c160:	493d      	ldr	r1, [pc, #244]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c162:	4313      	orrs	r3, r2
 800c164:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c168:	4b3b      	ldr	r3, [pc, #236]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c16a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c16e:	f023 021f 	bic.w	r2, r3, #31
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c176:	3b01      	subs	r3, #1
 800c178:	4937      	ldr	r1, [pc, #220]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c17a:	4313      	orrs	r3, r2
 800c17c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d01d      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c18c:	4b32      	ldr	r3, [pc, #200]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c192:	0e1b      	lsrs	r3, r3, #24
 800c194:	f003 030f 	and.w	r3, r3, #15
 800c198:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c19a:	4b2f      	ldr	r3, [pc, #188]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c19c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1a0:	0f1b      	lsrs	r3, r3, #28
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	019a      	lsls	r2, r3, #6
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	041b      	lsls	r3, r3, #16
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	061b      	lsls	r3, r3, #24
 800c1ba:	431a      	orrs	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	071b      	lsls	r3, r3, #28
 800c1c0:	4925      	ldr	r1, [pc, #148]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d011      	beq.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	019a      	lsls	r2, r3, #6
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	041b      	lsls	r3, r3, #16
 800c1e0:	431a      	orrs	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	061b      	lsls	r3, r3, #24
 800c1e8:	431a      	orrs	r2, r3
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	071b      	lsls	r3, r3, #28
 800c1f0:	4919      	ldr	r1, [pc, #100]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c1f8:	4b17      	ldr	r3, [pc, #92]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a16      	ldr	r2, [pc, #88]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c202:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c204:	f7fc f966 	bl	80084d4 <HAL_GetTick>
 800c208:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c20a:	e008      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c20c:	f7fc f962 	bl	80084d4 <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	2b64      	cmp	r3, #100	@ 0x64
 800c218:	d901      	bls.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e0d7      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c21e:	4b0e      	ldr	r3, [pc, #56]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c226:	2b00      	cmp	r3, #0
 800c228:	d0f0      	beq.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	f040 80cd 	bne.w	800c3cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c232:	4b09      	ldr	r3, [pc, #36]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a08      	ldr	r2, [pc, #32]	@ (800c258 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c238:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c23c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c23e:	f7fc f949 	bl	80084d4 <HAL_GetTick>
 800c242:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c244:	e00a      	b.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c246:	f7fc f945 	bl	80084d4 <HAL_GetTick>
 800c24a:	4602      	mov	r2, r0
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	2b64      	cmp	r3, #100	@ 0x64
 800c252:	d903      	bls.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c254:	2303      	movs	r3, #3
 800c256:	e0ba      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c258:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c25c:	4b5e      	ldr	r3, [pc, #376]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c268:	d0ed      	beq.n	800c246 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c272:	2b00      	cmp	r3, #0
 800c274:	d003      	beq.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d009      	beq.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c286:	2b00      	cmp	r3, #0
 800c288:	d02e      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d12a      	bne.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c292:	4b51      	ldr	r3, [pc, #324]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c298:	0c1b      	lsrs	r3, r3, #16
 800c29a:	f003 0303 	and.w	r3, r3, #3
 800c29e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c2a0:	4b4d      	ldr	r3, [pc, #308]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2a6:	0f1b      	lsrs	r3, r3, #28
 800c2a8:	f003 0307 	and.w	r3, r3, #7
 800c2ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	019a      	lsls	r2, r3, #6
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	041b      	lsls	r3, r3, #16
 800c2b8:	431a      	orrs	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	061b      	lsls	r3, r3, #24
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	071b      	lsls	r3, r3, #28
 800c2c6:	4944      	ldr	r1, [pc, #272]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c2ce:	4b42      	ldr	r3, [pc, #264]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2d4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	021b      	lsls	r3, r3, #8
 800c2e0:	493d      	ldr	r1, [pc, #244]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d022      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c2f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c2fc:	d11d      	bne.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c2fe:	4b36      	ldr	r3, [pc, #216]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c304:	0e1b      	lsrs	r3, r3, #24
 800c306:	f003 030f 	and.w	r3, r3, #15
 800c30a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c30c:	4b32      	ldr	r3, [pc, #200]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c312:	0f1b      	lsrs	r3, r3, #28
 800c314:	f003 0307 	and.w	r3, r3, #7
 800c318:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	019a      	lsls	r2, r3, #6
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6a1b      	ldr	r3, [r3, #32]
 800c324:	041b      	lsls	r3, r3, #16
 800c326:	431a      	orrs	r2, r3
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	061b      	lsls	r3, r3, #24
 800c32c:	431a      	orrs	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	071b      	lsls	r3, r3, #28
 800c332:	4929      	ldr	r1, [pc, #164]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c334:	4313      	orrs	r3, r2
 800c336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0308 	and.w	r3, r3, #8
 800c342:	2b00      	cmp	r3, #0
 800c344:	d028      	beq.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c346:	4b24      	ldr	r3, [pc, #144]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c34c:	0e1b      	lsrs	r3, r3, #24
 800c34e:	f003 030f 	and.w	r3, r3, #15
 800c352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c354:	4b20      	ldr	r3, [pc, #128]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c35a:	0c1b      	lsrs	r3, r3, #16
 800c35c:	f003 0303 	and.w	r3, r3, #3
 800c360:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	695b      	ldr	r3, [r3, #20]
 800c366:	019a      	lsls	r2, r3, #6
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	041b      	lsls	r3, r3, #16
 800c36c:	431a      	orrs	r2, r3
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	061b      	lsls	r3, r3, #24
 800c372:	431a      	orrs	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	69db      	ldr	r3, [r3, #28]
 800c378:	071b      	lsls	r3, r3, #28
 800c37a:	4917      	ldr	r1, [pc, #92]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c37c:	4313      	orrs	r3, r2
 800c37e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c382:	4b15      	ldr	r3, [pc, #84]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c388:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c390:	4911      	ldr	r1, [pc, #68]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c392:	4313      	orrs	r3, r2
 800c394:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c398:	4b0f      	ldr	r3, [pc, #60]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	4a0e      	ldr	r2, [pc, #56]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c39e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3a4:	f7fc f896 	bl	80084d4 <HAL_GetTick>
 800c3a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c3aa:	e008      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c3ac:	f7fc f892 	bl	80084d4 <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	2b64      	cmp	r3, #100	@ 0x64
 800c3b8:	d901      	bls.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e007      	b.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c3be:	4b06      	ldr	r3, [pc, #24]	@ (800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c3ca:	d1ef      	bne.n	800c3ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3720      	adds	r7, #32
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	40023800 	.word	0x40023800

0800c3dc <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b085      	sub	sp, #20
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a80      	ldr	r2, [pc, #512]	@ (800c5ec <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 800c3ec:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800c3ee:	4b80      	ldr	r3, [pc, #512]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c3f4:	099b      	lsrs	r3, r3, #6
 800c3f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c3fe:	4b7c      	ldr	r3, [pc, #496]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c404:	0c1b      	lsrs	r3, r3, #16
 800c406:	f003 0203 	and.w	r2, r3, #3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c40e:	4b78      	ldr	r3, [pc, #480]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c414:	0e1b      	lsrs	r3, r3, #24
 800c416:	f003 020f 	and.w	r2, r3, #15
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c41e:	4b74      	ldr	r3, [pc, #464]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c420:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c424:	0f1b      	lsrs	r3, r3, #28
 800c426:	f003 0207 	and.w	r2, r3, #7
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 800c42e:	4b70      	ldr	r3, [pc, #448]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c434:	099b      	lsrs	r3, r3, #6
 800c436:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c43e:	4b6c      	ldr	r3, [pc, #432]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c444:	0c1b      	lsrs	r3, r3, #16
 800c446:	f003 0203 	and.w	r2, r3, #3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c44e:	4b68      	ldr	r3, [pc, #416]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c454:	0e1b      	lsrs	r3, r3, #24
 800c456:	f003 020f 	and.w	r2, r3, #15
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c45e:	4b64      	ldr	r3, [pc, #400]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c464:	0f1b      	lsrs	r3, r3, #28
 800c466:	f003 0207 	and.w	r2, r3, #7
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800c46e:	4b60      	ldr	r3, [pc, #384]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c474:	f003 021f 	and.w	r2, r3, #31
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 800c47c:	4b5c      	ldr	r3, [pc, #368]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c47e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c482:	0a1b      	lsrs	r3, r3, #8
 800c484:	f003 021f 	and.w	r2, r3, #31
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 800c48c:	4b58      	ldr	r3, [pc, #352]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c48e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c492:	0c1b      	lsrs	r3, r3, #16
 800c494:	f003 0203 	and.w	r2, r3, #3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 800c49c:	4b54      	ldr	r3, [pc, #336]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c49e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4a2:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800c4aa:	4b51      	ldr	r3, [pc, #324]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4b0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800c4b8:	4b4d      	ldr	r3, [pc, #308]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800c4c4:	4b4a      	ldr	r3, [pc, #296]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800c4d2:	4b47      	ldr	r3, [pc, #284]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4d8:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 800c4e0:	4b43      	ldr	r3, [pc, #268]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4e6:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 800c4ee:	4b40      	ldr	r3, [pc, #256]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4f4:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 800c4fc:	4b3c      	ldr	r3, [pc, #240]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c4fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c502:	f003 0203 	and.w	r2, r3, #3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800c50a:	4b39      	ldr	r3, [pc, #228]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c510:	f003 020c 	and.w	r2, r3, #12
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 800c518:	4b35      	ldr	r3, [pc, #212]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c51e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800c526:	4b32      	ldr	r3, [pc, #200]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c52c:	f003 02c0 	and.w	r2, r3, #192	@ 0xc0
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800c534:	4b2e      	ldr	r3, [pc, #184]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c53a:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800c542:	4b2b      	ldr	r3, [pc, #172]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c548:	f403 6240 	and.w	r2, r3, #3072	@ 0xc00
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800c550:	4b27      	ldr	r3, [pc, #156]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c556:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 800c55e:	4b24      	ldr	r3, [pc, #144]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c564:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c56c:	4b20      	ldr	r3, [pc, #128]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c56e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c572:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800c57a:	4b1d      	ldr	r3, [pc, #116]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c580:	f003 6280 	and.w	r2, r3, #67108864	@ 0x4000000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800c588:	4b19      	ldr	r3, [pc, #100]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c58e:	f003 6200 	and.w	r2, r3, #134217728	@ 0x8000000
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800c596:	4b16      	ldr	r3, [pc, #88]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c59c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800c5a6:	4b12      	ldr	r3, [pc, #72]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c5ae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800c5b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c5b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5b4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	431a      	orrs	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800c5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5f0 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800c5c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d103      	bne.n	800c5d6 <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800c5d4:	e003      	b.n	800c5de <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c5dc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c5de:	bf00      	nop
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	00fffff1 	.word	0x00fffff1
 800c5f0:	40023800 	.word	0x40023800

0800c5f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c604:	2300      	movs	r3, #0
 800c606:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c608:	2300      	movs	r3, #0
 800c60a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c612:	f040 808d 	bne.w	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c616:	4b93      	ldr	r3, [pc, #588]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c61c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c624:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c62c:	d07c      	beq.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c634:	d87b      	bhi.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d004      	beq.n	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c642:	d039      	beq.n	800c6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c644:	e073      	b.n	800c72e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c646:	4b87      	ldr	r3, [pc, #540]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d108      	bne.n	800c664 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c652:	4b84      	ldr	r3, [pc, #528]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c65a:	4a83      	ldr	r2, [pc, #524]	@ (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c65c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c660:	613b      	str	r3, [r7, #16]
 800c662:	e007      	b.n	800c674 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c664:	4b7f      	ldr	r3, [pc, #508]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c66c:	4a7f      	ldr	r2, [pc, #508]	@ (800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c672:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c674:	4b7b      	ldr	r3, [pc, #492]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c67a:	0e1b      	lsrs	r3, r3, #24
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c682:	4b78      	ldr	r3, [pc, #480]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c688:	099b      	lsrs	r3, r3, #6
 800c68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68e:	693a      	ldr	r2, [r7, #16]
 800c690:	fb03 f202 	mul.w	r2, r3, r2
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	fbb2 f3f3 	udiv	r3, r2, r3
 800c69a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c69c:	4b71      	ldr	r3, [pc, #452]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c69e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6a2:	0a1b      	lsrs	r3, r3, #8
 800c6a4:	f003 031f 	and.w	r3, r3, #31
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6b4:	617b      	str	r3, [r7, #20]
        break;
 800c6b6:	e03b      	b.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c6b8:	4b6a      	ldr	r3, [pc, #424]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d108      	bne.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c6c4:	4b67      	ldr	r3, [pc, #412]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6cc:	4a66      	ldr	r2, [pc, #408]	@ (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c6ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6d2:	613b      	str	r3, [r7, #16]
 800c6d4:	e007      	b.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c6d6:	4b63      	ldr	r3, [pc, #396]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c6de:	4a63      	ldr	r2, [pc, #396]	@ (800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c6e6:	4b5f      	ldr	r3, [pc, #380]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6ec:	0e1b      	lsrs	r3, r3, #24
 800c6ee:	f003 030f 	and.w	r3, r3, #15
 800c6f2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c6f4:	4b5b      	ldr	r3, [pc, #364]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6fa:	099b      	lsrs	r3, r3, #6
 800c6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c700:	693a      	ldr	r2, [r7, #16]
 800c702:	fb03 f202 	mul.w	r2, r3, r2
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	fbb2 f3f3 	udiv	r3, r2, r3
 800c70c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c70e:	4b55      	ldr	r3, [pc, #340]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c714:	f003 031f 	and.w	r3, r3, #31
 800c718:	3301      	adds	r3, #1
 800c71a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	fbb2 f3f3 	udiv	r3, r2, r3
 800c724:	617b      	str	r3, [r7, #20]
        break;
 800c726:	e003      	b.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c728:	4b51      	ldr	r3, [pc, #324]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c72a:	617b      	str	r3, [r7, #20]
        break;
 800c72c:	e000      	b.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800c72e:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c736:	f040 808d 	bne.w	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c73a:	4b4a      	ldr	r3, [pc, #296]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c73c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c740:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800c748:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c750:	d07c      	beq.n	800c84c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c758:	d87b      	bhi.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d004      	beq.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c766:	d039      	beq.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c768:	e073      	b.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c76a:	4b3e      	ldr	r3, [pc, #248]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c76c:	685b      	ldr	r3, [r3, #4]
 800c76e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c772:	2b00      	cmp	r3, #0
 800c774:	d108      	bne.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c776:	4b3b      	ldr	r3, [pc, #236]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c77e:	4a3a      	ldr	r2, [pc, #232]	@ (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c780:	fbb2 f3f3 	udiv	r3, r2, r3
 800c784:	613b      	str	r3, [r7, #16]
 800c786:	e007      	b.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c788:	4b36      	ldr	r3, [pc, #216]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c790:	4a36      	ldr	r2, [pc, #216]	@ (800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c792:	fbb2 f3f3 	udiv	r3, r2, r3
 800c796:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c798:	4b32      	ldr	r3, [pc, #200]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c79e:	0e1b      	lsrs	r3, r3, #24
 800c7a0:	f003 030f 	and.w	r3, r3, #15
 800c7a4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c7a6:	4b2f      	ldr	r3, [pc, #188]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c7a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7ac:	099b      	lsrs	r3, r3, #6
 800c7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7b2:	693a      	ldr	r2, [r7, #16]
 800c7b4:	fb03 f202 	mul.w	r2, r3, r2
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7be:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c7c0:	4b28      	ldr	r3, [pc, #160]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7c6:	0a1b      	lsrs	r3, r3, #8
 800c7c8:	f003 031f 	and.w	r3, r3, #31
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c7d0:	697a      	ldr	r2, [r7, #20]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7d8:	617b      	str	r3, [r7, #20]
        break;
 800c7da:	e03b      	b.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c7dc:	4b21      	ldr	r3, [pc, #132]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d108      	bne.n	800c7fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c868 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800c7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c7f6:	613b      	str	r3, [r7, #16]
 800c7f8:	e007      	b.n	800c80a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c7fa:	4b1a      	ldr	r3, [pc, #104]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c802:	4a1a      	ldr	r2, [pc, #104]	@ (800c86c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800c804:	fbb2 f3f3 	udiv	r3, r2, r3
 800c808:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c80a:	4b16      	ldr	r3, [pc, #88]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c810:	0e1b      	lsrs	r3, r3, #24
 800c812:	f003 030f 	and.w	r3, r3, #15
 800c816:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c818:	4b12      	ldr	r3, [pc, #72]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c81a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c81e:	099b      	lsrs	r3, r3, #6
 800c820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c824:	693a      	ldr	r2, [r7, #16]
 800c826:	fb03 f202 	mul.w	r2, r3, r2
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c830:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c832:	4b0c      	ldr	r3, [pc, #48]	@ (800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800c834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c838:	f003 031f 	and.w	r3, r3, #31
 800c83c:	3301      	adds	r3, #1
 800c83e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c840:	697a      	ldr	r2, [r7, #20]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	fbb2 f3f3 	udiv	r3, r2, r3
 800c848:	617b      	str	r3, [r7, #20]
        break;
 800c84a:	e003      	b.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800c84c:	4b08      	ldr	r3, [pc, #32]	@ (800c870 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800c84e:	617b      	str	r3, [r7, #20]
        break;
 800c850:	e000      	b.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800c852:	bf00      	nop
      }
    }
  }

  return frequency;
 800c854:	697b      	ldr	r3, [r7, #20]
}
 800c856:	4618      	mov	r0, r3
 800c858:	371c      	adds	r7, #28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	40023800 	.word	0x40023800
 800c868:	00f42400 	.word	0x00f42400
 800c86c:	017d7840 	.word	0x017d7840
 800c870:	00bb8000 	.word	0x00bb8000

0800c874 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b088      	sub	sp, #32
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	e156      	b.n	800cb40 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f7f9 ff02 	bl	80066b0 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2202      	movs	r2, #2
 800c8b0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fa85 	bl	800cdc4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d00c      	beq.n	800c8dc <HAL_SAI_Init+0x68>
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d80d      	bhi.n	800c8e2 <HAL_SAI_Init+0x6e>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d002      	beq.n	800c8d0 <HAL_SAI_Init+0x5c>
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d003      	beq.n	800c8d6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c8ce:	e008      	b.n	800c8e2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	61fb      	str	r3, [r7, #28]
      break;
 800c8d4:	e006      	b.n	800c8e4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c8d6:	2310      	movs	r3, #16
 800c8d8:	61fb      	str	r3, [r7, #28]
      break;
 800c8da:	e003      	b.n	800c8e4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c8dc:	2320      	movs	r3, #32
 800c8de:	61fb      	str	r3, [r7, #28]
      break;
 800c8e0:	e000      	b.n	800c8e4 <HAL_SAI_Init+0x70>
      break;
 800c8e2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	2b03      	cmp	r3, #3
 800c8ea:	d81e      	bhi.n	800c92a <HAL_SAI_Init+0xb6>
 800c8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f4 <HAL_SAI_Init+0x80>)
 800c8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f2:	bf00      	nop
 800c8f4:	0800c905 	.word	0x0800c905
 800c8f8:	0800c90b 	.word	0x0800c90b
 800c8fc:	0800c913 	.word	0x0800c913
 800c900:	0800c91b 	.word	0x0800c91b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c904:	2300      	movs	r3, #0
 800c906:	617b      	str	r3, [r7, #20]
    }
    break;
 800c908:	e010      	b.n	800c92c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c90a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c90e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c910:	e00c      	b.n	800c92c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c912:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c916:	617b      	str	r3, [r7, #20]
    }
    break;
 800c918:	e008      	b.n	800c92c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c91a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c91e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	f043 0301 	orr.w	r3, r3, #1
 800c926:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c928:	e000      	b.n	800c92c <HAL_SAI_Init+0xb8>
    default:
      break;
 800c92a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a85      	ldr	r2, [pc, #532]	@ (800cb48 <HAL_SAI_Init+0x2d4>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d004      	beq.n	800c940 <HAL_SAI_Init+0xcc>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a84      	ldr	r2, [pc, #528]	@ (800cb4c <HAL_SAI_Init+0x2d8>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d103      	bne.n	800c948 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c940:	4a83      	ldr	r2, [pc, #524]	@ (800cb50 <HAL_SAI_Init+0x2dc>)
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	e002      	b.n	800c94e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c948:	4a82      	ldr	r2, [pc, #520]	@ (800cb54 <HAL_SAI_Init+0x2e0>)
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	69db      	ldr	r3, [r3, #28]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d04c      	beq.n	800c9f0 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a7a      	ldr	r2, [pc, #488]	@ (800cb48 <HAL_SAI_Init+0x2d4>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d004      	beq.n	800c96e <HAL_SAI_Init+0xfa>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a78      	ldr	r2, [pc, #480]	@ (800cb4c <HAL_SAI_Init+0x2d8>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d104      	bne.n	800c978 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c96e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c972:	f7ff fe3f 	bl	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c976:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a76      	ldr	r2, [pc, #472]	@ (800cb58 <HAL_SAI_Init+0x2e4>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d004      	beq.n	800c98c <HAL_SAI_Init+0x118>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a75      	ldr	r2, [pc, #468]	@ (800cb5c <HAL_SAI_Init+0x2e8>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d104      	bne.n	800c996 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c98c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c990:	f7ff fe30 	bl	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800c994:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c996:	693a      	ldr	r2, [r7, #16]
 800c998:	4613      	mov	r3, r2
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4413      	add	r3, r2
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	69db      	ldr	r3, [r3, #28]
 800c9a6:	025b      	lsls	r3, r3, #9
 800c9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ac:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	4a6b      	ldr	r2, [pc, #428]	@ (800cb60 <HAL_SAI_Init+0x2ec>)
 800c9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b6:	08da      	lsrs	r2, r3, #3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c9bc:	68f9      	ldr	r1, [r7, #12]
 800c9be:	4b68      	ldr	r3, [pc, #416]	@ (800cb60 <HAL_SAI_Init+0x2ec>)
 800c9c0:	fba3 2301 	umull	r2, r3, r3, r1
 800c9c4:	08da      	lsrs	r2, r3, #3
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	4413      	add	r3, r2
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	1aca      	subs	r2, r1, r3
 800c9d0:	2a08      	cmp	r2, #8
 800c9d2:	d904      	bls.n	800c9de <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a1b      	ldr	r3, [r3, #32]
 800c9d8:	1c5a      	adds	r2, r3, #1
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9e2:	2b04      	cmp	r3, #4
 800c9e4:	d104      	bne.n	800c9f0 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	085a      	lsrs	r2, r3, #1
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d003      	beq.n	800ca00 <HAL_SAI_Init+0x18c>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d109      	bne.n	800ca14 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d101      	bne.n	800ca0c <HAL_SAI_Init+0x198>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	e001      	b.n	800ca10 <HAL_SAI_Init+0x19c>
 800ca0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca10:	61bb      	str	r3, [r7, #24]
 800ca12:	e008      	b.n	800ca26 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d102      	bne.n	800ca22 <HAL_SAI_Init+0x1ae>
 800ca1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca20:	e000      	b.n	800ca24 <HAL_SAI_Init+0x1b0>
 800ca22:	2300      	movs	r3, #0
 800ca24:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	6819      	ldr	r1, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	4b4c      	ldr	r3, [pc, #304]	@ (800cb64 <HAL_SAI_Init+0x2f0>)
 800ca32:	400b      	ands	r3, r1
 800ca34:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6819      	ldr	r1, [r3, #0]
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685a      	ldr	r2, [r3, #4]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca44:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ca4a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca50:	431a      	orrs	r2, r3
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800ca5e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	691b      	ldr	r3, [r3, #16]
 800ca64:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800ca6a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6a1b      	ldr	r3, [r3, #32]
 800ca70:	051b      	lsls	r3, r3, #20
 800ca72:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6859      	ldr	r1, [r3, #4]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	4b38      	ldr	r3, [pc, #224]	@ (800cb68 <HAL_SAI_Init+0x2f4>)
 800ca88:	400b      	ands	r3, r1
 800ca8a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6859      	ldr	r1, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	699a      	ldr	r2, [r3, #24]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca9a:	431a      	orrs	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caa0:	431a      	orrs	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	6899      	ldr	r1, [r3, #8]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	4b2d      	ldr	r3, [pc, #180]	@ (800cb6c <HAL_SAI_Init+0x2f8>)
 800cab6:	400b      	ands	r3, r1
 800cab8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6899      	ldr	r1, [r3, #8]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800caca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800cad0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800cad6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cadc:	3b01      	subs	r3, #1
 800cade:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800cae0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	430a      	orrs	r2, r1
 800cae8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68d9      	ldr	r1, [r3, #12]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800caf8:	400b      	ands	r3, r1
 800cafa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	68d9      	ldr	r1, [r3, #12]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb0a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cb10:	041b      	lsls	r3, r3, #16
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	021b      	lsls	r3, r3, #8
 800cb1c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	430a      	orrs	r2, r1
 800cb24:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2201      	movs	r2, #1
 800cb32:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3720      	adds	r7, #32
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	40015804 	.word	0x40015804
 800cb4c:	40015824 	.word	0x40015824
 800cb50:	40015800 	.word	0x40015800
 800cb54:	40015c00 	.word	0x40015c00
 800cb58:	40015c04 	.word	0x40015c04
 800cb5c:	40015c24 	.word	0x40015c24
 800cb60:	cccccccd 	.word	0xcccccccd
 800cb64:	ff05c010 	.word	0xff05c010
 800cb68:	ffff1ff0 	.word	0xffff1ff0
 800cb6c:	fff88000 	.word	0xfff88000

0800cb70 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e027      	b.n	800cbd2 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2202      	movs	r2, #2
 800cb86:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9a:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f911 	bl	800cdc4 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f042 0208 	orr.w	r2, r2, #8
 800cbb0:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7f9 fe5a 	bl	800686c <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800cbd0:	2300      	movs	r3, #0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3708      	adds	r7, #8
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
	...

0800cbdc <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800cbea:	f7fb fc73 	bl	80084d4 <HAL_GetTick>
 800cbee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d002      	beq.n	800cbfc <HAL_SAI_Transmit_DMA+0x20>
 800cbf6:	88fb      	ldrh	r3, [r7, #6]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e093      	b.n	800cd28 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	f040 808c 	bne.w	800cd26 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d101      	bne.n	800cc1c <HAL_SAI_Transmit_DMA+0x40>
 800cc18:	2302      	movs	r3, #2
 800cc1a:	e085      	b.n	800cd28 <HAL_SAI_Transmit_DMA+0x14c>
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	88fa      	ldrh	r2, [r7, #6]
 800cc2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	88fa      	ldrh	r2, [r7, #6]
 800cc36:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2212      	movs	r2, #18
 800cc46:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc4e:	4a38      	ldr	r2, [pc, #224]	@ (800cd30 <HAL_SAI_Transmit_DMA+0x154>)
 800cc50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc56:	4a37      	ldr	r2, [pc, #220]	@ (800cd34 <HAL_SAI_Transmit_DMA+0x158>)
 800cc58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc5e:	4a36      	ldr	r2, [pc, #216]	@ (800cd38 <HAL_SAI_Transmit_DMA+0x15c>)
 800cc60:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc66:	2200      	movs	r2, #0
 800cc68:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cc72:	4619      	mov	r1, r3
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	331c      	adds	r3, #28
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cc82:	f7fc f8d9 	bl	8008e38 <HAL_DMA_Start_IT>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d005      	beq.n	800cc98 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e047      	b.n	800cd28 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800cc98:	2100      	movs	r1, #0
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f000 f85c 	bl	800cd58 <SAI_InterruptFlag>
 800cca0:	4601      	mov	r1, r0
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	691a      	ldr	r2, [r3, #16]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	430a      	orrs	r2, r1
 800ccae:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ccbe:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ccc0:	e015      	b.n	800ccee <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800ccc2:	f7fb fc07 	bl	80084d4 <HAL_GetTick>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	1ad3      	subs	r3, r2, r3
 800cccc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ccd0:	d90d      	bls.n	800ccee <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccd8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ccea:	2303      	movs	r3, #3
 800ccec:	e01c      	b.n	800cd28 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	695b      	ldr	r3, [r3, #20]
 800ccf4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d0e2      	beq.n	800ccc2 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d107      	bne.n	800cd1a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800cd18:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	e000      	b.n	800cd28 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800cd26:	2302      	movs	r3, #2
  }
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	0800ce95 	.word	0x0800ce95
 800cd34:	0800ce35 	.word	0x0800ce35
 800cd38:	0800ceb1 	.word	0x0800ceb1

0800cd3c <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(const SAI_HandleTypeDef *hsai)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  return hsai->State;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800cd4a:	b2db      	uxtb	r3, r3
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b085      	sub	sp, #20
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800cd62:	2301      	movs	r3, #1
 800cd64:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d103      	bne.n	800cd74 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f043 0308 	orr.w	r3, r3, #8
 800cd72:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd78:	2b08      	cmp	r3, #8
 800cd7a:	d10b      	bne.n	800cd94 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d003      	beq.n	800cd8c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d103      	bne.n	800cd94 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f043 0310 	orr.w	r3, r3, #16
 800cd92:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	2b03      	cmp	r3, #3
 800cd9a:	d003      	beq.n	800cda4 <SAI_InterruptFlag+0x4c>
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d104      	bne.n	800cdae <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	e003      	b.n	800cdb6 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f043 0304 	orr.w	r3, r3, #4
 800cdb4:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3714      	adds	r7, #20
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr

0800cdc4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800cdcc:	4b17      	ldr	r3, [pc, #92]	@ (800ce2c <SAI_Disable+0x68>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a17      	ldr	r2, [pc, #92]	@ (800ce30 <SAI_Disable+0x6c>)
 800cdd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdd6:	0b1b      	lsrs	r3, r3, #12
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800cdee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	1e5a      	subs	r2, r3, #1
 800cdf4:	60fa      	str	r2, [r7, #12]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10a      	bne.n	800ce10 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800ce0a:	2303      	movs	r3, #3
 800ce0c:	72fb      	strb	r3, [r7, #11]
      break;
 800ce0e:	e006      	b.n	800ce1e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1e8      	bne.n	800cdf0 <SAI_Disable+0x2c>

  return status;
 800ce1e:	7afb      	ldrb	r3, [r7, #11]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	20000040 	.word	0x20000040
 800ce30:	95cbec1b 	.word	0x95cbec1b

0800ce34 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce40:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce4a:	d01c      	beq.n	800ce86 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800ce62:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800ce64:	2100      	movs	r1, #0
 800ce66:	68f8      	ldr	r0, [r7, #12]
 800ce68:	f7ff ff76 	bl	800cd58 <SAI_InterruptFlag>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	43d9      	mvns	r1, r3
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	691a      	ldr	r2, [r3, #16]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	400a      	ands	r2, r1
 800ce7c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f7f7 fdca 	bl	8004a20 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800ce8c:	bf00      	nop
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f7f7 fdc6 	bl	8004a34 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cea8:	bf00      	nop
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b084      	sub	sp, #16
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cebc:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cec4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ced2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d004      	beq.n	800cee2 <SAI_DMAError+0x32>
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cedc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d112      	bne.n	800cf08 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800cef0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f7ff ff66 	bl	800cdc4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f7f7 fd9d 	bl	8004a48 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b082      	sub	sp, #8
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf24:	2301      	movs	r3, #1
 800cf26:	e022      	b.n	800cf6e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d105      	bne.n	800cf40 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f7f9 f9a0 	bl	8006280 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2203      	movs	r2, #3
 800cf44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 f815 	bl	800cf78 <HAL_SD_InitCard>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d001      	beq.n	800cf58 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	e00a      	b.n	800cf6e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
	...

0800cf78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf78:	b5b0      	push	{r4, r5, r7, lr}
 800cf7a:	b08e      	sub	sp, #56	@ 0x38
 800cf7c:	af04      	add	r7, sp, #16
 800cf7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cf80:	2300      	movs	r3, #0
 800cf82:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800cf84:	2300      	movs	r3, #0
 800cf86:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cf90:	2300      	movs	r3, #0
 800cf92:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800cf94:	2376      	movs	r3, #118	@ 0x76
 800cf96:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681d      	ldr	r5, [r3, #0]
 800cf9c:	466c      	mov	r4, sp
 800cf9e:	f107 0314 	add.w	r3, r7, #20
 800cfa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cfaa:	f107 0308 	add.w	r3, r7, #8
 800cfae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f002 f99d 	bl	800f2f0 <SDMMC_Init>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800cfbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d001      	beq.n	800cfc8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	e059      	b.n	800d07c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	685a      	ldr	r2, [r3, #4]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cfd6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f002 f9d1 	bl	800f384 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	685a      	ldr	r2, [r3, #4]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cff0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cff2:	2002      	movs	r0, #2
 800cff4:	f7fb fa7a 	bl	80084ec <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 ff59 	bl	800deb0 <SD_PowerON>
 800cffe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d000:	6a3b      	ldr	r3, [r7, #32]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00b      	beq.n	800d01e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2201      	movs	r2, #1
 800d00a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	431a      	orrs	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	e02e      	b.n	800d07c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fe78 	bl	800dd14 <SD_InitCard>
 800d024:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d026:	6a3b      	ldr	r3, [r7, #32]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00b      	beq.n	800d044 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2201      	movs	r2, #1
 800d030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d038:	6a3b      	ldr	r3, [r7, #32]
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e01b      	b.n	800d07c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d04c:	4618      	mov	r0, r3
 800d04e:	f002 fa2b 	bl	800f4a8 <SDMMC_CmdBlockLength>
 800d052:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d054:	6a3b      	ldr	r3, [r7, #32]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00f      	beq.n	800d07a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a09      	ldr	r2, [pc, #36]	@ (800d084 <HAL_SD_InitCard+0x10c>)
 800d060:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	431a      	orrs	r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d076:	2301      	movs	r3, #1
 800d078:	e000      	b.n	800d07c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3728      	adds	r7, #40	@ 0x28
 800d080:	46bd      	mov	sp, r7
 800d082:	bdb0      	pop	{r4, r5, r7, pc}
 800d084:	004005ff 	.word	0x004005ff

0800d088 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b08c      	sub	sp, #48	@ 0x30
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d107      	bne.n	800d0b0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e0c3      	b.n	800d238 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	f040 80bc 	bne.w	800d236 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d0c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	441a      	add	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d907      	bls.n	800d0e2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e0aa      	b.n	800d238 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2203      	movs	r2, #3
 800d0e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800d100:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d106:	4a4e      	ldr	r2, [pc, #312]	@ (800d240 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d108:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d10e:	4a4d      	ldr	r2, [pc, #308]	@ (800d244 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d110:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d116:	2200      	movs	r2, #0
 800d118:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d11e:	2200      	movs	r2, #0
 800d120:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d132:	689a      	ldr	r2, [r3, #8]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	430a      	orrs	r2, r1
 800d13c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	3380      	adds	r3, #128	@ 0x80
 800d148:	4619      	mov	r1, r3
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	025b      	lsls	r3, r3, #9
 800d150:	089b      	lsrs	r3, r3, #2
 800d152:	f7fb fe71 	bl	8008e38 <HAL_DMA_Start_IT>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d017      	beq.n	800d18c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800d16a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a35      	ldr	r2, [pc, #212]	@ (800d248 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d172:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d178:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2201      	movs	r2, #1
 800d184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	e055      	b.n	800d238 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f042 0208 	orr.w	r2, r2, #8
 800d19a:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d002      	beq.n	800d1aa <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800d1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a6:	025b      	lsls	r3, r3, #9
 800d1a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	025b      	lsls	r3, r3, #9
 800d1b4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d1b6:	2390      	movs	r3, #144	@ 0x90
 800d1b8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d1ba:	2302      	movs	r3, #2
 800d1bc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f107 0210 	add.w	r2, r7, #16
 800d1ce:	4611      	mov	r1, r2
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f002 f93d 	bl	800f450 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d90a      	bls.n	800d1f2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2282      	movs	r2, #130	@ 0x82
 800d1e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f002 f9a1 	bl	800f530 <SDMMC_CmdReadMultiBlock>
 800d1ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d1f0:	e009      	b.n	800d206 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2281      	movs	r2, #129	@ 0x81
 800d1f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1fe:	4618      	mov	r0, r3
 800d200:	f002 f974 	bl	800f4ec <SDMMC_CmdReadSingleBlock>
 800d204:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d012      	beq.n	800d232 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a0d      	ldr	r2, [pc, #52]	@ (800d248 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d212:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21a:	431a      	orrs	r2, r3
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2200      	movs	r2, #0
 800d22c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800d22e:	2301      	movs	r3, #1
 800d230:	e002      	b.n	800d238 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800d232:	2300      	movs	r3, #0
 800d234:	e000      	b.n	800d238 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800d236:	2302      	movs	r3, #2
  }
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3730      	adds	r7, #48	@ 0x30
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	0800db23 	.word	0x0800db23
 800d244:	0800db95 	.word	0x0800db95
 800d248:	004005ff 	.word	0x004005ff

0800d24c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08c      	sub	sp, #48	@ 0x30
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d107      	bne.n	800d274 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d268:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d270:	2301      	movs	r3, #1
 800d272:	e0c6      	b.n	800d402 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	f040 80bf 	bne.w	800d400 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2200      	movs	r2, #0
 800d286:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	441a      	add	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d292:	429a      	cmp	r2, r3
 800d294:	d907      	bls.n	800d2a6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d29a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e0ad      	b.n	800d402 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2203      	movs	r2, #3
 800d2aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f042 021a 	orr.w	r2, r2, #26
 800d2c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ca:	4a50      	ldr	r2, [pc, #320]	@ (800d40c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d2cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2d2:	4a4f      	ldr	r2, [pc, #316]	@ (800d410 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d2d4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2da:	2200      	movs	r2, #0
 800d2dc:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d002      	beq.n	800d2ec <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e8:	025b      	lsls	r3, r3, #9
 800d2ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d90a      	bls.n	800d308 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	22a0      	movs	r2, #160	@ 0xa0
 800d2f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2fe:	4618      	mov	r0, r3
 800d300:	f002 f95a 	bl	800f5b8 <SDMMC_CmdWriteMultiBlock>
 800d304:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d306:	e009      	b.n	800d31c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2290      	movs	r2, #144	@ 0x90
 800d30c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d314:	4618      	mov	r0, r3
 800d316:	f002 f92d 	bl	800f574 <SDMMC_CmdWriteSingleBlock>
 800d31a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d012      	beq.n	800d348 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a3b      	ldr	r2, [pc, #236]	@ (800d414 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d328:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d330:	431a      	orrs	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2200      	movs	r2, #0
 800d342:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d344:	2301      	movs	r3, #1
 800d346:	e05c      	b.n	800d402 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f042 0208 	orr.w	r2, r2, #8
 800d356:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d35c:	2240      	movs	r2, #64	@ 0x40
 800d35e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d370:	689a      	ldr	r2, [r3, #8]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	430a      	orrs	r2, r1
 800d37a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d380:	68b9      	ldr	r1, [r7, #8]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	3380      	adds	r3, #128	@ 0x80
 800d388:	461a      	mov	r2, r3
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	025b      	lsls	r3, r3, #9
 800d38e:	089b      	lsrs	r3, r3, #2
 800d390:	f7fb fd52 	bl	8008e38 <HAL_DMA_Start_IT>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d01a      	beq.n	800d3d0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f022 021a 	bic.w	r2, r2, #26
 800d3a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a19      	ldr	r2, [pc, #100]	@ (800d414 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d3b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e018      	b.n	800d402 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	025b      	lsls	r3, r3, #9
 800d3da:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d3dc:	2390      	movs	r3, #144	@ 0x90
 800d3de:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f107 0210 	add.w	r2, r7, #16
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f002 f82a 	bl	800f450 <SDMMC_ConfigData>

      return HAL_OK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	e000      	b.n	800d402 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d400:	2302      	movs	r3, #2
  }
}
 800d402:	4618      	mov	r0, r3
 800d404:	3730      	adds	r7, #48	@ 0x30
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	0800daf9 	.word	0x0800daf9
 800d410:	0800db95 	.word	0x0800db95
 800d414:	004005ff 	.word	0x004005ff

0800d418 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d424:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d42c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d430:	2b00      	cmp	r3, #0
 800d432:	d008      	beq.n	800d446 <HAL_SD_IRQHandler+0x2e>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f003 0308 	and.w	r3, r3, #8
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d003      	beq.n	800d446 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 fdec 	bl	800e01c <SD_Read_IT>
 800d444:	e15a      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d44c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d450:	2b00      	cmp	r3, #0
 800d452:	f000 808d 	beq.w	800d570 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d45e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681a      	ldr	r2, [r3, #0]
 800d46a:	4b9a      	ldr	r3, [pc, #616]	@ (800d6d4 <HAL_SD_IRQHandler+0x2bc>)
 800d46c:	400b      	ands	r3, r1
 800d46e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f022 0201 	bic.w	r2, r2, #1
 800d47e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	f003 0308 	and.w	r3, r3, #8
 800d486:	2b00      	cmp	r3, #0
 800d488:	d039      	beq.n	800d4fe <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f003 0302 	and.w	r3, r3, #2
 800d490:	2b00      	cmp	r3, #0
 800d492:	d104      	bne.n	800d49e <HAL_SD_IRQHandler+0x86>
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	f003 0320 	and.w	r3, r3, #32
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d011      	beq.n	800d4c2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f002 f8aa 	bl	800f5fc <SDMMC_CmdStopTransfer>
 800d4a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d008      	beq.n	800d4c2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f921 	bl	800d704 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d4ca:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f003 0301 	and.w	r3, r3, #1
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d104      	bne.n	800d4ee <HAL_SD_IRQHandler+0xd6>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f003 0302 	and.w	r3, r3, #2
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f002 fcc8 	bl	800fe84 <HAL_SD_RxCpltCallback>
 800d4f4:	e102      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f002 fcba 	bl	800fe70 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d4fc:	e0fe      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d504:	2b00      	cmp	r3, #0
 800d506:	f000 80f9 	beq.w	800d6fc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f003 0320 	and.w	r3, r3, #32
 800d510:	2b00      	cmp	r3, #0
 800d512:	d011      	beq.n	800d538 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4618      	mov	r0, r3
 800d51a:	f002 f86f 	bl	800f5fc <SDMMC_CmdStopTransfer>
 800d51e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d008      	beq.n	800d538 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	431a      	orrs	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f8e6 	bl	800d704 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f003 0301 	and.w	r3, r3, #1
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f040 80dc 	bne.w	800d6fc <HAL_SD_IRQHandler+0x2e4>
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f003 0302 	and.w	r3, r3, #2
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f040 80d6 	bne.w	800d6fc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f022 0208 	bic.w	r2, r2, #8
 800d55e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f002 fc81 	bl	800fe70 <HAL_SD_TxCpltCallback>
}
 800d56e:	e0c5      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d008      	beq.n	800d590 <HAL_SD_IRQHandler+0x178>
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f003 0308 	and.w	r3, r3, #8
 800d584:	2b00      	cmp	r3, #0
 800d586:	d003      	beq.n	800d590 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 fd98 	bl	800e0be <SD_Write_IT>
 800d58e:	e0b5      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d596:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f000 80ae 	beq.w	800d6fc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5a6:	f003 0302 	and.w	r3, r3, #2
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d005      	beq.n	800d5ba <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5b2:	f043 0202 	orr.w	r2, r3, #2
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5c0:	f003 0308 	and.w	r3, r3, #8
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d005      	beq.n	800d5d4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5cc:	f043 0208 	orr.w	r2, r3, #8
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5da:	f003 0320 	and.w	r3, r3, #32
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d005      	beq.n	800d5ee <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5e6:	f043 0220 	orr.w	r2, r3, #32
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5f4:	f003 0310 	and.w	r3, r3, #16
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d005      	beq.n	800d608 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d600:	f043 0210 	orr.w	r2, r3, #16
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d610:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d620:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4618      	mov	r0, r3
 800d628:	f001 ffe8 	bl	800f5fc <SDMMC_CmdStopTransfer>
 800d62c:	4602      	mov	r2, r0
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d632:	431a      	orrs	r2, r3
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f003 0308 	and.w	r3, r3, #8
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00a      	beq.n	800d658 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2201      	movs	r2, #1
 800d646:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f857 	bl	800d704 <HAL_SD_ErrorCallback>
}
 800d656:	e051      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d04c      	beq.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f003 0310 	and.w	r3, r3, #16
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d104      	bne.n	800d676 <HAL_SD_IRQHandler+0x25e>
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	f003 0320 	and.w	r3, r3, #32
 800d672:	2b00      	cmp	r3, #0
 800d674:	d011      	beq.n	800d69a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d67a:	4a17      	ldr	r2, [pc, #92]	@ (800d6d8 <HAL_SD_IRQHandler+0x2c0>)
 800d67c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d682:	4618      	mov	r0, r3
 800d684:	f7fb fc38 	bl	8008ef8 <HAL_DMA_Abort_IT>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d036      	beq.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d692:	4618      	mov	r0, r3
 800d694:	f000 fad0 	bl	800dc38 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d698:	e030      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f003 0301 	and.w	r3, r3, #1
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d104      	bne.n	800d6ae <HAL_SD_IRQHandler+0x296>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f003 0302 	and.w	r3, r3, #2
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d018      	beq.n	800d6e0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b2:	4a0a      	ldr	r2, [pc, #40]	@ (800d6dc <HAL_SD_IRQHandler+0x2c4>)
 800d6b4:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fb fc1c 	bl	8008ef8 <HAL_DMA_Abort_IT>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d01a      	beq.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f000 faeb 	bl	800dca6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6d0:	e014      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
 800d6d2:	bf00      	nop
 800d6d4:	ffff3ec5 	.word	0xffff3ec5
 800d6d8:	0800dc39 	.word	0x0800dc39
 800d6dc:	0800dca7 	.word	0x0800dca7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f002 fbb1 	bl	800fe5c <HAL_SD_AbortCallback>
}
 800d6fa:	e7ff      	b.n	800d6fc <HAL_SD_IRQHandler+0x2e4>
 800d6fc:	bf00      	nop
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d704:	b480      	push	{r7}
 800d706:	b083      	sub	sp, #12
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d70c:	bf00      	nop
 800d70e:	370c      	adds	r7, #12
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr

0800d718 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
 800d720:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d726:	0f9b      	lsrs	r3, r3, #30
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d732:	0e9b      	lsrs	r3, r3, #26
 800d734:	b2db      	uxtb	r3, r3
 800d736:	f003 030f 	and.w	r3, r3, #15
 800d73a:	b2da      	uxtb	r2, r3
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d744:	0e1b      	lsrs	r3, r3, #24
 800d746:	b2db      	uxtb	r3, r3
 800d748:	f003 0303 	and.w	r3, r3, #3
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d756:	0c1b      	lsrs	r3, r3, #16
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d762:	0a1b      	lsrs	r3, r3, #8
 800d764:	b2da      	uxtb	r2, r3
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d76e:	b2da      	uxtb	r2, r3
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d778:	0d1b      	lsrs	r3, r3, #20
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d784:	0c1b      	lsrs	r3, r3, #16
 800d786:	b2db      	uxtb	r3, r3
 800d788:	f003 030f 	and.w	r3, r3, #15
 800d78c:	b2da      	uxtb	r2, r3
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d796:	0bdb      	lsrs	r3, r3, #15
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7a8:	0b9b      	lsrs	r3, r3, #14
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	f003 0301 	and.w	r3, r3, #1
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7ba:	0b5b      	lsrs	r3, r3, #13
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	f003 0301 	and.w	r3, r3, #1
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7cc:	0b1b      	lsrs	r3, r3, #12
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d163      	bne.n	800d8b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7ec:	009a      	lsls	r2, r3, #2
 800d7ee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d7f8:	0f92      	lsrs	r2, r2, #30
 800d7fa:	431a      	orrs	r2, r3
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d804:	0edb      	lsrs	r3, r3, #27
 800d806:	b2db      	uxtb	r3, r3
 800d808:	f003 0307 	and.w	r3, r3, #7
 800d80c:	b2da      	uxtb	r2, r3
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d816:	0e1b      	lsrs	r3, r3, #24
 800d818:	b2db      	uxtb	r3, r3
 800d81a:	f003 0307 	and.w	r3, r3, #7
 800d81e:	b2da      	uxtb	r2, r3
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d828:	0d5b      	lsrs	r3, r3, #21
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	f003 0307 	and.w	r3, r3, #7
 800d830:	b2da      	uxtb	r2, r3
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d83a:	0c9b      	lsrs	r3, r3, #18
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	f003 0307 	and.w	r3, r3, #7
 800d842:	b2da      	uxtb	r2, r3
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d84c:	0bdb      	lsrs	r3, r3, #15
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	f003 0307 	and.w	r3, r3, #7
 800d854:	b2da      	uxtb	r2, r3
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	1c5a      	adds	r2, r3, #1
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	7e1b      	ldrb	r3, [r3, #24]
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	f003 0307 	and.w	r3, r3, #7
 800d86e:	3302      	adds	r3, #2
 800d870:	2201      	movs	r2, #1
 800d872:	fa02 f303 	lsl.w	r3, r2, r3
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d87a:	fb03 f202 	mul.w	r2, r3, r2
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	7a1b      	ldrb	r3, [r3, #8]
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f003 030f 	and.w	r3, r3, #15
 800d88c:	2201      	movs	r2, #1
 800d88e:	409a      	lsls	r2, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d898:	687a      	ldr	r2, [r7, #4]
 800d89a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d89c:	0a52      	lsrs	r2, r2, #9
 800d89e:	fb03 f202 	mul.w	r2, r3, r2
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8ac:	661a      	str	r2, [r3, #96]	@ 0x60
 800d8ae:	e031      	b.n	800d914 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d11d      	bne.n	800d8f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d8bc:	041b      	lsls	r3, r3, #16
 800d8be:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8c6:	0c1b      	lsrs	r3, r3, #16
 800d8c8:	431a      	orrs	r2, r3
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	029a      	lsls	r2, r3, #10
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	661a      	str	r2, [r3, #96]	@ 0x60
 800d8f2:	e00f      	b.n	800d914 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a58      	ldr	r2, [pc, #352]	@ (800da5c <HAL_SD_GetCardCSD+0x344>)
 800d8fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d900:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2201      	movs	r2, #1
 800d90c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d910:	2301      	movs	r3, #1
 800d912:	e09d      	b.n	800da50 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d918:	0b9b      	lsrs	r3, r3, #14
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	f003 0301 	and.w	r3, r3, #1
 800d920:	b2da      	uxtb	r2, r3
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d92a:	09db      	lsrs	r3, r3, #7
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d932:	b2da      	uxtb	r2, r3
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d942:	b2da      	uxtb	r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d94c:	0fdb      	lsrs	r3, r3, #31
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d958:	0f5b      	lsrs	r3, r3, #29
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	f003 0303 	and.w	r3, r3, #3
 800d960:	b2da      	uxtb	r2, r3
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d96a:	0e9b      	lsrs	r3, r3, #26
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	f003 0307 	and.w	r3, r3, #7
 800d972:	b2da      	uxtb	r2, r3
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d97c:	0d9b      	lsrs	r3, r3, #22
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	f003 030f 	and.w	r3, r3, #15
 800d984:	b2da      	uxtb	r2, r3
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d98e:	0d5b      	lsrs	r3, r3, #21
 800d990:	b2db      	uxtb	r3, r3
 800d992:	f003 0301 	and.w	r3, r3, #1
 800d996:	b2da      	uxtb	r2, r3
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9aa:	0c1b      	lsrs	r3, r3, #16
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9be:	0bdb      	lsrs	r3, r3, #15
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9d2:	0b9b      	lsrs	r3, r3, #14
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	f003 0301 	and.w	r3, r3, #1
 800d9da:	b2da      	uxtb	r2, r3
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9e6:	0b5b      	lsrs	r3, r3, #13
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9fa:	0b1b      	lsrs	r3, r3, #12
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 0301 	and.w	r3, r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da0e:	0a9b      	lsrs	r3, r3, #10
 800da10:	b2db      	uxtb	r3, r3
 800da12:	f003 0303 	and.w	r3, r3, #3
 800da16:	b2da      	uxtb	r2, r3
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da22:	0a1b      	lsrs	r3, r3, #8
 800da24:	b2db      	uxtb	r3, r3
 800da26:	f003 0303 	and.w	r3, r3, #3
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da36:	085b      	lsrs	r3, r3, #1
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2201      	movs	r2, #1
 800da4a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800da4e:	2300      	movs	r3, #0
}
 800da50:	4618      	mov	r0, r3
 800da52:	370c      	adds	r7, #12
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr
 800da5c:	004005ff 	.word	0x004005ff

0800da60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800daaa:	2300      	movs	r3, #0
}
 800daac:	4618      	mov	r0, r3
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dac0:	2300      	movs	r3, #0
 800dac2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dac4:	f107 030c 	add.w	r3, r7, #12
 800dac8:	4619      	mov	r1, r3
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fa7e 	bl	800dfcc <SD_SendStatus>
 800dad0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d005      	beq.n	800dae4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	431a      	orrs	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	0a5b      	lsrs	r3, r3, #9
 800dae8:	f003 030f 	and.w	r3, r3, #15
 800daec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800daee:	693b      	ldr	r3, [r7, #16]
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3718      	adds	r7, #24
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800daf8:	b480      	push	{r7}
 800dafa:	b085      	sub	sp, #20
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db04:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800db14:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800db16:	bf00      	nop
 800db18:	3714      	adds	r7, #20
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr

0800db22 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b084      	sub	sp, #16
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db2e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db34:	2b82      	cmp	r3, #130	@ 0x82
 800db36:	d111      	bne.n	800db5c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f001 fd5d 	bl	800f5fc <SDMMC_CmdStopTransfer>
 800db42:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d008      	beq.n	800db5c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	431a      	orrs	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f7ff fdd4 	bl	800d704 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f022 0208 	bic.w	r2, r2, #8
 800db6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f240 523a 	movw	r2, #1338	@ 0x53a
 800db74:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2201      	movs	r2, #1
 800db7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2200      	movs	r2, #0
 800db82:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f002 f97d 	bl	800fe84 <HAL_SD_RxCpltCallback>
#endif
}
 800db8a:	bf00      	nop
 800db8c:	3710      	adds	r7, #16
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dba0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7fb fb54 	bl	8009250 <HAL_DMA_GetError>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	d03e      	beq.n	800dc2c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbb4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbbc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d002      	beq.n	800dbca <SD_DMAError+0x36>
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d12d      	bne.n	800dc26 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	4a19      	ldr	r2, [pc, #100]	@ (800dc34 <SD_DMAError+0xa0>)
 800dbd0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800dbe0:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dbee:	6978      	ldr	r0, [r7, #20]
 800dbf0:	f7ff ff62 	bl	800dab8 <HAL_SD_GetCardState>
 800dbf4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	2b06      	cmp	r3, #6
 800dbfa:	d002      	beq.n	800dc02 <SD_DMAError+0x6e>
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2b05      	cmp	r3, #5
 800dc00:	d10a      	bne.n	800dc18 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f001 fcf8 	bl	800f5fc <SDMMC_CmdStopTransfer>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc12:	431a      	orrs	r2, r3
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	2200      	movs	r2, #0
 800dc24:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dc26:	6978      	ldr	r0, [r7, #20]
 800dc28:	f7ff fd6c 	bl	800d704 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dc2c:	bf00      	nop
 800dc2e:	3718      	adds	r7, #24
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}
 800dc34:	004005ff 	.word	0x004005ff

0800dc38 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc44:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dc4e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dc50:	68f8      	ldr	r0, [r7, #12]
 800dc52:	f7ff ff31 	bl	800dab8 <HAL_SD_GetCardState>
 800dc56:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2200      	movs	r2, #0
 800dc64:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2b06      	cmp	r3, #6
 800dc6a:	d002      	beq.n	800dc72 <SD_DMATxAbort+0x3a>
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2b05      	cmp	r3, #5
 800dc70:	d10a      	bne.n	800dc88 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f001 fcc0 	bl	800f5fc <SDMMC_CmdStopTransfer>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc82:	431a      	orrs	r2, r3
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d103      	bne.n	800dc98 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dc90:	68f8      	ldr	r0, [r7, #12]
 800dc92:	f002 f8e3 	bl	800fe5c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dc96:	e002      	b.n	800dc9e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f7ff fd33 	bl	800d704 <HAL_SD_ErrorCallback>
}
 800dc9e:	bf00      	nop
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b084      	sub	sp, #16
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcb2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dcbc:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dcbe:	68f8      	ldr	r0, [r7, #12]
 800dcc0:	f7ff fefa 	bl	800dab8 <HAL_SD_GetCardState>
 800dcc4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2201      	movs	r2, #1
 800dcca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	2b06      	cmp	r3, #6
 800dcd8:	d002      	beq.n	800dce0 <SD_DMARxAbort+0x3a>
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	2b05      	cmp	r3, #5
 800dcde:	d10a      	bne.n	800dcf6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f001 fc89 	bl	800f5fc <SDMMC_CmdStopTransfer>
 800dcea:	4602      	mov	r2, r0
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcf0:	431a      	orrs	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d103      	bne.n	800dd06 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dcfe:	68f8      	ldr	r0, [r7, #12]
 800dd00:	f002 f8ac 	bl	800fe5c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dd04:	e002      	b.n	800dd0c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f7ff fcfc 	bl	800d704 <HAL_SD_ErrorCallback>
}
 800dd0c:	bf00      	nop
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dd14:	b5b0      	push	{r4, r5, r7, lr}
 800dd16:	b094      	sub	sp, #80	@ 0x50
 800dd18:	af04      	add	r7, sp, #16
 800dd1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f001 fb3b 	bl	800f3a0 <SDMMC_GetPowerState>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d102      	bne.n	800dd36 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd30:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800dd34:	e0b8      	b.n	800dea8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d02f      	beq.n	800dd9e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4618      	mov	r0, r3
 800dd44:	f001 fd22 	bl	800f78c <SDMMC_CmdSendCID>
 800dd48:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d001      	beq.n	800dd54 <SD_InitCard+0x40>
    {
      return errorstate;
 800dd50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd52:	e0a9      	b.n	800dea8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	2100      	movs	r1, #0
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f001 fb65 	bl	800f42a <SDMMC_GetResponse>
 800dd60:	4602      	mov	r2, r0
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2104      	movs	r1, #4
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f001 fb5c 	bl	800f42a <SDMMC_GetResponse>
 800dd72:	4602      	mov	r2, r0
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2108      	movs	r1, #8
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f001 fb53 	bl	800f42a <SDMMC_GetResponse>
 800dd84:	4602      	mov	r2, r0
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	210c      	movs	r1, #12
 800dd90:	4618      	mov	r0, r3
 800dd92:	f001 fb4a 	bl	800f42a <SDMMC_GetResponse>
 800dd96:	4602      	mov	r2, r0
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dda2:	2b03      	cmp	r3, #3
 800dda4:	d00d      	beq.n	800ddc2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f107 020e 	add.w	r2, r7, #14
 800ddae:	4611      	mov	r1, r2
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f001 fd28 	bl	800f806 <SDMMC_CmdSetRelAdd>
 800ddb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <SD_InitCard+0xae>
    {
      return errorstate;
 800ddbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddc0:	e072      	b.n	800dea8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddc6:	2b03      	cmp	r3, #3
 800ddc8:	d036      	beq.n	800de38 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ddca:	89fb      	ldrh	r3, [r7, #14]
 800ddcc:	461a      	mov	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddda:	041b      	lsls	r3, r3, #16
 800dddc:	4619      	mov	r1, r3
 800ddde:	4610      	mov	r0, r2
 800dde0:	f001 fcf2 	bl	800f7c8 <SDMMC_CmdSendCSD>
 800dde4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dde6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d001      	beq.n	800ddf0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ddec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddee:	e05b      	b.n	800dea8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	2100      	movs	r1, #0
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f001 fb17 	bl	800f42a <SDMMC_GetResponse>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2104      	movs	r1, #4
 800de08:	4618      	mov	r0, r3
 800de0a:	f001 fb0e 	bl	800f42a <SDMMC_GetResponse>
 800de0e:	4602      	mov	r2, r0
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2108      	movs	r1, #8
 800de1a:	4618      	mov	r0, r3
 800de1c:	f001 fb05 	bl	800f42a <SDMMC_GetResponse>
 800de20:	4602      	mov	r2, r0
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	210c      	movs	r1, #12
 800de2c:	4618      	mov	r0, r3
 800de2e:	f001 fafc 	bl	800f42a <SDMMC_GetResponse>
 800de32:	4602      	mov	r2, r0
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2104      	movs	r1, #4
 800de3e:	4618      	mov	r0, r3
 800de40:	f001 faf3 	bl	800f42a <SDMMC_GetResponse>
 800de44:	4603      	mov	r3, r0
 800de46:	0d1a      	lsrs	r2, r3, #20
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800de4c:	f107 0310 	add.w	r3, r7, #16
 800de50:	4619      	mov	r1, r3
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f7ff fc60 	bl	800d718 <HAL_SD_GetCardCSD>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800de62:	e021      	b.n	800dea8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6819      	ldr	r1, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de6c:	041b      	lsls	r3, r3, #16
 800de6e:	2200      	movs	r2, #0
 800de70:	461c      	mov	r4, r3
 800de72:	4615      	mov	r5, r2
 800de74:	4622      	mov	r2, r4
 800de76:	462b      	mov	r3, r5
 800de78:	4608      	mov	r0, r1
 800de7a:	f001 fbe1 	bl	800f640 <SDMMC_CmdSelDesel>
 800de7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800de80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de82:	2b00      	cmp	r3, #0
 800de84:	d001      	beq.n	800de8a <SD_InitCard+0x176>
  {
    return errorstate;
 800de86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de88:	e00e      	b.n	800dea8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681d      	ldr	r5, [r3, #0]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	466c      	mov	r4, sp
 800de92:	f103 0210 	add.w	r2, r3, #16
 800de96:	ca07      	ldmia	r2, {r0, r1, r2}
 800de98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de9c:	3304      	adds	r3, #4
 800de9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dea0:	4628      	mov	r0, r5
 800dea2:	f001 fa25 	bl	800f2f0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3740      	adds	r7, #64	@ 0x40
 800deac:	46bd      	mov	sp, r7
 800deae:	bdb0      	pop	{r4, r5, r7, pc}

0800deb0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800deb8:	2300      	movs	r3, #0
 800deba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800debc:	2300      	movs	r3, #0
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	2300      	movs	r3, #0
 800dec2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4618      	mov	r0, r3
 800deca:	f001 fbdc 	bl	800f686 <SDMMC_CmdGoIdleState>
 800dece:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <SD_PowerON+0x2a>
  {
    return errorstate;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	e072      	b.n	800dfc0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4618      	mov	r0, r3
 800dee0:	f001 fbef 	bl	800f6c2 <SDMMC_CmdOperCond>
 800dee4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00d      	beq.n	800df08 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4618      	mov	r0, r3
 800def8:	f001 fbc5 	bl	800f686 <SDMMC_CmdGoIdleState>
 800defc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d004      	beq.n	800df0e <SD_PowerON+0x5e>
    {
      return errorstate;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	e05b      	b.n	800dfc0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2201      	movs	r2, #1
 800df0c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df12:	2b01      	cmp	r3, #1
 800df14:	d137      	bne.n	800df86 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2100      	movs	r1, #0
 800df1c:	4618      	mov	r0, r3
 800df1e:	f001 fbef 	bl	800f700 <SDMMC_CmdAppCommand>
 800df22:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d02d      	beq.n	800df86 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df2a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800df2e:	e047      	b.n	800dfc0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2100      	movs	r1, #0
 800df36:	4618      	mov	r0, r3
 800df38:	f001 fbe2 	bl	800f700 <SDMMC_CmdAppCommand>
 800df3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d001      	beq.n	800df48 <SD_PowerON+0x98>
    {
      return errorstate;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	e03b      	b.n	800dfc0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	491e      	ldr	r1, [pc, #120]	@ (800dfc8 <SD_PowerON+0x118>)
 800df4e:	4618      	mov	r0, r3
 800df50:	f001 fbf8 	bl	800f744 <SDMMC_CmdAppOperCommand>
 800df54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800df60:	e02e      	b.n	800dfc0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2100      	movs	r1, #0
 800df68:	4618      	mov	r0, r3
 800df6a:	f001 fa5e 	bl	800f42a <SDMMC_GetResponse>
 800df6e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	0fdb      	lsrs	r3, r3, #31
 800df74:	2b01      	cmp	r3, #1
 800df76:	d101      	bne.n	800df7c <SD_PowerON+0xcc>
 800df78:	2301      	movs	r3, #1
 800df7a:	e000      	b.n	800df7e <SD_PowerON+0xce>
 800df7c:	2300      	movs	r3, #0
 800df7e:	613b      	str	r3, [r7, #16]

    count++;
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	3301      	adds	r3, #1
 800df84:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d802      	bhi.n	800df96 <SD_PowerON+0xe6>
 800df90:	693b      	ldr	r3, [r7, #16]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d0cc      	beq.n	800df30 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d902      	bls.n	800dfa6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dfa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dfa4:	e00c      	b.n	800dfc0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d003      	beq.n	800dfb8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	645a      	str	r2, [r3, #68]	@ 0x44
 800dfb6:	e002      	b.n	800dfbe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dfbe:	2300      	movs	r3, #0
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3718      	adds	r7, #24
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	c1100000 	.word	0xc1100000

0800dfcc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d102      	bne.n	800dfe2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dfdc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dfe0:	e018      	b.n	800e014 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfea:	041b      	lsls	r3, r3, #16
 800dfec:	4619      	mov	r1, r3
 800dfee:	4610      	mov	r0, r2
 800dff0:	f001 fc2a 	bl	800f848 <SDMMC_CmdSendStatus>
 800dff4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d001      	beq.n	800e000 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	e009      	b.n	800e014 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2100      	movs	r1, #0
 800e006:	4618      	mov	r0, r3
 800e008:	f001 fa0f 	bl	800f42a <SDMMC_GetResponse>
 800e00c:	4602      	mov	r2, r0
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3710      	adds	r7, #16
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e028:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e02e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d03f      	beq.n	800e0b6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e036:	2300      	movs	r3, #0
 800e038:	617b      	str	r3, [r7, #20]
 800e03a:	e033      	b.n	800e0a4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4618      	mov	r0, r3
 800e042:	f001 f981 	bl	800f348 <SDMMC_ReadFIFO>
 800e046:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	3301      	adds	r3, #1
 800e054:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	3b01      	subs	r3, #1
 800e05a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	0a1b      	lsrs	r3, r3, #8
 800e060:	b2da      	uxtb	r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3301      	adds	r3, #1
 800e06a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	3b01      	subs	r3, #1
 800e070:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	0c1b      	lsrs	r3, r3, #16
 800e076:	b2da      	uxtb	r2, r3
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	3301      	adds	r3, #1
 800e080:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	3b01      	subs	r3, #1
 800e086:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	0e1b      	lsrs	r3, r3, #24
 800e08c:	b2da      	uxtb	r2, r3
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3301      	adds	r3, #1
 800e096:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	3b01      	subs	r3, #1
 800e09c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	617b      	str	r3, [r7, #20]
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	2b07      	cmp	r3, #7
 800e0a8:	d9c8      	bls.n	800e03c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	68fa      	ldr	r2, [r7, #12]
 800e0ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	693a      	ldr	r2, [r7, #16]
 800e0b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800e0b6:	bf00      	nop
 800e0b8:	3718      	adds	r7, #24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b086      	sub	sp, #24
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a1b      	ldr	r3, [r3, #32]
 800e0ca:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0d0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e0d2:	693b      	ldr	r3, [r7, #16]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d043      	beq.n	800e160 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e0d8:	2300      	movs	r3, #0
 800e0da:	617b      	str	r3, [r7, #20]
 800e0dc:	e037      	b.n	800e14e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	021a      	lsls	r2, r3, #8
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3301      	adds	r3, #1
 800e100:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	3b01      	subs	r3, #1
 800e106:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	041a      	lsls	r2, r3, #16
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	4313      	orrs	r3, r2
 800e112:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	061a      	lsls	r2, r3, #24
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	4313      	orrs	r3, r2
 800e12a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	3301      	adds	r3, #1
 800e130:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	3b01      	subs	r3, #1
 800e136:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f107 0208 	add.w	r2, r7, #8
 800e140:	4611      	mov	r1, r2
 800e142:	4618      	mov	r0, r3
 800e144:	f001 f90d 	bl	800f362 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	3301      	adds	r3, #1
 800e14c:	617b      	str	r3, [r7, #20]
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	2b07      	cmp	r3, #7
 800e152:	d9c4      	bls.n	800e0de <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800e160:	bf00      	nop
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	e025      	b.n	800e1c8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e182:	b2db      	uxtb	r3, r3
 800e184:	2b00      	cmp	r3, #0
 800e186:	d106      	bne.n	800e196 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7f8 fa83 	bl	800669c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2202      	movs	r2, #2
 800e19a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	f000 ff9f 	bl	800f0ec <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6818      	ldr	r0, [r3, #0]
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	f000 fff3 	bl	800f1a4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e1e2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e1e4:	7dfb      	ldrb	r3, [r7, #23]
 800e1e6:	2b02      	cmp	r3, #2
 800e1e8:	d101      	bne.n	800e1ee <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800e1ea:	2302      	movs	r3, #2
 800e1ec:	e021      	b.n	800e232 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e1ee:	7dfb      	ldrb	r3, [r7, #23]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d002      	beq.n	800e1fa <HAL_SDRAM_SendCommand+0x2a>
 800e1f4:	7dfb      	ldrb	r3, [r7, #23]
 800e1f6:	2b05      	cmp	r3, #5
 800e1f8:	d118      	bne.n	800e22c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2202      	movs	r2, #2
 800e1fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	68b9      	ldr	r1, [r7, #8]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f001 f834 	bl	800f278 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b02      	cmp	r3, #2
 800e216:	d104      	bne.n	800e222 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	2205      	movs	r2, #5
 800e21c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e220:	e006      	b.n	800e230 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2201      	movs	r2, #1
 800e226:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e22a:	e001      	b.n	800e230 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800e22c:	2301      	movs	r3, #1
 800e22e:	e000      	b.n	800e232 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800e230:	2300      	movs	r3, #0
}
 800e232:	4618      	mov	r0, r3
 800e234:	3718      	adds	r7, #24
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b082      	sub	sp, #8
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	2b02      	cmp	r3, #2
 800e24e:	d101      	bne.n	800e254 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e250:	2302      	movs	r3, #2
 800e252:	e016      	b.n	800e282 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d10f      	bne.n	800e280 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2202      	movs	r2, #2
 800e264:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6839      	ldr	r1, [r7, #0]
 800e26e:	4618      	mov	r0, r3
 800e270:	f001 f826 	bl	800f2c0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	e000      	b.n	800e282 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800e280:	2301      	movs	r3, #1
}
 800e282:	4618      	mov	r0, r3
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b082      	sub	sp, #8
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d101      	bne.n	800e29c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	e049      	b.n	800e330 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d106      	bne.n	800e2b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	f000 f841 	bl	800e338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681a      	ldr	r2, [r3, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	3304      	adds	r3, #4
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	f000 f9ff 	bl	800e6cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2201      	movs	r2, #1
 800e2d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2201      	movs	r2, #1
 800e2ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2201      	movs	r2, #1
 800e302:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2201      	movs	r2, #1
 800e30a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2201      	movs	r2, #1
 800e312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2201      	movs	r2, #1
 800e322:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2201      	movs	r2, #1
 800e32a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e32e:	2300      	movs	r3, #0
}
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d001      	beq.n	800e364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e360:	2301      	movs	r3, #1
 800e362:	e054      	b.n	800e40e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2202      	movs	r2, #2
 800e368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68da      	ldr	r2, [r3, #12]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f042 0201 	orr.w	r2, r2, #1
 800e37a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a26      	ldr	r2, [pc, #152]	@ (800e41c <HAL_TIM_Base_Start_IT+0xd0>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d022      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0x80>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e38e:	d01d      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0x80>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4a22      	ldr	r2, [pc, #136]	@ (800e420 <HAL_TIM_Base_Start_IT+0xd4>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d018      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0x80>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a21      	ldr	r2, [pc, #132]	@ (800e424 <HAL_TIM_Base_Start_IT+0xd8>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d013      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0x80>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	4a1f      	ldr	r2, [pc, #124]	@ (800e428 <HAL_TIM_Base_Start_IT+0xdc>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d00e      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0x80>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4a1e      	ldr	r2, [pc, #120]	@ (800e42c <HAL_TIM_Base_Start_IT+0xe0>)
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d009      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0x80>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a1c      	ldr	r2, [pc, #112]	@ (800e430 <HAL_TIM_Base_Start_IT+0xe4>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d004      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0x80>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4a1b      	ldr	r2, [pc, #108]	@ (800e434 <HAL_TIM_Base_Start_IT+0xe8>)
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d115      	bne.n	800e3f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	689a      	ldr	r2, [r3, #8]
 800e3d2:	4b19      	ldr	r3, [pc, #100]	@ (800e438 <HAL_TIM_Base_Start_IT+0xec>)
 800e3d4:	4013      	ands	r3, r2
 800e3d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2b06      	cmp	r3, #6
 800e3dc:	d015      	beq.n	800e40a <HAL_TIM_Base_Start_IT+0xbe>
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3e4:	d011      	beq.n	800e40a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	681a      	ldr	r2, [r3, #0]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	f042 0201 	orr.w	r2, r2, #1
 800e3f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3f6:	e008      	b.n	800e40a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f042 0201 	orr.w	r2, r2, #1
 800e406:	601a      	str	r2, [r3, #0]
 800e408:	e000      	b.n	800e40c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e40a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	40010000 	.word	0x40010000
 800e420:	40000400 	.word	0x40000400
 800e424:	40000800 	.word	0x40000800
 800e428:	40000c00 	.word	0x40000c00
 800e42c:	40010400 	.word	0x40010400
 800e430:	40014000 	.word	0x40014000
 800e434:	40001800 	.word	0x40001800
 800e438:	00010007 	.word	0x00010007

0800e43c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	f003 0302 	and.w	r3, r3, #2
 800e44e:	2b02      	cmp	r3, #2
 800e450:	d122      	bne.n	800e498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	f003 0302 	and.w	r3, r3, #2
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d11b      	bne.n	800e498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f06f 0202 	mvn.w	r2, #2
 800e468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2201      	movs	r2, #1
 800e46e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	f003 0303 	and.w	r3, r3, #3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d003      	beq.n	800e486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f905 	bl	800e68e <HAL_TIM_IC_CaptureCallback>
 800e484:	e005      	b.n	800e492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f8f7 	bl	800e67a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f908 	bl	800e6a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2200      	movs	r2, #0
 800e496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	f003 0304 	and.w	r3, r3, #4
 800e4a2:	2b04      	cmp	r3, #4
 800e4a4:	d122      	bne.n	800e4ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	f003 0304 	and.w	r3, r3, #4
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d11b      	bne.n	800e4ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f06f 0204 	mvn.w	r2, #4
 800e4bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	699b      	ldr	r3, [r3, #24]
 800e4ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f8db 	bl	800e68e <HAL_TIM_IC_CaptureCallback>
 800e4d8:	e005      	b.n	800e4e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f8cd 	bl	800e67a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 f8de 	bl	800e6a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	691b      	ldr	r3, [r3, #16]
 800e4f2:	f003 0308 	and.w	r3, r3, #8
 800e4f6:	2b08      	cmp	r3, #8
 800e4f8:	d122      	bne.n	800e540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	f003 0308 	and.w	r3, r3, #8
 800e504:	2b08      	cmp	r3, #8
 800e506:	d11b      	bne.n	800e540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f06f 0208 	mvn.w	r2, #8
 800e510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2204      	movs	r2, #4
 800e516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	69db      	ldr	r3, [r3, #28]
 800e51e:	f003 0303 	and.w	r3, r3, #3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d003      	beq.n	800e52e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 f8b1 	bl	800e68e <HAL_TIM_IC_CaptureCallback>
 800e52c:	e005      	b.n	800e53a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 f8a3 	bl	800e67a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 f8b4 	bl	800e6a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	f003 0310 	and.w	r3, r3, #16
 800e54a:	2b10      	cmp	r3, #16
 800e54c:	d122      	bne.n	800e594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	f003 0310 	and.w	r3, r3, #16
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d11b      	bne.n	800e594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f06f 0210 	mvn.w	r2, #16
 800e564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2208      	movs	r2, #8
 800e56a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	69db      	ldr	r3, [r3, #28]
 800e572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f887 	bl	800e68e <HAL_TIM_IC_CaptureCallback>
 800e580:	e005      	b.n	800e58e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 f879 	bl	800e67a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f88a 	bl	800e6a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	f003 0301 	and.w	r3, r3, #1
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d10e      	bne.n	800e5c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	f003 0301 	and.w	r3, r3, #1
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d107      	bne.n	800e5c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f06f 0201 	mvn.w	r2, #1
 800e5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7f5 ff9e 	bl	80044fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5ca:	2b80      	cmp	r3, #128	@ 0x80
 800e5cc:	d10e      	bne.n	800e5ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5d8:	2b80      	cmp	r3, #128	@ 0x80
 800e5da:	d107      	bne.n	800e5ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f91a 	bl	800e820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e5f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e5fa:	d10e      	bne.n	800e61a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e606:	2b80      	cmp	r3, #128	@ 0x80
 800e608:	d107      	bne.n	800e61a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 f90d 	bl	800e834 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	691b      	ldr	r3, [r3, #16]
 800e620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e624:	2b40      	cmp	r3, #64	@ 0x40
 800e626:	d10e      	bne.n	800e646 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e632:	2b40      	cmp	r3, #64	@ 0x40
 800e634:	d107      	bne.n	800e646 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e63e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 f838 	bl	800e6b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	691b      	ldr	r3, [r3, #16]
 800e64c:	f003 0320 	and.w	r3, r3, #32
 800e650:	2b20      	cmp	r3, #32
 800e652:	d10e      	bne.n	800e672 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	f003 0320 	and.w	r3, r3, #32
 800e65e:	2b20      	cmp	r3, #32
 800e660:	d107      	bne.n	800e672 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f06f 0220 	mvn.w	r2, #32
 800e66a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f000 f8cd 	bl	800e80c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e672:	bf00      	nop
 800e674:	3708      	adds	r7, #8
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}

0800e67a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b083      	sub	sp, #12
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e682:	bf00      	nop
 800e684:	370c      	adds	r7, #12
 800e686:	46bd      	mov	sp, r7
 800e688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68c:	4770      	bx	lr

0800e68e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e68e:	b480      	push	{r7}
 800e690:	b083      	sub	sp, #12
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e696:	bf00      	nop
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e6a2:	b480      	push	{r7}
 800e6a4:	b083      	sub	sp, #12
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e6aa:	bf00      	nop
 800e6ac:	370c      	adds	r7, #12
 800e6ae:	46bd      	mov	sp, r7
 800e6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b4:	4770      	bx	lr

0800e6b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e6b6:	b480      	push	{r7}
 800e6b8:	b083      	sub	sp, #12
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e6be:	bf00      	nop
 800e6c0:	370c      	adds	r7, #12
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr
	...

0800e6cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	4a40      	ldr	r2, [pc, #256]	@ (800e7e0 <TIM_Base_SetConfig+0x114>)
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	d013      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6ea:	d00f      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4a3d      	ldr	r2, [pc, #244]	@ (800e7e4 <TIM_Base_SetConfig+0x118>)
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d00b      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a3c      	ldr	r2, [pc, #240]	@ (800e7e8 <TIM_Base_SetConfig+0x11c>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d007      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a3b      	ldr	r2, [pc, #236]	@ (800e7ec <TIM_Base_SetConfig+0x120>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d003      	beq.n	800e70c <TIM_Base_SetConfig+0x40>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a3a      	ldr	r2, [pc, #232]	@ (800e7f0 <TIM_Base_SetConfig+0x124>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d108      	bne.n	800e71e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	4313      	orrs	r3, r2
 800e71c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4a2f      	ldr	r2, [pc, #188]	@ (800e7e0 <TIM_Base_SetConfig+0x114>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d02b      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e72c:	d027      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a2c      	ldr	r2, [pc, #176]	@ (800e7e4 <TIM_Base_SetConfig+0x118>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d023      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a2b      	ldr	r2, [pc, #172]	@ (800e7e8 <TIM_Base_SetConfig+0x11c>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d01f      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a2a      	ldr	r2, [pc, #168]	@ (800e7ec <TIM_Base_SetConfig+0x120>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d01b      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a29      	ldr	r2, [pc, #164]	@ (800e7f0 <TIM_Base_SetConfig+0x124>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d017      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a28      	ldr	r2, [pc, #160]	@ (800e7f4 <TIM_Base_SetConfig+0x128>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d013      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a27      	ldr	r2, [pc, #156]	@ (800e7f8 <TIM_Base_SetConfig+0x12c>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d00f      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	4a26      	ldr	r2, [pc, #152]	@ (800e7fc <TIM_Base_SetConfig+0x130>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d00b      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	4a25      	ldr	r2, [pc, #148]	@ (800e800 <TIM_Base_SetConfig+0x134>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d007      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a24      	ldr	r2, [pc, #144]	@ (800e804 <TIM_Base_SetConfig+0x138>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d003      	beq.n	800e77e <TIM_Base_SetConfig+0xb2>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4a23      	ldr	r2, [pc, #140]	@ (800e808 <TIM_Base_SetConfig+0x13c>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d108      	bne.n	800e790 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	68db      	ldr	r3, [r3, #12]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	4313      	orrs	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	695b      	ldr	r3, [r3, #20]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68fa      	ldr	r2, [r7, #12]
 800e7a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	689a      	ldr	r2, [r3, #8]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4a0a      	ldr	r2, [pc, #40]	@ (800e7e0 <TIM_Base_SetConfig+0x114>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d003      	beq.n	800e7c4 <TIM_Base_SetConfig+0xf8>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4a0c      	ldr	r2, [pc, #48]	@ (800e7f0 <TIM_Base_SetConfig+0x124>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d103      	bne.n	800e7cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	691a      	ldr	r2, [r3, #16]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	615a      	str	r2, [r3, #20]
}
 800e7d2:	bf00      	nop
 800e7d4:	3714      	adds	r7, #20
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop
 800e7e0:	40010000 	.word	0x40010000
 800e7e4:	40000400 	.word	0x40000400
 800e7e8:	40000800 	.word	0x40000800
 800e7ec:	40000c00 	.word	0x40000c00
 800e7f0:	40010400 	.word	0x40010400
 800e7f4:	40014000 	.word	0x40014000
 800e7f8:	40014400 	.word	0x40014400
 800e7fc:	40014800 	.word	0x40014800
 800e800:	40001800 	.word	0x40001800
 800e804:	40001c00 	.word	0x40001c00
 800e808:	40002000 	.word	0x40002000

0800e80c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e828:	bf00      	nop
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e834:	b480      	push	{r7}
 800e836:	b083      	sub	sp, #12
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e83c:	bf00      	nop
 800e83e:	370c      	adds	r7, #12
 800e840:	46bd      	mov	sp, r7
 800e842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e846:	4770      	bx	lr

0800e848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b082      	sub	sp, #8
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d101      	bne.n	800e85a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	e040      	b.n	800e8dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d106      	bne.n	800e870 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2200      	movs	r2, #0
 800e866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7f7 fdf2 	bl	8006454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2224      	movs	r2, #36	@ 0x24
 800e874:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f022 0201 	bic.w	r2, r2, #1
 800e884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 f82c 	bl	800e8e4 <UART_SetConfig>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d101      	bne.n	800e896 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	e022      	b.n	800e8dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d002      	beq.n	800e8a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 fa84 	bl	800edac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	685a      	ldr	r2, [r3, #4]
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e8b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	689a      	ldr	r2, [r3, #8]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e8c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	f042 0201 	orr.w	r2, r2, #1
 800e8d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 fb0b 	bl	800eef0 <UART_CheckIdleState>
 800e8da:	4603      	mov	r3, r0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b088      	sub	sp, #32
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	689a      	ldr	r2, [r3, #8]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	691b      	ldr	r3, [r3, #16]
 800e8f8:	431a      	orrs	r2, r3
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	695b      	ldr	r3, [r3, #20]
 800e8fe:	431a      	orrs	r2, r3
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	69db      	ldr	r3, [r3, #28]
 800e904:	4313      	orrs	r3, r2
 800e906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	4ba6      	ldr	r3, [pc, #664]	@ (800eba8 <UART_SetConfig+0x2c4>)
 800e910:	4013      	ands	r3, r2
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	6812      	ldr	r2, [r2, #0]
 800e916:	6979      	ldr	r1, [r7, #20]
 800e918:	430b      	orrs	r3, r1
 800e91a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	68da      	ldr	r2, [r3, #12]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	430a      	orrs	r2, r1
 800e930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	699b      	ldr	r3, [r3, #24]
 800e936:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6a1b      	ldr	r3, [r3, #32]
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	4313      	orrs	r3, r2
 800e940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	697a      	ldr	r2, [r7, #20]
 800e952:	430a      	orrs	r2, r1
 800e954:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a94      	ldr	r2, [pc, #592]	@ (800ebac <UART_SetConfig+0x2c8>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d120      	bne.n	800e9a2 <UART_SetConfig+0xbe>
 800e960:	4b93      	ldr	r3, [pc, #588]	@ (800ebb0 <UART_SetConfig+0x2cc>)
 800e962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e966:	f003 0303 	and.w	r3, r3, #3
 800e96a:	2b03      	cmp	r3, #3
 800e96c:	d816      	bhi.n	800e99c <UART_SetConfig+0xb8>
 800e96e:	a201      	add	r2, pc, #4	@ (adr r2, 800e974 <UART_SetConfig+0x90>)
 800e970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e974:	0800e985 	.word	0x0800e985
 800e978:	0800e991 	.word	0x0800e991
 800e97c:	0800e98b 	.word	0x0800e98b
 800e980:	0800e997 	.word	0x0800e997
 800e984:	2301      	movs	r3, #1
 800e986:	77fb      	strb	r3, [r7, #31]
 800e988:	e150      	b.n	800ec2c <UART_SetConfig+0x348>
 800e98a:	2302      	movs	r3, #2
 800e98c:	77fb      	strb	r3, [r7, #31]
 800e98e:	e14d      	b.n	800ec2c <UART_SetConfig+0x348>
 800e990:	2304      	movs	r3, #4
 800e992:	77fb      	strb	r3, [r7, #31]
 800e994:	e14a      	b.n	800ec2c <UART_SetConfig+0x348>
 800e996:	2308      	movs	r3, #8
 800e998:	77fb      	strb	r3, [r7, #31]
 800e99a:	e147      	b.n	800ec2c <UART_SetConfig+0x348>
 800e99c:	2310      	movs	r3, #16
 800e99e:	77fb      	strb	r3, [r7, #31]
 800e9a0:	e144      	b.n	800ec2c <UART_SetConfig+0x348>
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a83      	ldr	r2, [pc, #524]	@ (800ebb4 <UART_SetConfig+0x2d0>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d132      	bne.n	800ea12 <UART_SetConfig+0x12e>
 800e9ac:	4b80      	ldr	r3, [pc, #512]	@ (800ebb0 <UART_SetConfig+0x2cc>)
 800e9ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9b2:	f003 030c 	and.w	r3, r3, #12
 800e9b6:	2b0c      	cmp	r3, #12
 800e9b8:	d828      	bhi.n	800ea0c <UART_SetConfig+0x128>
 800e9ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e9c0 <UART_SetConfig+0xdc>)
 800e9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c0:	0800e9f5 	.word	0x0800e9f5
 800e9c4:	0800ea0d 	.word	0x0800ea0d
 800e9c8:	0800ea0d 	.word	0x0800ea0d
 800e9cc:	0800ea0d 	.word	0x0800ea0d
 800e9d0:	0800ea01 	.word	0x0800ea01
 800e9d4:	0800ea0d 	.word	0x0800ea0d
 800e9d8:	0800ea0d 	.word	0x0800ea0d
 800e9dc:	0800ea0d 	.word	0x0800ea0d
 800e9e0:	0800e9fb 	.word	0x0800e9fb
 800e9e4:	0800ea0d 	.word	0x0800ea0d
 800e9e8:	0800ea0d 	.word	0x0800ea0d
 800e9ec:	0800ea0d 	.word	0x0800ea0d
 800e9f0:	0800ea07 	.word	0x0800ea07
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	77fb      	strb	r3, [r7, #31]
 800e9f8:	e118      	b.n	800ec2c <UART_SetConfig+0x348>
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	77fb      	strb	r3, [r7, #31]
 800e9fe:	e115      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea00:	2304      	movs	r3, #4
 800ea02:	77fb      	strb	r3, [r7, #31]
 800ea04:	e112      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea06:	2308      	movs	r3, #8
 800ea08:	77fb      	strb	r3, [r7, #31]
 800ea0a:	e10f      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea0c:	2310      	movs	r3, #16
 800ea0e:	77fb      	strb	r3, [r7, #31]
 800ea10:	e10c      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a68      	ldr	r2, [pc, #416]	@ (800ebb8 <UART_SetConfig+0x2d4>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d120      	bne.n	800ea5e <UART_SetConfig+0x17a>
 800ea1c:	4b64      	ldr	r3, [pc, #400]	@ (800ebb0 <UART_SetConfig+0x2cc>)
 800ea1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea22:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ea26:	2b30      	cmp	r3, #48	@ 0x30
 800ea28:	d013      	beq.n	800ea52 <UART_SetConfig+0x16e>
 800ea2a:	2b30      	cmp	r3, #48	@ 0x30
 800ea2c:	d814      	bhi.n	800ea58 <UART_SetConfig+0x174>
 800ea2e:	2b20      	cmp	r3, #32
 800ea30:	d009      	beq.n	800ea46 <UART_SetConfig+0x162>
 800ea32:	2b20      	cmp	r3, #32
 800ea34:	d810      	bhi.n	800ea58 <UART_SetConfig+0x174>
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <UART_SetConfig+0x15c>
 800ea3a:	2b10      	cmp	r3, #16
 800ea3c:	d006      	beq.n	800ea4c <UART_SetConfig+0x168>
 800ea3e:	e00b      	b.n	800ea58 <UART_SetConfig+0x174>
 800ea40:	2300      	movs	r3, #0
 800ea42:	77fb      	strb	r3, [r7, #31]
 800ea44:	e0f2      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea46:	2302      	movs	r3, #2
 800ea48:	77fb      	strb	r3, [r7, #31]
 800ea4a:	e0ef      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea4c:	2304      	movs	r3, #4
 800ea4e:	77fb      	strb	r3, [r7, #31]
 800ea50:	e0ec      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea52:	2308      	movs	r3, #8
 800ea54:	77fb      	strb	r3, [r7, #31]
 800ea56:	e0e9      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea58:	2310      	movs	r3, #16
 800ea5a:	77fb      	strb	r3, [r7, #31]
 800ea5c:	e0e6      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	4a56      	ldr	r2, [pc, #344]	@ (800ebbc <UART_SetConfig+0x2d8>)
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d120      	bne.n	800eaaa <UART_SetConfig+0x1c6>
 800ea68:	4b51      	ldr	r3, [pc, #324]	@ (800ebb0 <UART_SetConfig+0x2cc>)
 800ea6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea6e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ea72:	2bc0      	cmp	r3, #192	@ 0xc0
 800ea74:	d013      	beq.n	800ea9e <UART_SetConfig+0x1ba>
 800ea76:	2bc0      	cmp	r3, #192	@ 0xc0
 800ea78:	d814      	bhi.n	800eaa4 <UART_SetConfig+0x1c0>
 800ea7a:	2b80      	cmp	r3, #128	@ 0x80
 800ea7c:	d009      	beq.n	800ea92 <UART_SetConfig+0x1ae>
 800ea7e:	2b80      	cmp	r3, #128	@ 0x80
 800ea80:	d810      	bhi.n	800eaa4 <UART_SetConfig+0x1c0>
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d002      	beq.n	800ea8c <UART_SetConfig+0x1a8>
 800ea86:	2b40      	cmp	r3, #64	@ 0x40
 800ea88:	d006      	beq.n	800ea98 <UART_SetConfig+0x1b4>
 800ea8a:	e00b      	b.n	800eaa4 <UART_SetConfig+0x1c0>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	77fb      	strb	r3, [r7, #31]
 800ea90:	e0cc      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea92:	2302      	movs	r3, #2
 800ea94:	77fb      	strb	r3, [r7, #31]
 800ea96:	e0c9      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea98:	2304      	movs	r3, #4
 800ea9a:	77fb      	strb	r3, [r7, #31]
 800ea9c:	e0c6      	b.n	800ec2c <UART_SetConfig+0x348>
 800ea9e:	2308      	movs	r3, #8
 800eaa0:	77fb      	strb	r3, [r7, #31]
 800eaa2:	e0c3      	b.n	800ec2c <UART_SetConfig+0x348>
 800eaa4:	2310      	movs	r3, #16
 800eaa6:	77fb      	strb	r3, [r7, #31]
 800eaa8:	e0c0      	b.n	800ec2c <UART_SetConfig+0x348>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a44      	ldr	r2, [pc, #272]	@ (800ebc0 <UART_SetConfig+0x2dc>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d125      	bne.n	800eb00 <UART_SetConfig+0x21c>
 800eab4:	4b3e      	ldr	r3, [pc, #248]	@ (800ebb0 <UART_SetConfig+0x2cc>)
 800eab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eaba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800eabe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eac2:	d017      	beq.n	800eaf4 <UART_SetConfig+0x210>
 800eac4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800eac8:	d817      	bhi.n	800eafa <UART_SetConfig+0x216>
 800eaca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eace:	d00b      	beq.n	800eae8 <UART_SetConfig+0x204>
 800ead0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ead4:	d811      	bhi.n	800eafa <UART_SetConfig+0x216>
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d003      	beq.n	800eae2 <UART_SetConfig+0x1fe>
 800eada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eade:	d006      	beq.n	800eaee <UART_SetConfig+0x20a>
 800eae0:	e00b      	b.n	800eafa <UART_SetConfig+0x216>
 800eae2:	2300      	movs	r3, #0
 800eae4:	77fb      	strb	r3, [r7, #31]
 800eae6:	e0a1      	b.n	800ec2c <UART_SetConfig+0x348>
 800eae8:	2302      	movs	r3, #2
 800eaea:	77fb      	strb	r3, [r7, #31]
 800eaec:	e09e      	b.n	800ec2c <UART_SetConfig+0x348>
 800eaee:	2304      	movs	r3, #4
 800eaf0:	77fb      	strb	r3, [r7, #31]
 800eaf2:	e09b      	b.n	800ec2c <UART_SetConfig+0x348>
 800eaf4:	2308      	movs	r3, #8
 800eaf6:	77fb      	strb	r3, [r7, #31]
 800eaf8:	e098      	b.n	800ec2c <UART_SetConfig+0x348>
 800eafa:	2310      	movs	r3, #16
 800eafc:	77fb      	strb	r3, [r7, #31]
 800eafe:	e095      	b.n	800ec2c <UART_SetConfig+0x348>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a2f      	ldr	r2, [pc, #188]	@ (800ebc4 <UART_SetConfig+0x2e0>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d125      	bne.n	800eb56 <UART_SetConfig+0x272>
 800eb0a:	4b29      	ldr	r3, [pc, #164]	@ (800ebb0 <UART_SetConfig+0x2cc>)
 800eb0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800eb14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800eb18:	d017      	beq.n	800eb4a <UART_SetConfig+0x266>
 800eb1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800eb1e:	d817      	bhi.n	800eb50 <UART_SetConfig+0x26c>
 800eb20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb24:	d00b      	beq.n	800eb3e <UART_SetConfig+0x25a>
 800eb26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800eb2a:	d811      	bhi.n	800eb50 <UART_SetConfig+0x26c>
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d003      	beq.n	800eb38 <UART_SetConfig+0x254>
 800eb30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb34:	d006      	beq.n	800eb44 <UART_SetConfig+0x260>
 800eb36:	e00b      	b.n	800eb50 <UART_SetConfig+0x26c>
 800eb38:	2301      	movs	r3, #1
 800eb3a:	77fb      	strb	r3, [r7, #31]
 800eb3c:	e076      	b.n	800ec2c <UART_SetConfig+0x348>
 800eb3e:	2302      	movs	r3, #2
 800eb40:	77fb      	strb	r3, [r7, #31]
 800eb42:	e073      	b.n	800ec2c <UART_SetConfig+0x348>
 800eb44:	2304      	movs	r3, #4
 800eb46:	77fb      	strb	r3, [r7, #31]
 800eb48:	e070      	b.n	800ec2c <UART_SetConfig+0x348>
 800eb4a:	2308      	movs	r3, #8
 800eb4c:	77fb      	strb	r3, [r7, #31]
 800eb4e:	e06d      	b.n	800ec2c <UART_SetConfig+0x348>
 800eb50:	2310      	movs	r3, #16
 800eb52:	77fb      	strb	r3, [r7, #31]
 800eb54:	e06a      	b.n	800ec2c <UART_SetConfig+0x348>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	4a1b      	ldr	r2, [pc, #108]	@ (800ebc8 <UART_SetConfig+0x2e4>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d138      	bne.n	800ebd2 <UART_SetConfig+0x2ee>
 800eb60:	4b13      	ldr	r3, [pc, #76]	@ (800ebb0 <UART_SetConfig+0x2cc>)
 800eb62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb66:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800eb6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eb6e:	d017      	beq.n	800eba0 <UART_SetConfig+0x2bc>
 800eb70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800eb74:	d82a      	bhi.n	800ebcc <UART_SetConfig+0x2e8>
 800eb76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb7a:	d00b      	beq.n	800eb94 <UART_SetConfig+0x2b0>
 800eb7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb80:	d824      	bhi.n	800ebcc <UART_SetConfig+0x2e8>
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d003      	beq.n	800eb8e <UART_SetConfig+0x2aa>
 800eb86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb8a:	d006      	beq.n	800eb9a <UART_SetConfig+0x2b6>
 800eb8c:	e01e      	b.n	800ebcc <UART_SetConfig+0x2e8>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	77fb      	strb	r3, [r7, #31]
 800eb92:	e04b      	b.n	800ec2c <UART_SetConfig+0x348>
 800eb94:	2302      	movs	r3, #2
 800eb96:	77fb      	strb	r3, [r7, #31]
 800eb98:	e048      	b.n	800ec2c <UART_SetConfig+0x348>
 800eb9a:	2304      	movs	r3, #4
 800eb9c:	77fb      	strb	r3, [r7, #31]
 800eb9e:	e045      	b.n	800ec2c <UART_SetConfig+0x348>
 800eba0:	2308      	movs	r3, #8
 800eba2:	77fb      	strb	r3, [r7, #31]
 800eba4:	e042      	b.n	800ec2c <UART_SetConfig+0x348>
 800eba6:	bf00      	nop
 800eba8:	efff69f3 	.word	0xefff69f3
 800ebac:	40011000 	.word	0x40011000
 800ebb0:	40023800 	.word	0x40023800
 800ebb4:	40004400 	.word	0x40004400
 800ebb8:	40004800 	.word	0x40004800
 800ebbc:	40004c00 	.word	0x40004c00
 800ebc0:	40005000 	.word	0x40005000
 800ebc4:	40011400 	.word	0x40011400
 800ebc8:	40007800 	.word	0x40007800
 800ebcc:	2310      	movs	r3, #16
 800ebce:	77fb      	strb	r3, [r7, #31]
 800ebd0:	e02c      	b.n	800ec2c <UART_SetConfig+0x348>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a72      	ldr	r2, [pc, #456]	@ (800eda0 <UART_SetConfig+0x4bc>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d125      	bne.n	800ec28 <UART_SetConfig+0x344>
 800ebdc:	4b71      	ldr	r3, [pc, #452]	@ (800eda4 <UART_SetConfig+0x4c0>)
 800ebde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebe2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ebe6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ebea:	d017      	beq.n	800ec1c <UART_SetConfig+0x338>
 800ebec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ebf0:	d817      	bhi.n	800ec22 <UART_SetConfig+0x33e>
 800ebf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebf6:	d00b      	beq.n	800ec10 <UART_SetConfig+0x32c>
 800ebf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebfc:	d811      	bhi.n	800ec22 <UART_SetConfig+0x33e>
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d003      	beq.n	800ec0a <UART_SetConfig+0x326>
 800ec02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ec06:	d006      	beq.n	800ec16 <UART_SetConfig+0x332>
 800ec08:	e00b      	b.n	800ec22 <UART_SetConfig+0x33e>
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	77fb      	strb	r3, [r7, #31]
 800ec0e:	e00d      	b.n	800ec2c <UART_SetConfig+0x348>
 800ec10:	2302      	movs	r3, #2
 800ec12:	77fb      	strb	r3, [r7, #31]
 800ec14:	e00a      	b.n	800ec2c <UART_SetConfig+0x348>
 800ec16:	2304      	movs	r3, #4
 800ec18:	77fb      	strb	r3, [r7, #31]
 800ec1a:	e007      	b.n	800ec2c <UART_SetConfig+0x348>
 800ec1c:	2308      	movs	r3, #8
 800ec1e:	77fb      	strb	r3, [r7, #31]
 800ec20:	e004      	b.n	800ec2c <UART_SetConfig+0x348>
 800ec22:	2310      	movs	r3, #16
 800ec24:	77fb      	strb	r3, [r7, #31]
 800ec26:	e001      	b.n	800ec2c <UART_SetConfig+0x348>
 800ec28:	2310      	movs	r3, #16
 800ec2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	69db      	ldr	r3, [r3, #28]
 800ec30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec34:	d15b      	bne.n	800ecee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ec36:	7ffb      	ldrb	r3, [r7, #31]
 800ec38:	2b08      	cmp	r3, #8
 800ec3a:	d828      	bhi.n	800ec8e <UART_SetConfig+0x3aa>
 800ec3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ec44 <UART_SetConfig+0x360>)
 800ec3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec42:	bf00      	nop
 800ec44:	0800ec69 	.word	0x0800ec69
 800ec48:	0800ec71 	.word	0x0800ec71
 800ec4c:	0800ec79 	.word	0x0800ec79
 800ec50:	0800ec8f 	.word	0x0800ec8f
 800ec54:	0800ec7f 	.word	0x0800ec7f
 800ec58:	0800ec8f 	.word	0x0800ec8f
 800ec5c:	0800ec8f 	.word	0x0800ec8f
 800ec60:	0800ec8f 	.word	0x0800ec8f
 800ec64:	0800ec87 	.word	0x0800ec87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec68:	f7fc ff6e 	bl	800bb48 <HAL_RCC_GetPCLK1Freq>
 800ec6c:	61b8      	str	r0, [r7, #24]
        break;
 800ec6e:	e013      	b.n	800ec98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec70:	f7fc ff7e 	bl	800bb70 <HAL_RCC_GetPCLK2Freq>
 800ec74:	61b8      	str	r0, [r7, #24]
        break;
 800ec76:	e00f      	b.n	800ec98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ec78:	4b4b      	ldr	r3, [pc, #300]	@ (800eda8 <UART_SetConfig+0x4c4>)
 800ec7a:	61bb      	str	r3, [r7, #24]
        break;
 800ec7c:	e00c      	b.n	800ec98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ec7e:	f7fc fe91 	bl	800b9a4 <HAL_RCC_GetSysClockFreq>
 800ec82:	61b8      	str	r0, [r7, #24]
        break;
 800ec84:	e008      	b.n	800ec98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ec8a:	61bb      	str	r3, [r7, #24]
        break;
 800ec8c:	e004      	b.n	800ec98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ec92:	2301      	movs	r3, #1
 800ec94:	77bb      	strb	r3, [r7, #30]
        break;
 800ec96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ec98:	69bb      	ldr	r3, [r7, #24]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d074      	beq.n	800ed88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	005a      	lsls	r2, r3, #1
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	085b      	lsrs	r3, r3, #1
 800eca8:	441a      	add	r2, r3
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	2b0f      	cmp	r3, #15
 800ecb8:	d916      	bls.n	800ece8 <UART_SetConfig+0x404>
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecc0:	d212      	bcs.n	800ece8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	f023 030f 	bic.w	r3, r3, #15
 800ecca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	085b      	lsrs	r3, r3, #1
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	f003 0307 	and.w	r3, r3, #7
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	89fb      	ldrh	r3, [r7, #14]
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	89fa      	ldrh	r2, [r7, #14]
 800ece4:	60da      	str	r2, [r3, #12]
 800ece6:	e04f      	b.n	800ed88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	77bb      	strb	r3, [r7, #30]
 800ecec:	e04c      	b.n	800ed88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ecee:	7ffb      	ldrb	r3, [r7, #31]
 800ecf0:	2b08      	cmp	r3, #8
 800ecf2:	d828      	bhi.n	800ed46 <UART_SetConfig+0x462>
 800ecf4:	a201      	add	r2, pc, #4	@ (adr r2, 800ecfc <UART_SetConfig+0x418>)
 800ecf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecfa:	bf00      	nop
 800ecfc:	0800ed21 	.word	0x0800ed21
 800ed00:	0800ed29 	.word	0x0800ed29
 800ed04:	0800ed31 	.word	0x0800ed31
 800ed08:	0800ed47 	.word	0x0800ed47
 800ed0c:	0800ed37 	.word	0x0800ed37
 800ed10:	0800ed47 	.word	0x0800ed47
 800ed14:	0800ed47 	.word	0x0800ed47
 800ed18:	0800ed47 	.word	0x0800ed47
 800ed1c:	0800ed3f 	.word	0x0800ed3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed20:	f7fc ff12 	bl	800bb48 <HAL_RCC_GetPCLK1Freq>
 800ed24:	61b8      	str	r0, [r7, #24]
        break;
 800ed26:	e013      	b.n	800ed50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed28:	f7fc ff22 	bl	800bb70 <HAL_RCC_GetPCLK2Freq>
 800ed2c:	61b8      	str	r0, [r7, #24]
        break;
 800ed2e:	e00f      	b.n	800ed50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ed30:	4b1d      	ldr	r3, [pc, #116]	@ (800eda8 <UART_SetConfig+0x4c4>)
 800ed32:	61bb      	str	r3, [r7, #24]
        break;
 800ed34:	e00c      	b.n	800ed50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ed36:	f7fc fe35 	bl	800b9a4 <HAL_RCC_GetSysClockFreq>
 800ed3a:	61b8      	str	r0, [r7, #24]
        break;
 800ed3c:	e008      	b.n	800ed50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ed42:	61bb      	str	r3, [r7, #24]
        break;
 800ed44:	e004      	b.n	800ed50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ed46:	2300      	movs	r3, #0
 800ed48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	77bb      	strb	r3, [r7, #30]
        break;
 800ed4e:	bf00      	nop
    }

    if (pclk != 0U)
 800ed50:	69bb      	ldr	r3, [r7, #24]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d018      	beq.n	800ed88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	085a      	lsrs	r2, r3, #1
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	441a      	add	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	2b0f      	cmp	r3, #15
 800ed6e:	d909      	bls.n	800ed84 <UART_SetConfig+0x4a0>
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ed76:	d205      	bcs.n	800ed84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	60da      	str	r2, [r3, #12]
 800ed82:	e001      	b.n	800ed88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ed84:	2301      	movs	r3, #1
 800ed86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	2200      	movs	r2, #0
 800ed92:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ed94:	7fbb      	ldrb	r3, [r7, #30]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3720      	adds	r7, #32
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	40007c00 	.word	0x40007c00
 800eda4:	40023800 	.word	0x40023800
 800eda8:	00f42400 	.word	0x00f42400

0800edac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edb8:	f003 0301 	and.w	r3, r3, #1
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00a      	beq.n	800edd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	685b      	ldr	r3, [r3, #4]
 800edc6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	430a      	orrs	r2, r1
 800edd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edda:	f003 0302 	and.w	r3, r3, #2
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00a      	beq.n	800edf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	430a      	orrs	r2, r1
 800edf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edfc:	f003 0304 	and.w	r3, r3, #4
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d00a      	beq.n	800ee1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	430a      	orrs	r2, r1
 800ee18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee1e:	f003 0308 	and.w	r3, r3, #8
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00a      	beq.n	800ee3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	685b      	ldr	r3, [r3, #4]
 800ee2c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	430a      	orrs	r2, r1
 800ee3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee40:	f003 0310 	and.w	r3, r3, #16
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00a      	beq.n	800ee5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	430a      	orrs	r2, r1
 800ee5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee62:	f003 0320 	and.w	r3, r3, #32
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00a      	beq.n	800ee80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	430a      	orrs	r2, r1
 800ee7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d01a      	beq.n	800eec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	685b      	ldr	r3, [r3, #4]
 800ee92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	430a      	orrs	r2, r1
 800eea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eeaa:	d10a      	bne.n	800eec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	430a      	orrs	r2, r1
 800eec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00a      	beq.n	800eee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	430a      	orrs	r2, r1
 800eee2:	605a      	str	r2, [r3, #4]
  }
}
 800eee4:	bf00      	nop
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b086      	sub	sp, #24
 800eef4:	af02      	add	r7, sp, #8
 800eef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef00:	f7f9 fae8 	bl	80084d4 <HAL_GetTick>
 800ef04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f003 0308 	and.w	r3, r3, #8
 800ef10:	2b08      	cmp	r3, #8
 800ef12:	d10e      	bne.n	800ef32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f81b 	bl	800ef5e <UART_WaitOnFlagUntilTimeout>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d001      	beq.n	800ef32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef2e:	2303      	movs	r3, #3
 800ef30:	e011      	b.n	800ef56 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2220      	movs	r2, #32
 800ef36:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2220      	movs	r2, #32
 800ef3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b09c      	sub	sp, #112	@ 0x70
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	60f8      	str	r0, [r7, #12]
 800ef66:	60b9      	str	r1, [r7, #8]
 800ef68:	603b      	str	r3, [r7, #0]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef6e:	e0a7      	b.n	800f0c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef76:	f000 80a3 	beq.w	800f0c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef7a:	f7f9 faab 	bl	80084d4 <HAL_GetTick>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	1ad3      	subs	r3, r2, r3
 800ef84:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d302      	bcc.n	800ef90 <UART_WaitOnFlagUntilTimeout+0x32>
 800ef8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d13f      	bne.n	800f010 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef98:	e853 3f00 	ldrex	r3, [r3]
 800ef9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ef9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efa0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800efa4:	667b      	str	r3, [r7, #100]	@ 0x64
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	461a      	mov	r2, r3
 800efac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800efae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800efb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efb2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800efb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800efb6:	e841 2300 	strex	r3, r2, [r1]
 800efba:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800efbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1e6      	bne.n	800ef90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	3308      	adds	r3, #8
 800efc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efcc:	e853 3f00 	ldrex	r3, [r3]
 800efd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800efd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efd4:	f023 0301 	bic.w	r3, r3, #1
 800efd8:	663b      	str	r3, [r7, #96]	@ 0x60
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	3308      	adds	r3, #8
 800efe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800efe2:	64ba      	str	r2, [r7, #72]	@ 0x48
 800efe4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800efe8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800efea:	e841 2300 	strex	r3, r2, [r1]
 800efee:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800eff0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1e5      	bne.n	800efc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2220      	movs	r2, #32
 800effa:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2220      	movs	r2, #32
 800f000:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2200      	movs	r2, #0
 800f008:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800f00c:	2303      	movs	r3, #3
 800f00e:	e068      	b.n	800f0e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	f003 0304 	and.w	r3, r3, #4
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d050      	beq.n	800f0c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	69db      	ldr	r3, [r3, #28]
 800f024:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f02c:	d148      	bne.n	800f0c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f036:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f040:	e853 3f00 	ldrex	r3, [r3]
 800f044:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f048:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800f04c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	461a      	mov	r2, r3
 800f054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f056:	637b      	str	r3, [r7, #52]	@ 0x34
 800f058:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f05a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f05c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f05e:	e841 2300 	strex	r3, r2, [r1]
 800f062:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f066:	2b00      	cmp	r3, #0
 800f068:	d1e6      	bne.n	800f038 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	3308      	adds	r3, #8
 800f070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	e853 3f00 	ldrex	r3, [r3]
 800f078:	613b      	str	r3, [r7, #16]
   return(result);
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	f023 0301 	bic.w	r3, r3, #1
 800f080:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3308      	adds	r3, #8
 800f088:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f08a:	623a      	str	r2, [r7, #32]
 800f08c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f08e:	69f9      	ldr	r1, [r7, #28]
 800f090:	6a3a      	ldr	r2, [r7, #32]
 800f092:	e841 2300 	strex	r3, r2, [r1]
 800f096:	61bb      	str	r3, [r7, #24]
   return(result);
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d1e5      	bne.n	800f06a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2220      	movs	r2, #32
 800f0a2:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2220      	movs	r2, #32
 800f0a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2220      	movs	r2, #32
 800f0b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e010      	b.n	800f0e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	69da      	ldr	r2, [r3, #28]
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	4013      	ands	r3, r2
 800f0ca:	68ba      	ldr	r2, [r7, #8]
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	bf0c      	ite	eq
 800f0d0:	2301      	moveq	r3, #1
 800f0d2:	2300      	movne	r3, #0
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	79fb      	ldrb	r3, [r7, #7]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	f43f af48 	beq.w	800ef70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3770      	adds	r7, #112	@ 0x70
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
	...

0800f0ec <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d121      	bne.n	800f142 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	4b27      	ldr	r3, [pc, #156]	@ (800f1a0 <FMC_SDRAM_Init+0xb4>)
 800f104:	4013      	ands	r3, r2
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	6851      	ldr	r1, [r2, #4]
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	6892      	ldr	r2, [r2, #8]
 800f10e:	4311      	orrs	r1, r2
 800f110:	683a      	ldr	r2, [r7, #0]
 800f112:	68d2      	ldr	r2, [r2, #12]
 800f114:	4311      	orrs	r1, r2
 800f116:	683a      	ldr	r2, [r7, #0]
 800f118:	6912      	ldr	r2, [r2, #16]
 800f11a:	4311      	orrs	r1, r2
 800f11c:	683a      	ldr	r2, [r7, #0]
 800f11e:	6952      	ldr	r2, [r2, #20]
 800f120:	4311      	orrs	r1, r2
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	6992      	ldr	r2, [r2, #24]
 800f126:	4311      	orrs	r1, r2
 800f128:	683a      	ldr	r2, [r7, #0]
 800f12a:	69d2      	ldr	r2, [r2, #28]
 800f12c:	4311      	orrs	r1, r2
 800f12e:	683a      	ldr	r2, [r7, #0]
 800f130:	6a12      	ldr	r2, [r2, #32]
 800f132:	4311      	orrs	r1, r2
 800f134:	683a      	ldr	r2, [r7, #0]
 800f136:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f138:	430a      	orrs	r2, r1
 800f13a:	431a      	orrs	r2, r3
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	601a      	str	r2, [r3, #0]
 800f140:	e026      	b.n	800f190 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	69d9      	ldr	r1, [r3, #28]
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	6a1b      	ldr	r3, [r3, #32]
 800f152:	4319      	orrs	r1, r3
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f158:	430b      	orrs	r3, r1
 800f15a:	431a      	orrs	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	685a      	ldr	r2, [r3, #4]
 800f164:	4b0e      	ldr	r3, [pc, #56]	@ (800f1a0 <FMC_SDRAM_Init+0xb4>)
 800f166:	4013      	ands	r3, r2
 800f168:	683a      	ldr	r2, [r7, #0]
 800f16a:	6851      	ldr	r1, [r2, #4]
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	6892      	ldr	r2, [r2, #8]
 800f170:	4311      	orrs	r1, r2
 800f172:	683a      	ldr	r2, [r7, #0]
 800f174:	68d2      	ldr	r2, [r2, #12]
 800f176:	4311      	orrs	r1, r2
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	6912      	ldr	r2, [r2, #16]
 800f17c:	4311      	orrs	r1, r2
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	6952      	ldr	r2, [r2, #20]
 800f182:	4311      	orrs	r1, r2
 800f184:	683a      	ldr	r2, [r7, #0]
 800f186:	6992      	ldr	r2, [r2, #24]
 800f188:	430a      	orrs	r2, r1
 800f18a:	431a      	orrs	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f190:	2300      	movs	r3, #0
}
 800f192:	4618      	mov	r0, r3
 800f194:	370c      	adds	r7, #12
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	ffff8000 	.word	0xffff8000

0800f1a4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b085      	sub	sp, #20
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d128      	bne.n	800f208 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	1e59      	subs	r1, r3, #1
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	011b      	lsls	r3, r3, #4
 800f1cc:	4319      	orrs	r1, r3
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	689b      	ldr	r3, [r3, #8]
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	021b      	lsls	r3, r3, #8
 800f1d6:	4319      	orrs	r1, r3
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	3b01      	subs	r3, #1
 800f1de:	031b      	lsls	r3, r3, #12
 800f1e0:	4319      	orrs	r1, r3
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	041b      	lsls	r3, r3, #16
 800f1ea:	4319      	orrs	r1, r3
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	695b      	ldr	r3, [r3, #20]
 800f1f0:	3b01      	subs	r3, #1
 800f1f2:	051b      	lsls	r3, r3, #20
 800f1f4:	4319      	orrs	r1, r3
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	699b      	ldr	r3, [r3, #24]
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	061b      	lsls	r3, r3, #24
 800f1fe:	430b      	orrs	r3, r1
 800f200:	431a      	orrs	r2, r3
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	609a      	str	r2, [r3, #8]
 800f206:	e02d      	b.n	800f264 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	689a      	ldr	r2, [r3, #8]
 800f20c:	4b19      	ldr	r3, [pc, #100]	@ (800f274 <FMC_SDRAM_Timing_Init+0xd0>)
 800f20e:	4013      	ands	r3, r2
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	68d2      	ldr	r2, [r2, #12]
 800f214:	3a01      	subs	r2, #1
 800f216:	0311      	lsls	r1, r2, #12
 800f218:	68ba      	ldr	r2, [r7, #8]
 800f21a:	6952      	ldr	r2, [r2, #20]
 800f21c:	3a01      	subs	r2, #1
 800f21e:	0512      	lsls	r2, r2, #20
 800f220:	430a      	orrs	r2, r1
 800f222:	431a      	orrs	r2, r3
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	1e59      	subs	r1, r3, #1
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	3b01      	subs	r3, #1
 800f23c:	011b      	lsls	r3, r3, #4
 800f23e:	4319      	orrs	r1, r3
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	3b01      	subs	r3, #1
 800f246:	021b      	lsls	r3, r3, #8
 800f248:	4319      	orrs	r1, r3
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	691b      	ldr	r3, [r3, #16]
 800f24e:	3b01      	subs	r3, #1
 800f250:	041b      	lsls	r3, r3, #16
 800f252:	4319      	orrs	r1, r3
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	3b01      	subs	r3, #1
 800f25a:	061b      	lsls	r3, r3, #24
 800f25c:	430b      	orrs	r3, r1
 800f25e:	431a      	orrs	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3714      	adds	r7, #20
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr
 800f272:	bf00      	nop
 800f274:	ff0f0fff 	.word	0xff0f0fff

0800f278 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	691a      	ldr	r2, [r3, #16]
 800f288:	4b0c      	ldr	r3, [pc, #48]	@ (800f2bc <FMC_SDRAM_SendCommand+0x44>)
 800f28a:	4013      	ands	r3, r2
 800f28c:	68ba      	ldr	r2, [r7, #8]
 800f28e:	6811      	ldr	r1, [r2, #0]
 800f290:	68ba      	ldr	r2, [r7, #8]
 800f292:	6852      	ldr	r2, [r2, #4]
 800f294:	4311      	orrs	r1, r2
 800f296:	68ba      	ldr	r2, [r7, #8]
 800f298:	6892      	ldr	r2, [r2, #8]
 800f29a:	3a01      	subs	r2, #1
 800f29c:	0152      	lsls	r2, r2, #5
 800f29e:	4311      	orrs	r1, r2
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	68d2      	ldr	r2, [r2, #12]
 800f2a4:	0252      	lsls	r2, r2, #9
 800f2a6:	430a      	orrs	r2, r1
 800f2a8:	431a      	orrs	r2, r3
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3714      	adds	r7, #20
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr
 800f2bc:	ffc00000 	.word	0xffc00000

0800f2c0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b083      	sub	sp, #12
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	695a      	ldr	r2, [r3, #20]
 800f2ce:	4b07      	ldr	r3, [pc, #28]	@ (800f2ec <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f2d0:	4013      	ands	r3, r2
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	0052      	lsls	r2, r2, #1
 800f2d6:	431a      	orrs	r2, r3
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	370c      	adds	r7, #12
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e8:	4770      	bx	lr
 800f2ea:	bf00      	nop
 800f2ec:	ffffc001 	.word	0xffffc001

0800f2f0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f2f0:	b084      	sub	sp, #16
 800f2f2:	b480      	push	{r7}
 800f2f4:	b085      	sub	sp, #20
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
 800f2fa:	f107 001c 	add.w	r0, r7, #28
 800f2fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f302:	2300      	movs	r3, #0
 800f304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f306:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f308:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f30a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800f30e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800f312:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800f316:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800f31a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f31c:	68fa      	ldr	r2, [r7, #12]
 800f31e:	4313      	orrs	r3, r2
 800f320:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	685a      	ldr	r2, [r3, #4]
 800f326:	4b07      	ldr	r3, [pc, #28]	@ (800f344 <SDMMC_Init+0x54>)
 800f328:	4013      	ands	r3, r2
 800f32a:	68fa      	ldr	r2, [r7, #12]
 800f32c:	431a      	orrs	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f332:	2300      	movs	r3, #0
}
 800f334:	4618      	mov	r0, r3
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	b004      	add	sp, #16
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop
 800f344:	ffff8100 	.word	0xffff8100

0800f348 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f356:	4618      	mov	r0, r3
 800f358:	370c      	adds	r7, #12
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr

0800f362 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f362:	b480      	push	{r7}
 800f364:	b083      	sub	sp, #12
 800f366:	af00      	add	r7, sp, #0
 800f368:	6078      	str	r0, [r7, #4]
 800f36a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f376:	2300      	movs	r3, #0
}
 800f378:	4618      	mov	r0, r3
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2203      	movs	r2, #3
 800f390:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	370c      	adds	r7, #12
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr

0800f3a0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f003 0303 	and.w	r3, r3, #3
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	370c      	adds	r7, #12
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ba:	4770      	bx	lr

0800f3bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	681a      	ldr	r2, [r3, #0]
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f3da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f3e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f3e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f3e8:	68fa      	ldr	r2, [r7, #12]
 800f3ea:	4313      	orrs	r3, r2
 800f3ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	68da      	ldr	r2, [r3, #12]
 800f3f2:	4b06      	ldr	r3, [pc, #24]	@ (800f40c <SDMMC_SendCommand+0x50>)
 800f3f4:	4013      	ands	r3, r2
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	431a      	orrs	r2, r3
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3714      	adds	r7, #20
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr
 800f40c:	fffff000 	.word	0xfffff000

0800f410 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	691b      	ldr	r3, [r3, #16]
 800f41c:	b2db      	uxtb	r3, r3
}
 800f41e:	4618      	mov	r0, r3
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f42a:	b480      	push	{r7}
 800f42c:	b085      	sub	sp, #20
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
 800f432:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	3314      	adds	r3, #20
 800f438:	461a      	mov	r2, r3
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	4413      	add	r3, r2
 800f43e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
}  
 800f444:	4618      	mov	r0, r3
 800f446:	3714      	adds	r7, #20
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f450:	b480      	push	{r7}
 800f452:	b085      	sub	sp, #20
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f45a:	2300      	movs	r3, #0
 800f45c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	685a      	ldr	r2, [r3, #4]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f476:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f47c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f482:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	4313      	orrs	r3, r2
 800f488:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f48e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	431a      	orrs	r2, r3
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f49a:	2300      	movs	r3, #0

}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3714      	adds	r7, #20
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a6:	4770      	bx	lr

0800f4a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b088      	sub	sp, #32
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f4b6:	2310      	movs	r3, #16
 800f4b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4ba:	2340      	movs	r3, #64	@ 0x40
 800f4bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f4c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4c8:	f107 0308 	add.w	r3, r7, #8
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff ff74 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f4d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4d8:	2110      	movs	r1, #16
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 f9d6 	bl	800f88c <SDMMC_GetCmdResp1>
 800f4e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4e2:	69fb      	ldr	r3, [r7, #28]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3720      	adds	r7, #32
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b088      	sub	sp, #32
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f4fa:	2311      	movs	r3, #17
 800f4fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4fe:	2340      	movs	r3, #64	@ 0x40
 800f500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f502:	2300      	movs	r3, #0
 800f504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f50a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f50c:	f107 0308 	add.w	r3, r7, #8
 800f510:	4619      	mov	r1, r3
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f7ff ff52 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f518:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f51c:	2111      	movs	r1, #17
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 f9b4 	bl	800f88c <SDMMC_GetCmdResp1>
 800f524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f526:	69fb      	ldr	r3, [r7, #28]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3720      	adds	r7, #32
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b088      	sub	sp, #32
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f53e:	2312      	movs	r3, #18
 800f540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f542:	2340      	movs	r3, #64	@ 0x40
 800f544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f546:	2300      	movs	r3, #0
 800f548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f54a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f54e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f550:	f107 0308 	add.w	r3, r7, #8
 800f554:	4619      	mov	r1, r3
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f7ff ff30 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f55c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f560:	2112      	movs	r1, #18
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f992 	bl	800f88c <SDMMC_GetCmdResp1>
 800f568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f56a:	69fb      	ldr	r3, [r7, #28]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3720      	adds	r7, #32
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f582:	2318      	movs	r3, #24
 800f584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f586:	2340      	movs	r3, #64	@ 0x40
 800f588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f58a:	2300      	movs	r3, #0
 800f58c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f58e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f594:	f107 0308 	add.w	r3, r7, #8
 800f598:	4619      	mov	r1, r3
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f7ff ff0e 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f5a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5a4:	2118      	movs	r1, #24
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 f970 	bl	800f88c <SDMMC_GetCmdResp1>
 800f5ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5ae:	69fb      	ldr	r3, [r7, #28]
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3720      	adds	r7, #32
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b088      	sub	sp, #32
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f5c6:	2319      	movs	r3, #25
 800f5c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5ca:	2340      	movs	r3, #64	@ 0x40
 800f5cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f5d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5d8:	f107 0308 	add.w	r3, r7, #8
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f7ff feec 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f5e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f5e8:	2119      	movs	r1, #25
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 f94e 	bl	800f88c <SDMMC_GetCmdResp1>
 800f5f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5f2:	69fb      	ldr	r3, [r7, #28]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3720      	adds	r7, #32
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b088      	sub	sp, #32
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f604:	2300      	movs	r3, #0
 800f606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f608:	230c      	movs	r3, #12
 800f60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f60c:	2340      	movs	r3, #64	@ 0x40
 800f60e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f610:	2300      	movs	r3, #0
 800f612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f618:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f61a:	f107 0308 	add.w	r3, r7, #8
 800f61e:	4619      	mov	r1, r3
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7ff fecb 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f626:	4a05      	ldr	r2, [pc, #20]	@ (800f63c <SDMMC_CmdStopTransfer+0x40>)
 800f628:	210c      	movs	r1, #12
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f000 f92e 	bl	800f88c <SDMMC_GetCmdResp1>
 800f630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f632:	69fb      	ldr	r3, [r7, #28]
}
 800f634:	4618      	mov	r0, r3
 800f636:	3720      	adds	r7, #32
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	05f5e100 	.word	0x05f5e100

0800f640 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b08a      	sub	sp, #40	@ 0x28
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f650:	2307      	movs	r3, #7
 800f652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f654:	2340      	movs	r3, #64	@ 0x40
 800f656:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f658:	2300      	movs	r3, #0
 800f65a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f65c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f660:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f662:	f107 0310 	add.w	r3, r7, #16
 800f666:	4619      	mov	r1, r3
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	f7ff fea7 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f66e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f672:	2107      	movs	r1, #7
 800f674:	68f8      	ldr	r0, [r7, #12]
 800f676:	f000 f909 	bl	800f88c <SDMMC_GetCmdResp1>
 800f67a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800f67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3728      	adds	r7, #40	@ 0x28
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}

0800f686 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f686:	b580      	push	{r7, lr}
 800f688:	b088      	sub	sp, #32
 800f68a:	af00      	add	r7, sp, #0
 800f68c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f68e:	2300      	movs	r3, #0
 800f690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f692:	2300      	movs	r3, #0
 800f694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f696:	2300      	movs	r3, #0
 800f698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f69a:	2300      	movs	r3, #0
 800f69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f69e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6a4:	f107 0308 	add.w	r3, r7, #8
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f7ff fe86 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 fb23 	bl	800fcfc <SDMMC_GetCmdError>
 800f6b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6b8:	69fb      	ldr	r3, [r7, #28]
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3720      	adds	r7, #32
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b088      	sub	sp, #32
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f6ca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800f6ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f6d0:	2308      	movs	r3, #8
 800f6d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6d4:	2340      	movs	r3, #64	@ 0x40
 800f6d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f6e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6e2:	f107 0308 	add.w	r3, r7, #8
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7ff fe67 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fab6 	bl	800fc60 <SDMMC_GetCmdResp7>
 800f6f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6f6:	69fb      	ldr	r3, [r7, #28]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3720      	adds	r7, #32
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}

0800f700 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b088      	sub	sp, #32
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f70e:	2337      	movs	r3, #55	@ 0x37
 800f710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f712:	2340      	movs	r3, #64	@ 0x40
 800f714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f716:	2300      	movs	r3, #0
 800f718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f71a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f71e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f720:	f107 0308 	add.w	r3, r7, #8
 800f724:	4619      	mov	r1, r3
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff fe48 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f72c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f730:	2137      	movs	r1, #55	@ 0x37
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f8aa 	bl	800f88c <SDMMC_GetCmdResp1>
 800f738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f73a:	69fb      	ldr	r3, [r7, #28]
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3720      	adds	r7, #32
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b088      	sub	sp, #32
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	4b0d      	ldr	r3, [pc, #52]	@ (800f788 <SDMMC_CmdAppOperCommand+0x44>)
 800f752:	4313      	orrs	r3, r2
 800f754:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f756:	2329      	movs	r3, #41	@ 0x29
 800f758:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f75a:	2340      	movs	r3, #64	@ 0x40
 800f75c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f75e:	2300      	movs	r3, #0
 800f760:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f766:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f768:	f107 0308 	add.w	r3, r7, #8
 800f76c:	4619      	mov	r1, r3
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f7ff fe24 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 f9bf 	bl	800faf8 <SDMMC_GetCmdResp3>
 800f77a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f77c:	69fb      	ldr	r3, [r7, #28]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3720      	adds	r7, #32
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	80100000 	.word	0x80100000

0800f78c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b088      	sub	sp, #32
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f794:	2300      	movs	r3, #0
 800f796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f798:	2302      	movs	r3, #2
 800f79a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f79c:	23c0      	movs	r3, #192	@ 0xc0
 800f79e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7aa:	f107 0308 	add.w	r3, r7, #8
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f7ff fe03 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 f956 	bl	800fa68 <SDMMC_GetCmdResp2>
 800f7bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7be:	69fb      	ldr	r3, [r7, #28]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3720      	adds	r7, #32
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b088      	sub	sp, #32
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f7d6:	2309      	movs	r3, #9
 800f7d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f7da:	23c0      	movs	r3, #192	@ 0xc0
 800f7dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f7e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f7e8:	f107 0308 	add.w	r3, r7, #8
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f7ff fde4 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 f937 	bl	800fa68 <SDMMC_GetCmdResp2>
 800f7fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7fc:	69fb      	ldr	r3, [r7, #28]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3720      	adds	r7, #32
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}

0800f806 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b088      	sub	sp, #32
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f810:	2300      	movs	r3, #0
 800f812:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f814:	2303      	movs	r3, #3
 800f816:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f818:	2340      	movs	r3, #64	@ 0x40
 800f81a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f81c:	2300      	movs	r3, #0
 800f81e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f824:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f826:	f107 0308 	add.w	r3, r7, #8
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff fdc5 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f832:	683a      	ldr	r2, [r7, #0]
 800f834:	2103      	movs	r1, #3
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 f99c 	bl	800fb74 <SDMMC_GetCmdResp6>
 800f83c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f83e:	69fb      	ldr	r3, [r7, #28]
}
 800f840:	4618      	mov	r0, r3
 800f842:	3720      	adds	r7, #32
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b088      	sub	sp, #32
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f856:	230d      	movs	r3, #13
 800f858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f85a:	2340      	movs	r3, #64	@ 0x40
 800f85c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f85e:	2300      	movs	r3, #0
 800f860:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f866:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f868:	f107 0308 	add.w	r3, r7, #8
 800f86c:	4619      	mov	r1, r3
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7ff fda4 	bl	800f3bc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f874:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f878:	210d      	movs	r1, #13
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 f806 	bl	800f88c <SDMMC_GetCmdResp1>
 800f880:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f882:	69fb      	ldr	r3, [r7, #28]
}
 800f884:	4618      	mov	r0, r3
 800f886:	3720      	adds	r7, #32
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b088      	sub	sp, #32
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	460b      	mov	r3, r1
 800f896:	607a      	str	r2, [r7, #4]
 800f898:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f89a:	4b70      	ldr	r3, [pc, #448]	@ (800fa5c <SDMMC_GetCmdResp1+0x1d0>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4a70      	ldr	r2, [pc, #448]	@ (800fa60 <SDMMC_GetCmdResp1+0x1d4>)
 800f8a0:	fba2 2303 	umull	r2, r3, r2, r3
 800f8a4:	0a5a      	lsrs	r2, r3, #9
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	fb02 f303 	mul.w	r3, r2, r3
 800f8ac:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	1e5a      	subs	r2, r3, #1
 800f8b2:	61fa      	str	r2, [r7, #28]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d102      	bne.n	800f8be <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8b8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f8bc:	e0c9      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8c2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8c4:	69bb      	ldr	r3, [r7, #24]
 800f8c6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d0ef      	beq.n	800f8ae <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d1ea      	bne.n	800f8ae <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8dc:	f003 0304 	and.w	r3, r3, #4
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d004      	beq.n	800f8ee <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2204      	movs	r2, #4
 800f8e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f8ea:	2304      	movs	r3, #4
 800f8ec:	e0b1      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8f2:	f003 0301 	and.w	r3, r3, #1
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d004      	beq.n	800f904 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f900:	2301      	movs	r3, #1
 800f902:	e0a6      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	22c5      	movs	r2, #197	@ 0xc5
 800f908:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f90a:	68f8      	ldr	r0, [r7, #12]
 800f90c:	f7ff fd80 	bl	800f410 <SDMMC_GetCommandResponse>
 800f910:	4603      	mov	r3, r0
 800f912:	461a      	mov	r2, r3
 800f914:	7afb      	ldrb	r3, [r7, #11]
 800f916:	4293      	cmp	r3, r2
 800f918:	d001      	beq.n	800f91e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f91a:	2301      	movs	r3, #1
 800f91c:	e099      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f91e:	2100      	movs	r1, #0
 800f920:	68f8      	ldr	r0, [r7, #12]
 800f922:	f7ff fd82 	bl	800f42a <SDMMC_GetResponse>
 800f926:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f928:	697a      	ldr	r2, [r7, #20]
 800f92a:	4b4e      	ldr	r3, [pc, #312]	@ (800fa64 <SDMMC_GetCmdResp1+0x1d8>)
 800f92c:	4013      	ands	r3, r2
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d101      	bne.n	800f936 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f932:	2300      	movs	r3, #0
 800f934:	e08d      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	da02      	bge.n	800f942 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f93c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800f940:	e087      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d001      	beq.n	800f950 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f94c:	2340      	movs	r3, #64	@ 0x40
 800f94e:	e080      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f956:	2b00      	cmp	r3, #0
 800f958:	d001      	beq.n	800f95e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f95a:	2380      	movs	r3, #128	@ 0x80
 800f95c:	e079      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f95e:	697b      	ldr	r3, [r7, #20]
 800f960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f964:	2b00      	cmp	r3, #0
 800f966:	d002      	beq.n	800f96e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f968:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f96c:	e071      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f974:	2b00      	cmp	r3, #0
 800f976:	d002      	beq.n	800f97e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f978:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f97c:	e069      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f984:	2b00      	cmp	r3, #0
 800f986:	d002      	beq.n	800f98e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f988:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f98c:	e061      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f998:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f99c:	e059      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d002      	beq.n	800f9ae <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f9a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f9ac:	e051      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d002      	beq.n	800f9be <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f9b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f9bc:	e049      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d002      	beq.n	800f9ce <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f9c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f9cc:	e041      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d002      	beq.n	800f9de <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f9d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f9dc:	e039      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d002      	beq.n	800f9ee <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f9e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f9ec:	e031      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f9ee:	697b      	ldr	r3, [r7, #20]
 800f9f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d002      	beq.n	800f9fe <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f9f8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f9fc:	e029      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d002      	beq.n	800fa0e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fa08:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fa0c:	e021      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d002      	beq.n	800fa1e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fa18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fa1c:	e019      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d002      	beq.n	800fa2e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fa28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800fa2c:	e011      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fa38:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fa3c:	e009      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	f003 0308 	and.w	r3, r3, #8
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d002      	beq.n	800fa4e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fa48:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800fa4c:	e001      	b.n	800fa52 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fa4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3720      	adds	r7, #32
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	20000040 	.word	0x20000040
 800fa60:	10624dd3 	.word	0x10624dd3
 800fa64:	fdffe008 	.word	0xfdffe008

0800fa68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b085      	sub	sp, #20
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fa70:	4b1f      	ldr	r3, [pc, #124]	@ (800faf0 <SDMMC_GetCmdResp2+0x88>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a1f      	ldr	r2, [pc, #124]	@ (800faf4 <SDMMC_GetCmdResp2+0x8c>)
 800fa76:	fba2 2303 	umull	r2, r3, r2, r3
 800fa7a:	0a5b      	lsrs	r3, r3, #9
 800fa7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa80:	fb02 f303 	mul.w	r3, r2, r3
 800fa84:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	1e5a      	subs	r2, r3, #1
 800fa8a:	60fa      	str	r2, [r7, #12]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d102      	bne.n	800fa96 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fa94:	e026      	b.n	800fae4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa9a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d0ef      	beq.n	800fa86 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800faac:	2b00      	cmp	r3, #0
 800faae:	d1ea      	bne.n	800fa86 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fab4:	f003 0304 	and.w	r3, r3, #4
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d004      	beq.n	800fac6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2204      	movs	r2, #4
 800fac0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fac2:	2304      	movs	r3, #4
 800fac4:	e00e      	b.n	800fae4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faca:	f003 0301 	and.w	r3, r3, #1
 800face:	2b00      	cmp	r3, #0
 800fad0:	d004      	beq.n	800fadc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2201      	movs	r2, #1
 800fad6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fad8:	2301      	movs	r3, #1
 800fada:	e003      	b.n	800fae4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	22c5      	movs	r2, #197	@ 0xc5
 800fae0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800fae2:	2300      	movs	r3, #0
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3714      	adds	r7, #20
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr
 800faf0:	20000040 	.word	0x20000040
 800faf4:	10624dd3 	.word	0x10624dd3

0800faf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb00:	4b1a      	ldr	r3, [pc, #104]	@ (800fb6c <SDMMC_GetCmdResp3+0x74>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a1a      	ldr	r2, [pc, #104]	@ (800fb70 <SDMMC_GetCmdResp3+0x78>)
 800fb06:	fba2 2303 	umull	r2, r3, r2, r3
 800fb0a:	0a5b      	lsrs	r3, r3, #9
 800fb0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb10:	fb02 f303 	mul.w	r3, r2, r3
 800fb14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	1e5a      	subs	r2, r3, #1
 800fb1a:	60fa      	str	r2, [r7, #12]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d102      	bne.n	800fb26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fb24:	e01b      	b.n	800fb5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d0ef      	beq.n	800fb16 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d1ea      	bne.n	800fb16 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fb44:	f003 0304 	and.w	r3, r3, #4
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d004      	beq.n	800fb56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2204      	movs	r2, #4
 800fb50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb52:	2304      	movs	r3, #4
 800fb54:	e003      	b.n	800fb5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	22c5      	movs	r2, #197	@ 0xc5
 800fb5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3714      	adds	r7, #20
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	20000040 	.word	0x20000040
 800fb70:	10624dd3 	.word	0x10624dd3

0800fb74 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b088      	sub	sp, #32
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	607a      	str	r2, [r7, #4]
 800fb80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb82:	4b35      	ldr	r3, [pc, #212]	@ (800fc58 <SDMMC_GetCmdResp6+0xe4>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4a35      	ldr	r2, [pc, #212]	@ (800fc5c <SDMMC_GetCmdResp6+0xe8>)
 800fb88:	fba2 2303 	umull	r2, r3, r2, r3
 800fb8c:	0a5b      	lsrs	r3, r3, #9
 800fb8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb92:	fb02 f303 	mul.w	r3, r2, r3
 800fb96:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fb98:	69fb      	ldr	r3, [r7, #28]
 800fb9a:	1e5a      	subs	r2, r3, #1
 800fb9c:	61fa      	str	r2, [r7, #28]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d102      	bne.n	800fba8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fba2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fba6:	e052      	b.n	800fc4e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbac:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d0ef      	beq.n	800fb98 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d1ea      	bne.n	800fb98 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbc6:	f003 0304 	and.w	r3, r3, #4
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d004      	beq.n	800fbd8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	2204      	movs	r2, #4
 800fbd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fbd4:	2304      	movs	r3, #4
 800fbd6:	e03a      	b.n	800fc4e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbdc:	f003 0301 	and.w	r3, r3, #1
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d004      	beq.n	800fbee <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fbea:	2301      	movs	r3, #1
 800fbec:	e02f      	b.n	800fc4e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	f7ff fc0e 	bl	800f410 <SDMMC_GetCommandResponse>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	7afb      	ldrb	r3, [r7, #11]
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d001      	beq.n	800fc02 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fbfe:	2301      	movs	r3, #1
 800fc00:	e025      	b.n	800fc4e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	22c5      	movs	r2, #197	@ 0xc5
 800fc06:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fc08:	2100      	movs	r1, #0
 800fc0a:	68f8      	ldr	r0, [r7, #12]
 800fc0c:	f7ff fc0d 	bl	800f42a <SDMMC_GetResponse>
 800fc10:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d106      	bne.n	800fc2a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	0c1b      	lsrs	r3, r3, #16
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fc26:	2300      	movs	r3, #0
 800fc28:	e011      	b.n	800fc4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d002      	beq.n	800fc3a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fc34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fc38:	e009      	b.n	800fc4e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d002      	beq.n	800fc4a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fc44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fc48:	e001      	b.n	800fc4e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fc4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3720      	adds	r7, #32
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	20000040 	.word	0x20000040
 800fc5c:	10624dd3 	.word	0x10624dd3

0800fc60 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b085      	sub	sp, #20
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc68:	4b22      	ldr	r3, [pc, #136]	@ (800fcf4 <SDMMC_GetCmdResp7+0x94>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a22      	ldr	r2, [pc, #136]	@ (800fcf8 <SDMMC_GetCmdResp7+0x98>)
 800fc6e:	fba2 2303 	umull	r2, r3, r2, r3
 800fc72:	0a5b      	lsrs	r3, r3, #9
 800fc74:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fc78:	fb02 f303 	mul.w	r3, r2, r3
 800fc7c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	1e5a      	subs	r2, r3, #1
 800fc82:	60fa      	str	r2, [r7, #12]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d102      	bne.n	800fc8e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc88:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fc8c:	e02c      	b.n	800fce8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0ef      	beq.n	800fc7e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1ea      	bne.n	800fc7e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcac:	f003 0304 	and.w	r3, r3, #4
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d004      	beq.n	800fcbe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2204      	movs	r2, #4
 800fcb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fcba:	2304      	movs	r3, #4
 800fcbc:	e014      	b.n	800fce8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcc2:	f003 0301 	and.w	r3, r3, #1
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d004      	beq.n	800fcd4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2201      	movs	r2, #1
 800fcce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	e009      	b.n	800fce8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2240      	movs	r2, #64	@ 0x40
 800fce4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fce6:	2300      	movs	r3, #0
  
}
 800fce8:	4618      	mov	r0, r3
 800fcea:	3714      	adds	r7, #20
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	20000040 	.word	0x20000040
 800fcf8:	10624dd3 	.word	0x10624dd3

0800fcfc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b085      	sub	sp, #20
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd04:	4b11      	ldr	r3, [pc, #68]	@ (800fd4c <SDMMC_GetCmdError+0x50>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a11      	ldr	r2, [pc, #68]	@ (800fd50 <SDMMC_GetCmdError+0x54>)
 800fd0a:	fba2 2303 	umull	r2, r3, r2, r3
 800fd0e:	0a5b      	lsrs	r3, r3, #9
 800fd10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd14:	fb02 f303 	mul.w	r3, r2, r3
 800fd18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	1e5a      	subs	r2, r3, #1
 800fd1e:	60fa      	str	r2, [r7, #12]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d102      	bne.n	800fd2a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fd28:	e009      	b.n	800fd3e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d0f1      	beq.n	800fd1a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	22c5      	movs	r2, #197	@ 0xc5
 800fd3a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800fd3c:	2300      	movs	r3, #0
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3714      	adds	r7, #20
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	20000040 	.word	0x20000040
 800fd50:	10624dd3 	.word	0x10624dd3

0800fd54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fd58:	4904      	ldr	r1, [pc, #16]	@ (800fd6c <MX_FATFS_Init+0x18>)
 800fd5a:	4805      	ldr	r0, [pc, #20]	@ (800fd70 <MX_FATFS_Init+0x1c>)
 800fd5c:	f000 fb58 	bl	8010410 <FATFS_LinkDriver>
 800fd60:	4603      	mov	r3, r0
 800fd62:	461a      	mov	r2, r3
 800fd64:	4b03      	ldr	r3, [pc, #12]	@ (800fd74 <MX_FATFS_Init+0x20>)
 800fd66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fd68:	bf00      	nop
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	20000e68 	.word	0x20000e68
 800fd70:	08016264 	.word	0x08016264
 800fd74:	20000e64 	.word	0x20000e64

0800fd78 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fd7c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fd7e:	4618      	mov	r0, r3
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fd92:	f000 f888 	bl	800fea6 <BSP_SD_IsDetected>
 800fd96:	4603      	mov	r3, r0
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d001      	beq.n	800fda0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fd9c:	2302      	movs	r3, #2
 800fd9e:	e005      	b.n	800fdac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fda0:	4804      	ldr	r0, [pc, #16]	@ (800fdb4 <BSP_SD_Init+0x2c>)
 800fda2:	f7fd f8b8 	bl	800cf16 <HAL_SD_Init>
 800fda6:	4603      	mov	r3, r0
 800fda8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
}
 800fdac:	4618      	mov	r0, r3
 800fdae:	3708      	adds	r7, #8
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	200006bc 	.word	0x200006bc

0800fdb8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	60f8      	str	r0, [r7, #12]
 800fdc0:	60b9      	str	r1, [r7, #8]
 800fdc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	68ba      	ldr	r2, [r7, #8]
 800fdcc:	68f9      	ldr	r1, [r7, #12]
 800fdce:	4806      	ldr	r0, [pc, #24]	@ (800fde8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fdd0:	f7fd f95a 	bl	800d088 <HAL_SD_ReadBlocks_DMA>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d001      	beq.n	800fdde <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fdda:	2301      	movs	r3, #1
 800fddc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fdde:	7dfb      	ldrb	r3, [r7, #23]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3718      	adds	r7, #24
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	200006bc 	.word	0x200006bc

0800fdec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b086      	sub	sp, #24
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	60f8      	str	r0, [r7, #12]
 800fdf4:	60b9      	str	r1, [r7, #8]
 800fdf6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	68ba      	ldr	r2, [r7, #8]
 800fe00:	68f9      	ldr	r1, [r7, #12]
 800fe02:	4806      	ldr	r0, [pc, #24]	@ (800fe1c <BSP_SD_WriteBlocks_DMA+0x30>)
 800fe04:	f7fd fa22 	bl	800d24c <HAL_SD_WriteBlocks_DMA>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d001      	beq.n	800fe12 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fe12:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe14:	4618      	mov	r0, r3
 800fe16:	3718      	adds	r7, #24
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	200006bc 	.word	0x200006bc

0800fe20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fe24:	4805      	ldr	r0, [pc, #20]	@ (800fe3c <BSP_SD_GetCardState+0x1c>)
 800fe26:	f7fd fe47 	bl	800dab8 <HAL_SD_GetCardState>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	2b04      	cmp	r3, #4
 800fe2e:	bf14      	ite	ne
 800fe30:	2301      	movne	r3, #1
 800fe32:	2300      	moveq	r3, #0
 800fe34:	b2db      	uxtb	r3, r3
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	200006bc 	.word	0x200006bc

0800fe40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fe48:	6879      	ldr	r1, [r7, #4]
 800fe4a:	4803      	ldr	r0, [pc, #12]	@ (800fe58 <BSP_SD_GetCardInfo+0x18>)
 800fe4c:	f7fd fe08 	bl	800da60 <HAL_SD_GetCardInfo>
}
 800fe50:	bf00      	nop
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	200006bc 	.word	0x200006bc

0800fe5c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800fe64:	f000 f818 	bl	800fe98 <BSP_SD_AbortCallback>
}
 800fe68:	bf00      	nop
 800fe6a:	3708      	adds	r7, #8
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fe78:	f000 f9c4 	bl	8010204 <BSP_SD_WriteCpltCallback>
}
 800fe7c:	bf00      	nop
 800fe7e:	3708      	adds	r7, #8
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b082      	sub	sp, #8
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fe8c:	f000 f9c8 	bl	8010220 <BSP_SD_ReadCpltCallback>
}
 800fe90:	bf00      	nop
 800fe92:	3708      	adds	r7, #8
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	af00      	add	r7, sp, #0

}
 800fe9c:	bf00      	nop
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr

0800fea6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b082      	sub	sp, #8
 800feaa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800feac:	2301      	movs	r3, #1
 800feae:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800feb0:	f000 f80c 	bl	800fecc <BSP_PlatformIsDetected>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d101      	bne.n	800febe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800feba:	2300      	movs	r3, #0
 800febc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800febe:	79fb      	ldrb	r3, [r7, #7]
 800fec0:	b2db      	uxtb	r3, r3
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
	...

0800fecc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fed2:	2301      	movs	r3, #1
 800fed4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fed6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800feda:	4806      	ldr	r0, [pc, #24]	@ (800fef4 <BSP_PlatformIsDetected+0x28>)
 800fedc:	f7f9 ffe8 	bl	8009eb0 <HAL_GPIO_ReadPin>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d001      	beq.n	800feea <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fee6:	2300      	movs	r3, #0
 800fee8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800feea:	79fb      	ldrb	r3, [r7, #7]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	40020800 	.word	0x40020800

0800fef8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800ff00:	f000 fb1e 	bl	8010540 <osKernelSysTick>
 800ff04:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800ff06:	e006      	b.n	800ff16 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff08:	f7ff ff8a 	bl	800fe20 <BSP_SD_GetCardState>
 800ff0c:	4603      	mov	r3, r0
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d101      	bne.n	800ff16 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ff12:	2300      	movs	r3, #0
 800ff14:	e009      	b.n	800ff2a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800ff16:	f000 fb13 	bl	8010540 <osKernelSysTick>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	1ad3      	subs	r3, r2, r3
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d8f0      	bhi.n	800ff08 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ff26:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	3710      	adds	r7, #16
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
	...

0800ff34 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ff3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ff6c <SD_CheckStatus+0x38>)
 800ff40:	2201      	movs	r2, #1
 800ff42:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ff44:	f7ff ff6c 	bl	800fe20 <BSP_SD_GetCardState>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d107      	bne.n	800ff5e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ff4e:	4b07      	ldr	r3, [pc, #28]	@ (800ff6c <SD_CheckStatus+0x38>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	f023 0301 	bic.w	r3, r3, #1
 800ff58:	b2da      	uxtb	r2, r3
 800ff5a:	4b04      	ldr	r3, [pc, #16]	@ (800ff6c <SD_CheckStatus+0x38>)
 800ff5c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ff5e:	4b03      	ldr	r3, [pc, #12]	@ (800ff6c <SD_CheckStatus+0x38>)
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	b2db      	uxtb	r3, r3
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	20000085 	.word	0x20000085

0800ff70 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ff70:	b590      	push	{r4, r7, lr}
 800ff72:	b087      	sub	sp, #28
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	4603      	mov	r3, r0
 800ff78:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ff7a:	4b20      	ldr	r3, [pc, #128]	@ (800fffc <SD_initialize+0x8c>)
 800ff7c:	2201      	movs	r2, #1
 800ff7e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800ff80:	f000 fad2 	bl	8010528 <osKernelRunning>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d030      	beq.n	800ffec <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800ff8a:	f7ff fefd 	bl	800fd88 <BSP_SD_Init>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d107      	bne.n	800ffa4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7ff ffcc 	bl	800ff34 <SD_CheckStatus>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	4b16      	ldr	r3, [pc, #88]	@ (800fffc <SD_initialize+0x8c>)
 800ffa2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ffa4:	4b15      	ldr	r3, [pc, #84]	@ (800fffc <SD_initialize+0x8c>)
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	2b01      	cmp	r3, #1
 800ffac:	d01e      	beq.n	800ffec <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ffae:	4b14      	ldr	r3, [pc, #80]	@ (8010000 <SD_initialize+0x90>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d10e      	bne.n	800ffd4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ffb6:	4b13      	ldr	r3, [pc, #76]	@ (8010004 <SD_initialize+0x94>)
 800ffb8:	f107 0408 	add.w	r4, r7, #8
 800ffbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ffc2:	f107 0308 	add.w	r3, r7, #8
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f000 fbf2 	bl	80107b2 <osMessageCreate>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	4a0b      	ldr	r2, [pc, #44]	@ (8010000 <SD_initialize+0x90>)
 800ffd2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ffd4:	4b0a      	ldr	r3, [pc, #40]	@ (8010000 <SD_initialize+0x90>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d107      	bne.n	800ffec <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ffdc:	4b07      	ldr	r3, [pc, #28]	@ (800fffc <SD_initialize+0x8c>)
 800ffde:	781b      	ldrb	r3, [r3, #0]
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	f043 0301 	orr.w	r3, r3, #1
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	4b04      	ldr	r3, [pc, #16]	@ (800fffc <SD_initialize+0x8c>)
 800ffea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ffec:	4b03      	ldr	r3, [pc, #12]	@ (800fffc <SD_initialize+0x8c>)
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	b2db      	uxtb	r3, r3
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	371c      	adds	r7, #28
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd90      	pop	{r4, r7, pc}
 800fffa:	bf00      	nop
 800fffc:	20000085 	.word	0x20000085
 8010000:	200012d0 	.word	0x200012d0
 8010004:	08013b14 	.word	0x08013b14

08010008 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	4603      	mov	r3, r0
 8010010:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010012:	79fb      	ldrb	r3, [r7, #7]
 8010014:	4618      	mov	r0, r3
 8010016:	f7ff ff8d 	bl	800ff34 <SD_CheckStatus>
 801001a:	4603      	mov	r3, r0
}
 801001c:	4618      	mov	r0, r3
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b08a      	sub	sp, #40	@ 0x28
 8010028:	af00      	add	r7, sp, #0
 801002a:	60b9      	str	r1, [r7, #8]
 801002c:	607a      	str	r2, [r7, #4]
 801002e:	603b      	str	r3, [r7, #0]
 8010030:	4603      	mov	r3, r0
 8010032:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801003a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801003e:	f7ff ff5b 	bl	800fef8 <SD_CheckStatusWithTimeout>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	da02      	bge.n	801004e <SD_read+0x2a>
  {
    return res;
 8010048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801004c:	e032      	b.n	80100b4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801004e:	683a      	ldr	r2, [r7, #0]
 8010050:	6879      	ldr	r1, [r7, #4]
 8010052:	68b8      	ldr	r0, [r7, #8]
 8010054:	f7ff feb0 	bl	800fdb8 <BSP_SD_ReadBlocks_DMA>
 8010058:	4603      	mov	r3, r0
 801005a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 801005e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010062:	2b00      	cmp	r3, #0
 8010064:	d124      	bne.n	80100b0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8010066:	4b15      	ldr	r3, [pc, #84]	@ (80100bc <SD_read+0x98>)
 8010068:	6819      	ldr	r1, [r3, #0]
 801006a:	f107 0314 	add.w	r3, r7, #20
 801006e:	f247 5230 	movw	r2, #30000	@ 0x7530
 8010072:	4618      	mov	r0, r3
 8010074:	f000 fc06 	bl	8010884 <osMessageGet>

    if (event.status == osEventMessage)
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	2b10      	cmp	r3, #16
 801007c:	d118      	bne.n	80100b0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	2b01      	cmp	r3, #1
 8010082:	d115      	bne.n	80100b0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8010084:	f000 fa5c 	bl	8010540 <osKernelSysTick>
 8010088:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801008a:	e008      	b.n	801009e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801008c:	f7ff fec8 	bl	800fe20 <BSP_SD_GetCardState>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d103      	bne.n	801009e <SD_read+0x7a>
              {
                res = RES_OK;
 8010096:	2300      	movs	r3, #0
 8010098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801009c:	e008      	b.n	80100b0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 801009e:	f000 fa4f 	bl	8010540 <osKernelSysTick>
 80100a2:	4602      	mov	r2, r0
 80100a4:	6a3b      	ldr	r3, [r7, #32]
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	f247 522f 	movw	r2, #29999	@ 0x752f
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d9ed      	bls.n	801008c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80100b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3728      	adds	r7, #40	@ 0x28
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	200012d0 	.word	0x200012d0

080100c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b08a      	sub	sp, #40	@ 0x28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60b9      	str	r1, [r7, #8]
 80100c8:	607a      	str	r2, [r7, #4]
 80100ca:	603b      	str	r3, [r7, #0]
 80100cc:	4603      	mov	r3, r0
 80100ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80100d6:	f247 5030 	movw	r0, #30000	@ 0x7530
 80100da:	f7ff ff0d 	bl	800fef8 <SD_CheckStatusWithTimeout>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	da02      	bge.n	80100ea <SD_write+0x2a>
  {
    return res;
 80100e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80100e8:	e02e      	b.n	8010148 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80100ea:	683a      	ldr	r2, [r7, #0]
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	68b8      	ldr	r0, [r7, #8]
 80100f0:	f7ff fe7c 	bl	800fdec <BSP_SD_WriteBlocks_DMA>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d124      	bne.n	8010144 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80100fa:	4b15      	ldr	r3, [pc, #84]	@ (8010150 <SD_write+0x90>)
 80100fc:	6819      	ldr	r1, [r3, #0]
 80100fe:	f107 0314 	add.w	r3, r7, #20
 8010102:	f247 5230 	movw	r2, #30000	@ 0x7530
 8010106:	4618      	mov	r0, r3
 8010108:	f000 fbbc 	bl	8010884 <osMessageGet>

    if (event.status == osEventMessage)
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2b10      	cmp	r3, #16
 8010110:	d118      	bne.n	8010144 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	2b02      	cmp	r3, #2
 8010116:	d115      	bne.n	8010144 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8010118:	f000 fa12 	bl	8010540 <osKernelSysTick>
 801011c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 801011e:	e008      	b.n	8010132 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010120:	f7ff fe7e 	bl	800fe20 <BSP_SD_GetCardState>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d103      	bne.n	8010132 <SD_write+0x72>
          {
            res = RES_OK;
 801012a:	2300      	movs	r3, #0
 801012c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8010130:	e008      	b.n	8010144 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8010132:	f000 fa05 	bl	8010540 <osKernelSysTick>
 8010136:	4602      	mov	r2, r0
 8010138:	6a3b      	ldr	r3, [r7, #32]
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8010140:	4293      	cmp	r3, r2
 8010142:	d9ed      	bls.n	8010120 <SD_write+0x60>
    }

  }
#endif

  return res;
 8010144:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8010148:	4618      	mov	r0, r3
 801014a:	3728      	adds	r7, #40	@ 0x28
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	200012d0 	.word	0x200012d0

08010154 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b08c      	sub	sp, #48	@ 0x30
 8010158:	af00      	add	r7, sp, #0
 801015a:	4603      	mov	r3, r0
 801015c:	603a      	str	r2, [r7, #0]
 801015e:	71fb      	strb	r3, [r7, #7]
 8010160:	460b      	mov	r3, r1
 8010162:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801016a:	4b25      	ldr	r3, [pc, #148]	@ (8010200 <SD_ioctl+0xac>)
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	b2db      	uxtb	r3, r3
 8010170:	f003 0301 	and.w	r3, r3, #1
 8010174:	2b00      	cmp	r3, #0
 8010176:	d001      	beq.n	801017c <SD_ioctl+0x28>
 8010178:	2303      	movs	r3, #3
 801017a:	e03c      	b.n	80101f6 <SD_ioctl+0xa2>

  switch (cmd)
 801017c:	79bb      	ldrb	r3, [r7, #6]
 801017e:	2b03      	cmp	r3, #3
 8010180:	d834      	bhi.n	80101ec <SD_ioctl+0x98>
 8010182:	a201      	add	r2, pc, #4	@ (adr r2, 8010188 <SD_ioctl+0x34>)
 8010184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010188:	08010199 	.word	0x08010199
 801018c:	080101a1 	.word	0x080101a1
 8010190:	080101b9 	.word	0x080101b9
 8010194:	080101d3 	.word	0x080101d3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801019e:	e028      	b.n	80101f2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80101a0:	f107 030c 	add.w	r3, r7, #12
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7ff fe4b 	bl	800fe40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80101aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101ac:	683b      	ldr	r3, [r7, #0]
 80101ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80101b0:	2300      	movs	r3, #0
 80101b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80101b6:	e01c      	b.n	80101f2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80101b8:	f107 030c 	add.w	r3, r7, #12
 80101bc:	4618      	mov	r0, r3
 80101be:	f7ff fe3f 	bl	800fe40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80101c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c4:	b29a      	uxth	r2, r3
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80101ca:	2300      	movs	r3, #0
 80101cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80101d0:	e00f      	b.n	80101f2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80101d2:	f107 030c 	add.w	r3, r7, #12
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7ff fe32 	bl	800fe40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80101dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101de:	0a5a      	lsrs	r2, r3, #9
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80101e4:	2300      	movs	r3, #0
 80101e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80101ea:	e002      	b.n	80101f2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80101ec:	2304      	movs	r3, #4
 80101ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80101f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3730      	adds	r7, #48	@ 0x30
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	20000085 	.word	0x20000085

08010204 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8010208:	4b04      	ldr	r3, [pc, #16]	@ (801021c <BSP_SD_WriteCpltCallback+0x18>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2200      	movs	r2, #0
 801020e:	2102      	movs	r1, #2
 8010210:	4618      	mov	r0, r3
 8010212:	f000 faf7 	bl	8010804 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8010216:	bf00      	nop
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	200012d0 	.word	0x200012d0

08010220 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8010224:	4b04      	ldr	r3, [pc, #16]	@ (8010238 <BSP_SD_ReadCpltCallback+0x18>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	2200      	movs	r2, #0
 801022a:	2101      	movs	r1, #1
 801022c:	4618      	mov	r0, r3
 801022e:	f000 fae9 	bl	8010804 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8010232:	bf00      	nop
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	200012d0 	.word	0x200012d0

0801023c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	4603      	mov	r3, r0
 8010244:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010246:	79fb      	ldrb	r3, [r7, #7]
 8010248:	4a08      	ldr	r2, [pc, #32]	@ (801026c <disk_status+0x30>)
 801024a:	009b      	lsls	r3, r3, #2
 801024c:	4413      	add	r3, r2
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	79fa      	ldrb	r2, [r7, #7]
 8010254:	4905      	ldr	r1, [pc, #20]	@ (801026c <disk_status+0x30>)
 8010256:	440a      	add	r2, r1
 8010258:	7a12      	ldrb	r2, [r2, #8]
 801025a:	4610      	mov	r0, r2
 801025c:	4798      	blx	r3
 801025e:	4603      	mov	r3, r0
 8010260:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010262:	7bfb      	ldrb	r3, [r7, #15]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3710      	adds	r7, #16
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	200012d4 	.word	0x200012d4

08010270 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	4603      	mov	r3, r0
 8010278:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801027a:	2300      	movs	r3, #0
 801027c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801027e:	79fb      	ldrb	r3, [r7, #7]
 8010280:	4a0d      	ldr	r2, [pc, #52]	@ (80102b8 <disk_initialize+0x48>)
 8010282:	5cd3      	ldrb	r3, [r2, r3]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d111      	bne.n	80102ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010288:	79fb      	ldrb	r3, [r7, #7]
 801028a:	4a0b      	ldr	r2, [pc, #44]	@ (80102b8 <disk_initialize+0x48>)
 801028c:	2101      	movs	r1, #1
 801028e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	4a09      	ldr	r2, [pc, #36]	@ (80102b8 <disk_initialize+0x48>)
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	4413      	add	r3, r2
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	79fa      	ldrb	r2, [r7, #7]
 801029e:	4906      	ldr	r1, [pc, #24]	@ (80102b8 <disk_initialize+0x48>)
 80102a0:	440a      	add	r2, r1
 80102a2:	7a12      	ldrb	r2, [r2, #8]
 80102a4:	4610      	mov	r0, r2
 80102a6:	4798      	blx	r3
 80102a8:	4603      	mov	r3, r0
 80102aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80102ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	200012d4 	.word	0x200012d4

080102bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80102bc:	b590      	push	{r4, r7, lr}
 80102be:	b087      	sub	sp, #28
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60b9      	str	r1, [r7, #8]
 80102c4:	607a      	str	r2, [r7, #4]
 80102c6:	603b      	str	r3, [r7, #0]
 80102c8:	4603      	mov	r3, r0
 80102ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80102cc:	7bfb      	ldrb	r3, [r7, #15]
 80102ce:	4a0a      	ldr	r2, [pc, #40]	@ (80102f8 <disk_read+0x3c>)
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	4413      	add	r3, r2
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	689c      	ldr	r4, [r3, #8]
 80102d8:	7bfb      	ldrb	r3, [r7, #15]
 80102da:	4a07      	ldr	r2, [pc, #28]	@ (80102f8 <disk_read+0x3c>)
 80102dc:	4413      	add	r3, r2
 80102de:	7a18      	ldrb	r0, [r3, #8]
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	68b9      	ldr	r1, [r7, #8]
 80102e6:	47a0      	blx	r4
 80102e8:	4603      	mov	r3, r0
 80102ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80102ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	371c      	adds	r7, #28
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd90      	pop	{r4, r7, pc}
 80102f6:	bf00      	nop
 80102f8:	200012d4 	.word	0x200012d4

080102fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80102fc:	b590      	push	{r4, r7, lr}
 80102fe:	b087      	sub	sp, #28
 8010300:	af00      	add	r7, sp, #0
 8010302:	60b9      	str	r1, [r7, #8]
 8010304:	607a      	str	r2, [r7, #4]
 8010306:	603b      	str	r3, [r7, #0]
 8010308:	4603      	mov	r3, r0
 801030a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801030c:	7bfb      	ldrb	r3, [r7, #15]
 801030e:	4a0a      	ldr	r2, [pc, #40]	@ (8010338 <disk_write+0x3c>)
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	4413      	add	r3, r2
 8010314:	685b      	ldr	r3, [r3, #4]
 8010316:	68dc      	ldr	r4, [r3, #12]
 8010318:	7bfb      	ldrb	r3, [r7, #15]
 801031a:	4a07      	ldr	r2, [pc, #28]	@ (8010338 <disk_write+0x3c>)
 801031c:	4413      	add	r3, r2
 801031e:	7a18      	ldrb	r0, [r3, #8]
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	68b9      	ldr	r1, [r7, #8]
 8010326:	47a0      	blx	r4
 8010328:	4603      	mov	r3, r0
 801032a:	75fb      	strb	r3, [r7, #23]
  return res;
 801032c:	7dfb      	ldrb	r3, [r7, #23]
}
 801032e:	4618      	mov	r0, r3
 8010330:	371c      	adds	r7, #28
 8010332:	46bd      	mov	sp, r7
 8010334:	bd90      	pop	{r4, r7, pc}
 8010336:	bf00      	nop
 8010338:	200012d4 	.word	0x200012d4

0801033c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	4603      	mov	r3, r0
 8010344:	603a      	str	r2, [r7, #0]
 8010346:	71fb      	strb	r3, [r7, #7]
 8010348:	460b      	mov	r3, r1
 801034a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801034c:	79fb      	ldrb	r3, [r7, #7]
 801034e:	4a09      	ldr	r2, [pc, #36]	@ (8010374 <disk_ioctl+0x38>)
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	4413      	add	r3, r2
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	691b      	ldr	r3, [r3, #16]
 8010358:	79fa      	ldrb	r2, [r7, #7]
 801035a:	4906      	ldr	r1, [pc, #24]	@ (8010374 <disk_ioctl+0x38>)
 801035c:	440a      	add	r2, r1
 801035e:	7a10      	ldrb	r0, [r2, #8]
 8010360:	79b9      	ldrb	r1, [r7, #6]
 8010362:	683a      	ldr	r2, [r7, #0]
 8010364:	4798      	blx	r3
 8010366:	4603      	mov	r3, r0
 8010368:	73fb      	strb	r3, [r7, #15]
  return res;
 801036a:	7bfb      	ldrb	r3, [r7, #15]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	200012d4 	.word	0x200012d4

08010378 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010378:	b480      	push	{r7}
 801037a:	b087      	sub	sp, #28
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	4613      	mov	r3, r2
 8010384:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010386:	2301      	movs	r3, #1
 8010388:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801038a:	2300      	movs	r3, #0
 801038c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801038e:	4b1f      	ldr	r3, [pc, #124]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 8010390:	7a5b      	ldrb	r3, [r3, #9]
 8010392:	b2db      	uxtb	r3, r3
 8010394:	2b00      	cmp	r3, #0
 8010396:	d131      	bne.n	80103fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010398:	4b1c      	ldr	r3, [pc, #112]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 801039a:	7a5b      	ldrb	r3, [r3, #9]
 801039c:	b2db      	uxtb	r3, r3
 801039e:	461a      	mov	r2, r3
 80103a0:	4b1a      	ldr	r3, [pc, #104]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 80103a2:	2100      	movs	r1, #0
 80103a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80103a6:	4b19      	ldr	r3, [pc, #100]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 80103a8:	7a5b      	ldrb	r3, [r3, #9]
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	4a17      	ldr	r2, [pc, #92]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	4413      	add	r3, r2
 80103b2:	68fa      	ldr	r2, [r7, #12]
 80103b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80103b6:	4b15      	ldr	r3, [pc, #84]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 80103b8:	7a5b      	ldrb	r3, [r3, #9]
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	461a      	mov	r2, r3
 80103be:	4b13      	ldr	r3, [pc, #76]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 80103c0:	4413      	add	r3, r2
 80103c2:	79fa      	ldrb	r2, [r7, #7]
 80103c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80103c6:	4b11      	ldr	r3, [pc, #68]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 80103c8:	7a5b      	ldrb	r3, [r3, #9]
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	1c5a      	adds	r2, r3, #1
 80103ce:	b2d1      	uxtb	r1, r2
 80103d0:	4a0e      	ldr	r2, [pc, #56]	@ (801040c <FATFS_LinkDriverEx+0x94>)
 80103d2:	7251      	strb	r1, [r2, #9]
 80103d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80103d6:	7dbb      	ldrb	r3, [r7, #22]
 80103d8:	3330      	adds	r3, #48	@ 0x30
 80103da:	b2da      	uxtb	r2, r3
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	3301      	adds	r3, #1
 80103e4:	223a      	movs	r2, #58	@ 0x3a
 80103e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	3302      	adds	r3, #2
 80103ec:	222f      	movs	r2, #47	@ 0x2f
 80103ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	3303      	adds	r3, #3
 80103f4:	2200      	movs	r2, #0
 80103f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80103f8:	2300      	movs	r3, #0
 80103fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80103fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	371c      	adds	r7, #28
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr
 801040a:	bf00      	nop
 801040c:	200012d4 	.word	0x200012d4

08010410 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b082      	sub	sp, #8
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801041a:	2200      	movs	r2, #0
 801041c:	6839      	ldr	r1, [r7, #0]
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7ff ffaa 	bl	8010378 <FATFS_LinkDriverEx>
 8010424:	4603      	mov	r3, r0
}
 8010426:	4618      	mov	r0, r3
 8010428:	3708      	adds	r7, #8
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}

0801042e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801042e:	b580      	push	{r7, lr}
 8010430:	b086      	sub	sp, #24
 8010432:	af00      	add	r7, sp, #0
 8010434:	4603      	mov	r3, r0
 8010436:	6039      	str	r1, [r7, #0]
 8010438:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 801043a:	2300      	movs	r3, #0
 801043c:	60fb      	str	r3, [r7, #12]
 801043e:	2300      	movs	r3, #0
 8010440:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010442:	f107 030c 	add.w	r3, r7, #12
 8010446:	2101      	movs	r1, #1
 8010448:	4618      	mov	r0, r3
 801044a:	f000 f8e9 	bl	8010620 <osSemaphoreCreate>
 801044e:	4602      	mov	r2, r0
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	bf14      	ite	ne
 801045c:	2301      	movne	r3, #1
 801045e:	2300      	moveq	r3, #0
 8010460:	b2db      	uxtb	r3, r3
 8010462:	617b      	str	r3, [r7, #20]

    return ret;
 8010464:	697b      	ldr	r3, [r7, #20]
}
 8010466:	4618      	mov	r0, r3
 8010468:	3718      	adds	r7, #24
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801046e:	b580      	push	{r7, lr}
 8010470:	b082      	sub	sp, #8
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 f988 	bl	801078c <osSemaphoreDelete>
#endif
    return 1;
 801047c:	2301      	movs	r3, #1
}
 801047e:	4618      	mov	r0, r3
 8010480:	3708      	adds	r7, #8
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b084      	sub	sp, #16
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801048e:	2300      	movs	r3, #0
 8010490:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010492:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f000 f8f4 	bl	8010684 <osSemaphoreWait>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d101      	bne.n	80104a6 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80104a2:	2301      	movs	r3, #1
 80104a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80104a6:	68fb      	ldr	r3, [r7, #12]
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3710      	adds	r7, #16
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f000 f931 	bl	8010720 <osSemaphoreRelease>
#endif
}
 80104be:	bf00      	nop
 80104c0:	3708      	adds	r7, #8
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80104c6:	b480      	push	{r7}
 80104c8:	b085      	sub	sp, #20
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	4603      	mov	r3, r0
 80104ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80104d0:	2300      	movs	r3, #0
 80104d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80104d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104d8:	2b84      	cmp	r3, #132	@ 0x84
 80104da:	d005      	beq.n	80104e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80104dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	4413      	add	r3, r2
 80104e4:	3303      	adds	r3, #3
 80104e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80104e8:	68fb      	ldr	r3, [r7, #12]
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3714      	adds	r7, #20
 80104ee:	46bd      	mov	sp, r7
 80104f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80104f6:	b480      	push	{r7}
 80104f8:	b083      	sub	sp, #12
 80104fa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104fc:	f3ef 8305 	mrs	r3, IPSR
 8010500:	607b      	str	r3, [r7, #4]
  return(result);
 8010502:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010504:	2b00      	cmp	r3, #0
 8010506:	bf14      	ite	ne
 8010508:	2301      	movne	r3, #1
 801050a:	2300      	moveq	r3, #0
 801050c:	b2db      	uxtb	r3, r3
}
 801050e:	4618      	mov	r0, r3
 8010510:	370c      	adds	r7, #12
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr

0801051a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801051a:	b580      	push	{r7, lr}
 801051c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801051e:	f001 fe11 	bl	8012144 <vTaskStartScheduler>
  
  return osOK;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	bd80      	pop	{r7, pc}

08010528 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801052c:	f002 fa72 	bl	8012a14 <xTaskGetSchedulerState>
 8010530:	4603      	mov	r3, r0
 8010532:	2b01      	cmp	r3, #1
 8010534:	d101      	bne.n	801053a <osKernelRunning+0x12>
    return 0;
 8010536:	2300      	movs	r3, #0
 8010538:	e000      	b.n	801053c <osKernelRunning+0x14>
  else
    return 1;
 801053a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 801053c:	4618      	mov	r0, r3
 801053e:	bd80      	pop	{r7, pc}

08010540 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010544:	f7ff ffd7 	bl	80104f6 <inHandlerMode>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d003      	beq.n	8010556 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801054e:	f001 ff1d 	bl	801238c <xTaskGetTickCountFromISR>
 8010552:	4603      	mov	r3, r0
 8010554:	e002      	b.n	801055c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010556:	f001 ff09 	bl	801236c <xTaskGetTickCount>
 801055a:	4603      	mov	r3, r0
  }
}
 801055c:	4618      	mov	r0, r3
 801055e:	bd80      	pop	{r7, pc}

08010560 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010562:	b089      	sub	sp, #36	@ 0x24
 8010564:	af04      	add	r7, sp, #16
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	695b      	ldr	r3, [r3, #20]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d020      	beq.n	80105b4 <osThreadCreate+0x54>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	699b      	ldr	r3, [r3, #24]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d01c      	beq.n	80105b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	685c      	ldr	r4, [r3, #4]
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	691e      	ldr	r6, [r3, #16]
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801058c:	4618      	mov	r0, r3
 801058e:	f7ff ff9a 	bl	80104c6 <makeFreeRtosPriority>
 8010592:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	695b      	ldr	r3, [r3, #20]
 8010598:	687a      	ldr	r2, [r7, #4]
 801059a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801059c:	9202      	str	r2, [sp, #8]
 801059e:	9301      	str	r3, [sp, #4]
 80105a0:	9100      	str	r1, [sp, #0]
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	4632      	mov	r2, r6
 80105a6:	4629      	mov	r1, r5
 80105a8:	4620      	mov	r0, r4
 80105aa:	f001 fa2f 	bl	8011a0c <xTaskCreateStatic>
 80105ae:	4603      	mov	r3, r0
 80105b0:	60fb      	str	r3, [r7, #12]
 80105b2:	e01c      	b.n	80105ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	685c      	ldr	r4, [r3, #4]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80105c0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff ff7c 	bl	80104c6 <makeFreeRtosPriority>
 80105ce:	4602      	mov	r2, r0
 80105d0:	f107 030c 	add.w	r3, r7, #12
 80105d4:	9301      	str	r3, [sp, #4]
 80105d6:	9200      	str	r2, [sp, #0]
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	4632      	mov	r2, r6
 80105dc:	4629      	mov	r1, r5
 80105de:	4620      	mov	r0, r4
 80105e0:	f001 fa7a 	bl	8011ad8 <xTaskCreate>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d001      	beq.n	80105ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80105ea:	2300      	movs	r3, #0
 80105ec:	e000      	b.n	80105f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80105ee:	68fb      	ldr	r3, [r7, #12]
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3714      	adds	r7, #20
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080105f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b084      	sub	sp, #16
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d001      	beq.n	801060e <osDelay+0x16>
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	e000      	b.n	8010610 <osDelay+0x18>
 801060e:	2301      	movs	r3, #1
 8010610:	4618      	mov	r0, r3
 8010612:	f001 fc35 	bl	8011e80 <vTaskDelay>
  
  return osOK;
 8010616:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010618:	4618      	mov	r0, r3
 801061a:	3710      	adds	r7, #16
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010620:	b580      	push	{r7, lr}
 8010622:	b086      	sub	sp, #24
 8010624:	af02      	add	r7, sp, #8
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d00f      	beq.n	8010652 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	2b01      	cmp	r3, #1
 8010636:	d10a      	bne.n	801064e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	2203      	movs	r2, #3
 801063e:	9200      	str	r2, [sp, #0]
 8010640:	2200      	movs	r2, #0
 8010642:	2100      	movs	r1, #0
 8010644:	2001      	movs	r0, #1
 8010646:	f000 fab1 	bl	8010bac <xQueueGenericCreateStatic>
 801064a:	4603      	mov	r3, r0
 801064c:	e016      	b.n	801067c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801064e:	2300      	movs	r3, #0
 8010650:	e014      	b.n	801067c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d110      	bne.n	801067a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8010658:	2203      	movs	r2, #3
 801065a:	2100      	movs	r1, #0
 801065c:	2001      	movs	r0, #1
 801065e:	f000 fb2c 	bl	8010cba <xQueueGenericCreate>
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d005      	beq.n	8010676 <osSemaphoreCreate+0x56>
 801066a:	2300      	movs	r3, #0
 801066c:	2200      	movs	r2, #0
 801066e:	2100      	movs	r1, #0
 8010670:	68f8      	ldr	r0, [r7, #12]
 8010672:	f000 fb85 	bl	8010d80 <xQueueGenericSend>
      return sema;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	e000      	b.n	801067c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 801067a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 801067c:	4618      	mov	r0, r3
 801067e:	3710      	adds	r7, #16
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}

08010684 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b084      	sub	sp, #16
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801068e:	2300      	movs	r3, #0
 8010690:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d101      	bne.n	801069c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010698:	2380      	movs	r3, #128	@ 0x80
 801069a:	e03a      	b.n	8010712 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 801069c:	2300      	movs	r3, #0
 801069e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106a6:	d103      	bne.n	80106b0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80106a8:	f04f 33ff 	mov.w	r3, #4294967295
 80106ac:	60fb      	str	r3, [r7, #12]
 80106ae:	e009      	b.n	80106c4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d006      	beq.n	80106c4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d101      	bne.n	80106c4 <osSemaphoreWait+0x40>
      ticks = 1;
 80106c0:	2301      	movs	r3, #1
 80106c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80106c4:	f7ff ff17 	bl	80104f6 <inHandlerMode>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d017      	beq.n	80106fe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80106ce:	f107 0308 	add.w	r3, r7, #8
 80106d2:	461a      	mov	r2, r3
 80106d4:	2100      	movs	r1, #0
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 ff98 	bl	801160c <xQueueReceiveFromISR>
 80106dc:	4603      	mov	r3, r0
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d001      	beq.n	80106e6 <osSemaphoreWait+0x62>
      return osErrorOS;
 80106e2:	23ff      	movs	r3, #255	@ 0xff
 80106e4:	e015      	b.n	8010712 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d011      	beq.n	8010710 <osSemaphoreWait+0x8c>
 80106ec:	4b0b      	ldr	r3, [pc, #44]	@ (801071c <osSemaphoreWait+0x98>)
 80106ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106f2:	601a      	str	r2, [r3, #0]
 80106f4:	f3bf 8f4f 	dsb	sy
 80106f8:	f3bf 8f6f 	isb	sy
 80106fc:	e008      	b.n	8010710 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80106fe:	68f9      	ldr	r1, [r7, #12]
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 fe6b 	bl	80113dc <xQueueSemaphoreTake>
 8010706:	4603      	mov	r3, r0
 8010708:	2b01      	cmp	r3, #1
 801070a:	d001      	beq.n	8010710 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801070c:	23ff      	movs	r3, #255	@ 0xff
 801070e:	e000      	b.n	8010712 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010710:	2300      	movs	r3, #0
}
 8010712:	4618      	mov	r0, r3
 8010714:	3710      	adds	r7, #16
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	e000ed04 	.word	0xe000ed04

08010720 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b084      	sub	sp, #16
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010728:	2300      	movs	r3, #0
 801072a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801072c:	2300      	movs	r3, #0
 801072e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010730:	f7ff fee1 	bl	80104f6 <inHandlerMode>
 8010734:	4603      	mov	r3, r0
 8010736:	2b00      	cmp	r3, #0
 8010738:	d016      	beq.n	8010768 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801073a:	f107 0308 	add.w	r3, r7, #8
 801073e:	4619      	mov	r1, r3
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 fcca 	bl	80110da <xQueueGiveFromISR>
 8010746:	4603      	mov	r3, r0
 8010748:	2b01      	cmp	r3, #1
 801074a:	d001      	beq.n	8010750 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801074c:	23ff      	movs	r3, #255	@ 0xff
 801074e:	e017      	b.n	8010780 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d013      	beq.n	801077e <osSemaphoreRelease+0x5e>
 8010756:	4b0c      	ldr	r3, [pc, #48]	@ (8010788 <osSemaphoreRelease+0x68>)
 8010758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801075c:	601a      	str	r2, [r3, #0]
 801075e:	f3bf 8f4f 	dsb	sy
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	e00a      	b.n	801077e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010768:	2300      	movs	r3, #0
 801076a:	2200      	movs	r2, #0
 801076c:	2100      	movs	r1, #0
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f000 fb06 	bl	8010d80 <xQueueGenericSend>
 8010774:	4603      	mov	r3, r0
 8010776:	2b01      	cmp	r3, #1
 8010778:	d001      	beq.n	801077e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801077a:	23ff      	movs	r3, #255	@ 0xff
 801077c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801077e:	68fb      	ldr	r3, [r7, #12]
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	e000ed04 	.word	0xe000ed04

0801078c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010794:	f7ff feaf 	bl	80104f6 <inHandlerMode>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d001      	beq.n	80107a2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 801079e:	2382      	movs	r3, #130	@ 0x82
 80107a0:	e003      	b.n	80107aa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 ffba 	bl	801171c <vQueueDelete>

  return osOK; 
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}

080107b2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80107b2:	b590      	push	{r4, r7, lr}
 80107b4:	b085      	sub	sp, #20
 80107b6:	af02      	add	r7, sp, #8
 80107b8:	6078      	str	r0, [r7, #4]
 80107ba:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	689b      	ldr	r3, [r3, #8]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d011      	beq.n	80107e8 <osMessageCreate+0x36>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d00d      	beq.n	80107e8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6818      	ldr	r0, [r3, #0]
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6859      	ldr	r1, [r3, #4]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	689a      	ldr	r2, [r3, #8]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	2400      	movs	r4, #0
 80107de:	9400      	str	r4, [sp, #0]
 80107e0:	f000 f9e4 	bl	8010bac <xQueueGenericCreateStatic>
 80107e4:	4603      	mov	r3, r0
 80107e6:	e008      	b.n	80107fa <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6818      	ldr	r0, [r3, #0]
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	685b      	ldr	r3, [r3, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	4619      	mov	r1, r3
 80107f4:	f000 fa61 	bl	8010cba <xQueueGenericCreate>
 80107f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd90      	pop	{r4, r7, pc}
	...

08010804 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b086      	sub	sp, #24
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010810:	2300      	movs	r3, #0
 8010812:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d101      	bne.n	8010822 <osMessagePut+0x1e>
    ticks = 1;
 801081e:	2301      	movs	r3, #1
 8010820:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010822:	f7ff fe68 	bl	80104f6 <inHandlerMode>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d018      	beq.n	801085e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801082c:	f107 0210 	add.w	r2, r7, #16
 8010830:	f107 0108 	add.w	r1, r7, #8
 8010834:	2300      	movs	r3, #0
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f000 fbac 	bl	8010f94 <xQueueGenericSendFromISR>
 801083c:	4603      	mov	r3, r0
 801083e:	2b01      	cmp	r3, #1
 8010840:	d001      	beq.n	8010846 <osMessagePut+0x42>
      return osErrorOS;
 8010842:	23ff      	movs	r3, #255	@ 0xff
 8010844:	e018      	b.n	8010878 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d014      	beq.n	8010876 <osMessagePut+0x72>
 801084c:	4b0c      	ldr	r3, [pc, #48]	@ (8010880 <osMessagePut+0x7c>)
 801084e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010852:	601a      	str	r2, [r3, #0]
 8010854:	f3bf 8f4f 	dsb	sy
 8010858:	f3bf 8f6f 	isb	sy
 801085c:	e00b      	b.n	8010876 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801085e:	f107 0108 	add.w	r1, r7, #8
 8010862:	2300      	movs	r3, #0
 8010864:	697a      	ldr	r2, [r7, #20]
 8010866:	68f8      	ldr	r0, [r7, #12]
 8010868:	f000 fa8a 	bl	8010d80 <xQueueGenericSend>
 801086c:	4603      	mov	r3, r0
 801086e:	2b01      	cmp	r3, #1
 8010870:	d001      	beq.n	8010876 <osMessagePut+0x72>
      return osErrorOS;
 8010872:	23ff      	movs	r3, #255	@ 0xff
 8010874:	e000      	b.n	8010878 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	3718      	adds	r7, #24
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	e000ed04 	.word	0xe000ed04

08010884 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b08b      	sub	sp, #44	@ 0x2c
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010890:	68bb      	ldr	r3, [r7, #8]
 8010892:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010894:	2300      	movs	r3, #0
 8010896:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010898:	68bb      	ldr	r3, [r7, #8]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d10a      	bne.n	80108b4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801089e:	2380      	movs	r3, #128	@ 0x80
 80108a0:	617b      	str	r3, [r7, #20]
    return event;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	461c      	mov	r4, r3
 80108a6:	f107 0314 	add.w	r3, r7, #20
 80108aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80108ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80108b2:	e054      	b.n	801095e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80108b4:	2300      	movs	r3, #0
 80108b6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80108b8:	2300      	movs	r3, #0
 80108ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c2:	d103      	bne.n	80108cc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80108c4:	f04f 33ff 	mov.w	r3, #4294967295
 80108c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80108ca:	e009      	b.n	80108e0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d006      	beq.n	80108e0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80108d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d101      	bne.n	80108e0 <osMessageGet+0x5c>
      ticks = 1;
 80108dc:	2301      	movs	r3, #1
 80108de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80108e0:	f7ff fe09 	bl	80104f6 <inHandlerMode>
 80108e4:	4603      	mov	r3, r0
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d01c      	beq.n	8010924 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80108ea:	f107 0220 	add.w	r2, r7, #32
 80108ee:	f107 0314 	add.w	r3, r7, #20
 80108f2:	3304      	adds	r3, #4
 80108f4:	4619      	mov	r1, r3
 80108f6:	68b8      	ldr	r0, [r7, #8]
 80108f8:	f000 fe88 	bl	801160c <xQueueReceiveFromISR>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d102      	bne.n	8010908 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010902:	2310      	movs	r3, #16
 8010904:	617b      	str	r3, [r7, #20]
 8010906:	e001      	b.n	801090c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010908:	2300      	movs	r3, #0
 801090a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801090c:	6a3b      	ldr	r3, [r7, #32]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d01d      	beq.n	801094e <osMessageGet+0xca>
 8010912:	4b15      	ldr	r3, [pc, #84]	@ (8010968 <osMessageGet+0xe4>)
 8010914:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010918:	601a      	str	r2, [r3, #0]
 801091a:	f3bf 8f4f 	dsb	sy
 801091e:	f3bf 8f6f 	isb	sy
 8010922:	e014      	b.n	801094e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010924:	f107 0314 	add.w	r3, r7, #20
 8010928:	3304      	adds	r3, #4
 801092a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801092c:	4619      	mov	r1, r3
 801092e:	68b8      	ldr	r0, [r7, #8]
 8010930:	f000 fc6c 	bl	801120c <xQueueReceive>
 8010934:	4603      	mov	r3, r0
 8010936:	2b01      	cmp	r3, #1
 8010938:	d102      	bne.n	8010940 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801093a:	2310      	movs	r3, #16
 801093c:	617b      	str	r3, [r7, #20]
 801093e:	e006      	b.n	801094e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010942:	2b00      	cmp	r3, #0
 8010944:	d101      	bne.n	801094a <osMessageGet+0xc6>
 8010946:	2300      	movs	r3, #0
 8010948:	e000      	b.n	801094c <osMessageGet+0xc8>
 801094a:	2340      	movs	r3, #64	@ 0x40
 801094c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	461c      	mov	r4, r3
 8010952:	f107 0314 	add.w	r3, r7, #20
 8010956:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801095a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	372c      	adds	r7, #44	@ 0x2c
 8010962:	46bd      	mov	sp, r7
 8010964:	bd90      	pop	{r4, r7, pc}
 8010966:	bf00      	nop
 8010968:	e000ed04 	.word	0xe000ed04

0801096c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f103 0208 	add.w	r2, r3, #8
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f04f 32ff 	mov.w	r2, #4294967295
 8010984:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f103 0208 	add.w	r2, r3, #8
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f103 0208 	add.w	r2, r3, #8
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2200      	movs	r2, #0
 801099e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80109a0:	bf00      	nop
 80109a2:	370c      	adds	r7, #12
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr

080109ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80109ac:	b480      	push	{r7}
 80109ae:	b083      	sub	sp, #12
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80109ba:	bf00      	nop
 80109bc:	370c      	adds	r7, #12
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr

080109c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80109c6:	b480      	push	{r7}
 80109c8:	b085      	sub	sp, #20
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
 80109ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	685b      	ldr	r3, [r3, #4]
 80109d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	68fa      	ldr	r2, [r7, #12]
 80109da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	689a      	ldr	r2, [r3, #8]
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	689b      	ldr	r3, [r3, #8]
 80109e8:	683a      	ldr	r2, [r7, #0]
 80109ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	683a      	ldr	r2, [r7, #0]
 80109f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	1c5a      	adds	r2, r3, #1
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	601a      	str	r2, [r3, #0]
}
 8010a02:	bf00      	nop
 8010a04:	3714      	adds	r7, #20
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010a0e:	b480      	push	{r7}
 8010a10:	b085      	sub	sp, #20
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
 8010a16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a24:	d103      	bne.n	8010a2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	60fb      	str	r3, [r7, #12]
 8010a2c:	e00c      	b.n	8010a48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	3308      	adds	r3, #8
 8010a32:	60fb      	str	r3, [r7, #12]
 8010a34:	e002      	b.n	8010a3c <vListInsert+0x2e>
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	60fb      	str	r3, [r7, #12]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	68ba      	ldr	r2, [r7, #8]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d2f6      	bcs.n	8010a36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	685a      	ldr	r2, [r3, #4]
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	683a      	ldr	r2, [r7, #0]
 8010a56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	683a      	ldr	r2, [r7, #0]
 8010a62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	1c5a      	adds	r2, r3, #1
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	601a      	str	r2, [r3, #0]
}
 8010a74:	bf00      	nop
 8010a76:	3714      	adds	r7, #20
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr

08010a80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010a80:	b480      	push	{r7}
 8010a82:	b085      	sub	sp, #20
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	691b      	ldr	r3, [r3, #16]
 8010a8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	6892      	ldr	r2, [r2, #8]
 8010a96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	689b      	ldr	r3, [r3, #8]
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	6852      	ldr	r2, [r2, #4]
 8010aa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	685b      	ldr	r3, [r3, #4]
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d103      	bne.n	8010ab4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	689a      	ldr	r2, [r3, #8]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	1e5a      	subs	r2, r3, #1
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	681b      	ldr	r3, [r3, #0]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3714      	adds	r7, #20
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d10d      	bne.n	8010b04 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aec:	b672      	cpsid	i
 8010aee:	f383 8811 	msr	BASEPRI, r3
 8010af2:	f3bf 8f6f 	isb	sy
 8010af6:	f3bf 8f4f 	dsb	sy
 8010afa:	b662      	cpsie	i
 8010afc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010afe:	bf00      	nop
 8010b00:	bf00      	nop
 8010b02:	e7fd      	b.n	8010b00 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010b04:	f002 fada 	bl	80130bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b10:	68f9      	ldr	r1, [r7, #12]
 8010b12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010b14:	fb01 f303 	mul.w	r3, r1, r3
 8010b18:	441a      	add	r2, r3
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	2200      	movs	r2, #0
 8010b22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b34:	3b01      	subs	r3, #1
 8010b36:	68f9      	ldr	r1, [r7, #12]
 8010b38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010b3a:	fb01 f303 	mul.w	r3, r1, r3
 8010b3e:	441a      	add	r2, r3
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	22ff      	movs	r2, #255	@ 0xff
 8010b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	22ff      	movs	r2, #255	@ 0xff
 8010b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d114      	bne.n	8010b84 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d01a      	beq.n	8010b98 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	3310      	adds	r3, #16
 8010b66:	4618      	mov	r0, r3
 8010b68:	f001 fd8a 	bl	8012680 <xTaskRemoveFromEventList>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d012      	beq.n	8010b98 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010b72:	4b0d      	ldr	r3, [pc, #52]	@ (8010ba8 <xQueueGenericReset+0xd4>)
 8010b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b78:	601a      	str	r2, [r3, #0]
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	f3bf 8f6f 	isb	sy
 8010b82:	e009      	b.n	8010b98 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	3310      	adds	r3, #16
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7ff feef 	bl	801096c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	3324      	adds	r3, #36	@ 0x24
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7ff feea 	bl	801096c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010b98:	f002 fac6 	bl	8013128 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010b9c:	2301      	movs	r3, #1
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	e000ed04 	.word	0xe000ed04

08010bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b08e      	sub	sp, #56	@ 0x38
 8010bb0:	af02      	add	r7, sp, #8
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
 8010bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d10d      	bne.n	8010bdc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8010bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc4:	b672      	cpsid	i
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	b662      	cpsie	i
 8010bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010bd6:	bf00      	nop
 8010bd8:	bf00      	nop
 8010bda:	e7fd      	b.n	8010bd8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d10d      	bne.n	8010bfe <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8010be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010be6:	b672      	cpsid	i
 8010be8:	f383 8811 	msr	BASEPRI, r3
 8010bec:	f3bf 8f6f 	isb	sy
 8010bf0:	f3bf 8f4f 	dsb	sy
 8010bf4:	b662      	cpsie	i
 8010bf6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010bf8:	bf00      	nop
 8010bfa:	bf00      	nop
 8010bfc:	e7fd      	b.n	8010bfa <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d002      	beq.n	8010c0a <xQueueGenericCreateStatic+0x5e>
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d001      	beq.n	8010c0e <xQueueGenericCreateStatic+0x62>
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e000      	b.n	8010c10 <xQueueGenericCreateStatic+0x64>
 8010c0e:	2300      	movs	r3, #0
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d10d      	bne.n	8010c30 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8010c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c18:	b672      	cpsid	i
 8010c1a:	f383 8811 	msr	BASEPRI, r3
 8010c1e:	f3bf 8f6f 	isb	sy
 8010c22:	f3bf 8f4f 	dsb	sy
 8010c26:	b662      	cpsie	i
 8010c28:	623b      	str	r3, [r7, #32]
}
 8010c2a:	bf00      	nop
 8010c2c:	bf00      	nop
 8010c2e:	e7fd      	b.n	8010c2c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d102      	bne.n	8010c3c <xQueueGenericCreateStatic+0x90>
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d101      	bne.n	8010c40 <xQueueGenericCreateStatic+0x94>
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e000      	b.n	8010c42 <xQueueGenericCreateStatic+0x96>
 8010c40:	2300      	movs	r3, #0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d10d      	bne.n	8010c62 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8010c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c4a:	b672      	cpsid	i
 8010c4c:	f383 8811 	msr	BASEPRI, r3
 8010c50:	f3bf 8f6f 	isb	sy
 8010c54:	f3bf 8f4f 	dsb	sy
 8010c58:	b662      	cpsie	i
 8010c5a:	61fb      	str	r3, [r7, #28]
}
 8010c5c:	bf00      	nop
 8010c5e:	bf00      	nop
 8010c60:	e7fd      	b.n	8010c5e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010c62:	2348      	movs	r3, #72	@ 0x48
 8010c64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	2b48      	cmp	r3, #72	@ 0x48
 8010c6a:	d00d      	beq.n	8010c88 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8010c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c70:	b672      	cpsid	i
 8010c72:	f383 8811 	msr	BASEPRI, r3
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	b662      	cpsie	i
 8010c80:	61bb      	str	r3, [r7, #24]
}
 8010c82:	bf00      	nop
 8010c84:	bf00      	nop
 8010c86:	e7fd      	b.n	8010c84 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010c88:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00d      	beq.n	8010cb0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c96:	2201      	movs	r2, #1
 8010c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010c9c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca2:	9300      	str	r3, [sp, #0]
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	687a      	ldr	r2, [r7, #4]
 8010ca8:	68b9      	ldr	r1, [r7, #8]
 8010caa:	68f8      	ldr	r0, [r7, #12]
 8010cac:	f000 f848 	bl	8010d40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3730      	adds	r7, #48	@ 0x30
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b08a      	sub	sp, #40	@ 0x28
 8010cbe:	af02      	add	r7, sp, #8
 8010cc0:	60f8      	str	r0, [r7, #12]
 8010cc2:	60b9      	str	r1, [r7, #8]
 8010cc4:	4613      	mov	r3, r2
 8010cc6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d10d      	bne.n	8010cea <xQueueGenericCreate+0x30>
	__asm volatile
 8010cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cd2:	b672      	cpsid	i
 8010cd4:	f383 8811 	msr	BASEPRI, r3
 8010cd8:	f3bf 8f6f 	isb	sy
 8010cdc:	f3bf 8f4f 	dsb	sy
 8010ce0:	b662      	cpsie	i
 8010ce2:	613b      	str	r3, [r7, #16]
}
 8010ce4:	bf00      	nop
 8010ce6:	bf00      	nop
 8010ce8:	e7fd      	b.n	8010ce6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d102      	bne.n	8010cf6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	61fb      	str	r3, [r7, #28]
 8010cf4:	e004      	b.n	8010d00 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	68ba      	ldr	r2, [r7, #8]
 8010cfa:	fb02 f303 	mul.w	r3, r2, r3
 8010cfe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	3348      	adds	r3, #72	@ 0x48
 8010d04:	4618      	mov	r0, r3
 8010d06:	f002 fb07 	bl	8013318 <pvPortMalloc>
 8010d0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010d0c:	69bb      	ldr	r3, [r7, #24]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d011      	beq.n	8010d36 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010d12:	69bb      	ldr	r3, [r7, #24]
 8010d14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	3348      	adds	r3, #72	@ 0x48
 8010d1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	2200      	movs	r2, #0
 8010d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010d24:	79fa      	ldrb	r2, [r7, #7]
 8010d26:	69bb      	ldr	r3, [r7, #24]
 8010d28:	9300      	str	r3, [sp, #0]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	697a      	ldr	r2, [r7, #20]
 8010d2e:	68b9      	ldr	r1, [r7, #8]
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f000 f805 	bl	8010d40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010d36:	69bb      	ldr	r3, [r7, #24]
	}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3720      	adds	r7, #32
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	60b9      	str	r1, [r7, #8]
 8010d4a:	607a      	str	r2, [r7, #4]
 8010d4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d103      	bne.n	8010d5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010d54:	69bb      	ldr	r3, [r7, #24]
 8010d56:	69ba      	ldr	r2, [r7, #24]
 8010d58:	601a      	str	r2, [r3, #0]
 8010d5a:	e002      	b.n	8010d62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	687a      	ldr	r2, [r7, #4]
 8010d60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	68ba      	ldr	r2, [r7, #8]
 8010d6c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010d6e:	2101      	movs	r1, #1
 8010d70:	69b8      	ldr	r0, [r7, #24]
 8010d72:	f7ff feaf 	bl	8010ad4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010d76:	bf00      	nop
 8010d78:	3710      	adds	r7, #16
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
	...

08010d80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b08e      	sub	sp, #56	@ 0x38
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d10d      	bne.n	8010db8 <xQueueGenericSend+0x38>
	__asm volatile
 8010d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da0:	b672      	cpsid	i
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	b662      	cpsie	i
 8010db0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010db2:	bf00      	nop
 8010db4:	bf00      	nop
 8010db6:	e7fd      	b.n	8010db4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d103      	bne.n	8010dc6 <xQueueGenericSend+0x46>
 8010dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d101      	bne.n	8010dca <xQueueGenericSend+0x4a>
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	e000      	b.n	8010dcc <xQueueGenericSend+0x4c>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d10d      	bne.n	8010dec <xQueueGenericSend+0x6c>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd4:	b672      	cpsid	i
 8010dd6:	f383 8811 	msr	BASEPRI, r3
 8010dda:	f3bf 8f6f 	isb	sy
 8010dde:	f3bf 8f4f 	dsb	sy
 8010de2:	b662      	cpsie	i
 8010de4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010de6:	bf00      	nop
 8010de8:	bf00      	nop
 8010dea:	e7fd      	b.n	8010de8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	2b02      	cmp	r3, #2
 8010df0:	d103      	bne.n	8010dfa <xQueueGenericSend+0x7a>
 8010df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010df6:	2b01      	cmp	r3, #1
 8010df8:	d101      	bne.n	8010dfe <xQueueGenericSend+0x7e>
 8010dfa:	2301      	movs	r3, #1
 8010dfc:	e000      	b.n	8010e00 <xQueueGenericSend+0x80>
 8010dfe:	2300      	movs	r3, #0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d10d      	bne.n	8010e20 <xQueueGenericSend+0xa0>
	__asm volatile
 8010e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e08:	b672      	cpsid	i
 8010e0a:	f383 8811 	msr	BASEPRI, r3
 8010e0e:	f3bf 8f6f 	isb	sy
 8010e12:	f3bf 8f4f 	dsb	sy
 8010e16:	b662      	cpsie	i
 8010e18:	623b      	str	r3, [r7, #32]
}
 8010e1a:	bf00      	nop
 8010e1c:	bf00      	nop
 8010e1e:	e7fd      	b.n	8010e1c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010e20:	f001 fdf8 	bl	8012a14 <xTaskGetSchedulerState>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d102      	bne.n	8010e30 <xQueueGenericSend+0xb0>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d101      	bne.n	8010e34 <xQueueGenericSend+0xb4>
 8010e30:	2301      	movs	r3, #1
 8010e32:	e000      	b.n	8010e36 <xQueueGenericSend+0xb6>
 8010e34:	2300      	movs	r3, #0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d10d      	bne.n	8010e56 <xQueueGenericSend+0xd6>
	__asm volatile
 8010e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e3e:	b672      	cpsid	i
 8010e40:	f383 8811 	msr	BASEPRI, r3
 8010e44:	f3bf 8f6f 	isb	sy
 8010e48:	f3bf 8f4f 	dsb	sy
 8010e4c:	b662      	cpsie	i
 8010e4e:	61fb      	str	r3, [r7, #28]
}
 8010e50:	bf00      	nop
 8010e52:	bf00      	nop
 8010e54:	e7fd      	b.n	8010e52 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e56:	f002 f931 	bl	80130bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d302      	bcc.n	8010e6c <xQueueGenericSend+0xec>
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	2b02      	cmp	r3, #2
 8010e6a:	d129      	bne.n	8010ec0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010e6c:	683a      	ldr	r2, [r7, #0]
 8010e6e:	68b9      	ldr	r1, [r7, #8]
 8010e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e72:	f000 fc91 	bl	8011798 <prvCopyDataToQueue>
 8010e76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d010      	beq.n	8010ea2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e82:	3324      	adds	r3, #36	@ 0x24
 8010e84:	4618      	mov	r0, r3
 8010e86:	f001 fbfb 	bl	8012680 <xTaskRemoveFromEventList>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d013      	beq.n	8010eb8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010e90:	4b3f      	ldr	r3, [pc, #252]	@ (8010f90 <xQueueGenericSend+0x210>)
 8010e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e96:	601a      	str	r2, [r3, #0]
 8010e98:	f3bf 8f4f 	dsb	sy
 8010e9c:	f3bf 8f6f 	isb	sy
 8010ea0:	e00a      	b.n	8010eb8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d007      	beq.n	8010eb8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ea8:	4b39      	ldr	r3, [pc, #228]	@ (8010f90 <xQueueGenericSend+0x210>)
 8010eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010eae:	601a      	str	r2, [r3, #0]
 8010eb0:	f3bf 8f4f 	dsb	sy
 8010eb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010eb8:	f002 f936 	bl	8013128 <vPortExitCritical>
				return pdPASS;
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	e063      	b.n	8010f88 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d103      	bne.n	8010ece <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010ec6:	f002 f92f 	bl	8013128 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010eca:	2300      	movs	r3, #0
 8010ecc:	e05c      	b.n	8010f88 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d106      	bne.n	8010ee2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ed4:	f107 0314 	add.w	r3, r7, #20
 8010ed8:	4618      	mov	r0, r3
 8010eda:	f001 fc37 	bl	801274c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ee2:	f002 f921 	bl	8013128 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010ee6:	f001 f993 	bl	8012210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010eea:	f002 f8e7 	bl	80130bc <vPortEnterCritical>
 8010eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010ef4:	b25b      	sxtb	r3, r3
 8010ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efa:	d103      	bne.n	8010f04 <xQueueGenericSend+0x184>
 8010efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010efe:	2200      	movs	r2, #0
 8010f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010f0a:	b25b      	sxtb	r3, r3
 8010f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f10:	d103      	bne.n	8010f1a <xQueueGenericSend+0x19a>
 8010f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f14:	2200      	movs	r2, #0
 8010f16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010f1a:	f002 f905 	bl	8013128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010f1e:	1d3a      	adds	r2, r7, #4
 8010f20:	f107 0314 	add.w	r3, r7, #20
 8010f24:	4611      	mov	r1, r2
 8010f26:	4618      	mov	r0, r3
 8010f28:	f001 fc26 	bl	8012778 <xTaskCheckForTimeOut>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d124      	bne.n	8010f7c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010f32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f34:	f000 fd28 	bl	8011988 <prvIsQueueFull>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d018      	beq.n	8010f70 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f40:	3310      	adds	r3, #16
 8010f42:	687a      	ldr	r2, [r7, #4]
 8010f44:	4611      	mov	r1, r2
 8010f46:	4618      	mov	r0, r3
 8010f48:	f001 fb72 	bl	8012630 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010f4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f4e:	f000 fcb3 	bl	80118b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010f52:	f001 f96b 	bl	801222c <xTaskResumeAll>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f47f af7c 	bne.w	8010e56 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8010f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8010f90 <xQueueGenericSend+0x210>)
 8010f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f64:	601a      	str	r2, [r3, #0]
 8010f66:	f3bf 8f4f 	dsb	sy
 8010f6a:	f3bf 8f6f 	isb	sy
 8010f6e:	e772      	b.n	8010e56 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010f70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f72:	f000 fca1 	bl	80118b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f76:	f001 f959 	bl	801222c <xTaskResumeAll>
 8010f7a:	e76c      	b.n	8010e56 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f7e:	f000 fc9b 	bl	80118b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f82:	f001 f953 	bl	801222c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010f86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3738      	adds	r7, #56	@ 0x38
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	e000ed04 	.word	0xe000ed04

08010f94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b08e      	sub	sp, #56	@ 0x38
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
 8010fa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d10d      	bne.n	8010fc8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8010fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fb0:	b672      	cpsid	i
 8010fb2:	f383 8811 	msr	BASEPRI, r3
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	f3bf 8f4f 	dsb	sy
 8010fbe:	b662      	cpsie	i
 8010fc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010fc2:	bf00      	nop
 8010fc4:	bf00      	nop
 8010fc6:	e7fd      	b.n	8010fc4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d103      	bne.n	8010fd6 <xQueueGenericSendFromISR+0x42>
 8010fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d101      	bne.n	8010fda <xQueueGenericSendFromISR+0x46>
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	e000      	b.n	8010fdc <xQueueGenericSendFromISR+0x48>
 8010fda:	2300      	movs	r3, #0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d10d      	bne.n	8010ffc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8010fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fe4:	b672      	cpsid	i
 8010fe6:	f383 8811 	msr	BASEPRI, r3
 8010fea:	f3bf 8f6f 	isb	sy
 8010fee:	f3bf 8f4f 	dsb	sy
 8010ff2:	b662      	cpsie	i
 8010ff4:	623b      	str	r3, [r7, #32]
}
 8010ff6:	bf00      	nop
 8010ff8:	bf00      	nop
 8010ffa:	e7fd      	b.n	8010ff8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	2b02      	cmp	r3, #2
 8011000:	d103      	bne.n	801100a <xQueueGenericSendFromISR+0x76>
 8011002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011006:	2b01      	cmp	r3, #1
 8011008:	d101      	bne.n	801100e <xQueueGenericSendFromISR+0x7a>
 801100a:	2301      	movs	r3, #1
 801100c:	e000      	b.n	8011010 <xQueueGenericSendFromISR+0x7c>
 801100e:	2300      	movs	r3, #0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d10d      	bne.n	8011030 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8011014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011018:	b672      	cpsid	i
 801101a:	f383 8811 	msr	BASEPRI, r3
 801101e:	f3bf 8f6f 	isb	sy
 8011022:	f3bf 8f4f 	dsb	sy
 8011026:	b662      	cpsie	i
 8011028:	61fb      	str	r3, [r7, #28]
}
 801102a:	bf00      	nop
 801102c:	bf00      	nop
 801102e:	e7fd      	b.n	801102c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011030:	f002 f92c 	bl	801328c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011034:	f3ef 8211 	mrs	r2, BASEPRI
 8011038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801103c:	b672      	cpsid	i
 801103e:	f383 8811 	msr	BASEPRI, r3
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	f3bf 8f4f 	dsb	sy
 801104a:	b662      	cpsie	i
 801104c:	61ba      	str	r2, [r7, #24]
 801104e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011050:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011052:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801105a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801105c:	429a      	cmp	r2, r3
 801105e:	d302      	bcc.n	8011066 <xQueueGenericSendFromISR+0xd2>
 8011060:	683b      	ldr	r3, [r7, #0]
 8011062:	2b02      	cmp	r3, #2
 8011064:	d12c      	bne.n	80110c0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011068:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801106c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011070:	683a      	ldr	r2, [r7, #0]
 8011072:	68b9      	ldr	r1, [r7, #8]
 8011074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011076:	f000 fb8f 	bl	8011798 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801107a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011082:	d112      	bne.n	80110aa <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011088:	2b00      	cmp	r3, #0
 801108a:	d016      	beq.n	80110ba <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801108c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801108e:	3324      	adds	r3, #36	@ 0x24
 8011090:	4618      	mov	r0, r3
 8011092:	f001 faf5 	bl	8012680 <xTaskRemoveFromEventList>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d00e      	beq.n	80110ba <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00b      	beq.n	80110ba <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2201      	movs	r2, #1
 80110a6:	601a      	str	r2, [r3, #0]
 80110a8:	e007      	b.n	80110ba <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80110aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80110ae:	3301      	adds	r3, #1
 80110b0:	b2db      	uxtb	r3, r3
 80110b2:	b25a      	sxtb	r2, r3
 80110b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80110ba:	2301      	movs	r3, #1
 80110bc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80110be:	e001      	b.n	80110c4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80110c0:	2300      	movs	r3, #0
 80110c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80110c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110c6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80110ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80110d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3738      	adds	r7, #56	@ 0x38
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b08e      	sub	sp, #56	@ 0x38
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
 80110e2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80110e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d10d      	bne.n	801110a <xQueueGiveFromISR+0x30>
	__asm volatile
 80110ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110f2:	b672      	cpsid	i
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	b662      	cpsie	i
 8011102:	623b      	str	r3, [r7, #32]
}
 8011104:	bf00      	nop
 8011106:	bf00      	nop
 8011108:	e7fd      	b.n	8011106 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801110a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00d      	beq.n	801112e <xQueueGiveFromISR+0x54>
	__asm volatile
 8011112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011116:	b672      	cpsid	i
 8011118:	f383 8811 	msr	BASEPRI, r3
 801111c:	f3bf 8f6f 	isb	sy
 8011120:	f3bf 8f4f 	dsb	sy
 8011124:	b662      	cpsie	i
 8011126:	61fb      	str	r3, [r7, #28]
}
 8011128:	bf00      	nop
 801112a:	bf00      	nop
 801112c:	e7fd      	b.n	801112a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801112e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d103      	bne.n	801113e <xQueueGiveFromISR+0x64>
 8011136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011138:	689b      	ldr	r3, [r3, #8]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d101      	bne.n	8011142 <xQueueGiveFromISR+0x68>
 801113e:	2301      	movs	r3, #1
 8011140:	e000      	b.n	8011144 <xQueueGiveFromISR+0x6a>
 8011142:	2300      	movs	r3, #0
 8011144:	2b00      	cmp	r3, #0
 8011146:	d10d      	bne.n	8011164 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8011148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801114c:	b672      	cpsid	i
 801114e:	f383 8811 	msr	BASEPRI, r3
 8011152:	f3bf 8f6f 	isb	sy
 8011156:	f3bf 8f4f 	dsb	sy
 801115a:	b662      	cpsie	i
 801115c:	61bb      	str	r3, [r7, #24]
}
 801115e:	bf00      	nop
 8011160:	bf00      	nop
 8011162:	e7fd      	b.n	8011160 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011164:	f002 f892 	bl	801328c <vPortValidateInterruptPriority>
	__asm volatile
 8011168:	f3ef 8211 	mrs	r2, BASEPRI
 801116c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011170:	b672      	cpsid	i
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	b662      	cpsie	i
 8011180:	617a      	str	r2, [r7, #20]
 8011182:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011184:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011186:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801118c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801118e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011194:	429a      	cmp	r2, r3
 8011196:	d22b      	bcs.n	80111f0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801119a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801119e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80111a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111a4:	1c5a      	adds	r2, r3, #1
 80111a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80111aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80111ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b2:	d112      	bne.n	80111da <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d016      	beq.n	80111ea <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111be:	3324      	adds	r3, #36	@ 0x24
 80111c0:	4618      	mov	r0, r3
 80111c2:	f001 fa5d 	bl	8012680 <xTaskRemoveFromEventList>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00e      	beq.n	80111ea <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d00b      	beq.n	80111ea <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	2201      	movs	r2, #1
 80111d6:	601a      	str	r2, [r3, #0]
 80111d8:	e007      	b.n	80111ea <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80111da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111de:	3301      	adds	r3, #1
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	b25a      	sxtb	r2, r3
 80111e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80111ea:	2301      	movs	r3, #1
 80111ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80111ee:	e001      	b.n	80111f4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80111f0:	2300      	movs	r3, #0
 80111f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80111f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111f6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f383 8811 	msr	BASEPRI, r3
}
 80111fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011202:	4618      	mov	r0, r3
 8011204:	3738      	adds	r7, #56	@ 0x38
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
	...

0801120c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b08c      	sub	sp, #48	@ 0x30
 8011210:	af00      	add	r7, sp, #0
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	60b9      	str	r1, [r7, #8]
 8011216:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011218:	2300      	movs	r3, #0
 801121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011222:	2b00      	cmp	r3, #0
 8011224:	d10d      	bne.n	8011242 <xQueueReceive+0x36>
	__asm volatile
 8011226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801122a:	b672      	cpsid	i
 801122c:	f383 8811 	msr	BASEPRI, r3
 8011230:	f3bf 8f6f 	isb	sy
 8011234:	f3bf 8f4f 	dsb	sy
 8011238:	b662      	cpsie	i
 801123a:	623b      	str	r3, [r7, #32]
}
 801123c:	bf00      	nop
 801123e:	bf00      	nop
 8011240:	e7fd      	b.n	801123e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011242:	68bb      	ldr	r3, [r7, #8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d103      	bne.n	8011250 <xQueueReceive+0x44>
 8011248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801124c:	2b00      	cmp	r3, #0
 801124e:	d101      	bne.n	8011254 <xQueueReceive+0x48>
 8011250:	2301      	movs	r3, #1
 8011252:	e000      	b.n	8011256 <xQueueReceive+0x4a>
 8011254:	2300      	movs	r3, #0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d10d      	bne.n	8011276 <xQueueReceive+0x6a>
	__asm volatile
 801125a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801125e:	b672      	cpsid	i
 8011260:	f383 8811 	msr	BASEPRI, r3
 8011264:	f3bf 8f6f 	isb	sy
 8011268:	f3bf 8f4f 	dsb	sy
 801126c:	b662      	cpsie	i
 801126e:	61fb      	str	r3, [r7, #28]
}
 8011270:	bf00      	nop
 8011272:	bf00      	nop
 8011274:	e7fd      	b.n	8011272 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011276:	f001 fbcd 	bl	8012a14 <xTaskGetSchedulerState>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d102      	bne.n	8011286 <xQueueReceive+0x7a>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d101      	bne.n	801128a <xQueueReceive+0x7e>
 8011286:	2301      	movs	r3, #1
 8011288:	e000      	b.n	801128c <xQueueReceive+0x80>
 801128a:	2300      	movs	r3, #0
 801128c:	2b00      	cmp	r3, #0
 801128e:	d10d      	bne.n	80112ac <xQueueReceive+0xa0>
	__asm volatile
 8011290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011294:	b672      	cpsid	i
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	b662      	cpsie	i
 80112a4:	61bb      	str	r3, [r7, #24]
}
 80112a6:	bf00      	nop
 80112a8:	bf00      	nop
 80112aa:	e7fd      	b.n	80112a8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80112ac:	f001 ff06 	bl	80130bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d01f      	beq.n	80112fc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80112bc:	68b9      	ldr	r1, [r7, #8]
 80112be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112c0:	f000 fad4 	bl	801186c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80112c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112c6:	1e5a      	subs	r2, r3, #1
 80112c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80112cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112ce:	691b      	ldr	r3, [r3, #16]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d00f      	beq.n	80112f4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80112d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112d6:	3310      	adds	r3, #16
 80112d8:	4618      	mov	r0, r3
 80112da:	f001 f9d1 	bl	8012680 <xTaskRemoveFromEventList>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d007      	beq.n	80112f4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80112e4:	4b3c      	ldr	r3, [pc, #240]	@ (80113d8 <xQueueReceive+0x1cc>)
 80112e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112ea:	601a      	str	r2, [r3, #0]
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80112f4:	f001 ff18 	bl	8013128 <vPortExitCritical>
				return pdPASS;
 80112f8:	2301      	movs	r3, #1
 80112fa:	e069      	b.n	80113d0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d103      	bne.n	801130a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011302:	f001 ff11 	bl	8013128 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011306:	2300      	movs	r3, #0
 8011308:	e062      	b.n	80113d0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801130a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801130c:	2b00      	cmp	r3, #0
 801130e:	d106      	bne.n	801131e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011310:	f107 0310 	add.w	r3, r7, #16
 8011314:	4618      	mov	r0, r3
 8011316:	f001 fa19 	bl	801274c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801131a:	2301      	movs	r3, #1
 801131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801131e:	f001 ff03 	bl	8013128 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011322:	f000 ff75 	bl	8012210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011326:	f001 fec9 	bl	80130bc <vPortEnterCritical>
 801132a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801132c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011330:	b25b      	sxtb	r3, r3
 8011332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011336:	d103      	bne.n	8011340 <xQueueReceive+0x134>
 8011338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801133a:	2200      	movs	r2, #0
 801133c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011342:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011346:	b25b      	sxtb	r3, r3
 8011348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801134c:	d103      	bne.n	8011356 <xQueueReceive+0x14a>
 801134e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011350:	2200      	movs	r2, #0
 8011352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011356:	f001 fee7 	bl	8013128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801135a:	1d3a      	adds	r2, r7, #4
 801135c:	f107 0310 	add.w	r3, r7, #16
 8011360:	4611      	mov	r1, r2
 8011362:	4618      	mov	r0, r3
 8011364:	f001 fa08 	bl	8012778 <xTaskCheckForTimeOut>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d123      	bne.n	80113b6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801136e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011370:	f000 faf4 	bl	801195c <prvIsQueueEmpty>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d017      	beq.n	80113aa <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801137a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801137c:	3324      	adds	r3, #36	@ 0x24
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	4611      	mov	r1, r2
 8011382:	4618      	mov	r0, r3
 8011384:	f001 f954 	bl	8012630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801138a:	f000 fa95 	bl	80118b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801138e:	f000 ff4d 	bl	801222c <xTaskResumeAll>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d189      	bne.n	80112ac <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011398:	4b0f      	ldr	r3, [pc, #60]	@ (80113d8 <xQueueReceive+0x1cc>)
 801139a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801139e:	601a      	str	r2, [r3, #0]
 80113a0:	f3bf 8f4f 	dsb	sy
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	e780      	b.n	80112ac <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80113aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80113ac:	f000 fa84 	bl	80118b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80113b0:	f000 ff3c 	bl	801222c <xTaskResumeAll>
 80113b4:	e77a      	b.n	80112ac <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80113b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80113b8:	f000 fa7e 	bl	80118b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80113bc:	f000 ff36 	bl	801222c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80113c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80113c2:	f000 facb 	bl	801195c <prvIsQueueEmpty>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	f43f af6f 	beq.w	80112ac <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80113ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3730      	adds	r7, #48	@ 0x30
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	e000ed04 	.word	0xe000ed04

080113dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b08e      	sub	sp, #56	@ 0x38
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80113e6:	2300      	movs	r3, #0
 80113e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80113ee:	2300      	movs	r3, #0
 80113f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80113f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d10d      	bne.n	8011414 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80113f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113fc:	b672      	cpsid	i
 80113fe:	f383 8811 	msr	BASEPRI, r3
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	b662      	cpsie	i
 801140c:	623b      	str	r3, [r7, #32]
}
 801140e:	bf00      	nop
 8011410:	bf00      	nop
 8011412:	e7fd      	b.n	8011410 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011418:	2b00      	cmp	r3, #0
 801141a:	d00d      	beq.n	8011438 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 801141c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011420:	b672      	cpsid	i
 8011422:	f383 8811 	msr	BASEPRI, r3
 8011426:	f3bf 8f6f 	isb	sy
 801142a:	f3bf 8f4f 	dsb	sy
 801142e:	b662      	cpsie	i
 8011430:	61fb      	str	r3, [r7, #28]
}
 8011432:	bf00      	nop
 8011434:	bf00      	nop
 8011436:	e7fd      	b.n	8011434 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011438:	f001 faec 	bl	8012a14 <xTaskGetSchedulerState>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	d102      	bne.n	8011448 <xQueueSemaphoreTake+0x6c>
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d101      	bne.n	801144c <xQueueSemaphoreTake+0x70>
 8011448:	2301      	movs	r3, #1
 801144a:	e000      	b.n	801144e <xQueueSemaphoreTake+0x72>
 801144c:	2300      	movs	r3, #0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d10d      	bne.n	801146e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8011452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011456:	b672      	cpsid	i
 8011458:	f383 8811 	msr	BASEPRI, r3
 801145c:	f3bf 8f6f 	isb	sy
 8011460:	f3bf 8f4f 	dsb	sy
 8011464:	b662      	cpsie	i
 8011466:	61bb      	str	r3, [r7, #24]
}
 8011468:	bf00      	nop
 801146a:	bf00      	nop
 801146c:	e7fd      	b.n	801146a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801146e:	f001 fe25 	bl	80130bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011476:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801147a:	2b00      	cmp	r3, #0
 801147c:	d024      	beq.n	80114c8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801147e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011480:	1e5a      	subs	r2, r3, #1
 8011482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011484:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d104      	bne.n	8011498 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801148e:	f001 fc8b 	bl	8012da8 <pvTaskIncrementMutexHeldCount>
 8011492:	4602      	mov	r2, r0
 8011494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011496:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801149a:	691b      	ldr	r3, [r3, #16]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00f      	beq.n	80114c0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80114a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a2:	3310      	adds	r3, #16
 80114a4:	4618      	mov	r0, r3
 80114a6:	f001 f8eb 	bl	8012680 <xTaskRemoveFromEventList>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d007      	beq.n	80114c0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80114b0:	4b55      	ldr	r3, [pc, #340]	@ (8011608 <xQueueSemaphoreTake+0x22c>)
 80114b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114b6:	601a      	str	r2, [r3, #0]
 80114b8:	f3bf 8f4f 	dsb	sy
 80114bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80114c0:	f001 fe32 	bl	8013128 <vPortExitCritical>
				return pdPASS;
 80114c4:	2301      	movs	r3, #1
 80114c6:	e09a      	b.n	80115fe <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d114      	bne.n	80114f8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80114ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00d      	beq.n	80114f0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80114d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114d8:	b672      	cpsid	i
 80114da:	f383 8811 	msr	BASEPRI, r3
 80114de:	f3bf 8f6f 	isb	sy
 80114e2:	f3bf 8f4f 	dsb	sy
 80114e6:	b662      	cpsie	i
 80114e8:	617b      	str	r3, [r7, #20]
}
 80114ea:	bf00      	nop
 80114ec:	bf00      	nop
 80114ee:	e7fd      	b.n	80114ec <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80114f0:	f001 fe1a 	bl	8013128 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80114f4:	2300      	movs	r3, #0
 80114f6:	e082      	b.n	80115fe <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80114f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d106      	bne.n	801150c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80114fe:	f107 030c 	add.w	r3, r7, #12
 8011502:	4618      	mov	r0, r3
 8011504:	f001 f922 	bl	801274c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011508:	2301      	movs	r3, #1
 801150a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801150c:	f001 fe0c 	bl	8013128 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011510:	f000 fe7e 	bl	8012210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011514:	f001 fdd2 	bl	80130bc <vPortEnterCritical>
 8011518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801151e:	b25b      	sxtb	r3, r3
 8011520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011524:	d103      	bne.n	801152e <xQueueSemaphoreTake+0x152>
 8011526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011528:	2200      	movs	r2, #0
 801152a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801152e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011530:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011534:	b25b      	sxtb	r3, r3
 8011536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801153a:	d103      	bne.n	8011544 <xQueueSemaphoreTake+0x168>
 801153c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801153e:	2200      	movs	r2, #0
 8011540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011544:	f001 fdf0 	bl	8013128 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011548:	463a      	mov	r2, r7
 801154a:	f107 030c 	add.w	r3, r7, #12
 801154e:	4611      	mov	r1, r2
 8011550:	4618      	mov	r0, r3
 8011552:	f001 f911 	bl	8012778 <xTaskCheckForTimeOut>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d132      	bne.n	80115c2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801155c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801155e:	f000 f9fd 	bl	801195c <prvIsQueueEmpty>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d026      	beq.n	80115b6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d109      	bne.n	8011584 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8011570:	f001 fda4 	bl	80130bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011576:	689b      	ldr	r3, [r3, #8]
 8011578:	4618      	mov	r0, r3
 801157a:	f001 fa69 	bl	8012a50 <xTaskPriorityInherit>
 801157e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011580:	f001 fdd2 	bl	8013128 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011586:	3324      	adds	r3, #36	@ 0x24
 8011588:	683a      	ldr	r2, [r7, #0]
 801158a:	4611      	mov	r1, r2
 801158c:	4618      	mov	r0, r3
 801158e:	f001 f84f 	bl	8012630 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011592:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011594:	f000 f990 	bl	80118b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011598:	f000 fe48 	bl	801222c <xTaskResumeAll>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	f47f af65 	bne.w	801146e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80115a4:	4b18      	ldr	r3, [pc, #96]	@ (8011608 <xQueueSemaphoreTake+0x22c>)
 80115a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115aa:	601a      	str	r2, [r3, #0]
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	f3bf 8f6f 	isb	sy
 80115b4:	e75b      	b.n	801146e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80115b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115b8:	f000 f97e 	bl	80118b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80115bc:	f000 fe36 	bl	801222c <xTaskResumeAll>
 80115c0:	e755      	b.n	801146e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80115c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115c4:	f000 f978 	bl	80118b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115c8:	f000 fe30 	bl	801222c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80115cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115ce:	f000 f9c5 	bl	801195c <prvIsQueueEmpty>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	f43f af4a 	beq.w	801146e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80115da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00d      	beq.n	80115fc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80115e0:	f001 fd6c 	bl	80130bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80115e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115e6:	f000 f8bf 	bl	8011768 <prvGetDisinheritPriorityAfterTimeout>
 80115ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80115ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ee:	689b      	ldr	r3, [r3, #8]
 80115f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80115f2:	4618      	mov	r0, r3
 80115f4:	f001 fb38 	bl	8012c68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80115f8:	f001 fd96 	bl	8013128 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80115fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80115fe:	4618      	mov	r0, r3
 8011600:	3738      	adds	r7, #56	@ 0x38
 8011602:	46bd      	mov	sp, r7
 8011604:	bd80      	pop	{r7, pc}
 8011606:	bf00      	nop
 8011608:	e000ed04 	.word	0xe000ed04

0801160c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b08e      	sub	sp, #56	@ 0x38
 8011610:	af00      	add	r7, sp, #0
 8011612:	60f8      	str	r0, [r7, #12]
 8011614:	60b9      	str	r1, [r7, #8]
 8011616:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801161c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801161e:	2b00      	cmp	r3, #0
 8011620:	d10d      	bne.n	801163e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8011622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011626:	b672      	cpsid	i
 8011628:	f383 8811 	msr	BASEPRI, r3
 801162c:	f3bf 8f6f 	isb	sy
 8011630:	f3bf 8f4f 	dsb	sy
 8011634:	b662      	cpsie	i
 8011636:	623b      	str	r3, [r7, #32]
}
 8011638:	bf00      	nop
 801163a:	bf00      	nop
 801163c:	e7fd      	b.n	801163a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d103      	bne.n	801164c <xQueueReceiveFromISR+0x40>
 8011644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011648:	2b00      	cmp	r3, #0
 801164a:	d101      	bne.n	8011650 <xQueueReceiveFromISR+0x44>
 801164c:	2301      	movs	r3, #1
 801164e:	e000      	b.n	8011652 <xQueueReceiveFromISR+0x46>
 8011650:	2300      	movs	r3, #0
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10d      	bne.n	8011672 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8011656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801165a:	b672      	cpsid	i
 801165c:	f383 8811 	msr	BASEPRI, r3
 8011660:	f3bf 8f6f 	isb	sy
 8011664:	f3bf 8f4f 	dsb	sy
 8011668:	b662      	cpsie	i
 801166a:	61fb      	str	r3, [r7, #28]
}
 801166c:	bf00      	nop
 801166e:	bf00      	nop
 8011670:	e7fd      	b.n	801166e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011672:	f001 fe0b 	bl	801328c <vPortValidateInterruptPriority>
	__asm volatile
 8011676:	f3ef 8211 	mrs	r2, BASEPRI
 801167a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801167e:	b672      	cpsid	i
 8011680:	f383 8811 	msr	BASEPRI, r3
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	b662      	cpsie	i
 801168e:	61ba      	str	r2, [r7, #24]
 8011690:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011692:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011694:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801169a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d02f      	beq.n	8011702 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80116a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80116a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80116ac:	68b9      	ldr	r1, [r7, #8]
 80116ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80116b0:	f000 f8dc 	bl	801186c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80116b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116b6:	1e5a      	subs	r2, r3, #1
 80116b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80116bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80116c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c4:	d112      	bne.n	80116ec <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80116c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d016      	beq.n	80116fc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80116ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116d0:	3310      	adds	r3, #16
 80116d2:	4618      	mov	r0, r3
 80116d4:	f000 ffd4 	bl	8012680 <xTaskRemoveFromEventList>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d00e      	beq.n	80116fc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00b      	beq.n	80116fc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2201      	movs	r2, #1
 80116e8:	601a      	str	r2, [r3, #0]
 80116ea:	e007      	b.n	80116fc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80116ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80116f0:	3301      	adds	r3, #1
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	b25a      	sxtb	r2, r3
 80116f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80116fc:	2301      	movs	r3, #1
 80116fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8011700:	e001      	b.n	8011706 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8011702:	2300      	movs	r3, #0
 8011704:	637b      	str	r3, [r7, #52]	@ 0x34
 8011706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011708:	613b      	str	r3, [r7, #16]
	__asm volatile
 801170a:	693b      	ldr	r3, [r7, #16]
 801170c:	f383 8811 	msr	BASEPRI, r3
}
 8011710:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011714:	4618      	mov	r0, r3
 8011716:	3738      	adds	r7, #56	@ 0x38
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d10d      	bne.n	801174a <vQueueDelete+0x2e>
	__asm volatile
 801172e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011732:	b672      	cpsid	i
 8011734:	f383 8811 	msr	BASEPRI, r3
 8011738:	f3bf 8f6f 	isb	sy
 801173c:	f3bf 8f4f 	dsb	sy
 8011740:	b662      	cpsie	i
 8011742:	60bb      	str	r3, [r7, #8]
}
 8011744:	bf00      	nop
 8011746:	bf00      	nop
 8011748:	e7fd      	b.n	8011746 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	f000 f934 	bl	80119b8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8011756:	2b00      	cmp	r3, #0
 8011758:	d102      	bne.n	8011760 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f001 feae 	bl	80134bc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011760:	bf00      	nop
 8011762:	3710      	adds	r7, #16
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011768:	b480      	push	{r7}
 801176a:	b085      	sub	sp, #20
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011774:	2b00      	cmp	r3, #0
 8011776:	d006      	beq.n	8011786 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	f1c3 0307 	rsb	r3, r3, #7
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	e001      	b.n	801178a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011786:	2300      	movs	r3, #0
 8011788:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801178a:	68fb      	ldr	r3, [r7, #12]
	}
 801178c:	4618      	mov	r0, r3
 801178e:	3714      	adds	r7, #20
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b086      	sub	sp, #24
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80117a4:	2300      	movs	r3, #0
 80117a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d10d      	bne.n	80117d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d14d      	bne.n	801185a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	4618      	mov	r0, r3
 80117c4:	f001 f9c4 	bl	8012b50 <xTaskPriorityDisinherit>
 80117c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	2200      	movs	r2, #0
 80117ce:	609a      	str	r2, [r3, #8]
 80117d0:	e043      	b.n	801185a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d119      	bne.n	801180c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	6858      	ldr	r0, [r3, #4]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117e0:	461a      	mov	r2, r3
 80117e2:	68b9      	ldr	r1, [r7, #8]
 80117e4:	f002 f880 	bl	80138e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117f0:	441a      	add	r2, r3
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	685a      	ldr	r2, [r3, #4]
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	689b      	ldr	r3, [r3, #8]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d32b      	bcc.n	801185a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	605a      	str	r2, [r3, #4]
 801180a:	e026      	b.n	801185a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	68d8      	ldr	r0, [r3, #12]
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011814:	461a      	mov	r2, r3
 8011816:	68b9      	ldr	r1, [r7, #8]
 8011818:	f002 f866 	bl	80138e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	68da      	ldr	r2, [r3, #12]
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011824:	425b      	negs	r3, r3
 8011826:	441a      	add	r2, r3
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	68da      	ldr	r2, [r3, #12]
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	429a      	cmp	r2, r3
 8011836:	d207      	bcs.n	8011848 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	689a      	ldr	r2, [r3, #8]
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011840:	425b      	negs	r3, r3
 8011842:	441a      	add	r2, r3
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2b02      	cmp	r3, #2
 801184c:	d105      	bne.n	801185a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d002      	beq.n	801185a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	3b01      	subs	r3, #1
 8011858:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	1c5a      	adds	r2, r3, #1
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011862:	697b      	ldr	r3, [r7, #20]
}
 8011864:	4618      	mov	r0, r3
 8011866:	3718      	adds	r7, #24
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801186c:	b580      	push	{r7, lr}
 801186e:	b082      	sub	sp, #8
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
 8011874:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801187a:	2b00      	cmp	r3, #0
 801187c:	d018      	beq.n	80118b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	68da      	ldr	r2, [r3, #12]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011886:	441a      	add	r2, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	68da      	ldr	r2, [r3, #12]
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	689b      	ldr	r3, [r3, #8]
 8011894:	429a      	cmp	r2, r3
 8011896:	d303      	bcc.n	80118a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	68d9      	ldr	r1, [r3, #12]
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80118a8:	461a      	mov	r2, r3
 80118aa:	6838      	ldr	r0, [r7, #0]
 80118ac:	f002 f81c 	bl	80138e8 <memcpy>
	}
}
 80118b0:	bf00      	nop
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b084      	sub	sp, #16
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80118c0:	f001 fbfc 	bl	80130bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80118ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80118cc:	e011      	b.n	80118f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d012      	beq.n	80118fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	3324      	adds	r3, #36	@ 0x24
 80118da:	4618      	mov	r0, r3
 80118dc:	f000 fed0 	bl	8012680 <xTaskRemoveFromEventList>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d001      	beq.n	80118ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80118e6:	f000 ffaf 	bl	8012848 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80118ea:	7bfb      	ldrb	r3, [r7, #15]
 80118ec:	3b01      	subs	r3, #1
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80118f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	dce9      	bgt.n	80118ce <prvUnlockQueue+0x16>
 80118fa:	e000      	b.n	80118fe <prvUnlockQueue+0x46>
					break;
 80118fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	22ff      	movs	r2, #255	@ 0xff
 8011902:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011906:	f001 fc0f 	bl	8013128 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801190a:	f001 fbd7 	bl	80130bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011914:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011916:	e011      	b.n	801193c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	691b      	ldr	r3, [r3, #16]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d012      	beq.n	8011946 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	3310      	adds	r3, #16
 8011924:	4618      	mov	r0, r3
 8011926:	f000 feab 	bl	8012680 <xTaskRemoveFromEventList>
 801192a:	4603      	mov	r3, r0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d001      	beq.n	8011934 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011930:	f000 ff8a 	bl	8012848 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011934:	7bbb      	ldrb	r3, [r7, #14]
 8011936:	3b01      	subs	r3, #1
 8011938:	b2db      	uxtb	r3, r3
 801193a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801193c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011940:	2b00      	cmp	r3, #0
 8011942:	dce9      	bgt.n	8011918 <prvUnlockQueue+0x60>
 8011944:	e000      	b.n	8011948 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011946:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	22ff      	movs	r2, #255	@ 0xff
 801194c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011950:	f001 fbea 	bl	8013128 <vPortExitCritical>
}
 8011954:	bf00      	nop
 8011956:	3710      	adds	r7, #16
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011964:	f001 fbaa 	bl	80130bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801196c:	2b00      	cmp	r3, #0
 801196e:	d102      	bne.n	8011976 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011970:	2301      	movs	r3, #1
 8011972:	60fb      	str	r3, [r7, #12]
 8011974:	e001      	b.n	801197a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011976:	2300      	movs	r3, #0
 8011978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801197a:	f001 fbd5 	bl	8013128 <vPortExitCritical>

	return xReturn;
 801197e:	68fb      	ldr	r3, [r7, #12]
}
 8011980:	4618      	mov	r0, r3
 8011982:	3710      	adds	r7, #16
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}

08011988 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011990:	f001 fb94 	bl	80130bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801199c:	429a      	cmp	r2, r3
 801199e:	d102      	bne.n	80119a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80119a0:	2301      	movs	r3, #1
 80119a2:	60fb      	str	r3, [r7, #12]
 80119a4:	e001      	b.n	80119aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80119a6:	2300      	movs	r3, #0
 80119a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80119aa:	f001 fbbd 	bl	8013128 <vPortExitCritical>

	return xReturn;
 80119ae:	68fb      	ldr	r3, [r7, #12]
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3710      	adds	r7, #16
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}

080119b8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80119b8:	b480      	push	{r7}
 80119ba:	b085      	sub	sp, #20
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80119c0:	2300      	movs	r3, #0
 80119c2:	60fb      	str	r3, [r7, #12]
 80119c4:	e016      	b.n	80119f4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80119c6:	4a10      	ldr	r2, [pc, #64]	@ (8011a08 <vQueueUnregisterQueue+0x50>)
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	00db      	lsls	r3, r3, #3
 80119cc:	4413      	add	r3, r2
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d10b      	bne.n	80119ee <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80119d6:	4a0c      	ldr	r2, [pc, #48]	@ (8011a08 <vQueueUnregisterQueue+0x50>)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2100      	movs	r1, #0
 80119dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80119e0:	4a09      	ldr	r2, [pc, #36]	@ (8011a08 <vQueueUnregisterQueue+0x50>)
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	00db      	lsls	r3, r3, #3
 80119e6:	4413      	add	r3, r2
 80119e8:	2200      	movs	r2, #0
 80119ea:	605a      	str	r2, [r3, #4]
				break;
 80119ec:	e006      	b.n	80119fc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	3301      	adds	r3, #1
 80119f2:	60fb      	str	r3, [r7, #12]
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2b07      	cmp	r3, #7
 80119f8:	d9e5      	bls.n	80119c6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80119fa:	bf00      	nop
 80119fc:	bf00      	nop
 80119fe:	3714      	adds	r7, #20
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr
 8011a08:	200012e0 	.word	0x200012e0

08011a0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b08e      	sub	sp, #56	@ 0x38
 8011a10:	af04      	add	r7, sp, #16
 8011a12:	60f8      	str	r0, [r7, #12]
 8011a14:	60b9      	str	r1, [r7, #8]
 8011a16:	607a      	str	r2, [r7, #4]
 8011a18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d10d      	bne.n	8011a3c <xTaskCreateStatic+0x30>
	__asm volatile
 8011a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a24:	b672      	cpsid	i
 8011a26:	f383 8811 	msr	BASEPRI, r3
 8011a2a:	f3bf 8f6f 	isb	sy
 8011a2e:	f3bf 8f4f 	dsb	sy
 8011a32:	b662      	cpsie	i
 8011a34:	623b      	str	r3, [r7, #32]
}
 8011a36:	bf00      	nop
 8011a38:	bf00      	nop
 8011a3a:	e7fd      	b.n	8011a38 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d10d      	bne.n	8011a5e <xTaskCreateStatic+0x52>
	__asm volatile
 8011a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a46:	b672      	cpsid	i
 8011a48:	f383 8811 	msr	BASEPRI, r3
 8011a4c:	f3bf 8f6f 	isb	sy
 8011a50:	f3bf 8f4f 	dsb	sy
 8011a54:	b662      	cpsie	i
 8011a56:	61fb      	str	r3, [r7, #28]
}
 8011a58:	bf00      	nop
 8011a5a:	bf00      	nop
 8011a5c:	e7fd      	b.n	8011a5a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011a5e:	2354      	movs	r3, #84	@ 0x54
 8011a60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	2b54      	cmp	r3, #84	@ 0x54
 8011a66:	d00d      	beq.n	8011a84 <xTaskCreateStatic+0x78>
	__asm volatile
 8011a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a6c:	b672      	cpsid	i
 8011a6e:	f383 8811 	msr	BASEPRI, r3
 8011a72:	f3bf 8f6f 	isb	sy
 8011a76:	f3bf 8f4f 	dsb	sy
 8011a7a:	b662      	cpsie	i
 8011a7c:	61bb      	str	r3, [r7, #24]
}
 8011a7e:	bf00      	nop
 8011a80:	bf00      	nop
 8011a82:	e7fd      	b.n	8011a80 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011a84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d01e      	beq.n	8011aca <xTaskCreateStatic+0xbe>
 8011a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d01b      	beq.n	8011aca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a9e:	2202      	movs	r2, #2
 8011aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	9303      	str	r3, [sp, #12]
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aaa:	9302      	str	r3, [sp, #8]
 8011aac:	f107 0314 	add.w	r3, r7, #20
 8011ab0:	9301      	str	r3, [sp, #4]
 8011ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ab4:	9300      	str	r3, [sp, #0]
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	68b9      	ldr	r1, [r7, #8]
 8011abc:	68f8      	ldr	r0, [r7, #12]
 8011abe:	f000 f850 	bl	8011b62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011ac4:	f000 f8e0 	bl	8011c88 <prvAddNewTaskToReadyList>
 8011ac8:	e001      	b.n	8011ace <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8011aca:	2300      	movs	r3, #0
 8011acc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011ace:	697b      	ldr	r3, [r7, #20]
	}
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	3728      	adds	r7, #40	@ 0x28
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd80      	pop	{r7, pc}

08011ad8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b08c      	sub	sp, #48	@ 0x30
 8011adc:	af04      	add	r7, sp, #16
 8011ade:	60f8      	str	r0, [r7, #12]
 8011ae0:	60b9      	str	r1, [r7, #8]
 8011ae2:	603b      	str	r3, [r7, #0]
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011ae8:	88fb      	ldrh	r3, [r7, #6]
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4618      	mov	r0, r3
 8011aee:	f001 fc13 	bl	8013318 <pvPortMalloc>
 8011af2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d00e      	beq.n	8011b18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011afa:	2054      	movs	r0, #84	@ 0x54
 8011afc:	f001 fc0c 	bl	8013318 <pvPortMalloc>
 8011b00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d003      	beq.n	8011b10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	697a      	ldr	r2, [r7, #20]
 8011b0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8011b0e:	e005      	b.n	8011b1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011b10:	6978      	ldr	r0, [r7, #20]
 8011b12:	f001 fcd3 	bl	80134bc <vPortFree>
 8011b16:	e001      	b.n	8011b1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d017      	beq.n	8011b52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	2200      	movs	r2, #0
 8011b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011b2a:	88fa      	ldrh	r2, [r7, #6]
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	9303      	str	r3, [sp, #12]
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	9302      	str	r3, [sp, #8]
 8011b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b36:	9301      	str	r3, [sp, #4]
 8011b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b3a:	9300      	str	r3, [sp, #0]
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	68b9      	ldr	r1, [r7, #8]
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f000 f80e 	bl	8011b62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011b46:	69f8      	ldr	r0, [r7, #28]
 8011b48:	f000 f89e 	bl	8011c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	61bb      	str	r3, [r7, #24]
 8011b50:	e002      	b.n	8011b58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011b52:	f04f 33ff 	mov.w	r3, #4294967295
 8011b56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011b58:	69bb      	ldr	r3, [r7, #24]
	}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3720      	adds	r7, #32
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}

08011b62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011b62:	b580      	push	{r7, lr}
 8011b64:	b088      	sub	sp, #32
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	60f8      	str	r0, [r7, #12]
 8011b6a:	60b9      	str	r1, [r7, #8]
 8011b6c:	607a      	str	r2, [r7, #4]
 8011b6e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b72:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	461a      	mov	r2, r3
 8011b7a:	21a5      	movs	r1, #165	@ 0xa5
 8011b7c:	f001 fe70 	bl	8013860 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b84:	6879      	ldr	r1, [r7, #4]
 8011b86:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011b8a:	440b      	add	r3, r1
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	4413      	add	r3, r2
 8011b90:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	f023 0307 	bic.w	r3, r3, #7
 8011b98:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	f003 0307 	and.w	r3, r3, #7
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00d      	beq.n	8011bc0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8011ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ba8:	b672      	cpsid	i
 8011baa:	f383 8811 	msr	BASEPRI, r3
 8011bae:	f3bf 8f6f 	isb	sy
 8011bb2:	f3bf 8f4f 	dsb	sy
 8011bb6:	b662      	cpsie	i
 8011bb8:	617b      	str	r3, [r7, #20]
}
 8011bba:	bf00      	nop
 8011bbc:	bf00      	nop
 8011bbe:	e7fd      	b.n	8011bbc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d01f      	beq.n	8011c06 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	61fb      	str	r3, [r7, #28]
 8011bca:	e012      	b.n	8011bf2 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011bcc:	68ba      	ldr	r2, [r7, #8]
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	7819      	ldrb	r1, [r3, #0]
 8011bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bd6:	69fb      	ldr	r3, [r7, #28]
 8011bd8:	4413      	add	r3, r2
 8011bda:	3334      	adds	r3, #52	@ 0x34
 8011bdc:	460a      	mov	r2, r1
 8011bde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011be0:	68ba      	ldr	r2, [r7, #8]
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	4413      	add	r3, r2
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d006      	beq.n	8011bfa <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	3301      	adds	r3, #1
 8011bf0:	61fb      	str	r3, [r7, #28]
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	2b0f      	cmp	r3, #15
 8011bf6:	d9e9      	bls.n	8011bcc <prvInitialiseNewTask+0x6a>
 8011bf8:	e000      	b.n	8011bfc <prvInitialiseNewTask+0x9a>
			{
				break;
 8011bfa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bfe:	2200      	movs	r2, #0
 8011c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011c04:	e003      	b.n	8011c0e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c10:	2b06      	cmp	r3, #6
 8011c12:	d901      	bls.n	8011c18 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011c14:	2306      	movs	r3, #6
 8011c16:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c22:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c26:	2200      	movs	r2, #0
 8011c28:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fe febc 	bl	80109ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c36:	3318      	adds	r3, #24
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7fe feb7 	bl	80109ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c42:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c46:	f1c3 0207 	rsb	r2, r3, #7
 8011c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c4c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c52:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c56:	2200      	movs	r2, #0
 8011c58:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c62:	683a      	ldr	r2, [r7, #0]
 8011c64:	68f9      	ldr	r1, [r7, #12]
 8011c66:	69b8      	ldr	r0, [r7, #24]
 8011c68:	f001 f918 	bl	8012e9c <pxPortInitialiseStack>
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d002      	beq.n	8011c7e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c7e:	bf00      	nop
 8011c80:	3720      	adds	r7, #32
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
	...

08011c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011c90:	f001 fa14 	bl	80130bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011c94:	4b2a      	ldr	r3, [pc, #168]	@ (8011d40 <prvAddNewTaskToReadyList+0xb8>)
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	3301      	adds	r3, #1
 8011c9a:	4a29      	ldr	r2, [pc, #164]	@ (8011d40 <prvAddNewTaskToReadyList+0xb8>)
 8011c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011c9e:	4b29      	ldr	r3, [pc, #164]	@ (8011d44 <prvAddNewTaskToReadyList+0xbc>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d109      	bne.n	8011cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011ca6:	4a27      	ldr	r2, [pc, #156]	@ (8011d44 <prvAddNewTaskToReadyList+0xbc>)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011cac:	4b24      	ldr	r3, [pc, #144]	@ (8011d40 <prvAddNewTaskToReadyList+0xb8>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	d110      	bne.n	8011cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011cb4:	f000 fdee 	bl	8012894 <prvInitialiseTaskLists>
 8011cb8:	e00d      	b.n	8011cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011cba:	4b23      	ldr	r3, [pc, #140]	@ (8011d48 <prvAddNewTaskToReadyList+0xc0>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d109      	bne.n	8011cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011cc2:	4b20      	ldr	r3, [pc, #128]	@ (8011d44 <prvAddNewTaskToReadyList+0xbc>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	d802      	bhi.n	8011cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8011d44 <prvAddNewTaskToReadyList+0xbc>)
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8011d4c <prvAddNewTaskToReadyList+0xc4>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8011d4c <prvAddNewTaskToReadyList+0xc4>)
 8011cde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	409a      	lsls	r2, r3
 8011ce8:	4b19      	ldr	r3, [pc, #100]	@ (8011d50 <prvAddNewTaskToReadyList+0xc8>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4313      	orrs	r3, r2
 8011cee:	4a18      	ldr	r2, [pc, #96]	@ (8011d50 <prvAddNewTaskToReadyList+0xc8>)
 8011cf0:	6013      	str	r3, [r2, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	4a15      	ldr	r2, [pc, #84]	@ (8011d54 <prvAddNewTaskToReadyList+0xcc>)
 8011d00:	441a      	add	r2, r3
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	3304      	adds	r3, #4
 8011d06:	4619      	mov	r1, r3
 8011d08:	4610      	mov	r0, r2
 8011d0a:	f7fe fe5c 	bl	80109c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011d0e:	f001 fa0b 	bl	8013128 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011d12:	4b0d      	ldr	r3, [pc, #52]	@ (8011d48 <prvAddNewTaskToReadyList+0xc0>)
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d00e      	beq.n	8011d38 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8011d44 <prvAddNewTaskToReadyList+0xbc>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d207      	bcs.n	8011d38 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011d28:	4b0b      	ldr	r3, [pc, #44]	@ (8011d58 <prvAddNewTaskToReadyList+0xd0>)
 8011d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d2e:	601a      	str	r2, [r3, #0]
 8011d30:	f3bf 8f4f 	dsb	sy
 8011d34:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d38:	bf00      	nop
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	20001420 	.word	0x20001420
 8011d44:	20001320 	.word	0x20001320
 8011d48:	2000142c 	.word	0x2000142c
 8011d4c:	2000143c 	.word	0x2000143c
 8011d50:	20001428 	.word	0x20001428
 8011d54:	20001324 	.word	0x20001324
 8011d58:	e000ed04 	.word	0xe000ed04

08011d5c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b084      	sub	sp, #16
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011d64:	f001 f9aa 	bl	80130bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d102      	bne.n	8011d74 <vTaskDelete+0x18>
 8011d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8011e58 <vTaskDelete+0xfc>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	e000      	b.n	8011d76 <vTaskDelete+0x1a>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	3304      	adds	r3, #4
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fe fe7f 	bl	8010a80 <uxListRemove>
 8011d82:	4603      	mov	r3, r0
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d115      	bne.n	8011db4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d8c:	4933      	ldr	r1, [pc, #204]	@ (8011e5c <vTaskDelete+0x100>)
 8011d8e:	4613      	mov	r3, r2
 8011d90:	009b      	lsls	r3, r3, #2
 8011d92:	4413      	add	r3, r2
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	440b      	add	r3, r1
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d10a      	bne.n	8011db4 <vTaskDelete+0x58>
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011da2:	2201      	movs	r2, #1
 8011da4:	fa02 f303 	lsl.w	r3, r2, r3
 8011da8:	43da      	mvns	r2, r3
 8011daa:	4b2d      	ldr	r3, [pc, #180]	@ (8011e60 <vTaskDelete+0x104>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4013      	ands	r3, r2
 8011db0:	4a2b      	ldr	r2, [pc, #172]	@ (8011e60 <vTaskDelete+0x104>)
 8011db2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d004      	beq.n	8011dc6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	3318      	adds	r3, #24
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7fe fe5d 	bl	8010a80 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8011dc6:	4b27      	ldr	r3, [pc, #156]	@ (8011e64 <vTaskDelete+0x108>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	3301      	adds	r3, #1
 8011dcc:	4a25      	ldr	r2, [pc, #148]	@ (8011e64 <vTaskDelete+0x108>)
 8011dce:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8011dd0:	4b21      	ldr	r3, [pc, #132]	@ (8011e58 <vTaskDelete+0xfc>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	68fa      	ldr	r2, [r7, #12]
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d10b      	bne.n	8011df2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	3304      	adds	r3, #4
 8011dde:	4619      	mov	r1, r3
 8011de0:	4821      	ldr	r0, [pc, #132]	@ (8011e68 <vTaskDelete+0x10c>)
 8011de2:	f7fe fdf0 	bl	80109c6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011de6:	4b21      	ldr	r3, [pc, #132]	@ (8011e6c <vTaskDelete+0x110>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	3301      	adds	r3, #1
 8011dec:	4a1f      	ldr	r2, [pc, #124]	@ (8011e6c <vTaskDelete+0x110>)
 8011dee:	6013      	str	r3, [r2, #0]
 8011df0:	e009      	b.n	8011e06 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011df2:	4b1f      	ldr	r3, [pc, #124]	@ (8011e70 <vTaskDelete+0x114>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	3b01      	subs	r3, #1
 8011df8:	4a1d      	ldr	r2, [pc, #116]	@ (8011e70 <vTaskDelete+0x114>)
 8011dfa:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8011dfc:	68f8      	ldr	r0, [r7, #12]
 8011dfe:	f000 fdb7 	bl	8012970 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011e02:	f000 fde7 	bl	80129d4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8011e06:	f001 f98f 	bl	8013128 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8011e74 <vTaskDelete+0x118>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d01e      	beq.n	8011e50 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 8011e12:	4b11      	ldr	r3, [pc, #68]	@ (8011e58 <vTaskDelete+0xfc>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	d119      	bne.n	8011e50 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011e1c:	4b16      	ldr	r3, [pc, #88]	@ (8011e78 <vTaskDelete+0x11c>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00d      	beq.n	8011e40 <vTaskDelete+0xe4>
	__asm volatile
 8011e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e28:	b672      	cpsid	i
 8011e2a:	f383 8811 	msr	BASEPRI, r3
 8011e2e:	f3bf 8f6f 	isb	sy
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	b662      	cpsie	i
 8011e38:	60bb      	str	r3, [r7, #8]
}
 8011e3a:	bf00      	nop
 8011e3c:	bf00      	nop
 8011e3e:	e7fd      	b.n	8011e3c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8011e40:	4b0e      	ldr	r3, [pc, #56]	@ (8011e7c <vTaskDelete+0x120>)
 8011e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e46:	601a      	str	r2, [r3, #0]
 8011e48:	f3bf 8f4f 	dsb	sy
 8011e4c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011e50:	bf00      	nop
 8011e52:	3710      	adds	r7, #16
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	20001320 	.word	0x20001320
 8011e5c:	20001324 	.word	0x20001324
 8011e60:	20001428 	.word	0x20001428
 8011e64:	2000143c 	.word	0x2000143c
 8011e68:	200013f4 	.word	0x200013f4
 8011e6c:	20001408 	.word	0x20001408
 8011e70:	20001420 	.word	0x20001420
 8011e74:	2000142c 	.word	0x2000142c
 8011e78:	20001448 	.word	0x20001448
 8011e7c:	e000ed04 	.word	0xe000ed04

08011e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d01a      	beq.n	8011ec8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011e92:	4b15      	ldr	r3, [pc, #84]	@ (8011ee8 <vTaskDelay+0x68>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00d      	beq.n	8011eb6 <vTaskDelay+0x36>
	__asm volatile
 8011e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e9e:	b672      	cpsid	i
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	b662      	cpsie	i
 8011eae:	60bb      	str	r3, [r7, #8]
}
 8011eb0:	bf00      	nop
 8011eb2:	bf00      	nop
 8011eb4:	e7fd      	b.n	8011eb2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011eb6:	f000 f9ab 	bl	8012210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011eba:	2100      	movs	r1, #0
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 ff87 	bl	8012dd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011ec2:	f000 f9b3 	bl	801222c <xTaskResumeAll>
 8011ec6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d107      	bne.n	8011ede <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8011ece:	4b07      	ldr	r3, [pc, #28]	@ (8011eec <vTaskDelay+0x6c>)
 8011ed0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ed4:	601a      	str	r2, [r3, #0]
 8011ed6:	f3bf 8f4f 	dsb	sy
 8011eda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ede:	bf00      	nop
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	20001448 	.word	0x20001448
 8011eec:	e000ed04 	.word	0xe000ed04

08011ef0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011ef8:	f001 f8e0 	bl	80130bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d102      	bne.n	8011f08 <vTaskSuspend+0x18>
 8011f02:	4b3e      	ldr	r3, [pc, #248]	@ (8011ffc <vTaskSuspend+0x10c>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	e000      	b.n	8011f0a <vTaskSuspend+0x1a>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	3304      	adds	r3, #4
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fe fdb5 	bl	8010a80 <uxListRemove>
 8011f16:	4603      	mov	r3, r0
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d115      	bne.n	8011f48 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f20:	4937      	ldr	r1, [pc, #220]	@ (8012000 <vTaskSuspend+0x110>)
 8011f22:	4613      	mov	r3, r2
 8011f24:	009b      	lsls	r3, r3, #2
 8011f26:	4413      	add	r3, r2
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	440b      	add	r3, r1
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d10a      	bne.n	8011f48 <vTaskSuspend+0x58>
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f36:	2201      	movs	r2, #1
 8011f38:	fa02 f303 	lsl.w	r3, r2, r3
 8011f3c:	43da      	mvns	r2, r3
 8011f3e:	4b31      	ldr	r3, [pc, #196]	@ (8012004 <vTaskSuspend+0x114>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4013      	ands	r3, r2
 8011f44:	4a2f      	ldr	r2, [pc, #188]	@ (8012004 <vTaskSuspend+0x114>)
 8011f46:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d004      	beq.n	8011f5a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	3318      	adds	r3, #24
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7fe fd93 	bl	8010a80 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	3304      	adds	r3, #4
 8011f5e:	4619      	mov	r1, r3
 8011f60:	4829      	ldr	r0, [pc, #164]	@ (8012008 <vTaskSuspend+0x118>)
 8011f62:	f7fe fd30 	bl	80109c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d103      	bne.n	8011f7a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2200      	movs	r2, #0
 8011f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8011f7a:	f001 f8d5 	bl	8013128 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8011f7e:	4b23      	ldr	r3, [pc, #140]	@ (801200c <vTaskSuspend+0x11c>)
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d005      	beq.n	8011f92 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8011f86:	f001 f899 	bl	80130bc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8011f8a:	f000 fd23 	bl	80129d4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8011f8e:	f001 f8cb 	bl	8013128 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8011f92:	4b1a      	ldr	r3, [pc, #104]	@ (8011ffc <vTaskSuspend+0x10c>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	68fa      	ldr	r2, [r7, #12]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d12a      	bne.n	8011ff2 <vTaskSuspend+0x102>
		{
			if( xSchedulerRunning != pdFALSE )
 8011f9c:	4b1b      	ldr	r3, [pc, #108]	@ (801200c <vTaskSuspend+0x11c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d01a      	beq.n	8011fda <vTaskSuspend+0xea>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8011fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8012010 <vTaskSuspend+0x120>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d00d      	beq.n	8011fc8 <vTaskSuspend+0xd8>
	__asm volatile
 8011fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fb0:	b672      	cpsid	i
 8011fb2:	f383 8811 	msr	BASEPRI, r3
 8011fb6:	f3bf 8f6f 	isb	sy
 8011fba:	f3bf 8f4f 	dsb	sy
 8011fbe:	b662      	cpsie	i
 8011fc0:	60bb      	str	r3, [r7, #8]
}
 8011fc2:	bf00      	nop
 8011fc4:	bf00      	nop
 8011fc6:	e7fd      	b.n	8011fc4 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 8011fc8:	4b12      	ldr	r3, [pc, #72]	@ (8012014 <vTaskSuspend+0x124>)
 8011fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fce:	601a      	str	r2, [r3, #0]
 8011fd0:	f3bf 8f4f 	dsb	sy
 8011fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011fd8:	e00b      	b.n	8011ff2 <vTaskSuspend+0x102>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8011fda:	4b0b      	ldr	r3, [pc, #44]	@ (8012008 <vTaskSuspend+0x118>)
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	4b0e      	ldr	r3, [pc, #56]	@ (8012018 <vTaskSuspend+0x128>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d103      	bne.n	8011fee <vTaskSuspend+0xfe>
					pxCurrentTCB = NULL;
 8011fe6:	4b05      	ldr	r3, [pc, #20]	@ (8011ffc <vTaskSuspend+0x10c>)
 8011fe8:	2200      	movs	r2, #0
 8011fea:	601a      	str	r2, [r3, #0]
	}
 8011fec:	e001      	b.n	8011ff2 <vTaskSuspend+0x102>
					vTaskSwitchContext();
 8011fee:	f000 fa9b 	bl	8012528 <vTaskSwitchContext>
	}
 8011ff2:	bf00      	nop
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}
 8011ffa:	bf00      	nop
 8011ffc:	20001320 	.word	0x20001320
 8012000:	20001324 	.word	0x20001324
 8012004:	20001428 	.word	0x20001428
 8012008:	2000140c 	.word	0x2000140c
 801200c:	2000142c 	.word	0x2000142c
 8012010:	20001448 	.word	0x20001448
 8012014:	e000ed04 	.word	0xe000ed04
 8012018:	20001420 	.word	0x20001420

0801201c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801201c:	b480      	push	{r7}
 801201e:	b087      	sub	sp, #28
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012024:	2300      	movs	r3, #0
 8012026:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10d      	bne.n	801204e <prvTaskIsTaskSuspended+0x32>
	__asm volatile
 8012032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012036:	b672      	cpsid	i
 8012038:	f383 8811 	msr	BASEPRI, r3
 801203c:	f3bf 8f6f 	isb	sy
 8012040:	f3bf 8f4f 	dsb	sy
 8012044:	b662      	cpsie	i
 8012046:	60fb      	str	r3, [r7, #12]
}
 8012048:	bf00      	nop
 801204a:	bf00      	nop
 801204c:	e7fd      	b.n	801204a <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	695b      	ldr	r3, [r3, #20]
 8012052:	4a0a      	ldr	r2, [pc, #40]	@ (801207c <prvTaskIsTaskSuspended+0x60>)
 8012054:	4293      	cmp	r3, r2
 8012056:	d10a      	bne.n	801206e <prvTaskIsTaskSuspended+0x52>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801205c:	4a08      	ldr	r2, [pc, #32]	@ (8012080 <prvTaskIsTaskSuspended+0x64>)
 801205e:	4293      	cmp	r3, r2
 8012060:	d005      	beq.n	801206e <prvTaskIsTaskSuspended+0x52>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012062:	693b      	ldr	r3, [r7, #16]
 8012064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012066:	2b00      	cmp	r3, #0
 8012068:	d101      	bne.n	801206e <prvTaskIsTaskSuspended+0x52>
				{
					xReturn = pdTRUE;
 801206a:	2301      	movs	r3, #1
 801206c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801206e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012070:	4618      	mov	r0, r3
 8012072:	371c      	adds	r7, #28
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr
 801207c:	2000140c 	.word	0x2000140c
 8012080:	200013e0 	.word	0x200013e0

08012084 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012084:	b580      	push	{r7, lr}
 8012086:	b084      	sub	sp, #16
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d10d      	bne.n	80120b2 <vTaskResume+0x2e>
	__asm volatile
 8012096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801209a:	b672      	cpsid	i
 801209c:	f383 8811 	msr	BASEPRI, r3
 80120a0:	f3bf 8f6f 	isb	sy
 80120a4:	f3bf 8f4f 	dsb	sy
 80120a8:	b662      	cpsie	i
 80120aa:	60bb      	str	r3, [r7, #8]
}
 80120ac:	bf00      	nop
 80120ae:	bf00      	nop
 80120b0:	e7fd      	b.n	80120ae <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80120b2:	4b20      	ldr	r3, [pc, #128]	@ (8012134 <vTaskResume+0xb0>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	68fa      	ldr	r2, [r7, #12]
 80120b8:	429a      	cmp	r2, r3
 80120ba:	d037      	beq.n	801212c <vTaskResume+0xa8>
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d034      	beq.n	801212c <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 80120c2:	f000 fffb 	bl	80130bc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80120c6:	68f8      	ldr	r0, [r7, #12]
 80120c8:	f7ff ffa8 	bl	801201c <prvTaskIsTaskSuspended>
 80120cc:	4603      	mov	r3, r0
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d02a      	beq.n	8012128 <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	3304      	adds	r3, #4
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7fe fcd2 	bl	8010a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e0:	2201      	movs	r2, #1
 80120e2:	409a      	lsls	r2, r3
 80120e4:	4b14      	ldr	r3, [pc, #80]	@ (8012138 <vTaskResume+0xb4>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	4313      	orrs	r3, r2
 80120ea:	4a13      	ldr	r2, [pc, #76]	@ (8012138 <vTaskResume+0xb4>)
 80120ec:	6013      	str	r3, [r2, #0]
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120f2:	4613      	mov	r3, r2
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	4413      	add	r3, r2
 80120f8:	009b      	lsls	r3, r3, #2
 80120fa:	4a10      	ldr	r2, [pc, #64]	@ (801213c <vTaskResume+0xb8>)
 80120fc:	441a      	add	r2, r3
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	3304      	adds	r3, #4
 8012102:	4619      	mov	r1, r3
 8012104:	4610      	mov	r0, r2
 8012106:	f7fe fc5e 	bl	80109c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801210e:	4b09      	ldr	r3, [pc, #36]	@ (8012134 <vTaskResume+0xb0>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012114:	429a      	cmp	r2, r3
 8012116:	d307      	bcc.n	8012128 <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012118:	4b09      	ldr	r3, [pc, #36]	@ (8012140 <vTaskResume+0xbc>)
 801211a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801211e:	601a      	str	r2, [r3, #0]
 8012120:	f3bf 8f4f 	dsb	sy
 8012124:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012128:	f000 fffe 	bl	8013128 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801212c:	bf00      	nop
 801212e:	3710      	adds	r7, #16
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}
 8012134:	20001320 	.word	0x20001320
 8012138:	20001428 	.word	0x20001428
 801213c:	20001324 	.word	0x20001324
 8012140:	e000ed04 	.word	0xe000ed04

08012144 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b08a      	sub	sp, #40	@ 0x28
 8012148:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801214a:	2300      	movs	r3, #0
 801214c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801214e:	2300      	movs	r3, #0
 8012150:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012152:	463a      	mov	r2, r7
 8012154:	1d39      	adds	r1, r7, #4
 8012156:	f107 0308 	add.w	r3, r7, #8
 801215a:	4618      	mov	r0, r3
 801215c:	f7f0 fd70 	bl	8002c40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012160:	6839      	ldr	r1, [r7, #0]
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	68ba      	ldr	r2, [r7, #8]
 8012166:	9202      	str	r2, [sp, #8]
 8012168:	9301      	str	r3, [sp, #4]
 801216a:	2300      	movs	r3, #0
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	2300      	movs	r3, #0
 8012170:	460a      	mov	r2, r1
 8012172:	4921      	ldr	r1, [pc, #132]	@ (80121f8 <vTaskStartScheduler+0xb4>)
 8012174:	4821      	ldr	r0, [pc, #132]	@ (80121fc <vTaskStartScheduler+0xb8>)
 8012176:	f7ff fc49 	bl	8011a0c <xTaskCreateStatic>
 801217a:	4603      	mov	r3, r0
 801217c:	4a20      	ldr	r2, [pc, #128]	@ (8012200 <vTaskStartScheduler+0xbc>)
 801217e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012180:	4b1f      	ldr	r3, [pc, #124]	@ (8012200 <vTaskStartScheduler+0xbc>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d002      	beq.n	801218e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012188:	2301      	movs	r3, #1
 801218a:	617b      	str	r3, [r7, #20]
 801218c:	e001      	b.n	8012192 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801218e:	2300      	movs	r3, #0
 8012190:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2b01      	cmp	r3, #1
 8012196:	d118      	bne.n	80121ca <vTaskStartScheduler+0x86>
	__asm volatile
 8012198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801219c:	b672      	cpsid	i
 801219e:	f383 8811 	msr	BASEPRI, r3
 80121a2:	f3bf 8f6f 	isb	sy
 80121a6:	f3bf 8f4f 	dsb	sy
 80121aa:	b662      	cpsie	i
 80121ac:	613b      	str	r3, [r7, #16]
}
 80121ae:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80121b0:	4b14      	ldr	r3, [pc, #80]	@ (8012204 <vTaskStartScheduler+0xc0>)
 80121b2:	f04f 32ff 	mov.w	r2, #4294967295
 80121b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80121b8:	4b13      	ldr	r3, [pc, #76]	@ (8012208 <vTaskStartScheduler+0xc4>)
 80121ba:	2201      	movs	r2, #1
 80121bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80121be:	4b13      	ldr	r3, [pc, #76]	@ (801220c <vTaskStartScheduler+0xc8>)
 80121c0:	2200      	movs	r2, #0
 80121c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80121c4:	f000 fefc 	bl	8012fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80121c8:	e011      	b.n	80121ee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121d0:	d10d      	bne.n	80121ee <vTaskStartScheduler+0xaa>
	__asm volatile
 80121d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121d6:	b672      	cpsid	i
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	b662      	cpsie	i
 80121e6:	60fb      	str	r3, [r7, #12]
}
 80121e8:	bf00      	nop
 80121ea:	bf00      	nop
 80121ec:	e7fd      	b.n	80121ea <vTaskStartScheduler+0xa6>
}
 80121ee:	bf00      	nop
 80121f0:	3718      	adds	r7, #24
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	08013b24 	.word	0x08013b24
 80121fc:	08012861 	.word	0x08012861
 8012200:	20001444 	.word	0x20001444
 8012204:	20001440 	.word	0x20001440
 8012208:	2000142c 	.word	0x2000142c
 801220c:	20001424 	.word	0x20001424

08012210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012210:	b480      	push	{r7}
 8012212:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012214:	4b04      	ldr	r3, [pc, #16]	@ (8012228 <vTaskSuspendAll+0x18>)
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	3301      	adds	r3, #1
 801221a:	4a03      	ldr	r2, [pc, #12]	@ (8012228 <vTaskSuspendAll+0x18>)
 801221c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801221e:	bf00      	nop
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr
 8012228:	20001448 	.word	0x20001448

0801222c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012232:	2300      	movs	r3, #0
 8012234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012236:	2300      	movs	r3, #0
 8012238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801223a:	4b43      	ldr	r3, [pc, #268]	@ (8012348 <xTaskResumeAll+0x11c>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d10d      	bne.n	801225e <xTaskResumeAll+0x32>
	__asm volatile
 8012242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012246:	b672      	cpsid	i
 8012248:	f383 8811 	msr	BASEPRI, r3
 801224c:	f3bf 8f6f 	isb	sy
 8012250:	f3bf 8f4f 	dsb	sy
 8012254:	b662      	cpsie	i
 8012256:	603b      	str	r3, [r7, #0]
}
 8012258:	bf00      	nop
 801225a:	bf00      	nop
 801225c:	e7fd      	b.n	801225a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801225e:	f000 ff2d 	bl	80130bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012262:	4b39      	ldr	r3, [pc, #228]	@ (8012348 <xTaskResumeAll+0x11c>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	3b01      	subs	r3, #1
 8012268:	4a37      	ldr	r2, [pc, #220]	@ (8012348 <xTaskResumeAll+0x11c>)
 801226a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801226c:	4b36      	ldr	r3, [pc, #216]	@ (8012348 <xTaskResumeAll+0x11c>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d161      	bne.n	8012338 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012274:	4b35      	ldr	r3, [pc, #212]	@ (801234c <xTaskResumeAll+0x120>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d05d      	beq.n	8012338 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801227c:	e02e      	b.n	80122dc <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801227e:	4b34      	ldr	r3, [pc, #208]	@ (8012350 <xTaskResumeAll+0x124>)
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	68db      	ldr	r3, [r3, #12]
 8012284:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3318      	adds	r3, #24
 801228a:	4618      	mov	r0, r3
 801228c:	f7fe fbf8 	bl	8010a80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	3304      	adds	r3, #4
 8012294:	4618      	mov	r0, r3
 8012296:	f7fe fbf3 	bl	8010a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801229e:	2201      	movs	r2, #1
 80122a0:	409a      	lsls	r2, r3
 80122a2:	4b2c      	ldr	r3, [pc, #176]	@ (8012354 <xTaskResumeAll+0x128>)
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	4313      	orrs	r3, r2
 80122a8:	4a2a      	ldr	r2, [pc, #168]	@ (8012354 <xTaskResumeAll+0x128>)
 80122aa:	6013      	str	r3, [r2, #0]
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122b0:	4613      	mov	r3, r2
 80122b2:	009b      	lsls	r3, r3, #2
 80122b4:	4413      	add	r3, r2
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	4a27      	ldr	r2, [pc, #156]	@ (8012358 <xTaskResumeAll+0x12c>)
 80122ba:	441a      	add	r2, r3
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	3304      	adds	r3, #4
 80122c0:	4619      	mov	r1, r3
 80122c2:	4610      	mov	r0, r2
 80122c4:	f7fe fb7f 	bl	80109c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122cc:	4b23      	ldr	r3, [pc, #140]	@ (801235c <xTaskResumeAll+0x130>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d302      	bcc.n	80122dc <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80122d6:	4b22      	ldr	r3, [pc, #136]	@ (8012360 <xTaskResumeAll+0x134>)
 80122d8:	2201      	movs	r2, #1
 80122da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80122dc:	4b1c      	ldr	r3, [pc, #112]	@ (8012350 <xTaskResumeAll+0x124>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d1cc      	bne.n	801227e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d001      	beq.n	80122ee <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80122ea:	f000 fb73 	bl	80129d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80122ee:	4b1d      	ldr	r3, [pc, #116]	@ (8012364 <xTaskResumeAll+0x138>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d010      	beq.n	801231c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80122fa:	f000 f859 	bl	80123b0 <xTaskIncrementTick>
 80122fe:	4603      	mov	r3, r0
 8012300:	2b00      	cmp	r3, #0
 8012302:	d002      	beq.n	801230a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012304:	4b16      	ldr	r3, [pc, #88]	@ (8012360 <xTaskResumeAll+0x134>)
 8012306:	2201      	movs	r2, #1
 8012308:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	3b01      	subs	r3, #1
 801230e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d1f1      	bne.n	80122fa <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8012316:	4b13      	ldr	r3, [pc, #76]	@ (8012364 <xTaskResumeAll+0x138>)
 8012318:	2200      	movs	r2, #0
 801231a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801231c:	4b10      	ldr	r3, [pc, #64]	@ (8012360 <xTaskResumeAll+0x134>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d009      	beq.n	8012338 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012324:	2301      	movs	r3, #1
 8012326:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012328:	4b0f      	ldr	r3, [pc, #60]	@ (8012368 <xTaskResumeAll+0x13c>)
 801232a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801232e:	601a      	str	r2, [r3, #0]
 8012330:	f3bf 8f4f 	dsb	sy
 8012334:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012338:	f000 fef6 	bl	8013128 <vPortExitCritical>

	return xAlreadyYielded;
 801233c:	68bb      	ldr	r3, [r7, #8]
}
 801233e:	4618      	mov	r0, r3
 8012340:	3710      	adds	r7, #16
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	20001448 	.word	0x20001448
 801234c:	20001420 	.word	0x20001420
 8012350:	200013e0 	.word	0x200013e0
 8012354:	20001428 	.word	0x20001428
 8012358:	20001324 	.word	0x20001324
 801235c:	20001320 	.word	0x20001320
 8012360:	20001434 	.word	0x20001434
 8012364:	20001430 	.word	0x20001430
 8012368:	e000ed04 	.word	0xe000ed04

0801236c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801236c:	b480      	push	{r7}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012372:	4b05      	ldr	r3, [pc, #20]	@ (8012388 <xTaskGetTickCount+0x1c>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012378:	687b      	ldr	r3, [r7, #4]
}
 801237a:	4618      	mov	r0, r3
 801237c:	370c      	adds	r7, #12
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr
 8012386:	bf00      	nop
 8012388:	20001424 	.word	0x20001424

0801238c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012392:	f000 ff7b 	bl	801328c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012396:	2300      	movs	r3, #0
 8012398:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801239a:	4b04      	ldr	r3, [pc, #16]	@ (80123ac <xTaskGetTickCountFromISR+0x20>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80123a0:	683b      	ldr	r3, [r7, #0]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3708      	adds	r7, #8
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	20001424 	.word	0x20001424

080123b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b086      	sub	sp, #24
 80123b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80123b6:	2300      	movs	r3, #0
 80123b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123ba:	4b50      	ldr	r3, [pc, #320]	@ (80124fc <xTaskIncrementTick+0x14c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	f040 808b 	bne.w	80124da <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80123c4:	4b4e      	ldr	r3, [pc, #312]	@ (8012500 <xTaskIncrementTick+0x150>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	3301      	adds	r3, #1
 80123ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80123cc:	4a4c      	ldr	r2, [pc, #304]	@ (8012500 <xTaskIncrementTick+0x150>)
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d123      	bne.n	8012420 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80123d8:	4b4a      	ldr	r3, [pc, #296]	@ (8012504 <xTaskIncrementTick+0x154>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00d      	beq.n	80123fe <xTaskIncrementTick+0x4e>
	__asm volatile
 80123e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123e6:	b672      	cpsid	i
 80123e8:	f383 8811 	msr	BASEPRI, r3
 80123ec:	f3bf 8f6f 	isb	sy
 80123f0:	f3bf 8f4f 	dsb	sy
 80123f4:	b662      	cpsie	i
 80123f6:	603b      	str	r3, [r7, #0]
}
 80123f8:	bf00      	nop
 80123fa:	bf00      	nop
 80123fc:	e7fd      	b.n	80123fa <xTaskIncrementTick+0x4a>
 80123fe:	4b41      	ldr	r3, [pc, #260]	@ (8012504 <xTaskIncrementTick+0x154>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	60fb      	str	r3, [r7, #12]
 8012404:	4b40      	ldr	r3, [pc, #256]	@ (8012508 <xTaskIncrementTick+0x158>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	4a3e      	ldr	r2, [pc, #248]	@ (8012504 <xTaskIncrementTick+0x154>)
 801240a:	6013      	str	r3, [r2, #0]
 801240c:	4a3e      	ldr	r2, [pc, #248]	@ (8012508 <xTaskIncrementTick+0x158>)
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	6013      	str	r3, [r2, #0]
 8012412:	4b3e      	ldr	r3, [pc, #248]	@ (801250c <xTaskIncrementTick+0x15c>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	3301      	adds	r3, #1
 8012418:	4a3c      	ldr	r2, [pc, #240]	@ (801250c <xTaskIncrementTick+0x15c>)
 801241a:	6013      	str	r3, [r2, #0]
 801241c:	f000 fada 	bl	80129d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012420:	4b3b      	ldr	r3, [pc, #236]	@ (8012510 <xTaskIncrementTick+0x160>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	693a      	ldr	r2, [r7, #16]
 8012426:	429a      	cmp	r2, r3
 8012428:	d348      	bcc.n	80124bc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801242a:	4b36      	ldr	r3, [pc, #216]	@ (8012504 <xTaskIncrementTick+0x154>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d104      	bne.n	801243e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012434:	4b36      	ldr	r3, [pc, #216]	@ (8012510 <xTaskIncrementTick+0x160>)
 8012436:	f04f 32ff 	mov.w	r2, #4294967295
 801243a:	601a      	str	r2, [r3, #0]
					break;
 801243c:	e03e      	b.n	80124bc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801243e:	4b31      	ldr	r3, [pc, #196]	@ (8012504 <xTaskIncrementTick+0x154>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	68db      	ldr	r3, [r3, #12]
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801244e:	693a      	ldr	r2, [r7, #16]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	429a      	cmp	r2, r3
 8012454:	d203      	bcs.n	801245e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012456:	4a2e      	ldr	r2, [pc, #184]	@ (8012510 <xTaskIncrementTick+0x160>)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801245c:	e02e      	b.n	80124bc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	3304      	adds	r3, #4
 8012462:	4618      	mov	r0, r3
 8012464:	f7fe fb0c 	bl	8010a80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801246c:	2b00      	cmp	r3, #0
 801246e:	d004      	beq.n	801247a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	3318      	adds	r3, #24
 8012474:	4618      	mov	r0, r3
 8012476:	f7fe fb03 	bl	8010a80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801247e:	2201      	movs	r2, #1
 8012480:	409a      	lsls	r2, r3
 8012482:	4b24      	ldr	r3, [pc, #144]	@ (8012514 <xTaskIncrementTick+0x164>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	4313      	orrs	r3, r2
 8012488:	4a22      	ldr	r2, [pc, #136]	@ (8012514 <xTaskIncrementTick+0x164>)
 801248a:	6013      	str	r3, [r2, #0]
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012490:	4613      	mov	r3, r2
 8012492:	009b      	lsls	r3, r3, #2
 8012494:	4413      	add	r3, r2
 8012496:	009b      	lsls	r3, r3, #2
 8012498:	4a1f      	ldr	r2, [pc, #124]	@ (8012518 <xTaskIncrementTick+0x168>)
 801249a:	441a      	add	r2, r3
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	3304      	adds	r3, #4
 80124a0:	4619      	mov	r1, r3
 80124a2:	4610      	mov	r0, r2
 80124a4:	f7fe fa8f 	bl	80109c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124ac:	4b1b      	ldr	r3, [pc, #108]	@ (801251c <xTaskIncrementTick+0x16c>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d3b9      	bcc.n	801242a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80124b6:	2301      	movs	r3, #1
 80124b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80124ba:	e7b6      	b.n	801242a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80124bc:	4b17      	ldr	r3, [pc, #92]	@ (801251c <xTaskIncrementTick+0x16c>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124c2:	4915      	ldr	r1, [pc, #84]	@ (8012518 <xTaskIncrementTick+0x168>)
 80124c4:	4613      	mov	r3, r2
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	4413      	add	r3, r2
 80124ca:	009b      	lsls	r3, r3, #2
 80124cc:	440b      	add	r3, r1
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b01      	cmp	r3, #1
 80124d2:	d907      	bls.n	80124e4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80124d4:	2301      	movs	r3, #1
 80124d6:	617b      	str	r3, [r7, #20]
 80124d8:	e004      	b.n	80124e4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80124da:	4b11      	ldr	r3, [pc, #68]	@ (8012520 <xTaskIncrementTick+0x170>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	3301      	adds	r3, #1
 80124e0:	4a0f      	ldr	r2, [pc, #60]	@ (8012520 <xTaskIncrementTick+0x170>)
 80124e2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80124e4:	4b0f      	ldr	r3, [pc, #60]	@ (8012524 <xTaskIncrementTick+0x174>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d001      	beq.n	80124f0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80124ec:	2301      	movs	r3, #1
 80124ee:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80124f0:	697b      	ldr	r3, [r7, #20]
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3718      	adds	r7, #24
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	20001448 	.word	0x20001448
 8012500:	20001424 	.word	0x20001424
 8012504:	200013d8 	.word	0x200013d8
 8012508:	200013dc 	.word	0x200013dc
 801250c:	20001438 	.word	0x20001438
 8012510:	20001440 	.word	0x20001440
 8012514:	20001428 	.word	0x20001428
 8012518:	20001324 	.word	0x20001324
 801251c:	20001320 	.word	0x20001320
 8012520:	20001430 	.word	0x20001430
 8012524:	20001434 	.word	0x20001434

08012528 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b088      	sub	sp, #32
 801252c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801252e:	4b3b      	ldr	r3, [pc, #236]	@ (801261c <vTaskSwitchContext+0xf4>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d003      	beq.n	801253e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012536:	4b3a      	ldr	r3, [pc, #232]	@ (8012620 <vTaskSwitchContext+0xf8>)
 8012538:	2201      	movs	r2, #1
 801253a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801253c:	e069      	b.n	8012612 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 801253e:	4b38      	ldr	r3, [pc, #224]	@ (8012620 <vTaskSwitchContext+0xf8>)
 8012540:	2200      	movs	r2, #0
 8012542:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8012544:	4b37      	ldr	r3, [pc, #220]	@ (8012624 <vTaskSwitchContext+0xfc>)
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801254a:	61fb      	str	r3, [r7, #28]
 801254c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8012550:	61bb      	str	r3, [r7, #24]
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	69ba      	ldr	r2, [r7, #24]
 8012558:	429a      	cmp	r2, r3
 801255a:	d111      	bne.n	8012580 <vTaskSwitchContext+0x58>
 801255c:	69fb      	ldr	r3, [r7, #28]
 801255e:	3304      	adds	r3, #4
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	69ba      	ldr	r2, [r7, #24]
 8012564:	429a      	cmp	r2, r3
 8012566:	d10b      	bne.n	8012580 <vTaskSwitchContext+0x58>
 8012568:	69fb      	ldr	r3, [r7, #28]
 801256a:	3308      	adds	r3, #8
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	69ba      	ldr	r2, [r7, #24]
 8012570:	429a      	cmp	r2, r3
 8012572:	d105      	bne.n	8012580 <vTaskSwitchContext+0x58>
 8012574:	69fb      	ldr	r3, [r7, #28]
 8012576:	330c      	adds	r3, #12
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	69ba      	ldr	r2, [r7, #24]
 801257c:	429a      	cmp	r2, r3
 801257e:	d008      	beq.n	8012592 <vTaskSwitchContext+0x6a>
 8012580:	4b28      	ldr	r3, [pc, #160]	@ (8012624 <vTaskSwitchContext+0xfc>)
 8012582:	681a      	ldr	r2, [r3, #0]
 8012584:	4b27      	ldr	r3, [pc, #156]	@ (8012624 <vTaskSwitchContext+0xfc>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	3334      	adds	r3, #52	@ 0x34
 801258a:	4619      	mov	r1, r3
 801258c:	4610      	mov	r0, r2
 801258e:	f7f0 fb44 	bl	8002c1a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012592:	4b25      	ldr	r3, [pc, #148]	@ (8012628 <vTaskSwitchContext+0x100>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	fab3 f383 	clz	r3, r3
 801259e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80125a0:	7afb      	ldrb	r3, [r7, #11]
 80125a2:	f1c3 031f 	rsb	r3, r3, #31
 80125a6:	617b      	str	r3, [r7, #20]
 80125a8:	4920      	ldr	r1, [pc, #128]	@ (801262c <vTaskSwitchContext+0x104>)
 80125aa:	697a      	ldr	r2, [r7, #20]
 80125ac:	4613      	mov	r3, r2
 80125ae:	009b      	lsls	r3, r3, #2
 80125b0:	4413      	add	r3, r2
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	440b      	add	r3, r1
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d10d      	bne.n	80125d8 <vTaskSwitchContext+0xb0>
	__asm volatile
 80125bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125c0:	b672      	cpsid	i
 80125c2:	f383 8811 	msr	BASEPRI, r3
 80125c6:	f3bf 8f6f 	isb	sy
 80125ca:	f3bf 8f4f 	dsb	sy
 80125ce:	b662      	cpsie	i
 80125d0:	607b      	str	r3, [r7, #4]
}
 80125d2:	bf00      	nop
 80125d4:	bf00      	nop
 80125d6:	e7fd      	b.n	80125d4 <vTaskSwitchContext+0xac>
 80125d8:	697a      	ldr	r2, [r7, #20]
 80125da:	4613      	mov	r3, r2
 80125dc:	009b      	lsls	r3, r3, #2
 80125de:	4413      	add	r3, r2
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	4a12      	ldr	r2, [pc, #72]	@ (801262c <vTaskSwitchContext+0x104>)
 80125e4:	4413      	add	r3, r2
 80125e6:	613b      	str	r3, [r7, #16]
 80125e8:	693b      	ldr	r3, [r7, #16]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	685a      	ldr	r2, [r3, #4]
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	605a      	str	r2, [r3, #4]
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	685a      	ldr	r2, [r3, #4]
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	3308      	adds	r3, #8
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d104      	bne.n	8012608 <vTaskSwitchContext+0xe0>
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	685a      	ldr	r2, [r3, #4]
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	605a      	str	r2, [r3, #4]
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	68db      	ldr	r3, [r3, #12]
 801260e:	4a05      	ldr	r2, [pc, #20]	@ (8012624 <vTaskSwitchContext+0xfc>)
 8012610:	6013      	str	r3, [r2, #0]
}
 8012612:	bf00      	nop
 8012614:	3720      	adds	r7, #32
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	20001448 	.word	0x20001448
 8012620:	20001434 	.word	0x20001434
 8012624:	20001320 	.word	0x20001320
 8012628:	20001428 	.word	0x20001428
 801262c:	20001324 	.word	0x20001324

08012630 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d10d      	bne.n	801265c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8012640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012644:	b672      	cpsid	i
 8012646:	f383 8811 	msr	BASEPRI, r3
 801264a:	f3bf 8f6f 	isb	sy
 801264e:	f3bf 8f4f 	dsb	sy
 8012652:	b662      	cpsie	i
 8012654:	60fb      	str	r3, [r7, #12]
}
 8012656:	bf00      	nop
 8012658:	bf00      	nop
 801265a:	e7fd      	b.n	8012658 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801265c:	4b07      	ldr	r3, [pc, #28]	@ (801267c <vTaskPlaceOnEventList+0x4c>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	3318      	adds	r3, #24
 8012662:	4619      	mov	r1, r3
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f7fe f9d2 	bl	8010a0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801266a:	2101      	movs	r1, #1
 801266c:	6838      	ldr	r0, [r7, #0]
 801266e:	f000 fbaf 	bl	8012dd0 <prvAddCurrentTaskToDelayedList>
}
 8012672:	bf00      	nop
 8012674:	3710      	adds	r7, #16
 8012676:	46bd      	mov	sp, r7
 8012678:	bd80      	pop	{r7, pc}
 801267a:	bf00      	nop
 801267c:	20001320 	.word	0x20001320

08012680 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012680:	b580      	push	{r7, lr}
 8012682:	b086      	sub	sp, #24
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	68db      	ldr	r3, [r3, #12]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d10d      	bne.n	80126b2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8012696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801269a:	b672      	cpsid	i
 801269c:	f383 8811 	msr	BASEPRI, r3
 80126a0:	f3bf 8f6f 	isb	sy
 80126a4:	f3bf 8f4f 	dsb	sy
 80126a8:	b662      	cpsie	i
 80126aa:	60fb      	str	r3, [r7, #12]
}
 80126ac:	bf00      	nop
 80126ae:	bf00      	nop
 80126b0:	e7fd      	b.n	80126ae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	3318      	adds	r3, #24
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7fe f9e2 	bl	8010a80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126bc:	4b1d      	ldr	r3, [pc, #116]	@ (8012734 <xTaskRemoveFromEventList+0xb4>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d11c      	bne.n	80126fe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	3304      	adds	r3, #4
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7fe f9d9 	bl	8010a80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126d2:	2201      	movs	r2, #1
 80126d4:	409a      	lsls	r2, r3
 80126d6:	4b18      	ldr	r3, [pc, #96]	@ (8012738 <xTaskRemoveFromEventList+0xb8>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4313      	orrs	r3, r2
 80126dc:	4a16      	ldr	r2, [pc, #88]	@ (8012738 <xTaskRemoveFromEventList+0xb8>)
 80126de:	6013      	str	r3, [r2, #0]
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126e4:	4613      	mov	r3, r2
 80126e6:	009b      	lsls	r3, r3, #2
 80126e8:	4413      	add	r3, r2
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	4a13      	ldr	r2, [pc, #76]	@ (801273c <xTaskRemoveFromEventList+0xbc>)
 80126ee:	441a      	add	r2, r3
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	3304      	adds	r3, #4
 80126f4:	4619      	mov	r1, r3
 80126f6:	4610      	mov	r0, r2
 80126f8:	f7fe f965 	bl	80109c6 <vListInsertEnd>
 80126fc:	e005      	b.n	801270a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	3318      	adds	r3, #24
 8012702:	4619      	mov	r1, r3
 8012704:	480e      	ldr	r0, [pc, #56]	@ (8012740 <xTaskRemoveFromEventList+0xc0>)
 8012706:	f7fe f95e 	bl	80109c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801270e:	4b0d      	ldr	r3, [pc, #52]	@ (8012744 <xTaskRemoveFromEventList+0xc4>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012714:	429a      	cmp	r2, r3
 8012716:	d905      	bls.n	8012724 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012718:	2301      	movs	r3, #1
 801271a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801271c:	4b0a      	ldr	r3, [pc, #40]	@ (8012748 <xTaskRemoveFromEventList+0xc8>)
 801271e:	2201      	movs	r2, #1
 8012720:	601a      	str	r2, [r3, #0]
 8012722:	e001      	b.n	8012728 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8012724:	2300      	movs	r3, #0
 8012726:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012728:	697b      	ldr	r3, [r7, #20]
}
 801272a:	4618      	mov	r0, r3
 801272c:	3718      	adds	r7, #24
 801272e:	46bd      	mov	sp, r7
 8012730:	bd80      	pop	{r7, pc}
 8012732:	bf00      	nop
 8012734:	20001448 	.word	0x20001448
 8012738:	20001428 	.word	0x20001428
 801273c:	20001324 	.word	0x20001324
 8012740:	200013e0 	.word	0x200013e0
 8012744:	20001320 	.word	0x20001320
 8012748:	20001434 	.word	0x20001434

0801274c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012754:	4b06      	ldr	r3, [pc, #24]	@ (8012770 <vTaskInternalSetTimeOutState+0x24>)
 8012756:	681a      	ldr	r2, [r3, #0]
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801275c:	4b05      	ldr	r3, [pc, #20]	@ (8012774 <vTaskInternalSetTimeOutState+0x28>)
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	605a      	str	r2, [r3, #4]
}
 8012764:	bf00      	nop
 8012766:	370c      	adds	r7, #12
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr
 8012770:	20001438 	.word	0x20001438
 8012774:	20001424 	.word	0x20001424

08012778 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b088      	sub	sp, #32
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
 8012780:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d10d      	bne.n	80127a4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8012788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801278c:	b672      	cpsid	i
 801278e:	f383 8811 	msr	BASEPRI, r3
 8012792:	f3bf 8f6f 	isb	sy
 8012796:	f3bf 8f4f 	dsb	sy
 801279a:	b662      	cpsie	i
 801279c:	613b      	str	r3, [r7, #16]
}
 801279e:	bf00      	nop
 80127a0:	bf00      	nop
 80127a2:	e7fd      	b.n	80127a0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d10d      	bne.n	80127c6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80127aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127ae:	b672      	cpsid	i
 80127b0:	f383 8811 	msr	BASEPRI, r3
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	b662      	cpsie	i
 80127be:	60fb      	str	r3, [r7, #12]
}
 80127c0:	bf00      	nop
 80127c2:	bf00      	nop
 80127c4:	e7fd      	b.n	80127c2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80127c6:	f000 fc79 	bl	80130bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80127ca:	4b1d      	ldr	r3, [pc, #116]	@ (8012840 <xTaskCheckForTimeOut+0xc8>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	69ba      	ldr	r2, [r7, #24]
 80127d6:	1ad3      	subs	r3, r2, r3
 80127d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127e2:	d102      	bne.n	80127ea <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80127e4:	2300      	movs	r3, #0
 80127e6:	61fb      	str	r3, [r7, #28]
 80127e8:	e023      	b.n	8012832 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681a      	ldr	r2, [r3, #0]
 80127ee:	4b15      	ldr	r3, [pc, #84]	@ (8012844 <xTaskCheckForTimeOut+0xcc>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d007      	beq.n	8012806 <xTaskCheckForTimeOut+0x8e>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	69ba      	ldr	r2, [r7, #24]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d302      	bcc.n	8012806 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012800:	2301      	movs	r3, #1
 8012802:	61fb      	str	r3, [r7, #28]
 8012804:	e015      	b.n	8012832 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	697a      	ldr	r2, [r7, #20]
 801280c:	429a      	cmp	r2, r3
 801280e:	d20b      	bcs.n	8012828 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	1ad2      	subs	r2, r2, r3
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f7ff ff95 	bl	801274c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012822:	2300      	movs	r3, #0
 8012824:	61fb      	str	r3, [r7, #28]
 8012826:	e004      	b.n	8012832 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8012828:	683b      	ldr	r3, [r7, #0]
 801282a:	2200      	movs	r2, #0
 801282c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801282e:	2301      	movs	r3, #1
 8012830:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012832:	f000 fc79 	bl	8013128 <vPortExitCritical>

	return xReturn;
 8012836:	69fb      	ldr	r3, [r7, #28]
}
 8012838:	4618      	mov	r0, r3
 801283a:	3720      	adds	r7, #32
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	20001424 	.word	0x20001424
 8012844:	20001438 	.word	0x20001438

08012848 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012848:	b480      	push	{r7}
 801284a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801284c:	4b03      	ldr	r3, [pc, #12]	@ (801285c <vTaskMissedYield+0x14>)
 801284e:	2201      	movs	r2, #1
 8012850:	601a      	str	r2, [r3, #0]
}
 8012852:	bf00      	nop
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr
 801285c:	20001434 	.word	0x20001434

08012860 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012868:	f000 f854 	bl	8012914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801286c:	4b07      	ldr	r3, [pc, #28]	@ (801288c <prvIdleTask+0x2c>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b01      	cmp	r3, #1
 8012872:	d907      	bls.n	8012884 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012874:	4b06      	ldr	r3, [pc, #24]	@ (8012890 <prvIdleTask+0x30>)
 8012876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801287a:	601a      	str	r2, [r3, #0]
 801287c:	f3bf 8f4f 	dsb	sy
 8012880:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012884:	f7f0 f9c2 	bl	8002c0c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012888:	e7ee      	b.n	8012868 <prvIdleTask+0x8>
 801288a:	bf00      	nop
 801288c:	20001324 	.word	0x20001324
 8012890:	e000ed04 	.word	0xe000ed04

08012894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801289a:	2300      	movs	r3, #0
 801289c:	607b      	str	r3, [r7, #4]
 801289e:	e00c      	b.n	80128ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	4613      	mov	r3, r2
 80128a4:	009b      	lsls	r3, r3, #2
 80128a6:	4413      	add	r3, r2
 80128a8:	009b      	lsls	r3, r3, #2
 80128aa:	4a12      	ldr	r2, [pc, #72]	@ (80128f4 <prvInitialiseTaskLists+0x60>)
 80128ac:	4413      	add	r3, r2
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7fe f85c 	bl	801096c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	3301      	adds	r3, #1
 80128b8:	607b      	str	r3, [r7, #4]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2b06      	cmp	r3, #6
 80128be:	d9ef      	bls.n	80128a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80128c0:	480d      	ldr	r0, [pc, #52]	@ (80128f8 <prvInitialiseTaskLists+0x64>)
 80128c2:	f7fe f853 	bl	801096c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80128c6:	480d      	ldr	r0, [pc, #52]	@ (80128fc <prvInitialiseTaskLists+0x68>)
 80128c8:	f7fe f850 	bl	801096c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80128cc:	480c      	ldr	r0, [pc, #48]	@ (8012900 <prvInitialiseTaskLists+0x6c>)
 80128ce:	f7fe f84d 	bl	801096c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80128d2:	480c      	ldr	r0, [pc, #48]	@ (8012904 <prvInitialiseTaskLists+0x70>)
 80128d4:	f7fe f84a 	bl	801096c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80128d8:	480b      	ldr	r0, [pc, #44]	@ (8012908 <prvInitialiseTaskLists+0x74>)
 80128da:	f7fe f847 	bl	801096c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80128de:	4b0b      	ldr	r3, [pc, #44]	@ (801290c <prvInitialiseTaskLists+0x78>)
 80128e0:	4a05      	ldr	r2, [pc, #20]	@ (80128f8 <prvInitialiseTaskLists+0x64>)
 80128e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80128e4:	4b0a      	ldr	r3, [pc, #40]	@ (8012910 <prvInitialiseTaskLists+0x7c>)
 80128e6:	4a05      	ldr	r2, [pc, #20]	@ (80128fc <prvInitialiseTaskLists+0x68>)
 80128e8:	601a      	str	r2, [r3, #0]
}
 80128ea:	bf00      	nop
 80128ec:	3708      	adds	r7, #8
 80128ee:	46bd      	mov	sp, r7
 80128f0:	bd80      	pop	{r7, pc}
 80128f2:	bf00      	nop
 80128f4:	20001324 	.word	0x20001324
 80128f8:	200013b0 	.word	0x200013b0
 80128fc:	200013c4 	.word	0x200013c4
 8012900:	200013e0 	.word	0x200013e0
 8012904:	200013f4 	.word	0x200013f4
 8012908:	2000140c 	.word	0x2000140c
 801290c:	200013d8 	.word	0x200013d8
 8012910:	200013dc 	.word	0x200013dc

08012914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b082      	sub	sp, #8
 8012918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801291a:	e019      	b.n	8012950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801291c:	f000 fbce 	bl	80130bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012920:	4b10      	ldr	r3, [pc, #64]	@ (8012964 <prvCheckTasksWaitingTermination+0x50>)
 8012922:	68db      	ldr	r3, [r3, #12]
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	3304      	adds	r3, #4
 801292c:	4618      	mov	r0, r3
 801292e:	f7fe f8a7 	bl	8010a80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012932:	4b0d      	ldr	r3, [pc, #52]	@ (8012968 <prvCheckTasksWaitingTermination+0x54>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	3b01      	subs	r3, #1
 8012938:	4a0b      	ldr	r2, [pc, #44]	@ (8012968 <prvCheckTasksWaitingTermination+0x54>)
 801293a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801293c:	4b0b      	ldr	r3, [pc, #44]	@ (801296c <prvCheckTasksWaitingTermination+0x58>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	3b01      	subs	r3, #1
 8012942:	4a0a      	ldr	r2, [pc, #40]	@ (801296c <prvCheckTasksWaitingTermination+0x58>)
 8012944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012946:	f000 fbef 	bl	8013128 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 f810 	bl	8012970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012950:	4b06      	ldr	r3, [pc, #24]	@ (801296c <prvCheckTasksWaitingTermination+0x58>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1e1      	bne.n	801291c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012958:	bf00      	nop
 801295a:	bf00      	nop
 801295c:	3708      	adds	r7, #8
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	200013f4 	.word	0x200013f4
 8012968:	20001420 	.word	0x20001420
 801296c:	20001408 	.word	0x20001408

08012970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012970:	b580      	push	{r7, lr}
 8012972:	b084      	sub	sp, #16
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801297e:	2b00      	cmp	r3, #0
 8012980:	d108      	bne.n	8012994 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012986:	4618      	mov	r0, r3
 8012988:	f000 fd98 	bl	80134bc <vPortFree>
				vPortFree( pxTCB );
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 fd95 	bl	80134bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012992:	e01b      	b.n	80129cc <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801299a:	2b01      	cmp	r3, #1
 801299c:	d103      	bne.n	80129a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f000 fd8c 	bl	80134bc <vPortFree>
	}
 80129a4:	e012      	b.n	80129cc <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80129ac:	2b02      	cmp	r3, #2
 80129ae:	d00d      	beq.n	80129cc <prvDeleteTCB+0x5c>
	__asm volatile
 80129b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129b4:	b672      	cpsid	i
 80129b6:	f383 8811 	msr	BASEPRI, r3
 80129ba:	f3bf 8f6f 	isb	sy
 80129be:	f3bf 8f4f 	dsb	sy
 80129c2:	b662      	cpsie	i
 80129c4:	60fb      	str	r3, [r7, #12]
}
 80129c6:	bf00      	nop
 80129c8:	bf00      	nop
 80129ca:	e7fd      	b.n	80129c8 <prvDeleteTCB+0x58>
	}
 80129cc:	bf00      	nop
 80129ce:	3710      	adds	r7, #16
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80129d4:	b480      	push	{r7}
 80129d6:	b083      	sub	sp, #12
 80129d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80129da:	4b0c      	ldr	r3, [pc, #48]	@ (8012a0c <prvResetNextTaskUnblockTime+0x38>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d104      	bne.n	80129ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80129e4:	4b0a      	ldr	r3, [pc, #40]	@ (8012a10 <prvResetNextTaskUnblockTime+0x3c>)
 80129e6:	f04f 32ff 	mov.w	r2, #4294967295
 80129ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80129ec:	e008      	b.n	8012a00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129ee:	4b07      	ldr	r3, [pc, #28]	@ (8012a0c <prvResetNextTaskUnblockTime+0x38>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	4a04      	ldr	r2, [pc, #16]	@ (8012a10 <prvResetNextTaskUnblockTime+0x3c>)
 80129fe:	6013      	str	r3, [r2, #0]
}
 8012a00:	bf00      	nop
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr
 8012a0c:	200013d8 	.word	0x200013d8
 8012a10:	20001440 	.word	0x20001440

08012a14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8012a48 <xTaskGetSchedulerState+0x34>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d102      	bne.n	8012a28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012a22:	2301      	movs	r3, #1
 8012a24:	607b      	str	r3, [r7, #4]
 8012a26:	e008      	b.n	8012a3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a28:	4b08      	ldr	r3, [pc, #32]	@ (8012a4c <xTaskGetSchedulerState+0x38>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d102      	bne.n	8012a36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012a30:	2302      	movs	r3, #2
 8012a32:	607b      	str	r3, [r7, #4]
 8012a34:	e001      	b.n	8012a3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012a36:	2300      	movs	r3, #0
 8012a38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012a3a:	687b      	ldr	r3, [r7, #4]
	}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	370c      	adds	r7, #12
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr
 8012a48:	2000142c 	.word	0x2000142c
 8012a4c:	20001448 	.word	0x20001448

08012a50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b084      	sub	sp, #16
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d069      	beq.n	8012b3a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a6a:	4b36      	ldr	r3, [pc, #216]	@ (8012b44 <xTaskPriorityInherit+0xf4>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d259      	bcs.n	8012b28 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	699b      	ldr	r3, [r3, #24]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	db06      	blt.n	8012a8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a7c:	4b31      	ldr	r3, [pc, #196]	@ (8012b44 <xTaskPriorityInherit+0xf4>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a82:	f1c3 0207 	rsb	r2, r3, #7
 8012a86:	68bb      	ldr	r3, [r7, #8]
 8012a88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	6959      	ldr	r1, [r3, #20]
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a92:	4613      	mov	r3, r2
 8012a94:	009b      	lsls	r3, r3, #2
 8012a96:	4413      	add	r3, r2
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	4a2b      	ldr	r2, [pc, #172]	@ (8012b48 <xTaskPriorityInherit+0xf8>)
 8012a9c:	4413      	add	r3, r2
 8012a9e:	4299      	cmp	r1, r3
 8012aa0:	d13a      	bne.n	8012b18 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	3304      	adds	r3, #4
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7fd ffea 	bl	8010a80 <uxListRemove>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d115      	bne.n	8012ade <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ab6:	4924      	ldr	r1, [pc, #144]	@ (8012b48 <xTaskPriorityInherit+0xf8>)
 8012ab8:	4613      	mov	r3, r2
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	4413      	add	r3, r2
 8012abe:	009b      	lsls	r3, r3, #2
 8012ac0:	440b      	add	r3, r1
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d10a      	bne.n	8012ade <xTaskPriorityInherit+0x8e>
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012acc:	2201      	movs	r2, #1
 8012ace:	fa02 f303 	lsl.w	r3, r2, r3
 8012ad2:	43da      	mvns	r2, r3
 8012ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8012b4c <xTaskPriorityInherit+0xfc>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4013      	ands	r3, r2
 8012ada:	4a1c      	ldr	r2, [pc, #112]	@ (8012b4c <xTaskPriorityInherit+0xfc>)
 8012adc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012ade:	4b19      	ldr	r3, [pc, #100]	@ (8012b44 <xTaskPriorityInherit+0xf4>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aec:	2201      	movs	r2, #1
 8012aee:	409a      	lsls	r2, r3
 8012af0:	4b16      	ldr	r3, [pc, #88]	@ (8012b4c <xTaskPriorityInherit+0xfc>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	4313      	orrs	r3, r2
 8012af6:	4a15      	ldr	r2, [pc, #84]	@ (8012b4c <xTaskPriorityInherit+0xfc>)
 8012af8:	6013      	str	r3, [r2, #0]
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012afe:	4613      	mov	r3, r2
 8012b00:	009b      	lsls	r3, r3, #2
 8012b02:	4413      	add	r3, r2
 8012b04:	009b      	lsls	r3, r3, #2
 8012b06:	4a10      	ldr	r2, [pc, #64]	@ (8012b48 <xTaskPriorityInherit+0xf8>)
 8012b08:	441a      	add	r2, r3
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	3304      	adds	r3, #4
 8012b0e:	4619      	mov	r1, r3
 8012b10:	4610      	mov	r0, r2
 8012b12:	f7fd ff58 	bl	80109c6 <vListInsertEnd>
 8012b16:	e004      	b.n	8012b22 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012b18:	4b0a      	ldr	r3, [pc, #40]	@ (8012b44 <xTaskPriorityInherit+0xf4>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012b22:	2301      	movs	r3, #1
 8012b24:	60fb      	str	r3, [r7, #12]
 8012b26:	e008      	b.n	8012b3a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012b2c:	4b05      	ldr	r3, [pc, #20]	@ (8012b44 <xTaskPriorityInherit+0xf4>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d201      	bcs.n	8012b3a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012b36:	2301      	movs	r3, #1
 8012b38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
	}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3710      	adds	r7, #16
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}
 8012b44:	20001320 	.word	0x20001320
 8012b48:	20001324 	.word	0x20001324
 8012b4c:	20001428 	.word	0x20001428

08012b50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b086      	sub	sp, #24
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d074      	beq.n	8012c50 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012b66:	4b3d      	ldr	r3, [pc, #244]	@ (8012c5c <xTaskPriorityDisinherit+0x10c>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	693a      	ldr	r2, [r7, #16]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d00d      	beq.n	8012b8c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8012b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b74:	b672      	cpsid	i
 8012b76:	f383 8811 	msr	BASEPRI, r3
 8012b7a:	f3bf 8f6f 	isb	sy
 8012b7e:	f3bf 8f4f 	dsb	sy
 8012b82:	b662      	cpsie	i
 8012b84:	60fb      	str	r3, [r7, #12]
}
 8012b86:	bf00      	nop
 8012b88:	bf00      	nop
 8012b8a:	e7fd      	b.n	8012b88 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10d      	bne.n	8012bb0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8012b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b98:	b672      	cpsid	i
 8012b9a:	f383 8811 	msr	BASEPRI, r3
 8012b9e:	f3bf 8f6f 	isb	sy
 8012ba2:	f3bf 8f4f 	dsb	sy
 8012ba6:	b662      	cpsie	i
 8012ba8:	60bb      	str	r3, [r7, #8]
}
 8012baa:	bf00      	nop
 8012bac:	bf00      	nop
 8012bae:	e7fd      	b.n	8012bac <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012bb4:	1e5a      	subs	r2, r3, #1
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d044      	beq.n	8012c50 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012bc6:	693b      	ldr	r3, [r7, #16]
 8012bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d140      	bne.n	8012c50 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	3304      	adds	r3, #4
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	f7fd ff54 	bl	8010a80 <uxListRemove>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d115      	bne.n	8012c0a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012be2:	491f      	ldr	r1, [pc, #124]	@ (8012c60 <xTaskPriorityDisinherit+0x110>)
 8012be4:	4613      	mov	r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	4413      	add	r3, r2
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	440b      	add	r3, r1
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d10a      	bne.n	8012c0a <xTaskPriorityDisinherit+0xba>
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8012bfe:	43da      	mvns	r2, r3
 8012c00:	4b18      	ldr	r3, [pc, #96]	@ (8012c64 <xTaskPriorityDisinherit+0x114>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	4013      	ands	r3, r2
 8012c06:	4a17      	ldr	r2, [pc, #92]	@ (8012c64 <xTaskPriorityDisinherit+0x114>)
 8012c08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c16:	f1c3 0207 	rsb	r2, r3, #7
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c22:	2201      	movs	r2, #1
 8012c24:	409a      	lsls	r2, r3
 8012c26:	4b0f      	ldr	r3, [pc, #60]	@ (8012c64 <xTaskPriorityDisinherit+0x114>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	4313      	orrs	r3, r2
 8012c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8012c64 <xTaskPriorityDisinherit+0x114>)
 8012c2e:	6013      	str	r3, [r2, #0]
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c34:	4613      	mov	r3, r2
 8012c36:	009b      	lsls	r3, r3, #2
 8012c38:	4413      	add	r3, r2
 8012c3a:	009b      	lsls	r3, r3, #2
 8012c3c:	4a08      	ldr	r2, [pc, #32]	@ (8012c60 <xTaskPriorityDisinherit+0x110>)
 8012c3e:	441a      	add	r2, r3
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	3304      	adds	r3, #4
 8012c44:	4619      	mov	r1, r3
 8012c46:	4610      	mov	r0, r2
 8012c48:	f7fd febd 	bl	80109c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012c50:	697b      	ldr	r3, [r7, #20]
	}
 8012c52:	4618      	mov	r0, r3
 8012c54:	3718      	adds	r7, #24
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	20001320 	.word	0x20001320
 8012c60:	20001324 	.word	0x20001324
 8012c64:	20001428 	.word	0x20001428

08012c68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b088      	sub	sp, #32
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012c76:	2301      	movs	r3, #1
 8012c78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f000 8089 	beq.w	8012d94 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012c82:	69bb      	ldr	r3, [r7, #24]
 8012c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d10d      	bne.n	8012ca6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8012c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c8e:	b672      	cpsid	i
 8012c90:	f383 8811 	msr	BASEPRI, r3
 8012c94:	f3bf 8f6f 	isb	sy
 8012c98:	f3bf 8f4f 	dsb	sy
 8012c9c:	b662      	cpsie	i
 8012c9e:	60fb      	str	r3, [r7, #12]
}
 8012ca0:	bf00      	nop
 8012ca2:	bf00      	nop
 8012ca4:	e7fd      	b.n	8012ca2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012caa:	683a      	ldr	r2, [r7, #0]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d902      	bls.n	8012cb6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	61fb      	str	r3, [r7, #28]
 8012cb4:	e002      	b.n	8012cbc <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012cba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cc0:	69fa      	ldr	r2, [r7, #28]
 8012cc2:	429a      	cmp	r2, r3
 8012cc4:	d066      	beq.n	8012d94 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012cca:	697a      	ldr	r2, [r7, #20]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d161      	bne.n	8012d94 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012cd0:	4b32      	ldr	r3, [pc, #200]	@ (8012d9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	69ba      	ldr	r2, [r7, #24]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d10d      	bne.n	8012cf6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8012cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cde:	b672      	cpsid	i
 8012ce0:	f383 8811 	msr	BASEPRI, r3
 8012ce4:	f3bf 8f6f 	isb	sy
 8012ce8:	f3bf 8f4f 	dsb	sy
 8012cec:	b662      	cpsie	i
 8012cee:	60bb      	str	r3, [r7, #8]
}
 8012cf0:	bf00      	nop
 8012cf2:	bf00      	nop
 8012cf4:	e7fd      	b.n	8012cf2 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cfa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	69fa      	ldr	r2, [r7, #28]
 8012d00:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012d02:	69bb      	ldr	r3, [r7, #24]
 8012d04:	699b      	ldr	r3, [r3, #24]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	db04      	blt.n	8012d14 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	f1c3 0207 	rsb	r2, r3, #7
 8012d10:	69bb      	ldr	r3, [r7, #24]
 8012d12:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	6959      	ldr	r1, [r3, #20]
 8012d18:	693a      	ldr	r2, [r7, #16]
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	009b      	lsls	r3, r3, #2
 8012d1e:	4413      	add	r3, r2
 8012d20:	009b      	lsls	r3, r3, #2
 8012d22:	4a1f      	ldr	r2, [pc, #124]	@ (8012da0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012d24:	4413      	add	r3, r2
 8012d26:	4299      	cmp	r1, r3
 8012d28:	d134      	bne.n	8012d94 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	3304      	adds	r3, #4
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7fd fea6 	bl	8010a80 <uxListRemove>
 8012d34:	4603      	mov	r3, r0
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d115      	bne.n	8012d66 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d3e:	4918      	ldr	r1, [pc, #96]	@ (8012da0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012d40:	4613      	mov	r3, r2
 8012d42:	009b      	lsls	r3, r3, #2
 8012d44:	4413      	add	r3, r2
 8012d46:	009b      	lsls	r3, r3, #2
 8012d48:	440b      	add	r3, r1
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d10a      	bne.n	8012d66 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d54:	2201      	movs	r2, #1
 8012d56:	fa02 f303 	lsl.w	r3, r2, r3
 8012d5a:	43da      	mvns	r2, r3
 8012d5c:	4b11      	ldr	r3, [pc, #68]	@ (8012da4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	4013      	ands	r3, r2
 8012d62:	4a10      	ldr	r2, [pc, #64]	@ (8012da4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012d64:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d6a:	2201      	movs	r2, #1
 8012d6c:	409a      	lsls	r2, r3
 8012d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012da4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	4313      	orrs	r3, r2
 8012d74:	4a0b      	ldr	r2, [pc, #44]	@ (8012da4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012d76:	6013      	str	r3, [r2, #0]
 8012d78:	69bb      	ldr	r3, [r7, #24]
 8012d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	009b      	lsls	r3, r3, #2
 8012d80:	4413      	add	r3, r2
 8012d82:	009b      	lsls	r3, r3, #2
 8012d84:	4a06      	ldr	r2, [pc, #24]	@ (8012da0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012d86:	441a      	add	r2, r3
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	4610      	mov	r0, r2
 8012d90:	f7fd fe19 	bl	80109c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012d94:	bf00      	nop
 8012d96:	3720      	adds	r7, #32
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	20001320 	.word	0x20001320
 8012da0:	20001324 	.word	0x20001324
 8012da4:	20001428 	.word	0x20001428

08012da8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012da8:	b480      	push	{r7}
 8012daa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012dac:	4b07      	ldr	r3, [pc, #28]	@ (8012dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d004      	beq.n	8012dbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012db4:	4b05      	ldr	r3, [pc, #20]	@ (8012dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012dba:	3201      	adds	r2, #1
 8012dbc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8012dbe:	4b03      	ldr	r3, [pc, #12]	@ (8012dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
	}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr
 8012dcc:	20001320 	.word	0x20001320

08012dd0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012dda:	4b29      	ldr	r3, [pc, #164]	@ (8012e80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012de0:	4b28      	ldr	r3, [pc, #160]	@ (8012e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	3304      	adds	r3, #4
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7fd fe4a 	bl	8010a80 <uxListRemove>
 8012dec:	4603      	mov	r3, r0
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d10b      	bne.n	8012e0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012df2:	4b24      	ldr	r3, [pc, #144]	@ (8012e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012df8:	2201      	movs	r2, #1
 8012dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8012dfe:	43da      	mvns	r2, r3
 8012e00:	4b21      	ldr	r3, [pc, #132]	@ (8012e88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4013      	ands	r3, r2
 8012e06:	4a20      	ldr	r2, [pc, #128]	@ (8012e88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012e08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e10:	d10a      	bne.n	8012e28 <prvAddCurrentTaskToDelayedList+0x58>
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d007      	beq.n	8012e28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e18:	4b1a      	ldr	r3, [pc, #104]	@ (8012e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	3304      	adds	r3, #4
 8012e1e:	4619      	mov	r1, r3
 8012e20:	481a      	ldr	r0, [pc, #104]	@ (8012e8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8012e22:	f7fd fdd0 	bl	80109c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012e26:	e026      	b.n	8012e76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012e28:	68fa      	ldr	r2, [r7, #12]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012e30:	4b14      	ldr	r3, [pc, #80]	@ (8012e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	68ba      	ldr	r2, [r7, #8]
 8012e36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012e38:	68ba      	ldr	r2, [r7, #8]
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d209      	bcs.n	8012e54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e40:	4b13      	ldr	r3, [pc, #76]	@ (8012e90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	4b0f      	ldr	r3, [pc, #60]	@ (8012e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	3304      	adds	r3, #4
 8012e4a:	4619      	mov	r1, r3
 8012e4c:	4610      	mov	r0, r2
 8012e4e:	f7fd fdde 	bl	8010a0e <vListInsert>
}
 8012e52:	e010      	b.n	8012e76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e54:	4b0f      	ldr	r3, [pc, #60]	@ (8012e94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012e56:	681a      	ldr	r2, [r3, #0]
 8012e58:	4b0a      	ldr	r3, [pc, #40]	@ (8012e84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	3304      	adds	r3, #4
 8012e5e:	4619      	mov	r1, r3
 8012e60:	4610      	mov	r0, r2
 8012e62:	f7fd fdd4 	bl	8010a0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012e66:	4b0c      	ldr	r3, [pc, #48]	@ (8012e98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	68ba      	ldr	r2, [r7, #8]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d202      	bcs.n	8012e76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012e70:	4a09      	ldr	r2, [pc, #36]	@ (8012e98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	6013      	str	r3, [r2, #0]
}
 8012e76:	bf00      	nop
 8012e78:	3710      	adds	r7, #16
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	20001424 	.word	0x20001424
 8012e84:	20001320 	.word	0x20001320
 8012e88:	20001428 	.word	0x20001428
 8012e8c:	2000140c 	.word	0x2000140c
 8012e90:	200013dc 	.word	0x200013dc
 8012e94:	200013d8 	.word	0x200013d8
 8012e98:	20001440 	.word	0x20001440

08012e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b085      	sub	sp, #20
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	3b04      	subs	r3, #4
 8012eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	3b04      	subs	r3, #4
 8012eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012ebc:	68bb      	ldr	r3, [r7, #8]
 8012ebe:	f023 0201 	bic.w	r2, r3, #1
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	3b04      	subs	r3, #4
 8012eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012ecc:	4a0c      	ldr	r2, [pc, #48]	@ (8012f00 <pxPortInitialiseStack+0x64>)
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	3b14      	subs	r3, #20
 8012ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	3b04      	subs	r3, #4
 8012ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	f06f 0202 	mvn.w	r2, #2
 8012eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	3b20      	subs	r3, #32
 8012ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3714      	adds	r7, #20
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efe:	4770      	bx	lr
 8012f00:	08012f05 	.word	0x08012f05

08012f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012f04:	b480      	push	{r7}
 8012f06:	b085      	sub	sp, #20
 8012f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012f0e:	4b15      	ldr	r3, [pc, #84]	@ (8012f64 <prvTaskExitError+0x60>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f16:	d00d      	beq.n	8012f34 <prvTaskExitError+0x30>
	__asm volatile
 8012f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f1c:	b672      	cpsid	i
 8012f1e:	f383 8811 	msr	BASEPRI, r3
 8012f22:	f3bf 8f6f 	isb	sy
 8012f26:	f3bf 8f4f 	dsb	sy
 8012f2a:	b662      	cpsie	i
 8012f2c:	60fb      	str	r3, [r7, #12]
}
 8012f2e:	bf00      	nop
 8012f30:	bf00      	nop
 8012f32:	e7fd      	b.n	8012f30 <prvTaskExitError+0x2c>
	__asm volatile
 8012f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f38:	b672      	cpsid	i
 8012f3a:	f383 8811 	msr	BASEPRI, r3
 8012f3e:	f3bf 8f6f 	isb	sy
 8012f42:	f3bf 8f4f 	dsb	sy
 8012f46:	b662      	cpsie	i
 8012f48:	60bb      	str	r3, [r7, #8]
}
 8012f4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012f4c:	bf00      	nop
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d0fc      	beq.n	8012f4e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012f54:	bf00      	nop
 8012f56:	bf00      	nop
 8012f58:	3714      	adds	r7, #20
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f60:	4770      	bx	lr
 8012f62:	bf00      	nop
 8012f64:	20000088 	.word	0x20000088
	...

08012f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012f70:	4b07      	ldr	r3, [pc, #28]	@ (8012f90 <pxCurrentTCBConst2>)
 8012f72:	6819      	ldr	r1, [r3, #0]
 8012f74:	6808      	ldr	r0, [r1, #0]
 8012f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f7a:	f380 8809 	msr	PSP, r0
 8012f7e:	f3bf 8f6f 	isb	sy
 8012f82:	f04f 0000 	mov.w	r0, #0
 8012f86:	f380 8811 	msr	BASEPRI, r0
 8012f8a:	4770      	bx	lr
 8012f8c:	f3af 8000 	nop.w

08012f90 <pxCurrentTCBConst2>:
 8012f90:	20001320 	.word	0x20001320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012f94:	bf00      	nop
 8012f96:	bf00      	nop

08012f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012f98:	4808      	ldr	r0, [pc, #32]	@ (8012fbc <prvPortStartFirstTask+0x24>)
 8012f9a:	6800      	ldr	r0, [r0, #0]
 8012f9c:	6800      	ldr	r0, [r0, #0]
 8012f9e:	f380 8808 	msr	MSP, r0
 8012fa2:	f04f 0000 	mov.w	r0, #0
 8012fa6:	f380 8814 	msr	CONTROL, r0
 8012faa:	b662      	cpsie	i
 8012fac:	b661      	cpsie	f
 8012fae:	f3bf 8f4f 	dsb	sy
 8012fb2:	f3bf 8f6f 	isb	sy
 8012fb6:	df00      	svc	0
 8012fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012fba:	bf00      	nop
 8012fbc:	e000ed08 	.word	0xe000ed08

08012fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012fc6:	4b37      	ldr	r3, [pc, #220]	@ (80130a4 <xPortStartScheduler+0xe4>)
 8012fc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	781b      	ldrb	r3, [r3, #0]
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	22ff      	movs	r2, #255	@ 0xff
 8012fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	781b      	ldrb	r3, [r3, #0]
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012fe0:	78fb      	ldrb	r3, [r7, #3]
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012fe8:	b2da      	uxtb	r2, r3
 8012fea:	4b2f      	ldr	r3, [pc, #188]	@ (80130a8 <xPortStartScheduler+0xe8>)
 8012fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012fee:	4b2f      	ldr	r3, [pc, #188]	@ (80130ac <xPortStartScheduler+0xec>)
 8012ff0:	2207      	movs	r2, #7
 8012ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ff4:	e009      	b.n	801300a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80130ac <xPortStartScheduler+0xec>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	3b01      	subs	r3, #1
 8012ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80130ac <xPortStartScheduler+0xec>)
 8012ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013000:	78fb      	ldrb	r3, [r7, #3]
 8013002:	b2db      	uxtb	r3, r3
 8013004:	005b      	lsls	r3, r3, #1
 8013006:	b2db      	uxtb	r3, r3
 8013008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801300a:	78fb      	ldrb	r3, [r7, #3]
 801300c:	b2db      	uxtb	r3, r3
 801300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013012:	2b80      	cmp	r3, #128	@ 0x80
 8013014:	d0ef      	beq.n	8012ff6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013016:	4b25      	ldr	r3, [pc, #148]	@ (80130ac <xPortStartScheduler+0xec>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	f1c3 0307 	rsb	r3, r3, #7
 801301e:	2b04      	cmp	r3, #4
 8013020:	d00d      	beq.n	801303e <xPortStartScheduler+0x7e>
	__asm volatile
 8013022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013026:	b672      	cpsid	i
 8013028:	f383 8811 	msr	BASEPRI, r3
 801302c:	f3bf 8f6f 	isb	sy
 8013030:	f3bf 8f4f 	dsb	sy
 8013034:	b662      	cpsie	i
 8013036:	60bb      	str	r3, [r7, #8]
}
 8013038:	bf00      	nop
 801303a:	bf00      	nop
 801303c:	e7fd      	b.n	801303a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801303e:	4b1b      	ldr	r3, [pc, #108]	@ (80130ac <xPortStartScheduler+0xec>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	021b      	lsls	r3, r3, #8
 8013044:	4a19      	ldr	r2, [pc, #100]	@ (80130ac <xPortStartScheduler+0xec>)
 8013046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013048:	4b18      	ldr	r3, [pc, #96]	@ (80130ac <xPortStartScheduler+0xec>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013050:	4a16      	ldr	r2, [pc, #88]	@ (80130ac <xPortStartScheduler+0xec>)
 8013052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	b2da      	uxtb	r2, r3
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801305c:	4b14      	ldr	r3, [pc, #80]	@ (80130b0 <xPortStartScheduler+0xf0>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4a13      	ldr	r2, [pc, #76]	@ (80130b0 <xPortStartScheduler+0xf0>)
 8013062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013068:	4b11      	ldr	r3, [pc, #68]	@ (80130b0 <xPortStartScheduler+0xf0>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4a10      	ldr	r2, [pc, #64]	@ (80130b0 <xPortStartScheduler+0xf0>)
 801306e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013074:	f000 f8dc 	bl	8013230 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013078:	4b0e      	ldr	r3, [pc, #56]	@ (80130b4 <xPortStartScheduler+0xf4>)
 801307a:	2200      	movs	r2, #0
 801307c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801307e:	f000 f8fb 	bl	8013278 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013082:	4b0d      	ldr	r3, [pc, #52]	@ (80130b8 <xPortStartScheduler+0xf8>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	4a0c      	ldr	r2, [pc, #48]	@ (80130b8 <xPortStartScheduler+0xf8>)
 8013088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801308c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801308e:	f7ff ff83 	bl	8012f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013092:	f7ff fa49 	bl	8012528 <vTaskSwitchContext>
	prvTaskExitError();
 8013096:	f7ff ff35 	bl	8012f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801309a:	2300      	movs	r3, #0
}
 801309c:	4618      	mov	r0, r3
 801309e:	3710      	adds	r7, #16
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	e000e400 	.word	0xe000e400
 80130a8:	2000144c 	.word	0x2000144c
 80130ac:	20001450 	.word	0x20001450
 80130b0:	e000ed20 	.word	0xe000ed20
 80130b4:	20000088 	.word	0x20000088
 80130b8:	e000ef34 	.word	0xe000ef34

080130bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80130bc:	b480      	push	{r7}
 80130be:	b083      	sub	sp, #12
 80130c0:	af00      	add	r7, sp, #0
	__asm volatile
 80130c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130c6:	b672      	cpsid	i
 80130c8:	f383 8811 	msr	BASEPRI, r3
 80130cc:	f3bf 8f6f 	isb	sy
 80130d0:	f3bf 8f4f 	dsb	sy
 80130d4:	b662      	cpsie	i
 80130d6:	607b      	str	r3, [r7, #4]
}
 80130d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80130da:	4b11      	ldr	r3, [pc, #68]	@ (8013120 <vPortEnterCritical+0x64>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	3301      	adds	r3, #1
 80130e0:	4a0f      	ldr	r2, [pc, #60]	@ (8013120 <vPortEnterCritical+0x64>)
 80130e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80130e4:	4b0e      	ldr	r3, [pc, #56]	@ (8013120 <vPortEnterCritical+0x64>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d112      	bne.n	8013112 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80130ec:	4b0d      	ldr	r3, [pc, #52]	@ (8013124 <vPortEnterCritical+0x68>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	b2db      	uxtb	r3, r3
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00d      	beq.n	8013112 <vPortEnterCritical+0x56>
	__asm volatile
 80130f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130fa:	b672      	cpsid	i
 80130fc:	f383 8811 	msr	BASEPRI, r3
 8013100:	f3bf 8f6f 	isb	sy
 8013104:	f3bf 8f4f 	dsb	sy
 8013108:	b662      	cpsie	i
 801310a:	603b      	str	r3, [r7, #0]
}
 801310c:	bf00      	nop
 801310e:	bf00      	nop
 8013110:	e7fd      	b.n	801310e <vPortEnterCritical+0x52>
	}
}
 8013112:	bf00      	nop
 8013114:	370c      	adds	r7, #12
 8013116:	46bd      	mov	sp, r7
 8013118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311c:	4770      	bx	lr
 801311e:	bf00      	nop
 8013120:	20000088 	.word	0x20000088
 8013124:	e000ed04 	.word	0xe000ed04

08013128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013128:	b480      	push	{r7}
 801312a:	b083      	sub	sp, #12
 801312c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801312e:	4b13      	ldr	r3, [pc, #76]	@ (801317c <vPortExitCritical+0x54>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d10d      	bne.n	8013152 <vPortExitCritical+0x2a>
	__asm volatile
 8013136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801313a:	b672      	cpsid	i
 801313c:	f383 8811 	msr	BASEPRI, r3
 8013140:	f3bf 8f6f 	isb	sy
 8013144:	f3bf 8f4f 	dsb	sy
 8013148:	b662      	cpsie	i
 801314a:	607b      	str	r3, [r7, #4]
}
 801314c:	bf00      	nop
 801314e:	bf00      	nop
 8013150:	e7fd      	b.n	801314e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013152:	4b0a      	ldr	r3, [pc, #40]	@ (801317c <vPortExitCritical+0x54>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	3b01      	subs	r3, #1
 8013158:	4a08      	ldr	r2, [pc, #32]	@ (801317c <vPortExitCritical+0x54>)
 801315a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801315c:	4b07      	ldr	r3, [pc, #28]	@ (801317c <vPortExitCritical+0x54>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d105      	bne.n	8013170 <vPortExitCritical+0x48>
 8013164:	2300      	movs	r3, #0
 8013166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	f383 8811 	msr	BASEPRI, r3
}
 801316e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013170:	bf00      	nop
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr
 801317c:	20000088 	.word	0x20000088

08013180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013180:	f3ef 8009 	mrs	r0, PSP
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	4b15      	ldr	r3, [pc, #84]	@ (80131e0 <pxCurrentTCBConst>)
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	f01e 0f10 	tst.w	lr, #16
 8013190:	bf08      	it	eq
 8013192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319a:	6010      	str	r0, [r2, #0]
 801319c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80131a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80131a4:	b672      	cpsid	i
 80131a6:	f380 8811 	msr	BASEPRI, r0
 80131aa:	f3bf 8f4f 	dsb	sy
 80131ae:	f3bf 8f6f 	isb	sy
 80131b2:	b662      	cpsie	i
 80131b4:	f7ff f9b8 	bl	8012528 <vTaskSwitchContext>
 80131b8:	f04f 0000 	mov.w	r0, #0
 80131bc:	f380 8811 	msr	BASEPRI, r0
 80131c0:	bc09      	pop	{r0, r3}
 80131c2:	6819      	ldr	r1, [r3, #0]
 80131c4:	6808      	ldr	r0, [r1, #0]
 80131c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ca:	f01e 0f10 	tst.w	lr, #16
 80131ce:	bf08      	it	eq
 80131d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80131d4:	f380 8809 	msr	PSP, r0
 80131d8:	f3bf 8f6f 	isb	sy
 80131dc:	4770      	bx	lr
 80131de:	bf00      	nop

080131e0 <pxCurrentTCBConst>:
 80131e0:	20001320 	.word	0x20001320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80131e4:	bf00      	nop
 80131e6:	bf00      	nop

080131e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
	__asm volatile
 80131ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131f2:	b672      	cpsid	i
 80131f4:	f383 8811 	msr	BASEPRI, r3
 80131f8:	f3bf 8f6f 	isb	sy
 80131fc:	f3bf 8f4f 	dsb	sy
 8013200:	b662      	cpsie	i
 8013202:	607b      	str	r3, [r7, #4]
}
 8013204:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013206:	f7ff f8d3 	bl	80123b0 <xTaskIncrementTick>
 801320a:	4603      	mov	r3, r0
 801320c:	2b00      	cmp	r3, #0
 801320e:	d003      	beq.n	8013218 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013210:	4b06      	ldr	r3, [pc, #24]	@ (801322c <SysTick_Handler+0x44>)
 8013212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013216:	601a      	str	r2, [r3, #0]
 8013218:	2300      	movs	r3, #0
 801321a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	f383 8811 	msr	BASEPRI, r3
}
 8013222:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013224:	bf00      	nop
 8013226:	3708      	adds	r7, #8
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	e000ed04 	.word	0xe000ed04

08013230 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013230:	b480      	push	{r7}
 8013232:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013234:	4b0b      	ldr	r3, [pc, #44]	@ (8013264 <vPortSetupTimerInterrupt+0x34>)
 8013236:	2200      	movs	r2, #0
 8013238:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801323a:	4b0b      	ldr	r3, [pc, #44]	@ (8013268 <vPortSetupTimerInterrupt+0x38>)
 801323c:	2200      	movs	r2, #0
 801323e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013240:	4b0a      	ldr	r3, [pc, #40]	@ (801326c <vPortSetupTimerInterrupt+0x3c>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	4a0a      	ldr	r2, [pc, #40]	@ (8013270 <vPortSetupTimerInterrupt+0x40>)
 8013246:	fba2 2303 	umull	r2, r3, r2, r3
 801324a:	099b      	lsrs	r3, r3, #6
 801324c:	4a09      	ldr	r2, [pc, #36]	@ (8013274 <vPortSetupTimerInterrupt+0x44>)
 801324e:	3b01      	subs	r3, #1
 8013250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013252:	4b04      	ldr	r3, [pc, #16]	@ (8013264 <vPortSetupTimerInterrupt+0x34>)
 8013254:	2207      	movs	r2, #7
 8013256:	601a      	str	r2, [r3, #0]
}
 8013258:	bf00      	nop
 801325a:	46bd      	mov	sp, r7
 801325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013260:	4770      	bx	lr
 8013262:	bf00      	nop
 8013264:	e000e010 	.word	0xe000e010
 8013268:	e000e018 	.word	0xe000e018
 801326c:	20000040 	.word	0x20000040
 8013270:	10624dd3 	.word	0x10624dd3
 8013274:	e000e014 	.word	0xe000e014

08013278 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013278:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013288 <vPortEnableVFP+0x10>
 801327c:	6801      	ldr	r1, [r0, #0]
 801327e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013282:	6001      	str	r1, [r0, #0]
 8013284:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013286:	bf00      	nop
 8013288:	e000ed88 	.word	0xe000ed88

0801328c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801328c:	b480      	push	{r7}
 801328e:	b085      	sub	sp, #20
 8013290:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013292:	f3ef 8305 	mrs	r3, IPSR
 8013296:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	2b0f      	cmp	r3, #15
 801329c:	d917      	bls.n	80132ce <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801329e:	4a1a      	ldr	r2, [pc, #104]	@ (8013308 <vPortValidateInterruptPriority+0x7c>)
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	4413      	add	r3, r2
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80132a8:	4b18      	ldr	r3, [pc, #96]	@ (801330c <vPortValidateInterruptPriority+0x80>)
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	7afa      	ldrb	r2, [r7, #11]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d20d      	bcs.n	80132ce <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80132b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132b6:	b672      	cpsid	i
 80132b8:	f383 8811 	msr	BASEPRI, r3
 80132bc:	f3bf 8f6f 	isb	sy
 80132c0:	f3bf 8f4f 	dsb	sy
 80132c4:	b662      	cpsie	i
 80132c6:	607b      	str	r3, [r7, #4]
}
 80132c8:	bf00      	nop
 80132ca:	bf00      	nop
 80132cc:	e7fd      	b.n	80132ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80132ce:	4b10      	ldr	r3, [pc, #64]	@ (8013310 <vPortValidateInterruptPriority+0x84>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80132d6:	4b0f      	ldr	r3, [pc, #60]	@ (8013314 <vPortValidateInterruptPriority+0x88>)
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d90d      	bls.n	80132fa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80132de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132e2:	b672      	cpsid	i
 80132e4:	f383 8811 	msr	BASEPRI, r3
 80132e8:	f3bf 8f6f 	isb	sy
 80132ec:	f3bf 8f4f 	dsb	sy
 80132f0:	b662      	cpsie	i
 80132f2:	603b      	str	r3, [r7, #0]
}
 80132f4:	bf00      	nop
 80132f6:	bf00      	nop
 80132f8:	e7fd      	b.n	80132f6 <vPortValidateInterruptPriority+0x6a>
	}
 80132fa:	bf00      	nop
 80132fc:	3714      	adds	r7, #20
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	e000e3f0 	.word	0xe000e3f0
 801330c:	2000144c 	.word	0x2000144c
 8013310:	e000ed0c 	.word	0xe000ed0c
 8013314:	20001450 	.word	0x20001450

08013318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b08a      	sub	sp, #40	@ 0x28
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013320:	2300      	movs	r3, #0
 8013322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013324:	f7fe ff74 	bl	8012210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013328:	4b5f      	ldr	r3, [pc, #380]	@ (80134a8 <pvPortMalloc+0x190>)
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013330:	f000 f924 	bl	801357c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013334:	4b5d      	ldr	r3, [pc, #372]	@ (80134ac <pvPortMalloc+0x194>)
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	4013      	ands	r3, r2
 801333c:	2b00      	cmp	r3, #0
 801333e:	f040 8094 	bne.w	801346a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d020      	beq.n	801338a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8013348:	2208      	movs	r2, #8
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	4413      	add	r3, r2
 801334e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f003 0307 	and.w	r3, r3, #7
 8013356:	2b00      	cmp	r3, #0
 8013358:	d017      	beq.n	801338a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f023 0307 	bic.w	r3, r3, #7
 8013360:	3308      	adds	r3, #8
 8013362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f003 0307 	and.w	r3, r3, #7
 801336a:	2b00      	cmp	r3, #0
 801336c:	d00d      	beq.n	801338a <pvPortMalloc+0x72>
	__asm volatile
 801336e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013372:	b672      	cpsid	i
 8013374:	f383 8811 	msr	BASEPRI, r3
 8013378:	f3bf 8f6f 	isb	sy
 801337c:	f3bf 8f4f 	dsb	sy
 8013380:	b662      	cpsie	i
 8013382:	617b      	str	r3, [r7, #20]
}
 8013384:	bf00      	nop
 8013386:	bf00      	nop
 8013388:	e7fd      	b.n	8013386 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d06c      	beq.n	801346a <pvPortMalloc+0x152>
 8013390:	4b47      	ldr	r3, [pc, #284]	@ (80134b0 <pvPortMalloc+0x198>)
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	687a      	ldr	r2, [r7, #4]
 8013396:	429a      	cmp	r2, r3
 8013398:	d867      	bhi.n	801346a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801339a:	4b46      	ldr	r3, [pc, #280]	@ (80134b4 <pvPortMalloc+0x19c>)
 801339c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801339e:	4b45      	ldr	r3, [pc, #276]	@ (80134b4 <pvPortMalloc+0x19c>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80133a4:	e004      	b.n	80133b0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80133a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80133aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80133b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d903      	bls.n	80133c2 <pvPortMalloc+0xaa>
 80133ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d1f1      	bne.n	80133a6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80133c2:	4b39      	ldr	r3, [pc, #228]	@ (80134a8 <pvPortMalloc+0x190>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d04e      	beq.n	801346a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80133cc:	6a3b      	ldr	r3, [r7, #32]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	2208      	movs	r2, #8
 80133d2:	4413      	add	r3, r2
 80133d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80133d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133d8:	681a      	ldr	r2, [r3, #0]
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80133de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133e0:	685a      	ldr	r2, [r3, #4]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	1ad2      	subs	r2, r2, r3
 80133e6:	2308      	movs	r3, #8
 80133e8:	005b      	lsls	r3, r3, #1
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d922      	bls.n	8013434 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80133ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	4413      	add	r3, r2
 80133f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80133f6:	69bb      	ldr	r3, [r7, #24]
 80133f8:	f003 0307 	and.w	r3, r3, #7
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d00d      	beq.n	801341c <pvPortMalloc+0x104>
	__asm volatile
 8013400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013404:	b672      	cpsid	i
 8013406:	f383 8811 	msr	BASEPRI, r3
 801340a:	f3bf 8f6f 	isb	sy
 801340e:	f3bf 8f4f 	dsb	sy
 8013412:	b662      	cpsie	i
 8013414:	613b      	str	r3, [r7, #16]
}
 8013416:	bf00      	nop
 8013418:	bf00      	nop
 801341a:	e7fd      	b.n	8013418 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801341e:	685a      	ldr	r2, [r3, #4]
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	1ad2      	subs	r2, r2, r3
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801342e:	69b8      	ldr	r0, [r7, #24]
 8013430:	f000 f906 	bl	8013640 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013434:	4b1e      	ldr	r3, [pc, #120]	@ (80134b0 <pvPortMalloc+0x198>)
 8013436:	681a      	ldr	r2, [r3, #0]
 8013438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	1ad3      	subs	r3, r2, r3
 801343e:	4a1c      	ldr	r2, [pc, #112]	@ (80134b0 <pvPortMalloc+0x198>)
 8013440:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013442:	4b1b      	ldr	r3, [pc, #108]	@ (80134b0 <pvPortMalloc+0x198>)
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	4b1c      	ldr	r3, [pc, #112]	@ (80134b8 <pvPortMalloc+0x1a0>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	429a      	cmp	r2, r3
 801344c:	d203      	bcs.n	8013456 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801344e:	4b18      	ldr	r3, [pc, #96]	@ (80134b0 <pvPortMalloc+0x198>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	4a19      	ldr	r2, [pc, #100]	@ (80134b8 <pvPortMalloc+0x1a0>)
 8013454:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013458:	685a      	ldr	r2, [r3, #4]
 801345a:	4b14      	ldr	r3, [pc, #80]	@ (80134ac <pvPortMalloc+0x194>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	431a      	orrs	r2, r3
 8013460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013462:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013466:	2200      	movs	r2, #0
 8013468:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801346a:	f7fe fedf 	bl	801222c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d101      	bne.n	8013478 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013474:	f7ef fbdc 	bl	8002c30 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	f003 0307 	and.w	r3, r3, #7
 801347e:	2b00      	cmp	r3, #0
 8013480:	d00d      	beq.n	801349e <pvPortMalloc+0x186>
	__asm volatile
 8013482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013486:	b672      	cpsid	i
 8013488:	f383 8811 	msr	BASEPRI, r3
 801348c:	f3bf 8f6f 	isb	sy
 8013490:	f3bf 8f4f 	dsb	sy
 8013494:	b662      	cpsie	i
 8013496:	60fb      	str	r3, [r7, #12]
}
 8013498:	bf00      	nop
 801349a:	bf00      	nop
 801349c:	e7fd      	b.n	801349a <pvPortMalloc+0x182>
	return pvReturn;
 801349e:	69fb      	ldr	r3, [r7, #28]
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	3728      	adds	r7, #40	@ 0x28
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	2000945c 	.word	0x2000945c
 80134ac:	20009468 	.word	0x20009468
 80134b0:	20009460 	.word	0x20009460
 80134b4:	20009454 	.word	0x20009454
 80134b8:	20009464 	.word	0x20009464

080134bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d04e      	beq.n	801356c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80134ce:	2308      	movs	r3, #8
 80134d0:	425b      	negs	r3, r3
 80134d2:	697a      	ldr	r2, [r7, #20]
 80134d4:	4413      	add	r3, r2
 80134d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80134dc:	693b      	ldr	r3, [r7, #16]
 80134de:	685a      	ldr	r2, [r3, #4]
 80134e0:	4b24      	ldr	r3, [pc, #144]	@ (8013574 <vPortFree+0xb8>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	4013      	ands	r3, r2
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d10d      	bne.n	8013506 <vPortFree+0x4a>
	__asm volatile
 80134ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134ee:	b672      	cpsid	i
 80134f0:	f383 8811 	msr	BASEPRI, r3
 80134f4:	f3bf 8f6f 	isb	sy
 80134f8:	f3bf 8f4f 	dsb	sy
 80134fc:	b662      	cpsie	i
 80134fe:	60fb      	str	r3, [r7, #12]
}
 8013500:	bf00      	nop
 8013502:	bf00      	nop
 8013504:	e7fd      	b.n	8013502 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d00d      	beq.n	801352a <vPortFree+0x6e>
	__asm volatile
 801350e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013512:	b672      	cpsid	i
 8013514:	f383 8811 	msr	BASEPRI, r3
 8013518:	f3bf 8f6f 	isb	sy
 801351c:	f3bf 8f4f 	dsb	sy
 8013520:	b662      	cpsie	i
 8013522:	60bb      	str	r3, [r7, #8]
}
 8013524:	bf00      	nop
 8013526:	bf00      	nop
 8013528:	e7fd      	b.n	8013526 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	685a      	ldr	r2, [r3, #4]
 801352e:	4b11      	ldr	r3, [pc, #68]	@ (8013574 <vPortFree+0xb8>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	4013      	ands	r3, r2
 8013534:	2b00      	cmp	r3, #0
 8013536:	d019      	beq.n	801356c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d115      	bne.n	801356c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	685a      	ldr	r2, [r3, #4]
 8013544:	4b0b      	ldr	r3, [pc, #44]	@ (8013574 <vPortFree+0xb8>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	43db      	mvns	r3, r3
 801354a:	401a      	ands	r2, r3
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013550:	f7fe fe5e 	bl	8012210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	685a      	ldr	r2, [r3, #4]
 8013558:	4b07      	ldr	r3, [pc, #28]	@ (8013578 <vPortFree+0xbc>)
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	4413      	add	r3, r2
 801355e:	4a06      	ldr	r2, [pc, #24]	@ (8013578 <vPortFree+0xbc>)
 8013560:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013562:	6938      	ldr	r0, [r7, #16]
 8013564:	f000 f86c 	bl	8013640 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013568:	f7fe fe60 	bl	801222c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801356c:	bf00      	nop
 801356e:	3718      	adds	r7, #24
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}
 8013574:	20009468 	.word	0x20009468
 8013578:	20009460 	.word	0x20009460

0801357c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801357c:	b480      	push	{r7}
 801357e:	b085      	sub	sp, #20
 8013580:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013586:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013588:	4b27      	ldr	r3, [pc, #156]	@ (8013628 <prvHeapInit+0xac>)
 801358a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f003 0307 	and.w	r3, r3, #7
 8013592:	2b00      	cmp	r3, #0
 8013594:	d00c      	beq.n	80135b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	3307      	adds	r3, #7
 801359a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	f023 0307 	bic.w	r3, r3, #7
 80135a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80135a4:	68ba      	ldr	r2, [r7, #8]
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	1ad3      	subs	r3, r2, r3
 80135aa:	4a1f      	ldr	r2, [pc, #124]	@ (8013628 <prvHeapInit+0xac>)
 80135ac:	4413      	add	r3, r2
 80135ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80135b4:	4a1d      	ldr	r2, [pc, #116]	@ (801362c <prvHeapInit+0xb0>)
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80135ba:	4b1c      	ldr	r3, [pc, #112]	@ (801362c <prvHeapInit+0xb0>)
 80135bc:	2200      	movs	r2, #0
 80135be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	4413      	add	r3, r2
 80135c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80135c8:	2208      	movs	r2, #8
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	1a9b      	subs	r3, r3, r2
 80135ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	f023 0307 	bic.w	r3, r3, #7
 80135d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	4a15      	ldr	r2, [pc, #84]	@ (8013630 <prvHeapInit+0xb4>)
 80135dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80135de:	4b14      	ldr	r3, [pc, #80]	@ (8013630 <prvHeapInit+0xb4>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	2200      	movs	r2, #0
 80135e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80135e6:	4b12      	ldr	r3, [pc, #72]	@ (8013630 <prvHeapInit+0xb4>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	2200      	movs	r2, #0
 80135ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	68fa      	ldr	r2, [r7, #12]
 80135f6:	1ad2      	subs	r2, r2, r3
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80135fc:	4b0c      	ldr	r3, [pc, #48]	@ (8013630 <prvHeapInit+0xb4>)
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	4a0a      	ldr	r2, [pc, #40]	@ (8013634 <prvHeapInit+0xb8>)
 801360a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	4a09      	ldr	r2, [pc, #36]	@ (8013638 <prvHeapInit+0xbc>)
 8013612:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013614:	4b09      	ldr	r3, [pc, #36]	@ (801363c <prvHeapInit+0xc0>)
 8013616:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801361a:	601a      	str	r2, [r3, #0]
}
 801361c:	bf00      	nop
 801361e:	3714      	adds	r7, #20
 8013620:	46bd      	mov	sp, r7
 8013622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013626:	4770      	bx	lr
 8013628:	20001454 	.word	0x20001454
 801362c:	20009454 	.word	0x20009454
 8013630:	2000945c 	.word	0x2000945c
 8013634:	20009464 	.word	0x20009464
 8013638:	20009460 	.word	0x20009460
 801363c:	20009468 	.word	0x20009468

08013640 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013640:	b480      	push	{r7}
 8013642:	b085      	sub	sp, #20
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013648:	4b28      	ldr	r3, [pc, #160]	@ (80136ec <prvInsertBlockIntoFreeList+0xac>)
 801364a:	60fb      	str	r3, [r7, #12]
 801364c:	e002      	b.n	8013654 <prvInsertBlockIntoFreeList+0x14>
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	60fb      	str	r3, [r7, #12]
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	429a      	cmp	r2, r3
 801365c:	d8f7      	bhi.n	801364e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	68ba      	ldr	r2, [r7, #8]
 8013668:	4413      	add	r3, r2
 801366a:	687a      	ldr	r2, [r7, #4]
 801366c:	429a      	cmp	r2, r3
 801366e:	d108      	bne.n	8013682 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	685a      	ldr	r2, [r3, #4]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	441a      	add	r2, r3
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	685b      	ldr	r3, [r3, #4]
 801368a:	68ba      	ldr	r2, [r7, #8]
 801368c:	441a      	add	r2, r3
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	429a      	cmp	r2, r3
 8013694:	d118      	bne.n	80136c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681a      	ldr	r2, [r3, #0]
 801369a:	4b15      	ldr	r3, [pc, #84]	@ (80136f0 <prvInsertBlockIntoFreeList+0xb0>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	429a      	cmp	r2, r3
 80136a0:	d00d      	beq.n	80136be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	685a      	ldr	r2, [r3, #4]
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	685b      	ldr	r3, [r3, #4]
 80136ac:	441a      	add	r2, r3
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	681a      	ldr	r2, [r3, #0]
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	601a      	str	r2, [r3, #0]
 80136bc:	e008      	b.n	80136d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80136be:	4b0c      	ldr	r3, [pc, #48]	@ (80136f0 <prvInsertBlockIntoFreeList+0xb0>)
 80136c0:	681a      	ldr	r2, [r3, #0]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	601a      	str	r2, [r3, #0]
 80136c6:	e003      	b.n	80136d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681a      	ldr	r2, [r3, #0]
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80136d0:	68fa      	ldr	r2, [r7, #12]
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d002      	beq.n	80136de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136de:	bf00      	nop
 80136e0:	3714      	adds	r7, #20
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr
 80136ea:	bf00      	nop
 80136ec:	20009454 	.word	0x20009454
 80136f0:	2000945c 	.word	0x2000945c

080136f4 <malloc>:
 80136f4:	4b02      	ldr	r3, [pc, #8]	@ (8013700 <malloc+0xc>)
 80136f6:	4601      	mov	r1, r0
 80136f8:	6818      	ldr	r0, [r3, #0]
 80136fa:	f000 b825 	b.w	8013748 <_malloc_r>
 80136fe:	bf00      	nop
 8013700:	2000008c 	.word	0x2000008c

08013704 <sbrk_aligned>:
 8013704:	b570      	push	{r4, r5, r6, lr}
 8013706:	4e0f      	ldr	r6, [pc, #60]	@ (8013744 <sbrk_aligned+0x40>)
 8013708:	460c      	mov	r4, r1
 801370a:	6831      	ldr	r1, [r6, #0]
 801370c:	4605      	mov	r5, r0
 801370e:	b911      	cbnz	r1, 8013716 <sbrk_aligned+0x12>
 8013710:	f000 f8ae 	bl	8013870 <_sbrk_r>
 8013714:	6030      	str	r0, [r6, #0]
 8013716:	4621      	mov	r1, r4
 8013718:	4628      	mov	r0, r5
 801371a:	f000 f8a9 	bl	8013870 <_sbrk_r>
 801371e:	1c43      	adds	r3, r0, #1
 8013720:	d103      	bne.n	801372a <sbrk_aligned+0x26>
 8013722:	f04f 34ff 	mov.w	r4, #4294967295
 8013726:	4620      	mov	r0, r4
 8013728:	bd70      	pop	{r4, r5, r6, pc}
 801372a:	1cc4      	adds	r4, r0, #3
 801372c:	f024 0403 	bic.w	r4, r4, #3
 8013730:	42a0      	cmp	r0, r4
 8013732:	d0f8      	beq.n	8013726 <sbrk_aligned+0x22>
 8013734:	1a21      	subs	r1, r4, r0
 8013736:	4628      	mov	r0, r5
 8013738:	f000 f89a 	bl	8013870 <_sbrk_r>
 801373c:	3001      	adds	r0, #1
 801373e:	d1f2      	bne.n	8013726 <sbrk_aligned+0x22>
 8013740:	e7ef      	b.n	8013722 <sbrk_aligned+0x1e>
 8013742:	bf00      	nop
 8013744:	2000946c 	.word	0x2000946c

08013748 <_malloc_r>:
 8013748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801374c:	1ccd      	adds	r5, r1, #3
 801374e:	f025 0503 	bic.w	r5, r5, #3
 8013752:	3508      	adds	r5, #8
 8013754:	2d0c      	cmp	r5, #12
 8013756:	bf38      	it	cc
 8013758:	250c      	movcc	r5, #12
 801375a:	2d00      	cmp	r5, #0
 801375c:	4606      	mov	r6, r0
 801375e:	db01      	blt.n	8013764 <_malloc_r+0x1c>
 8013760:	42a9      	cmp	r1, r5
 8013762:	d904      	bls.n	801376e <_malloc_r+0x26>
 8013764:	230c      	movs	r3, #12
 8013766:	6033      	str	r3, [r6, #0]
 8013768:	2000      	movs	r0, #0
 801376a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801376e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013844 <_malloc_r+0xfc>
 8013772:	f000 f869 	bl	8013848 <__malloc_lock>
 8013776:	f8d8 3000 	ldr.w	r3, [r8]
 801377a:	461c      	mov	r4, r3
 801377c:	bb44      	cbnz	r4, 80137d0 <_malloc_r+0x88>
 801377e:	4629      	mov	r1, r5
 8013780:	4630      	mov	r0, r6
 8013782:	f7ff ffbf 	bl	8013704 <sbrk_aligned>
 8013786:	1c43      	adds	r3, r0, #1
 8013788:	4604      	mov	r4, r0
 801378a:	d158      	bne.n	801383e <_malloc_r+0xf6>
 801378c:	f8d8 4000 	ldr.w	r4, [r8]
 8013790:	4627      	mov	r7, r4
 8013792:	2f00      	cmp	r7, #0
 8013794:	d143      	bne.n	801381e <_malloc_r+0xd6>
 8013796:	2c00      	cmp	r4, #0
 8013798:	d04b      	beq.n	8013832 <_malloc_r+0xea>
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	4639      	mov	r1, r7
 801379e:	4630      	mov	r0, r6
 80137a0:	eb04 0903 	add.w	r9, r4, r3
 80137a4:	f000 f864 	bl	8013870 <_sbrk_r>
 80137a8:	4581      	cmp	r9, r0
 80137aa:	d142      	bne.n	8013832 <_malloc_r+0xea>
 80137ac:	6821      	ldr	r1, [r4, #0]
 80137ae:	1a6d      	subs	r5, r5, r1
 80137b0:	4629      	mov	r1, r5
 80137b2:	4630      	mov	r0, r6
 80137b4:	f7ff ffa6 	bl	8013704 <sbrk_aligned>
 80137b8:	3001      	adds	r0, #1
 80137ba:	d03a      	beq.n	8013832 <_malloc_r+0xea>
 80137bc:	6823      	ldr	r3, [r4, #0]
 80137be:	442b      	add	r3, r5
 80137c0:	6023      	str	r3, [r4, #0]
 80137c2:	f8d8 3000 	ldr.w	r3, [r8]
 80137c6:	685a      	ldr	r2, [r3, #4]
 80137c8:	bb62      	cbnz	r2, 8013824 <_malloc_r+0xdc>
 80137ca:	f8c8 7000 	str.w	r7, [r8]
 80137ce:	e00f      	b.n	80137f0 <_malloc_r+0xa8>
 80137d0:	6822      	ldr	r2, [r4, #0]
 80137d2:	1b52      	subs	r2, r2, r5
 80137d4:	d420      	bmi.n	8013818 <_malloc_r+0xd0>
 80137d6:	2a0b      	cmp	r2, #11
 80137d8:	d917      	bls.n	801380a <_malloc_r+0xc2>
 80137da:	1961      	adds	r1, r4, r5
 80137dc:	42a3      	cmp	r3, r4
 80137de:	6025      	str	r5, [r4, #0]
 80137e0:	bf18      	it	ne
 80137e2:	6059      	strne	r1, [r3, #4]
 80137e4:	6863      	ldr	r3, [r4, #4]
 80137e6:	bf08      	it	eq
 80137e8:	f8c8 1000 	streq.w	r1, [r8]
 80137ec:	5162      	str	r2, [r4, r5]
 80137ee:	604b      	str	r3, [r1, #4]
 80137f0:	4630      	mov	r0, r6
 80137f2:	f000 f82f 	bl	8013854 <__malloc_unlock>
 80137f6:	f104 000b 	add.w	r0, r4, #11
 80137fa:	1d23      	adds	r3, r4, #4
 80137fc:	f020 0007 	bic.w	r0, r0, #7
 8013800:	1ac2      	subs	r2, r0, r3
 8013802:	bf1c      	itt	ne
 8013804:	1a1b      	subne	r3, r3, r0
 8013806:	50a3      	strne	r3, [r4, r2]
 8013808:	e7af      	b.n	801376a <_malloc_r+0x22>
 801380a:	6862      	ldr	r2, [r4, #4]
 801380c:	42a3      	cmp	r3, r4
 801380e:	bf0c      	ite	eq
 8013810:	f8c8 2000 	streq.w	r2, [r8]
 8013814:	605a      	strne	r2, [r3, #4]
 8013816:	e7eb      	b.n	80137f0 <_malloc_r+0xa8>
 8013818:	4623      	mov	r3, r4
 801381a:	6864      	ldr	r4, [r4, #4]
 801381c:	e7ae      	b.n	801377c <_malloc_r+0x34>
 801381e:	463c      	mov	r4, r7
 8013820:	687f      	ldr	r7, [r7, #4]
 8013822:	e7b6      	b.n	8013792 <_malloc_r+0x4a>
 8013824:	461a      	mov	r2, r3
 8013826:	685b      	ldr	r3, [r3, #4]
 8013828:	42a3      	cmp	r3, r4
 801382a:	d1fb      	bne.n	8013824 <_malloc_r+0xdc>
 801382c:	2300      	movs	r3, #0
 801382e:	6053      	str	r3, [r2, #4]
 8013830:	e7de      	b.n	80137f0 <_malloc_r+0xa8>
 8013832:	230c      	movs	r3, #12
 8013834:	6033      	str	r3, [r6, #0]
 8013836:	4630      	mov	r0, r6
 8013838:	f000 f80c 	bl	8013854 <__malloc_unlock>
 801383c:	e794      	b.n	8013768 <_malloc_r+0x20>
 801383e:	6005      	str	r5, [r0, #0]
 8013840:	e7d6      	b.n	80137f0 <_malloc_r+0xa8>
 8013842:	bf00      	nop
 8013844:	20009470 	.word	0x20009470

08013848 <__malloc_lock>:
 8013848:	4801      	ldr	r0, [pc, #4]	@ (8013850 <__malloc_lock+0x8>)
 801384a:	f000 b84b 	b.w	80138e4 <__retarget_lock_acquire_recursive>
 801384e:	bf00      	nop
 8013850:	200095b0 	.word	0x200095b0

08013854 <__malloc_unlock>:
 8013854:	4801      	ldr	r0, [pc, #4]	@ (801385c <__malloc_unlock+0x8>)
 8013856:	f000 b846 	b.w	80138e6 <__retarget_lock_release_recursive>
 801385a:	bf00      	nop
 801385c:	200095b0 	.word	0x200095b0

08013860 <memset>:
 8013860:	4402      	add	r2, r0
 8013862:	4603      	mov	r3, r0
 8013864:	4293      	cmp	r3, r2
 8013866:	d100      	bne.n	801386a <memset+0xa>
 8013868:	4770      	bx	lr
 801386a:	f803 1b01 	strb.w	r1, [r3], #1
 801386e:	e7f9      	b.n	8013864 <memset+0x4>

08013870 <_sbrk_r>:
 8013870:	b538      	push	{r3, r4, r5, lr}
 8013872:	4d06      	ldr	r5, [pc, #24]	@ (801388c <_sbrk_r+0x1c>)
 8013874:	2300      	movs	r3, #0
 8013876:	4604      	mov	r4, r0
 8013878:	4608      	mov	r0, r1
 801387a:	602b      	str	r3, [r5, #0]
 801387c:	f7f3 f92c 	bl	8006ad8 <_sbrk>
 8013880:	1c43      	adds	r3, r0, #1
 8013882:	d102      	bne.n	801388a <_sbrk_r+0x1a>
 8013884:	682b      	ldr	r3, [r5, #0]
 8013886:	b103      	cbz	r3, 801388a <_sbrk_r+0x1a>
 8013888:	6023      	str	r3, [r4, #0]
 801388a:	bd38      	pop	{r3, r4, r5, pc}
 801388c:	200095ac 	.word	0x200095ac

08013890 <__errno>:
 8013890:	4b01      	ldr	r3, [pc, #4]	@ (8013898 <__errno+0x8>)
 8013892:	6818      	ldr	r0, [r3, #0]
 8013894:	4770      	bx	lr
 8013896:	bf00      	nop
 8013898:	2000008c 	.word	0x2000008c

0801389c <__libc_init_array>:
 801389c:	b570      	push	{r4, r5, r6, lr}
 801389e:	4d0d      	ldr	r5, [pc, #52]	@ (80138d4 <__libc_init_array+0x38>)
 80138a0:	4c0d      	ldr	r4, [pc, #52]	@ (80138d8 <__libc_init_array+0x3c>)
 80138a2:	1b64      	subs	r4, r4, r5
 80138a4:	10a4      	asrs	r4, r4, #2
 80138a6:	2600      	movs	r6, #0
 80138a8:	42a6      	cmp	r6, r4
 80138aa:	d109      	bne.n	80138c0 <__libc_init_array+0x24>
 80138ac:	4d0b      	ldr	r5, [pc, #44]	@ (80138dc <__libc_init_array+0x40>)
 80138ae:	4c0c      	ldr	r4, [pc, #48]	@ (80138e0 <__libc_init_array+0x44>)
 80138b0:	f000 f828 	bl	8013904 <_init>
 80138b4:	1b64      	subs	r4, r4, r5
 80138b6:	10a4      	asrs	r4, r4, #2
 80138b8:	2600      	movs	r6, #0
 80138ba:	42a6      	cmp	r6, r4
 80138bc:	d105      	bne.n	80138ca <__libc_init_array+0x2e>
 80138be:	bd70      	pop	{r4, r5, r6, pc}
 80138c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80138c4:	4798      	blx	r3
 80138c6:	3601      	adds	r6, #1
 80138c8:	e7ee      	b.n	80138a8 <__libc_init_array+0xc>
 80138ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80138ce:	4798      	blx	r3
 80138d0:	3601      	adds	r6, #1
 80138d2:	e7f2      	b.n	80138ba <__libc_init_array+0x1e>
 80138d4:	08016280 	.word	0x08016280
 80138d8:	08016280 	.word	0x08016280
 80138dc:	08016280 	.word	0x08016280
 80138e0:	08016284 	.word	0x08016284

080138e4 <__retarget_lock_acquire_recursive>:
 80138e4:	4770      	bx	lr

080138e6 <__retarget_lock_release_recursive>:
 80138e6:	4770      	bx	lr

080138e8 <memcpy>:
 80138e8:	440a      	add	r2, r1
 80138ea:	4291      	cmp	r1, r2
 80138ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80138f0:	d100      	bne.n	80138f4 <memcpy+0xc>
 80138f2:	4770      	bx	lr
 80138f4:	b510      	push	{r4, lr}
 80138f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80138fe:	4291      	cmp	r1, r2
 8013900:	d1f9      	bne.n	80138f6 <memcpy+0xe>
 8013902:	bd10      	pop	{r4, pc}

08013904 <_init>:
 8013904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013906:	bf00      	nop
 8013908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801390a:	bc08      	pop	{r3}
 801390c:	469e      	mov	lr, r3
 801390e:	4770      	bx	lr

08013910 <_fini>:
 8013910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013912:	bf00      	nop
 8013914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013916:	bc08      	pop	{r3}
 8013918:	469e      	mov	lr, r3
 801391a:	4770      	bx	lr
