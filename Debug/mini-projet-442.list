
mini-projet-442.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e400  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e554  0800e5d0  0800e5d0  0000f5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cb24  0801cb24  0001e0b8  2**0
                  CONTENTS
  4 .ARM          00000008  0801cb24  0801cb24  0001db24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cb2c  0801cb2c  0001e0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cb2c  0801cb2c  0001db2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cb30  0801cb30  0001db30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0801cb34  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c18  200000b8  0801cbec  0001e0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cd0  0801cbec  0001ecd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fd0d  00000000  00000000  0001e0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000073b6  00000000  00000000  0004ddf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002840  00000000  00000000  000551b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f07  00000000  00000000  000579f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003123c  00000000  00000000  000598f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036029  00000000  00000000  0008ab33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119132  00000000  00000000  000c0b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d9c8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b1f4  00000000  00000000  001d9cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001e4ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e5b8 	.word	0x0800e5b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	0800e5b8 	.word	0x0800e5b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f004 fea9 	bl	8005358 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f002 faa2 	bl	8002b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f005 f843 	bl	80056ac <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f002 fa92 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000d4 	.word	0x200000d4
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC3_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC3_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC3_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC3_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a6:	f004 fe57 	bl	8005358 <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f002 fa50 	bl	8002b54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006c6:	f004 fff1 	bl	80056ac <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006d0:	f002 fa40 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000011c 	.word	0x2000011c
 80006e0:	40012200 	.word	0x40012200
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d124      	bne.n	8000754 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <HAL_ADC_MspInit+0xd0>)
 800074e:	f006 f919 	bl	8006984 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000752:	e029      	b.n	80007a8 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_ADC_MspInit+0xd4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d124      	bne.n	80007a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800078e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_ADC_MspInit+0xd8>)
 80007a4:	f006 f8ee 	bl	8006984 <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40012200 	.word	0x40012200
 80007c0:	40021400 	.word	0x40021400

080007c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DAC_Init+0x50>)
 80007d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007da:	f005 fa99 	bl	8005d10 <HAL_DAC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e4:	f002 f9b6 	bl	8002b54 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007f8:	f005 fb10 	bl	8005e1c <HAL_DAC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000802:	f002 f9a7 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000164 	.word	0x20000164
 8000814:	40007400 	.word	0x40007400

08000818 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_DAC_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086a:	2310      	movs	r3, #16
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_DAC_MspInit+0x8c>)
 800087e:	f006 f881 	bl	8006984 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	2036      	movs	r0, #54	@ 0x36
 8000888:	f005 fa18 	bl	8005cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088c:	2036      	movs	r0, #54	@ 0x36
 800088e:	f005 fa31 	bl	8005cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40007400 	.word	0x40007400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_DMA2D_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008de:	f005 fcb5 	bl	800624c <HAL_DMA2D_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e8:	f002 f934 	bl	8002b54 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ec:	2101      	movs	r1, #1
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008f0:	f005 ff1a 	bl	8006728 <HAL_DMA2D_ConfigLayer>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008fa:	f002 f92b 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000178 	.word	0x20000178
 8000908:	4002b000 	.word	0x4002b000

0800090c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <HAL_DMA2D_MspInit+0x44>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d113      	bne.n	8000946 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	205a      	movs	r0, #90	@ 0x5a
 800093c:	f005 f9be 	bl	8005cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000940:	205a      	movs	r0, #90	@ 0x5a
 8000942:	f005 f9d7 	bl	8005cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	4002b000 	.word	0x4002b000
 8000954:	40023800 	.word	0x40023800

08000958 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FMC_Init+0x9c>)
 8000974:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FMC_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000984:	2204      	movs	r2, #4
 8000986:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FMC_Init+0x98>)
 800098a:	2210      	movs	r2, #16
 800098c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000990:	2240      	movs	r2, #64	@ 0x40
 8000992:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000996:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800099a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_FMC_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009bc:	2307      	movs	r3, #7
 80009be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009c4:	2307      	movs	r3, #7
 80009c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009da:	f009 f92d 	bl	8009c38 <HAL_SDRAM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e4:	f002 f8b6 	bl	8002b54 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001b8 	.word	0x200001b8
 80009f4:	a0000140 	.word	0xa0000140

080009f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d16d      	bne.n	8000af0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a14:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a1e:	4a37      	ldr	r2, [pc, #220]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a32:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a36:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a44:	230c      	movs	r3, #12
 8000a46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <HAL_FMC_MspInit+0x108>)
 8000a4e:	f005 ff99 	bl	8006984 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a52:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a56:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4825      	ldr	r0, [pc, #148]	@ (8000b04 <HAL_FMC_MspInit+0x10c>)
 8000a6e:	f005 ff89 	bl	8006984 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a76:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a84:	230c      	movs	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <HAL_FMC_MspInit+0x110>)
 8000a8e:	f005 ff79 	bl	8006984 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a96:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <HAL_FMC_MspInit+0x114>)
 8000aae:	f005 ff69 	bl	8006984 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ab2:	2328      	movs	r3, #40	@ 0x28
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <HAL_FMC_MspInit+0x118>)
 8000acc:	f005 ff5a 	bl	8006984 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	@ (8000b14 <HAL_FMC_MspInit+0x11c>)
 8000aea:	f005 ff4b 	bl	8006984 <HAL_GPIO_Init>
 8000aee:	e000      	b.n	8000af2 <HAL_FMC_MspInit+0xfa>
    return;
 8000af0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001ec 	.word	0x200001ec
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021c00 	.word	0x40021c00
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b20:	f7ff ff6a 	bl	80009f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <vApplicationGetIdleTaskMemory+0x30>)
 8000b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200003c0 	.word	0x200003c0
 8000b5c:	20000414 	.word	0x20000414

08000b60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b0a6      	sub	sp, #152	@ 0x98
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of displayMutex */
  osMutexDef(displayMutex);
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  displayMutexHandle = osMutexCreate(osMutex(displayMutex));
 8000b72:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00a fc35 	bl	800b3e6 <osMutexCreate>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a31      	ldr	r2, [pc, #196]	@ (8000c44 <MX_FREERTOS_Init+0xe4>)
 8000b80:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b82:	4b31      	ldr	r3, [pc, #196]	@ (8000c48 <MX_FREERTOS_Init+0xe8>)
 8000b84:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8000b88:	461d      	mov	r5, r3
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b96:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00a fbc2 	bl	800b326 <osThreadCreate>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a29      	ldr	r2, [pc, #164]	@ (8000c4c <MX_FREERTOS_Init+0xec>)
 8000ba6:	6013      	str	r3, [r2, #0]

  /* definition and creation of displayTask */
  osThreadDef(displayTask, StartDisplayTask, osPriorityNormal, 0, 1024);
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <MX_FREERTOS_Init+0xf0>)
 8000baa:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8000bae:	461d      	mov	r5, r3
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  displayTaskHandle = osThreadCreate(osThread(displayTask), NULL);
 8000bbc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00a fbaf 	bl	800b326 <osThreadCreate>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <MX_FREERTOS_Init+0xf4>)
 8000bcc:	6013      	str	r3, [r2, #0]

  /* definition and creation of joystickTask */
  osThreadDef(joystickTask, StartJoystickTask, osPriorityAboveNormal, 0, 128);
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_FREERTOS_Init+0xf8>)
 8000bd0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000bd4:	461d      	mov	r5, r3
 8000bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  joystickTaskHandle = osThreadCreate(osThread(joystickTask), NULL);
 8000be2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000be6:	2100      	movs	r1, #0
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00a fb9c 	bl	800b326 <osThreadCreate>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c5c <MX_FREERTOS_Init+0xfc>)
 8000bf2:	6013      	str	r3, [r2, #0]

  /* definition and creation of manageBodyParts */
  osThreadDef(manageBodyParts, StartManageBodyParts, osPriorityAboveNormal, 0, 128);
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_FREERTOS_Init+0x100>)
 8000bf6:	f107 0420 	add.w	r4, r7, #32
 8000bfa:	461d      	mov	r5, r3
 8000bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  manageBodyPartsHandle = osThreadCreate(osThread(manageBodyParts), NULL);
 8000c08:	f107 0320 	add.w	r3, r7, #32
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f00a fb89 	bl	800b326 <osThreadCreate>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <MX_FREERTOS_Init+0x104>)
 8000c18:	6013      	str	r3, [r2, #0]

  /* definition and creation of tsHandlerTask */
  osThreadDef(tsHandlerTask, StartTsHandlerTask, osPriorityHigh, 0, 512);
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <MX_FREERTOS_Init+0x108>)
 8000c1c:	1d3c      	adds	r4, r7, #4
 8000c1e:	461d      	mov	r5, r3
 8000c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  tsHandlerTaskHandle = osThreadCreate(osThread(tsHandlerTask), NULL);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f00a fb78 	bl	800b326 <osThreadCreate>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <MX_FREERTOS_Init+0x10c>)
 8000c3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c3c:	bf00      	nop
 8000c3e:	3798      	adds	r7, #152	@ 0x98
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bdb0      	pop	{r4, r5, r7, pc}
 8000c44:	200003bc 	.word	0x200003bc
 8000c48:	0800e5dc 	.word	0x0800e5dc
 8000c4c:	200003a8 	.word	0x200003a8
 8000c50:	0800e604 	.word	0x0800e604
 8000c54:	200003ac 	.word	0x200003ac
 8000c58:	0800e630 	.word	0x0800e630
 8000c5c:	200003b0 	.word	0x200003b0
 8000c60:	0800e65c 	.word	0x0800e65c
 8000c64:	200003b4 	.word	0x200003b4
 8000c68:	0800e688 	.word	0x0800e688
 8000c6c:	200003b8 	.word	0x200003b8

08000c70 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f00a fba0 	bl	800b3be <osDelay>
 8000c7e:	e7fb      	b.n	8000c78 <StartDefaultTask+0x8>

08000c80 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void const * argument)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0b6      	sub	sp, #216	@ 0xd8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    if (gameOver || gamePaused) {
 8000c88:	4bb9      	ldr	r3, [pc, #740]	@ (8000f70 <StartDisplayTask+0x2f0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d103      	bne.n	8000c98 <StartDisplayTask+0x18>
 8000c90:	4bb8      	ldr	r3, [pc, #736]	@ (8000f74 <StartDisplayTask+0x2f4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d002      	beq.n	8000c9e <StartDisplayTask+0x1e>
      displayGameStatus();
 8000c98:	f000 fdca 	bl	8001830 <displayGameStatus>
 8000c9c:	e1d8      	b.n	8001050 <StartDisplayTask+0x3d0>
    }
    else {
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8000c9e:	48b6      	ldr	r0, [pc, #728]	@ (8000f78 <StartDisplayTask+0x2f8>)
 8000ca0:	f002 fb7c 	bl	800339c <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(0, 8*32, BSP_LCD_GetXSize());
 8000ca4:	f002 fae2 	bl	800326c <BSP_LCD_GetXSize>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f002 fcf2 	bl	800369c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(0, 8*32 + 1, BSP_LCD_GetXSize());
 8000cb8:	f002 fad8 	bl	800326c <BSP_LCD_GetXSize>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f240 1101 	movw	r1, #257	@ 0x101
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f002 fce8 	bl	800369c <BSP_LCD_DrawHLine>

      char directionText[100];
      // on affiche la direction
      switch (direction) {
 8000ccc:	4bab      	ldr	r3, [pc, #684]	@ (8000f7c <StartDisplayTask+0x2fc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d827      	bhi.n	8000d24 <StartDisplayTask+0xa4>
 8000cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cdc <StartDisplayTask+0x5c>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000ced 	.word	0x08000ced
 8000ce0:	08000cfb 	.word	0x08000cfb
 8000ce4:	08000d09 	.word	0x08000d09
 8000ce8:	08000d17 	.word	0x08000d17
        case Up:
          sprintf(directionText, (char *)"Direction: Up   ");
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	49a3      	ldr	r1, [pc, #652]	@ (8000f80 <StartDisplayTask+0x300>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00c fbac 	bl	800d450 <siprintf>
          break;
 8000cf8:	e014      	b.n	8000d24 <StartDisplayTask+0xa4>
        case Down:
          sprintf(directionText, (char *)"Direction: Down ");
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	49a1      	ldr	r1, [pc, #644]	@ (8000f84 <StartDisplayTask+0x304>)
 8000d00:	4618      	mov	r0, r3
 8000d02:	f00c fba5 	bl	800d450 <siprintf>
          break;
 8000d06:	e00d      	b.n	8000d24 <StartDisplayTask+0xa4>
        case Left:
          sprintf(directionText, (char *)"Direction: Left ");
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	499e      	ldr	r1, [pc, #632]	@ (8000f88 <StartDisplayTask+0x308>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f00c fb9e 	bl	800d450 <siprintf>
          break;
 8000d14:	e006      	b.n	8000d24 <StartDisplayTask+0xa4>
        case Right:
          sprintf(directionText, (char *)"Direction: Right");
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	499c      	ldr	r1, [pc, #624]	@ (8000f8c <StartDisplayTask+0x30c>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00c fb97 	bl	800d450 <siprintf>
          break;
 8000d22:	bf00      	nop
      }
      BSP_LCD_DisplayStringAt(0, 8*32 + 2, (uint8_t *)directionText, LEFT_MODE);
 8000d24:	f107 020c 	add.w	r2, r7, #12
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f002 fbec 	bl	800350c <BSP_LCD_DisplayStringAt>

      // On affiche le score a la suite de la direction
      char scoreText[100];
      sprintf(scoreText, (char *)"Score: %d", snakeSize);
 8000d34:	4b96      	ldr	r3, [pc, #600]	@ (8000f90 <StartDisplayTask+0x310>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d3e:	4995      	ldr	r1, [pc, #596]	@ (8000f94 <StartDisplayTask+0x314>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00c fb85 	bl	800d450 <siprintf>
      BSP_LCD_DisplayStringAt(200, 8*32 + 2, (uint8_t *)scoreText, LEFT_MODE);
 8000d46:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000d50:	20c8      	movs	r0, #200	@ 0xc8
 8000d52:	f002 fbdb 	bl	800350c <BSP_LCD_DisplayStringAt>


      // On affiche la tête du snake
      switch (headPart) {
 8000d56:	4b90      	ldr	r3, [pc, #576]	@ (8000f98 <StartDisplayTask+0x318>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d83a      	bhi.n	8000dd4 <StartDisplayTask+0x154>
 8000d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d64 <StartDisplayTask+0xe4>)
 8000d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d64:	08000d8d 	.word	0x08000d8d
 8000d68:	08000d75 	.word	0x08000d75
 8000d6c:	08000da5 	.word	0x08000da5
 8000d70:	08000dbd 	.word	0x08000dbd
        case HeadBottom:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_bottom_81CD4B_bmp);
 8000d74:	4b89      	ldr	r3, [pc, #548]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	015b      	lsls	r3, r3, #5
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	4b87      	ldr	r3, [pc, #540]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000d7e:	785b      	ldrb	r3, [r3, #1]
 8000d80:	015b      	lsls	r3, r3, #5
 8000d82:	4a87      	ldr	r2, [pc, #540]	@ (8000fa0 <StartDisplayTask+0x320>)
 8000d84:	4619      	mov	r1, r3
 8000d86:	f002 fd2f 	bl	80037e8 <BSP_LCD_DrawBitmap>
          break;
 8000d8a:	e023      	b.n	8000dd4 <StartDisplayTask+0x154>
        case HeadTop:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_top_81CD4B_bmp);
 8000d8c:	4b83      	ldr	r3, [pc, #524]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	015b      	lsls	r3, r3, #5
 8000d92:	4618      	mov	r0, r3
 8000d94:	4b81      	ldr	r3, [pc, #516]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000d96:	785b      	ldrb	r3, [r3, #1]
 8000d98:	015b      	lsls	r3, r3, #5
 8000d9a:	4a82      	ldr	r2, [pc, #520]	@ (8000fa4 <StartDisplayTask+0x324>)
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f002 fd23 	bl	80037e8 <BSP_LCD_DrawBitmap>
          break;
 8000da2:	e017      	b.n	8000dd4 <StartDisplayTask+0x154>
        case HeadLeft:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_left_81CD4B_bmp);
 8000da4:	4b7d      	ldr	r3, [pc, #500]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	015b      	lsls	r3, r3, #5
 8000daa:	4618      	mov	r0, r3
 8000dac:	4b7b      	ldr	r3, [pc, #492]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	015b      	lsls	r3, r3, #5
 8000db2:	4a7d      	ldr	r2, [pc, #500]	@ (8000fa8 <StartDisplayTask+0x328>)
 8000db4:	4619      	mov	r1, r3
 8000db6:	f002 fd17 	bl	80037e8 <BSP_LCD_DrawBitmap>
          break;
 8000dba:	e00b      	b.n	8000dd4 <StartDisplayTask+0x154>
        case HeadRight:
          BSP_LCD_DrawBitmap(snakeHeadPosition[0]*32, snakeHeadPosition[1]*32, (uint8_t*)images_bmp_color_head_right_81CD4B_bmp);
 8000dbc:	4b77      	ldr	r3, [pc, #476]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	015b      	lsls	r3, r3, #5
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	4b75      	ldr	r3, [pc, #468]	@ (8000f9c <StartDisplayTask+0x31c>)
 8000dc6:	785b      	ldrb	r3, [r3, #1]
 8000dc8:	015b      	lsls	r3, r3, #5
 8000dca:	4a78      	ldr	r2, [pc, #480]	@ (8000fac <StartDisplayTask+0x32c>)
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f002 fd0b 	bl	80037e8 <BSP_LCD_DrawBitmap>
          break;
 8000dd2:	bf00      	nop
      }


      // On affiche le corps du snake
      for (int i = 0; i < snakeSize; i++) {
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000dda:	e08e      	b.n	8000efa <StartDisplayTask+0x27a>
        switch (snakeBodyParts[i]) {
 8000ddc:	4a74      	ldr	r2, [pc, #464]	@ (8000fb0 <StartDisplayTask+0x330>)
 8000dde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000de2:	4413      	add	r3, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	f200 8082 	bhi.w	8000ef0 <StartDisplayTask+0x270>
 8000dec:	a201      	add	r2, pc, #4	@ (adr r2, 8000df4 <StartDisplayTask+0x174>)
 8000dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df2:	bf00      	nop
 8000df4:	08000e0d 	.word	0x08000e0d
 8000df8:	08000e33 	.word	0x08000e33
 8000dfc:	08000e59 	.word	0x08000e59
 8000e00:	08000e7f 	.word	0x08000e7f
 8000e04:	08000ea5 	.word	0x08000ea5
 8000e08:	08000ecb 	.word	0x08000ecb
          case BottomLeft:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_left_81CD4B_bmp);
 8000e0c:	4a69      	ldr	r2, [pc, #420]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e12:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e16:	015b      	lsls	r3, r3, #5
 8000e18:	4618      	mov	r0, r3
 8000e1a:	4a66      	ldr	r2, [pc, #408]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000e1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	785b      	ldrb	r3, [r3, #1]
 8000e26:	015b      	lsls	r3, r3, #5
 8000e28:	4a63      	ldr	r2, [pc, #396]	@ (8000fb8 <StartDisplayTask+0x338>)
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f002 fcdc 	bl	80037e8 <BSP_LCD_DrawBitmap>
            break;
 8000e30:	e05e      	b.n	8000ef0 <StartDisplayTask+0x270>
          case BottomRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_right_81CD4B_bmp);
 8000e32:	4a60      	ldr	r2, [pc, #384]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000e34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e38:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e3c:	015b      	lsls	r3, r3, #5
 8000e3e:	4618      	mov	r0, r3
 8000e40:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	015b      	lsls	r3, r3, #5
 8000e4e:	4a5b      	ldr	r2, [pc, #364]	@ (8000fbc <StartDisplayTask+0x33c>)
 8000e50:	4619      	mov	r1, r3
 8000e52:	f002 fcc9 	bl	80037e8 <BSP_LCD_DrawBitmap>
            break;
 8000e56:	e04b      	b.n	8000ef0 <StartDisplayTask+0x270>
          case BottomTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_bottom_top_81CD4B_bmp);
 8000e58:	4a56      	ldr	r2, [pc, #344]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e5e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e62:	015b      	lsls	r3, r3, #5
 8000e64:	4618      	mov	r0, r3
 8000e66:	4a53      	ldr	r2, [pc, #332]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	785b      	ldrb	r3, [r3, #1]
 8000e72:	015b      	lsls	r3, r3, #5
 8000e74:	4a52      	ldr	r2, [pc, #328]	@ (8000fc0 <StartDisplayTask+0x340>)
 8000e76:	4619      	mov	r1, r3
 8000e78:	f002 fcb6 	bl	80037e8 <BSP_LCD_DrawBitmap>
            break;
 8000e7c:	e038      	b.n	8000ef0 <StartDisplayTask+0x270>
          case LeftRight:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_right_81CD4B_bmp);
 8000e7e:	4a4d      	ldr	r2, [pc, #308]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000e80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e84:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000e88:	015b      	lsls	r3, r3, #5
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	4a49      	ldr	r2, [pc, #292]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	785b      	ldrb	r3, [r3, #1]
 8000e98:	015b      	lsls	r3, r3, #5
 8000e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8000fc4 <StartDisplayTask+0x344>)
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f002 fca3 	bl	80037e8 <BSP_LCD_DrawBitmap>
            break;
 8000ea2:	e025      	b.n	8000ef0 <StartDisplayTask+0x270>
          case LeftTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_left_top_81CD4B_bmp);
 8000ea4:	4a43      	ldr	r2, [pc, #268]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000ea6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000eaa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000eae:	015b      	lsls	r3, r3, #5
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	4a40      	ldr	r2, [pc, #256]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000eb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	015b      	lsls	r3, r3, #5
 8000ec0:	4a41      	ldr	r2, [pc, #260]	@ (8000fc8 <StartDisplayTask+0x348>)
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f002 fc90 	bl	80037e8 <BSP_LCD_DrawBitmap>
            break;
 8000ec8:	e012      	b.n	8000ef0 <StartDisplayTask+0x270>
          case RightTop:
            BSP_LCD_DrawBitmap(snakeBodyPosition[i][0]*32, snakeBodyPosition[i][1]*32, (uint8_t*)images_bmp_color_right_top_81CD4B_bmp);
 8000eca:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000ecc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ed0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000ed4:	015b      	lsls	r3, r3, #5
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	4a36      	ldr	r2, [pc, #216]	@ (8000fb4 <StartDisplayTask+0x334>)
 8000eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	785b      	ldrb	r3, [r3, #1]
 8000ee4:	015b      	lsls	r3, r3, #5
 8000ee6:	4a39      	ldr	r2, [pc, #228]	@ (8000fcc <StartDisplayTask+0x34c>)
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f002 fc7d 	bl	80037e8 <BSP_LCD_DrawBitmap>
            break;
 8000eee:	bf00      	nop
      for (int i = 0; i < snakeSize; i++) {
 8000ef0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000efa:	4b25      	ldr	r3, [pc, #148]	@ (8000f90 <StartDisplayTask+0x310>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f6ff af69 	blt.w	8000ddc <StartDisplayTask+0x15c>
        }
      }

      // On affiche la queue du snake
      switch (tailPart) {
 8000f0a:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <StartDisplayTask+0x350>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d874      	bhi.n	8000ffc <StartDisplayTask+0x37c>
 8000f12:	a201      	add	r2, pc, #4	@ (adr r2, 8000f18 <StartDisplayTask+0x298>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f29 	.word	0x08000f29
 8000f1c:	08000f41 	.word	0x08000f41
 8000f20:	08000f59 	.word	0x08000f59
 8000f24:	08000fe5 	.word	0x08000fe5
        case TailBottom:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_bottom_81CD4B_bmp);
 8000f28:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	015b      	lsls	r3, r3, #5
 8000f2e:	4618      	mov	r0, r3
 8000f30:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000f32:	785b      	ldrb	r3, [r3, #1]
 8000f34:	015b      	lsls	r3, r3, #5
 8000f36:	4a28      	ldr	r2, [pc, #160]	@ (8000fd8 <StartDisplayTask+0x358>)
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f002 fc55 	bl	80037e8 <BSP_LCD_DrawBitmap>
          break;
 8000f3e:	e05d      	b.n	8000ffc <StartDisplayTask+0x37c>
        case TailTop:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_top_81CD4B_bmp);
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	015b      	lsls	r3, r3, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	4b22      	ldr	r3, [pc, #136]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000f4a:	785b      	ldrb	r3, [r3, #1]
 8000f4c:	015b      	lsls	r3, r3, #5
 8000f4e:	4a23      	ldr	r2, [pc, #140]	@ (8000fdc <StartDisplayTask+0x35c>)
 8000f50:	4619      	mov	r1, r3
 8000f52:	f002 fc49 	bl	80037e8 <BSP_LCD_DrawBitmap>
          break;
 8000f56:	e051      	b.n	8000ffc <StartDisplayTask+0x37c>
        case TailLeft:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_left_81CD4B_bmp);
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	015b      	lsls	r3, r3, #5
 8000f5e:	4618      	mov	r0, r3
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <StartDisplayTask+0x354>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
 8000f64:	015b      	lsls	r3, r3, #5
 8000f66:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe0 <StartDisplayTask+0x360>)
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f002 fc3d 	bl	80037e8 <BSP_LCD_DrawBitmap>
          break;
 8000f6e:	e045      	b.n	8000ffc <StartDisplayTask+0x37c>
 8000f70:	200002ac 	.word	0x200002ac
 8000f74:	200002b0 	.word	0x200002b0
 8000f78:	ffa52a2a 	.word	0xffa52a2a
 8000f7c:	20000228 	.word	0x20000228
 8000f80:	0800e6a4 	.word	0x0800e6a4
 8000f84:	0800e6b8 	.word	0x0800e6b8
 8000f88:	0800e6cc 	.word	0x0800e6cc
 8000f8c:	0800e6e0 	.word	0x0800e6e0
 8000f90:	200002a4 	.word	0x200002a4
 8000f94:	0800e6f4 	.word	0x0800e6f4
 8000f98:	20000229 	.word	0x20000229
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	08011988 	.word	0x08011988
 8000fa4:	08012614 	.word	0x08012614
 8000fa8:	080132a0 	.word	0x080132a0
 8000fac:	08013f2c 	.word	0x08013f2c
 8000fb0:	2000022c 	.word	0x2000022c
 8000fb4:	200002b4 	.word	0x200002b4
 8000fb8:	0800f3e4 	.word	0x0800f3e4
 8000fbc:	08010070 	.word	0x08010070
 8000fc0:	08010cfc 	.word	0x08010cfc
 8000fc4:	08014bb8 	.word	0x08014bb8
 8000fc8:	08015844 	.word	0x08015844
 8000fcc:	080164d0 	.word	0x080164d0
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	0801715c 	.word	0x0801715c
 8000fdc:	08017de8 	.word	0x08017de8
 8000fe0:	08018a74 	.word	0x08018a74
        case TailRight:
          BSP_LCD_DrawBitmap(snakeTailPosition[0]*32, snakeTailPosition[1]*32, (uint8_t*)images_bmp_color_tail_right_81CD4B_bmp);
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8001058 <StartDisplayTask+0x3d8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	015b      	lsls	r3, r3, #5
 8000fea:	4618      	mov	r0, r3
 8000fec:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <StartDisplayTask+0x3d8>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	015b      	lsls	r3, r3, #5
 8000ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800105c <StartDisplayTask+0x3dc>)
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f002 fbf7 	bl	80037e8 <BSP_LCD_DrawBitmap>
          break;
 8000ffa:	bf00      	nop
      }

      // On efface l'ancienne queue avec un carré vert
      if (!appleEaten && (snakeHeadPosition[0] != oldTailPosition[0] || snakeHeadPosition[1] != oldTailPosition[1])) {
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <StartDisplayTask+0x3e0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d11a      	bne.n	800103a <StartDisplayTask+0x3ba>
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <StartDisplayTask+0x3e4>)
 8001006:	781a      	ldrb	r2, [r3, #0]
 8001008:	4b17      	ldr	r3, [pc, #92]	@ (8001068 <StartDisplayTask+0x3e8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d105      	bne.n	800101c <StartDisplayTask+0x39c>
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <StartDisplayTask+0x3e4>)
 8001012:	785a      	ldrb	r2, [r3, #1]
 8001014:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <StartDisplayTask+0x3e8>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	429a      	cmp	r2, r3
 800101a:	d00e      	beq.n	800103a <StartDisplayTask+0x3ba>
        BSP_LCD_SetTextColor((uint32_t)0xFF81CD4B); // 0xFF81CD4B
 800101c:	4813      	ldr	r0, [pc, #76]	@ (800106c <StartDisplayTask+0x3ec>)
 800101e:	f002 f9bd 	bl	800339c <BSP_LCD_SetTextColor>
        BSP_LCD_FillRect(oldTailPosition[0]*32, oldTailPosition[1]*32, 32, 32);
 8001022:	4b11      	ldr	r3, [pc, #68]	@ (8001068 <StartDisplayTask+0x3e8>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	b298      	uxth	r0, r3
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <StartDisplayTask+0x3e8>)
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	015b      	lsls	r3, r3, #5
 8001030:	b299      	uxth	r1, r3
 8001032:	2320      	movs	r3, #32
 8001034:	2220      	movs	r2, #32
 8001036:	f002 fc89 	bl	800394c <BSP_LCD_FillRect>
      }
      // On affiche la pomme
      BSP_LCD_DrawBitmap(applePosition[0]*32, applePosition[1]*32, (uint8_t*)images_bmp_color_apple_81CD4B_bmp);
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <StartDisplayTask+0x3f0>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	015b      	lsls	r3, r3, #5
 8001040:	4618      	mov	r0, r3
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <StartDisplayTask+0x3f0>)
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	015b      	lsls	r3, r3, #5
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <StartDisplayTask+0x3f4>)
 800104a:	4619      	mov	r1, r3
 800104c:	f002 fbcc 	bl	80037e8 <BSP_LCD_DrawBitmap>
    }

    osDelay(100);
 8001050:	2064      	movs	r0, #100	@ 0x64
 8001052:	f00a f9b4 	bl	800b3be <osDelay>
    if (gameOver || gamePaused) {
 8001056:	e617      	b.n	8000c88 <StartDisplayTask+0x8>
 8001058:	20000008 	.word	0x20000008
 800105c:	08019700 	.word	0x08019700
 8001060:	200002a8 	.word	0x200002a8
 8001064:	20000004 	.word	0x20000004
 8001068:	200003a4 	.word	0x200003a4
 800106c:	ff81cd4b 	.word	0xff81cd4b
 8001070:	2000000c 	.word	0x2000000c
 8001074:	0800e758 	.word	0x0800e758

08001078 <StartJoystickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartJoystickTask */
void StartJoystickTask(void const * argument)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartJoystickTask */
  /* Infinite loop */
  for(;;)
  {
    sConfig.Channel = ADC_CHANNEL_8;
 8001080:	4b30      	ldr	r3, [pc, #192]	@ (8001144 <StartJoystickTask+0xcc>)
 8001082:	2208      	movs	r2, #8
 8001084:	601a      	str	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001086:	492f      	ldr	r1, [pc, #188]	@ (8001144 <StartJoystickTask+0xcc>)
 8001088:	482f      	ldr	r0, [pc, #188]	@ (8001148 <StartJoystickTask+0xd0>)
 800108a:	f004 fb0f 	bl	80056ac <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 800108e:	482e      	ldr	r0, [pc, #184]	@ (8001148 <StartJoystickTask+0xd0>)
 8001090:	f004 f9a6 	bl	80053e0 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001094:	bf00      	nop
 8001096:	2164      	movs	r1, #100	@ 0x64
 8001098:	482b      	ldr	r0, [pc, #172]	@ (8001148 <StartJoystickTask+0xd0>)
 800109a:	f004 fa6f 	bl	800557c <HAL_ADC_PollForConversion>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1f8      	bne.n	8001096 <StartJoystickTask+0x1e>
	joystick_v = HAL_ADC_GetValue(&hadc3);
 80010a4:	4828      	ldr	r0, [pc, #160]	@ (8001148 <StartJoystickTask+0xd0>)
 80010a6:	f004 faf4 	bl	8005692 <HAL_ADC_GetValue>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4a27      	ldr	r2, [pc, #156]	@ (800114c <StartJoystickTask+0xd4>)
 80010ae:	6013      	str	r3, [r2, #0]

	HAL_ADC_Start(&hadc1);
 80010b0:	4827      	ldr	r0, [pc, #156]	@ (8001150 <StartJoystickTask+0xd8>)
 80010b2:	f004 f995 	bl	80053e0 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 80010b6:	bf00      	nop
 80010b8:	2164      	movs	r1, #100	@ 0x64
 80010ba:	4825      	ldr	r0, [pc, #148]	@ (8001150 <StartJoystickTask+0xd8>)
 80010bc:	f004 fa5e 	bl	800557c <HAL_ADC_PollForConversion>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f8      	bne.n	80010b8 <StartJoystickTask+0x40>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 80010c6:	4822      	ldr	r0, [pc, #136]	@ (8001150 <StartJoystickTask+0xd8>)
 80010c8:	f004 fae3 	bl	8005692 <HAL_ADC_GetValue>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a21      	ldr	r2, [pc, #132]	@ (8001154 <StartJoystickTask+0xdc>)
 80010d0:	6013      	str	r3, [r2, #0]

    // max range of joystick is 0 to 4095

    if (joystick_v < 1000 && headPart != HeadTop) {
 80010d2:	4b1e      	ldr	r3, [pc, #120]	@ (800114c <StartJoystickTask+0xd4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010da:	d207      	bcs.n	80010ec <StartJoystickTask+0x74>
 80010dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <StartJoystickTask+0xe0>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <StartJoystickTask+0x74>
      direction = Down;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <StartJoystickTask+0xe4>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e027      	b.n	800113c <StartJoystickTask+0xc4>
    } else if (joystick_v > 3000 && headPart != HeadBottom) {
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <StartJoystickTask+0xd4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d907      	bls.n	8001108 <StartJoystickTask+0x90>
 80010f8:	4b17      	ldr	r3, [pc, #92]	@ (8001158 <StartJoystickTask+0xe0>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d003      	beq.n	8001108 <StartJoystickTask+0x90>
      direction = Up;
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <StartJoystickTask+0xe4>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e019      	b.n	800113c <StartJoystickTask+0xc4>
    } else if (joystick_h < 1000 && headPart != HeadLeft) {
 8001108:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <StartJoystickTask+0xdc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001110:	d207      	bcs.n	8001122 <StartJoystickTask+0xaa>
 8001112:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <StartJoystickTask+0xe0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d003      	beq.n	8001122 <StartJoystickTask+0xaa>
      direction = Right;
 800111a:	4b10      	ldr	r3, [pc, #64]	@ (800115c <StartJoystickTask+0xe4>)
 800111c:	2203      	movs	r2, #3
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e00c      	b.n	800113c <StartJoystickTask+0xc4>
    } else if (joystick_h > 3000 && headPart != HeadRight) {
 8001122:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <StartJoystickTask+0xdc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800112a:	4293      	cmp	r3, r2
 800112c:	d906      	bls.n	800113c <StartJoystickTask+0xc4>
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <StartJoystickTask+0xe0>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d002      	beq.n	800113c <StartJoystickTask+0xc4>
      direction = Left;
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <StartJoystickTask+0xe4>)
 8001138:	2202      	movs	r2, #2
 800113a:	701a      	strb	r2, [r3, #0]
    }
    osDelay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f00a f93e 	bl	800b3be <osDelay>
    sConfig.Channel = ADC_CHANNEL_8;
 8001142:	e79d      	b.n	8001080 <StartJoystickTask+0x8>
 8001144:	2000076c 	.word	0x2000076c
 8001148:	2000011c 	.word	0x2000011c
 800114c:	20000220 	.word	0x20000220
 8001150:	200000d4 	.word	0x200000d4
 8001154:	20000224 	.word	0x20000224
 8001158:	20000229 	.word	0x20000229
 800115c:	20000228 	.word	0x20000228

08001160 <StartManageBodyParts>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManageBodyParts */
void StartManageBodyParts(void const * argument)
{
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af02      	add	r7, sp, #8
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManageBodyParts */
  /* Infinite loop */
  for(;;)
  {
    if (!gameOver && !gamePaused) {
 8001168:	4b98      	ldr	r3, [pc, #608]	@ (80013cc <StartManageBodyParts+0x26c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 822d 	bne.w	80015cc <StartManageBodyParts+0x46c>
 8001172:	4b97      	ldr	r3, [pc, #604]	@ (80013d0 <StartManageBodyParts+0x270>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 8228 	bne.w	80015cc <StartManageBodyParts+0x46c>
      oldTailPosition[0] = snakeTailPosition[0];
 800117c:	4b95      	ldr	r3, [pc, #596]	@ (80013d4 <StartManageBodyParts+0x274>)
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b95      	ldr	r3, [pc, #596]	@ (80013d8 <StartManageBodyParts+0x278>)
 8001182:	701a      	strb	r2, [r3, #0]
      oldTailPosition[1] = snakeTailPosition[1];
 8001184:	4b93      	ldr	r3, [pc, #588]	@ (80013d4 <StartManageBodyParts+0x274>)
 8001186:	785a      	ldrb	r2, [r3, #1]
 8001188:	4b93      	ldr	r3, [pc, #588]	@ (80013d8 <StartManageBodyParts+0x278>)
 800118a:	705a      	strb	r2, [r3, #1]

      uint8_t oldHeadPosition[2];
      oldHeadPosition[0] = snakeHeadPosition[0];
 800118c:	4b93      	ldr	r3, [pc, #588]	@ (80013dc <StartManageBodyParts+0x27c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	733b      	strb	r3, [r7, #12]
      oldHeadPosition[1] = snakeHeadPosition[1];
 8001192:	4b92      	ldr	r3, [pc, #584]	@ (80013dc <StartManageBodyParts+0x27c>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	737b      	strb	r3, [r7, #13]


      // la tête
      switch (direction) {
 8001198:	4b91      	ldr	r3, [pc, #580]	@ (80013e0 <StartManageBodyParts+0x280>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b03      	cmp	r3, #3
 800119e:	d833      	bhi.n	8001208 <StartManageBodyParts+0xa8>
 80011a0:	a201      	add	r2, pc, #4	@ (adr r2, 80011a8 <StartManageBodyParts+0x48>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	080011cd 	.word	0x080011cd
 80011b0:	080011e1 	.word	0x080011e1
 80011b4:	080011f5 	.word	0x080011f5
        case Up:
          headPart = HeadTop;
 80011b8:	4b8a      	ldr	r3, [pc, #552]	@ (80013e4 <StartManageBodyParts+0x284>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]--;
 80011be:	4b87      	ldr	r3, [pc, #540]	@ (80013dc <StartManageBodyParts+0x27c>)
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b85      	ldr	r3, [pc, #532]	@ (80013dc <StartManageBodyParts+0x27c>)
 80011c8:	705a      	strb	r2, [r3, #1]
          break;
 80011ca:	e01d      	b.n	8001208 <StartManageBodyParts+0xa8>
        case Down:
          headPart = HeadBottom;
 80011cc:	4b85      	ldr	r3, [pc, #532]	@ (80013e4 <StartManageBodyParts+0x284>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[1]++;
 80011d2:	4b82      	ldr	r3, [pc, #520]	@ (80013dc <StartManageBodyParts+0x27c>)
 80011d4:	785b      	ldrb	r3, [r3, #1]
 80011d6:	3301      	adds	r3, #1
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b80      	ldr	r3, [pc, #512]	@ (80013dc <StartManageBodyParts+0x27c>)
 80011dc:	705a      	strb	r2, [r3, #1]
          break;
 80011de:	e013      	b.n	8001208 <StartManageBodyParts+0xa8>
        case Left:
          headPart = HeadLeft;
 80011e0:	4b80      	ldr	r3, [pc, #512]	@ (80013e4 <StartManageBodyParts+0x284>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]--;
 80011e6:	4b7d      	ldr	r3, [pc, #500]	@ (80013dc <StartManageBodyParts+0x27c>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b7b      	ldr	r3, [pc, #492]	@ (80013dc <StartManageBodyParts+0x27c>)
 80011f0:	701a      	strb	r2, [r3, #0]
          break;
 80011f2:	e009      	b.n	8001208 <StartManageBodyParts+0xa8>
        case Right:
          headPart = HeadRight;
 80011f4:	4b7b      	ldr	r3, [pc, #492]	@ (80013e4 <StartManageBodyParts+0x284>)
 80011f6:	2203      	movs	r2, #3
 80011f8:	701a      	strb	r2, [r3, #0]
          snakeHeadPosition[0]++;
 80011fa:	4b78      	ldr	r3, [pc, #480]	@ (80013dc <StartManageBodyParts+0x27c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4b76      	ldr	r3, [pc, #472]	@ (80013dc <StartManageBodyParts+0x27c>)
 8001204:	701a      	strb	r2, [r3, #0]
          break;
 8001206:	bf00      	nop
      }

      // on vérifie si on est mort
      if (snakeHeadPosition[0] >= gridSizeX || snakeHeadPosition[1] >= gridSizeY || snakeHeadPosition[0] < 0 || snakeHeadPosition[1] < 0) {
 8001208:	4b74      	ldr	r3, [pc, #464]	@ (80013dc <StartManageBodyParts+0x27c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	220f      	movs	r2, #15
 800120e:	4293      	cmp	r3, r2
 8001210:	d204      	bcs.n	800121c <StartManageBodyParts+0xbc>
 8001212:	4b72      	ldr	r3, [pc, #456]	@ (80013dc <StartManageBodyParts+0x27c>)
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	2208      	movs	r2, #8
 8001218:	4293      	cmp	r3, r2
 800121a:	d304      	bcc.n	8001226 <StartManageBodyParts+0xc6>
        gameOver = 1;
 800121c:	4b6b      	ldr	r3, [pc, #428]	@ (80013cc <StartManageBodyParts+0x26c>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]

        displayGameStatus();
 8001222:	f000 fb05 	bl	8001830 <displayGameStatus>
      }
      for (int i = 0; i < snakeSize; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e018      	b.n	800125e <StartManageBodyParts+0xfe>
        if (snakeHeadPosition[0] == snakeBodyPosition[i][0] && snakeHeadPosition[1] == snakeBodyPosition[i][1]) {
 800122c:	4b6b      	ldr	r3, [pc, #428]	@ (80013dc <StartManageBodyParts+0x27c>)
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	496d      	ldr	r1, [pc, #436]	@ (80013e8 <StartManageBodyParts+0x288>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8001238:	429a      	cmp	r2, r3
 800123a:	d10d      	bne.n	8001258 <StartManageBodyParts+0xf8>
 800123c:	4b67      	ldr	r3, [pc, #412]	@ (80013dc <StartManageBodyParts+0x27c>)
 800123e:	785a      	ldrb	r2, [r3, #1]
 8001240:	4969      	ldr	r1, [pc, #420]	@ (80013e8 <StartManageBodyParts+0x288>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	440b      	add	r3, r1
 8001248:	785b      	ldrb	r3, [r3, #1]
 800124a:	429a      	cmp	r2, r3
 800124c:	d104      	bne.n	8001258 <StartManageBodyParts+0xf8>
          gameOver = 1;
 800124e:	4b5f      	ldr	r3, [pc, #380]	@ (80013cc <StartManageBodyParts+0x26c>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

          displayGameStatus();
 8001254:	f000 faec 	bl	8001830 <displayGameStatus>
      for (int i = 0; i < snakeSize; i++) {
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	3301      	adds	r3, #1
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	4b63      	ldr	r3, [pc, #396]	@ (80013ec <StartManageBodyParts+0x28c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	4293      	cmp	r3, r2
 8001268:	dbe0      	blt.n	800122c <StartManageBodyParts+0xcc>
      }


      
      // on vérifie si on a mangé la pomme avant de bouger le corps et la queue
      if (snakeHeadPosition[0] == applePosition[0] && snakeHeadPosition[1] == applePosition[1]) {
 800126a:	4b5c      	ldr	r3, [pc, #368]	@ (80013dc <StartManageBodyParts+0x27c>)
 800126c:	781a      	ldrb	r2, [r3, #0]
 800126e:	4b60      	ldr	r3, [pc, #384]	@ (80013f0 <StartManageBodyParts+0x290>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	f040 8085 	bne.w	8001382 <StartManageBodyParts+0x222>
 8001278:	4b58      	ldr	r3, [pc, #352]	@ (80013dc <StartManageBodyParts+0x27c>)
 800127a:	785a      	ldrb	r2, [r3, #1]
 800127c:	4b5c      	ldr	r3, [pc, #368]	@ (80013f0 <StartManageBodyParts+0x290>)
 800127e:	785b      	ldrb	r3, [r3, #1]
 8001280:	429a      	cmp	r2, r3
 8001282:	d17e      	bne.n	8001382 <StartManageBodyParts+0x222>
        snakeSize++;
 8001284:	4b59      	ldr	r3, [pc, #356]	@ (80013ec <StartManageBodyParts+0x28c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b57      	ldr	r3, [pc, #348]	@ (80013ec <StartManageBodyParts+0x28c>)
 800128e:	701a      	strb	r2, [r3, #0]
        appleEaten = 1;
 8001290:	4b58      	ldr	r3, [pc, #352]	@ (80013f4 <StartManageBodyParts+0x294>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        // Generate a random apple position until it is not occupied by the snake
        do {
          applePosition[0] = rand() % gridSizeX;
 8001296:	f00b ffdb 	bl	800d250 <rand>
 800129a:	4603      	mov	r3, r0
 800129c:	220f      	movs	r2, #15
 800129e:	fb93 f1f2 	sdiv	r1, r3, r2
 80012a2:	fb01 f202 	mul.w	r2, r1, r2
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b51      	ldr	r3, [pc, #324]	@ (80013f0 <StartManageBodyParts+0x290>)
 80012ac:	701a      	strb	r2, [r3, #0]
          applePosition[1] = rand() % gridSizeY;
 80012ae:	f00b ffcf 	bl	800d250 <rand>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2208      	movs	r2, #8
 80012b6:	fb93 f1f2 	sdiv	r1, r3, r2
 80012ba:	fb01 f202 	mul.w	r2, r1, r2
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b4b      	ldr	r3, [pc, #300]	@ (80013f0 <StartManageBodyParts+0x290>)
 80012c4:	705a      	strb	r2, [r3, #1]
        } while (isSnakePosition(applePosition[0], applePosition[1]));
 80012c6:	4b4a      	ldr	r3, [pc, #296]	@ (80013f0 <StartManageBodyParts+0x290>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4a49      	ldr	r2, [pc, #292]	@ (80013f0 <StartManageBodyParts+0x290>)
 80012cc:	7852      	ldrb	r2, [r2, #1]
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fa33 	bl	800173c <isSnakePosition>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1dc      	bne.n	8001296 <StartManageBodyParts+0x136>

        // on ajoute un bodyPart juste derrière la tête
        for (int i = snakeSize - 1; i > 0; i--) {
 80012dc:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <StartManageBodyParts+0x28c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	e020      	b.n	8001328 <StartManageBodyParts+0x1c8>
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a43      	ldr	r2, [pc, #268]	@ (80013f8 <StartManageBodyParts+0x298>)
 80012ec:	5cd1      	ldrb	r1, [r2, r3]
 80012ee:	4a42      	ldr	r2, [pc, #264]	@ (80013f8 <StartManageBodyParts+0x298>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	4413      	add	r3, r2
 80012f4:	460a      	mov	r2, r1
 80012f6:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	4a3a      	ldr	r2, [pc, #232]	@ (80013e8 <StartManageBodyParts+0x288>)
 80012fe:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001302:	4a39      	ldr	r2, [pc, #228]	@ (80013e8 <StartManageBodyParts+0x288>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	3b01      	subs	r3, #1
 800130e:	4a36      	ldr	r2, [pc, #216]	@ (80013e8 <StartManageBodyParts+0x288>)
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	7859      	ldrb	r1, [r3, #1]
 8001316:	4a34      	ldr	r2, [pc, #208]	@ (80013e8 <StartManageBodyParts+0x288>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	460a      	mov	r2, r1
 8001320:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	3b01      	subs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b00      	cmp	r3, #0
 800132c:	dcdb      	bgt.n	80012e6 <StartManageBodyParts+0x186>
        }
        uint8_t backX;
        uint8_t backY;

        if (snakeSize > 1) {
 800132e:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <StartManageBodyParts+0x28c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d906      	bls.n	8001344 <StartManageBodyParts+0x1e4>
          backX = snakeBodyPosition[0][0];
 8001336:	4b2c      	ldr	r3, [pc, #176]	@ (80013e8 <StartManageBodyParts+0x288>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	75fb      	strb	r3, [r7, #23]
          backY = snakeBodyPosition[0][1];
 800133c:	4b2a      	ldr	r3, [pc, #168]	@ (80013e8 <StartManageBodyParts+0x288>)
 800133e:	785b      	ldrb	r3, [r3, #1]
 8001340:	75bb      	strb	r3, [r7, #22]
 8001342:	e005      	b.n	8001350 <StartManageBodyParts+0x1f0>
        }
        else {
          backX = snakeTailPosition[0];
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <StartManageBodyParts+0x274>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	75fb      	strb	r3, [r7, #23]
          backY = snakeTailPosition[1];
 800134a:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <StartManageBodyParts+0x274>)
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	75bb      	strb	r3, [r7, #22]
        }

        snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], backX, backY, oldHeadPosition[0], oldHeadPosition[1]);
 8001350:	4b22      	ldr	r3, [pc, #136]	@ (80013dc <StartManageBodyParts+0x27c>)
 8001352:	7818      	ldrb	r0, [r3, #0]
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <StartManageBodyParts+0x27c>)
 8001356:	7859      	ldrb	r1, [r3, #1]
 8001358:	7b3b      	ldrb	r3, [r7, #12]
 800135a:	7b7a      	ldrb	r2, [r7, #13]
 800135c:	7dbd      	ldrb	r5, [r7, #22]
 800135e:	7dfc      	ldrb	r4, [r7, #23]
 8001360:	9201      	str	r2, [sp, #4]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	462b      	mov	r3, r5
 8001366:	4622      	mov	r2, r4
 8001368:	f000 f988 	bl	800167c <whatBodyPart>
 800136c:	4603      	mov	r3, r0
 800136e:	461a      	mov	r2, r3
 8001370:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <StartManageBodyParts+0x298>)
 8001372:	701a      	strb	r2, [r3, #0]
        snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001374:	7b3a      	ldrb	r2, [r7, #12]
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <StartManageBodyParts+0x288>)
 8001378:	701a      	strb	r2, [r3, #0]
        snakeBodyPosition[0][1] = oldHeadPosition[1];
 800137a:	7b7a      	ldrb	r2, [r7, #13]
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <StartManageBodyParts+0x288>)
 800137e:	705a      	strb	r2, [r3, #1]
      if (snakeHeadPosition[0] == applePosition[0] && snakeHeadPosition[1] == applePosition[1]) {
 8001380:	e124      	b.n	80015cc <StartManageBodyParts+0x46c>
      }
      else {
        appleEaten = 0;
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <StartManageBodyParts+0x294>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        // on met a jour la position de la queue
        if (snakeSize > 0) {
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <StartManageBodyParts+0x28c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d011      	beq.n	80013b4 <StartManageBodyParts+0x254>
          snakeTailPosition[0] = snakeBodyPosition[snakeSize - 1][0];
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <StartManageBodyParts+0x28c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3b01      	subs	r3, #1
 8001396:	4a14      	ldr	r2, [pc, #80]	@ (80013e8 <StartManageBodyParts+0x288>)
 8001398:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800139c:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <StartManageBodyParts+0x274>)
 800139e:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = snakeBodyPosition[snakeSize - 1][1];
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <StartManageBodyParts+0x28c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <StartManageBodyParts+0x288>)
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	785a      	ldrb	r2, [r3, #1]
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <StartManageBodyParts+0x274>)
 80013b0:	705a      	strb	r2, [r3, #1]
 80013b2:	e005      	b.n	80013c0 <StartManageBodyParts+0x260>
        }
        else {
          snakeTailPosition[0] = oldHeadPosition[0];
 80013b4:	7b3a      	ldrb	r2, [r7, #12]
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <StartManageBodyParts+0x274>)
 80013b8:	701a      	strb	r2, [r3, #0]
          snakeTailPosition[1] = oldHeadPosition[1];
 80013ba:	7b7a      	ldrb	r2, [r7, #13]
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <StartManageBodyParts+0x274>)
 80013be:	705a      	strb	r2, [r3, #1]
        }


        // On avance le corps
        for (int i = snakeSize - 1; i > 0; i--) {
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <StartManageBodyParts+0x28c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e039      	b.n	800143e <StartManageBodyParts+0x2de>
 80013ca:	bf00      	nop
 80013cc:	200002ac 	.word	0x200002ac
 80013d0:	200002b0 	.word	0x200002b0
 80013d4:	20000008 	.word	0x20000008
 80013d8:	200003a4 	.word	0x200003a4
 80013dc:	20000004 	.word	0x20000004
 80013e0:	20000228 	.word	0x20000228
 80013e4:	20000229 	.word	0x20000229
 80013e8:	200002b4 	.word	0x200002b4
 80013ec:	200002a4 	.word	0x200002a4
 80013f0:	2000000c 	.word	0x2000000c
 80013f4:	200002a8 	.word	0x200002a8
 80013f8:	2000022c 	.word	0x2000022c
          snakeBodyParts[i] = snakeBodyParts[i - 1];
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	3b01      	subs	r3, #1
 8001400:	4a74      	ldr	r2, [pc, #464]	@ (80015d4 <StartManageBodyParts+0x474>)
 8001402:	5cd1      	ldrb	r1, [r2, r3]
 8001404:	4a73      	ldr	r2, [pc, #460]	@ (80015d4 <StartManageBodyParts+0x474>)
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4413      	add	r3, r2
 800140a:	460a      	mov	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[i][0] = snakeBodyPosition[i - 1][0];
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	3b01      	subs	r3, #1
 8001412:	4a71      	ldr	r2, [pc, #452]	@ (80015d8 <StartManageBodyParts+0x478>)
 8001414:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 8001418:	4a6f      	ldr	r2, [pc, #444]	@ (80015d8 <StartManageBodyParts+0x478>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
          snakeBodyPosition[i][1] = snakeBodyPosition[i - 1][1];
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	3b01      	subs	r3, #1
 8001424:	4a6c      	ldr	r2, [pc, #432]	@ (80015d8 <StartManageBodyParts+0x478>)
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	7859      	ldrb	r1, [r3, #1]
 800142c:	4a6a      	ldr	r2, [pc, #424]	@ (80015d8 <StartManageBodyParts+0x478>)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	460a      	mov	r2, r1
 8001436:	705a      	strb	r2, [r3, #1]
        for (int i = snakeSize - 1; i > 0; i--) {
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	3b01      	subs	r3, #1
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	2b00      	cmp	r3, #0
 8001442:	dcdb      	bgt.n	80013fc <StartManageBodyParts+0x29c>
        }


        // On met a jour le corps
        if (snakeSize > 0) {
 8001444:	4b65      	ldr	r3, [pc, #404]	@ (80015dc <StartManageBodyParts+0x47c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a0 	beq.w	800158e <StartManageBodyParts+0x42e>
          // On met a jour le premier bodyPart
          snakeBodyParts[0] = whatBodyPart(snakeHeadPosition[0], snakeHeadPosition[1], snakeBodyPosition[0][0], snakeBodyPosition[0][1], oldHeadPosition[0], oldHeadPosition[1]);
 800144e:	4b64      	ldr	r3, [pc, #400]	@ (80015e0 <StartManageBodyParts+0x480>)
 8001450:	7818      	ldrb	r0, [r3, #0]
 8001452:	4b63      	ldr	r3, [pc, #396]	@ (80015e0 <StartManageBodyParts+0x480>)
 8001454:	7859      	ldrb	r1, [r3, #1]
 8001456:	4b60      	ldr	r3, [pc, #384]	@ (80015d8 <StartManageBodyParts+0x478>)
 8001458:	781c      	ldrb	r4, [r3, #0]
 800145a:	4b5f      	ldr	r3, [pc, #380]	@ (80015d8 <StartManageBodyParts+0x478>)
 800145c:	785d      	ldrb	r5, [r3, #1]
 800145e:	7b3b      	ldrb	r3, [r7, #12]
 8001460:	7b7a      	ldrb	r2, [r7, #13]
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	462b      	mov	r3, r5
 8001468:	4622      	mov	r2, r4
 800146a:	f000 f907 	bl	800167c <whatBodyPart>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b58      	ldr	r3, [pc, #352]	@ (80015d4 <StartManageBodyParts+0x474>)
 8001474:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][0] = oldHeadPosition[0];
 8001476:	7b3a      	ldrb	r2, [r7, #12]
 8001478:	4b57      	ldr	r3, [pc, #348]	@ (80015d8 <StartManageBodyParts+0x478>)
 800147a:	701a      	strb	r2, [r3, #0]
          snakeBodyPosition[0][1] = oldHeadPosition[1];
 800147c:	7b7a      	ldrb	r2, [r7, #13]
 800147e:	4b56      	ldr	r3, [pc, #344]	@ (80015d8 <StartManageBodyParts+0x478>)
 8001480:	705a      	strb	r2, [r3, #1]

          // On met a jour la queue
          switch (snakeBodyParts[snakeSize - 1]) {
 8001482:	4b56      	ldr	r3, [pc, #344]	@ (80015dc <StartManageBodyParts+0x47c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	3b01      	subs	r3, #1
 8001488:	4a52      	ldr	r2, [pc, #328]	@ (80015d4 <StartManageBodyParts+0x474>)
 800148a:	5cd3      	ldrb	r3, [r2, r3]
 800148c:	2b05      	cmp	r3, #5
 800148e:	f200 809d 	bhi.w	80015cc <StartManageBodyParts+0x46c>
 8001492:	a201      	add	r2, pc, #4	@ (adr r2, 8001498 <StartManageBodyParts+0x338>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	080014b1 	.word	0x080014b1
 800149c:	080014d5 	.word	0x080014d5
 80014a0:	080014f9 	.word	0x080014f9
 80014a4:	0800151f 	.word	0x0800151f
 80014a8:	08001543 	.word	0x08001543
 80014ac:	08001569 	.word	0x08001569
            case BottomLeft:
              // TailTop ou TailRight
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 80014b0:	4b4a      	ldr	r3, [pc, #296]	@ (80015dc <StartManageBodyParts+0x47c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	4a48      	ldr	r2, [pc, #288]	@ (80015d8 <StartManageBodyParts+0x478>)
 80014b8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80014bc:	4b49      	ldr	r3, [pc, #292]	@ (80015e4 <StartManageBodyParts+0x484>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d103      	bne.n	80014cc <StartManageBodyParts+0x36c>
                tailPart = TailTop;
 80014c4:	4b48      	ldr	r3, [pc, #288]	@ (80015e8 <StartManageBodyParts+0x488>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 80014ca:	e07f      	b.n	80015cc <StartManageBodyParts+0x46c>
                tailPart = TailRight;
 80014cc:	4b46      	ldr	r3, [pc, #280]	@ (80015e8 <StartManageBodyParts+0x488>)
 80014ce:	2203      	movs	r2, #3
 80014d0:	701a      	strb	r2, [r3, #0]
              break;
 80014d2:	e07b      	b.n	80015cc <StartManageBodyParts+0x46c>
            case BottomRight:
              // TailBottom ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] == snakeTailPosition[0]) {
 80014d4:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <StartManageBodyParts+0x47c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a3f      	ldr	r2, [pc, #252]	@ (80015d8 <StartManageBodyParts+0x478>)
 80014dc:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80014e0:	4b40      	ldr	r3, [pc, #256]	@ (80015e4 <StartManageBodyParts+0x484>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d103      	bne.n	80014f0 <StartManageBodyParts+0x390>
                tailPart = TailTop;
 80014e8:	4b3f      	ldr	r3, [pc, #252]	@ (80015e8 <StartManageBodyParts+0x488>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailLeft;
              }
              break;
 80014ee:	e06d      	b.n	80015cc <StartManageBodyParts+0x46c>
                tailPart = TailLeft;
 80014f0:	4b3d      	ldr	r3, [pc, #244]	@ (80015e8 <StartManageBodyParts+0x488>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	701a      	strb	r2, [r3, #0]
              break;
 80014f6:	e069      	b.n	80015cc <StartManageBodyParts+0x46c>
            case BottomTop:
              // TailTop ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] < snakeTailPosition[1]) {
 80014f8:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <StartManageBodyParts+0x47c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	4a36      	ldr	r2, [pc, #216]	@ (80015d8 <StartManageBodyParts+0x478>)
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	785a      	ldrb	r2, [r3, #1]
 8001506:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <StartManageBodyParts+0x484>)
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	429a      	cmp	r2, r3
 800150c:	d203      	bcs.n	8001516 <StartManageBodyParts+0x3b6>
                tailPart = TailTop;
 800150e:	4b36      	ldr	r3, [pc, #216]	@ (80015e8 <StartManageBodyParts+0x488>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001514:	e05a      	b.n	80015cc <StartManageBodyParts+0x46c>
                tailPart = TailBottom;
 8001516:	4b34      	ldr	r3, [pc, #208]	@ (80015e8 <StartManageBodyParts+0x488>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
              break;
 800151c:	e056      	b.n	80015cc <StartManageBodyParts+0x46c>
            case LeftRight:
              // TailRight ou TailLeft
              if (snakeBodyPosition[snakeSize - 1][0] < snakeTailPosition[0]) {
 800151e:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <StartManageBodyParts+0x47c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	3b01      	subs	r3, #1
 8001524:	4a2c      	ldr	r2, [pc, #176]	@ (80015d8 <StartManageBodyParts+0x478>)
 8001526:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800152a:	4b2e      	ldr	r3, [pc, #184]	@ (80015e4 <StartManageBodyParts+0x484>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d203      	bcs.n	800153a <StartManageBodyParts+0x3da>
                tailPart = TailLeft;
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <StartManageBodyParts+0x488>)
 8001534:	2202      	movs	r2, #2
 8001536:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailRight;
              }
              break;
 8001538:	e048      	b.n	80015cc <StartManageBodyParts+0x46c>
                tailPart = TailRight;
 800153a:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <StartManageBodyParts+0x488>)
 800153c:	2203      	movs	r2, #3
 800153e:	701a      	strb	r2, [r3, #0]
              break;
 8001540:	e044      	b.n	80015cc <StartManageBodyParts+0x46c>
            case LeftTop:
              // TailRight ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <StartManageBodyParts+0x47c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3b01      	subs	r3, #1
 8001548:	4a23      	ldr	r2, [pc, #140]	@ (80015d8 <StartManageBodyParts+0x478>)
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	785a      	ldrb	r2, [r3, #1]
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <StartManageBodyParts+0x484>)
 8001552:	785b      	ldrb	r3, [r3, #1]
 8001554:	429a      	cmp	r2, r3
 8001556:	d103      	bne.n	8001560 <StartManageBodyParts+0x400>
                tailPart = TailRight;
 8001558:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <StartManageBodyParts+0x488>)
 800155a:	2203      	movs	r2, #3
 800155c:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 800155e:	e035      	b.n	80015cc <StartManageBodyParts+0x46c>
                tailPart = TailBottom;
 8001560:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <StartManageBodyParts+0x488>)
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]
              break;
 8001566:	e031      	b.n	80015cc <StartManageBodyParts+0x46c>
            case RightTop:
              // TailLeft ou TailBottom
              if (snakeBodyPosition[snakeSize - 1][1] == snakeTailPosition[1]) {
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <StartManageBodyParts+0x47c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <StartManageBodyParts+0x478>)
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	785a      	ldrb	r2, [r3, #1]
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <StartManageBodyParts+0x484>)
 8001578:	785b      	ldrb	r3, [r3, #1]
 800157a:	429a      	cmp	r2, r3
 800157c:	d103      	bne.n	8001586 <StartManageBodyParts+0x426>
                tailPart = TailLeft;
 800157e:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <StartManageBodyParts+0x488>)
 8001580:	2202      	movs	r2, #2
 8001582:	701a      	strb	r2, [r3, #0]
              }
              else {
                tailPart = TailBottom;
              }
              break;
 8001584:	e022      	b.n	80015cc <StartManageBodyParts+0x46c>
                tailPart = TailBottom;
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <StartManageBodyParts+0x488>)
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
              break;
 800158c:	e01e      	b.n	80015cc <StartManageBodyParts+0x46c>
          }
        }
        else {
          switch (headPart) {
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <StartManageBodyParts+0x48c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b03      	cmp	r3, #3
 8001594:	d81a      	bhi.n	80015cc <StartManageBodyParts+0x46c>
 8001596:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <StartManageBodyParts+0x43c>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015ad 	.word	0x080015ad
 80015a0:	080015b5 	.word	0x080015b5
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015c5 	.word	0x080015c5
            case HeadTop:
              tailPart = TailTop;
 80015ac:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <StartManageBodyParts+0x488>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	701a      	strb	r2, [r3, #0]
              break;
 80015b2:	e00b      	b.n	80015cc <StartManageBodyParts+0x46c>
            case HeadBottom:
              tailPart = TailBottom;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <StartManageBodyParts+0x488>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
              break;
 80015ba:	e007      	b.n	80015cc <StartManageBodyParts+0x46c>
            case HeadLeft:
              tailPart = TailLeft;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <StartManageBodyParts+0x488>)
 80015be:	2202      	movs	r2, #2
 80015c0:	701a      	strb	r2, [r3, #0]
              break;
 80015c2:	e003      	b.n	80015cc <StartManageBodyParts+0x46c>
            case HeadRight:
              tailPart = TailRight;
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <StartManageBodyParts+0x488>)
 80015c6:	2203      	movs	r2, #3
 80015c8:	701a      	strb	r2, [r3, #0]
              break;
 80015ca:	bf00      	nop
      }
    }



    osDelay(250);
 80015cc:	20fa      	movs	r0, #250	@ 0xfa
 80015ce:	f009 fef6 	bl	800b3be <osDelay>
    if (!gameOver && !gamePaused) {
 80015d2:	e5c9      	b.n	8001168 <StartManageBodyParts+0x8>
 80015d4:	2000022c 	.word	0x2000022c
 80015d8:	200002b4 	.word	0x200002b4
 80015dc:	200002a4 	.word	0x200002a4
 80015e0:	20000004 	.word	0x20000004
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000229 	.word	0x20000229

080015f0 <StartTsHandlerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTsHandlerTask */
void StartTsHandlerTask(void const * argument)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTsHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    BSP_TS_GetState(&TS_State);
 80015f8:	481b      	ldr	r0, [pc, #108]	@ (8001668 <StartTsHandlerTask+0x78>)
 80015fa:	f002 fe73 	bl	80042e4 <BSP_TS_GetState>

    if (!TS_State.touchDetected && screenPressed) {
 80015fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001668 <StartTsHandlerTask+0x78>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d120      	bne.n	8001648 <StartTsHandlerTask+0x58>
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <StartTsHandlerTask+0x7c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d01c      	beq.n	8001648 <StartTsHandlerTask+0x58>
      if (gameOver) {
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <StartTsHandlerTask+0x80>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d008      	beq.n	8001628 <StartTsHandlerTask+0x38>
        gameOver = 0;
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <StartTsHandlerTask+0x80>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 800161c:	4815      	ldr	r0, [pc, #84]	@ (8001674 <StartTsHandlerTask+0x84>)
 800161e:	f001 ff09 	bl	8003434 <BSP_LCD_Clear>
        restartGame();
 8001622:	f000 f8d7 	bl	80017d4 <restartGame>
 8001626:	e00f      	b.n	8001648 <StartTsHandlerTask+0x58>
      }
      else if (gamePaused) {
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <StartTsHandlerTask+0x88>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <StartTsHandlerTask+0x4e>
        gamePaused = 0;
 8001630:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <StartTsHandlerTask+0x88>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
        BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001636:	480f      	ldr	r0, [pc, #60]	@ (8001674 <StartTsHandlerTask+0x84>)
 8001638:	f001 fefc 	bl	8003434 <BSP_LCD_Clear>
 800163c:	e004      	b.n	8001648 <StartTsHandlerTask+0x58>
      }
      else {
        gamePaused = 1;
 800163e:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <StartTsHandlerTask+0x88>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

        displayGameStatus();
 8001644:	f000 f8f4 	bl	8001830 <displayGameStatus>
      }
    }

    if (TS_State.touchDetected) {
 8001648:	4b07      	ldr	r3, [pc, #28]	@ (8001668 <StartTsHandlerTask+0x78>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <StartTsHandlerTask+0x68>
      screenPressed = 1;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <StartTsHandlerTask+0x7c>)
 8001652:	2201      	movs	r2, #1
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	e002      	b.n	800165e <StartTsHandlerTask+0x6e>
    }
    else {
      screenPressed = 0;
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <StartTsHandlerTask+0x7c>)
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
    }

    osDelay(10);
 800165e:	200a      	movs	r0, #10
 8001660:	f009 fead 	bl	800b3be <osDelay>
    BSP_TS_GetState(&TS_State);
 8001664:	e7c8      	b.n	80015f8 <StartTsHandlerTask+0x8>
 8001666:	bf00      	nop
 8001668:	200001f0 	.word	0x200001f0
 800166c:	2000021c 	.word	0x2000021c
 8001670:	200002ac 	.word	0x200002ac
 8001674:	ff81cd4b 	.word	0xff81cd4b
 8001678:	200002b0 	.word	0x200002b0

0800167c <whatBodyPart>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
enum BodyPart whatBodyPart(uint8_t frontX, uint8_t frontY, uint8_t backX, uint8_t backY, uint8_t missingX, uint8_t missingY)
{
 800167c:	b490      	push	{r4, r7}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4604      	mov	r4, r0
 8001684:	4608      	mov	r0, r1
 8001686:	4611      	mov	r1, r2
 8001688:	461a      	mov	r2, r3
 800168a:	4623      	mov	r3, r4
 800168c:	71fb      	strb	r3, [r7, #7]
 800168e:	4603      	mov	r3, r0
 8001690:	71bb      	strb	r3, [r7, #6]
 8001692:	460b      	mov	r3, r1
 8001694:	717b      	strb	r3, [r7, #5]
 8001696:	4613      	mov	r3, r2
 8001698:	713b      	strb	r3, [r7, #4]
  /*
    . F .
    . X .
    . B .
  */
  if (frontX == backX)
 800169a:	79fa      	ldrb	r2, [r7, #7]
 800169c:	797b      	ldrb	r3, [r7, #5]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d101      	bne.n	80016a6 <whatBodyPart+0x2a>
    return BottomTop;
 80016a2:	2302      	movs	r3, #2
 80016a4:	e045      	b.n	8001732 <whatBodyPart+0xb6>
  /*
    . . .
    F X B
    . . .
  */
  if (frontY == backY)
 80016a6:	79ba      	ldrb	r2, [r7, #6]
 80016a8:	793b      	ldrb	r3, [r7, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d101      	bne.n	80016b2 <whatBodyPart+0x36>
    return LeftRight;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e03f      	b.n	8001732 <whatBodyPart+0xb6>
  /*
    . B .       . . .
    F X .       . X B
    . . .       . F .
  */
  if (frontX < backX && frontY > backY)
 80016b2:	79fa      	ldrb	r2, [r7, #7]
 80016b4:	797b      	ldrb	r3, [r7, #5]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d20b      	bcs.n	80016d2 <whatBodyPart+0x56>
 80016ba:	79ba      	ldrb	r2, [r7, #6]
 80016bc:	793b      	ldrb	r3, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d907      	bls.n	80016d2 <whatBodyPart+0x56>
    if (missingX == frontX)
 80016c2:	7c3a      	ldrb	r2, [r7, #16]
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d101      	bne.n	80016ce <whatBodyPart+0x52>
      return BottomRight;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e031      	b.n	8001732 <whatBodyPart+0xb6>
    else
      return LeftTop;
 80016ce:	2304      	movs	r3, #4
 80016d0:	e02f      	b.n	8001732 <whatBodyPart+0xb6>
  /*
    . . .       . F .
    F X .       . X B
    . B .       . . .
  */
  if (frontX < backX && frontY < backY)
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d20b      	bcs.n	80016f2 <whatBodyPart+0x76>
 80016da:	79ba      	ldrb	r2, [r7, #6]
 80016dc:	793b      	ldrb	r3, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d207      	bcs.n	80016f2 <whatBodyPart+0x76>
    if (missingX == frontX)
 80016e2:	7c3a      	ldrb	r2, [r7, #16]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d101      	bne.n	80016ee <whatBodyPart+0x72>
      return RightTop;
 80016ea:	2305      	movs	r3, #5
 80016ec:	e021      	b.n	8001732 <whatBodyPart+0xb6>
    else
      return BottomLeft;
 80016ee:	2300      	movs	r3, #0
 80016f0:	e01f      	b.n	8001732 <whatBodyPart+0xb6>
  /*
    . . .       . F .
    . X F       B X .
    . B .       . . .
  */
  if (frontX > backX && frontY < backY)
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	797b      	ldrb	r3, [r7, #5]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d90b      	bls.n	8001712 <whatBodyPart+0x96>
 80016fa:	79ba      	ldrb	r2, [r7, #6]
 80016fc:	793b      	ldrb	r3, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d207      	bcs.n	8001712 <whatBodyPart+0x96>
    if (missingX == frontX)
 8001702:	7c3a      	ldrb	r2, [r7, #16]
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	429a      	cmp	r2, r3
 8001708:	d101      	bne.n	800170e <whatBodyPart+0x92>
      return LeftTop;
 800170a:	2304      	movs	r3, #4
 800170c:	e011      	b.n	8001732 <whatBodyPart+0xb6>
    else
      return BottomRight;
 800170e:	2301      	movs	r3, #1
 8001710:	e00f      	b.n	8001732 <whatBodyPart+0xb6>
  /*
    . B .       . . .
    . X F       B X .
    . . .       . F .
  */
  if (frontX > backX && frontY > backY)
 8001712:	79fa      	ldrb	r2, [r7, #7]
 8001714:	797b      	ldrb	r3, [r7, #5]
 8001716:	429a      	cmp	r2, r3
 8001718:	d90b      	bls.n	8001732 <whatBodyPart+0xb6>
 800171a:	79ba      	ldrb	r2, [r7, #6]
 800171c:	793b      	ldrb	r3, [r7, #4]
 800171e:	429a      	cmp	r2, r3
 8001720:	d907      	bls.n	8001732 <whatBodyPart+0xb6>
    if (missingX == frontX)
 8001722:	7c3a      	ldrb	r2, [r7, #16]
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	429a      	cmp	r2, r3
 8001728:	d101      	bne.n	800172e <whatBodyPart+0xb2>
      return BottomLeft;
 800172a:	2300      	movs	r3, #0
 800172c:	e001      	b.n	8001732 <whatBodyPart+0xb6>
    else
      return RightTop;
 800172e:	2305      	movs	r3, #5
 8001730:	e7ff      	b.n	8001732 <whatBodyPart+0xb6>
  
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bc90      	pop	{r4, r7}
 800173a:	4770      	bx	lr

0800173c <isSnakePosition>:


uint8_t isSnakePosition(uint8_t x, uint8_t y)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	460a      	mov	r2, r1
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	4613      	mov	r3, r2
 800174a:	71bb      	strb	r3, [r7, #6]
  if (x == snakeHeadPosition[0] && y == snakeHeadPosition[1])
 800174c:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <isSnakePosition+0x88>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	429a      	cmp	r2, r3
 8001754:	d106      	bne.n	8001764 <isSnakePosition+0x28>
 8001756:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <isSnakePosition+0x88>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	79ba      	ldrb	r2, [r7, #6]
 800175c:	429a      	cmp	r2, r3
 800175e:	d101      	bne.n	8001764 <isSnakePosition+0x28>
    return 1;
 8001760:	2301      	movs	r3, #1
 8001762:	e029      	b.n	80017b8 <isSnakePosition+0x7c>

  for (int i = 0; i < snakeSize; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	e013      	b.n	8001792 <isSnakePosition+0x56>
    if (x == snakeBodyPosition[i][0] && y == snakeBodyPosition[i][1])
 800176a:	4a17      	ldr	r2, [pc, #92]	@ (80017c8 <isSnakePosition+0x8c>)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	429a      	cmp	r2, r3
 8001776:	d109      	bne.n	800178c <isSnakePosition+0x50>
 8001778:	4a13      	ldr	r2, [pc, #76]	@ (80017c8 <isSnakePosition+0x8c>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	785b      	ldrb	r3, [r3, #1]
 8001782:	79ba      	ldrb	r2, [r7, #6]
 8001784:	429a      	cmp	r2, r3
 8001786:	d101      	bne.n	800178c <isSnakePosition+0x50>
      return 1;
 8001788:	2301      	movs	r3, #1
 800178a:	e015      	b.n	80017b8 <isSnakePosition+0x7c>
  for (int i = 0; i < snakeSize; i++) {
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	3301      	adds	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <isSnakePosition+0x90>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4293      	cmp	r3, r2
 800179c:	dbe5      	blt.n	800176a <isSnakePosition+0x2e>
  }

  if (x == snakeTailPosition[0] && y == snakeTailPosition[1])
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <isSnakePosition+0x94>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d106      	bne.n	80017b6 <isSnakePosition+0x7a>
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <isSnakePosition+0x94>)
 80017aa:	785b      	ldrb	r3, [r3, #1]
 80017ac:	79ba      	ldrb	r2, [r7, #6]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d101      	bne.n	80017b6 <isSnakePosition+0x7a>
    return 1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <isSnakePosition+0x7c>

  return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	20000004 	.word	0x20000004
 80017c8:	200002b4 	.word	0x200002b4
 80017cc:	200002a4 	.word	0x200002a4
 80017d0:	20000008 	.word	0x20000008

080017d4 <restartGame>:

void restartGame()
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  snakeSize = 0;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <restartGame+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[0] = 7;
 80017de:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <restartGame+0x44>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	701a      	strb	r2, [r3, #0]
  snakeHeadPosition[1] = 6;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <restartGame+0x44>)
 80017e6:	2206      	movs	r2, #6
 80017e8:	705a      	strb	r2, [r3, #1]
  snakeTailPosition[0] = 7;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <restartGame+0x48>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	701a      	strb	r2, [r3, #0]
  snakeTailPosition[1] = 7;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <restartGame+0x48>)
 80017f2:	2207      	movs	r2, #7
 80017f4:	705a      	strb	r2, [r3, #1]
  direction = Up;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001820 <restartGame+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
  headPart = HeadTop;
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <restartGame+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
  tailPart = TailTop;
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <restartGame+0x54>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 8001808:	4808      	ldr	r0, [pc, #32]	@ (800182c <restartGame+0x58>)
 800180a:	f001 fe13 	bl	8003434 <BSP_LCD_Clear>
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002a4 	.word	0x200002a4
 8001818:	20000004 	.word	0x20000004
 800181c:	20000008 	.word	0x20000008
 8001820:	20000228 	.word	0x20000228
 8001824:	20000229 	.word	0x20000229
 8001828:	20000000 	.word	0x20000000
 800182c:	ff81cd4b 	.word	0xff81cd4b

08001830 <displayGameStatus>:

void displayGameStatus()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

  if (gameOver) {
 8001834:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <displayGameStatus+0x70>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d015      	beq.n	8001868 <displayGameStatus+0x38>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 800183c:	4819      	ldr	r0, [pc, #100]	@ (80018a4 <displayGameStatus+0x74>)
 800183e:	f001 fdad 	bl	800339c <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001842:	4819      	ldr	r0, [pc, #100]	@ (80018a8 <displayGameStatus+0x78>)
 8001844:	f001 fddc 	bl	8003400 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Over", CENTER_MODE);
 8001848:	2301      	movs	r3, #1
 800184a:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <displayGameStatus+0x7c>)
 800184c:	2164      	movs	r1, #100	@ 0x64
 800184e:	2000      	movs	r0, #0
 8001850:	f001 fe5c 	bl	800350c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8001854:	4816      	ldr	r0, [pc, #88]	@ (80018b0 <displayGameStatus+0x80>)
 8001856:	f001 fdd3 	bl	8003400 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press the screen to restart", CENTER_MODE);
 800185a:	2301      	movs	r3, #1
 800185c:	4a15      	ldr	r2, [pc, #84]	@ (80018b4 <displayGameStatus+0x84>)
 800185e:	2182      	movs	r1, #130	@ 0x82
 8001860:	2000      	movs	r0, #0
 8001862:	f001 fe53 	bl	800350c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
    BSP_LCD_SetFont(&Font16);
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press the screen to resume", CENTER_MODE);
  }
}
 8001866:	e018      	b.n	800189a <displayGameStatus+0x6a>
  else if (gamePaused) {
 8001868:	4b13      	ldr	r3, [pc, #76]	@ (80018b8 <displayGameStatus+0x88>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d014      	beq.n	800189a <displayGameStatus+0x6a>
    BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <displayGameStatus+0x74>)
 8001872:	f001 fd93 	bl	800339c <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001876:	480c      	ldr	r0, [pc, #48]	@ (80018a8 <displayGameStatus+0x78>)
 8001878:	f001 fdc2 	bl	8003400 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 100, (uint8_t *)"Game Paused", CENTER_MODE);
 800187c:	2301      	movs	r3, #1
 800187e:	4a0f      	ldr	r2, [pc, #60]	@ (80018bc <displayGameStatus+0x8c>)
 8001880:	2164      	movs	r1, #100	@ 0x64
 8001882:	2000      	movs	r0, #0
 8001884:	f001 fe42 	bl	800350c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 8001888:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <displayGameStatus+0x80>)
 800188a:	f001 fdb9 	bl	8003400 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press the screen to resume", CENTER_MODE);
 800188e:	2301      	movs	r3, #1
 8001890:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <displayGameStatus+0x90>)
 8001892:	2182      	movs	r1, #130	@ 0x82
 8001894:	2000      	movs	r0, #0
 8001896:	f001 fe39 	bl	800350c <BSP_LCD_DisplayStringAt>
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200002ac 	.word	0x200002ac
 80018a4:	ffa52a2a 	.word	0xffa52a2a
 80018a8:	20000038 	.word	0x20000038
 80018ac:	0800e700 	.word	0x0800e700
 80018b0:	20000040 	.word	0x20000040
 80018b4:	0800e70c 	.word	0x0800e70c
 80018b8:	200002b0 	.word	0x200002b0
 80018bc:	0800e728 	.word	0x0800e728
 80018c0:	0800e734 	.word	0x0800e734

080018c4 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80018ce:	20c8      	movs	r0, #200	@ 0xc8
 80018d0:	f001 fc50 	bl	8003174 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80018d4:	f000 fa7a 	bl	8001dcc <ft5336_I2C_InitializeIfRequired>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001908:	2300      	movs	r3, #0
 800190a:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800190c:	f000 fa5e 	bl	8001dcc <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e010      	b.n	8001938 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	21a8      	movs	r1, #168	@ 0xa8
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fc0b 	bl	8003138 <TS_IO_Read>
 8001922:	4603      	mov	r3, r0
 8001924:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8001926:	7b7b      	ldrb	r3, [r7, #13]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b51      	cmp	r3, #81	@ 0x51
 800192c:	d101      	bne.n	8001932 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800192e:	2301      	movs	r3, #1
 8001930:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	3301      	adds	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	7bfb      	ldrb	r3, [r7, #15]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d802      	bhi.n	8001944 <ft5336_ReadID+0x4e>
 800193e:	7bbb      	ldrb	r3, [r7, #14]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0e8      	beq.n	8001916 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8001944:	7b7b      	ldrb	r3, [r7, #13]
 8001946:	b2db      	uxtb	r3, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fa45 	bl	8001dec <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f933 	bl	8001bd0 <ft5336_TS_DisableIT>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2102      	movs	r1, #2
 8001988:	4618      	mov	r0, r3
 800198a:	f001 fbd5 	bl	8003138 <TS_IO_Read>
 800198e:	4603      	mov	r3, r0
 8001990:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	b2db      	uxtb	r3, r3
 800199c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b05      	cmp	r3, #5
 80019a4:	d901      	bls.n	80019aa <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b05      	ldr	r3, [pc, #20]	@ (80019c4 <ft5336_TS_DetectTouch+0x50>)
 80019b0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80019b2:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <ft5336_TS_DetectTouch+0x50>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	b2db      	uxtb	r3, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000614 	.word	0x20000614

080019c8 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80019ea:	4b6d      	ldr	r3, [pc, #436]	@ (8001ba0 <ft5336_TS_GetXY+0x1d8>)
 80019ec:	789a      	ldrb	r2, [r3, #2]
 80019ee:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba0 <ft5336_TS_GetXY+0x1d8>)
 80019f0:	785b      	ldrb	r3, [r3, #1]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	f080 80cf 	bcs.w	8001b96 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80019f8:	4b69      	ldr	r3, [pc, #420]	@ (8001ba0 <ft5336_TS_GetXY+0x1d8>)
 80019fa:	789b      	ldrb	r3, [r3, #2]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d871      	bhi.n	8001ae4 <ft5336_TS_GetXY+0x11c>
 8001a00:	a201      	add	r2, pc, #4	@ (adr r2, 8001a08 <ft5336_TS_GetXY+0x40>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a31 	.word	0x08001a31
 8001a0c:	08001a43 	.word	0x08001a43
 8001a10:	08001a55 	.word	0x08001a55
 8001a14:	08001a67 	.word	0x08001a67
 8001a18:	08001a79 	.word	0x08001a79
 8001a1c:	08001a8b 	.word	0x08001a8b
 8001a20:	08001a9d 	.word	0x08001a9d
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001ac1 	.word	0x08001ac1
 8001a2c:	08001ad3 	.word	0x08001ad3
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001a30:	2304      	movs	r3, #4
 8001a32:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8001a34:	2303      	movs	r3, #3
 8001a36:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001a38:	2306      	movs	r3, #6
 8001a3a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	753b      	strb	r3, [r7, #20]
      break;
 8001a40:	e051      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8001a42:	230a      	movs	r3, #10
 8001a44:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8001a46:	2309      	movs	r3, #9
 8001a48:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001a4e:	230b      	movs	r3, #11
 8001a50:	753b      	strb	r3, [r7, #20]
      break;
 8001a52:	e048      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8001a54:	2310      	movs	r3, #16
 8001a56:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001a58:	230f      	movs	r3, #15
 8001a5a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001a5c:	2312      	movs	r3, #18
 8001a5e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001a60:	2311      	movs	r3, #17
 8001a62:	753b      	strb	r3, [r7, #20]
      break;
 8001a64:	e03f      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8001a66:	2316      	movs	r3, #22
 8001a68:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001a6a:	2315      	movs	r3, #21
 8001a6c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001a6e:	2318      	movs	r3, #24
 8001a70:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8001a72:	2317      	movs	r3, #23
 8001a74:	753b      	strb	r3, [r7, #20]
      break;
 8001a76:	e036      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001a78:	231c      	movs	r3, #28
 8001a7a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001a7c:	231b      	movs	r3, #27
 8001a7e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001a80:	231e      	movs	r3, #30
 8001a82:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8001a84:	231d      	movs	r3, #29
 8001a86:	753b      	strb	r3, [r7, #20]
      break;
 8001a88:	e02d      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001a8a:	2322      	movs	r3, #34	@ 0x22
 8001a8c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001a8e:	2321      	movs	r3, #33	@ 0x21
 8001a90:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8001a92:	2324      	movs	r3, #36	@ 0x24
 8001a94:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8001a96:	2323      	movs	r3, #35	@ 0x23
 8001a98:	753b      	strb	r3, [r7, #20]
      break;
 8001a9a:	e024      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001a9c:	2328      	movs	r3, #40	@ 0x28
 8001a9e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001aa0:	2327      	movs	r3, #39	@ 0x27
 8001aa2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8001aa4:	232a      	movs	r3, #42	@ 0x2a
 8001aa6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001aa8:	2329      	movs	r3, #41	@ 0x29
 8001aaa:	753b      	strb	r3, [r7, #20]
      break;
 8001aac:	e01b      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001aae:	232e      	movs	r3, #46	@ 0x2e
 8001ab0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8001ab2:	232d      	movs	r3, #45	@ 0x2d
 8001ab4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8001ab6:	2330      	movs	r3, #48	@ 0x30
 8001ab8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8001aba:	232f      	movs	r3, #47	@ 0x2f
 8001abc:	753b      	strb	r3, [r7, #20]
      break;
 8001abe:	e012      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8001ac0:	2334      	movs	r3, #52	@ 0x34
 8001ac2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8001ac4:	2333      	movs	r3, #51	@ 0x33
 8001ac6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8001ac8:	2336      	movs	r3, #54	@ 0x36
 8001aca:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8001acc:	2335      	movs	r3, #53	@ 0x35
 8001ace:	753b      	strb	r3, [r7, #20]
      break;
 8001ad0:	e009      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8001ad2:	233a      	movs	r3, #58	@ 0x3a
 8001ad4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8001ad6:	2339      	movs	r3, #57	@ 0x39
 8001ad8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001ada:	233c      	movs	r3, #60	@ 0x3c
 8001adc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001ade:	233b      	movs	r3, #59	@ 0x3b
 8001ae0:	753b      	strb	r3, [r7, #20]
      break;
 8001ae2:	e000      	b.n	8001ae6 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8001ae4:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	7dfa      	ldrb	r2, [r7, #23]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f001 fb22 	bl	8003138 <TS_IO_Read>
 8001af4:	4603      	mov	r3, r0
 8001af6:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001af8:	7cfb      	ldrb	r3, [r7, #19]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b29      	ldr	r3, [pc, #164]	@ (8001ba4 <ft5336_TS_GetXY+0x1dc>)
 8001b00:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	7dba      	ldrb	r2, [r7, #22]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f001 fb14 	bl	8003138 <TS_IO_Read>
 8001b10:	4603      	mov	r3, r0
 8001b12:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001b14:	7cfb      	ldrb	r3, [r7, #19]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001b1e:	b21a      	sxth	r2, r3
 8001b20:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <ft5336_TS_GetXY+0x1dc>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <ft5336_TS_GetXY+0x1dc>)
 8001b2e:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <ft5336_TS_GetXY+0x1dc>)
 8001b32:	881a      	ldrh	r2, [r3, #0]
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001b38:	89fb      	ldrh	r3, [r7, #14]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	7d7a      	ldrb	r2, [r7, #21]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 faf9 	bl	8003138 <TS_IO_Read>
 8001b46:	4603      	mov	r3, r0
 8001b48:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001b4a:	7cfb      	ldrb	r3, [r7, #19]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <ft5336_TS_GetXY+0x1dc>)
 8001b52:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001b54:	89fb      	ldrh	r3, [r7, #14]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	7d3a      	ldrb	r2, [r7, #20]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f001 faeb 	bl	8003138 <TS_IO_Read>
 8001b62:	4603      	mov	r3, r0
 8001b64:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001b66:	7cfb      	ldrb	r3, [r7, #19]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	021b      	lsls	r3, r3, #8
 8001b6c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <ft5336_TS_GetXY+0x1dc>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <ft5336_TS_GetXY+0x1dc>)
 8001b80:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001b82:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <ft5336_TS_GetXY+0x1dc>)
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001b8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <ft5336_TS_GetXY+0x1d8>)
 8001b8c:	789b      	ldrb	r3, [r3, #2]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <ft5336_TS_GetXY+0x1d8>)
 8001b94:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000614 	.word	0x20000614
 8001ba4:	20000618 	.word	0x20000618

08001ba8 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	21a4      	movs	r1, #164	@ 0xa4
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 fa9e 	bl	8003104 <TS_IO_Write>
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	21a4      	movs	r1, #164	@ 0xa4
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 fa8a 	bl	8003104 <TS_IO_Write>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	6039      	str	r1, [r7, #0]
 8001c30:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 fa7b 	bl	8003138 <TS_IO_Read>
 8001c42:	4603      	mov	r3, r0
 8001c44:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	601a      	str	r2, [r3, #0]
}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	4603      	mov	r3, r0
 8001c66:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001c78:	4b4d      	ldr	r3, [pc, #308]	@ (8001db0 <ft5336_TS_GetTouchInfo+0x158>)
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f080 8090 	bcs.w	8001da6 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d85d      	bhi.n	8001d48 <ft5336_TS_GetTouchInfo+0xf0>
 8001c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c94 <ft5336_TS_GetTouchInfo+0x3c>)
 8001c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c92:	bf00      	nop
 8001c94:	08001cbd 	.word	0x08001cbd
 8001c98:	08001ccb 	.word	0x08001ccb
 8001c9c:	08001cd9 	.word	0x08001cd9
 8001ca0:	08001ce7 	.word	0x08001ce7
 8001ca4:	08001cf5 	.word	0x08001cf5
 8001ca8:	08001d03 	.word	0x08001d03
 8001cac:	08001d11 	.word	0x08001d11
 8001cb0:	08001d1f 	.word	0x08001d1f
 8001cb4:	08001d2d 	.word	0x08001d2d
 8001cb8:	08001d3b 	.word	0x08001d3b
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	757b      	strb	r3, [r7, #21]
      break;
 8001cc8:	e03f      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001cca:	2309      	movs	r3, #9
 8001ccc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001cce:	230d      	movs	r3, #13
 8001cd0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8001cd2:	230e      	movs	r3, #14
 8001cd4:	757b      	strb	r3, [r7, #21]
      break;
 8001cd6:	e038      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001cd8:	230f      	movs	r3, #15
 8001cda:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001cdc:	2313      	movs	r3, #19
 8001cde:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001ce0:	2314      	movs	r3, #20
 8001ce2:	757b      	strb	r3, [r7, #21]
      break;
 8001ce4:	e031      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001ce6:	2315      	movs	r3, #21
 8001ce8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001cea:	2319      	movs	r3, #25
 8001cec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001cee:	231a      	movs	r3, #26
 8001cf0:	757b      	strb	r3, [r7, #21]
      break;
 8001cf2:	e02a      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8001cf4:	231b      	movs	r3, #27
 8001cf6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001cf8:	231f      	movs	r3, #31
 8001cfa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	757b      	strb	r3, [r7, #21]
      break;
 8001d00:	e023      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8001d02:	2321      	movs	r3, #33	@ 0x21
 8001d04:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8001d06:	2325      	movs	r3, #37	@ 0x25
 8001d08:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001d0a:	2326      	movs	r3, #38	@ 0x26
 8001d0c:	757b      	strb	r3, [r7, #21]
      break;
 8001d0e:	e01c      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001d10:	2327      	movs	r3, #39	@ 0x27
 8001d12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001d14:	232b      	movs	r3, #43	@ 0x2b
 8001d16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001d18:	232c      	movs	r3, #44	@ 0x2c
 8001d1a:	757b      	strb	r3, [r7, #21]
      break;
 8001d1c:	e015      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001d1e:	232d      	movs	r3, #45	@ 0x2d
 8001d20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001d22:	2331      	movs	r3, #49	@ 0x31
 8001d24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8001d26:	2332      	movs	r3, #50	@ 0x32
 8001d28:	757b      	strb	r3, [r7, #21]
      break;
 8001d2a:	e00e      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001d2c:	2333      	movs	r3, #51	@ 0x33
 8001d2e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001d30:	2337      	movs	r3, #55	@ 0x37
 8001d32:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001d34:	2338      	movs	r3, #56	@ 0x38
 8001d36:	757b      	strb	r3, [r7, #21]
      break;
 8001d38:	e007      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001d3a:	2339      	movs	r3, #57	@ 0x39
 8001d3c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001d3e:	233d      	movs	r3, #61	@ 0x3d
 8001d40:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001d42:	233e      	movs	r3, #62	@ 0x3e
 8001d44:	757b      	strb	r3, [r7, #21]
      break;
 8001d46:	e000      	b.n	8001d4a <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001d48:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001d4a:	89fb      	ldrh	r3, [r7, #14]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	7dfa      	ldrb	r2, [r7, #23]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f001 f9f0 	bl	8003138 <TS_IO_Read>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001d5c:	7d3b      	ldrb	r3, [r7, #20]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	119b      	asrs	r3, r3, #6
 8001d62:	f003 0203 	and.w	r2, r3, #3
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001d6a:	89fb      	ldrh	r3, [r7, #14]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	7dba      	ldrb	r2, [r7, #22]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f001 f9e0 	bl	8003138 <TS_IO_Read>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001d7c:	7d3b      	ldrb	r3, [r7, #20]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	7d7a      	ldrb	r2, [r7, #21]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f001 f9d2 	bl	8003138 <TS_IO_Read>
 8001d94:	4603      	mov	r3, r0
 8001d96:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001d98:	7d3b      	ldrb	r3, [r7, #20]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	111b      	asrs	r3, r3, #4
 8001d9e:	f003 0204 	and.w	r2, r3, #4
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000614 	.word	0x20000614

08001db4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000614 	.word	0x20000614

08001dcc <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001dd0:	f7ff fff0 	bl	8001db4 <ft5336_Get_I2C_InitializedStatus>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001dda:	f001 f989 	bl	80030f0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001dde:	4b02      	ldr	r3, [pc, #8]	@ (8001de8 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
  }
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000614 	.word	0x20000614

08001dec <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b090      	sub	sp, #64	@ 0x40
 8001e0c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e1e:	4baf      	ldr	r3, [pc, #700]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4aae      	ldr	r2, [pc, #696]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e24:	f043 0310 	orr.w	r3, r3, #16
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4bac      	ldr	r3, [pc, #688]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0310 	and.w	r3, r3, #16
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e36:	4ba9      	ldr	r3, [pc, #676]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	4aa8      	ldr	r2, [pc, #672]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e42:	4ba6      	ldr	r3, [pc, #664]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4ba3      	ldr	r3, [pc, #652]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4aa2      	ldr	r2, [pc, #648]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4ba0      	ldr	r3, [pc, #640]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	623b      	str	r3, [r7, #32]
 8001e64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e66:	4b9d      	ldr	r3, [pc, #628]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	4a9c      	ldr	r2, [pc, #624]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e72:	4b9a      	ldr	r3, [pc, #616]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7e:	4b97      	ldr	r3, [pc, #604]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a96      	ldr	r2, [pc, #600]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b94      	ldr	r3, [pc, #592]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b91      	ldr	r3, [pc, #580]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	4a90      	ldr	r2, [pc, #576]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea2:	4b8e      	ldr	r3, [pc, #568]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001eae:	4b8b      	ldr	r3, [pc, #556]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a8a      	ldr	r2, [pc, #552]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001eb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b88      	ldr	r3, [pc, #544]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ec6:	4b85      	ldr	r3, [pc, #532]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a84      	ldr	r2, [pc, #528]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b82      	ldr	r3, [pc, #520]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001ede:	4b7f      	ldr	r3, [pc, #508]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001ee4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b7c      	ldr	r3, [pc, #496]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ef6:	4b79      	ldr	r3, [pc, #484]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a78      	ldr	r2, [pc, #480]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001efc:	f043 0320 	orr.w	r3, r3, #32
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b76      	ldr	r3, [pc, #472]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0320 	and.w	r3, r3, #32
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f0e:	4b73      	ldr	r3, [pc, #460]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	4a72      	ldr	r2, [pc, #456]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1a:	4b70      	ldr	r3, [pc, #448]	@ (80020dc <MX_GPIO_Init+0x2d4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2160      	movs	r1, #96	@ 0x60
 8001f2a:	486d      	ldr	r0, [pc, #436]	@ (80020e0 <MX_GPIO_Init+0x2d8>)
 8001f2c:	f004 ffe2 	bl	8006ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2120      	movs	r1, #32
 8001f34:	486b      	ldr	r0, [pc, #428]	@ (80020e4 <MX_GPIO_Init+0x2dc>)
 8001f36:	f004 ffdd 	bl	8006ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2108      	movs	r1, #8
 8001f3e:	4869      	ldr	r0, [pc, #420]	@ (80020e4 <MX_GPIO_Init+0x2dc>)
 8001f40:	f004 ffd8 	bl	8006ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001f44:	2201      	movs	r2, #1
 8001f46:	2108      	movs	r1, #8
 8001f48:	4867      	ldr	r0, [pc, #412]	@ (80020e8 <MX_GPIO_Init+0x2e0>)
 8001f4a:	f004 ffd3 	bl	8006ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f54:	4865      	ldr	r0, [pc, #404]	@ (80020ec <MX_GPIO_Init+0x2e4>)
 8001f56:	f004 ffcd 	bl	8006ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8001f60:	4863      	ldr	r0, [pc, #396]	@ (80020f0 <MX_GPIO_Init+0x2e8>)
 8001f62:	f004 ffc7 	bl	8006ef4 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	21c8      	movs	r1, #200	@ 0xc8
 8001f6a:	4862      	ldr	r0, [pc, #392]	@ (80020f4 <MX_GPIO_Init+0x2ec>)
 8001f6c:	f004 ffc2 	bl	8006ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001f70:	2308      	movs	r3, #8
 8001f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f74:	2300      	movs	r3, #0
 8001f76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f80:	4619      	mov	r1, r3
 8001f82:	4857      	ldr	r0, [pc, #348]	@ (80020e0 <MX_GPIO_Init+0x2d8>)
 8001f84:	f004 fcfe 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f94:	2303      	movs	r3, #3
 8001f96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001f98:	2309      	movs	r3, #9
 8001f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001f9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	484f      	ldr	r0, [pc, #316]	@ (80020e0 <MX_GPIO_Init+0x2d8>)
 8001fa4:	f004 fcee 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001fa8:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fba:	230b      	movs	r3, #11
 8001fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	484b      	ldr	r0, [pc, #300]	@ (80020f4 <MX_GPIO_Init+0x2ec>)
 8001fc6:	f004 fcdd 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001fca:	f643 0323 	movw	r3, #14371	@ 0x3823
 8001fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fdc:	230a      	movs	r3, #10
 8001fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4844      	ldr	r0, [pc, #272]	@ (80020f8 <MX_GPIO_Init+0x2f0>)
 8001fe8:	f004 fccc 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001fec:	2380      	movs	r3, #128	@ 0x80
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002000:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002004:	4619      	mov	r1, r3
 8002006:	4837      	ldr	r0, [pc, #220]	@ (80020e4 <MX_GPIO_Init+0x2dc>)
 8002008:	f004 fcbc 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800200c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002010:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800201e:	230c      	movs	r3, #12
 8002020:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002022:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002026:	4619      	mov	r1, r3
 8002028:	4834      	ldr	r0, [pc, #208]	@ (80020fc <MX_GPIO_Init+0x2f4>)
 800202a:	f004 fcab 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 800202e:	f248 1340 	movw	r3, #33088	@ 0x8140
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002034:	2300      	movs	r3, #0
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002040:	4619      	mov	r1, r3
 8002042:	482f      	ldr	r0, [pc, #188]	@ (8002100 <MX_GPIO_Init+0x2f8>)
 8002044:	f004 fc9e 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8002048:	2360      	movs	r3, #96	@ 0x60
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800204c:	2301      	movs	r3, #1
 800204e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002058:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800205c:	4619      	mov	r1, r3
 800205e:	4820      	ldr	r0, [pc, #128]	@ (80020e0 <MX_GPIO_Init+0x2d8>)
 8002060:	f004 fc90 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002064:	2340      	movs	r3, #64	@ 0x40
 8002066:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002074:	230a      	movs	r3, #10
 8002076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002078:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800207c:	4619      	mov	r1, r3
 800207e:	481e      	ldr	r0, [pc, #120]	@ (80020f8 <MX_GPIO_Init+0x2f0>)
 8002080:	f004 fc80 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800208a:	2300      	movs	r3, #0
 800208c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002096:	4619      	mov	r1, r3
 8002098:	481a      	ldr	r0, [pc, #104]	@ (8002104 <MX_GPIO_Init+0x2fc>)
 800209a:	f004 fc73 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800209e:	2340      	movs	r3, #64	@ 0x40
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80020a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80020ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b0:	4619      	mov	r1, r3
 80020b2:	480c      	ldr	r0, [pc, #48]	@ (80020e4 <MX_GPIO_Init+0x2dc>)
 80020b4:	f004 fc66 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 80020b8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020ca:	230a      	movs	r3, #10
 80020cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d2:	4619      	mov	r1, r3
 80020d4:	480a      	ldr	r0, [pc, #40]	@ (8002100 <MX_GPIO_Init+0x2f8>)
 80020d6:	f004 fc55 	bl	8006984 <HAL_GPIO_Init>
 80020da:	e015      	b.n	8002108 <MX_GPIO_Init+0x300>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40022800 	.word	0x40022800
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40021c00 	.word	0x40021c00
 80020f4:	40021800 	.word	0x40021800
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020800 	.word	0x40020800
 8002100:	40020000 	.word	0x40020000
 8002104:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002108:	23f0      	movs	r3, #240	@ 0xf0
 800210a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002114:	2300      	movs	r3, #0
 8002116:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002118:	230a      	movs	r3, #10
 800211a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800211c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002120:	4619      	mov	r1, r3
 8002122:	4891      	ldr	r0, [pc, #580]	@ (8002368 <MX_GPIO_Init+0x560>)
 8002124:	f004 fc2e 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800212c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800213a:	230a      	movs	r3, #10
 800213c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002142:	4619      	mov	r1, r3
 8002144:	4889      	ldr	r0, [pc, #548]	@ (800236c <MX_GPIO_Init+0x564>)
 8002146:	f004 fc1d 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800214a:	2328      	movs	r3, #40	@ 0x28
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002156:	2300      	movs	r3, #0
 8002158:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800215a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800215e:	4619      	mov	r1, r3
 8002160:	4883      	ldr	r0, [pc, #524]	@ (8002370 <MX_GPIO_Init+0x568>)
 8002162:	f004 fc0f 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216c:	2300      	movs	r3, #0
 800216e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	487e      	ldr	r0, [pc, #504]	@ (8002374 <MX_GPIO_Init+0x56c>)
 800217c:	f004 fc02 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002180:	2308      	movs	r3, #8
 8002182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002184:	2301      	movs	r3, #1
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002194:	4619      	mov	r1, r3
 8002196:	4878      	ldr	r0, [pc, #480]	@ (8002378 <MX_GPIO_Init+0x570>)
 8002198:	f004 fbf4 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 800219c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a2:	2300      	movs	r3, #0
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021ae:	4619      	mov	r1, r3
 80021b0:	486e      	ldr	r0, [pc, #440]	@ (800236c <MX_GPIO_Init+0x564>)
 80021b2:	f004 fbe7 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80021b6:	2310      	movs	r3, #16
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ba:	2300      	movs	r3, #0
 80021bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021c6:	4619      	mov	r1, r3
 80021c8:	4869      	ldr	r0, [pc, #420]	@ (8002370 <MX_GPIO_Init+0x568>)
 80021ca:	f004 fbdb 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80021ce:	2304      	movs	r3, #4
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80021de:	230c      	movs	r3, #12
 80021e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021e6:	4619      	mov	r1, r3
 80021e8:	4861      	ldr	r0, [pc, #388]	@ (8002370 <MX_GPIO_Init+0x568>)
 80021ea:	f004 fbcb 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 80021ee:	f24a 0304 	movw	r3, #40964	@ 0xa004
 80021f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f4:	2300      	movs	r3, #0
 80021f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002200:	4619      	mov	r1, r3
 8002202:	485e      	ldr	r0, [pc, #376]	@ (800237c <MX_GPIO_Init+0x574>)
 8002204:	f004 fbbe 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8002208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800220c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800220e:	2301      	movs	r3, #1
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	2300      	movs	r3, #0
 8002214:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002216:	2300      	movs	r3, #0
 8002218:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800221a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800221e:	4619      	mov	r1, r3
 8002220:	4851      	ldr	r0, [pc, #324]	@ (8002368 <MX_GPIO_Init+0x560>)
 8002222:	f004 fbaf 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002226:	f645 6340 	movw	r3, #24128	@ 0x5e40
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002238:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800223c:	4619      	mov	r1, r3
 800223e:	484f      	ldr	r0, [pc, #316]	@ (800237c <MX_GPIO_Init+0x574>)
 8002240:	f004 fba0 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002244:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002248:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800224a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800224e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002254:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002258:	4619      	mov	r1, r3
 800225a:	4843      	ldr	r0, [pc, #268]	@ (8002368 <MX_GPIO_Init+0x560>)
 800225c:	f004 fb92 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002260:	2310      	movs	r3, #16
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002270:	230a      	movs	r3, #10
 8002272:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002274:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002278:	4619      	mov	r1, r3
 800227a:	4840      	ldr	r0, [pc, #256]	@ (800237c <MX_GPIO_Init+0x574>)
 800227c:	f004 fb82 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002280:	23c8      	movs	r3, #200	@ 0xc8
 8002282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002290:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002294:	4619      	mov	r1, r3
 8002296:	4835      	ldr	r0, [pc, #212]	@ (800236c <MX_GPIO_Init+0x564>)
 8002298:	f004 fb74 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800229c:	2305      	movs	r3, #5
 800229e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80022ac:	230a      	movs	r3, #10
 80022ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022b4:	4619      	mov	r1, r3
 80022b6:	482f      	ldr	r0, [pc, #188]	@ (8002374 <MX_GPIO_Init+0x56c>)
 80022b8:	f004 fb64 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80022bc:	2332      	movs	r3, #50	@ 0x32
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c8:	2303      	movs	r3, #3
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80022cc:	230b      	movs	r3, #11
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022d4:	4619      	mov	r1, r3
 80022d6:	4827      	ldr	r0, [pc, #156]	@ (8002374 <MX_GPIO_Init+0x56c>)
 80022d8:	f004 fb54 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022dc:	2304      	movs	r3, #4
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80022ec:	2309      	movs	r3, #9
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022f4:	4619      	mov	r1, r3
 80022f6:	4822      	ldr	r0, [pc, #136]	@ (8002380 <MX_GPIO_Init+0x578>)
 80022f8:	f004 fb44 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80022fc:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800230e:	2309      	movs	r3, #9
 8002310:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002316:	4619      	mov	r1, r3
 8002318:	4815      	ldr	r0, [pc, #84]	@ (8002370 <MX_GPIO_Init+0x568>)
 800231a:	f004 fb33 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800231e:	2386      	movs	r3, #134	@ 0x86
 8002320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800232e:	230b      	movs	r3, #11
 8002330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002336:	4619      	mov	r1, r3
 8002338:	4812      	ldr	r0, [pc, #72]	@ (8002384 <MX_GPIO_Init+0x57c>)
 800233a:	f004 fb23 	bl	8006984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800233e:	2328      	movs	r3, #40	@ 0x28
 8002340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800234e:	230a      	movs	r3, #10
 8002350:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002356:	4619      	mov	r1, r3
 8002358:	480a      	ldr	r0, [pc, #40]	@ (8002384 <MX_GPIO_Init+0x57c>)
 800235a:	f004 fb13 	bl	8006984 <HAL_GPIO_Init>

}
 800235e:	bf00      	nop
 8002360:	3740      	adds	r7, #64	@ 0x40
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40022000 	.word	0x40022000
 800236c:	40021800 	.word	0x40021800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40020800 	.word	0x40020800
 8002378:	40022800 	.word	0x40022800
 800237c:	40021c00 	.word	0x40021c00
 8002380:	40020400 	.word	0x40020400
 8002384:	40020000 	.word	0x40020000

08002388 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800238c:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <MX_I2C1_Init+0x74>)
 800238e:	4a1c      	ldr	r2, [pc, #112]	@ (8002400 <MX_I2C1_Init+0x78>)
 8002390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002392:	4b1a      	ldr	r3, [pc, #104]	@ (80023fc <MX_I2C1_Init+0x74>)
 8002394:	4a1b      	ldr	r2, [pc, #108]	@ (8002404 <MX_I2C1_Init+0x7c>)
 8002396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002398:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <MX_I2C1_Init+0x74>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800239e:	4b17      	ldr	r3, [pc, #92]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023a4:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023aa:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023b0:	4b12      	ldr	r3, [pc, #72]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023be:	2200      	movs	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023c2:	480e      	ldr	r0, [pc, #56]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023c4:	f004 fdb0 	bl	8006f28 <HAL_I2C_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023ce:	f000 fbc1 	bl	8002b54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023d2:	2100      	movs	r1, #0
 80023d4:	4809      	ldr	r0, [pc, #36]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023d6:	f005 fb3d 	bl	8007a54 <HAL_I2CEx_ConfigAnalogFilter>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023e0:	f000 fbb8 	bl	8002b54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023e4:	2100      	movs	r1, #0
 80023e6:	4805      	ldr	r0, [pc, #20]	@ (80023fc <MX_I2C1_Init+0x74>)
 80023e8:	f005 fb7f 	bl	8007aea <HAL_I2CEx_ConfigDigitalFilter>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023f2:	f000 fbaf 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	2000061c 	.word	0x2000061c
 8002400:	40005400 	.word	0x40005400
 8002404:	00c0eaff 	.word	0x00c0eaff

08002408 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800240c:	4b1b      	ldr	r3, [pc, #108]	@ (800247c <MX_I2C3_Init+0x74>)
 800240e:	4a1c      	ldr	r2, [pc, #112]	@ (8002480 <MX_I2C3_Init+0x78>)
 8002410:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8002412:	4b1a      	ldr	r3, [pc, #104]	@ (800247c <MX_I2C3_Init+0x74>)
 8002414:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <MX_I2C3_Init+0x7c>)
 8002416:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002418:	4b18      	ldr	r3, [pc, #96]	@ (800247c <MX_I2C3_Init+0x74>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800241e:	4b17      	ldr	r3, [pc, #92]	@ (800247c <MX_I2C3_Init+0x74>)
 8002420:	2201      	movs	r2, #1
 8002422:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002424:	4b15      	ldr	r3, [pc, #84]	@ (800247c <MX_I2C3_Init+0x74>)
 8002426:	2200      	movs	r2, #0
 8002428:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800242a:	4b14      	ldr	r3, [pc, #80]	@ (800247c <MX_I2C3_Init+0x74>)
 800242c:	2200      	movs	r2, #0
 800242e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002430:	4b12      	ldr	r3, [pc, #72]	@ (800247c <MX_I2C3_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002436:	4b11      	ldr	r3, [pc, #68]	@ (800247c <MX_I2C3_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800243c:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <MX_I2C3_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002442:	480e      	ldr	r0, [pc, #56]	@ (800247c <MX_I2C3_Init+0x74>)
 8002444:	f004 fd70 	bl	8006f28 <HAL_I2C_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800244e:	f000 fb81 	bl	8002b54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002452:	2100      	movs	r1, #0
 8002454:	4809      	ldr	r0, [pc, #36]	@ (800247c <MX_I2C3_Init+0x74>)
 8002456:	f005 fafd 	bl	8007a54 <HAL_I2CEx_ConfigAnalogFilter>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002460:	f000 fb78 	bl	8002b54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002464:	2100      	movs	r1, #0
 8002466:	4805      	ldr	r0, [pc, #20]	@ (800247c <MX_I2C3_Init+0x74>)
 8002468:	f005 fb3f 	bl	8007aea <HAL_I2CEx_ConfigDigitalFilter>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002472:	f000 fb6f 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000670 	.word	0x20000670
 8002480:	40005c00 	.word	0x40005c00
 8002484:	00c0eaff 	.word	0x00c0eaff

08002488 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0ac      	sub	sp, #176	@ 0xb0
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024a0:	f107 0318 	add.w	r3, r7, #24
 80024a4:	2284      	movs	r2, #132	@ 0x84
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00b f834 	bl	800d516 <memset>
  if(i2cHandle->Instance==I2C1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a44      	ldr	r2, [pc, #272]	@ (80025c4 <HAL_I2C_MspInit+0x13c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d13d      	bne.n	8002534 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80024b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024bc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80024be:	2300      	movs	r3, #0
 80024c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024c2:	f107 0318 	add.w	r3, r7, #24
 80024c6:	4618      	mov	r0, r3
 80024c8:	f006 fbf0 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80024d2:	f000 fb3f 	bl	8002b54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a3b      	ldr	r2, [pc, #236]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f6:	2312      	movs	r3, #18
 80024f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002508:	2304      	movs	r3, #4
 800250a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002512:	4619      	mov	r1, r3
 8002514:	482d      	ldr	r0, [pc, #180]	@ (80025cc <HAL_I2C_MspInit+0x144>)
 8002516:	f004 fa35 	bl	8006984 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800251a:	4b2b      	ldr	r3, [pc, #172]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	4a2a      	ldr	r2, [pc, #168]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 8002520:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002524:	6413      	str	r3, [r2, #64]	@ 0x40
 8002526:	4b28      	ldr	r3, [pc, #160]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002532:	e042      	b.n	80025ba <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a25      	ldr	r2, [pc, #148]	@ (80025d0 <HAL_I2C_MspInit+0x148>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d13d      	bne.n	80025ba <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800253e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002542:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254a:	f107 0318 	add.w	r3, r7, #24
 800254e:	4618      	mov	r0, r3
 8002550:	f006 fbac 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800255a:	f000 fafb 	bl	8002b54 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800255e:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 8002564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002568:	6313      	str	r3, [r2, #48]	@ 0x30
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002576:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800257a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257e:	2312      	movs	r3, #18
 8002580:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002584:	2301      	movs	r3, #1
 8002586:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002590:	2304      	movs	r3, #4
 8002592:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002596:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800259a:	4619      	mov	r1, r3
 800259c:	480d      	ldr	r0, [pc, #52]	@ (80025d4 <HAL_I2C_MspInit+0x14c>)
 800259e:	f004 f9f1 	bl	8006984 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	4a08      	ldr	r2, [pc, #32]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 80025a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <HAL_I2C_MspInit+0x140>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
}
 80025ba:	bf00      	nop
 80025bc:	37b0      	adds	r7, #176	@ 0xb0
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40005400 	.word	0x40005400
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40005c00 	.word	0x40005c00
 80025d4:	40021c00 	.word	0x40021c00

080025d8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a15      	ldr	r2, [pc, #84]	@ (800263c <HAL_I2C_MspDeInit+0x64>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d110      	bne.n	800260c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_I2C_MspDeInit+0x68>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a14      	ldr	r2, [pc, #80]	@ (8002640 <HAL_I2C_MspDeInit+0x68>)
 80025f0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80025f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025fa:	4812      	ldr	r0, [pc, #72]	@ (8002644 <HAL_I2C_MspDeInit+0x6c>)
 80025fc:	f004 fb6e 	bl	8006cdc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002600:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002604:	480f      	ldr	r0, [pc, #60]	@ (8002644 <HAL_I2C_MspDeInit+0x6c>)
 8002606:	f004 fb69 	bl	8006cdc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800260a:	e013      	b.n	8002634 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0d      	ldr	r2, [pc, #52]	@ (8002648 <HAL_I2C_MspDeInit+0x70>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10e      	bne.n	8002634 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <HAL_I2C_MspDeInit+0x68>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a09      	ldr	r2, [pc, #36]	@ (8002640 <HAL_I2C_MspDeInit+0x68>)
 800261c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8002622:	2180      	movs	r1, #128	@ 0x80
 8002624:	4809      	ldr	r0, [pc, #36]	@ (800264c <HAL_I2C_MspDeInit+0x74>)
 8002626:	f004 fb59 	bl	8006cdc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800262a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800262e:	4807      	ldr	r0, [pc, #28]	@ (800264c <HAL_I2C_MspDeInit+0x74>)
 8002630:	f004 fb54 	bl	8006cdc <HAL_GPIO_DeInit>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40005400 	.word	0x40005400
 8002640:	40023800 	.word	0x40023800
 8002644:	40020400 	.word	0x40020400
 8002648:	40005c00 	.word	0x40005c00
 800264c:	40021c00 	.word	0x40021c00

08002650 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08e      	sub	sp, #56	@ 0x38
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	2234      	movs	r2, #52	@ 0x34
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f00a ff5a 	bl	800d516 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002662:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <MX_LTDC_Init+0xfc>)
 8002664:	4a3a      	ldr	r2, [pc, #232]	@ (8002750 <MX_LTDC_Init+0x100>)
 8002666:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002668:	4b38      	ldr	r3, [pc, #224]	@ (800274c <MX_LTDC_Init+0xfc>)
 800266a:	2200      	movs	r2, #0
 800266c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800266e:	4b37      	ldr	r3, [pc, #220]	@ (800274c <MX_LTDC_Init+0xfc>)
 8002670:	2200      	movs	r2, #0
 8002672:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002674:	4b35      	ldr	r3, [pc, #212]	@ (800274c <MX_LTDC_Init+0xfc>)
 8002676:	2200      	movs	r2, #0
 8002678:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800267a:	4b34      	ldr	r3, [pc, #208]	@ (800274c <MX_LTDC_Init+0xfc>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002680:	4b32      	ldr	r3, [pc, #200]	@ (800274c <MX_LTDC_Init+0xfc>)
 8002682:	2228      	movs	r2, #40	@ 0x28
 8002684:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002686:	4b31      	ldr	r3, [pc, #196]	@ (800274c <MX_LTDC_Init+0xfc>)
 8002688:	2209      	movs	r2, #9
 800268a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800268c:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <MX_LTDC_Init+0xfc>)
 800268e:	2235      	movs	r2, #53	@ 0x35
 8002690:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002692:	4b2e      	ldr	r3, [pc, #184]	@ (800274c <MX_LTDC_Init+0xfc>)
 8002694:	220b      	movs	r2, #11
 8002696:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002698:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <MX_LTDC_Init+0xfc>)
 800269a:	f240 2215 	movw	r2, #533	@ 0x215
 800269e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80026a0:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <MX_LTDC_Init+0xfc>)
 80026a2:	f240 121b 	movw	r2, #283	@ 0x11b
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <MX_LTDC_Init+0xfc>)
 80026aa:	f240 2235 	movw	r2, #565	@ 0x235
 80026ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80026b0:	4b26      	ldr	r3, [pc, #152]	@ (800274c <MX_LTDC_Init+0xfc>)
 80026b2:	f240 121d 	movw	r2, #285	@ 0x11d
 80026b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80026b8:	4b24      	ldr	r3, [pc, #144]	@ (800274c <MX_LTDC_Init+0xfc>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80026c0:	4b22      	ldr	r3, [pc, #136]	@ (800274c <MX_LTDC_Init+0xfc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80026c8:	4b20      	ldr	r3, [pc, #128]	@ (800274c <MX_LTDC_Init+0xfc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80026d0:	481e      	ldr	r0, [pc, #120]	@ (800274c <MX_LTDC_Init+0xfc>)
 80026d2:	f005 fa57 	bl	8007b84 <HAL_LTDC_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80026dc:	f000 fa3a 	bl	8002b54 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80026e4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80026e8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80026ee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80026f2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80026f4:	2302      	movs	r3, #2
 80026f6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80026f8:	23ff      	movs	r3, #255	@ 0xff
 80026fa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002700:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002704:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002706:	2307      	movs	r3, #7
 8002708:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800270a:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800270e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002710:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8002716:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	2200      	movs	r2, #0
 8002732:	4619      	mov	r1, r3
 8002734:	4805      	ldr	r0, [pc, #20]	@ (800274c <MX_LTDC_Init+0xfc>)
 8002736:	f005 fbb7 	bl	8007ea8 <HAL_LTDC_ConfigLayer>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002740:	f000 fa08 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002744:	bf00      	nop
 8002746:	3738      	adds	r7, #56	@ 0x38
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200006c4 	.word	0x200006c4
 8002750:	40016800 	.word	0x40016800

08002754 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0ae      	sub	sp, #184	@ 0xb8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800276c:	f107 0320 	add.w	r3, r7, #32
 8002770:	2284      	movs	r2, #132	@ 0x84
 8002772:	2100      	movs	r1, #0
 8002774:	4618      	mov	r0, r3
 8002776:	f00a fece 	bl	800d516 <memset>
  if(ltdcHandle->Instance==LTDC)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6f      	ldr	r2, [pc, #444]	@ (800293c <HAL_LTDC_MspInit+0x1e8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	f040 80d6 	bne.w	8002932 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002786:	2308      	movs	r3, #8
 8002788:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800278a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800278e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002790:	2305      	movs	r3, #5
 8002792:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002794:	2302      	movs	r3, #2
 8002796:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002798:	2303      	movs	r3, #3
 800279a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 800279c:	2301      	movs	r3, #1
 800279e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80027a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	4618      	mov	r0, r3
 80027ac:	f006 fa7e 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80027b6:	f000 f9cd 	bl	8002b54 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80027ba:	4b61      	ldr	r3, [pc, #388]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4a60      	ldr	r2, [pc, #384]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b58      	ldr	r3, [pc, #352]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80027ea:	4b55      	ldr	r3, [pc, #340]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a54      	ldr	r2, [pc, #336]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b52      	ldr	r3, [pc, #328]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002802:	4b4f      	ldr	r3, [pc, #316]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	4a4e      	ldr	r2, [pc, #312]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 8002808:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800280c:	6313      	str	r3, [r2, #48]	@ 0x30
 800280e:	4b4c      	ldr	r3, [pc, #304]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800281a:	4b49      	ldr	r3, [pc, #292]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	4a48      	ldr	r2, [pc, #288]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 8002820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002824:	6313      	str	r3, [r2, #48]	@ 0x30
 8002826:	4b46      	ldr	r3, [pc, #280]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002832:	4b43      	ldr	r3, [pc, #268]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	4a42      	ldr	r2, [pc, #264]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283c:	6313      	str	r3, [r2, #48]	@ 0x30
 800283e:	4b40      	ldr	r3, [pc, #256]	@ (8002940 <HAL_LTDC_MspInit+0x1ec>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800284a:	2310      	movs	r3, #16
 800284c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002862:	230e      	movs	r3, #14
 8002864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800286c:	4619      	mov	r1, r3
 800286e:	4835      	ldr	r0, [pc, #212]	@ (8002944 <HAL_LTDC_MspInit+0x1f0>)
 8002870:	f004 f888 	bl	8006984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002874:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002878:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800288e:	230e      	movs	r3, #14
 8002890:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002894:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002898:	4619      	mov	r1, r3
 800289a:	482b      	ldr	r0, [pc, #172]	@ (8002948 <HAL_LTDC_MspInit+0x1f4>)
 800289c:	f004 f872 	bl	8006984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80028a0:	23f7      	movs	r3, #247	@ 0xf7
 80028a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028b8:	230e      	movs	r3, #14
 80028ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80028be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028c2:	4619      	mov	r1, r3
 80028c4:	4821      	ldr	r0, [pc, #132]	@ (800294c <HAL_LTDC_MspInit+0x1f8>)
 80028c6:	f004 f85d 	bl	8006984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80028ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028e4:	2309      	movs	r3, #9
 80028e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80028ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4817      	ldr	r0, [pc, #92]	@ (8002950 <HAL_LTDC_MspInit+0x1fc>)
 80028f2:	f004 f847 	bl	8006984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80028f6:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80028fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002910:	230e      	movs	r3, #14
 8002912:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002916:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800291a:	4619      	mov	r1, r3
 800291c:	480d      	ldr	r0, [pc, #52]	@ (8002954 <HAL_LTDC_MspInit+0x200>)
 800291e:	f004 f831 	bl	8006984 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2105      	movs	r1, #5
 8002926:	2058      	movs	r0, #88	@ 0x58
 8002928:	f003 f9c8 	bl	8005cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800292c:	2058      	movs	r0, #88	@ 0x58
 800292e:	f003 f9e1 	bl	8005cf4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002932:	bf00      	nop
 8002934:	37b8      	adds	r7, #184	@ 0xb8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40016800 	.word	0x40016800
 8002940:	40023800 	.word	0x40023800
 8002944:	40021000 	.word	0x40021000
 8002948:	40022400 	.word	0x40022400
 800294c:	40022800 	.word	0x40022800
 8002950:	40021800 	.word	0x40021800
 8002954:	40022000 	.word	0x40022000

08002958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002958:	b598      	push	{r3, r4, r7, lr}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800295c:	4b37      	ldr	r3, [pc, #220]	@ (8002a3c <main+0xe4>)
 800295e:	2201      	movs	r2, #1
 8002960:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002962:	4b36      	ldr	r3, [pc, #216]	@ (8002a3c <main+0xe4>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002968:	f002 fca5 	bl	80052b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800296c:	f000 f86e 	bl	8002a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002970:	f7ff fa4a 	bl	8001e08 <MX_GPIO_Init>
  MX_ADC3_Init();
 8002974:	f7fd fe66 	bl	8000644 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8002978:	f7fd ff96 	bl	80008a8 <MX_DMA2D_Init>
  MX_FMC_Init();
 800297c:	f7fd ffec 	bl	8000958 <MX_FMC_Init>
  MX_I2C1_Init();
 8002980:	f7ff fd02 	bl	8002388 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002984:	f7ff fd40 	bl	8002408 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002988:	f7ff fe62 	bl	8002650 <MX_LTDC_Init>
  MX_RTC_Init();
 800298c:	f000 f8e8 	bl	8002b60 <MX_RTC_Init>
  MX_SPI2_Init();
 8002990:	f000 f9b8 	bl	8002d04 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002994:	f002 f8a2 	bl	8004adc <MX_TIM1_Init>
  MX_TIM2_Init();
 8002998:	f002 f8f4 	bl	8004b84 <MX_TIM2_Init>
  MX_TIM3_Init();
 800299c:	f002 f940 	bl	8004c20 <MX_TIM3_Init>
  MX_TIM5_Init();
 80029a0:	f002 f98c 	bl	8004cbc <MX_TIM5_Init>
  MX_TIM8_Init();
 80029a4:	f002 f9d8 	bl	8004d58 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80029a8:	f002 faec 	bl	8004f84 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80029ac:	f002 fb1a 	bl	8004fe4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80029b0:	f7fd fdf6 	bl	80005a0 <MX_ADC1_Init>
  MX_DAC_Init();
 80029b4:	f7fd ff06 	bl	80007c4 <MX_DAC_Init>
  MX_UART7_Init();
 80029b8:	f002 fab4 	bl	8004f24 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80029bc:	f000 fbe6 	bl	800318c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80029c0:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80029c4:	2000      	movs	r0, #0
 80029c6:	f000 fc79 	bl	80032bc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 80029ca:	f000 fc4f 	bl	800326c <BSP_LCD_GetXSize>
 80029ce:	4604      	mov	r4, r0
 80029d0:	f000 fc60 	bl	8003294 <BSP_LCD_GetYSize>
 80029d4:	4603      	mov	r3, r0
 80029d6:	fb04 f303 	mul.w	r3, r4, r3
 80029da:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4619      	mov	r1, r3
 80029e2:	2001      	movs	r0, #1
 80029e4:	f000 fc6a 	bl	80032bc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 80029e8:	f001 f82a 	bl	8003a40 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f000 fcc5 	bl	800337c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear((uint32_t)0xFF81CD4B);
 80029f2:	4813      	ldr	r0, [pc, #76]	@ (8002a40 <main+0xe8>)
 80029f4:	f000 fd1e 	bl	8003434 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 80029f8:	2001      	movs	r0, #1
 80029fa:	f000 fcbf 	bl	800337c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 fd18 	bl	8003434 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font16);
 8002a04:	480f      	ldr	r0, [pc, #60]	@ (8002a44 <main+0xec>)
 8002a06:	f000 fcfb 	bl	8003400 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 8002a0a:	480f      	ldr	r0, [pc, #60]	@ (8002a48 <main+0xf0>)
 8002a0c:	f000 fcc6 	bl	800339c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f000 fcdb 	bl	80033cc <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002a16:	f000 fc29 	bl	800326c <BSP_LCD_GetXSize>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	b29c      	uxth	r4, r3
 8002a1e:	f000 fc39 	bl	8003294 <BSP_LCD_GetYSize>
 8002a22:	4603      	mov	r3, r0
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f001 fc1b 	bl	8004264 <BSP_TS_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002a2e:	f7fe f897 	bl	8000b60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002a32:	f008 fc71 	bl	800b318 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002a36:	bf00      	nop
 8002a38:	e7fd      	b.n	8002a36 <main+0xde>
 8002a3a:	bf00      	nop
 8002a3c:	2000076c 	.word	0x2000076c
 8002a40:	ff81cd4b 	.word	0xff81cd4b
 8002a44:	20000040 	.word	0x20000040
 8002a48:	ffa52a2a 	.word	0xffa52a2a

08002a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b094      	sub	sp, #80	@ 0x50
 8002a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a52:	f107 0320 	add.w	r3, r7, #32
 8002a56:	2230      	movs	r2, #48	@ 0x30
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f00a fd5b 	bl	800d516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a70:	f005 fc00 	bl	8008274 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a74:	4b2c      	ldr	r3, [pc, #176]	@ (8002b28 <SystemClock_Config+0xdc>)
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	4a2b      	ldr	r2, [pc, #172]	@ (8002b28 <SystemClock_Config+0xdc>)
 8002a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a80:	4b29      	ldr	r3, [pc, #164]	@ (8002b28 <SystemClock_Config+0xdc>)
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a8c:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <SystemClock_Config+0xe0>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a26      	ldr	r2, [pc, #152]	@ (8002b2c <SystemClock_Config+0xe0>)
 8002a92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b24      	ldr	r3, [pc, #144]	@ (8002b2c <SystemClock_Config+0xe0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002aa0:	607b      	str	r3, [r7, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002aa4:	2309      	movs	r3, #9
 8002aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002aa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ab6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002abc:	2319      	movs	r3, #25
 8002abe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002ac0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002ac4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002aca:	2309      	movs	r3, #9
 8002acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ace:	f107 0320 	add.w	r3, r7, #32
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f005 fc2e 	bl	8008334 <HAL_RCC_OscConfig>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002ade:	f000 f839 	bl	8002b54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ae2:	f005 fbd7 	bl	8008294 <HAL_PWREx_EnableOverDrive>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002aec:	f000 f832 	bl	8002b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002af0:	230f      	movs	r3, #15
 8002af2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002af4:	2302      	movs	r3, #2
 8002af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002afc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	2106      	movs	r1, #6
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f005 feb4 	bl	800887c <HAL_RCC_ClockConfig>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002b1a:	f000 f81b 	bl	8002b54 <Error_Handler>
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3750      	adds	r7, #80	@ 0x50
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40007000 	.word	0x40007000

08002b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a04      	ldr	r2, [pc, #16]	@ (8002b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b42:	f002 fbc5 	bl	80052d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40001000 	.word	0x40001000

08002b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b58:	b672      	cpsid	i
}
 8002b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <Error_Handler+0x8>

08002b60 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b090      	sub	sp, #64	@ 0x40
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
 8002b70:	609a      	str	r2, [r3, #8]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002b76:	2300      	movs	r3, #0
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	2228      	movs	r2, #40	@ 0x28
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f00a fcc8 	bl	800d516 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b86:	4b46      	ldr	r3, [pc, #280]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002b88:	4a46      	ldr	r2, [pc, #280]	@ (8002ca4 <MX_RTC_Init+0x144>)
 8002b8a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b8c:	4b44      	ldr	r3, [pc, #272]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002b94:	227f      	movs	r2, #127	@ 0x7f
 8002b96:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002b98:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002b9a:	22ff      	movs	r2, #255	@ 0xff
 8002b9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b9e:	4b40      	ldr	r3, [pc, #256]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002baa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bb0:	483b      	ldr	r0, [pc, #236]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002bb2:	f006 fc6b 	bl	800948c <HAL_RTC_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002bbc:	f7ff ffca 	bl	8002b54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002bda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bde:	2201      	movs	r2, #1
 8002be0:	4619      	mov	r1, r3
 8002be2:	482f      	ldr	r0, [pc, #188]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002be4:	f006 fcd6 	bl	8009594 <HAL_RTC_SetTime>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002bee:	f7ff ffb1 	bl	8002b54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002c0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4619      	mov	r1, r3
 8002c12:	4823      	ldr	r0, [pc, #140]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002c14:	f006 fd58 	bl	80096c8 <HAL_RTC_SetDate>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002c1e:	f7ff ff99 	bl	8002b54 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002c22:	2300      	movs	r3, #0
 8002c24:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c52:	463b      	mov	r3, r7
 8002c54:	2201      	movs	r2, #1
 8002c56:	4619      	mov	r1, r3
 8002c58:	4811      	ldr	r0, [pc, #68]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002c5a:	f006 fdb9 	bl	80097d0 <HAL_RTC_SetAlarm>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002c64:	f7ff ff76 	bl	8002b54 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002c68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2201      	movs	r2, #1
 8002c72:	4619      	mov	r1, r3
 8002c74:	480a      	ldr	r0, [pc, #40]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002c76:	f006 fdab 	bl	80097d0 <HAL_RTC_SetAlarm>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002c80:	f7ff ff68 	bl	8002b54 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002c84:	2202      	movs	r2, #2
 8002c86:	2100      	movs	r1, #0
 8002c88:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <MX_RTC_Init+0x140>)
 8002c8a:	f006 ff6d 	bl	8009b68 <HAL_RTCEx_SetTimeStamp>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002c94:	f7ff ff5e 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	3740      	adds	r7, #64	@ 0x40
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	2000077c 	.word	0x2000077c
 8002ca4:	40002800 	.word	0x40002800

08002ca8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b0a4      	sub	sp, #144	@ 0x90
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb0:	f107 030c 	add.w	r3, r7, #12
 8002cb4:	2284      	movs	r2, #132	@ 0x84
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f00a fc2c 	bl	800d516 <memset>
  if(rtcHandle->Instance==RTC)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002cfc <HAL_RTC_MspInit+0x54>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d114      	bne.n	8002cf2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ccc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd2:	f107 030c 	add.w	r3, r7, #12
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f005 ffe8 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002ce2:	f7ff ff37 	bl	8002b54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ce6:	4b06      	ldr	r3, [pc, #24]	@ (8002d00 <HAL_RTC_MspInit+0x58>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	4a05      	ldr	r2, [pc, #20]	@ (8002d00 <HAL_RTC_MspInit+0x58>)
 8002cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cf0:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	3790      	adds	r7, #144	@ 0x90
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40002800 	.word	0x40002800
 8002d00:	40023800 	.word	0x40023800

08002d04 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002d08:	4b1b      	ldr	r3, [pc, #108]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d7c <MX_SPI2_Init+0x78>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d16:	4b18      	ldr	r3, [pc, #96]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d1c:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d1e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002d22:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d24:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d2a:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d32:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002d36:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d38:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002d50:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d52:	2207      	movs	r2, #7
 8002d54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d5e:	2208      	movs	r2, #8
 8002d60:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	@ (8002d78 <MX_SPI2_Init+0x74>)
 8002d64:	f006 fff9 	bl	8009d5a <HAL_SPI_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002d6e:	f7ff fef1 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	2000079c 	.word	0x2000079c
 8002d7c:	40003800 	.word	0x40003800

08002d80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	60da      	str	r2, [r3, #12]
 8002d96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a25      	ldr	r2, [pc, #148]	@ (8002e34 <HAL_SPI_MspInit+0xb4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d144      	bne.n	8002e2c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002da2:	4b25      	ldr	r3, [pc, #148]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	4a24      	ldr	r2, [pc, #144]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dae:	4b22      	ldr	r3, [pc, #136]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dba:	4b1f      	ldr	r3, [pc, #124]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dde:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <HAL_SPI_MspInit+0xb8>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002dea:	2303      	movs	r3, #3
 8002dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df6:	2303      	movs	r3, #3
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002dfa:	2305      	movs	r3, #5
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	480d      	ldr	r0, [pc, #52]	@ (8002e3c <HAL_SPI_MspInit+0xbc>)
 8002e06:	f003 fdbd 	bl	8006984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002e0a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e1c:	2305      	movs	r3, #5
 8002e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4619      	mov	r1, r3
 8002e26:	4806      	ldr	r0, [pc, #24]	@ (8002e40 <HAL_SPI_MspInit+0xc0>)
 8002e28:	f003 fdac 	bl	8006984 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3728      	adds	r7, #40	@ 0x28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40003800 	.word	0x40003800
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40022000 	.word	0x40022000
 8002e40:	40020400 	.word	0x40020400

08002e44 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	@ 0x30
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a51      	ldr	r2, [pc, #324]	@ (8002f94 <I2Cx_MspInit+0x150>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d14d      	bne.n	8002ef0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002e54:	4b50      	ldr	r3, [pc, #320]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	4a4f      	ldr	r2, [pc, #316]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e60:	4b4d      	ldr	r3, [pc, #308]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e68:	61bb      	str	r3, [r7, #24]
 8002e6a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002e70:	2312      	movs	r3, #18
 8002e72:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e80:	f107 031c 	add.w	r3, r7, #28
 8002e84:	4619      	mov	r1, r3
 8002e86:	4845      	ldr	r0, [pc, #276]	@ (8002f9c <I2Cx_MspInit+0x158>)
 8002e88:	f003 fd7c 	bl	8006984 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4619      	mov	r1, r3
 8002e98:	4840      	ldr	r0, [pc, #256]	@ (8002f9c <I2Cx_MspInit+0x158>)
 8002e9a:	f003 fd73 	bl	8006984 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	4a3d      	ldr	r2, [pc, #244]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002ea4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002eb6:	4b38      	ldr	r3, [pc, #224]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	4a37      	ldr	r2, [pc, #220]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002ebc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ec0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002ec2:	4b35      	ldr	r3, [pc, #212]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4a34      	ldr	r2, [pc, #208]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002ec8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002ecc:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	210f      	movs	r1, #15
 8002ed2:	2048      	movs	r0, #72	@ 0x48
 8002ed4:	f002 fef2 	bl	8005cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002ed8:	2048      	movs	r0, #72	@ 0x48
 8002eda:	f002 ff0b 	bl	8005cf4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	210f      	movs	r1, #15
 8002ee2:	2049      	movs	r0, #73	@ 0x49
 8002ee4:	f002 feea 	bl	8005cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002ee8:	2049      	movs	r0, #73	@ 0x49
 8002eea:	f002 ff03 	bl	8005cf4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002eee:	e04d      	b.n	8002f8c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002ef0:	4b29      	ldr	r3, [pc, #164]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	4a28      	ldr	r2, [pc, #160]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efc:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002f08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f0c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f0e:	2312      	movs	r3, #18
 8002f10:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002f16:	2302      	movs	r3, #2
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f1e:	f107 031c 	add.w	r3, r7, #28
 8002f22:	4619      	mov	r1, r3
 8002f24:	481e      	ldr	r0, [pc, #120]	@ (8002fa0 <I2Cx_MspInit+0x15c>)
 8002f26:	f003 fd2d 	bl	8006984 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	4619      	mov	r1, r3
 8002f36:	481a      	ldr	r0, [pc, #104]	@ (8002fa0 <I2Cx_MspInit+0x15c>)
 8002f38:	f003 fd24 	bl	8006984 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002f3c:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	4a15      	ldr	r2, [pc, #84]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002f42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f46:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f48:	4b13      	ldr	r3, [pc, #76]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002f54:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4a0f      	ldr	r2, [pc, #60]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002f5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002f5e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002f60:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	4a0c      	ldr	r2, [pc, #48]	@ (8002f98 <I2Cx_MspInit+0x154>)
 8002f66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f6a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	210f      	movs	r1, #15
 8002f70:	201f      	movs	r0, #31
 8002f72:	f002 fea3 	bl	8005cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002f76:	201f      	movs	r0, #31
 8002f78:	f002 febc 	bl	8005cf4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	210f      	movs	r1, #15
 8002f80:	2020      	movs	r0, #32
 8002f82:	f002 fe9b 	bl	8005cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002f86:	2020      	movs	r0, #32
 8002f88:	f002 feb4 	bl	8005cf4 <HAL_NVIC_EnableIRQ>
}
 8002f8c:	bf00      	nop
 8002f8e:	3730      	adds	r7, #48	@ 0x30
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000800 	.word	0x20000800
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40021c00 	.word	0x40021c00
 8002fa0:	40020400 	.word	0x40020400

08002fa4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f004 faa9 	bl	8007504 <HAL_I2C_GetState>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d125      	bne.n	8003004 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a14      	ldr	r2, [pc, #80]	@ (800300c <I2Cx_Init+0x68>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d103      	bne.n	8002fc8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <I2Cx_Init+0x6c>)
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	e002      	b.n	8002fce <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a12      	ldr	r2, [pc, #72]	@ (8003014 <I2Cx_Init+0x70>)
 8002fcc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a11      	ldr	r2, [pc, #68]	@ (8003018 <I2Cx_Init+0x74>)
 8002fd2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff23 	bl	8002e44 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f003 ff92 	bl	8006f28 <HAL_I2C_Init>
  }
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20000800 	.word	0x20000800
 8003010:	40005c00 	.word	0x40005c00
 8003014:	40005400 	.word	0x40005400
 8003018:	40912732 	.word	0x40912732

0800301c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	@ 0x28
 8003020:	af04      	add	r7, sp, #16
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	4608      	mov	r0, r1
 8003026:	4611      	mov	r1, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	72fb      	strb	r3, [r7, #11]
 800302e:	460b      	mov	r3, r1
 8003030:	813b      	strh	r3, [r7, #8]
 8003032:	4613      	mov	r3, r2
 8003034:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800303a:	7afb      	ldrb	r3, [r7, #11]
 800303c:	b299      	uxth	r1, r3
 800303e:	88f8      	ldrh	r0, [r7, #6]
 8003040:	893a      	ldrh	r2, [r7, #8]
 8003042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003046:	9302      	str	r3, [sp, #8]
 8003048:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	4603      	mov	r3, r0
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f004 f93c 	bl	80072d0 <HAL_I2C_Mem_Read>
 8003058:	4603      	mov	r3, r0
 800305a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003062:	7afb      	ldrb	r3, [r7, #11]
 8003064:	4619      	mov	r1, r3
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f832 	bl	80030d0 <I2Cx_Error>
  }
  return status;    
 800306c:	7dfb      	ldrb	r3, [r7, #23]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b08a      	sub	sp, #40	@ 0x28
 800307a:	af04      	add	r7, sp, #16
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	4608      	mov	r0, r1
 8003080:	4611      	mov	r1, r2
 8003082:	461a      	mov	r2, r3
 8003084:	4603      	mov	r3, r0
 8003086:	72fb      	strb	r3, [r7, #11]
 8003088:	460b      	mov	r3, r1
 800308a:	813b      	strh	r3, [r7, #8]
 800308c:	4613      	mov	r3, r2
 800308e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	b299      	uxth	r1, r3
 8003098:	88f8      	ldrh	r0, [r7, #6]
 800309a:	893a      	ldrh	r2, [r7, #8]
 800309c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030a0:	9302      	str	r3, [sp, #8]
 80030a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4603      	mov	r3, r0
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f003 fffb 	bl	80070a8 <HAL_I2C_Mem_Write>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	4619      	mov	r1, r3
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f805 	bl	80030d0 <I2Cx_Error>
  }
  return status;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f003 ffb3 	bl	8007048 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ff5e 	bl	8002fa4 <I2Cx_Init>
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80030f4:	4802      	ldr	r0, [pc, #8]	@ (8003100 <TS_IO_Init+0x10>)
 80030f6:	f7ff ff55 	bl	8002fa4 <I2Cx_Init>
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000800 	.word	0x20000800

08003104 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af02      	add	r7, sp, #8
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	460b      	mov	r3, r1
 8003110:	71bb      	strb	r3, [r7, #6]
 8003112:	4613      	mov	r3, r2
 8003114:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003116:	79bb      	ldrb	r3, [r7, #6]
 8003118:	b29a      	uxth	r2, r3
 800311a:	79f9      	ldrb	r1, [r7, #7]
 800311c:	2301      	movs	r3, #1
 800311e:	9301      	str	r3, [sp, #4]
 8003120:	1d7b      	adds	r3, r7, #5
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2301      	movs	r3, #1
 8003126:	4803      	ldr	r0, [pc, #12]	@ (8003134 <TS_IO_Write+0x30>)
 8003128:	f7ff ffa5 	bl	8003076 <I2Cx_WriteMultiple>
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000800 	.word	0x20000800

08003138 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af02      	add	r7, sp, #8
 800313e:	4603      	mov	r3, r0
 8003140:	460a      	mov	r2, r1
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	4613      	mov	r3, r2
 8003146:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800314c:	79bb      	ldrb	r3, [r7, #6]
 800314e:	b29a      	uxth	r2, r3
 8003150:	79f9      	ldrb	r1, [r7, #7]
 8003152:	2301      	movs	r3, #1
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	f107 030f 	add.w	r3, r7, #15
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	2301      	movs	r3, #1
 800315e:	4804      	ldr	r0, [pc, #16]	@ (8003170 <TS_IO_Read+0x38>)
 8003160:	f7ff ff5c 	bl	800301c <I2Cx_ReadMultiple>

  return read_value;
 8003164:	7bfb      	ldrb	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000800 	.word	0x20000800

08003174 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f002 f8c7 	bl	8005310 <HAL_Delay>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003190:	4b31      	ldr	r3, [pc, #196]	@ (8003258 <BSP_LCD_Init+0xcc>)
 8003192:	2228      	movs	r2, #40	@ 0x28
 8003194:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003196:	4b30      	ldr	r3, [pc, #192]	@ (8003258 <BSP_LCD_Init+0xcc>)
 8003198:	2209      	movs	r2, #9
 800319a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800319c:	4b2e      	ldr	r3, [pc, #184]	@ (8003258 <BSP_LCD_Init+0xcc>)
 800319e:	2235      	movs	r2, #53	@ 0x35
 80031a0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80031a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031a4:	220b      	movs	r2, #11
 80031a6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80031a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031aa:	f240 121b 	movw	r2, #283	@ 0x11b
 80031ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80031b0:	4b29      	ldr	r3, [pc, #164]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031b2:	f240 2215 	movw	r2, #533	@ 0x215
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80031b8:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031ba:	f240 121d 	movw	r2, #285	@ 0x11d
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80031c0:	4b25      	ldr	r3, [pc, #148]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031c2:	f240 2235 	movw	r2, #565	@ 0x235
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80031c8:	2100      	movs	r1, #0
 80031ca:	4823      	ldr	r0, [pc, #140]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031cc:	f000 fd30 	bl	8003c30 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80031d0:	4b21      	ldr	r3, [pc, #132]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031d2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80031d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80031d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031da:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80031de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80031e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80031f0:	4b19      	ldr	r3, [pc, #100]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80031f8:	4b17      	ldr	r3, [pc, #92]	@ (8003258 <BSP_LCD_Init+0xcc>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80031fe:	4b16      	ldr	r3, [pc, #88]	@ (8003258 <BSP_LCD_Init+0xcc>)
 8003200:	2200      	movs	r2, #0
 8003202:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003204:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <BSP_LCD_Init+0xcc>)
 8003206:	2200      	movs	r2, #0
 8003208:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800320a:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <BSP_LCD_Init+0xcc>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003210:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <BSP_LCD_Init+0xcc>)
 8003212:	4a12      	ldr	r2, [pc, #72]	@ (800325c <BSP_LCD_Init+0xd0>)
 8003214:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003216:	4810      	ldr	r0, [pc, #64]	@ (8003258 <BSP_LCD_Init+0xcc>)
 8003218:	f004 fe84 	bl	8007f24 <HAL_LTDC_GetState>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003222:	2100      	movs	r1, #0
 8003224:	480c      	ldr	r0, [pc, #48]	@ (8003258 <BSP_LCD_Init+0xcc>)
 8003226:	f000 fc29 	bl	8003a7c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800322a:	480b      	ldr	r0, [pc, #44]	@ (8003258 <BSP_LCD_Init+0xcc>)
 800322c:	f004 fcaa 	bl	8007b84 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003230:	2201      	movs	r2, #1
 8003232:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003236:	480a      	ldr	r0, [pc, #40]	@ (8003260 <BSP_LCD_Init+0xd4>)
 8003238:	f003 fe5c 	bl	8006ef4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800323c:	2201      	movs	r2, #1
 800323e:	2108      	movs	r1, #8
 8003240:	4808      	ldr	r0, [pc, #32]	@ (8003264 <BSP_LCD_Init+0xd8>)
 8003242:	f003 fe57 	bl	8006ef4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8003246:	f000 fe57 	bl	8003ef8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800324a:	4807      	ldr	r0, [pc, #28]	@ (8003268 <BSP_LCD_Init+0xdc>)
 800324c:	f000 f8d8 	bl	8003400 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000854 	.word	0x20000854
 800325c:	40016800 	.word	0x40016800
 8003260:	40022000 	.word	0x40022000
 8003264:	40022800 	.word	0x40022800
 8003268:	20000038 	.word	0x20000038

0800326c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <BSP_LCD_GetXSize+0x20>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a06      	ldr	r2, [pc, #24]	@ (8003290 <BSP_LCD_GetXSize+0x24>)
 8003276:	2134      	movs	r1, #52	@ 0x34
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3360      	adds	r3, #96	@ 0x60
 8003280:	681b      	ldr	r3, [r3, #0]
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	2000093c 	.word	0x2000093c
 8003290:	20000854 	.word	0x20000854

08003294 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <BSP_LCD_GetYSize+0x20>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a06      	ldr	r2, [pc, #24]	@ (80032b8 <BSP_LCD_GetYSize+0x24>)
 800329e:	2134      	movs	r1, #52	@ 0x34
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3364      	adds	r3, #100	@ 0x64
 80032a8:	681b      	ldr	r3, [r3, #0]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	2000093c 	.word	0x2000093c
 80032b8:	20000854 	.word	0x20000854

080032bc <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80032bc:	b580      	push	{r7, lr}
 80032be:	b090      	sub	sp, #64	@ 0x40
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80032cc:	f7ff ffce 	bl	800326c <BSP_LCD_GetXSize>
 80032d0:	4603      	mov	r3, r0
 80032d2:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80032d8:	f7ff ffdc 	bl	8003294 <BSP_LCD_GetYSize>
 80032dc:	4603      	mov	r3, r0
 80032de:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80032e0:	2300      	movs	r3, #0
 80032e2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80032e8:	23ff      	movs	r3, #255	@ 0xff
 80032ea:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003302:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003308:	2307      	movs	r3, #7
 800330a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800330c:	f7ff ffae 	bl	800326c <BSP_LCD_GetXSize>
 8003310:	4603      	mov	r3, r0
 8003312:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003314:	f7ff ffbe 	bl	8003294 <BSP_LCD_GetYSize>
 8003318:	4603      	mov	r3, r0
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800331c:	88fa      	ldrh	r2, [r7, #6]
 800331e:	f107 030c 	add.w	r3, r7, #12
 8003322:	4619      	mov	r1, r3
 8003324:	4812      	ldr	r0, [pc, #72]	@ (8003370 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003326:	f004 fdbf 	bl	8007ea8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800332a:	88fa      	ldrh	r2, [r7, #6]
 800332c:	4911      	ldr	r1, [pc, #68]	@ (8003374 <BSP_LCD_LayerDefaultInit+0xb8>)
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3304      	adds	r3, #4
 800333a:	f04f 32ff 	mov.w	r2, #4294967295
 800333e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	490c      	ldr	r1, [pc, #48]	@ (8003374 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3308      	adds	r3, #8
 8003350:	4a09      	ldr	r2, [pc, #36]	@ (8003378 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003352:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	4907      	ldr	r1, [pc, #28]	@ (8003374 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003358:	4613      	mov	r3, r2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8003366:	601a      	str	r2, [r3, #0]
}
 8003368:	bf00      	nop
 800336a:	3740      	adds	r7, #64	@ 0x40
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000854 	.word	0x20000854
 8003374:	20000940 	.word	0x20000940
 8003378:	20000038 	.word	0x20000038

0800337c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <BSP_LCD_SelectLayer+0x1c>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6013      	str	r3, [r2, #0]
} 
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	2000093c 	.word	0x2000093c

0800339c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80033a4:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <BSP_LCD_SetTextColor+0x28>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4907      	ldr	r1, [pc, #28]	@ (80033c8 <BSP_LCD_SetTextColor+0x2c>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	2000093c 	.word	0x2000093c
 80033c8:	20000940 	.word	0x20000940

080033cc <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80033d4:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <BSP_LCD_SetBackColor+0x2c>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4908      	ldr	r1, [pc, #32]	@ (80033fc <BSP_LCD_SetBackColor+0x30>)
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3304      	adds	r3, #4
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	2000093c 	.word	0x2000093c
 80033fc:	20000940 	.word	0x20000940

08003400 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <BSP_LCD_SetFont+0x2c>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4908      	ldr	r1, [pc, #32]	@ (8003430 <BSP_LCD_SetFont+0x30>)
 800340e:	4613      	mov	r3, r2
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3308      	adds	r3, #8
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	2000093c 	.word	0x2000093c
 8003430:	20000940 	.word	0x20000940

08003434 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003436:	b085      	sub	sp, #20
 8003438:	af02      	add	r7, sp, #8
 800343a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800343c:	4b0f      	ldr	r3, [pc, #60]	@ (800347c <BSP_LCD_Clear+0x48>)
 800343e:	681c      	ldr	r4, [r3, #0]
 8003440:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <BSP_LCD_Clear+0x48>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0e      	ldr	r2, [pc, #56]	@ (8003480 <BSP_LCD_Clear+0x4c>)
 8003446:	2134      	movs	r1, #52	@ 0x34
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	335c      	adds	r3, #92	@ 0x5c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461e      	mov	r6, r3
 8003454:	f7ff ff0a 	bl	800326c <BSP_LCD_GetXSize>
 8003458:	4605      	mov	r5, r0
 800345a:	f7ff ff1b 	bl	8003294 <BSP_LCD_GetYSize>
 800345e:	4602      	mov	r2, r0
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	2300      	movs	r3, #0
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	462a      	mov	r2, r5
 800346c:	4631      	mov	r1, r6
 800346e:	4620      	mov	r0, r4
 8003470:	f000 fcb2 	bl	8003dd8 <LL_FillBuffer>
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800347c:	2000093c 	.word	0x2000093c
 8003480:	20000854 	.word	0x20000854

08003484 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
 800348e:	460b      	mov	r3, r1
 8003490:	80bb      	strh	r3, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003496:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <BSP_LCD_DisplayChar+0x80>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	491b      	ldr	r1, [pc, #108]	@ (8003508 <BSP_LCD_DisplayChar+0x84>)
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3308      	adds	r3, #8
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6819      	ldr	r1, [r3, #0]
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80034b2:	4b14      	ldr	r3, [pc, #80]	@ (8003504 <BSP_LCD_DisplayChar+0x80>)
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4c14      	ldr	r4, [pc, #80]	@ (8003508 <BSP_LCD_DisplayChar+0x84>)
 80034b8:	4613      	mov	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4423      	add	r3, r4
 80034c2:	3308      	adds	r3, #8
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80034c8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80034cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003504 <BSP_LCD_DisplayChar+0x80>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003508 <BSP_LCD_DisplayChar+0x84>)
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4423      	add	r3, r4
 80034dc:	3308      	adds	r3, #8
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	889b      	ldrh	r3, [r3, #4]
 80034e2:	3307      	adds	r3, #7
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	da00      	bge.n	80034ea <BSP_LCD_DisplayChar+0x66>
 80034e8:	3307      	adds	r3, #7
 80034ea:	10db      	asrs	r3, r3, #3
 80034ec:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80034f0:	18ca      	adds	r2, r1, r3
 80034f2:	88b9      	ldrh	r1, [r7, #4]
 80034f4:	88fb      	ldrh	r3, [r7, #6]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fbb6 	bl	8003c68 <DrawChar>
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bd90      	pop	{r4, r7, pc}
 8003504:	2000093c 	.word	0x2000093c
 8003508:	20000940 	.word	0x20000940

0800350c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800350c:	b5b0      	push	{r4, r5, r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	60ba      	str	r2, [r7, #8]
 8003514:	461a      	mov	r2, r3
 8003516:	4603      	mov	r3, r0
 8003518:	81fb      	strh	r3, [r7, #14]
 800351a:	460b      	mov	r3, r1
 800351c:	81bb      	strh	r3, [r7, #12]
 800351e:	4613      	mov	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003522:	2301      	movs	r3, #1
 8003524:	83fb      	strh	r3, [r7, #30]
 8003526:	2300      	movs	r3, #0
 8003528:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	2300      	movs	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003536:	e002      	b.n	800353e <BSP_LCD_DisplayStringAt+0x32>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	3301      	adds	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	617a      	str	r2, [r7, #20]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f6      	bne.n	8003538 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800354a:	f7ff fe8f 	bl	800326c <BSP_LCD_GetXSize>
 800354e:	4601      	mov	r1, r0
 8003550:	4b50      	ldr	r3, [pc, #320]	@ (8003694 <BSP_LCD_DisplayStringAt+0x188>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4850      	ldr	r0, [pc, #320]	@ (8003698 <BSP_LCD_DisplayStringAt+0x18c>)
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4403      	add	r3, r0
 8003560:	3308      	adds	r3, #8
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	889b      	ldrh	r3, [r3, #4]
 8003566:	fbb1 f3f3 	udiv	r3, r1, r3
 800356a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800356c:	79fb      	ldrb	r3, [r7, #7]
 800356e:	2b03      	cmp	r3, #3
 8003570:	d01c      	beq.n	80035ac <BSP_LCD_DisplayStringAt+0xa0>
 8003572:	2b03      	cmp	r3, #3
 8003574:	dc33      	bgt.n	80035de <BSP_LCD_DisplayStringAt+0xd2>
 8003576:	2b01      	cmp	r3, #1
 8003578:	d002      	beq.n	8003580 <BSP_LCD_DisplayStringAt+0x74>
 800357a:	2b02      	cmp	r3, #2
 800357c:	d019      	beq.n	80035b2 <BSP_LCD_DisplayStringAt+0xa6>
 800357e:	e02e      	b.n	80035de <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1ad1      	subs	r1, r2, r3
 8003586:	4b43      	ldr	r3, [pc, #268]	@ (8003694 <BSP_LCD_DisplayStringAt+0x188>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4843      	ldr	r0, [pc, #268]	@ (8003698 <BSP_LCD_DisplayStringAt+0x18c>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4403      	add	r3, r0
 8003596:	3308      	adds	r3, #8
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	889b      	ldrh	r3, [r3, #4]
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	085b      	lsrs	r3, r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	89fb      	ldrh	r3, [r7, #14]
 80035a6:	4413      	add	r3, r2
 80035a8:	83fb      	strh	r3, [r7, #30]
      break;
 80035aa:	e01b      	b.n	80035e4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80035ac:	89fb      	ldrh	r3, [r7, #14]
 80035ae:	83fb      	strh	r3, [r7, #30]
      break;
 80035b0:	e018      	b.n	80035e4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	b299      	uxth	r1, r3
 80035ba:	4b36      	ldr	r3, [pc, #216]	@ (8003694 <BSP_LCD_DisplayStringAt+0x188>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	4836      	ldr	r0, [pc, #216]	@ (8003698 <BSP_LCD_DisplayStringAt+0x18c>)
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4403      	add	r3, r0
 80035ca:	3308      	adds	r3, #8
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	889b      	ldrh	r3, [r3, #4]
 80035d0:	fb11 f303 	smulbb	r3, r1, r3
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	89fb      	ldrh	r3, [r7, #14]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	83fb      	strh	r3, [r7, #30]
      break;
 80035dc:	e002      	b.n	80035e4 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80035de:	89fb      	ldrh	r3, [r7, #14]
 80035e0:	83fb      	strh	r3, [r7, #30]
      break;
 80035e2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80035e4:	8bfb      	ldrh	r3, [r7, #30]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <BSP_LCD_DisplayStringAt+0xe6>
 80035ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da1d      	bge.n	800362e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80035f2:	2301      	movs	r3, #1
 80035f4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80035f6:	e01a      	b.n	800362e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	89b9      	ldrh	r1, [r7, #12]
 80035fe:	8bfb      	ldrh	r3, [r7, #30]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff3f 	bl	8003484 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003606:	4b23      	ldr	r3, [pc, #140]	@ (8003694 <BSP_LCD_DisplayStringAt+0x188>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4923      	ldr	r1, [pc, #140]	@ (8003698 <BSP_LCD_DisplayStringAt+0x18c>)
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3308      	adds	r3, #8
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	889a      	ldrh	r2, [r3, #4]
 800361c:	8bfb      	ldrh	r3, [r7, #30]
 800361e:	4413      	add	r3, r2
 8003620:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
    i++;
 8003628:	8bbb      	ldrh	r3, [r7, #28]
 800362a:	3301      	adds	r3, #1
 800362c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	bf14      	ite	ne
 8003636:	2301      	movne	r3, #1
 8003638:	2300      	moveq	r3, #0
 800363a:	b2dc      	uxtb	r4, r3
 800363c:	f7ff fe16 	bl	800326c <BSP_LCD_GetXSize>
 8003640:	8bb9      	ldrh	r1, [r7, #28]
 8003642:	4b14      	ldr	r3, [pc, #80]	@ (8003694 <BSP_LCD_DisplayStringAt+0x188>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4d14      	ldr	r5, [pc, #80]	@ (8003698 <BSP_LCD_DisplayStringAt+0x18c>)
 8003648:	4613      	mov	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	442b      	add	r3, r5
 8003652:	3308      	adds	r3, #8
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	889b      	ldrh	r3, [r3, #4]
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	1ac3      	subs	r3, r0, r3
 800365e:	b299      	uxth	r1, r3
 8003660:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <BSP_LCD_DisplayStringAt+0x188>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	480c      	ldr	r0, [pc, #48]	@ (8003698 <BSP_LCD_DisplayStringAt+0x18c>)
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4403      	add	r3, r0
 8003670:	3308      	adds	r3, #8
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	889b      	ldrh	r3, [r3, #4]
 8003676:	4299      	cmp	r1, r3
 8003678:	bf2c      	ite	cs
 800367a:	2301      	movcs	r3, #1
 800367c:	2300      	movcc	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	4023      	ands	r3, r4
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1b7      	bne.n	80035f8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bdb0      	pop	{r4, r5, r7, pc}
 8003692:	bf00      	nop
 8003694:	2000093c 	.word	0x2000093c
 8003698:	20000940 	.word	0x20000940

0800369c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800369c:	b5b0      	push	{r4, r5, r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	4603      	mov	r3, r0
 80036a4:	80fb      	strh	r3, [r7, #6]
 80036a6:	460b      	mov	r3, r1
 80036a8:	80bb      	strh	r3, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80036b2:	4b26      	ldr	r3, [pc, #152]	@ (800374c <BSP_LCD_DrawHLine+0xb0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a26      	ldr	r2, [pc, #152]	@ (8003750 <BSP_LCD_DrawHLine+0xb4>)
 80036b8:	2134      	movs	r1, #52	@ 0x34
 80036ba:	fb01 f303 	mul.w	r3, r1, r3
 80036be:	4413      	add	r3, r2
 80036c0:	3348      	adds	r3, #72	@ 0x48
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d114      	bne.n	80036f2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036c8:	4b20      	ldr	r3, [pc, #128]	@ (800374c <BSP_LCD_DrawHLine+0xb0>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a20      	ldr	r2, [pc, #128]	@ (8003750 <BSP_LCD_DrawHLine+0xb4>)
 80036ce:	2134      	movs	r1, #52	@ 0x34
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	335c      	adds	r3, #92	@ 0x5c
 80036d8:	681c      	ldr	r4, [r3, #0]
 80036da:	f7ff fdc7 	bl	800326c <BSP_LCD_GetXSize>
 80036de:	4602      	mov	r2, r0
 80036e0:	88bb      	ldrh	r3, [r7, #4]
 80036e2:	fb03 f202 	mul.w	r2, r3, r2
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4413      	add	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	4423      	add	r3, r4
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e013      	b.n	800371a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036f2:	4b16      	ldr	r3, [pc, #88]	@ (800374c <BSP_LCD_DrawHLine+0xb0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a16      	ldr	r2, [pc, #88]	@ (8003750 <BSP_LCD_DrawHLine+0xb4>)
 80036f8:	2134      	movs	r1, #52	@ 0x34
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	4413      	add	r3, r2
 8003700:	335c      	adds	r3, #92	@ 0x5c
 8003702:	681c      	ldr	r4, [r3, #0]
 8003704:	f7ff fdb2 	bl	800326c <BSP_LCD_GetXSize>
 8003708:	4602      	mov	r2, r0
 800370a:	88bb      	ldrh	r3, [r7, #4]
 800370c:	fb03 f202 	mul.w	r2, r3, r2
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4423      	add	r3, r4
 8003718:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800371a:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <BSP_LCD_DrawHLine+0xb0>)
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	887c      	ldrh	r4, [r7, #2]
 8003722:	4b0a      	ldr	r3, [pc, #40]	@ (800374c <BSP_LCD_DrawHLine+0xb0>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4d0b      	ldr	r5, [pc, #44]	@ (8003754 <BSP_LCD_DrawHLine+0xb8>)
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	442b      	add	r3, r5
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2300      	movs	r3, #0
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2301      	movs	r3, #1
 800373c:	4622      	mov	r2, r4
 800373e:	f000 fb4b 	bl	8003dd8 <LL_FillBuffer>
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bdb0      	pop	{r4, r5, r7, pc}
 800374a:	bf00      	nop
 800374c:	2000093c 	.word	0x2000093c
 8003750:	20000854 	.word	0x20000854
 8003754:	20000940 	.word	0x20000940

08003758 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003758:	b5b0      	push	{r4, r5, r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	603a      	str	r2, [r7, #0]
 8003762:	80fb      	strh	r3, [r7, #6]
 8003764:	460b      	mov	r3, r1
 8003766:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003768:	4b1d      	ldr	r3, [pc, #116]	@ (80037e0 <BSP_LCD_DrawPixel+0x88>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1d      	ldr	r2, [pc, #116]	@ (80037e4 <BSP_LCD_DrawPixel+0x8c>)
 800376e:	2134      	movs	r1, #52	@ 0x34
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	4413      	add	r3, r2
 8003776:	3348      	adds	r3, #72	@ 0x48
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d116      	bne.n	80037ac <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800377e:	4b18      	ldr	r3, [pc, #96]	@ (80037e0 <BSP_LCD_DrawPixel+0x88>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a18      	ldr	r2, [pc, #96]	@ (80037e4 <BSP_LCD_DrawPixel+0x8c>)
 8003784:	2134      	movs	r1, #52	@ 0x34
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	335c      	adds	r3, #92	@ 0x5c
 800378e:	681c      	ldr	r4, [r3, #0]
 8003790:	88bd      	ldrh	r5, [r7, #4]
 8003792:	f7ff fd6b 	bl	800326c <BSP_LCD_GetXSize>
 8003796:	4603      	mov	r3, r0
 8003798:	fb03 f205 	mul.w	r2, r3, r5
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	4413      	add	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4423      	add	r3, r4
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	b292      	uxth	r2, r2
 80037a8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80037aa:	e015      	b.n	80037d8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80037ac:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <BSP_LCD_DrawPixel+0x88>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0c      	ldr	r2, [pc, #48]	@ (80037e4 <BSP_LCD_DrawPixel+0x8c>)
 80037b2:	2134      	movs	r1, #52	@ 0x34
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	335c      	adds	r3, #92	@ 0x5c
 80037bc:	681c      	ldr	r4, [r3, #0]
 80037be:	88bd      	ldrh	r5, [r7, #4]
 80037c0:	f7ff fd54 	bl	800326c <BSP_LCD_GetXSize>
 80037c4:	4603      	mov	r3, r0
 80037c6:	fb03 f205 	mul.w	r2, r3, r5
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4423      	add	r3, r4
 80037d2:	461a      	mov	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bdb0      	pop	{r4, r5, r7, pc}
 80037e0:	2000093c 	.word	0x2000093c
 80037e4:	20000854 	.word	0x20000854

080037e8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b08b      	sub	sp, #44	@ 0x2c
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f8:	2300      	movs	r3, #0
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	330a      	adds	r3, #10
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	330b      	adds	r3, #11
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	441a      	add	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	330c      	adds	r3, #12
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	041b      	lsls	r3, r3, #16
 8003822:	441a      	add	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	330d      	adds	r3, #13
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	4413      	add	r3, r2
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3312      	adds	r3, #18
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3313      	adds	r3, #19
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3314      	adds	r3, #20
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	041b      	lsls	r3, r3, #16
 800384a:	441a      	add	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3315      	adds	r3, #21
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	4413      	add	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3316      	adds	r3, #22
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3317      	adds	r3, #23
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	441a      	add	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	3318      	adds	r3, #24
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	041b      	lsls	r3, r3, #16
 8003872:	441a      	add	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3319      	adds	r3, #25
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	061b      	lsls	r3, r3, #24
 800387c:	4413      	add	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	331c      	adds	r3, #28
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	331d      	adds	r3, #29
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	4413      	add	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003894:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <BSP_LCD_DrawBitmap+0x15c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <BSP_LCD_DrawBitmap+0x160>)
 800389a:	2134      	movs	r1, #52	@ 0x34
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	335c      	adds	r3, #92	@ 0x5c
 80038a4:	681c      	ldr	r4, [r3, #0]
 80038a6:	f7ff fce1 	bl	800326c <BSP_LCD_GetXSize>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	fb03 f202 	mul.w	r2, r3, r2
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4423      	add	r3, r4
 80038ba:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	3b20      	subs	r3, #32
 80038c0:	2b07      	cmp	r3, #7
 80038c2:	d802      	bhi.n	80038ca <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e008      	b.n	80038dc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	3b10      	subs	r3, #16
 80038ce:	2b07      	cmp	r3, #7
 80038d0:	d802      	bhi.n	80038d8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80038d2:	2302      	movs	r3, #2
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	e001      	b.n	80038dc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80038d8:	2301      	movs	r3, #1
 80038da:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3b01      	subs	r3, #1
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	08d2      	lsrs	r2, r2, #3
 80038ea:	fb03 f202 	mul.w	r2, r3, r2
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	4413      	add	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80038f8:	2300      	movs	r3, #0
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fc:	e018      	b.n	8003930 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80038fe:	6a39      	ldr	r1, [r7, #32]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fab3 	bl	8003e70 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 800390a:	f7ff fcaf 	bl	800326c <BSP_LCD_GetXSize>
 800390e:	4603      	mov	r3, r0
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	4413      	add	r3, r2
 8003916:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	08db      	lsrs	r3, r3, #3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	425b      	negs	r3, r3
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392c:	3301      	adds	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	429a      	cmp	r2, r3
 8003936:	d3e2      	bcc.n	80038fe <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	372c      	adds	r7, #44	@ 0x2c
 800393e:	46bd      	mov	sp, r7
 8003940:	bd90      	pop	{r4, r7, pc}
 8003942:	bf00      	nop
 8003944:	2000093c 	.word	0x2000093c
 8003948:	20000854 	.word	0x20000854

0800394c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800394c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af02      	add	r7, sp, #8
 8003954:	4604      	mov	r4, r0
 8003956:	4608      	mov	r0, r1
 8003958:	4611      	mov	r1, r2
 800395a:	461a      	mov	r2, r3
 800395c:	4623      	mov	r3, r4
 800395e:	80fb      	strh	r3, [r7, #6]
 8003960:	4603      	mov	r3, r0
 8003962:	80bb      	strh	r3, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
 8003968:	4613      	mov	r3, r2
 800396a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003970:	4b30      	ldr	r3, [pc, #192]	@ (8003a34 <BSP_LCD_FillRect+0xe8>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4930      	ldr	r1, [pc, #192]	@ (8003a38 <BSP_LCD_FillRect+0xec>)
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fd0a 	bl	800339c <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003988:	4b2a      	ldr	r3, [pc, #168]	@ (8003a34 <BSP_LCD_FillRect+0xe8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a3c <BSP_LCD_FillRect+0xf0>)
 800398e:	2134      	movs	r1, #52	@ 0x34
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	3348      	adds	r3, #72	@ 0x48
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d114      	bne.n	80039c8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800399e:	4b25      	ldr	r3, [pc, #148]	@ (8003a34 <BSP_LCD_FillRect+0xe8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a26      	ldr	r2, [pc, #152]	@ (8003a3c <BSP_LCD_FillRect+0xf0>)
 80039a4:	2134      	movs	r1, #52	@ 0x34
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	335c      	adds	r3, #92	@ 0x5c
 80039ae:	681c      	ldr	r4, [r3, #0]
 80039b0:	f7ff fc5c 	bl	800326c <BSP_LCD_GetXSize>
 80039b4:	4602      	mov	r2, r0
 80039b6:	88bb      	ldrh	r3, [r7, #4]
 80039b8:	fb03 f202 	mul.w	r2, r3, r2
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	4413      	add	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4423      	add	r3, r4
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e013      	b.n	80039f0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80039c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a34 <BSP_LCD_FillRect+0xe8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a3c <BSP_LCD_FillRect+0xf0>)
 80039ce:	2134      	movs	r1, #52	@ 0x34
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	335c      	adds	r3, #92	@ 0x5c
 80039d8:	681c      	ldr	r4, [r3, #0]
 80039da:	f7ff fc47 	bl	800326c <BSP_LCD_GetXSize>
 80039de:	4602      	mov	r2, r0
 80039e0:	88bb      	ldrh	r3, [r7, #4]
 80039e2:	fb03 f202 	mul.w	r2, r3, r2
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4423      	add	r3, r4
 80039ee:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80039f0:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <BSP_LCD_FillRect+0xe8>)
 80039f2:	681c      	ldr	r4, [r3, #0]
 80039f4:	68fd      	ldr	r5, [r7, #12]
 80039f6:	887e      	ldrh	r6, [r7, #2]
 80039f8:	f8b7 8000 	ldrh.w	r8, [r7]
 80039fc:	f7ff fc36 	bl	800326c <BSP_LCD_GetXSize>
 8003a00:	4602      	mov	r2, r0
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	1ad1      	subs	r1, r2, r3
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <BSP_LCD_FillRect+0xe8>)
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	480b      	ldr	r0, [pc, #44]	@ (8003a38 <BSP_LCD_FillRect+0xec>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4403      	add	r3, r0
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	9100      	str	r1, [sp, #0]
 8003a1c:	4643      	mov	r3, r8
 8003a1e:	4632      	mov	r2, r6
 8003a20:	4629      	mov	r1, r5
 8003a22:	4620      	mov	r0, r4
 8003a24:	f000 f9d8 	bl	8003dd8 <LL_FillBuffer>
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a32:	bf00      	nop
 8003a34:	2000093c 	.word	0x2000093c
 8003a38:	20000940 	.word	0x20000940
 8003a3c:	20000854 	.word	0x20000854

08003a40 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003a44:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <BSP_LCD_DisplayOn+0x30>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <BSP_LCD_DisplayOn+0x30>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003a54:	2201      	movs	r2, #1
 8003a56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a5a:	4806      	ldr	r0, [pc, #24]	@ (8003a74 <BSP_LCD_DisplayOn+0x34>)
 8003a5c:	f003 fa4a 	bl	8006ef4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003a60:	2201      	movs	r2, #1
 8003a62:	2108      	movs	r1, #8
 8003a64:	4804      	ldr	r0, [pc, #16]	@ (8003a78 <BSP_LCD_DisplayOn+0x38>)
 8003a66:	f003 fa45 	bl	8006ef4 <HAL_GPIO_WritePin>
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000854 	.word	0x20000854
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40022800 	.word	0x40022800

08003a7c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b090      	sub	sp, #64	@ 0x40
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003a86:	4b64      	ldr	r3, [pc, #400]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	4a63      	ldr	r2, [pc, #396]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003a8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a92:	4b61      	ldr	r3, [pc, #388]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003a9e:	4b5e      	ldr	r3, [pc, #376]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	4a5d      	ldr	r2, [pc, #372]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003aa4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aaa:	4b5b      	ldr	r3, [pc, #364]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ab6:	4b58      	ldr	r3, [pc, #352]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	4a57      	ldr	r2, [pc, #348]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003abc:	f043 0310 	orr.w	r3, r3, #16
 8003ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac2:	4b55      	ldr	r3, [pc, #340]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ace:	4b52      	ldr	r3, [pc, #328]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad2:	4a51      	ldr	r2, [pc, #324]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ada:	4b4f      	ldr	r3, [pc, #316]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ae6:	4b4c      	ldr	r3, [pc, #304]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	4a4b      	ldr	r2, [pc, #300]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af2:	4b49      	ldr	r3, [pc, #292]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003afe:	4b46      	ldr	r3, [pc, #280]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	4a45      	ldr	r2, [pc, #276]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b0a:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003b16:	4b40      	ldr	r3, [pc, #256]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b22:	4b3d      	ldr	r3, [pc, #244]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	4a39      	ldr	r2, [pc, #228]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b3a:	4b37      	ldr	r3, [pc, #220]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003b46:	4b34      	ldr	r3, [pc, #208]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	4a33      	ldr	r2, [pc, #204]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b52:	4b31      	ldr	r3, [pc, #196]	@ (8003c18 <BSP_LCD_MspInit+0x19c>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003b5e:	2310      	movs	r3, #16
 8003b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003b6e:	230e      	movs	r3, #14
 8003b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003b72:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b76:	4619      	mov	r1, r3
 8003b78:	4828      	ldr	r0, [pc, #160]	@ (8003c1c <BSP_LCD_MspInit+0x1a0>)
 8003b7a:	f002 ff03 	bl	8006984 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003b88:	2309      	movs	r3, #9
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003b8c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b90:	4619      	mov	r1, r3
 8003b92:	4823      	ldr	r0, [pc, #140]	@ (8003c20 <BSP_LCD_MspInit+0x1a4>)
 8003b94:	f002 fef6 	bl	8006984 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003b98:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8003b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003ba2:	230e      	movs	r3, #14
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003ba6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003baa:	4619      	mov	r1, r3
 8003bac:	481d      	ldr	r0, [pc, #116]	@ (8003c24 <BSP_LCD_MspInit+0x1a8>)
 8003bae:	f002 fee9 	bl	8006984 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003bb2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003bbc:	230e      	movs	r3, #14
 8003bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4818      	ldr	r0, [pc, #96]	@ (8003c28 <BSP_LCD_MspInit+0x1ac>)
 8003bc8:	f002 fedc 	bl	8006984 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003bcc:	23f7      	movs	r3, #247	@ 0xf7
 8003bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003bd4:	230e      	movs	r3, #14
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4813      	ldr	r0, [pc, #76]	@ (8003c2c <BSP_LCD_MspInit+0x1b0>)
 8003be0:	f002 fed0 	bl	8006984 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003be4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003bea:	2301      	movs	r3, #1
 8003bec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003bee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	480b      	ldr	r0, [pc, #44]	@ (8003c24 <BSP_LCD_MspInit+0x1a8>)
 8003bf6:	f002 fec5 	bl	8006984 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003c02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c06:	4619      	mov	r1, r3
 8003c08:	4808      	ldr	r0, [pc, #32]	@ (8003c2c <BSP_LCD_MspInit+0x1b0>)
 8003c0a:	f002 febb 	bl	8006984 <HAL_GPIO_Init>
}
 8003c0e:	bf00      	nop
 8003c10:	3740      	adds	r7, #64	@ 0x40
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40021800 	.word	0x40021800
 8003c24:	40022000 	.word	0x40022000
 8003c28:	40022400 	.word	0x40022400
 8003c2c:	40022800 	.word	0x40022800

08003c30 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c64 <BSP_LCD_ClockConfig+0x34>)
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003c40:	4b08      	ldr	r3, [pc, #32]	@ (8003c64 <BSP_LCD_ClockConfig+0x34>)
 8003c42:	22c0      	movs	r2, #192	@ 0xc0
 8003c44:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003c46:	4b07      	ldr	r3, [pc, #28]	@ (8003c64 <BSP_LCD_ClockConfig+0x34>)
 8003c48:	2205      	movs	r2, #5
 8003c4a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003c4c:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <BSP_LCD_ClockConfig+0x34>)
 8003c4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c52:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003c54:	4803      	ldr	r0, [pc, #12]	@ (8003c64 <BSP_LCD_ClockConfig+0x34>)
 8003c56:	f005 f829 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000958 	.word	0x20000958

08003c68 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	603a      	str	r2, [r7, #0]
 8003c72:	80fb      	strh	r3, [r7, #6]
 8003c74:	460b      	mov	r3, r1
 8003c76:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003c80:	4b53      	ldr	r3, [pc, #332]	@ (8003dd0 <DrawChar+0x168>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4953      	ldr	r1, [pc, #332]	@ (8003dd4 <DrawChar+0x16c>)
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	3308      	adds	r3, #8
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	88db      	ldrh	r3, [r3, #6]
 8003c96:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003c98:	4b4d      	ldr	r3, [pc, #308]	@ (8003dd0 <DrawChar+0x168>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	494d      	ldr	r1, [pc, #308]	@ (8003dd4 <DrawChar+0x16c>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3308      	adds	r3, #8
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	889b      	ldrh	r3, [r3, #4]
 8003cae:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003cb0:	8a3b      	ldrh	r3, [r7, #16]
 8003cb2:	3307      	adds	r3, #7
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	da00      	bge.n	8003cba <DrawChar+0x52>
 8003cb8:	3307      	adds	r3, #7
 8003cba:	10db      	asrs	r3, r3, #3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	8a3b      	ldrh	r3, [r7, #16]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e076      	b.n	8003dbe <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003cd0:	8a3b      	ldrh	r3, [r7, #16]
 8003cd2:	3307      	adds	r3, #7
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da00      	bge.n	8003cda <DrawChar+0x72>
 8003cd8:	3307      	adds	r3, #7
 8003cda:	10db      	asrs	r3, r3, #3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003cea:	8a3b      	ldrh	r3, [r7, #16]
 8003cec:	3307      	adds	r3, #7
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da00      	bge.n	8003cf4 <DrawChar+0x8c>
 8003cf2:	3307      	adds	r3, #7
 8003cf4:	10db      	asrs	r3, r3, #3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d002      	beq.n	8003d00 <DrawChar+0x98>
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d004      	beq.n	8003d08 <DrawChar+0xa0>
 8003cfe:	e00c      	b.n	8003d1a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	617b      	str	r3, [r7, #20]
      break;
 8003d06:	e016      	b.n	8003d36 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	3201      	adds	r2, #1
 8003d12:	7812      	ldrb	r2, [r2, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]
      break;
 8003d18:	e00d      	b.n	8003d36 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	041a      	lsls	r2, r3, #16
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	3301      	adds	r3, #1
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	3202      	adds	r2, #2
 8003d2e:	7812      	ldrb	r2, [r2, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
      break;
 8003d34:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	e036      	b.n	8003daa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003d3c:	8a3a      	ldrh	r2, [r7, #16]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	1ad2      	subs	r2, r2, r3
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	4413      	add	r3, r2
 8003d46:	3b01      	subs	r3, #1
 8003d48:	2201      	movs	r2, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	461a      	mov	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d012      	beq.n	8003d7e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	4413      	add	r3, r2
 8003d60:	b298      	uxth	r0, r3
 8003d62:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd0 <DrawChar+0x168>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	491b      	ldr	r1, [pc, #108]	@ (8003dd4 <DrawChar+0x16c>)
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	88bb      	ldrh	r3, [r7, #4]
 8003d76:	4619      	mov	r1, r3
 8003d78:	f7ff fcee 	bl	8003758 <BSP_LCD_DrawPixel>
 8003d7c:	e012      	b.n	8003da4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	4413      	add	r3, r2
 8003d86:	b298      	uxth	r0, r3
 8003d88:	4b11      	ldr	r3, [pc, #68]	@ (8003dd0 <DrawChar+0x168>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4911      	ldr	r1, [pc, #68]	@ (8003dd4 <DrawChar+0x16c>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3304      	adds	r3, #4
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	88bb      	ldrh	r3, [r7, #4]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	f7ff fcda 	bl	8003758 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	8a3b      	ldrh	r3, [r7, #16]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d3c4      	bcc.n	8003d3c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003db2:	88bb      	ldrh	r3, [r7, #4]
 8003db4:	3301      	adds	r3, #1
 8003db6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	8a7b      	ldrh	r3, [r7, #18]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d384      	bcc.n	8003cd0 <DrawChar+0x68>
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	2000093c 	.word	0x2000093c
 8003dd4:	20000940 	.word	0x20000940

08003dd8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
 8003de4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003de6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003de8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003dec:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003dee:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <LL_FillBuffer+0x8c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <LL_FillBuffer+0x90>)
 8003df4:	2134      	movs	r1, #52	@ 0x34
 8003df6:	fb01 f303 	mul.w	r3, r1, r3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	3348      	adds	r3, #72	@ 0x48
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d103      	bne.n	8003e0c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003e04:	4b16      	ldr	r3, [pc, #88]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003e06:	2202      	movs	r2, #2
 8003e08:	609a      	str	r2, [r3, #8]
 8003e0a:	e002      	b.n	8003e12 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003e0c:	4b14      	ldr	r3, [pc, #80]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003e12:	4a13      	ldr	r2, [pc, #76]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003e18:	4b11      	ldr	r3, [pc, #68]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003e1a:	4a14      	ldr	r2, [pc, #80]	@ (8003e6c <LL_FillBuffer+0x94>)
 8003e1c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003e1e:	4810      	ldr	r0, [pc, #64]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003e20:	f002 fa14 	bl	800624c <HAL_DMA2D_Init>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d115      	bne.n	8003e56 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	480c      	ldr	r0, [pc, #48]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003e2e:	f002 fc7b 	bl	8006728 <HAL_DMA2D_ConfigLayer>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10e      	bne.n	8003e56 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69f9      	ldr	r1, [r7, #28]
 8003e42:	4807      	ldr	r0, [pc, #28]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003e44:	f002 fa4c 	bl	80062e0 <HAL_DMA2D_Start>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003e4e:	210a      	movs	r1, #10
 8003e50:	4803      	ldr	r0, [pc, #12]	@ (8003e60 <LL_FillBuffer+0x88>)
 8003e52:	f002 fa70 	bl	8006336 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200008fc 	.word	0x200008fc
 8003e64:	2000093c 	.word	0x2000093c
 8003e68:	20000854 	.word	0x20000854
 8003e6c:	4002b000 	.word	0x4002b000

08003e70 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003e80:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e84:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003e86:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003e8c:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003e92:	4b17      	ldr	r3, [pc, #92]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003e98:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003e9a:	22ff      	movs	r2, #255	@ 0xff
 8003e9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003e9e:	4a14      	ldr	r2, [pc, #80]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003ea4:	4b12      	ldr	r3, [pc, #72]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003eaa:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003eac:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <LL_ConvertLineToARGB8888+0x84>)
 8003eae:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003eb0:	480f      	ldr	r0, [pc, #60]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003eb2:	f002 f9cb 	bl	800624c <HAL_DMA2D_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d115      	bne.n	8003ee8 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	480c      	ldr	r0, [pc, #48]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003ec0:	f002 fc32 	bl	8006728 <HAL_DMA2D_ConfigLayer>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10e      	bne.n	8003ee8 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	2301      	movs	r3, #1
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4806      	ldr	r0, [pc, #24]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003ed6:	f002 fa03 	bl	80062e0 <HAL_DMA2D_Start>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003ee0:	210a      	movs	r1, #10
 8003ee2:	4803      	ldr	r0, [pc, #12]	@ (8003ef0 <LL_ConvertLineToARGB8888+0x80>)
 8003ee4:	f002 fa27 	bl	8006336 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	200008fc 	.word	0x200008fc
 8003ef4:	4002b000 	.word	0x4002b000

08003ef8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003efc:	4b29      	ldr	r3, [pc, #164]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003efe:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa8 <BSP_SDRAM_Init+0xb0>)
 8003f00:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003f02:	4b2a      	ldr	r3, [pc, #168]	@ (8003fac <BSP_SDRAM_Init+0xb4>)
 8003f04:	2202      	movs	r2, #2
 8003f06:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003f08:	4b28      	ldr	r3, [pc, #160]	@ (8003fac <BSP_SDRAM_Init+0xb4>)
 8003f0a:	2207      	movs	r2, #7
 8003f0c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003f0e:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <BSP_SDRAM_Init+0xb4>)
 8003f10:	2204      	movs	r2, #4
 8003f12:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003f14:	4b25      	ldr	r3, [pc, #148]	@ (8003fac <BSP_SDRAM_Init+0xb4>)
 8003f16:	2207      	movs	r2, #7
 8003f18:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003f1a:	4b24      	ldr	r3, [pc, #144]	@ (8003fac <BSP_SDRAM_Init+0xb4>)
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003f20:	4b22      	ldr	r3, [pc, #136]	@ (8003fac <BSP_SDRAM_Init+0xb4>)
 8003f22:	2202      	movs	r2, #2
 8003f24:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003f26:	4b21      	ldr	r3, [pc, #132]	@ (8003fac <BSP_SDRAM_Init+0xb4>)
 8003f28:	2202      	movs	r2, #2
 8003f2a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003f32:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003f38:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f3a:	2204      	movs	r2, #4
 8003f3c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003f3e:	4b19      	ldr	r3, [pc, #100]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f40:	2210      	movs	r2, #16
 8003f42:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003f44:	4b17      	ldr	r3, [pc, #92]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f46:	2240      	movs	r2, #64	@ 0x40
 8003f48:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003f4a:	4b16      	ldr	r3, [pc, #88]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f50:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003f52:	4b14      	ldr	r3, [pc, #80]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003f58:	4b12      	ldr	r3, [pc, #72]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f5e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003f60:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f62:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f66:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003f68:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003f6e:	2100      	movs	r1, #0
 8003f70:	480c      	ldr	r0, [pc, #48]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f72:	f000 f87f 	bl	8004074 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003f76:	490d      	ldr	r1, [pc, #52]	@ (8003fac <BSP_SDRAM_Init+0xb4>)
 8003f78:	480a      	ldr	r0, [pc, #40]	@ (8003fa4 <BSP_SDRAM_Init+0xac>)
 8003f7a:	f005 fe5d 	bl	8009c38 <HAL_SDRAM_Init>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003f84:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <BSP_SDRAM_Init+0xb8>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e002      	b.n	8003f92 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003f8c:	4b08      	ldr	r3, [pc, #32]	@ (8003fb0 <BSP_SDRAM_Init+0xb8>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003f92:	f240 6003 	movw	r0, #1539	@ 0x603
 8003f96:	f000 f80d 	bl	8003fb4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003f9a:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <BSP_SDRAM_Init+0xb8>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200009dc 	.word	0x200009dc
 8003fa8:	a0000140 	.word	0xa0000140
 8003fac:	20000a10 	.word	0x20000a10
 8003fb0:	20000048 	.word	0x20000048

08003fb4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003fc6:	4b29      	ldr	r3, [pc, #164]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fc8:	2210      	movs	r2, #16
 8003fca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003fcc:	4b27      	ldr	r3, [pc, #156]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003fd2:	4b26      	ldr	r3, [pc, #152]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003fd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fdc:	4923      	ldr	r1, [pc, #140]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fde:	4824      	ldr	r0, [pc, #144]	@ (8004070 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fe0:	f005 fe5e 	bl	8009ca0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f001 f993 	bl	8005310 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003fea:	4b20      	ldr	r3, [pc, #128]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fec:	2202      	movs	r2, #2
 8003fee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004002:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004006:	4919      	ldr	r1, [pc, #100]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004008:	4819      	ldr	r0, [pc, #100]	@ (8004070 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800400a:	f005 fe49 	bl	8009ca0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800400e:	4b17      	ldr	r3, [pc, #92]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004010:	2203      	movs	r2, #3
 8004012:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004014:	4b15      	ldr	r3, [pc, #84]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004016:	2210      	movs	r2, #16
 8004018:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800401a:	4b14      	ldr	r3, [pc, #80]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800401c:	2208      	movs	r2, #8
 800401e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004020:	4b12      	ldr	r3, [pc, #72]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004022:	2200      	movs	r2, #0
 8004024:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800402a:	4910      	ldr	r1, [pc, #64]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800402c:	4810      	ldr	r0, [pc, #64]	@ (8004070 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800402e:	f005 fe37 	bl	8009ca0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004032:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004036:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004038:	4b0c      	ldr	r3, [pc, #48]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800403a:	2204      	movs	r2, #4
 800403c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004040:	2210      	movs	r2, #16
 8004042:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004044:	4b09      	ldr	r3, [pc, #36]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004046:	2201      	movs	r2, #1
 8004048:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a07      	ldr	r2, [pc, #28]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800404e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004050:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004054:	4905      	ldr	r1, [pc, #20]	@ (800406c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004056:	4806      	ldr	r0, [pc, #24]	@ (8004070 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004058:	f005 fe22 	bl	8009ca0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4804      	ldr	r0, [pc, #16]	@ (8004070 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004060:	f005 fe53 	bl	8009d0a <HAL_SDRAM_ProgramRefreshRate>
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000a2c 	.word	0x20000a2c
 8004070:	200009dc 	.word	0x200009dc

08004074 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004074:	b580      	push	{r7, lr}
 8004076:	b090      	sub	sp, #64	@ 0x40
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800407e:	4b70      	ldr	r3, [pc, #448]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 8004080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004082:	4a6f      	ldr	r2, [pc, #444]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6393      	str	r3, [r2, #56]	@ 0x38
 800408a:	4b6d      	ldr	r3, [pc, #436]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004096:	4b6a      	ldr	r3, [pc, #424]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409a:	4a69      	ldr	r2, [pc, #420]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 800409c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a2:	4b67      	ldr	r3, [pc, #412]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ae:	4b64      	ldr	r3, [pc, #400]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	4a63      	ldr	r2, [pc, #396]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040b4:	f043 0304 	orr.w	r3, r3, #4
 80040b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ba:	4b61      	ldr	r3, [pc, #388]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	623b      	str	r3, [r7, #32]
 80040c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	4a5d      	ldr	r2, [pc, #372]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	61fb      	str	r3, [r7, #28]
 80040dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040de:	4b58      	ldr	r3, [pc, #352]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e2:	4a57      	ldr	r2, [pc, #348]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040e4:	f043 0310 	orr.w	r3, r3, #16
 80040e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ea:	4b55      	ldr	r3, [pc, #340]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040f6:	4b52      	ldr	r3, [pc, #328]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	4a51      	ldr	r2, [pc, #324]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 80040fc:	f043 0320 	orr.w	r3, r3, #32
 8004100:	6313      	str	r3, [r2, #48]	@ 0x30
 8004102:	4b4f      	ldr	r3, [pc, #316]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800410e:	4b4c      	ldr	r3, [pc, #304]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	4a4b      	ldr	r2, [pc, #300]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 8004114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004118:	6313      	str	r3, [r2, #48]	@ 0x30
 800411a:	4b49      	ldr	r3, [pc, #292]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004126:	4b46      	ldr	r3, [pc, #280]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	4a45      	ldr	r2, [pc, #276]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 800412c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004130:	6313      	str	r3, [r2, #48]	@ 0x30
 8004132:	4b43      	ldr	r3, [pc, #268]	@ (8004240 <BSP_SDRAM_MspInit+0x1cc>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800413e:	2302      	movs	r3, #2
 8004140:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004142:	2301      	movs	r3, #1
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004146:	2302      	movs	r3, #2
 8004148:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800414a:	230c      	movs	r3, #12
 800414c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800414e:	2308      	movs	r3, #8
 8004150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004152:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004156:	4619      	mov	r1, r3
 8004158:	483a      	ldr	r0, [pc, #232]	@ (8004244 <BSP_SDRAM_MspInit+0x1d0>)
 800415a:	f002 fc13 	bl	8006984 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800415e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004162:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004164:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004168:	4619      	mov	r1, r3
 800416a:	4837      	ldr	r0, [pc, #220]	@ (8004248 <BSP_SDRAM_MspInit+0x1d4>)
 800416c:	f002 fc0a 	bl	8006984 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004170:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004174:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004176:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800417a:	4619      	mov	r1, r3
 800417c:	4833      	ldr	r0, [pc, #204]	@ (800424c <BSP_SDRAM_MspInit+0x1d8>)
 800417e:	f002 fc01 	bl	8006984 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004182:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004186:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004188:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800418c:	4619      	mov	r1, r3
 800418e:	4830      	ldr	r0, [pc, #192]	@ (8004250 <BSP_SDRAM_MspInit+0x1dc>)
 8004190:	f002 fbf8 	bl	8006984 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004194:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004198:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800419a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800419e:	4619      	mov	r1, r3
 80041a0:	482c      	ldr	r0, [pc, #176]	@ (8004254 <BSP_SDRAM_MspInit+0x1e0>)
 80041a2:	f002 fbef 	bl	8006984 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80041a6:	2328      	movs	r3, #40	@ 0x28
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80041aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041ae:	4619      	mov	r1, r3
 80041b0:	4829      	ldr	r0, [pc, #164]	@ (8004258 <BSP_SDRAM_MspInit+0x1e4>)
 80041b2:	f002 fbe7 	bl	8006984 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80041b6:	4b29      	ldr	r3, [pc, #164]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80041bc:	4b27      	ldr	r3, [pc, #156]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80041c2:	4b26      	ldr	r3, [pc, #152]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041c8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80041ca:	4b24      	ldr	r3, [pc, #144]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041d0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041d2:	4b22      	ldr	r3, [pc, #136]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041d8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80041e0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80041e2:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80041e8:	4b1c      	ldr	r3, [pc, #112]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041ee:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80041f0:	4b1a      	ldr	r3, [pc, #104]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80041f6:	4b19      	ldr	r3, [pc, #100]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041f8:	2203      	movs	r2, #3
 80041fa:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80041fc:	4b17      	ldr	r3, [pc, #92]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 80041fe:	2200      	movs	r2, #0
 8004200:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004202:	4b16      	ldr	r3, [pc, #88]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004208:	4b14      	ldr	r3, [pc, #80]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 800420a:	4a15      	ldr	r2, [pc, #84]	@ (8004260 <BSP_SDRAM_MspInit+0x1ec>)
 800420c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a12      	ldr	r2, [pc, #72]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
 8004214:	4a11      	ldr	r2, [pc, #68]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800421a:	4810      	ldr	r0, [pc, #64]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 800421c:	f001 ff06 	bl	800602c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004220:	480e      	ldr	r0, [pc, #56]	@ (800425c <BSP_SDRAM_MspInit+0x1e8>)
 8004222:	f001 fe55 	bl	8005ed0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004226:	2200      	movs	r2, #0
 8004228:	210f      	movs	r1, #15
 800422a:	2038      	movs	r0, #56	@ 0x38
 800422c:	f001 fd46 	bl	8005cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004230:	2038      	movs	r0, #56	@ 0x38
 8004232:	f001 fd5f 	bl	8005cf4 <HAL_NVIC_EnableIRQ>
}
 8004236:	bf00      	nop
 8004238:	3740      	adds	r7, #64	@ 0x40
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023800 	.word	0x40023800
 8004244:	40020800 	.word	0x40020800
 8004248:	40020c00 	.word	0x40020c00
 800424c:	40021000 	.word	0x40021000
 8004250:	40021400 	.word	0x40021400
 8004254:	40021800 	.word	0x40021800
 8004258:	40021c00 	.word	0x40021c00
 800425c:	20000a3c 	.word	0x20000a3c
 8004260:	40026410 	.word	0x40026410

08004264 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	460a      	mov	r2, r1
 800426e:	80fb      	strh	r3, [r7, #6]
 8004270:	4613      	mov	r3, r2
 8004272:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004278:	4a14      	ldr	r2, [pc, #80]	@ (80042cc <BSP_TS_Init+0x68>)
 800427a:	88fb      	ldrh	r3, [r7, #6]
 800427c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800427e:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <BSP_TS_Init+0x6c>)
 8004280:	88bb      	ldrh	r3, [r7, #4]
 8004282:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004284:	4b13      	ldr	r3, [pc, #76]	@ (80042d4 <BSP_TS_Init+0x70>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2070      	movs	r0, #112	@ 0x70
 800428a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <BSP_TS_Init+0x70>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2070      	movs	r0, #112	@ 0x70
 8004292:	4798      	blx	r3
 8004294:	4603      	mov	r3, r0
 8004296:	2b51      	cmp	r3, #81	@ 0x51
 8004298:	d110      	bne.n	80042bc <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800429a:	4b0f      	ldr	r3, [pc, #60]	@ (80042d8 <BSP_TS_Init+0x74>)
 800429c:	4a0d      	ldr	r2, [pc, #52]	@ (80042d4 <BSP_TS_Init+0x70>)
 800429e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80042a0:	4b0e      	ldr	r3, [pc, #56]	@ (80042dc <BSP_TS_Init+0x78>)
 80042a2:	2270      	movs	r2, #112	@ 0x70
 80042a4:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80042a6:	4b0e      	ldr	r3, [pc, #56]	@ (80042e0 <BSP_TS_Init+0x7c>)
 80042a8:	2208      	movs	r2, #8
 80042aa:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80042ac:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <BSP_TS_Init+0x74>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	4a0a      	ldr	r2, [pc, #40]	@ (80042dc <BSP_TS_Init+0x78>)
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	4610      	mov	r0, r2
 80042b8:	4798      	blx	r3
 80042ba:	e001      	b.n	80042c0 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80042bc:	2303      	movs	r3, #3
 80042be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000aa0 	.word	0x20000aa0
 80042d0:	20000aa2 	.word	0x20000aa2
 80042d4:	20000010 	.word	0x20000010
 80042d8:	20000a9c 	.word	0x20000a9c
 80042dc:	20000aa5 	.word	0x20000aa5
 80042e0:	20000aa4 	.word	0x20000aa4

080042e4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80042e4:	b590      	push	{r4, r7, lr}
 80042e6:	b097      	sub	sp, #92	@ 0x5c
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80042fe:	4bb8      	ldr	r3, [pc, #736]	@ (80045e0 <BSP_TS_GetState+0x2fc>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4ab7      	ldr	r2, [pc, #732]	@ (80045e4 <BSP_TS_GetState+0x300>)
 8004306:	7812      	ldrb	r2, [r2, #0]
 8004308:	4610      	mov	r0, r2
 800430a:	4798      	blx	r3
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8198 	beq.w	800464e <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800431e:	2300      	movs	r3, #0
 8004320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004322:	e187      	b.n	8004634 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004324:	4bae      	ldr	r3, [pc, #696]	@ (80045e0 <BSP_TS_GetState+0x2fc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	4aae      	ldr	r2, [pc, #696]	@ (80045e4 <BSP_TS_GetState+0x300>)
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	4614      	mov	r4, r2
 8004330:	f107 0120 	add.w	r1, r7, #32
 8004334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004336:	0052      	lsls	r2, r2, #1
 8004338:	1888      	adds	r0, r1, r2
 800433a:	f107 0114 	add.w	r1, r7, #20
 800433e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004340:	0052      	lsls	r2, r2, #1
 8004342:	440a      	add	r2, r1
 8004344:	4601      	mov	r1, r0
 8004346:	4620      	mov	r0, r4
 8004348:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800434a:	4ba7      	ldr	r3, [pc, #668]	@ (80045e8 <BSP_TS_GetState+0x304>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d117      	bne.n	8004382 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	3350      	adds	r3, #80	@ 0x50
 8004358:	443b      	add	r3, r7
 800435a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800435e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	3350      	adds	r3, #80	@ 0x50
 8004364:	443b      	add	r3, r7
 8004366:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800436a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	3350      	adds	r3, #80	@ 0x50
 8004370:	443b      	add	r3, r7
 8004372:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	3350      	adds	r3, #80	@ 0x50
 800437c:	443b      	add	r3, r7
 800437e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004382:	4b99      	ldr	r3, [pc, #612]	@ (80045e8 <BSP_TS_GetState+0x304>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 800438e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	3350      	adds	r3, #80	@ 0x50
 8004394:	443b      	add	r3, r7
 8004396:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800439a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800439e:	b29a      	uxth	r2, r3
 80043a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	3350      	adds	r3, #80	@ 0x50
 80043a6:	443b      	add	r3, r7
 80043a8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80043ac:	4b8e      	ldr	r3, [pc, #568]	@ (80045e8 <BSP_TS_GetState+0x304>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80043b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	3350      	adds	r3, #80	@ 0x50
 80043be:	443b      	add	r3, r7
 80043c0:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80043c4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	3350      	adds	r3, #80	@ 0x50
 80043d0:	443b      	add	r3, r7
 80043d2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80043d6:	4b84      	ldr	r3, [pc, #528]	@ (80045e8 <BSP_TS_GetState+0x304>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d017      	beq.n	8004412 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 80043e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	3350      	adds	r3, #80	@ 0x50
 80043e8:	443b      	add	r3, r7
 80043ea:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80043ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	3350      	adds	r3, #80	@ 0x50
 80043f4:	443b      	add	r3, r7
 80043f6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80043fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	3350      	adds	r3, #80	@ 0x50
 8004400:	443b      	add	r3, r7
 8004402:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	3350      	adds	r3, #80	@ 0x50
 800440c:	443b      	add	r3, r7
 800440e:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004412:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	3350      	adds	r3, #80	@ 0x50
 8004418:	443b      	add	r3, r7
 800441a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800441e:	4619      	mov	r1, r3
 8004420:	4a72      	ldr	r2, [pc, #456]	@ (80045ec <BSP_TS_GetState+0x308>)
 8004422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004428:	4299      	cmp	r1, r3
 800442a:	d90d      	bls.n	8004448 <BSP_TS_GetState+0x164>
 800442c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	3350      	adds	r3, #80	@ 0x50
 8004432:	443b      	add	r3, r7
 8004434:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004438:	496c      	ldr	r1, [pc, #432]	@ (80045ec <BSP_TS_GetState+0x308>)
 800443a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800443c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004440:	b29b      	uxth	r3, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	b29b      	uxth	r3, r3
 8004446:	e00c      	b.n	8004462 <BSP_TS_GetState+0x17e>
 8004448:	4a68      	ldr	r2, [pc, #416]	@ (80045ec <BSP_TS_GetState+0x308>)
 800444a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800444c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004450:	b29a      	uxth	r2, r3
 8004452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	3350      	adds	r3, #80	@ 0x50
 8004458:	443b      	add	r3, r7
 800445a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	b29b      	uxth	r3, r3
 8004462:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	3350      	adds	r3, #80	@ 0x50
 800446c:	443b      	add	r3, r7
 800446e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004472:	4619      	mov	r1, r3
 8004474:	4a5e      	ldr	r2, [pc, #376]	@ (80045f0 <BSP_TS_GetState+0x30c>)
 8004476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800447c:	4299      	cmp	r1, r3
 800447e:	d90d      	bls.n	800449c <BSP_TS_GetState+0x1b8>
 8004480:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	3350      	adds	r3, #80	@ 0x50
 8004486:	443b      	add	r3, r7
 8004488:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800448c:	4958      	ldr	r1, [pc, #352]	@ (80045f0 <BSP_TS_GetState+0x30c>)
 800448e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004490:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004494:	b29b      	uxth	r3, r3
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b29b      	uxth	r3, r3
 800449a:	e00c      	b.n	80044b6 <BSP_TS_GetState+0x1d2>
 800449c:	4a54      	ldr	r2, [pc, #336]	@ (80045f0 <BSP_TS_GetState+0x30c>)
 800449e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	3350      	adds	r3, #80	@ 0x50
 80044ac:	443b      	add	r3, r7
 80044ae:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 80044ba:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80044be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80044c2:	4413      	add	r3, r2
 80044c4:	2b05      	cmp	r3, #5
 80044c6:	dd15      	ble.n	80044f4 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80044c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	3350      	adds	r3, #80	@ 0x50
 80044ce:	443b      	add	r3, r7
 80044d0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80044d4:	4619      	mov	r1, r3
 80044d6:	4a45      	ldr	r2, [pc, #276]	@ (80045ec <BSP_TS_GetState+0x308>)
 80044d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80044de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	3350      	adds	r3, #80	@ 0x50
 80044e4:	443b      	add	r3, r7
 80044e6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80044ea:	4619      	mov	r1, r3
 80044ec:	4a40      	ldr	r2, [pc, #256]	@ (80045f0 <BSP_TS_GetState+0x30c>)
 80044ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80044f4:	4b3b      	ldr	r3, [pc, #236]	@ (80045e4 <BSP_TS_GetState+0x300>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b70      	cmp	r3, #112	@ 0x70
 80044fa:	d119      	bne.n	8004530 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80044fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	3350      	adds	r3, #80	@ 0x50
 8004502:	443b      	add	r3, r7
 8004504:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	460a      	mov	r2, r1
 8004512:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	3350      	adds	r3, #80	@ 0x50
 800451a:	443b      	add	r3, r7
 800451c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004524:	3304      	adds	r3, #4
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	4413      	add	r3, r2
 800452a:	460a      	mov	r2, r1
 800452c:	809a      	strh	r2, [r3, #4]
 800452e:	e022      	b.n	8004576 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004530:	4b30      	ldr	r3, [pc, #192]	@ (80045f4 <BSP_TS_GetState+0x310>)
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	4619      	mov	r1, r3
 8004536:	4a2d      	ldr	r2, [pc, #180]	@ (80045ec <BSP_TS_GetState+0x308>)
 8004538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800453a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	0b1b      	lsrs	r3, r3, #12
 8004544:	b299      	uxth	r1, r3
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	460a      	mov	r2, r1
 8004550:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004552:	4b29      	ldr	r3, [pc, #164]	@ (80045f8 <BSP_TS_GetState+0x314>)
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	4619      	mov	r1, r3
 8004558:	4a25      	ldr	r2, [pc, #148]	@ (80045f0 <BSP_TS_GetState+0x30c>)
 800455a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800455c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	0b1b      	lsrs	r3, r3, #12
 8004566:	b299      	uxth	r1, r3
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800456c:	3304      	adds	r3, #4
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	4413      	add	r3, r2
 8004572:	460a      	mov	r2, r1
 8004574:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004576:	4b1b      	ldr	r3, [pc, #108]	@ (80045e4 <BSP_TS_GetState+0x300>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f107 010c 	add.w	r1, r7, #12
 8004580:	f107 0210 	add.w	r2, r7, #16
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	460b      	mov	r3, r1
 800458c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800458e:	f7fd fb63 	bl	8001c58 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	b2d9      	uxtb	r1, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800459a:	4413      	add	r3, r2
 800459c:	3316      	adds	r3, #22
 800459e:	460a      	mov	r2, r1
 80045a0:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	b2d9      	uxtb	r1, r3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045aa:	4413      	add	r3, r2
 80045ac:	3320      	adds	r3, #32
 80045ae:	460a      	mov	r2, r1
 80045b0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d836      	bhi.n	8004626 <BSP_TS_GetState+0x342>
 80045b8:	a201      	add	r2, pc, #4	@ (adr r2, 80045c0 <BSP_TS_GetState+0x2dc>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045d1 	.word	0x080045d1
 80045c4:	080045fd 	.word	0x080045fd
 80045c8:	0800460b 	.word	0x0800460b
 80045cc:	08004619 	.word	0x08004619
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d4:	4413      	add	r3, r2
 80045d6:	331b      	adds	r3, #27
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
          break;
 80045dc:	e027      	b.n	800462e <BSP_TS_GetState+0x34a>
 80045de:	bf00      	nop
 80045e0:	20000a9c 	.word	0x20000a9c
 80045e4:	20000aa5 	.word	0x20000aa5
 80045e8:	20000aa4 	.word	0x20000aa4
 80045ec:	20000aa8 	.word	0x20000aa8
 80045f0:	20000abc 	.word	0x20000abc
 80045f4:	20000aa0 	.word	0x20000aa0
 80045f8:	20000aa2 	.word	0x20000aa2
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004600:	4413      	add	r3, r2
 8004602:	331b      	adds	r3, #27
 8004604:	2202      	movs	r2, #2
 8004606:	701a      	strb	r2, [r3, #0]
          break;
 8004608:	e011      	b.n	800462e <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800460e:	4413      	add	r3, r2
 8004610:	331b      	adds	r3, #27
 8004612:	2203      	movs	r2, #3
 8004614:	701a      	strb	r2, [r3, #0]
          break;
 8004616:	e00a      	b.n	800462e <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461c:	4413      	add	r3, r2
 800461e:	331b      	adds	r3, #27
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
          break;
 8004624:	e003      	b.n	800462e <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 800462c:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800462e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004630:	3301      	adds	r3, #1
 8004632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800463c:	4293      	cmp	r3, r2
 800463e:	f4ff ae71 	bcc.w	8004324 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f80a 	bl	800465c <BSP_TS_Get_GestureId>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800464e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8004652:	4618      	mov	r0, r3
 8004654:	3754      	adds	r7, #84	@ 0x54
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}
 800465a:	bf00      	nop

0800465c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800466c:	4b3b      	ldr	r3, [pc, #236]	@ (800475c <BSP_TS_Get_GestureId+0x100>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	f107 0308 	add.w	r3, r7, #8
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f7fd fad4 	bl	8001c26 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b49      	cmp	r3, #73	@ 0x49
 8004682:	d05e      	beq.n	8004742 <BSP_TS_Get_GestureId+0xe6>
 8004684:	2b49      	cmp	r3, #73	@ 0x49
 8004686:	d860      	bhi.n	800474a <BSP_TS_Get_GestureId+0xee>
 8004688:	2b1c      	cmp	r3, #28
 800468a:	d83f      	bhi.n	800470c <BSP_TS_Get_GestureId+0xb0>
 800468c:	2b1c      	cmp	r3, #28
 800468e:	d85c      	bhi.n	800474a <BSP_TS_Get_GestureId+0xee>
 8004690:	a201      	add	r2, pc, #4	@ (adr r2, 8004698 <BSP_TS_Get_GestureId+0x3c>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	08004713 	.word	0x08004713
 800469c:	0800474b 	.word	0x0800474b
 80046a0:	0800474b 	.word	0x0800474b
 80046a4:	0800474b 	.word	0x0800474b
 80046a8:	0800474b 	.word	0x0800474b
 80046ac:	0800474b 	.word	0x0800474b
 80046b0:	0800474b 	.word	0x0800474b
 80046b4:	0800474b 	.word	0x0800474b
 80046b8:	0800474b 	.word	0x0800474b
 80046bc:	0800474b 	.word	0x0800474b
 80046c0:	0800474b 	.word	0x0800474b
 80046c4:	0800474b 	.word	0x0800474b
 80046c8:	0800474b 	.word	0x0800474b
 80046cc:	0800474b 	.word	0x0800474b
 80046d0:	0800474b 	.word	0x0800474b
 80046d4:	0800474b 	.word	0x0800474b
 80046d8:	0800471b 	.word	0x0800471b
 80046dc:	0800474b 	.word	0x0800474b
 80046e0:	0800474b 	.word	0x0800474b
 80046e4:	0800474b 	.word	0x0800474b
 80046e8:	08004723 	.word	0x08004723
 80046ec:	0800474b 	.word	0x0800474b
 80046f0:	0800474b 	.word	0x0800474b
 80046f4:	0800474b 	.word	0x0800474b
 80046f8:	0800472b 	.word	0x0800472b
 80046fc:	0800474b 	.word	0x0800474b
 8004700:	0800474b 	.word	0x0800474b
 8004704:	0800474b 	.word	0x0800474b
 8004708:	08004733 	.word	0x08004733
 800470c:	2b40      	cmp	r3, #64	@ 0x40
 800470e:	d014      	beq.n	800473a <BSP_TS_Get_GestureId+0xde>
 8004710:	e01b      	b.n	800474a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004718:	e01a      	b.n	8004750 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004720:	e016      	b.n	8004750 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004728:	e012      	b.n	8004750 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2203      	movs	r2, #3
 800472e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004730:	e00e      	b.n	8004750 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2204      	movs	r2, #4
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004738:	e00a      	b.n	8004750 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2205      	movs	r2, #5
 800473e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004740:	e006      	b.n	8004750 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2206      	movs	r2, #6
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004748:	e002      	b.n	8004750 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
      break;
 800474e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000aa5 	.word	0x20000aa5

08004760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	4b11      	ldr	r3, [pc, #68]	@ (80047ac <HAL_MspInit+0x4c>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	4a10      	ldr	r2, [pc, #64]	@ (80047ac <HAL_MspInit+0x4c>)
 800476c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004770:	6413      	str	r3, [r2, #64]	@ 0x40
 8004772:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <HAL_MspInit+0x4c>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_MspInit+0x4c>)
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <HAL_MspInit+0x4c>)
 8004784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004788:	6453      	str	r3, [r2, #68]	@ 0x44
 800478a:	4b08      	ldr	r3, [pc, #32]	@ (80047ac <HAL_MspInit+0x4c>)
 800478c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004796:	2200      	movs	r2, #0
 8004798:	210f      	movs	r1, #15
 800479a:	f06f 0001 	mvn.w	r0, #1
 800479e:	f001 fa8d 	bl	8005cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800

080047b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08e      	sub	sp, #56	@ 0x38
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80047c0:	4b33      	ldr	r3, [pc, #204]	@ (8004890 <HAL_InitTick+0xe0>)
 80047c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c4:	4a32      	ldr	r2, [pc, #200]	@ (8004890 <HAL_InitTick+0xe0>)
 80047c6:	f043 0310 	orr.w	r3, r3, #16
 80047ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80047cc:	4b30      	ldr	r3, [pc, #192]	@ (8004890 <HAL_InitTick+0xe0>)
 80047ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047d8:	f107 0210 	add.w	r2, r7, #16
 80047dc:	f107 0314 	add.w	r3, r7, #20
 80047e0:	4611      	mov	r1, r2
 80047e2:	4618      	mov	r0, r3
 80047e4:	f004 fa30 	bl	8008c48 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80047ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d103      	bne.n	80047fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80047f2:	f004 fa01 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
 80047f6:	6378      	str	r0, [r7, #52]	@ 0x34
 80047f8:	e004      	b.n	8004804 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80047fa:	f004 f9fd 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
 80047fe:	4603      	mov	r3, r0
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004806:	4a23      	ldr	r2, [pc, #140]	@ (8004894 <HAL_InitTick+0xe4>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	0c9b      	lsrs	r3, r3, #18
 800480e:	3b01      	subs	r3, #1
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004812:	4b21      	ldr	r3, [pc, #132]	@ (8004898 <HAL_InitTick+0xe8>)
 8004814:	4a21      	ldr	r2, [pc, #132]	@ (800489c <HAL_InitTick+0xec>)
 8004816:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004818:	4b1f      	ldr	r3, [pc, #124]	@ (8004898 <HAL_InitTick+0xe8>)
 800481a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800481e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004820:	4a1d      	ldr	r2, [pc, #116]	@ (8004898 <HAL_InitTick+0xe8>)
 8004822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004824:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004826:	4b1c      	ldr	r3, [pc, #112]	@ (8004898 <HAL_InitTick+0xe8>)
 8004828:	2200      	movs	r2, #0
 800482a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800482c:	4b1a      	ldr	r3, [pc, #104]	@ (8004898 <HAL_InitTick+0xe8>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004832:	4b19      	ldr	r3, [pc, #100]	@ (8004898 <HAL_InitTick+0xe8>)
 8004834:	2200      	movs	r2, #0
 8004836:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004838:	4817      	ldr	r0, [pc, #92]	@ (8004898 <HAL_InitTick+0xe8>)
 800483a:	f005 fb39 	bl	8009eb0 <HAL_TIM_Base_Init>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004844:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004848:	2b00      	cmp	r3, #0
 800484a:	d11b      	bne.n	8004884 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800484c:	4812      	ldr	r0, [pc, #72]	@ (8004898 <HAL_InitTick+0xe8>)
 800484e:	f005 fb87 	bl	8009f60 <HAL_TIM_Base_Start_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004858:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800485c:	2b00      	cmp	r3, #0
 800485e:	d111      	bne.n	8004884 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004860:	2036      	movs	r0, #54	@ 0x36
 8004862:	f001 fa47 	bl	8005cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b0f      	cmp	r3, #15
 800486a:	d808      	bhi.n	800487e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800486c:	2200      	movs	r2, #0
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	2036      	movs	r0, #54	@ 0x36
 8004872:	f001 fa23 	bl	8005cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004876:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <HAL_InitTick+0xf0>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6013      	str	r3, [r2, #0]
 800487c:	e002      	b.n	8004884 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004884:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004888:	4618      	mov	r0, r3
 800488a:	3738      	adds	r7, #56	@ 0x38
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	431bde83 	.word	0x431bde83
 8004898:	20000ad0 	.word	0x20000ad0
 800489c:	40001000 	.word	0x40001000
 80048a0:	20000050 	.word	0x20000050

080048a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80048a8:	bf00      	nop
 80048aa:	e7fd      	b.n	80048a8 <NMI_Handler+0x4>

080048ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80048b0:	bf00      	nop
 80048b2:	e7fd      	b.n	80048b0 <HardFault_Handler+0x4>

080048b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <MemManage_Handler+0x4>

080048bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048c0:	bf00      	nop
 80048c2:	e7fd      	b.n	80048c0 <BusFault_Handler+0x4>

080048c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048c8:	bf00      	nop
 80048ca:	e7fd      	b.n	80048c8 <UsageFault_Handler+0x4>

080048cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80048e0:	4b06      	ldr	r3, [pc, #24]	@ (80048fc <TIM6_DAC_IRQHandler+0x20>)
 80048e2:	791b      	ldrb	r3, [r3, #4]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80048ea:	4804      	ldr	r0, [pc, #16]	@ (80048fc <TIM6_DAC_IRQHandler+0x20>)
 80048ec:	f001 fa32 	bl	8005d54 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80048f0:	4803      	ldr	r0, [pc, #12]	@ (8004900 <TIM6_DAC_IRQHandler+0x24>)
 80048f2:	f005 fbad 	bl	800a050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000164 	.word	0x20000164
 8004900:	20000ad0 	.word	0x20000ad0

08004904 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004908:	4802      	ldr	r0, [pc, #8]	@ (8004914 <LTDC_IRQHandler+0x10>)
 800490a:	f003 fa0b 	bl	8007d24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200006c4 	.word	0x200006c4

08004918 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800491c:	4802      	ldr	r0, [pc, #8]	@ (8004928 <DMA2D_IRQHandler+0x10>)
 800491e:	f001 fdf3 	bl	8006508 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004922:	bf00      	nop
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000178 	.word	0x20000178

0800492c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
	return 1;
 8004930:	2301      	movs	r3, #1
}
 8004932:	4618      	mov	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <_kill>:

int _kill(int pid, int sig)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004946:	f008 fe35 	bl	800d5b4 <__errno>
 800494a:	4603      	mov	r3, r0
 800494c:	2216      	movs	r2, #22
 800494e:	601a      	str	r2, [r3, #0]
	return -1;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <_exit>:

void _exit (int status)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004964:	f04f 31ff 	mov.w	r1, #4294967295
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ffe7 	bl	800493c <_kill>
	while (1) {}		/* Make sure we hang here */
 800496e:	bf00      	nop
 8004970:	e7fd      	b.n	800496e <_exit+0x12>

08004972 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e00a      	b.n	800499a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004984:	f3af 8000 	nop.w
 8004988:	4601      	mov	r1, r0
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	60ba      	str	r2, [r7, #8]
 8004990:	b2ca      	uxtb	r2, r1
 8004992:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	3301      	adds	r3, #1
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	429a      	cmp	r2, r3
 80049a0:	dbf0      	blt.n	8004984 <_read+0x12>
	}

return len;
 80049a2:	687b      	ldr	r3, [r7, #4]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3718      	adds	r7, #24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	e009      	b.n	80049d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	60ba      	str	r2, [r7, #8]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	3301      	adds	r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	dbf1      	blt.n	80049be <_write+0x12>
	}
	return len;
 80049da:	687b      	ldr	r3, [r7, #4]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <_close>:

int _close(int file)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
	return -1;
 80049ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a0c:	605a      	str	r2, [r3, #4]
	return 0;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <_isatty>:

int _isatty(int file)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
	return 1;
 8004a24:	2301      	movs	r3, #1
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b085      	sub	sp, #20
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	60f8      	str	r0, [r7, #12]
 8004a3a:	60b9      	str	r1, [r7, #8]
 8004a3c:	607a      	str	r2, [r7, #4]
	return 0;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a54:	4a14      	ldr	r2, [pc, #80]	@ (8004aa8 <_sbrk+0x5c>)
 8004a56:	4b15      	ldr	r3, [pc, #84]	@ (8004aac <_sbrk+0x60>)
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a60:	4b13      	ldr	r3, [pc, #76]	@ (8004ab0 <_sbrk+0x64>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d102      	bne.n	8004a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a68:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <_sbrk+0x64>)
 8004a6a:	4a12      	ldr	r2, [pc, #72]	@ (8004ab4 <_sbrk+0x68>)
 8004a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a6e:	4b10      	ldr	r3, [pc, #64]	@ (8004ab0 <_sbrk+0x64>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d207      	bcs.n	8004a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a7c:	f008 fd9a 	bl	800d5b4 <__errno>
 8004a80:	4603      	mov	r3, r0
 8004a82:	220c      	movs	r2, #12
 8004a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a86:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8a:	e009      	b.n	8004aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a8c:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <_sbrk+0x64>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a92:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <_sbrk+0x64>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	4a05      	ldr	r2, [pc, #20]	@ (8004ab0 <_sbrk+0x64>)
 8004a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20050000 	.word	0x20050000
 8004aac:	00000400 	.word	0x00000400
 8004ab0:	20000b1c 	.word	0x20000b1c
 8004ab4:	20004cd0 	.word	0x20004cd0

08004ab8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004abc:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <SystemInit+0x20>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac2:	4a05      	ldr	r2, [pc, #20]	@ (8004ad8 <SystemInit+0x20>)
 8004ac4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ac8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004acc:	bf00      	nop
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ae2:	f107 0310 	add.w	r3, r7, #16
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	605a      	str	r2, [r3, #4]
 8004aec:	609a      	str	r2, [r3, #8]
 8004aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af0:	1d3b      	adds	r3, r7, #4
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004afa:	4b20      	ldr	r3, [pc, #128]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004afc:	4a20      	ldr	r2, [pc, #128]	@ (8004b80 <MX_TIM1_Init+0xa4>)
 8004afe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004b00:	4b1e      	ldr	r3, [pc, #120]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b06:	4b1d      	ldr	r3, [pc, #116]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b14:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004b1a:	4b18      	ldr	r3, [pc, #96]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b20:	4b16      	ldr	r3, [pc, #88]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004b26:	4815      	ldr	r0, [pc, #84]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b28:	f005 f9c2 	bl	8009eb0 <HAL_TIM_Base_Init>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004b32:	f7fe f80f 	bl	8002b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004b3c:	f107 0310 	add.w	r3, r7, #16
 8004b40:	4619      	mov	r1, r3
 8004b42:	480e      	ldr	r0, [pc, #56]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b44:	f005 fba4 	bl	800a290 <HAL_TIM_ConfigClockSource>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004b4e:	f7fe f801 	bl	8002b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	4806      	ldr	r0, [pc, #24]	@ (8004b7c <MX_TIM1_Init+0xa0>)
 8004b64:	f005 fdc0 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004b6e:	f7fd fff1 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004b72:	bf00      	nop
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000b20 	.word	0x20000b20
 8004b80:	40010000 	.word	0x40010000

08004b84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b8a:	f107 0310 	add.w	r3, r7, #16
 8004b8e:	2200      	movs	r2, #0
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	605a      	str	r2, [r3, #4]
 8004b94:	609a      	str	r2, [r3, #8]
 8004b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b98:	1d3b      	adds	r3, r7, #4
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	605a      	str	r2, [r3, #4]
 8004ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004ba4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004ba8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004baa:	4b1c      	ldr	r3, [pc, #112]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004bb6:	4b19      	ldr	r3, [pc, #100]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bbe:	4b17      	ldr	r3, [pc, #92]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bc4:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004bca:	4814      	ldr	r0, [pc, #80]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004bcc:	f005 f970 	bl	8009eb0 <HAL_TIM_Base_Init>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004bd6:	f7fd ffbd 	bl	8002b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004bde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004be0:	f107 0310 	add.w	r3, r7, #16
 8004be4:	4619      	mov	r1, r3
 8004be6:	480d      	ldr	r0, [pc, #52]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004be8:	f005 fb52 	bl	800a290 <HAL_TIM_ConfigClockSource>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004bf2:	f7fd ffaf 	bl	8002b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bfe:	1d3b      	adds	r3, r7, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	4806      	ldr	r0, [pc, #24]	@ (8004c1c <MX_TIM2_Init+0x98>)
 8004c04:	f005 fd70 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004c0e:	f7fd ffa1 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004c12:	bf00      	nop
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000b6c 	.word	0x20000b6c

08004c20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c26:	f107 0310 	add.w	r3, r7, #16
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	609a      	str	r2, [r3, #8]
 8004c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
 8004c3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c40:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <MX_TIM3_Init+0x98>)
 8004c42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004c50:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c58:	4b16      	ldr	r3, [pc, #88]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c5e:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004c64:	4813      	ldr	r0, [pc, #76]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c66:	f005 f923 	bl	8009eb0 <HAL_TIM_Base_Init>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004c70:	f7fd ff70 	bl	8002b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004c7a:	f107 0310 	add.w	r3, r7, #16
 8004c7e:	4619      	mov	r1, r3
 8004c80:	480c      	ldr	r0, [pc, #48]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c82:	f005 fb05 	bl	800a290 <HAL_TIM_ConfigClockSource>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004c8c:	f7fd ff62 	bl	8002b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c90:	2300      	movs	r3, #0
 8004c92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004c98:	1d3b      	adds	r3, r7, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4805      	ldr	r0, [pc, #20]	@ (8004cb4 <MX_TIM3_Init+0x94>)
 8004c9e:	f005 fd23 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004ca8:	f7fd ff54 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004cac:	bf00      	nop
 8004cae:	3720      	adds	r7, #32
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000bb8 	.word	0x20000bb8
 8004cb8:	40000400 	.word	0x40000400

08004cbc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cc2:	f107 0310 	add.w	r3, r7, #16
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cd0:	1d3b      	adds	r3, r7, #4
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004cda:	4b1d      	ldr	r3, [pc, #116]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d54 <MX_TIM5_Init+0x98>)
 8004cde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004cec:	4b18      	ldr	r3, [pc, #96]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004cee:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cf4:	4b16      	ldr	r3, [pc, #88]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cfa:	4b15      	ldr	r3, [pc, #84]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004d00:	4813      	ldr	r0, [pc, #76]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004d02:	f005 f8d5 	bl	8009eb0 <HAL_TIM_Base_Init>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004d0c:	f7fd ff22 	bl	8002b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004d16:	f107 0310 	add.w	r3, r7, #16
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	480c      	ldr	r0, [pc, #48]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004d1e:	f005 fab7 	bl	800a290 <HAL_TIM_ConfigClockSource>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004d28:	f7fd ff14 	bl	8002b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004d34:	1d3b      	adds	r3, r7, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4805      	ldr	r0, [pc, #20]	@ (8004d50 <MX_TIM5_Init+0x94>)
 8004d3a:	f005 fcd5 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004d44:	f7fd ff06 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004d48:	bf00      	nop
 8004d4a:	3720      	adds	r7, #32
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000c04 	.word	0x20000c04
 8004d54:	40000c00 	.word	0x40000c00

08004d58 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004d5e:	f107 0310 	add.w	r3, r7, #16
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d6c:	1d3b      	adds	r3, r7, #4
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	605a      	str	r2, [r3, #4]
 8004d74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004d76:	4b20      	ldr	r3, [pc, #128]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004d78:	4a20      	ldr	r2, [pc, #128]	@ (8004dfc <MX_TIM8_Init+0xa4>)
 8004d7a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d82:	4b1d      	ldr	r3, [pc, #116]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004d88:	4b1b      	ldr	r3, [pc, #108]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004d8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d8e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d90:	4b19      	ldr	r3, [pc, #100]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004d96:	4b18      	ldr	r3, [pc, #96]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d9c:	4b16      	ldr	r3, [pc, #88]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004da2:	4815      	ldr	r0, [pc, #84]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004da4:	f005 f884 	bl	8009eb0 <HAL_TIM_Base_Init>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8004dae:	f7fd fed1 	bl	8002b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004db2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004db6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	480e      	ldr	r0, [pc, #56]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004dc0:	f005 fa66 	bl	800a290 <HAL_TIM_ConfigClockSource>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8004dca:	f7fd fec3 	bl	8002b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004dda:	1d3b      	adds	r3, r7, #4
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4806      	ldr	r0, [pc, #24]	@ (8004df8 <MX_TIM8_Init+0xa0>)
 8004de0:	f005 fc82 	bl	800a6e8 <HAL_TIMEx_MasterConfigSynchronization>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004dea:	f7fd feb3 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004dee:	bf00      	nop
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000c50 	.word	0x20000c50
 8004dfc:	40010400 	.word	0x40010400

08004e00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08e      	sub	sp, #56	@ 0x38
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a3b      	ldr	r2, [pc, #236]	@ (8004f0c <HAL_TIM_Base_MspInit+0x10c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10c      	bne.n	8004e3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e22:	4b3b      	ldr	r3, [pc, #236]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e26:	4a3a      	ldr	r2, [pc, #232]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e2e:	4b38      	ldr	r3, [pc, #224]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004e3a:	e062      	b.n	8004f02 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e44:	d10c      	bne.n	8004e60 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e46:	4b32      	ldr	r3, [pc, #200]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	4a31      	ldr	r2, [pc, #196]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e52:	4b2f      	ldr	r3, [pc, #188]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
}
 8004e5e:	e050      	b.n	8004f02 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	@ (8004f14 <HAL_TIM_Base_MspInit+0x114>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10c      	bne.n	8004e84 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e6a:	4b29      	ldr	r3, [pc, #164]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	4a28      	ldr	r2, [pc, #160]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e70:	f043 0302 	orr.w	r3, r3, #2
 8004e74:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e76:	4b26      	ldr	r3, [pc, #152]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	61bb      	str	r3, [r7, #24]
 8004e80:	69bb      	ldr	r3, [r7, #24]
}
 8004e82:	e03e      	b.n	8004f02 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a23      	ldr	r2, [pc, #140]	@ (8004f18 <HAL_TIM_Base_MspInit+0x118>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e8e:	4b20      	ldr	r3, [pc, #128]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	4a1f      	ldr	r2, [pc, #124]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e94:	f043 0308 	orr.w	r3, r3, #8
 8004e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	697b      	ldr	r3, [r7, #20]
}
 8004ea6:	e02c      	b.n	8004f02 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a1b      	ldr	r2, [pc, #108]	@ (8004f1c <HAL_TIM_Base_MspInit+0x11c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d127      	bne.n	8004f02 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004eb2:	4b17      	ldr	r3, [pc, #92]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	4a16      	ldr	r2, [pc, #88]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ebe:	4b14      	ldr	r3, [pc, #80]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004eca:	4b11      	ldr	r3, [pc, #68]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ece:	4a10      	ldr	r2, [pc, #64]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <HAL_TIM_Base_MspInit+0x110>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004efa:	4619      	mov	r1, r3
 8004efc:	4808      	ldr	r0, [pc, #32]	@ (8004f20 <HAL_TIM_Base_MspInit+0x120>)
 8004efe:	f001 fd41 	bl	8006984 <HAL_GPIO_Init>
}
 8004f02:	bf00      	nop
 8004f04:	3738      	adds	r7, #56	@ 0x38
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40022000 	.word	0x40022000

08004f24 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004f28:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f2a:	4a15      	ldr	r2, [pc, #84]	@ (8004f80 <MX_UART7_Init+0x5c>)
 8004f2c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004f2e:	4b13      	ldr	r3, [pc, #76]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f34:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004f36:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004f42:	4b0e      	ldr	r3, [pc, #56]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004f48:	4b0c      	ldr	r3, [pc, #48]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f4a:	220c      	movs	r2, #12
 8004f4c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f54:	4b09      	ldr	r3, [pc, #36]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f5a:	4b08      	ldr	r3, [pc, #32]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f60:	4b06      	ldr	r3, [pc, #24]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004f66:	4805      	ldr	r0, [pc, #20]	@ (8004f7c <MX_UART7_Init+0x58>)
 8004f68:	f005 fc6a 	bl	800a840 <HAL_UART_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004f72:	f7fd fdef 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20000c9c 	.word	0x20000c9c
 8004f80:	40007800 	.word	0x40007800

08004f84 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004f88:	4b14      	ldr	r3, [pc, #80]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004f8a:	4a15      	ldr	r2, [pc, #84]	@ (8004fe0 <MX_USART1_UART_Init+0x5c>)
 8004f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004f8e:	4b13      	ldr	r3, [pc, #76]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004f96:	4b11      	ldr	r3, [pc, #68]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004faa:	220c      	movs	r2, #12
 8004fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fae:	4b0b      	ldr	r3, [pc, #44]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fb4:	4b09      	ldr	r3, [pc, #36]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fba:	4b08      	ldr	r3, [pc, #32]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004fc0:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004fc6:	4805      	ldr	r0, [pc, #20]	@ (8004fdc <MX_USART1_UART_Init+0x58>)
 8004fc8:	f005 fc3a 	bl	800a840 <HAL_UART_Init>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004fd2:	f7fd fdbf 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000d24 	.word	0x20000d24
 8004fe0:	40011000 	.word	0x40011000

08004fe4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004fe8:	4b14      	ldr	r3, [pc, #80]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8004fea:	4a15      	ldr	r2, [pc, #84]	@ (8005040 <MX_USART6_UART_Init+0x5c>)
 8004fec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004fee:	4b13      	ldr	r3, [pc, #76]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8004ff0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004ff4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004ff6:	4b11      	ldr	r3, [pc, #68]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005002:	4b0e      	ldr	r3, [pc, #56]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8005004:	2200      	movs	r2, #0
 8005006:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005008:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <MX_USART6_UART_Init+0x58>)
 800500a:	220c      	movs	r2, #12
 800500c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800500e:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8005010:	2200      	movs	r2, #0
 8005012:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005014:	4b09      	ldr	r3, [pc, #36]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8005016:	2200      	movs	r2, #0
 8005018:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800501a:	4b08      	ldr	r3, [pc, #32]	@ (800503c <MX_USART6_UART_Init+0x58>)
 800501c:	2200      	movs	r2, #0
 800501e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005020:	4b06      	ldr	r3, [pc, #24]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8005022:	2200      	movs	r2, #0
 8005024:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005026:	4805      	ldr	r0, [pc, #20]	@ (800503c <MX_USART6_UART_Init+0x58>)
 8005028:	f005 fc0a 	bl	800a840 <HAL_UART_Init>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005032:	f7fd fd8f 	bl	8002b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000dac 	.word	0x20000dac
 8005040:	40011400 	.word	0x40011400

08005044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b0b0      	sub	sp, #192	@ 0xc0
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800504c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	60da      	str	r2, [r3, #12]
 800505a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800505c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005060:	2284      	movs	r2, #132	@ 0x84
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f008 fa56 	bl	800d516 <memset>
  if(uartHandle->Instance==UART7)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a75      	ldr	r2, [pc, #468]	@ (8005244 <HAL_UART_MspInit+0x200>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d13d      	bne.n	80050f0 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005074:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800507a:	2300      	movs	r3, #0
 800507c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005080:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005084:	4618      	mov	r0, r3
 8005086:	f003 fe11 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005090:	f7fd fd60 	bl	8002b54 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005094:	4b6c      	ldr	r3, [pc, #432]	@ (8005248 <HAL_UART_MspInit+0x204>)
 8005096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005098:	4a6b      	ldr	r2, [pc, #428]	@ (8005248 <HAL_UART_MspInit+0x204>)
 800509a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800509e:	6413      	str	r3, [r2, #64]	@ 0x40
 80050a0:	4b69      	ldr	r3, [pc, #420]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80050a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80050ac:	4b66      	ldr	r3, [pc, #408]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80050ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b0:	4a65      	ldr	r2, [pc, #404]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80050b2:	f043 0320 	orr.w	r3, r3, #32
 80050b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80050b8:	4b63      	ldr	r3, [pc, #396]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050bc:	f003 0320 	and.w	r3, r3, #32
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80050c4:	23c0      	movs	r3, #192	@ 0xc0
 80050c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d6:	2303      	movs	r3, #3
 80050d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80050dc:	2308      	movs	r3, #8
 80050de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050e2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80050e6:	4619      	mov	r1, r3
 80050e8:	4858      	ldr	r0, [pc, #352]	@ (800524c <HAL_UART_MspInit+0x208>)
 80050ea:	f001 fc4b 	bl	8006984 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80050ee:	e0a4      	b.n	800523a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a56      	ldr	r2, [pc, #344]	@ (8005250 <HAL_UART_MspInit+0x20c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d15d      	bne.n	80051b6 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80050fa:	2340      	movs	r3, #64	@ 0x40
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80050fe:	2300      	movs	r3, #0
 8005100:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005106:	4618      	mov	r0, r3
 8005108:	f003 fdd0 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8005112:	f7fd fd1f 	bl	8002b54 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005116:	4b4c      	ldr	r3, [pc, #304]	@ (8005248 <HAL_UART_MspInit+0x204>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800511a:	4a4b      	ldr	r2, [pc, #300]	@ (8005248 <HAL_UART_MspInit+0x204>)
 800511c:	f043 0310 	orr.w	r3, r3, #16
 8005120:	6453      	str	r3, [r2, #68]	@ 0x44
 8005122:	4b49      	ldr	r3, [pc, #292]	@ (8005248 <HAL_UART_MspInit+0x204>)
 8005124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800512e:	4b46      	ldr	r3, [pc, #280]	@ (8005248 <HAL_UART_MspInit+0x204>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005132:	4a45      	ldr	r2, [pc, #276]	@ (8005248 <HAL_UART_MspInit+0x204>)
 8005134:	f043 0302 	orr.w	r3, r3, #2
 8005138:	6313      	str	r3, [r2, #48]	@ 0x30
 800513a:	4b43      	ldr	r3, [pc, #268]	@ (8005248 <HAL_UART_MspInit+0x204>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005146:	4b40      	ldr	r3, [pc, #256]	@ (8005248 <HAL_UART_MspInit+0x204>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514a:	4a3f      	ldr	r2, [pc, #252]	@ (8005248 <HAL_UART_MspInit+0x204>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6313      	str	r3, [r2, #48]	@ 0x30
 8005152:	4b3d      	ldr	r3, [pc, #244]	@ (8005248 <HAL_UART_MspInit+0x204>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800515e:	2380      	movs	r3, #128	@ 0x80
 8005160:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005164:	2302      	movs	r3, #2
 8005166:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005176:	2307      	movs	r3, #7
 8005178:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800517c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005180:	4619      	mov	r1, r3
 8005182:	4834      	ldr	r0, [pc, #208]	@ (8005254 <HAL_UART_MspInit+0x210>)
 8005184:	f001 fbfe 	bl	8006984 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005188:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800518c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005190:	2302      	movs	r3, #2
 8005192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005196:	2300      	movs	r3, #0
 8005198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519c:	2300      	movs	r3, #0
 800519e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051a2:	2307      	movs	r3, #7
 80051a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80051a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80051ac:	4619      	mov	r1, r3
 80051ae:	482a      	ldr	r0, [pc, #168]	@ (8005258 <HAL_UART_MspInit+0x214>)
 80051b0:	f001 fbe8 	bl	8006984 <HAL_GPIO_Init>
}
 80051b4:	e041      	b.n	800523a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a28      	ldr	r2, [pc, #160]	@ (800525c <HAL_UART_MspInit+0x218>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d13c      	bne.n	800523a <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80051c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80051c6:	2300      	movs	r3, #0
 80051c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80051d0:	4618      	mov	r0, r3
 80051d2:	f003 fd6b 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80051dc:	f7fd fcba 	bl	8002b54 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80051e0:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80051e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e4:	4a18      	ldr	r2, [pc, #96]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80051e6:	f043 0320 	orr.w	r3, r3, #32
 80051ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80051ec:	4b16      	ldr	r3, [pc, #88]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051f8:	4b13      	ldr	r3, [pc, #76]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	4a12      	ldr	r2, [pc, #72]	@ (8005248 <HAL_UART_MspInit+0x204>)
 80051fe:	f043 0304 	orr.w	r3, r3, #4
 8005202:	6313      	str	r3, [r2, #48]	@ 0x30
 8005204:	4b10      	ldr	r3, [pc, #64]	@ (8005248 <HAL_UART_MspInit+0x204>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8005210:	23c0      	movs	r3, #192	@ 0xc0
 8005212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005216:	2302      	movs	r3, #2
 8005218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800521c:	2300      	movs	r3, #0
 800521e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005222:	2303      	movs	r3, #3
 8005224:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005228:	2308      	movs	r3, #8
 800522a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800522e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005232:	4619      	mov	r1, r3
 8005234:	480a      	ldr	r0, [pc, #40]	@ (8005260 <HAL_UART_MspInit+0x21c>)
 8005236:	f001 fba5 	bl	8006984 <HAL_GPIO_Init>
}
 800523a:	bf00      	nop
 800523c:	37c0      	adds	r7, #192	@ 0xc0
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	40007800 	.word	0x40007800
 8005248:	40023800 	.word	0x40023800
 800524c:	40021400 	.word	0x40021400
 8005250:	40011000 	.word	0x40011000
 8005254:	40020400 	.word	0x40020400
 8005258:	40020000 	.word	0x40020000
 800525c:	40011400 	.word	0x40011400
 8005260:	40020800 	.word	0x40020800

08005264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800529c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005268:	480d      	ldr	r0, [pc, #52]	@ (80052a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800526a:	490e      	ldr	r1, [pc, #56]	@ (80052a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800526c:	4a0e      	ldr	r2, [pc, #56]	@ (80052a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800526e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005270:	e002      	b.n	8005278 <LoopCopyDataInit>

08005272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005276:	3304      	adds	r3, #4

08005278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800527a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800527c:	d3f9      	bcc.n	8005272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800527e:	4a0b      	ldr	r2, [pc, #44]	@ (80052ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005280:	4c0b      	ldr	r4, [pc, #44]	@ (80052b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005284:	e001      	b.n	800528a <LoopFillZerobss>

08005286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005288:	3204      	adds	r2, #4

0800528a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800528a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800528c:	d3fb      	bcc.n	8005286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800528e:	f7ff fc13 	bl	8004ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005292:	f008 f995 	bl	800d5c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005296:	f7fd fb5f 	bl	8002958 <main>
  bx  lr    
 800529a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800529c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80052a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052a4:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80052a8:	0801cb34 	.word	0x0801cb34
  ldr r2, =_sbss
 80052ac:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80052b0:	20004cd0 	.word	0x20004cd0

080052b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052b4:	e7fe      	b.n	80052b4 <ADC_IRQHandler>

080052b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052ba:	2003      	movs	r0, #3
 80052bc:	f000 fcf3 	bl	8005ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052c0:	200f      	movs	r0, #15
 80052c2:	f7ff fa75 	bl	80047b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052c6:	f7ff fa4b 	bl	8004760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052d4:	4b06      	ldr	r3, [pc, #24]	@ (80052f0 <HAL_IncTick+0x20>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <HAL_IncTick+0x24>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	4a04      	ldr	r2, [pc, #16]	@ (80052f4 <HAL_IncTick+0x24>)
 80052e2:	6013      	str	r3, [r2, #0]
}
 80052e4:	bf00      	nop
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000054 	.word	0x20000054
 80052f4:	20000e34 	.word	0x20000e34

080052f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return uwTick;
 80052fc:	4b03      	ldr	r3, [pc, #12]	@ (800530c <HAL_GetTick+0x14>)
 80052fe:	681b      	ldr	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000e34 	.word	0x20000e34

08005310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005318:	f7ff ffee 	bl	80052f8 <HAL_GetTick>
 800531c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d005      	beq.n	8005336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800532a:	4b0a      	ldr	r3, [pc, #40]	@ (8005354 <HAL_Delay+0x44>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005336:	bf00      	nop
 8005338:	f7ff ffde 	bl	80052f8 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	429a      	cmp	r2, r3
 8005346:	d8f7      	bhi.n	8005338 <HAL_Delay+0x28>
  {
  }
}
 8005348:	bf00      	nop
 800534a:	bf00      	nop
 800534c:	3710      	adds	r7, #16
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000054 	.word	0x20000054

08005358 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e031      	b.n	80053d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7fb f9b6 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538e:	f003 0310 	and.w	r3, r3, #16
 8005392:	2b00      	cmp	r3, #0
 8005394:	d116      	bne.n	80053c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800539a:	4b10      	ldr	r3, [pc, #64]	@ (80053dc <HAL_ADC_Init+0x84>)
 800539c:	4013      	ands	r3, r2
 800539e:	f043 0202 	orr.w	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fad6 	bl	8005958 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	f043 0201 	orr.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80053c2:	e001      	b.n	80053c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	ffffeefd 	.word	0xffffeefd

080053e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_Start+0x1a>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e0ad      	b.n	8005556 <HAL_ADC_Start+0x176>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d018      	beq.n	8005442 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005420:	4b50      	ldr	r3, [pc, #320]	@ (8005564 <HAL_ADC_Start+0x184>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a50      	ldr	r2, [pc, #320]	@ (8005568 <HAL_ADC_Start+0x188>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	0c9a      	lsrs	r2, r3, #18
 800542c:	4613      	mov	r3, r2
 800542e:	005b      	lsls	r3, r3, #1
 8005430:	4413      	add	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005434:	e002      	b.n	800543c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3b01      	subs	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f9      	bne.n	8005436 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d175      	bne.n	800553c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005454:	4b45      	ldr	r3, [pc, #276]	@ (800556c <HAL_ADC_Start+0x18c>)
 8005456:	4013      	ands	r3, r2
 8005458:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800546a:	2b00      	cmp	r3, #0
 800546c:	d007      	beq.n	800547e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005472:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005476:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548a:	d106      	bne.n	800549a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005490:	f023 0206 	bic.w	r2, r3, #6
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	645a      	str	r2, [r3, #68]	@ 0x44
 8005498:	e002      	b.n	80054a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80054b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80054b2:	4b2f      	ldr	r3, [pc, #188]	@ (8005570 <HAL_ADC_Start+0x190>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f003 031f 	and.w	r3, r3, #31
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10f      	bne.n	80054de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d143      	bne.n	8005554 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	e03a      	b.n	8005554 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a24      	ldr	r2, [pc, #144]	@ (8005574 <HAL_ADC_Start+0x194>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10e      	bne.n	8005506 <HAL_ADC_Start+0x126>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d107      	bne.n	8005506 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005504:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005506:	4b1a      	ldr	r3, [pc, #104]	@ (8005570 <HAL_ADC_Start+0x190>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 0310 	and.w	r3, r3, #16
 800550e:	2b00      	cmp	r3, #0
 8005510:	d120      	bne.n	8005554 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a18      	ldr	r2, [pc, #96]	@ (8005578 <HAL_ADC_Start+0x198>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d11b      	bne.n	8005554 <HAL_ADC_Start+0x174>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d114      	bne.n	8005554 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005538:	609a      	str	r2, [r3, #8]
 800553a:	e00b      	b.n	8005554 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	f043 0210 	orr.w	r2, r3, #16
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554c:	f043 0201 	orr.w	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	2000004c 	.word	0x2000004c
 8005568:	431bde83 	.word	0x431bde83
 800556c:	fffff8fe 	.word	0xfffff8fe
 8005570:	40012300 	.word	0x40012300
 8005574:	40012000 	.word	0x40012000
 8005578:	40012200 	.word	0x40012200

0800557c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005594:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005598:	d113      	bne.n	80055c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80055a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055a8:	d10b      	bne.n	80055c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e063      	b.n	800568a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80055c2:	f7ff fe99 	bl	80052f8 <HAL_GetTick>
 80055c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80055c8:	e021      	b.n	800560e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d01d      	beq.n	800560e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <HAL_ADC_PollForConversion+0x6c>
 80055d8:	f7ff fe8e 	bl	80052f8 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d212      	bcs.n	800560e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d00b      	beq.n	800560e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	f043 0204 	orr.w	r2, r3, #4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e03d      	b.n	800568a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b02      	cmp	r3, #2
 800561a:	d1d6      	bne.n	80055ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0212 	mvn.w	r2, #18
 8005624:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d123      	bne.n	8005688 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005644:	2b00      	cmp	r3, #0
 8005646:	d11f      	bne.n	8005688 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005660:	2b00      	cmp	r3, #0
 8005662:	d111      	bne.n	8005688 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005680:	f043 0201 	orr.w	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x1c>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e136      	b.n	8005936 <HAL_ADC_ConfigChannel+0x28a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b09      	cmp	r3, #9
 80056d6:	d93a      	bls.n	800574e <HAL_ADC_ConfigChannel+0xa2>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056e0:	d035      	beq.n	800574e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68d9      	ldr	r1, [r3, #12]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	4613      	mov	r3, r2
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4413      	add	r3, r2
 80056f6:	3b1e      	subs	r3, #30
 80056f8:	2207      	movs	r2, #7
 80056fa:	fa02 f303 	lsl.w	r3, r2, r3
 80056fe:	43da      	mvns	r2, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	400a      	ands	r2, r1
 8005706:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a8d      	ldr	r2, [pc, #564]	@ (8005944 <HAL_ADC_ConfigChannel+0x298>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10a      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68d9      	ldr	r1, [r3, #12]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	061a      	lsls	r2, r3, #24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005726:	e035      	b.n	8005794 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68d9      	ldr	r1, [r3, #12]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	4618      	mov	r0, r3
 800573a:	4603      	mov	r3, r0
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	4403      	add	r3, r0
 8005740:	3b1e      	subs	r3, #30
 8005742:	409a      	lsls	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800574c:	e022      	b.n	8005794 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6919      	ldr	r1, [r3, #16]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	461a      	mov	r2, r3
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	2207      	movs	r2, #7
 8005764:	fa02 f303 	lsl.w	r3, r2, r3
 8005768:	43da      	mvns	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	400a      	ands	r2, r1
 8005770:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6919      	ldr	r1, [r3, #16]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	4618      	mov	r0, r3
 8005784:	4603      	mov	r3, r0
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4403      	add	r3, r0
 800578a:	409a      	lsls	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b06      	cmp	r3, #6
 800579a:	d824      	bhi.n	80057e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	3b05      	subs	r3, #5
 80057ae:	221f      	movs	r2, #31
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	43da      	mvns	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	400a      	ands	r2, r1
 80057bc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	4618      	mov	r0, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	3b05      	subs	r3, #5
 80057d8:	fa00 f203 	lsl.w	r2, r0, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80057e4:	e04c      	b.n	8005880 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b0c      	cmp	r3, #12
 80057ec:	d824      	bhi.n	8005838 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	3b23      	subs	r3, #35	@ 0x23
 8005800:	221f      	movs	r2, #31
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43da      	mvns	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	400a      	ands	r2, r1
 800580e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	4618      	mov	r0, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	3b23      	subs	r3, #35	@ 0x23
 800582a:	fa00 f203 	lsl.w	r2, r0, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	631a      	str	r2, [r3, #48]	@ 0x30
 8005836:	e023      	b.n	8005880 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	3b41      	subs	r3, #65	@ 0x41
 800584a:	221f      	movs	r2, #31
 800584c:	fa02 f303 	lsl.w	r3, r2, r3
 8005850:	43da      	mvns	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	400a      	ands	r2, r1
 8005858:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	4618      	mov	r0, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	4613      	mov	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	3b41      	subs	r3, #65	@ 0x41
 8005874:	fa00 f203 	lsl.w	r2, r0, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a30      	ldr	r2, [pc, #192]	@ (8005948 <HAL_ADC_ConfigChannel+0x29c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10a      	bne.n	80058a0 <HAL_ADC_ConfigChannel+0x1f4>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005892:	d105      	bne.n	80058a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005894:	4b2d      	ldr	r3, [pc, #180]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a2c      	ldr	r2, [pc, #176]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 800589a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800589e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a28      	ldr	r2, [pc, #160]	@ (8005948 <HAL_ADC_ConfigChannel+0x29c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10f      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x21e>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b12      	cmp	r3, #18
 80058b0:	d10b      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80058b2:	4b26      	ldr	r3, [pc, #152]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	4a25      	ldr	r2, [pc, #148]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 80058b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80058bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80058be:	4b23      	ldr	r3, [pc, #140]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4a22      	ldr	r2, [pc, #136]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 80058c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005948 <HAL_ADC_ConfigChannel+0x29c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d12b      	bne.n	800592c <HAL_ADC_ConfigChannel+0x280>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1a      	ldr	r2, [pc, #104]	@ (8005944 <HAL_ADC_ConfigChannel+0x298>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <HAL_ADC_ConfigChannel+0x23a>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b11      	cmp	r3, #17
 80058e4:	d122      	bne.n	800592c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80058e6:	4b19      	ldr	r3, [pc, #100]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	4a18      	ldr	r2, [pc, #96]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 80058ec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80058f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80058f2:	4b16      	ldr	r3, [pc, #88]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4a15      	ldr	r2, [pc, #84]	@ (800594c <HAL_ADC_ConfigChannel+0x2a0>)
 80058f8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a10      	ldr	r2, [pc, #64]	@ (8005944 <HAL_ADC_ConfigChannel+0x298>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d111      	bne.n	800592c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005908:	4b11      	ldr	r3, [pc, #68]	@ (8005950 <HAL_ADC_ConfigChannel+0x2a4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a11      	ldr	r2, [pc, #68]	@ (8005954 <HAL_ADC_ConfigChannel+0x2a8>)
 800590e:	fba2 2303 	umull	r2, r3, r2, r3
 8005912:	0c9a      	lsrs	r2, r3, #18
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800591e:	e002      	b.n	8005926 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3b01      	subs	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f9      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	10000012 	.word	0x10000012
 8005948:	40012000 	.word	0x40012000
 800594c:	40012300 	.word	0x40012300
 8005950:	2000004c 	.word	0x2000004c
 8005954:	431bde83 	.word	0x431bde83

08005958 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005960:	4b78      	ldr	r3, [pc, #480]	@ (8005b44 <ADC_Init+0x1ec>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	4a77      	ldr	r2, [pc, #476]	@ (8005b44 <ADC_Init+0x1ec>)
 8005966:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800596a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800596c:	4b75      	ldr	r3, [pc, #468]	@ (8005b44 <ADC_Init+0x1ec>)
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4973      	ldr	r1, [pc, #460]	@ (8005b44 <ADC_Init+0x1ec>)
 8005976:	4313      	orrs	r3, r2
 8005978:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6859      	ldr	r1, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	021a      	lsls	r2, r3, #8
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80059ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	430a      	orrs	r2, r1
 80059be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6899      	ldr	r1, [r3, #8]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	430a      	orrs	r2, r1
 80059e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e6:	4a58      	ldr	r2, [pc, #352]	@ (8005b48 <ADC_Init+0x1f0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d022      	beq.n	8005a32 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80059fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6899      	ldr	r1, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6899      	ldr	r1, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
 8005a30:	e00f      	b.n	8005a52 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005a50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0202 	bic.w	r2, r2, #2
 8005a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6899      	ldr	r1, [r3, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	005a      	lsls	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d01b      	beq.n	8005ab8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005a9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	035a      	lsls	r2, r3, #13
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	e007      	b.n	8005ac8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	051a      	lsls	r2, r3, #20
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6899      	ldr	r1, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b0a:	025a      	lsls	r2, r3, #9
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6899      	ldr	r1, [r3, #8]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	029a      	lsls	r2, r3, #10
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40012300 	.word	0x40012300
 8005b48:	0f000001 	.word	0x0f000001

08005b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <__NVIC_SetPriorityGrouping+0x40>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b74:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <__NVIC_SetPriorityGrouping+0x44>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b7a:	4a04      	ldr	r2, [pc, #16]	@ (8005b8c <__NVIC_SetPriorityGrouping+0x40>)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	60d3      	str	r3, [r2, #12]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	e000ed00 	.word	0xe000ed00
 8005b90:	05fa0000 	.word	0x05fa0000

08005b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b98:	4b04      	ldr	r3, [pc, #16]	@ (8005bac <__NVIC_GetPriorityGrouping+0x18>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	0a1b      	lsrs	r3, r3, #8
 8005b9e:	f003 0307 	and.w	r3, r3, #7
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr
 8005bac:	e000ed00 	.word	0xe000ed00

08005bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	db0b      	blt.n	8005bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	f003 021f 	and.w	r2, r3, #31
 8005bc8:	4907      	ldr	r1, [pc, #28]	@ (8005be8 <__NVIC_EnableIRQ+0x38>)
 8005bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	2001      	movs	r0, #1
 8005bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8005bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	e000e100 	.word	0xe000e100

08005bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	6039      	str	r1, [r7, #0]
 8005bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	db0a      	blt.n	8005c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	490c      	ldr	r1, [pc, #48]	@ (8005c38 <__NVIC_SetPriority+0x4c>)
 8005c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0a:	0112      	lsls	r2, r2, #4
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	440b      	add	r3, r1
 8005c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c14:	e00a      	b.n	8005c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	4908      	ldr	r1, [pc, #32]	@ (8005c3c <__NVIC_SetPriority+0x50>)
 8005c1c:	79fb      	ldrb	r3, [r7, #7]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	3b04      	subs	r3, #4
 8005c24:	0112      	lsls	r2, r2, #4
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	440b      	add	r3, r1
 8005c2a:	761a      	strb	r2, [r3, #24]
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	e000e100 	.word	0xe000e100
 8005c3c:	e000ed00 	.word	0xe000ed00

08005c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b089      	sub	sp, #36	@ 0x24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f1c3 0307 	rsb	r3, r3, #7
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	bf28      	it	cs
 8005c5e:	2304      	movcs	r3, #4
 8005c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3304      	adds	r3, #4
 8005c66:	2b06      	cmp	r3, #6
 8005c68:	d902      	bls.n	8005c70 <NVIC_EncodePriority+0x30>
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3b03      	subs	r3, #3
 8005c6e:	e000      	b.n	8005c72 <NVIC_EncodePriority+0x32>
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c74:	f04f 32ff 	mov.w	r2, #4294967295
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43da      	mvns	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	401a      	ands	r2, r3
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c88:	f04f 31ff 	mov.w	r1, #4294967295
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	43d9      	mvns	r1, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c98:	4313      	orrs	r3, r2
         );
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3724      	adds	r7, #36	@ 0x24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff ff4c 	bl	8005b4c <__NVIC_SetPriorityGrouping>
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
 8005cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005cce:	f7ff ff61 	bl	8005b94 <__NVIC_GetPriorityGrouping>
 8005cd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	6978      	ldr	r0, [r7, #20]
 8005cda:	f7ff ffb1 	bl	8005c40 <NVIC_EncodePriority>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff ff80 	bl	8005bec <__NVIC_SetPriority>
}
 8005cec:	bf00      	nop
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff ff54 	bl	8005bb0 <__NVIC_EnableIRQ>
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e014      	b.n	8005d4c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	791b      	ldrb	r3, [r3, #4]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d105      	bne.n	8005d38 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fa fd70 	bl	8000818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6a:	d120      	bne.n	8005dae <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d7a:	d118      	bne.n	8005dae <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2204      	movs	r2, #4
 8005d80:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f043 0201 	orr.w	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005d96:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005da6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f82d 	bl	8005e08 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005db8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dbc:	d120      	bne.n	8005e00 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dcc:	d118      	bne.n	8005e00 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f043 0202 	orr.w	r2, r3, #2
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005de8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005df8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f85d 	bl	8005eba <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005e00:	bf00      	nop
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	795b      	ldrb	r3, [r3, #5]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_DAC_ConfigChannel+0x18>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e03c      	b.n	8005eae <HAL_DAC_ConfigChannel+0x92>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6819      	ldr	r1, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f003 0310 	and.w	r3, r3, #16
 8005e90:	22c0      	movs	r2, #192	@ 0xc0
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	43da      	mvns	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	400a      	ands	r2, r1
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005edc:	f7ff fa0c 	bl	80052f8 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e099      	b.n	8006020 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f0c:	e00f      	b.n	8005f2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f0e:	f7ff f9f3 	bl	80052f8 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b05      	cmp	r3, #5
 8005f1a:	d908      	bls.n	8005f2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2203      	movs	r2, #3
 8005f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e078      	b.n	8006020 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e8      	bne.n	8005f0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4b38      	ldr	r3, [pc, #224]	@ (8006028 <HAL_DMA_Init+0x158>)
 8005f48:	4013      	ands	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d107      	bne.n	8005f98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f90:	4313      	orrs	r3, r2
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 0307 	bic.w	r3, r3, #7
 8005fae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d117      	bne.n	8005ff2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f8bd 	bl	8006154 <DMA_CheckFifoParam>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2240      	movs	r2, #64	@ 0x40
 8005fe4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e016      	b.n	8006020 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f874 	bl	80060e8 <DMA_CalcBaseAndBitshift>
 8006000:	4603      	mov	r3, r0
 8006002:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006008:	223f      	movs	r2, #63	@ 0x3f
 800600a:	409a      	lsls	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3718      	adds	r7, #24
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	f010803f 	.word	0xf010803f

0800602c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e050      	b.n	80060e0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d101      	bne.n	800604e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800604a:	2302      	movs	r3, #2
 800604c:	e048      	b.n	80060e0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0201 	bic.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2200      	movs	r2, #0
 8006084:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2221      	movs	r2, #33	@ 0x21
 800608c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f82a 	bl	80060e8 <DMA_CalcBaseAndBitshift>
 8006094:	4603      	mov	r3, r0
 8006096:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800609c:	223f      	movs	r2, #63	@ 0x3f
 800609e:	409a      	lsls	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	3b10      	subs	r3, #16
 80060f8:	4a13      	ldr	r2, [pc, #76]	@ (8006148 <DMA_CalcBaseAndBitshift+0x60>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006102:	4a12      	ldr	r2, [pc, #72]	@ (800614c <DMA_CalcBaseAndBitshift+0x64>)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2b03      	cmp	r3, #3
 8006114:	d908      	bls.n	8006128 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	4b0c      	ldr	r3, [pc, #48]	@ (8006150 <DMA_CalcBaseAndBitshift+0x68>)
 800611e:	4013      	ands	r3, r2
 8006120:	1d1a      	adds	r2, r3, #4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	659a      	str	r2, [r3, #88]	@ 0x58
 8006126:	e006      	b.n	8006136 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <DMA_CalcBaseAndBitshift+0x68>)
 8006130:	4013      	ands	r3, r2
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	aaaaaaab 	.word	0xaaaaaaab
 800614c:	0801ca3c 	.word	0x0801ca3c
 8006150:	fffffc00 	.word	0xfffffc00

08006154 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d11f      	bne.n	80061ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b03      	cmp	r3, #3
 8006172:	d856      	bhi.n	8006222 <DMA_CheckFifoParam+0xce>
 8006174:	a201      	add	r2, pc, #4	@ (adr r2, 800617c <DMA_CheckFifoParam+0x28>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	0800618d 	.word	0x0800618d
 8006180:	0800619f 	.word	0x0800619f
 8006184:	0800618d 	.word	0x0800618d
 8006188:	08006223 	.word	0x08006223
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006194:	2b00      	cmp	r3, #0
 8006196:	d046      	beq.n	8006226 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800619c:	e043      	b.n	8006226 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061a6:	d140      	bne.n	800622a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ac:	e03d      	b.n	800622a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061b6:	d121      	bne.n	80061fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d837      	bhi.n	800622e <DMA_CheckFifoParam+0xda>
 80061be:	a201      	add	r2, pc, #4	@ (adr r2, 80061c4 <DMA_CheckFifoParam+0x70>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061d5 	.word	0x080061d5
 80061c8:	080061db 	.word	0x080061db
 80061cc:	080061d5 	.word	0x080061d5
 80061d0:	080061ed 	.word	0x080061ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	73fb      	strb	r3, [r7, #15]
      break;
 80061d8:	e030      	b.n	800623c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d025      	beq.n	8006232 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ea:	e022      	b.n	8006232 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061f4:	d11f      	bne.n	8006236 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061fa:	e01c      	b.n	8006236 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d903      	bls.n	800620a <DMA_CheckFifoParam+0xb6>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b03      	cmp	r3, #3
 8006206:	d003      	beq.n	8006210 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006208:	e018      	b.n	800623c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	73fb      	strb	r3, [r7, #15]
      break;
 800620e:	e015      	b.n	800623c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00e      	beq.n	800623a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e00b      	b.n	800623a <DMA_CheckFifoParam+0xe6>
      break;
 8006222:	bf00      	nop
 8006224:	e00a      	b.n	800623c <DMA_CheckFifoParam+0xe8>
      break;
 8006226:	bf00      	nop
 8006228:	e008      	b.n	800623c <DMA_CheckFifoParam+0xe8>
      break;
 800622a:	bf00      	nop
 800622c:	e006      	b.n	800623c <DMA_CheckFifoParam+0xe8>
      break;
 800622e:	bf00      	nop
 8006230:	e004      	b.n	800623c <DMA_CheckFifoParam+0xe8>
      break;
 8006232:	bf00      	nop
 8006234:	e002      	b.n	800623c <DMA_CheckFifoParam+0xe8>
      break;   
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <DMA_CheckFifoParam+0xe8>
      break;
 800623a:	bf00      	nop
    }
  } 
  
  return status; 
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop

0800624c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e039      	b.n	80062d2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d106      	bne.n	8006278 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7fa fb4a 	bl	800090c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629c:	f023 0107 	bic.w	r1, r3, #7
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062b2:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <HAL_DMA2D_Init+0x90>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68d1      	ldr	r1, [r2, #12]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6812      	ldr	r2, [r2, #0]
 80062be:	430b      	orrs	r3, r1
 80062c0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	ffffc000 	.word	0xffffc000

080062e0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d101      	bne.n	80062fc <HAL_DMA2D_Start+0x1c>
 80062f8:	2302      	movs	r3, #2
 80062fa:	e018      	b.n	800632e <HAL_DMA2D_Start+0x4e>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fa98 	bl	800684c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d056      	beq.n	8006400 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006352:	f7fe ffd1 	bl	80052f8 <HAL_GetTick>
 8006356:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006358:	e04b      	b.n	80063f2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006368:	2b00      	cmp	r3, #0
 800636a:	d023      	beq.n	80063b4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637a:	f043 0202 	orr.w	r2, r3, #2
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006390:	f043 0201 	orr.w	r2, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2221      	movs	r2, #33	@ 0x21
 800639e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2204      	movs	r2, #4
 80063a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e0a5      	b.n	8006500 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d01a      	beq.n	80063f2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063bc:	f7fe ff9c 	bl	80052f8 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d302      	bcc.n	80063d2 <HAL_DMA2D_PollForTransfer+0x9c>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d6:	f043 0220 	orr.w	r2, r3, #32
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2203      	movs	r2, #3
 80063e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e086      	b.n	8006500 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d0ac      	beq.n	800635a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d061      	beq.n	80064e6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006422:	f7fe ff69 	bl	80052f8 <HAL_GetTick>
 8006426:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006428:	e056      	b.n	80064d8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006438:	2b00      	cmp	r3, #0
 800643a:	d02e      	beq.n	800649a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644a:	f043 0204 	orr.w	r2, r3, #4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f003 0320 	and.w	r3, r3, #32
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006460:	f043 0202 	orr.w	r2, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006476:	f043 0201 	orr.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2229      	movs	r2, #41	@ 0x29
 8006484:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2204      	movs	r2, #4
 800648a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e032      	b.n	8006500 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d01a      	beq.n	80064d8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064a2:	f7fe ff29 	bl	80052f8 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <HAL_DMA2D_PollForTransfer+0x182>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10f      	bne.n	80064d8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2203      	movs	r2, #3
 80064c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e013      	b.n	8006500 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0a1      	beq.n	800642a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2212      	movs	r2, #18
 80064ec:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d026      	beq.n	8006578 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006530:	2b00      	cmp	r3, #0
 8006532:	d021      	beq.n	8006578 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006542:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2201      	movs	r2, #1
 8006556:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2204      	movs	r2, #4
 800655c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d026      	beq.n	80065d0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d021      	beq.n	80065d0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800659a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2220      	movs	r2, #32
 80065a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a8:	f043 0202 	orr.w	r2, r3, #2
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2204      	movs	r2, #4
 80065b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 0308 	and.w	r3, r3, #8
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d026      	beq.n	8006628 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d021      	beq.n	8006628 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065f2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2208      	movs	r2, #8
 80065fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006600:	f043 0204 	orr.w	r2, r3, #4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2204      	movs	r2, #4
 800660c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d013      	beq.n	800665a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00e      	beq.n	800665a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800664a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2204      	movs	r2, #4
 8006652:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f853 	bl	8006700 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d024      	beq.n	80066ae <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800666a:	2b00      	cmp	r3, #0
 800666c:	d01f      	beq.n	80066ae <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800667c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2202      	movs	r2, #2
 8006684:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d01f      	beq.n	80066f8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01a      	beq.n	80066f8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066d0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2210      	movs	r2, #16
 80066d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f80e 	bl	8006714 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_DMA2D_ConfigLayer+0x20>
 8006744:	2302      	movs	r3, #2
 8006746:	e079      	b.n	800683c <HAL_DMA2D_ConfigLayer+0x114>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	3318      	adds	r3, #24
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4413      	add	r3, r2
 8006762:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006772:	4b35      	ldr	r3, [pc, #212]	@ (8006848 <HAL_DMA2D_ConfigLayer+0x120>)
 8006774:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b0a      	cmp	r3, #10
 800677c:	d003      	beq.n	8006786 <HAL_DMA2D_ConfigLayer+0x5e>
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b09      	cmp	r3, #9
 8006784:	d107      	bne.n	8006796 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	e005      	b.n	80067a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	061b      	lsls	r3, r3, #24
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	4313      	orrs	r3, r2
 80067a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d120      	bne.n	80067ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	43db      	mvns	r3, r3
 80067b2:	ea02 0103 	and.w	r1, r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	430a      	orrs	r2, r1
 80067be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b0a      	cmp	r3, #10
 80067d0:	d003      	beq.n	80067da <HAL_DMA2D_ConfigLayer+0xb2>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	2b09      	cmp	r3, #9
 80067d8:	d127      	bne.n	800682a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80067e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80067e8:	e01f      	b.n	800682a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	43db      	mvns	r3, r3
 80067f4:	ea02 0103 	and.w	r1, r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	430a      	orrs	r2, r1
 8006800:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	2b0a      	cmp	r3, #10
 8006812:	d003      	beq.n	800681c <HAL_DMA2D_ConfigLayer+0xf4>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	2b09      	cmp	r3, #9
 800681a:	d106      	bne.n	800682a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006828:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	371c      	adds	r7, #28
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	ff03000f 	.word	0xff03000f

0800684c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800684c:	b480      	push	{r7}
 800684e:	b08b      	sub	sp, #44	@ 0x2c
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006860:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	041a      	lsls	r2, r3, #16
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	431a      	orrs	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006884:	d174      	bne.n	8006970 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800688c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006894:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800689c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d108      	bne.n	80068be <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	431a      	orrs	r2, r3
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80068bc:	e053      	b.n	8006966 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d106      	bne.n	80068d4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d2:	e048      	b.n	8006966 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d111      	bne.n	8006900 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	0cdb      	lsrs	r3, r3, #19
 80068e0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	0a9b      	lsrs	r3, r3, #10
 80068e6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	08db      	lsrs	r3, r3, #3
 80068ec:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	02db      	lsls	r3, r3, #11
 80068f6:	4313      	orrs	r3, r2
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fe:	e032      	b.n	8006966 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d117      	bne.n	8006938 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	0fdb      	lsrs	r3, r3, #31
 800690c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	0cdb      	lsrs	r3, r3, #19
 8006912:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	0adb      	lsrs	r3, r3, #11
 8006918:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	08db      	lsrs	r3, r3, #3
 800691e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	015a      	lsls	r2, r3, #5
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	029b      	lsls	r3, r3, #10
 8006928:	431a      	orrs	r2, r3
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	03db      	lsls	r3, r3, #15
 800692e:	4313      	orrs	r3, r2
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	627b      	str	r3, [r7, #36]	@ 0x24
 8006936:	e016      	b.n	8006966 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	0f1b      	lsrs	r3, r3, #28
 800693c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	0d1b      	lsrs	r3, r3, #20
 8006942:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	0b1b      	lsrs	r3, r3, #12
 8006948:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	011a      	lsls	r2, r3, #4
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	431a      	orrs	r2, r3
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	031b      	lsls	r3, r3, #12
 800695e:	4313      	orrs	r3, r2
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800696e:	e003      	b.n	8006978 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	60da      	str	r2, [r3, #12]
}
 8006978:	bf00      	nop
 800697a:	372c      	adds	r7, #44	@ 0x2c
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006984:	b480      	push	{r7}
 8006986:	b089      	sub	sp, #36	@ 0x24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006992:	2300      	movs	r3, #0
 8006994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800699a:	2300      	movs	r3, #0
 800699c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	e175      	b.n	8006c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80069a4:	2201      	movs	r2, #1
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4013      	ands	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	429a      	cmp	r2, r3
 80069be:	f040 8164 	bne.w	8006c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d005      	beq.n	80069da <HAL_GPIO_Init+0x56>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d130      	bne.n	8006a3c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	2203      	movs	r2, #3
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	43db      	mvns	r3, r3
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	4013      	ands	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68da      	ldr	r2, [r3, #12]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	69ba      	ldr	r2, [r7, #24]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a10:	2201      	movs	r2, #1
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	091b      	lsrs	r3, r3, #4
 8006a26:	f003 0201 	and.w	r2, r3, #1
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d017      	beq.n	8006a78 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	2203      	movs	r2, #3
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d123      	bne.n	8006acc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	08da      	lsrs	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3208      	adds	r2, #8
 8006a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	220f      	movs	r2, #15
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	08da      	lsrs	r2, r3, #3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3208      	adds	r2, #8
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f003 0203 	and.w	r2, r3, #3
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	fa02 f303 	lsl.w	r3, r2, r3
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80be 	beq.w	8006c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b0e:	4b66      	ldr	r3, [pc, #408]	@ (8006ca8 <HAL_GPIO_Init+0x324>)
 8006b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b12:	4a65      	ldr	r2, [pc, #404]	@ (8006ca8 <HAL_GPIO_Init+0x324>)
 8006b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b1a:	4b63      	ldr	r3, [pc, #396]	@ (8006ca8 <HAL_GPIO_Init+0x324>)
 8006b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006b26:	4a61      	ldr	r2, [pc, #388]	@ (8006cac <HAL_GPIO_Init+0x328>)
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	089b      	lsrs	r3, r3, #2
 8006b2c:	3302      	adds	r3, #2
 8006b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	f003 0303 	and.w	r3, r3, #3
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	220f      	movs	r2, #15
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43db      	mvns	r3, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	4013      	ands	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a58      	ldr	r2, [pc, #352]	@ (8006cb0 <HAL_GPIO_Init+0x32c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d037      	beq.n	8006bc2 <HAL_GPIO_Init+0x23e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a57      	ldr	r2, [pc, #348]	@ (8006cb4 <HAL_GPIO_Init+0x330>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d031      	beq.n	8006bbe <HAL_GPIO_Init+0x23a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a56      	ldr	r2, [pc, #344]	@ (8006cb8 <HAL_GPIO_Init+0x334>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d02b      	beq.n	8006bba <HAL_GPIO_Init+0x236>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a55      	ldr	r2, [pc, #340]	@ (8006cbc <HAL_GPIO_Init+0x338>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d025      	beq.n	8006bb6 <HAL_GPIO_Init+0x232>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a54      	ldr	r2, [pc, #336]	@ (8006cc0 <HAL_GPIO_Init+0x33c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01f      	beq.n	8006bb2 <HAL_GPIO_Init+0x22e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a53      	ldr	r2, [pc, #332]	@ (8006cc4 <HAL_GPIO_Init+0x340>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d019      	beq.n	8006bae <HAL_GPIO_Init+0x22a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a52      	ldr	r2, [pc, #328]	@ (8006cc8 <HAL_GPIO_Init+0x344>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <HAL_GPIO_Init+0x226>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a51      	ldr	r2, [pc, #324]	@ (8006ccc <HAL_GPIO_Init+0x348>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00d      	beq.n	8006ba6 <HAL_GPIO_Init+0x222>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a50      	ldr	r2, [pc, #320]	@ (8006cd0 <HAL_GPIO_Init+0x34c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d007      	beq.n	8006ba2 <HAL_GPIO_Init+0x21e>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a4f      	ldr	r2, [pc, #316]	@ (8006cd4 <HAL_GPIO_Init+0x350>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d101      	bne.n	8006b9e <HAL_GPIO_Init+0x21a>
 8006b9a:	2309      	movs	r3, #9
 8006b9c:	e012      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	e010      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006ba2:	2308      	movs	r3, #8
 8006ba4:	e00e      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006ba6:	2307      	movs	r3, #7
 8006ba8:	e00c      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006baa:	2306      	movs	r3, #6
 8006bac:	e00a      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bae:	2305      	movs	r3, #5
 8006bb0:	e008      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bb2:	2304      	movs	r3, #4
 8006bb4:	e006      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e004      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e002      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e000      	b.n	8006bc4 <HAL_GPIO_Init+0x240>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	69fa      	ldr	r2, [r7, #28]
 8006bc6:	f002 0203 	and.w	r2, r2, #3
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	4093      	lsls	r3, r2
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006bd4:	4935      	ldr	r1, [pc, #212]	@ (8006cac <HAL_GPIO_Init+0x328>)
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	089b      	lsrs	r3, r3, #2
 8006bda:	3302      	adds	r3, #2
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006be2:	4b3d      	ldr	r3, [pc, #244]	@ (8006cd8 <HAL_GPIO_Init+0x354>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	43db      	mvns	r3, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c06:	4a34      	ldr	r2, [pc, #208]	@ (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c0c:	4b32      	ldr	r3, [pc, #200]	@ (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	43db      	mvns	r3, r3
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006c30:	4a29      	ldr	r2, [pc, #164]	@ (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006c36:	4b28      	ldr	r3, [pc, #160]	@ (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	43db      	mvns	r3, r3
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	4013      	ands	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006c52:	69ba      	ldr	r2, [r7, #24]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c60:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	43db      	mvns	r3, r3
 8006c6a:	69ba      	ldr	r2, [r7, #24]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c84:	4a14      	ldr	r2, [pc, #80]	@ (8006cd8 <HAL_GPIO_Init+0x354>)
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	2b0f      	cmp	r3, #15
 8006c94:	f67f ae86 	bls.w	80069a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	3724      	adds	r7, #36	@ 0x24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	40013800 	.word	0x40013800
 8006cb0:	40020000 	.word	0x40020000
 8006cb4:	40020400 	.word	0x40020400
 8006cb8:	40020800 	.word	0x40020800
 8006cbc:	40020c00 	.word	0x40020c00
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40021400 	.word	0x40021400
 8006cc8:	40021800 	.word	0x40021800
 8006ccc:	40021c00 	.word	0x40021c00
 8006cd0:	40022000 	.word	0x40022000
 8006cd4:	40022400 	.word	0x40022400
 8006cd8:	40013c00 	.word	0x40013c00

08006cdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e0d9      	b.n	8006eac <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006d00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4013      	ands	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	f040 80c9 	bne.w	8006ea6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006d14:	4a6b      	ldr	r2, [pc, #428]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e8>)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	089b      	lsrs	r3, r3, #2
 8006d1a:	3302      	adds	r3, #2
 8006d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d20:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	220f      	movs	r2, #15
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	4013      	ands	r3, r2
 8006d34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a63      	ldr	r2, [pc, #396]	@ (8006ec8 <HAL_GPIO_DeInit+0x1ec>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d037      	beq.n	8006dae <HAL_GPIO_DeInit+0xd2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a62      	ldr	r2, [pc, #392]	@ (8006ecc <HAL_GPIO_DeInit+0x1f0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d031      	beq.n	8006daa <HAL_GPIO_DeInit+0xce>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a61      	ldr	r2, [pc, #388]	@ (8006ed0 <HAL_GPIO_DeInit+0x1f4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d02b      	beq.n	8006da6 <HAL_GPIO_DeInit+0xca>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a60      	ldr	r2, [pc, #384]	@ (8006ed4 <HAL_GPIO_DeInit+0x1f8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d025      	beq.n	8006da2 <HAL_GPIO_DeInit+0xc6>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a5f      	ldr	r2, [pc, #380]	@ (8006ed8 <HAL_GPIO_DeInit+0x1fc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d01f      	beq.n	8006d9e <HAL_GPIO_DeInit+0xc2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a5e      	ldr	r2, [pc, #376]	@ (8006edc <HAL_GPIO_DeInit+0x200>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d019      	beq.n	8006d9a <HAL_GPIO_DeInit+0xbe>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a5d      	ldr	r2, [pc, #372]	@ (8006ee0 <HAL_GPIO_DeInit+0x204>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <HAL_GPIO_DeInit+0xba>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a5c      	ldr	r2, [pc, #368]	@ (8006ee4 <HAL_GPIO_DeInit+0x208>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00d      	beq.n	8006d92 <HAL_GPIO_DeInit+0xb6>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a5b      	ldr	r2, [pc, #364]	@ (8006ee8 <HAL_GPIO_DeInit+0x20c>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d007      	beq.n	8006d8e <HAL_GPIO_DeInit+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a5a      	ldr	r2, [pc, #360]	@ (8006eec <HAL_GPIO_DeInit+0x210>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d101      	bne.n	8006d8a <HAL_GPIO_DeInit+0xae>
 8006d86:	2309      	movs	r3, #9
 8006d88:	e012      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006d8a:	230a      	movs	r3, #10
 8006d8c:	e010      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006d8e:	2308      	movs	r3, #8
 8006d90:	e00e      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006d92:	2307      	movs	r3, #7
 8006d94:	e00c      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006d96:	2306      	movs	r3, #6
 8006d98:	e00a      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006d9a:	2305      	movs	r3, #5
 8006d9c:	e008      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006d9e:	2304      	movs	r3, #4
 8006da0:	e006      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006da2:	2303      	movs	r3, #3
 8006da4:	e004      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006da6:	2302      	movs	r3, #2
 8006da8:	e002      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <HAL_GPIO_DeInit+0xd4>
 8006dae:	2300      	movs	r3, #0
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	f002 0203 	and.w	r2, r2, #3
 8006db6:	0092      	lsls	r2, r2, #2
 8006db8:	4093      	lsls	r3, r2
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d132      	bne.n	8006e26 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8006ef0 <HAL_GPIO_DeInit+0x214>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	4949      	ldr	r1, [pc, #292]	@ (8006ef0 <HAL_GPIO_DeInit+0x214>)
 8006dca:	4013      	ands	r3, r2
 8006dcc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006dce:	4b48      	ldr	r3, [pc, #288]	@ (8006ef0 <HAL_GPIO_DeInit+0x214>)
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	4946      	ldr	r1, [pc, #280]	@ (8006ef0 <HAL_GPIO_DeInit+0x214>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006ddc:	4b44      	ldr	r3, [pc, #272]	@ (8006ef0 <HAL_GPIO_DeInit+0x214>)
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	43db      	mvns	r3, r3
 8006de4:	4942      	ldr	r1, [pc, #264]	@ (8006ef0 <HAL_GPIO_DeInit+0x214>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006dea:	4b41      	ldr	r3, [pc, #260]	@ (8006ef0 <HAL_GPIO_DeInit+0x214>)
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	43db      	mvns	r3, r3
 8006df2:	493f      	ldr	r1, [pc, #252]	@ (8006ef0 <HAL_GPIO_DeInit+0x214>)
 8006df4:	4013      	ands	r3, r2
 8006df6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	220f      	movs	r2, #15
 8006e02:	fa02 f303 	lsl.w	r3, r2, r3
 8006e06:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006e08:	4a2e      	ldr	r2, [pc, #184]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e8>)
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	089b      	lsrs	r3, r3, #2
 8006e0e:	3302      	adds	r3, #2
 8006e10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	43da      	mvns	r2, r3
 8006e18:	482a      	ldr	r0, [pc, #168]	@ (8006ec4 <HAL_GPIO_DeInit+0x1e8>)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	089b      	lsrs	r3, r3, #2
 8006e1e:	400a      	ands	r2, r1
 8006e20:	3302      	adds	r3, #2
 8006e22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	2103      	movs	r1, #3
 8006e30:	fa01 f303 	lsl.w	r3, r1, r3
 8006e34:	43db      	mvns	r3, r3
 8006e36:	401a      	ands	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	08da      	lsrs	r2, r3, #3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3208      	adds	r2, #8
 8006e44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f003 0307 	and.w	r3, r3, #7
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	220f      	movs	r2, #15
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	43db      	mvns	r3, r3
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	08d2      	lsrs	r2, r2, #3
 8006e5c:	4019      	ands	r1, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3208      	adds	r2, #8
 8006e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	2103      	movs	r1, #3
 8006e70:	fa01 f303 	lsl.w	r3, r1, r3
 8006e74:	43db      	mvns	r3, r3
 8006e76:	401a      	ands	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	2101      	movs	r1, #1
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	fa01 f303 	lsl.w	r3, r1, r3
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	401a      	ands	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689a      	ldr	r2, [r3, #8]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	2103      	movs	r1, #3
 8006e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	401a      	ands	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b0f      	cmp	r3, #15
 8006eb0:	f67f af22 	bls.w	8006cf8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006eb4:	bf00      	nop
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40013800 	.word	0x40013800
 8006ec8:	40020000 	.word	0x40020000
 8006ecc:	40020400 	.word	0x40020400
 8006ed0:	40020800 	.word	0x40020800
 8006ed4:	40020c00 	.word	0x40020c00
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	40021400 	.word	0x40021400
 8006ee0:	40021800 	.word	0x40021800
 8006ee4:	40021c00 	.word	0x40021c00
 8006ee8:	40022000 	.word	0x40022000
 8006eec:	40022400 	.word	0x40022400
 8006ef0:	40013c00 	.word	0x40013c00

08006ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	807b      	strh	r3, [r7, #2]
 8006f00:	4613      	mov	r3, r2
 8006f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f04:	787b      	ldrb	r3, [r7, #1]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f0a:	887a      	ldrh	r2, [r7, #2]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006f10:	e003      	b.n	8006f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006f12:	887b      	ldrh	r3, [r7, #2]
 8006f14:	041a      	lsls	r2, r3, #16
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	619a      	str	r2, [r3, #24]
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
	...

08006f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e07f      	b.n	800703a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fb fa9a 	bl	8002488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	@ 0x24
 8006f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d107      	bne.n	8006fa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	e006      	b.n	8006fb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006fae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d104      	bne.n	8006fc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6859      	ldr	r1, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8007044 <HAL_I2C_Init+0x11c>)
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fe0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691a      	ldr	r2, [r3, #16]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69d9      	ldr	r1, [r3, #28]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	02008000 	.word	0x02008000

08007048 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e021      	b.n	800709e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2224      	movs	r2, #36	@ 0x24
 800705e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fb fab0 	bl	80025d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	4608      	mov	r0, r1
 80070b2:	4611      	mov	r1, r2
 80070b4:	461a      	mov	r2, r3
 80070b6:	4603      	mov	r3, r0
 80070b8:	817b      	strh	r3, [r7, #10]
 80070ba:	460b      	mov	r3, r1
 80070bc:	813b      	strh	r3, [r7, #8]
 80070be:	4613      	mov	r3, r2
 80070c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	f040 80f9 	bne.w	80072c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <HAL_I2C_Mem_Write+0x34>
 80070d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e0ed      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_I2C_Mem_Write+0x4e>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e0e6      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070fe:	f7fe f8fb 	bl	80052f8 <HAL_GetTick>
 8007102:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2319      	movs	r3, #25
 800710a:	2201      	movs	r2, #1
 800710c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fad1 	bl	80076b8 <I2C_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e0d1      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2221      	movs	r2, #33	@ 0x21
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2240      	movs	r2, #64	@ 0x40
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a3a      	ldr	r2, [r7, #32]
 800713a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007140:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007148:	88f8      	ldrh	r0, [r7, #6]
 800714a:	893a      	ldrh	r2, [r7, #8]
 800714c:	8979      	ldrh	r1, [r7, #10]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	9301      	str	r3, [sp, #4]
 8007152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4603      	mov	r3, r0
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f9e1 	bl	8007520 <I2C_RequestMemoryWrite>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d005      	beq.n	8007170 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0a9      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007174:	b29b      	uxth	r3, r3
 8007176:	2bff      	cmp	r3, #255	@ 0xff
 8007178:	d90e      	bls.n	8007198 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	22ff      	movs	r2, #255	@ 0xff
 800717e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007184:	b2da      	uxtb	r2, r3
 8007186:	8979      	ldrh	r1, [r7, #10]
 8007188:	2300      	movs	r3, #0
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fc2d 	bl	80079f0 <I2C_TransferConfig>
 8007196:	e00f      	b.n	80071b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	8979      	ldrh	r1, [r7, #10]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9300      	str	r3, [sp, #0]
 80071ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fc1c 	bl	80079f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fabb 	bl	8007738 <I2C_WaitOnTXISFlagUntilTimeout>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e07b      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	781a      	ldrb	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007200:	b29b      	uxth	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d034      	beq.n	8007270 <HAL_I2C_Mem_Write+0x1c8>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d130      	bne.n	8007270 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	2200      	movs	r2, #0
 8007216:	2180      	movs	r1, #128	@ 0x80
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fa4d 	bl	80076b8 <I2C_WaitOnFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e04d      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800722c:	b29b      	uxth	r3, r3
 800722e:	2bff      	cmp	r3, #255	@ 0xff
 8007230:	d90e      	bls.n	8007250 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	22ff      	movs	r2, #255	@ 0xff
 8007236:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800723c:	b2da      	uxtb	r2, r3
 800723e:	8979      	ldrh	r1, [r7, #10]
 8007240:	2300      	movs	r3, #0
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fbd1 	bl	80079f0 <I2C_TransferConfig>
 800724e:	e00f      	b.n	8007270 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007254:	b29a      	uxth	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800725e:	b2da      	uxtb	r2, r3
 8007260:	8979      	ldrh	r1, [r7, #10]
 8007262:	2300      	movs	r3, #0
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 fbc0 	bl	80079f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d19e      	bne.n	80071b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fa9a 	bl	80077b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e01a      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2220      	movs	r2, #32
 8007294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6859      	ldr	r1, [r3, #4]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	4b0a      	ldr	r3, [pc, #40]	@ (80072cc <HAL_I2C_Mem_Write+0x224>)
 80072a2:	400b      	ands	r3, r1
 80072a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e000      	b.n	80072c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80072c2:	2302      	movs	r3, #2
  }
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	fe00e800 	.word	0xfe00e800

080072d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	4608      	mov	r0, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4603      	mov	r3, r0
 80072e0:	817b      	strh	r3, [r7, #10]
 80072e2:	460b      	mov	r3, r1
 80072e4:	813b      	strh	r3, [r7, #8]
 80072e6:	4613      	mov	r3, r2
 80072e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	f040 80fd 	bne.w	80074f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_I2C_Mem_Read+0x34>
 80072fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800730a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0f1      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_I2C_Mem_Read+0x4e>
 800731a:	2302      	movs	r3, #2
 800731c:	e0ea      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007326:	f7fd ffe7 	bl	80052f8 <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	2319      	movs	r3, #25
 8007332:	2201      	movs	r2, #1
 8007334:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f9bd 	bl	80076b8 <I2C_WaitOnFlagUntilTimeout>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e0d5      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2222      	movs	r2, #34	@ 0x22
 800734c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2240      	movs	r2, #64	@ 0x40
 8007354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a3a      	ldr	r2, [r7, #32]
 8007362:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007368:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007370:	88f8      	ldrh	r0, [r7, #6]
 8007372:	893a      	ldrh	r2, [r7, #8]
 8007374:	8979      	ldrh	r1, [r7, #10]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4603      	mov	r3, r0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f921 	bl	80075c8 <I2C_RequestMemoryRead>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d005      	beq.n	8007398 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e0ad      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2bff      	cmp	r3, #255	@ 0xff
 80073a0:	d90e      	bls.n	80073c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	22ff      	movs	r2, #255	@ 0xff
 80073a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	8979      	ldrh	r1, [r7, #10]
 80073b0:	4b52      	ldr	r3, [pc, #328]	@ (80074fc <HAL_I2C_Mem_Read+0x22c>)
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 fb19 	bl	80079f0 <I2C_TransferConfig>
 80073be:	e00f      	b.n	80073e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	8979      	ldrh	r1, [r7, #10]
 80073d2:	4b4a      	ldr	r3, [pc, #296]	@ (80074fc <HAL_I2C_Mem_Read+0x22c>)
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fb08 	bl	80079f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e6:	2200      	movs	r2, #0
 80073e8:	2104      	movs	r1, #4
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 f964 	bl	80076b8 <I2C_WaitOnFlagUntilTimeout>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	e07c      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d034      	beq.n	80074a0 <HAL_I2C_Mem_Read+0x1d0>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d130      	bne.n	80074a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	2200      	movs	r2, #0
 8007446:	2180      	movs	r1, #128	@ 0x80
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f000 f935 	bl	80076b8 <I2C_WaitOnFlagUntilTimeout>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e04d      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800745c:	b29b      	uxth	r3, r3
 800745e:	2bff      	cmp	r3, #255	@ 0xff
 8007460:	d90e      	bls.n	8007480 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	22ff      	movs	r2, #255	@ 0xff
 8007466:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800746c:	b2da      	uxtb	r2, r3
 800746e:	8979      	ldrh	r1, [r7, #10]
 8007470:	2300      	movs	r3, #0
 8007472:	9300      	str	r3, [sp, #0]
 8007474:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fab9 	bl	80079f0 <I2C_TransferConfig>
 800747e:	e00f      	b.n	80074a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800748e:	b2da      	uxtb	r2, r3
 8007490:	8979      	ldrh	r1, [r7, #10]
 8007492:	2300      	movs	r3, #0
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 faa8 	bl	80079f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d19a      	bne.n	80073e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f982 	bl	80077b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e01a      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2220      	movs	r2, #32
 80074c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6859      	ldr	r1, [r3, #4]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <HAL_I2C_Mem_Read+0x230>)
 80074d2:	400b      	ands	r3, r1
 80074d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e000      	b.n	80074f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80074f2:	2302      	movs	r3, #2
  }
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	80002400 	.word	0x80002400
 8007500:	fe00e800 	.word	0xfe00e800

08007504 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007512:	b2db      	uxtb	r3, r3
}
 8007514:	4618      	mov	r0, r3
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	461a      	mov	r2, r3
 800752e:	4603      	mov	r3, r0
 8007530:	817b      	strh	r3, [r7, #10]
 8007532:	460b      	mov	r3, r1
 8007534:	813b      	strh	r3, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800753a:	88fb      	ldrh	r3, [r7, #6]
 800753c:	b2da      	uxtb	r2, r3
 800753e:	8979      	ldrh	r1, [r7, #10]
 8007540:	4b20      	ldr	r3, [pc, #128]	@ (80075c4 <I2C_RequestMemoryWrite+0xa4>)
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fa51 	bl	80079f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	69b9      	ldr	r1, [r7, #24]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 f8f0 	bl	8007738 <I2C_WaitOnTXISFlagUntilTimeout>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d001      	beq.n	8007562 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e02c      	b.n	80075bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d105      	bne.n	8007574 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007568:	893b      	ldrh	r3, [r7, #8]
 800756a:	b2da      	uxtb	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	629a      	str	r2, [r3, #40]	@ 0x28
 8007572:	e015      	b.n	80075a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007574:	893b      	ldrh	r3, [r7, #8]
 8007576:	0a1b      	lsrs	r3, r3, #8
 8007578:	b29b      	uxth	r3, r3
 800757a:	b2da      	uxtb	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	69b9      	ldr	r1, [r7, #24]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f8d6 	bl	8007738 <I2C_WaitOnTXISFlagUntilTimeout>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e012      	b.n	80075bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007596:	893b      	ldrh	r3, [r7, #8]
 8007598:	b2da      	uxtb	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	2200      	movs	r2, #0
 80075a8:	2180      	movs	r1, #128	@ 0x80
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 f884 	bl	80076b8 <I2C_WaitOnFlagUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	80002000 	.word	0x80002000

080075c8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	4608      	mov	r0, r1
 80075d2:	4611      	mov	r1, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4603      	mov	r3, r0
 80075d8:	817b      	strh	r3, [r7, #10]
 80075da:	460b      	mov	r3, r1
 80075dc:	813b      	strh	r3, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	8979      	ldrh	r1, [r7, #10]
 80075e8:	4b20      	ldr	r3, [pc, #128]	@ (800766c <I2C_RequestMemoryRead+0xa4>)
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2300      	movs	r3, #0
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f9fe 	bl	80079f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	69b9      	ldr	r1, [r7, #24]
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f89d 	bl	8007738 <I2C_WaitOnTXISFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e02c      	b.n	8007662 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007608:	88fb      	ldrh	r3, [r7, #6]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d105      	bne.n	800761a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800760e:	893b      	ldrh	r3, [r7, #8]
 8007610:	b2da      	uxtb	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	629a      	str	r2, [r3, #40]	@ 0x28
 8007618:	e015      	b.n	8007646 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800761a:	893b      	ldrh	r3, [r7, #8]
 800761c:	0a1b      	lsrs	r3, r3, #8
 800761e:	b29b      	uxth	r3, r3
 8007620:	b2da      	uxtb	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	69b9      	ldr	r1, [r7, #24]
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f883 	bl	8007738 <I2C_WaitOnTXISFlagUntilTimeout>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e012      	b.n	8007662 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800763c:	893b      	ldrh	r3, [r7, #8]
 800763e:	b2da      	uxtb	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	2200      	movs	r2, #0
 800764e:	2140      	movs	r1, #64	@ 0x40
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f831 	bl	80076b8 <I2C_WaitOnFlagUntilTimeout>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	80002000 	.word	0x80002000

08007670 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b02      	cmp	r3, #2
 8007684:	d103      	bne.n	800768e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2200      	movs	r2, #0
 800768c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b01      	cmp	r3, #1
 800769a:	d007      	beq.n	80076ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f042 0201 	orr.w	r2, r2, #1
 80076aa:	619a      	str	r2, [r3, #24]
  }
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	4613      	mov	r3, r2
 80076c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076c8:	e022      	b.n	8007710 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d0:	d01e      	beq.n	8007710 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d2:	f7fd fe11 	bl	80052f8 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d302      	bcc.n	80076e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d113      	bne.n	8007710 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2220      	movs	r2, #32
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e00f      	b.n	8007730 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	4013      	ands	r3, r2
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	429a      	cmp	r2, r3
 800771e:	bf0c      	ite	eq
 8007720:	2301      	moveq	r3, #1
 8007722:	2300      	movne	r3, #0
 8007724:	b2db      	uxtb	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	429a      	cmp	r2, r3
 800772c:	d0cd      	beq.n	80076ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007744:	e02c      	b.n	80077a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f870 	bl	8007830 <I2C_IsErrorOccurred>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e02a      	b.n	80077b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d01e      	beq.n	80077a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007762:	f7fd fdc9 	bl	80052f8 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	429a      	cmp	r2, r3
 8007770:	d302      	bcc.n	8007778 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d113      	bne.n	80077a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777c:	f043 0220 	orr.w	r2, r3, #32
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e007      	b.n	80077b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d1cb      	bne.n	8007746 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077c4:	e028      	b.n	8007818 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 f830 	bl	8007830 <I2C_IsErrorOccurred>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e026      	b.n	8007828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077da:	f7fd fd8d 	bl	80052f8 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d302      	bcc.n	80077f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d113      	bne.n	8007818 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f4:	f043 0220 	orr.w	r2, r3, #32
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2220      	movs	r2, #32
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e007      	b.n	8007828 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b20      	cmp	r3, #32
 8007824:	d1cf      	bne.n	80077c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08a      	sub	sp, #40	@ 0x28
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d068      	beq.n	800792e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2210      	movs	r2, #16
 8007862:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007864:	e049      	b.n	80078fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800786c:	d045      	beq.n	80078fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800786e:	f7fd fd43 	bl	80052f8 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	429a      	cmp	r2, r3
 800787c:	d302      	bcc.n	8007884 <I2C_IsErrorOccurred+0x54>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d13a      	bne.n	80078fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800788e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007896:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078a6:	d121      	bne.n	80078ec <I2C_IsErrorOccurred+0xbc>
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078ae:	d01d      	beq.n	80078ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80078b0:	7cfb      	ldrb	r3, [r7, #19]
 80078b2:	2b20      	cmp	r3, #32
 80078b4:	d01a      	beq.n	80078ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80078c6:	f7fd fd17 	bl	80052f8 <HAL_GetTick>
 80078ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078cc:	e00e      	b.n	80078ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80078ce:	f7fd fd13 	bl	80052f8 <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b19      	cmp	r3, #25
 80078da:	d907      	bls.n	80078ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	f043 0320 	orr.w	r3, r3, #32
 80078e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80078ea:	e006      	b.n	80078fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d1e9      	bne.n	80078ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	f003 0320 	and.w	r3, r3, #32
 8007904:	2b20      	cmp	r3, #32
 8007906:	d003      	beq.n	8007910 <I2C_IsErrorOccurred+0xe0>
 8007908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800790c:	2b00      	cmp	r3, #0
 800790e:	d0aa      	beq.n	8007866 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007914:	2b00      	cmp	r3, #0
 8007916:	d103      	bne.n	8007920 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2220      	movs	r2, #32
 800791e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	f043 0304 	orr.w	r3, r3, #4
 8007926:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f043 0301 	orr.w	r3, r3, #1
 8007946:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007950:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	f043 0308 	orr.w	r3, r3, #8
 8007968:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007972:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	f043 0302 	orr.w	r3, r3, #2
 800798a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007994:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800799c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01c      	beq.n	80079de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff fe63 	bl	8007670 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6859      	ldr	r1, [r3, #4]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4b0d      	ldr	r3, [pc, #52]	@ (80079ec <I2C_IsErrorOccurred+0x1bc>)
 80079b6:	400b      	ands	r3, r1
 80079b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	431a      	orrs	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80079de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3728      	adds	r7, #40	@ 0x28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	fe00e800 	.word	0xfe00e800

080079f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	607b      	str	r3, [r7, #4]
 80079fa:	460b      	mov	r3, r1
 80079fc:	817b      	strh	r3, [r7, #10]
 80079fe:	4613      	mov	r3, r2
 8007a00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a02:	897b      	ldrh	r3, [r7, #10]
 8007a04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a08:	7a7b      	ldrb	r3, [r7, #9]
 8007a0a:	041b      	lsls	r3, r3, #16
 8007a0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	0d5b      	lsrs	r3, r3, #21
 8007a2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007a2e:	4b08      	ldr	r3, [pc, #32]	@ (8007a50 <I2C_TransferConfig+0x60>)
 8007a30:	430b      	orrs	r3, r1
 8007a32:	43db      	mvns	r3, r3
 8007a34:	ea02 0103 	and.w	r1, r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007a42:	bf00      	nop
 8007a44:	371c      	adds	r7, #28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	03ff63ff 	.word	0x03ff63ff

08007a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b20      	cmp	r3, #32
 8007a68:	d138      	bne.n	8007adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e032      	b.n	8007ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2224      	movs	r2, #36	@ 0x24
 8007a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0201 	bic.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	430a      	orrs	r2, r1
 8007ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f042 0201 	orr.w	r2, r2, #1
 8007ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e000      	b.n	8007ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007adc:	2302      	movs	r3, #2
  }
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b20      	cmp	r3, #32
 8007afe:	d139      	bne.n	8007b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e033      	b.n	8007b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2224      	movs	r2, #36	@ 0x24
 8007b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0201 	bic.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2220      	movs	r2, #32
 8007b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	e000      	b.n	8007b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b74:	2302      	movs	r3, #2
  }
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
	...

08007b84 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e0bf      	b.n	8007d16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d106      	bne.n	8007bb0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7fa fdd2 	bl	8002754 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007bc6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6999      	ldr	r1, [r3, #24]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bdc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6899      	ldr	r1, [r3, #8]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8007d20 <HAL_LTDC_Init+0x19c>)
 8007bf8:	400b      	ands	r3, r1
 8007bfa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	041b      	lsls	r3, r3, #16
 8007c02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6899      	ldr	r1, [r3, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	431a      	orrs	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68d9      	ldr	r1, [r3, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	4b3e      	ldr	r3, [pc, #248]	@ (8007d20 <HAL_LTDC_Init+0x19c>)
 8007c26:	400b      	ands	r3, r1
 8007c28:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69db      	ldr	r3, [r3, #28]
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68d9      	ldr	r1, [r3, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a1a      	ldr	r2, [r3, #32]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6919      	ldr	r1, [r3, #16]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	4b33      	ldr	r3, [pc, #204]	@ (8007d20 <HAL_LTDC_Init+0x19c>)
 8007c54:	400b      	ands	r3, r1
 8007c56:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5c:	041b      	lsls	r3, r3, #16
 8007c5e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6919      	ldr	r1, [r3, #16]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6959      	ldr	r1, [r3, #20]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	4b27      	ldr	r3, [pc, #156]	@ (8007d20 <HAL_LTDC_Init+0x19c>)
 8007c82:	400b      	ands	r3, r1
 8007c84:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6959      	ldr	r1, [r3, #20]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007cb4:	041b      	lsls	r3, r3, #16
 8007cb6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0206 	orr.w	r2, r2, #6
 8007cf2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	f000f800 	.word	0xf000f800

08007d24 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d023      	beq.n	8007d8e <HAL_LTDC_IRQHandler+0x6a>
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d01e      	beq.n	8007d8e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0204 	bic.w	r2, r2, #4
 8007d5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2204      	movs	r2, #4
 8007d66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d6e:	f043 0201 	orr.w	r2, r3, #1
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2204      	movs	r2, #4
 8007d7c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f86f 	bl	8007e6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d023      	beq.n	8007de0 <HAL_LTDC_IRQHandler+0xbc>
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d01e      	beq.n	8007de0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0202 	bic.w	r2, r2, #2
 8007db0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2202      	movs	r2, #2
 8007db8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dc0:	f043 0202 	orr.w	r2, r3, #2
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2204      	movs	r2, #4
 8007dce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f846 	bl	8007e6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d01b      	beq.n	8007e22 <HAL_LTDC_IRQHandler+0xfe>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d016      	beq.n	8007e22 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0201 	bic.w	r2, r2, #1
 8007e02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f82f 	bl	8007e80 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01b      	beq.n	8007e64 <HAL_LTDC_IRQHandler+0x140>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d016      	beq.n	8007e64 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0208 	bic.w	r2, r2, #8
 8007e44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2208      	movs	r2, #8
 8007e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f818 	bl	8007e94 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007e64:	bf00      	nop
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007ea8:	b5b0      	push	{r4, r5, r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d101      	bne.n	8007ec2 <HAL_LTDC_ConfigLayer+0x1a>
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	e02c      	b.n	8007f1c <HAL_LTDC_ConfigLayer+0x74>
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2134      	movs	r1, #52	@ 0x34
 8007ed8:	fb01 f303 	mul.w	r3, r1, r3
 8007edc:	4413      	add	r3, r2
 8007ede:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ef4:	682b      	ldr	r3, [r5, #0]
 8007ef6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	68b9      	ldr	r1, [r7, #8]
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 f81f 	bl	8007f40 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2201      	movs	r2, #1
 8007f08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bdb0      	pop	{r4, r5, r7, pc}

08007f24 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007f32:	b2db      	uxtb	r3, r3
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b089      	sub	sp, #36	@ 0x24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	0c1b      	lsrs	r3, r3, #16
 8007f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f5c:	4413      	add	r3, r2
 8007f5e:	041b      	lsls	r3, r3, #16
 8007f60:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	01db      	lsls	r3, r3, #7
 8007f6c:	4413      	add	r3, r2
 8007f6e:	3384      	adds	r3, #132	@ 0x84
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	4611      	mov	r1, r2
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	01d2      	lsls	r2, r2, #7
 8007f7c:	440a      	add	r2, r1
 8007f7e:	3284      	adds	r2, #132	@ 0x84
 8007f80:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007f84:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	0c1b      	lsrs	r3, r3, #16
 8007f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f96:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f98:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	01db      	lsls	r3, r3, #7
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3384      	adds	r3, #132	@ 0x84
 8007fa8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fbe:	4413      	add	r3, r2
 8007fc0:	041b      	lsls	r3, r3, #16
 8007fc2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	01db      	lsls	r3, r3, #7
 8007fce:	4413      	add	r3, r2
 8007fd0:	3384      	adds	r3, #132	@ 0x84
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	01d2      	lsls	r2, r2, #7
 8007fde:	440a      	add	r2, r1
 8007fe0:	3284      	adds	r2, #132	@ 0x84
 8007fe2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007fe6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ff6:	4413      	add	r3, r2
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4619      	mov	r1, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	01db      	lsls	r3, r3, #7
 8008004:	440b      	add	r3, r1
 8008006:	3384      	adds	r3, #132	@ 0x84
 8008008:	4619      	mov	r1, r3
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	4313      	orrs	r3, r2
 800800e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	01db      	lsls	r3, r3, #7
 800801a:	4413      	add	r3, r2
 800801c:	3384      	adds	r3, #132	@ 0x84
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	4611      	mov	r1, r2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	01d2      	lsls	r2, r2, #7
 800802a:	440a      	add	r2, r1
 800802c:	3284      	adds	r2, #132	@ 0x84
 800802e:	f023 0307 	bic.w	r3, r3, #7
 8008032:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	01db      	lsls	r3, r3, #7
 800803e:	4413      	add	r3, r2
 8008040:	3384      	adds	r3, #132	@ 0x84
 8008042:	461a      	mov	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800805a:	041b      	lsls	r3, r3, #16
 800805c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	061b      	lsls	r3, r3, #24
 8008064:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	01db      	lsls	r3, r3, #7
 8008070:	4413      	add	r3, r2
 8008072:	3384      	adds	r3, #132	@ 0x84
 8008074:	699b      	ldr	r3, [r3, #24]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	01db      	lsls	r3, r3, #7
 8008080:	4413      	add	r3, r2
 8008082:	3384      	adds	r3, #132	@ 0x84
 8008084:	461a      	mov	r2, r3
 8008086:	2300      	movs	r3, #0
 8008088:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008090:	461a      	mov	r2, r3
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	431a      	orrs	r2, r3
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	431a      	orrs	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4619      	mov	r1, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	01db      	lsls	r3, r3, #7
 80080a4:	440b      	add	r3, r1
 80080a6:	3384      	adds	r3, #132	@ 0x84
 80080a8:	4619      	mov	r1, r3
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	01db      	lsls	r3, r3, #7
 80080ba:	4413      	add	r3, r2
 80080bc:	3384      	adds	r3, #132	@ 0x84
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	4611      	mov	r1, r2
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	01d2      	lsls	r2, r2, #7
 80080ca:	440a      	add	r2, r1
 80080cc:	3284      	adds	r2, #132	@ 0x84
 80080ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80080d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	461a      	mov	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	01db      	lsls	r3, r3, #7
 80080de:	4413      	add	r3, r2
 80080e0:	3384      	adds	r3, #132	@ 0x84
 80080e2:	461a      	mov	r2, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	01db      	lsls	r3, r3, #7
 80080f4:	4413      	add	r3, r2
 80080f6:	3384      	adds	r3, #132	@ 0x84
 80080f8:	69da      	ldr	r2, [r3, #28]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4619      	mov	r1, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	01db      	lsls	r3, r3, #7
 8008104:	440b      	add	r3, r1
 8008106:	3384      	adds	r3, #132	@ 0x84
 8008108:	4619      	mov	r1, r3
 800810a:	4b58      	ldr	r3, [pc, #352]	@ (800826c <LTDC_SetConfig+0x32c>)
 800810c:	4013      	ands	r3, r2
 800810e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	69da      	ldr	r2, [r3, #28]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	68f9      	ldr	r1, [r7, #12]
 800811a:	6809      	ldr	r1, [r1, #0]
 800811c:	4608      	mov	r0, r1
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	01c9      	lsls	r1, r1, #7
 8008122:	4401      	add	r1, r0
 8008124:	3184      	adds	r1, #132	@ 0x84
 8008126:	4313      	orrs	r3, r2
 8008128:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	01db      	lsls	r3, r3, #7
 8008134:	4413      	add	r3, r2
 8008136:	3384      	adds	r3, #132	@ 0x84
 8008138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	01db      	lsls	r3, r3, #7
 8008144:	4413      	add	r3, r2
 8008146:	3384      	adds	r3, #132	@ 0x84
 8008148:	461a      	mov	r2, r3
 800814a:	2300      	movs	r3, #0
 800814c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	01db      	lsls	r3, r3, #7
 8008158:	4413      	add	r3, r2
 800815a:	3384      	adds	r3, #132	@ 0x84
 800815c:	461a      	mov	r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008162:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d102      	bne.n	8008172 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800816c:	2304      	movs	r3, #4
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	e01b      	b.n	80081aa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d102      	bne.n	8008180 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800817a:	2303      	movs	r3, #3
 800817c:	61fb      	str	r3, [r7, #28]
 800817e:	e014      	b.n	80081aa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b04      	cmp	r3, #4
 8008186:	d00b      	beq.n	80081a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800818c:	2b02      	cmp	r3, #2
 800818e:	d007      	beq.n	80081a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008194:	2b03      	cmp	r3, #3
 8008196:	d003      	beq.n	80081a0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800819c:	2b07      	cmp	r3, #7
 800819e:	d102      	bne.n	80081a6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80081a0:	2302      	movs	r3, #2
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	e001      	b.n	80081aa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80081a6:	2301      	movs	r3, #1
 80081a8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	461a      	mov	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	01db      	lsls	r3, r3, #7
 80081b4:	4413      	add	r3, r2
 80081b6:	3384      	adds	r3, #132	@ 0x84
 80081b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	4611      	mov	r1, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	01d2      	lsls	r2, r2, #7
 80081c4:	440a      	add	r2, r1
 80081c6:	3284      	adds	r2, #132	@ 0x84
 80081c8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80081cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	fb02 f303 	mul.w	r3, r2, r3
 80081d8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6859      	ldr	r1, [r3, #4]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	1acb      	subs	r3, r1, r3
 80081e4:	69f9      	ldr	r1, [r7, #28]
 80081e6:	fb01 f303 	mul.w	r3, r1, r3
 80081ea:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80081ec:	68f9      	ldr	r1, [r7, #12]
 80081ee:	6809      	ldr	r1, [r1, #0]
 80081f0:	4608      	mov	r0, r1
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	01c9      	lsls	r1, r1, #7
 80081f6:	4401      	add	r1, r0
 80081f8:	3184      	adds	r1, #132	@ 0x84
 80081fa:	4313      	orrs	r3, r2
 80081fc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	01db      	lsls	r3, r3, #7
 8008208:	4413      	add	r3, r2
 800820a:	3384      	adds	r3, #132	@ 0x84
 800820c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4619      	mov	r1, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	01db      	lsls	r3, r3, #7
 8008218:	440b      	add	r3, r1
 800821a:	3384      	adds	r3, #132	@ 0x84
 800821c:	4619      	mov	r1, r3
 800821e:	4b14      	ldr	r3, [pc, #80]	@ (8008270 <LTDC_SetConfig+0x330>)
 8008220:	4013      	ands	r3, r2
 8008222:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	461a      	mov	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	01db      	lsls	r3, r3, #7
 800822e:	4413      	add	r3, r2
 8008230:	3384      	adds	r3, #132	@ 0x84
 8008232:	461a      	mov	r2, r3
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	01db      	lsls	r3, r3, #7
 8008244:	4413      	add	r3, r2
 8008246:	3384      	adds	r3, #132	@ 0x84
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	4611      	mov	r1, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	01d2      	lsls	r2, r2, #7
 8008254:	440a      	add	r2, r1
 8008256:	3284      	adds	r2, #132	@ 0x84
 8008258:	f043 0301 	orr.w	r3, r3, #1
 800825c:	6013      	str	r3, [r2, #0]
}
 800825e:	bf00      	nop
 8008260:	3724      	adds	r7, #36	@ 0x24
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	fffff8f8 	.word	0xfffff8f8
 8008270:	fffff800 	.word	0xfffff800

08008274 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008278:	4b05      	ldr	r3, [pc, #20]	@ (8008290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a04      	ldr	r2, [pc, #16]	@ (8008290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800827e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008282:	6013      	str	r3, [r2, #0]
}
 8008284:	bf00      	nop
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40007000 	.word	0x40007000

08008294 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800829e:	4b23      	ldr	r3, [pc, #140]	@ (800832c <HAL_PWREx_EnableOverDrive+0x98>)
 80082a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a2:	4a22      	ldr	r2, [pc, #136]	@ (800832c <HAL_PWREx_EnableOverDrive+0x98>)
 80082a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80082aa:	4b20      	ldr	r3, [pc, #128]	@ (800832c <HAL_PWREx_EnableOverDrive+0x98>)
 80082ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a1d      	ldr	r2, [pc, #116]	@ (8008330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082c2:	f7fd f819 	bl	80052f8 <HAL_GetTick>
 80082c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082c8:	e009      	b.n	80082de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082ca:	f7fd f815 	bl	80052f8 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082d8:	d901      	bls.n	80082de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e022      	b.n	8008324 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082de:	4b14      	ldr	r3, [pc, #80]	@ (8008330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ea:	d1ee      	bne.n	80082ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80082ec:	4b10      	ldr	r3, [pc, #64]	@ (8008330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a0f      	ldr	r2, [pc, #60]	@ (8008330 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082f8:	f7fc fffe 	bl	80052f8 <HAL_GetTick>
 80082fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80082fe:	e009      	b.n	8008314 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008300:	f7fc fffa 	bl	80052f8 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800830e:	d901      	bls.n	8008314 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e007      	b.n	8008324 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008314:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800831c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008320:	d1ee      	bne.n	8008300 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40023800 	.word	0x40023800
 8008330:	40007000 	.word	0x40007000

08008334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800833c:	2300      	movs	r3, #0
 800833e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e291      	b.n	800886e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 8087 	beq.w	8008466 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008358:	4b96      	ldr	r3, [pc, #600]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 030c 	and.w	r3, r3, #12
 8008360:	2b04      	cmp	r3, #4
 8008362:	d00c      	beq.n	800837e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008364:	4b93      	ldr	r3, [pc, #588]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f003 030c 	and.w	r3, r3, #12
 800836c:	2b08      	cmp	r3, #8
 800836e:	d112      	bne.n	8008396 <HAL_RCC_OscConfig+0x62>
 8008370:	4b90      	ldr	r3, [pc, #576]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800837c:	d10b      	bne.n	8008396 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800837e:	4b8d      	ldr	r3, [pc, #564]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d06c      	beq.n	8008464 <HAL_RCC_OscConfig+0x130>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d168      	bne.n	8008464 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	e26b      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800839e:	d106      	bne.n	80083ae <HAL_RCC_OscConfig+0x7a>
 80083a0:	4b84      	ldr	r3, [pc, #528]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a83      	ldr	r2, [pc, #524]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	e02e      	b.n	800840c <HAL_RCC_OscConfig+0xd8>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10c      	bne.n	80083d0 <HAL_RCC_OscConfig+0x9c>
 80083b6:	4b7f      	ldr	r3, [pc, #508]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a7e      	ldr	r2, [pc, #504]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083c0:	6013      	str	r3, [r2, #0]
 80083c2:	4b7c      	ldr	r3, [pc, #496]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a7b      	ldr	r2, [pc, #492]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	e01d      	b.n	800840c <HAL_RCC_OscConfig+0xd8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083d8:	d10c      	bne.n	80083f4 <HAL_RCC_OscConfig+0xc0>
 80083da:	4b76      	ldr	r3, [pc, #472]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a75      	ldr	r2, [pc, #468]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	4b73      	ldr	r3, [pc, #460]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a72      	ldr	r2, [pc, #456]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	e00b      	b.n	800840c <HAL_RCC_OscConfig+0xd8>
 80083f4:	4b6f      	ldr	r3, [pc, #444]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a6e      	ldr	r2, [pc, #440]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80083fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083fe:	6013      	str	r3, [r2, #0]
 8008400:	4b6c      	ldr	r3, [pc, #432]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a6b      	ldr	r2, [pc, #428]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800840a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d013      	beq.n	800843c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008414:	f7fc ff70 	bl	80052f8 <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800841c:	f7fc ff6c 	bl	80052f8 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b64      	cmp	r3, #100	@ 0x64
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e21f      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800842e:	4b61      	ldr	r3, [pc, #388]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0f0      	beq.n	800841c <HAL_RCC_OscConfig+0xe8>
 800843a:	e014      	b.n	8008466 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843c:	f7fc ff5c 	bl	80052f8 <HAL_GetTick>
 8008440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008444:	f7fc ff58 	bl	80052f8 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b64      	cmp	r3, #100	@ 0x64
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e20b      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008456:	4b57      	ldr	r3, [pc, #348]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f0      	bne.n	8008444 <HAL_RCC_OscConfig+0x110>
 8008462:	e000      	b.n	8008466 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	2b00      	cmp	r3, #0
 8008470:	d069      	beq.n	8008546 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008472:	4b50      	ldr	r3, [pc, #320]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	f003 030c 	and.w	r3, r3, #12
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00b      	beq.n	8008496 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800847e:	4b4d      	ldr	r3, [pc, #308]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 030c 	and.w	r3, r3, #12
 8008486:	2b08      	cmp	r3, #8
 8008488:	d11c      	bne.n	80084c4 <HAL_RCC_OscConfig+0x190>
 800848a:	4b4a      	ldr	r3, [pc, #296]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d116      	bne.n	80084c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008496:	4b47      	ldr	r3, [pc, #284]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <HAL_RCC_OscConfig+0x17a>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d001      	beq.n	80084ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e1df      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ae:	4b41      	ldr	r3, [pc, #260]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	493d      	ldr	r1, [pc, #244]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084c2:	e040      	b.n	8008546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d023      	beq.n	8008514 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084cc:	4b39      	ldr	r3, [pc, #228]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a38      	ldr	r2, [pc, #224]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80084d2:	f043 0301 	orr.w	r3, r3, #1
 80084d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d8:	f7fc ff0e 	bl	80052f8 <HAL_GetTick>
 80084dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084de:	e008      	b.n	80084f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084e0:	f7fc ff0a 	bl	80052f8 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e1bd      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084f2:	4b30      	ldr	r3, [pc, #192]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0f0      	beq.n	80084e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084fe:	4b2d      	ldr	r3, [pc, #180]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	4929      	ldr	r1, [pc, #164]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 800850e:	4313      	orrs	r3, r2
 8008510:	600b      	str	r3, [r1, #0]
 8008512:	e018      	b.n	8008546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008514:	4b27      	ldr	r3, [pc, #156]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a26      	ldr	r2, [pc, #152]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 800851a:	f023 0301 	bic.w	r3, r3, #1
 800851e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008520:	f7fc feea 	bl	80052f8 <HAL_GetTick>
 8008524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008528:	f7fc fee6 	bl	80052f8 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e199      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800853a:	4b1e      	ldr	r3, [pc, #120]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1f0      	bne.n	8008528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0308 	and.w	r3, r3, #8
 800854e:	2b00      	cmp	r3, #0
 8008550:	d038      	beq.n	80085c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d019      	beq.n	800858e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800855a:	4b16      	ldr	r3, [pc, #88]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 800855c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800855e:	4a15      	ldr	r2, [pc, #84]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008560:	f043 0301 	orr.w	r3, r3, #1
 8008564:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008566:	f7fc fec7 	bl	80052f8 <HAL_GetTick>
 800856a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800856c:	e008      	b.n	8008580 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800856e:	f7fc fec3 	bl	80052f8 <HAL_GetTick>
 8008572:	4602      	mov	r2, r0
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b02      	cmp	r3, #2
 800857a:	d901      	bls.n	8008580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e176      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008580:	4b0c      	ldr	r3, [pc, #48]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d0f0      	beq.n	800856e <HAL_RCC_OscConfig+0x23a>
 800858c:	e01a      	b.n	80085c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800858e:	4b09      	ldr	r3, [pc, #36]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008592:	4a08      	ldr	r2, [pc, #32]	@ (80085b4 <HAL_RCC_OscConfig+0x280>)
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800859a:	f7fc fead 	bl	80052f8 <HAL_GetTick>
 800859e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085a0:	e00a      	b.n	80085b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085a2:	f7fc fea9 	bl	80052f8 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d903      	bls.n	80085b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e15c      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
 80085b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085b8:	4b91      	ldr	r3, [pc, #580]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80085ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1ee      	bne.n	80085a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0304 	and.w	r3, r3, #4
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80a4 	beq.w	800871a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085d2:	4b8b      	ldr	r3, [pc, #556]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80085d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10d      	bne.n	80085fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80085de:	4b88      	ldr	r3, [pc, #544]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80085e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e2:	4a87      	ldr	r2, [pc, #540]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80085e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80085ea:	4b85      	ldr	r3, [pc, #532]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085f2:	60bb      	str	r3, [r7, #8]
 80085f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085f6:	2301      	movs	r3, #1
 80085f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085fa:	4b82      	ldr	r3, [pc, #520]	@ (8008804 <HAL_RCC_OscConfig+0x4d0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008602:	2b00      	cmp	r3, #0
 8008604:	d118      	bne.n	8008638 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008606:	4b7f      	ldr	r3, [pc, #508]	@ (8008804 <HAL_RCC_OscConfig+0x4d0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a7e      	ldr	r2, [pc, #504]	@ (8008804 <HAL_RCC_OscConfig+0x4d0>)
 800860c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008612:	f7fc fe71 	bl	80052f8 <HAL_GetTick>
 8008616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008618:	e008      	b.n	800862c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800861a:	f7fc fe6d 	bl	80052f8 <HAL_GetTick>
 800861e:	4602      	mov	r2, r0
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b64      	cmp	r3, #100	@ 0x64
 8008626:	d901      	bls.n	800862c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e120      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800862c:	4b75      	ldr	r3, [pc, #468]	@ (8008804 <HAL_RCC_OscConfig+0x4d0>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0f0      	beq.n	800861a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d106      	bne.n	800864e <HAL_RCC_OscConfig+0x31a>
 8008640:	4b6f      	ldr	r3, [pc, #444]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008644:	4a6e      	ldr	r2, [pc, #440]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008646:	f043 0301 	orr.w	r3, r3, #1
 800864a:	6713      	str	r3, [r2, #112]	@ 0x70
 800864c:	e02d      	b.n	80086aa <HAL_RCC_OscConfig+0x376>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10c      	bne.n	8008670 <HAL_RCC_OscConfig+0x33c>
 8008656:	4b6a      	ldr	r3, [pc, #424]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800865a:	4a69      	ldr	r2, [pc, #420]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 800865c:	f023 0301 	bic.w	r3, r3, #1
 8008660:	6713      	str	r3, [r2, #112]	@ 0x70
 8008662:	4b67      	ldr	r3, [pc, #412]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008666:	4a66      	ldr	r2, [pc, #408]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008668:	f023 0304 	bic.w	r3, r3, #4
 800866c:	6713      	str	r3, [r2, #112]	@ 0x70
 800866e:	e01c      	b.n	80086aa <HAL_RCC_OscConfig+0x376>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	2b05      	cmp	r3, #5
 8008676:	d10c      	bne.n	8008692 <HAL_RCC_OscConfig+0x35e>
 8008678:	4b61      	ldr	r3, [pc, #388]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 800867a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800867c:	4a60      	ldr	r2, [pc, #384]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 800867e:	f043 0304 	orr.w	r3, r3, #4
 8008682:	6713      	str	r3, [r2, #112]	@ 0x70
 8008684:	4b5e      	ldr	r3, [pc, #376]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008688:	4a5d      	ldr	r2, [pc, #372]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 800868a:	f043 0301 	orr.w	r3, r3, #1
 800868e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008690:	e00b      	b.n	80086aa <HAL_RCC_OscConfig+0x376>
 8008692:	4b5b      	ldr	r3, [pc, #364]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008696:	4a5a      	ldr	r2, [pc, #360]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008698:	f023 0301 	bic.w	r3, r3, #1
 800869c:	6713      	str	r3, [r2, #112]	@ 0x70
 800869e:	4b58      	ldr	r3, [pc, #352]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80086a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a2:	4a57      	ldr	r2, [pc, #348]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80086a4:	f023 0304 	bic.w	r3, r3, #4
 80086a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d015      	beq.n	80086de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b2:	f7fc fe21 	bl	80052f8 <HAL_GetTick>
 80086b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086b8:	e00a      	b.n	80086d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ba:	f7fc fe1d 	bl	80052f8 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e0ce      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d0:	4b4b      	ldr	r3, [pc, #300]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80086d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0ee      	beq.n	80086ba <HAL_RCC_OscConfig+0x386>
 80086dc:	e014      	b.n	8008708 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086de:	f7fc fe0b 	bl	80052f8 <HAL_GetTick>
 80086e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086e4:	e00a      	b.n	80086fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086e6:	f7fc fe07 	bl	80052f8 <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d901      	bls.n	80086fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e0b8      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086fc:	4b40      	ldr	r3, [pc, #256]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80086fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1ee      	bne.n	80086e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d105      	bne.n	800871a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800870e:	4b3c      	ldr	r3, [pc, #240]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008712:	4a3b      	ldr	r2, [pc, #236]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008714:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008718:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 80a4 	beq.w	800886c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008724:	4b36      	ldr	r3, [pc, #216]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f003 030c 	and.w	r3, r3, #12
 800872c:	2b08      	cmp	r3, #8
 800872e:	d06b      	beq.n	8008808 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d149      	bne.n	80087cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008738:	4b31      	ldr	r3, [pc, #196]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a30      	ldr	r2, [pc, #192]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 800873e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008744:	f7fc fdd8 	bl	80052f8 <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800874c:	f7fc fdd4 	bl	80052f8 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e087      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800875e:	4b28      	ldr	r3, [pc, #160]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69da      	ldr	r2, [r3, #28]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	019b      	lsls	r3, r3, #6
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	3b01      	subs	r3, #1
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	4313      	orrs	r3, r2
 8008790:	4a1b      	ldr	r2, [pc, #108]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 8008792:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008796:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008798:	4b19      	ldr	r3, [pc, #100]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a18      	ldr	r2, [pc, #96]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 800879e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a4:	f7fc fda8 	bl	80052f8 <HAL_GetTick>
 80087a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087aa:	e008      	b.n	80087be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ac:	f7fc fda4 	bl	80052f8 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d901      	bls.n	80087be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e057      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087be:	4b10      	ldr	r3, [pc, #64]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0f0      	beq.n	80087ac <HAL_RCC_OscConfig+0x478>
 80087ca:	e04f      	b.n	800886c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a0b      	ldr	r2, [pc, #44]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80087d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d8:	f7fc fd8e 	bl	80052f8 <HAL_GetTick>
 80087dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087de:	e008      	b.n	80087f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087e0:	f7fc fd8a 	bl	80052f8 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e03d      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087f2:	4b03      	ldr	r3, [pc, #12]	@ (8008800 <HAL_RCC_OscConfig+0x4cc>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1f0      	bne.n	80087e0 <HAL_RCC_OscConfig+0x4ac>
 80087fe:	e035      	b.n	800886c <HAL_RCC_OscConfig+0x538>
 8008800:	40023800 	.word	0x40023800
 8008804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008808:	4b1b      	ldr	r3, [pc, #108]	@ (8008878 <HAL_RCC_OscConfig+0x544>)
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d028      	beq.n	8008868 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008820:	429a      	cmp	r2, r3
 8008822:	d121      	bne.n	8008868 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800882e:	429a      	cmp	r2, r3
 8008830:	d11a      	bne.n	8008868 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008838:	4013      	ands	r3, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800883e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008840:	4293      	cmp	r3, r2
 8008842:	d111      	bne.n	8008868 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	3b01      	subs	r3, #1
 8008852:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008854:	429a      	cmp	r2, r3
 8008856:	d107      	bne.n	8008868 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008862:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008864:	429a      	cmp	r2, r3
 8008866:	d001      	beq.n	800886c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	40023800 	.word	0x40023800

0800887c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0d0      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008894:	4b6a      	ldr	r3, [pc, #424]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d910      	bls.n	80088c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088a2:	4b67      	ldr	r3, [pc, #412]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f023 020f 	bic.w	r2, r3, #15
 80088aa:	4965      	ldr	r1, [pc, #404]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088b2:	4b63      	ldr	r3, [pc, #396]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d001      	beq.n	80088c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e0b8      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d020      	beq.n	8008912 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088dc:	4b59      	ldr	r3, [pc, #356]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	4a58      	ldr	r2, [pc, #352]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 80088e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80088e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0308 	and.w	r3, r3, #8
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d005      	beq.n	8008900 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088f4:	4b53      	ldr	r3, [pc, #332]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	4a52      	ldr	r2, [pc, #328]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 80088fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80088fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008900:	4b50      	ldr	r3, [pc, #320]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	494d      	ldr	r1, [pc, #308]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 800890e:	4313      	orrs	r3, r2
 8008910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d040      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d107      	bne.n	8008936 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008926:	4b47      	ldr	r3, [pc, #284]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d115      	bne.n	800895e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e07f      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	2b02      	cmp	r3, #2
 800893c:	d107      	bne.n	800894e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800893e:	4b41      	ldr	r3, [pc, #260]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e073      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800894e:	4b3d      	ldr	r3, [pc, #244]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e06b      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800895e:	4b39      	ldr	r3, [pc, #228]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f023 0203 	bic.w	r2, r3, #3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	4936      	ldr	r1, [pc, #216]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 800896c:	4313      	orrs	r3, r2
 800896e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008970:	f7fc fcc2 	bl	80052f8 <HAL_GetTick>
 8008974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008976:	e00a      	b.n	800898e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008978:	f7fc fcbe 	bl	80052f8 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008986:	4293      	cmp	r3, r2
 8008988:	d901      	bls.n	800898e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e053      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800898e:	4b2d      	ldr	r3, [pc, #180]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 020c 	and.w	r2, r3, #12
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	429a      	cmp	r2, r3
 800899e:	d1eb      	bne.n	8008978 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089a0:	4b27      	ldr	r3, [pc, #156]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d210      	bcs.n	80089d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ae:	4b24      	ldr	r3, [pc, #144]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f023 020f 	bic.w	r2, r3, #15
 80089b6:	4922      	ldr	r1, [pc, #136]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089be:	4b20      	ldr	r3, [pc, #128]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d001      	beq.n	80089d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e032      	b.n	8008a36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d008      	beq.n	80089ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089dc:	4b19      	ldr	r3, [pc, #100]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	4916      	ldr	r1, [pc, #88]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0308 	and.w	r3, r3, #8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80089fa:	4b12      	ldr	r3, [pc, #72]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	490e      	ldr	r1, [pc, #56]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a0e:	f000 f821 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 8008a12:	4602      	mov	r2, r0
 8008a14:	4b0b      	ldr	r3, [pc, #44]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	091b      	lsrs	r3, r3, #4
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	490a      	ldr	r1, [pc, #40]	@ (8008a48 <HAL_RCC_ClockConfig+0x1cc>)
 8008a20:	5ccb      	ldrb	r3, [r1, r3]
 8008a22:	fa22 f303 	lsr.w	r3, r2, r3
 8008a26:	4a09      	ldr	r2, [pc, #36]	@ (8008a4c <HAL_RCC_ClockConfig+0x1d0>)
 8008a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a2a:	4b09      	ldr	r3, [pc, #36]	@ (8008a50 <HAL_RCC_ClockConfig+0x1d4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fb febe 	bl	80047b0 <HAL_InitTick>

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	40023c00 	.word	0x40023c00
 8008a44:	40023800 	.word	0x40023800
 8008a48:	0801ca24 	.word	0x0801ca24
 8008a4c:	2000004c 	.word	0x2000004c
 8008a50:	20000050 	.word	0x20000050

08008a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a58:	b090      	sub	sp, #64	@ 0x40
 8008a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a60:	2300      	movs	r3, #0
 8008a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a64:	2300      	movs	r3, #0
 8008a66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a6c:	4b59      	ldr	r3, [pc, #356]	@ (8008bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a6e:	689b      	ldr	r3, [r3, #8]
 8008a70:	f003 030c 	and.w	r3, r3, #12
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d00d      	beq.n	8008a94 <HAL_RCC_GetSysClockFreq+0x40>
 8008a78:	2b08      	cmp	r3, #8
 8008a7a:	f200 80a1 	bhi.w	8008bc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <HAL_RCC_GetSysClockFreq+0x34>
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d003      	beq.n	8008a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8008a86:	e09b      	b.n	8008bc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a88:	4b53      	ldr	r3, [pc, #332]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8008a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008a8c:	e09b      	b.n	8008bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a8e:	4b53      	ldr	r3, [pc, #332]	@ (8008bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8008a90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008a92:	e098      	b.n	8008bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a94:	4b4f      	ldr	r3, [pc, #316]	@ (8008bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8008bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d028      	beq.n	8008afc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8008bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	099b      	lsrs	r3, r3, #6
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	623b      	str	r3, [r7, #32]
 8008ab4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ab6:	6a3b      	ldr	r3, [r7, #32]
 8008ab8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008abc:	2100      	movs	r1, #0
 8008abe:	4b47      	ldr	r3, [pc, #284]	@ (8008bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8008ac0:	fb03 f201 	mul.w	r2, r3, r1
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	fb00 f303 	mul.w	r3, r0, r3
 8008aca:	4413      	add	r3, r2
 8008acc:	4a43      	ldr	r2, [pc, #268]	@ (8008bdc <HAL_RCC_GetSysClockFreq+0x188>)
 8008ace:	fba0 1202 	umull	r1, r2, r0, r2
 8008ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ad4:	460a      	mov	r2, r1
 8008ad6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ada:	4413      	add	r3, r2
 8008adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	61bb      	str	r3, [r7, #24]
 8008ae4:	61fa      	str	r2, [r7, #28]
 8008ae6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008aee:	f7f7 fbdf 	bl	80002b0 <__aeabi_uldivmod>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4613      	mov	r3, r2
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008afa:	e053      	b.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008afc:	4b35      	ldr	r3, [pc, #212]	@ (8008bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	099b      	lsrs	r3, r3, #6
 8008b02:	2200      	movs	r2, #0
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	617a      	str	r2, [r7, #20]
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008b0e:	f04f 0b00 	mov.w	fp, #0
 8008b12:	4652      	mov	r2, sl
 8008b14:	465b      	mov	r3, fp
 8008b16:	f04f 0000 	mov.w	r0, #0
 8008b1a:	f04f 0100 	mov.w	r1, #0
 8008b1e:	0159      	lsls	r1, r3, #5
 8008b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b24:	0150      	lsls	r0, r2, #5
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	ebb2 080a 	subs.w	r8, r2, sl
 8008b2e:	eb63 090b 	sbc.w	r9, r3, fp
 8008b32:	f04f 0200 	mov.w	r2, #0
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b46:	ebb2 0408 	subs.w	r4, r2, r8
 8008b4a:	eb63 0509 	sbc.w	r5, r3, r9
 8008b4e:	f04f 0200 	mov.w	r2, #0
 8008b52:	f04f 0300 	mov.w	r3, #0
 8008b56:	00eb      	lsls	r3, r5, #3
 8008b58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b5c:	00e2      	lsls	r2, r4, #3
 8008b5e:	4614      	mov	r4, r2
 8008b60:	461d      	mov	r5, r3
 8008b62:	eb14 030a 	adds.w	r3, r4, sl
 8008b66:	603b      	str	r3, [r7, #0]
 8008b68:	eb45 030b 	adc.w	r3, r5, fp
 8008b6c:	607b      	str	r3, [r7, #4]
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	f04f 0300 	mov.w	r3, #0
 8008b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b7a:	4629      	mov	r1, r5
 8008b7c:	028b      	lsls	r3, r1, #10
 8008b7e:	4621      	mov	r1, r4
 8008b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b84:	4621      	mov	r1, r4
 8008b86:	028a      	lsls	r2, r1, #10
 8008b88:	4610      	mov	r0, r2
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8e:	2200      	movs	r2, #0
 8008b90:	60bb      	str	r3, [r7, #8]
 8008b92:	60fa      	str	r2, [r7, #12]
 8008b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b98:	f7f7 fb8a 	bl	80002b0 <__aeabi_uldivmod>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	3301      	adds	r3, #1
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008bb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bbe:	e002      	b.n	8008bc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bc0:	4b05      	ldr	r3, [pc, #20]	@ (8008bd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8008bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3740      	adds	r7, #64	@ 0x40
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40023800 	.word	0x40023800
 8008bd8:	00f42400 	.word	0x00f42400
 8008bdc:	017d7840 	.word	0x017d7840

08008be0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008be4:	4b03      	ldr	r3, [pc, #12]	@ (8008bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008be6:	681b      	ldr	r3, [r3, #0]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	2000004c 	.word	0x2000004c

08008bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008bfc:	f7ff fff0 	bl	8008be0 <HAL_RCC_GetHCLKFreq>
 8008c00:	4602      	mov	r2, r0
 8008c02:	4b05      	ldr	r3, [pc, #20]	@ (8008c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	0a9b      	lsrs	r3, r3, #10
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	4903      	ldr	r1, [pc, #12]	@ (8008c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c0e:	5ccb      	ldrb	r3, [r1, r3]
 8008c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40023800 	.word	0x40023800
 8008c1c:	0801ca34 	.word	0x0801ca34

08008c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c24:	f7ff ffdc 	bl	8008be0 <HAL_RCC_GetHCLKFreq>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	4b05      	ldr	r3, [pc, #20]	@ (8008c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	0b5b      	lsrs	r3, r3, #13
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	4903      	ldr	r1, [pc, #12]	@ (8008c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c36:	5ccb      	ldrb	r3, [r1, r3]
 8008c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	40023800 	.word	0x40023800
 8008c44:	0801ca34 	.word	0x0801ca34

08008c48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	220f      	movs	r2, #15
 8008c56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c58:	4b12      	ldr	r3, [pc, #72]	@ (8008ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f003 0203 	and.w	r2, r3, #3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008c64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008c70:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008c7c:	4b09      	ldr	r3, [pc, #36]	@ (8008ca4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	08db      	lsrs	r3, r3, #3
 8008c82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c8a:	4b07      	ldr	r3, [pc, #28]	@ (8008ca8 <HAL_RCC_GetClockConfig+0x60>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f003 020f 	and.w	r2, r3, #15
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	601a      	str	r2, [r3, #0]
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	40023800 	.word	0x40023800
 8008ca8:	40023c00 	.word	0x40023c00

08008cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d012      	beq.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008cd4:	4b69      	ldr	r3, [pc, #420]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	4a68      	ldr	r2, [pc, #416]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cda:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008cde:	6093      	str	r3, [r2, #8]
 8008ce0:	4b66      	ldr	r3, [pc, #408]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ce8:	4964      	ldr	r1, [pc, #400]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d017      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d06:	4b5d      	ldr	r3, [pc, #372]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d0c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d14:	4959      	ldr	r1, [pc, #356]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d24:	d101      	bne.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008d26:	2301      	movs	r3, #1
 8008d28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008d32:	2301      	movs	r3, #1
 8008d34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d017      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008d42:	4b4e      	ldr	r3, [pc, #312]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d50:	494a      	ldr	r1, [pc, #296]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d60:	d101      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008d62:	2301      	movs	r3, #1
 8008d64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 808b 	beq.w	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d90:	4b3a      	ldr	r3, [pc, #232]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d94:	4a39      	ldr	r2, [pc, #228]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d9c:	4b37      	ldr	r3, [pc, #220]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008da4:	60bb      	str	r3, [r7, #8]
 8008da6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008da8:	4b35      	ldr	r3, [pc, #212]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a34      	ldr	r2, [pc, #208]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008db2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008db4:	f7fc faa0 	bl	80052f8 <HAL_GetTick>
 8008db8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008dba:	e008      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dbc:	f7fc fa9c 	bl	80052f8 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	2b64      	cmp	r3, #100	@ 0x64
 8008dc8:	d901      	bls.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e357      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008dce:	4b2c      	ldr	r3, [pc, #176]	@ (8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0f0      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008dda:	4b28      	ldr	r3, [pc, #160]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008de2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d035      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d02e      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008df8:	4b20      	ldr	r3, [pc, #128]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e02:	4b1e      	ldr	r3, [pc, #120]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e06:	4a1d      	ldr	r2, [pc, #116]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e0c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e12:	4a1a      	ldr	r2, [pc, #104]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008e1a:	4a18      	ldr	r2, [pc, #96]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008e20:	4b16      	ldr	r3, [pc, #88]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d114      	bne.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e2c:	f7fc fa64 	bl	80052f8 <HAL_GetTick>
 8008e30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e32:	e00a      	b.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e34:	f7fc fa60 	bl	80052f8 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e319      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0ee      	beq.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e62:	d111      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008e64:	4b05      	ldr	r3, [pc, #20]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008e70:	4b04      	ldr	r3, [pc, #16]	@ (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008e72:	400b      	ands	r3, r1
 8008e74:	4901      	ldr	r1, [pc, #4]	@ (8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	608b      	str	r3, [r1, #8]
 8008e7a:	e00b      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	40007000 	.word	0x40007000
 8008e84:	0ffffcff 	.word	0x0ffffcff
 8008e88:	4baa      	ldr	r3, [pc, #680]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	4aa9      	ldr	r2, [pc, #676]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e8e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008e92:	6093      	str	r3, [r2, #8]
 8008e94:	4ba7      	ldr	r3, [pc, #668]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008e96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ea0:	49a4      	ldr	r1, [pc, #656]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0310 	and.w	r3, r3, #16
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d010      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008eb2:	4ba0      	ldr	r3, [pc, #640]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008eb8:	4a9e      	ldr	r2, [pc, #632]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ebe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008ec2:	4b9c      	ldr	r3, [pc, #624]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ec4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ecc:	4999      	ldr	r1, [pc, #612]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00a      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ee0:	4b94      	ldr	r3, [pc, #592]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eee:	4991      	ldr	r1, [pc, #580]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00a      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f02:	4b8c      	ldr	r3, [pc, #560]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f10:	4988      	ldr	r1, [pc, #544]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f24:	4b83      	ldr	r3, [pc, #524]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f32:	4980      	ldr	r1, [pc, #512]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f46:	4b7b      	ldr	r3, [pc, #492]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f54:	4977      	ldr	r1, [pc, #476]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f68:	4b72      	ldr	r3, [pc, #456]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f6e:	f023 0203 	bic.w	r2, r3, #3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f76:	496f      	ldr	r1, [pc, #444]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f90:	f023 020c 	bic.w	r2, r3, #12
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f98:	4966      	ldr	r1, [pc, #408]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008fac:	4b61      	ldr	r3, [pc, #388]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fb2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fba:	495e      	ldr	r1, [pc, #376]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fce:	4b59      	ldr	r3, [pc, #356]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fdc:	4955      	ldr	r1, [pc, #340]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00a      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ff0:	4b50      	ldr	r3, [pc, #320]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ffe:	494d      	ldr	r1, [pc, #308]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009000:	4313      	orrs	r3, r2
 8009002:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009012:	4b48      	ldr	r3, [pc, #288]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009018:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009020:	4944      	ldr	r1, [pc, #272]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009022:	4313      	orrs	r3, r2
 8009024:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00a      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009034:	4b3f      	ldr	r3, [pc, #252]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800903a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009042:	493c      	ldr	r1, [pc, #240]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009044:	4313      	orrs	r3, r2
 8009046:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00a      	beq.n	800906c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009056:	4b37      	ldr	r3, [pc, #220]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009064:	4933      	ldr	r1, [pc, #204]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009066:	4313      	orrs	r3, r2
 8009068:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00a      	beq.n	800908e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009078:	4b2e      	ldr	r3, [pc, #184]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800907a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009086:	492b      	ldr	r1, [pc, #172]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009088:	4313      	orrs	r3, r2
 800908a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009096:	2b00      	cmp	r3, #0
 8009098:	d011      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800909a:	4b26      	ldr	r3, [pc, #152]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800909c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090a8:	4922      	ldr	r1, [pc, #136]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090b8:	d101      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80090ba:	2301      	movs	r3, #1
 80090bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80090ca:	2301      	movs	r3, #1
 80090cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090da:	4b16      	ldr	r3, [pc, #88]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090e8:	4912      	ldr	r1, [pc, #72]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00b      	beq.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80090fc:	4b0d      	ldr	r3, [pc, #52]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009102:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800910c:	4909      	ldr	r1, [pc, #36]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800910e:	4313      	orrs	r3, r2
 8009110:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d006      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80d9 	beq.w	80092da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009128:	4b02      	ldr	r3, [pc, #8]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a01      	ldr	r2, [pc, #4]	@ (8009134 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800912e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009132:	e001      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009134:	40023800 	.word	0x40023800
 8009138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800913a:	f7fc f8dd 	bl	80052f8 <HAL_GetTick>
 800913e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009140:	e008      	b.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009142:	f7fc f8d9 	bl	80052f8 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b64      	cmp	r3, #100	@ 0x64
 800914e:	d901      	bls.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e194      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009154:	4b6c      	ldr	r3, [pc, #432]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1f0      	bne.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d021      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009170:	2b00      	cmp	r3, #0
 8009172:	d11d      	bne.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009174:	4b64      	ldr	r3, [pc, #400]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800917a:	0c1b      	lsrs	r3, r3, #16
 800917c:	f003 0303 	and.w	r3, r3, #3
 8009180:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009182:	4b61      	ldr	r3, [pc, #388]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009188:	0e1b      	lsrs	r3, r3, #24
 800918a:	f003 030f 	and.w	r3, r3, #15
 800918e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	019a      	lsls	r2, r3, #6
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	431a      	orrs	r2, r3
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	061b      	lsls	r3, r3, #24
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	071b      	lsls	r3, r3, #28
 80091a8:	4957      	ldr	r1, [pc, #348]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d004      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091c4:	d00a      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d02e      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091da:	d129      	bne.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80091dc:	4b4a      	ldr	r3, [pc, #296]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091e2:	0c1b      	lsrs	r3, r3, #16
 80091e4:	f003 0303 	and.w	r3, r3, #3
 80091e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80091ea:	4b47      	ldr	r3, [pc, #284]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091f0:	0f1b      	lsrs	r3, r3, #28
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	019a      	lsls	r2, r3, #6
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	041b      	lsls	r3, r3, #16
 8009202:	431a      	orrs	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	061b      	lsls	r3, r3, #24
 800920a:	431a      	orrs	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	071b      	lsls	r3, r3, #28
 8009210:	493d      	ldr	r1, [pc, #244]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009212:	4313      	orrs	r3, r2
 8009214:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009218:	4b3b      	ldr	r3, [pc, #236]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800921a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800921e:	f023 021f 	bic.w	r2, r3, #31
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009226:	3b01      	subs	r3, #1
 8009228:	4937      	ldr	r1, [pc, #220]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800922a:	4313      	orrs	r3, r2
 800922c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d01d      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800923c:	4b32      	ldr	r3, [pc, #200]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800923e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009242:	0e1b      	lsrs	r3, r3, #24
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800924a:	4b2f      	ldr	r3, [pc, #188]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800924c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009250:	0f1b      	lsrs	r3, r3, #28
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	019a      	lsls	r2, r3, #6
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	431a      	orrs	r2, r3
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	061b      	lsls	r3, r3, #24
 800926a:	431a      	orrs	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	071b      	lsls	r3, r3, #28
 8009270:	4925      	ldr	r1, [pc, #148]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009272:	4313      	orrs	r3, r2
 8009274:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d011      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	019a      	lsls	r2, r3, #6
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	041b      	lsls	r3, r3, #16
 8009290:	431a      	orrs	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	061b      	lsls	r3, r3, #24
 8009298:	431a      	orrs	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	071b      	lsls	r3, r3, #28
 80092a0:	4919      	ldr	r1, [pc, #100]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092a2:	4313      	orrs	r3, r2
 80092a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80092a8:	4b17      	ldr	r3, [pc, #92]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a16      	ldr	r2, [pc, #88]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b4:	f7fc f820 	bl	80052f8 <HAL_GetTick>
 80092b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092ba:	e008      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092bc:	f7fc f81c 	bl	80052f8 <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	2b64      	cmp	r3, #100	@ 0x64
 80092c8:	d901      	bls.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e0d7      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0f0      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	f040 80cd 	bne.w	800947c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80092e2:	4b09      	ldr	r3, [pc, #36]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a08      	ldr	r2, [pc, #32]	@ (8009308 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ee:	f7fc f803 	bl	80052f8 <HAL_GetTick>
 80092f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092f4:	e00a      	b.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80092f6:	f7fb ffff 	bl	80052f8 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b64      	cmp	r3, #100	@ 0x64
 8009302:	d903      	bls.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e0ba      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009308:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800930c:	4b5e      	ldr	r3, [pc, #376]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009318:	d0ed      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d009      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009336:	2b00      	cmp	r3, #0
 8009338:	d02e      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d12a      	bne.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009342:	4b51      	ldr	r3, [pc, #324]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009348:	0c1b      	lsrs	r3, r3, #16
 800934a:	f003 0303 	and.w	r3, r3, #3
 800934e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009350:	4b4d      	ldr	r3, [pc, #308]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009356:	0f1b      	lsrs	r3, r3, #28
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	019a      	lsls	r2, r3, #6
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	431a      	orrs	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	061b      	lsls	r3, r3, #24
 8009370:	431a      	orrs	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	071b      	lsls	r3, r3, #28
 8009376:	4944      	ldr	r1, [pc, #272]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009378:	4313      	orrs	r3, r2
 800937a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800937e:	4b42      	ldr	r3, [pc, #264]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009384:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938c:	3b01      	subs	r3, #1
 800938e:	021b      	lsls	r3, r3, #8
 8009390:	493d      	ldr	r1, [pc, #244]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009392:	4313      	orrs	r3, r2
 8009394:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d022      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093ac:	d11d      	bne.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093ae:	4b36      	ldr	r3, [pc, #216]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b4:	0e1b      	lsrs	r3, r3, #24
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80093bc:	4b32      	ldr	r3, [pc, #200]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c2:	0f1b      	lsrs	r3, r3, #28
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	019a      	lsls	r2, r3, #6
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6a1b      	ldr	r3, [r3, #32]
 80093d4:	041b      	lsls	r3, r3, #16
 80093d6:	431a      	orrs	r2, r3
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	061b      	lsls	r3, r3, #24
 80093dc:	431a      	orrs	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	071b      	lsls	r3, r3, #28
 80093e2:	4929      	ldr	r1, [pc, #164]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0308 	and.w	r3, r3, #8
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d028      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093f6:	4b24      	ldr	r3, [pc, #144]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fc:	0e1b      	lsrs	r3, r3, #24
 80093fe:	f003 030f 	and.w	r3, r3, #15
 8009402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009404:	4b20      	ldr	r3, [pc, #128]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800940a:	0c1b      	lsrs	r3, r3, #16
 800940c:	f003 0303 	and.w	r3, r3, #3
 8009410:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	019a      	lsls	r2, r3, #6
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	041b      	lsls	r3, r3, #16
 800941c:	431a      	orrs	r2, r3
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	061b      	lsls	r3, r3, #24
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	071b      	lsls	r3, r3, #28
 800942a:	4917      	ldr	r1, [pc, #92]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800942c:	4313      	orrs	r3, r2
 800942e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009432:	4b15      	ldr	r3, [pc, #84]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009438:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009440:	4911      	ldr	r1, [pc, #68]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009442:	4313      	orrs	r3, r2
 8009444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009448:	4b0f      	ldr	r3, [pc, #60]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a0e      	ldr	r2, [pc, #56]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800944e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009454:	f7fb ff50 	bl	80052f8 <HAL_GetTick>
 8009458:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800945a:	e008      	b.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800945c:	f7fb ff4c 	bl	80052f8 <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	2b64      	cmp	r3, #100	@ 0x64
 8009468:	d901      	bls.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800946a:	2303      	movs	r3, #3
 800946c:	e007      	b.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800946e:	4b06      	ldr	r3, [pc, #24]	@ (8009488 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800947a:	d1ef      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3720      	adds	r7, #32
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	40023800 	.word	0x40023800

0800948c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e071      	b.n	8009586 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	7f5b      	ldrb	r3, [r3, #29]
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d105      	bne.n	80094b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7f9 fbf8 	bl	8002ca8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	d053      	beq.n	8009574 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	22ca      	movs	r2, #202	@ 0xca
 80094d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2253      	movs	r2, #83	@ 0x53
 80094da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 fac9 	bl	8009a74 <RTC_EnterInitMode>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d12a      	bne.n	8009542 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6899      	ldr	r1, [r3, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	4b26      	ldr	r3, [pc, #152]	@ (8009590 <HAL_RTC_Init+0x104>)
 80094f8:	400b      	ands	r3, r1
 80094fa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6899      	ldr	r1, [r3, #8]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	431a      	orrs	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	430a      	orrs	r2, r1
 8009518:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	68d2      	ldr	r2, [r2, #12]
 8009522:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6919      	ldr	r1, [r3, #16]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	041a      	lsls	r2, r3, #16
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fad2 	bl	8009ae2 <RTC_ExitInitMode>
 800953e:	4603      	mov	r3, r0
 8009540:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d110      	bne.n	800956a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0208 	bic.w	r2, r2, #8
 8009556:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	22ff      	movs	r2, #255	@ 0xff
 8009570:	625a      	str	r2, [r3, #36]	@ 0x24
 8009572:	e001      	b.n	8009578 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d102      	bne.n	8009584 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2201      	movs	r2, #1
 8009582:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	ff8fffbf 	.word	0xff8fffbf

08009594 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009594:	b590      	push	{r4, r7, lr}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	7f1b      	ldrb	r3, [r3, #28]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d101      	bne.n	80095b0 <HAL_RTC_SetTime+0x1c>
 80095ac:	2302      	movs	r3, #2
 80095ae:	e085      	b.n	80096bc <HAL_RTC_SetTime+0x128>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2201      	movs	r2, #1
 80095b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2202      	movs	r2, #2
 80095ba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d126      	bne.n	8009610 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d102      	bne.n	80095d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2200      	movs	r2, #0
 80095d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 faa6 	bl	8009b2c <RTC_ByteToBcd2>
 80095e0:	4603      	mov	r3, r0
 80095e2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fa9f 	bl	8009b2c <RTC_ByteToBcd2>
 80095ee:	4603      	mov	r3, r0
 80095f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80095f2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	789b      	ldrb	r3, [r3, #2]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 fa97 	bl	8009b2c <RTC_ByteToBcd2>
 80095fe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009600:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	78db      	ldrb	r3, [r3, #3]
 8009608:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800960a:	4313      	orrs	r3, r2
 800960c:	617b      	str	r3, [r7, #20]
 800960e:	e018      	b.n	8009642 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d102      	bne.n	8009624 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2200      	movs	r2, #0
 8009622:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009630:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009636:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	78db      	ldrb	r3, [r3, #3]
 800963c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800963e:	4313      	orrs	r3, r2
 8009640:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	22ca      	movs	r2, #202	@ 0xca
 8009648:	625a      	str	r2, [r3, #36]	@ 0x24
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2253      	movs	r2, #83	@ 0x53
 8009650:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009652:	68f8      	ldr	r0, [r7, #12]
 8009654:	f000 fa0e 	bl	8009a74 <RTC_EnterInitMode>
 8009658:	4603      	mov	r3, r0
 800965a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800965c:	7cfb      	ldrb	r3, [r7, #19]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d11e      	bne.n	80096a0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	6979      	ldr	r1, [r7, #20]
 8009668:	4b16      	ldr	r3, [pc, #88]	@ (80096c4 <HAL_RTC_SetTime+0x130>)
 800966a:	400b      	ands	r3, r1
 800966c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	689a      	ldr	r2, [r3, #8]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800967c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	6899      	ldr	r1, [r3, #8]
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	68da      	ldr	r2, [r3, #12]
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	431a      	orrs	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fa23 	bl	8009ae2 <RTC_ExitInitMode>
 800969c:	4603      	mov	r3, r0
 800969e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80096a0:	7cfb      	ldrb	r3, [r7, #19]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2201      	movs	r2, #1
 80096aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	22ff      	movs	r2, #255	@ 0xff
 80096b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2200      	movs	r2, #0
 80096b8:	771a      	strb	r2, [r3, #28]

  return status;
 80096ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80096bc:	4618      	mov	r0, r3
 80096be:	371c      	adds	r7, #28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd90      	pop	{r4, r7, pc}
 80096c4:	007f7f7f 	.word	0x007f7f7f

080096c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80096c8:	b590      	push	{r4, r7, lr}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	7f1b      	ldrb	r3, [r3, #28]
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d101      	bne.n	80096e4 <HAL_RTC_SetDate+0x1c>
 80096e0:	2302      	movs	r3, #2
 80096e2:	e06f      	b.n	80097c4 <HAL_RTC_SetDate+0xfc>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2201      	movs	r2, #1
 80096e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2202      	movs	r2, #2
 80096ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10e      	bne.n	8009714 <HAL_RTC_SetDate+0x4c>
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	785b      	ldrb	r3, [r3, #1]
 80096fa:	f003 0310 	and.w	r3, r3, #16
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d008      	beq.n	8009714 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	785b      	ldrb	r3, [r3, #1]
 8009706:	f023 0310 	bic.w	r3, r3, #16
 800970a:	b2db      	uxtb	r3, r3
 800970c:	330a      	adds	r3, #10
 800970e:	b2da      	uxtb	r2, r3
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d11c      	bne.n	8009754 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	78db      	ldrb	r3, [r3, #3]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fa04 	bl	8009b2c <RTC_ByteToBcd2>
 8009724:	4603      	mov	r3, r0
 8009726:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	785b      	ldrb	r3, [r3, #1]
 800972c:	4618      	mov	r0, r3
 800972e:	f000 f9fd 	bl	8009b2c <RTC_ByteToBcd2>
 8009732:	4603      	mov	r3, r0
 8009734:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009736:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	789b      	ldrb	r3, [r3, #2]
 800973c:	4618      	mov	r0, r3
 800973e:	f000 f9f5 	bl	8009b2c <RTC_ByteToBcd2>
 8009742:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009744:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800974e:	4313      	orrs	r3, r2
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	e00e      	b.n	8009772 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	78db      	ldrb	r3, [r3, #3]
 8009758:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009760:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009766:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800976e:	4313      	orrs	r3, r2
 8009770:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	22ca      	movs	r2, #202	@ 0xca
 8009778:	625a      	str	r2, [r3, #36]	@ 0x24
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2253      	movs	r2, #83	@ 0x53
 8009780:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 f976 	bl	8009a74 <RTC_EnterInitMode>
 8009788:	4603      	mov	r3, r0
 800978a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800978c:	7cfb      	ldrb	r3, [r7, #19]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	6979      	ldr	r1, [r7, #20]
 8009798:	4b0c      	ldr	r3, [pc, #48]	@ (80097cc <HAL_RTC_SetDate+0x104>)
 800979a:	400b      	ands	r3, r1
 800979c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 f99f 	bl	8009ae2 <RTC_ExitInitMode>
 80097a4:	4603      	mov	r3, r0
 80097a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80097a8:	7cfb      	ldrb	r3, [r7, #19]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d102      	bne.n	80097b4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	22ff      	movs	r2, #255	@ 0xff
 80097ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	771a      	strb	r2, [r3, #28]

  return status;
 80097c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	371c      	adds	r7, #28
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd90      	pop	{r4, r7, pc}
 80097cc:	00ffff3f 	.word	0x00ffff3f

080097d0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80097d0:	b590      	push	{r4, r7, lr}
 80097d2:	b089      	sub	sp, #36	@ 0x24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	7f1b      	ldrb	r3, [r3, #28]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d101      	bne.n	80097f4 <HAL_RTC_SetAlarm+0x24>
 80097f0:	2302      	movs	r3, #2
 80097f2:	e113      	b.n	8009a1c <HAL_RTC_SetAlarm+0x24c>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2201      	movs	r2, #1
 80097f8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2202      	movs	r2, #2
 80097fe:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d137      	bne.n	8009876 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009810:	2b00      	cmp	r3, #0
 8009812:	d102      	bne.n	800981a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2200      	movs	r2, #0
 8009818:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 f984 	bl	8009b2c <RTC_ByteToBcd2>
 8009824:	4603      	mov	r3, r0
 8009826:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	785b      	ldrb	r3, [r3, #1]
 800982c:	4618      	mov	r0, r3
 800982e:	f000 f97d 	bl	8009b2c <RTC_ByteToBcd2>
 8009832:	4603      	mov	r3, r0
 8009834:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009836:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	789b      	ldrb	r3, [r3, #2]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 f975 	bl	8009b2c <RTC_ByteToBcd2>
 8009842:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009844:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	78db      	ldrb	r3, [r3, #3]
 800984c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800984e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009858:	4618      	mov	r0, r3
 800985a:	f000 f967 	bl	8009b2c <RTC_ByteToBcd2>
 800985e:	4603      	mov	r3, r0
 8009860:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009862:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800986a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009870:	4313      	orrs	r3, r2
 8009872:	61fb      	str	r3, [r7, #28]
 8009874:	e023      	b.n	80098be <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2200      	movs	r2, #0
 8009888:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	785b      	ldrb	r3, [r3, #1]
 8009894:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009896:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800989c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	78db      	ldrb	r3, [r3, #3]
 80098a2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80098a4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098ac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80098ae:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80098b4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80098ba:	4313      	orrs	r3, r2
 80098bc:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	22ca      	movs	r2, #202	@ 0xca
 80098d0:	625a      	str	r2, [r3, #36]	@ 0x24
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2253      	movs	r2, #83	@ 0x53
 80098d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098e2:	d148      	bne.n	8009976 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689a      	ldr	r2, [r3, #8]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098f2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009902:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	b2da      	uxtb	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009914:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009916:	f7fb fcef 	bl	80052f8 <HAL_GetTick>
 800991a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800991c:	e013      	b.n	8009946 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800991e:	f7fb fceb 	bl	80052f8 <HAL_GetTick>
 8009922:	4602      	mov	r2, r0
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800992c:	d90b      	bls.n	8009946 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	22ff      	movs	r2, #255	@ 0xff
 8009934:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2203      	movs	r2, #3
 800993a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e06a      	b.n	8009a1c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d0e4      	beq.n	800991e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009972:	609a      	str	r2, [r3, #8]
 8009974:	e047      	b.n	8009a06 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009984:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	689a      	ldr	r2, [r3, #8]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009994:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	b2da      	uxtb	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80099a6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80099a8:	f7fb fca6 	bl	80052f8 <HAL_GetTick>
 80099ac:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80099ae:	e013      	b.n	80099d8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099b0:	f7fb fca2 	bl	80052f8 <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	69bb      	ldr	r3, [r7, #24]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80099be:	d90b      	bls.n	80099d8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	22ff      	movs	r2, #255	@ 0xff
 80099c6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2203      	movs	r2, #3
 80099cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80099d4:	2303      	movs	r3, #3
 80099d6:	e021      	b.n	8009a1c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0e4      	beq.n	80099b0 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a04:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	22ff      	movs	r2, #255	@ 0xff
 8009a0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3724      	adds	r7, #36	@ 0x24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd90      	pop	{r4, r7, pc}

08009a24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009a3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a40:	f7fb fc5a 	bl	80052f8 <HAL_GetTick>
 8009a44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a46:	e009      	b.n	8009a5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a48:	f7fb fc56 	bl	80052f8 <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a56:	d901      	bls.n	8009a5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e007      	b.n	8009a6c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0ee      	beq.n	8009a48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009a80:	2300      	movs	r3, #0
 8009a82:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d122      	bne.n	8009ad8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009aa0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009aa2:	f7fb fc29 	bl	80052f8 <HAL_GetTick>
 8009aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009aa8:	e00c      	b.n	8009ac4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009aaa:	f7fb fc25 	bl	80052f8 <HAL_GetTick>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ab8:	d904      	bls.n	8009ac4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2204      	movs	r2, #4
 8009abe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d102      	bne.n	8009ad8 <RTC_EnterInitMode+0x64>
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d1e8      	bne.n	8009aaa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009afc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f003 0320 	and.w	r3, r3, #32
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10a      	bne.n	8009b22 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff ff89 	bl	8009a24 <HAL_RTC_WaitForSynchro>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d004      	beq.n	8009b22 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2204      	movs	r2, #4
 8009b1c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	4603      	mov	r3, r0
 8009b34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009b3a:	e005      	b.n	8009b48 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	3b0a      	subs	r3, #10
 8009b46:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	2b09      	cmp	r3, #9
 8009b4c:	d8f6      	bhi.n	8009b3c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	011b      	lsls	r3, r3, #4
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	79fb      	ldrb	r3, [r7, #7]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	b2db      	uxtb	r3, r3
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3714      	adds	r7, #20
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b087      	sub	sp, #28
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	7f1b      	ldrb	r3, [r3, #28]
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e050      	b.n	8009c26 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0206 	bic.w	r2, r2, #6
 8009b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c34 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	22ca      	movs	r2, #202	@ 0xca
 8009bca:	625a      	str	r2, [r3, #36]	@ 0x24
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2253      	movs	r2, #83	@ 0x53
 8009bd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	697a      	ldr	r2, [r7, #20]
 8009bda:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009bec:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689a      	ldr	r2, [r3, #8]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c0e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	22ff      	movs	r2, #255	@ 0xff
 8009c16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	fffff7f7 	.word	0xfffff7f7

08009c38 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e025      	b.n	8009c98 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7f6 ff59 	bl	8000b18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4619      	mov	r1, r3
 8009c78:	4610      	mov	r0, r2
 8009c7a:	f001 fa33 	bl	800b0e4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	461a      	mov	r2, r3
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	f001 fa87 	bl	800b19c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009cb2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d101      	bne.n	8009cbe <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e021      	b.n	8009d02 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d002      	beq.n	8009cca <HAL_SDRAM_SendCommand+0x2a>
 8009cc4:	7dfb      	ldrb	r3, [r7, #23]
 8009cc6:	2b05      	cmp	r3, #5
 8009cc8:	d118      	bne.n	8009cfc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2202      	movs	r2, #2
 8009cce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 fac8 	bl	800b270 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d104      	bne.n	8009cf2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2205      	movs	r2, #5
 8009cec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009cf0:	e006      	b.n	8009d00 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009cfa:	e001      	b.n	8009d00 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e000      	b.n	8009d02 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d101      	bne.n	8009d24 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009d20:	2302      	movs	r3, #2
 8009d22:	e016      	b.n	8009d52 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d10f      	bne.n	8009d50 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2202      	movs	r2, #2
 8009d34:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	6839      	ldr	r1, [r7, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 faba 	bl	800b2b8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e000      	b.n	8009d52 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3708      	adds	r7, #8
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d101      	bne.n	8009d6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e09d      	b.n	8009ea8 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d108      	bne.n	8009d86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d7c:	d009      	beq.n	8009d92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	61da      	str	r2, [r3, #28]
 8009d84:	e005      	b.n	8009d92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d106      	bne.n	8009db2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7f8 ffe7 	bl	8002d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2202      	movs	r2, #2
 8009db6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dc8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009dd2:	d902      	bls.n	8009dda <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
 8009dd8:	e002      	b.n	8009de0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009dde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68db      	ldr	r3, [r3, #12]
 8009de4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009de8:	d007      	beq.n	8009dfa <HAL_SPI_Init+0xa0>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009df2:	d002      	beq.n	8009dfa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	431a      	orrs	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e32:	431a      	orrs	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e3c:	ea42 0103 	orr.w	r1, r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	430a      	orrs	r2, r1
 8009e4e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	0c1b      	lsrs	r3, r3, #16
 8009e56:	f003 0204 	and.w	r2, r3, #4
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5e:	f003 0310 	and.w	r3, r3, #16
 8009e62:	431a      	orrs	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e68:	f003 0308 	and.w	r3, r3, #8
 8009e6c:	431a      	orrs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009e76:	ea42 0103 	orr.w	r1, r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	430a      	orrs	r2, r1
 8009e86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	69da      	ldr	r2, [r3, #28]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e049      	b.n	8009f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7fa ff92 	bl	8004e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3304      	adds	r3, #4
 8009eec:	4619      	mov	r1, r3
 8009eee:	4610      	mov	r0, r2
 8009ef0:	f000 fac0 	bl	800a474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d001      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e054      	b.n	800a022 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68da      	ldr	r2, [r3, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f042 0201 	orr.w	r2, r2, #1
 8009f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a26      	ldr	r2, [pc, #152]	@ (800a030 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d022      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa2:	d01d      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a22      	ldr	r2, [pc, #136]	@ (800a034 <HAL_TIM_Base_Start_IT+0xd4>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d018      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a21      	ldr	r2, [pc, #132]	@ (800a038 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d013      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800a03c <HAL_TIM_Base_Start_IT+0xdc>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d00e      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a1e      	ldr	r2, [pc, #120]	@ (800a040 <HAL_TIM_Base_Start_IT+0xe0>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d009      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a1c      	ldr	r2, [pc, #112]	@ (800a044 <HAL_TIM_Base_Start_IT+0xe4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d004      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a1b      	ldr	r2, [pc, #108]	@ (800a048 <HAL_TIM_Base_Start_IT+0xe8>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d115      	bne.n	800a00c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689a      	ldr	r2, [r3, #8]
 8009fe6:	4b19      	ldr	r3, [pc, #100]	@ (800a04c <HAL_TIM_Base_Start_IT+0xec>)
 8009fe8:	4013      	ands	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b06      	cmp	r3, #6
 8009ff0:	d015      	beq.n	800a01e <HAL_TIM_Base_Start_IT+0xbe>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ff8:	d011      	beq.n	800a01e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0201 	orr.w	r2, r2, #1
 800a008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a00a:	e008      	b.n	800a01e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0201 	orr.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	e000      	b.n	800a020 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	40010000 	.word	0x40010000
 800a034:	40000400 	.word	0x40000400
 800a038:	40000800 	.word	0x40000800
 800a03c:	40000c00 	.word	0x40000c00
 800a040:	40010400 	.word	0x40010400
 800a044:	40014000 	.word	0x40014000
 800a048:	40001800 	.word	0x40001800
 800a04c:	00010007 	.word	0x00010007

0800a050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	f003 0302 	and.w	r3, r3, #2
 800a062:	2b02      	cmp	r3, #2
 800a064:	d122      	bne.n	800a0ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f003 0302 	and.w	r3, r3, #2
 800a070:	2b02      	cmp	r3, #2
 800a072:	d11b      	bne.n	800a0ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f06f 0202 	mvn.w	r2, #2
 800a07c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	f003 0303 	and.w	r3, r3, #3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d003      	beq.n	800a09a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f9d0 	bl	800a438 <HAL_TIM_IC_CaptureCallback>
 800a098:	e005      	b.n	800a0a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f9c2 	bl	800a424 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f9d3 	bl	800a44c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	f003 0304 	and.w	r3, r3, #4
 800a0b6:	2b04      	cmp	r3, #4
 800a0b8:	d122      	bne.n	800a100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	f003 0304 	and.w	r3, r3, #4
 800a0c4:	2b04      	cmp	r3, #4
 800a0c6:	d11b      	bne.n	800a100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f06f 0204 	mvn.w	r2, #4
 800a0d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f9a6 	bl	800a438 <HAL_TIM_IC_CaptureCallback>
 800a0ec:	e005      	b.n	800a0fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f998 	bl	800a424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f9a9 	bl	800a44c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	f003 0308 	and.w	r3, r3, #8
 800a10a:	2b08      	cmp	r3, #8
 800a10c:	d122      	bne.n	800a154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	2b08      	cmp	r3, #8
 800a11a:	d11b      	bne.n	800a154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f06f 0208 	mvn.w	r2, #8
 800a124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2204      	movs	r2, #4
 800a12a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	f003 0303 	and.w	r3, r3, #3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d003      	beq.n	800a142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f97c 	bl	800a438 <HAL_TIM_IC_CaptureCallback>
 800a140:	e005      	b.n	800a14e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 f96e 	bl	800a424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f97f 	bl	800a44c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f003 0310 	and.w	r3, r3, #16
 800a15e:	2b10      	cmp	r3, #16
 800a160:	d122      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f003 0310 	and.w	r3, r3, #16
 800a16c:	2b10      	cmp	r3, #16
 800a16e:	d11b      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f06f 0210 	mvn.w	r2, #16
 800a178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2208      	movs	r2, #8
 800a17e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d003      	beq.n	800a196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f952 	bl	800a438 <HAL_TIM_IC_CaptureCallback>
 800a194:	e005      	b.n	800a1a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f944 	bl	800a424 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f000 f955 	bl	800a44c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d10e      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d107      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f06f 0201 	mvn.w	r2, #1
 800a1cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7f8 fcae 	bl	8002b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	691b      	ldr	r3, [r3, #16]
 800a1da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1de:	2b80      	cmp	r3, #128	@ 0x80
 800a1e0:	d10e      	bne.n	800a200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ec:	2b80      	cmp	r3, #128	@ 0x80
 800a1ee:	d107      	bne.n	800a200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a1f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 fb0c 	bl	800a818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	691b      	ldr	r3, [r3, #16]
 800a206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a20a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a20e:	d10e      	bne.n	800a22e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a21a:	2b80      	cmp	r3, #128	@ 0x80
 800a21c:	d107      	bne.n	800a22e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 faff 	bl	800a82c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a238:	2b40      	cmp	r3, #64	@ 0x40
 800a23a:	d10e      	bne.n	800a25a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a246:	2b40      	cmp	r3, #64	@ 0x40
 800a248:	d107      	bne.n	800a25a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f903 	bl	800a460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	f003 0320 	and.w	r3, r3, #32
 800a264:	2b20      	cmp	r3, #32
 800a266:	d10e      	bne.n	800a286 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f003 0320 	and.w	r3, r3, #32
 800a272:	2b20      	cmp	r3, #32
 800a274:	d107      	bne.n	800a286 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f06f 0220 	mvn.w	r2, #32
 800a27e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fabf 	bl	800a804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a286:	bf00      	nop
 800a288:	3708      	adds	r7, #8
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d101      	bne.n	800a2ac <HAL_TIM_ConfigClockSource+0x1c>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e0b4      	b.n	800a416 <HAL_TIM_ConfigClockSource+0x186>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	4b56      	ldr	r3, [pc, #344]	@ (800a420 <HAL_TIM_ConfigClockSource+0x190>)
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68ba      	ldr	r2, [r7, #8]
 800a2da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2e4:	d03e      	beq.n	800a364 <HAL_TIM_ConfigClockSource+0xd4>
 800a2e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2ea:	f200 8087 	bhi.w	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
 800a2ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2f2:	f000 8086 	beq.w	800a402 <HAL_TIM_ConfigClockSource+0x172>
 800a2f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2fa:	d87f      	bhi.n	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
 800a2fc:	2b70      	cmp	r3, #112	@ 0x70
 800a2fe:	d01a      	beq.n	800a336 <HAL_TIM_ConfigClockSource+0xa6>
 800a300:	2b70      	cmp	r3, #112	@ 0x70
 800a302:	d87b      	bhi.n	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
 800a304:	2b60      	cmp	r3, #96	@ 0x60
 800a306:	d050      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x11a>
 800a308:	2b60      	cmp	r3, #96	@ 0x60
 800a30a:	d877      	bhi.n	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
 800a30c:	2b50      	cmp	r3, #80	@ 0x50
 800a30e:	d03c      	beq.n	800a38a <HAL_TIM_ConfigClockSource+0xfa>
 800a310:	2b50      	cmp	r3, #80	@ 0x50
 800a312:	d873      	bhi.n	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
 800a314:	2b40      	cmp	r3, #64	@ 0x40
 800a316:	d058      	beq.n	800a3ca <HAL_TIM_ConfigClockSource+0x13a>
 800a318:	2b40      	cmp	r3, #64	@ 0x40
 800a31a:	d86f      	bhi.n	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
 800a31c:	2b30      	cmp	r3, #48	@ 0x30
 800a31e:	d064      	beq.n	800a3ea <HAL_TIM_ConfigClockSource+0x15a>
 800a320:	2b30      	cmp	r3, #48	@ 0x30
 800a322:	d86b      	bhi.n	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
 800a324:	2b20      	cmp	r3, #32
 800a326:	d060      	beq.n	800a3ea <HAL_TIM_ConfigClockSource+0x15a>
 800a328:	2b20      	cmp	r3, #32
 800a32a:	d867      	bhi.n	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d05c      	beq.n	800a3ea <HAL_TIM_ConfigClockSource+0x15a>
 800a330:	2b10      	cmp	r3, #16
 800a332:	d05a      	beq.n	800a3ea <HAL_TIM_ConfigClockSource+0x15a>
 800a334:	e062      	b.n	800a3fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a346:	f000 f9af 	bl	800a6a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	609a      	str	r2, [r3, #8]
      break;
 800a362:	e04f      	b.n	800a404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a374:	f000 f998 	bl	800a6a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	689a      	ldr	r2, [r3, #8]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a386:	609a      	str	r2, [r3, #8]
      break;
 800a388:	e03c      	b.n	800a404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a396:	461a      	mov	r2, r3
 800a398:	f000 f90c 	bl	800a5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2150      	movs	r1, #80	@ 0x50
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 f965 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 800a3a8:	e02c      	b.n	800a404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f000 f92b 	bl	800a612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2160      	movs	r1, #96	@ 0x60
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 f955 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 800a3c8:	e01c      	b.n	800a404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f000 f8ec 	bl	800a5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2140      	movs	r1, #64	@ 0x40
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f945 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 800a3e8:	e00c      	b.n	800a404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	4610      	mov	r0, r2
 800a3f6:	f000 f93c 	bl	800a672 <TIM_ITRx_SetConfig>
      break;
 800a3fa:	e003      	b.n	800a404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a400:	e000      	b.n	800a404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a414:	7bfb      	ldrb	r3, [r7, #15]
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	fffeff88 	.word	0xfffeff88

0800a424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a42c:	bf00      	nop
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a454:	bf00      	nop
 800a456:	370c      	adds	r7, #12
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a468:	bf00      	nop
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a40      	ldr	r2, [pc, #256]	@ (800a588 <TIM_Base_SetConfig+0x114>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d013      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a492:	d00f      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a3d      	ldr	r2, [pc, #244]	@ (800a58c <TIM_Base_SetConfig+0x118>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d00b      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a3c      	ldr	r2, [pc, #240]	@ (800a590 <TIM_Base_SetConfig+0x11c>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d007      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a3b      	ldr	r2, [pc, #236]	@ (800a594 <TIM_Base_SetConfig+0x120>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d003      	beq.n	800a4b4 <TIM_Base_SetConfig+0x40>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a3a      	ldr	r2, [pc, #232]	@ (800a598 <TIM_Base_SetConfig+0x124>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d108      	bne.n	800a4c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a2f      	ldr	r2, [pc, #188]	@ (800a588 <TIM_Base_SetConfig+0x114>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d02b      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d4:	d027      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a2c      	ldr	r2, [pc, #176]	@ (800a58c <TIM_Base_SetConfig+0x118>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d023      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a2b      	ldr	r2, [pc, #172]	@ (800a590 <TIM_Base_SetConfig+0x11c>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d01f      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a2a      	ldr	r2, [pc, #168]	@ (800a594 <TIM_Base_SetConfig+0x120>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d01b      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a29      	ldr	r2, [pc, #164]	@ (800a598 <TIM_Base_SetConfig+0x124>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d017      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a28      	ldr	r2, [pc, #160]	@ (800a59c <TIM_Base_SetConfig+0x128>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d013      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a27      	ldr	r2, [pc, #156]	@ (800a5a0 <TIM_Base_SetConfig+0x12c>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d00f      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a26      	ldr	r2, [pc, #152]	@ (800a5a4 <TIM_Base_SetConfig+0x130>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d00b      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a25      	ldr	r2, [pc, #148]	@ (800a5a8 <TIM_Base_SetConfig+0x134>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d007      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a24      	ldr	r2, [pc, #144]	@ (800a5ac <TIM_Base_SetConfig+0x138>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d003      	beq.n	800a526 <TIM_Base_SetConfig+0xb2>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a23      	ldr	r2, [pc, #140]	@ (800a5b0 <TIM_Base_SetConfig+0x13c>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d108      	bne.n	800a538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a52c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4313      	orrs	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	4313      	orrs	r3, r2
 800a544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	689a      	ldr	r2, [r3, #8]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a0a      	ldr	r2, [pc, #40]	@ (800a588 <TIM_Base_SetConfig+0x114>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d003      	beq.n	800a56c <TIM_Base_SetConfig+0xf8>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a0c      	ldr	r2, [pc, #48]	@ (800a598 <TIM_Base_SetConfig+0x124>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d103      	bne.n	800a574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	691a      	ldr	r2, [r3, #16]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	615a      	str	r2, [r3, #20]
}
 800a57a:	bf00      	nop
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	40010000 	.word	0x40010000
 800a58c:	40000400 	.word	0x40000400
 800a590:	40000800 	.word	0x40000800
 800a594:	40000c00 	.word	0x40000c00
 800a598:	40010400 	.word	0x40010400
 800a59c:	40014000 	.word	0x40014000
 800a5a0:	40014400 	.word	0x40014400
 800a5a4:	40014800 	.word	0x40014800
 800a5a8:	40001800 	.word	0x40001800
 800a5ac:	40001c00 	.word	0x40001c00
 800a5b0:	40002000 	.word	0x40002000

0800a5b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6a1b      	ldr	r3, [r3, #32]
 800a5c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	f023 0201 	bic.w	r2, r3, #1
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	011b      	lsls	r3, r3, #4
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f023 030a 	bic.w	r3, r3, #10
 800a5f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	621a      	str	r2, [r3, #32]
}
 800a606:	bf00      	nop
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a612:	b480      	push	{r7}
 800a614:	b087      	sub	sp, #28
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f023 0210 	bic.w	r2, r3, #16
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a63c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	031b      	lsls	r3, r3, #12
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	4313      	orrs	r3, r2
 800a646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a64e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	011b      	lsls	r3, r3, #4
 800a654:	693a      	ldr	r2, [r7, #16]
 800a656:	4313      	orrs	r3, r2
 800a658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	621a      	str	r2, [r3, #32]
}
 800a666:	bf00      	nop
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a672:	b480      	push	{r7}
 800a674:	b085      	sub	sp, #20
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4313      	orrs	r3, r2
 800a690:	f043 0307 	orr.w	r3, r3, #7
 800a694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	609a      	str	r2, [r3, #8]
}
 800a69c:	bf00      	nop
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	021a      	lsls	r2, r3, #8
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	609a      	str	r2, [r3, #8]
}
 800a6dc:	bf00      	nop
 800a6de:	371c      	adds	r7, #28
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d101      	bne.n	800a700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e06d      	b.n	800a7dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2202      	movs	r2, #2
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a30      	ldr	r2, [pc, #192]	@ (800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d004      	beq.n	800a734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a2f      	ldr	r2, [pc, #188]	@ (800a7ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d108      	bne.n	800a746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a73a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	4313      	orrs	r3, r2
 800a744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a74c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	4313      	orrs	r3, r2
 800a756:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a20      	ldr	r2, [pc, #128]	@ (800a7e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d022      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a772:	d01d      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a1d      	ldr	r2, [pc, #116]	@ (800a7f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d018      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a1c      	ldr	r2, [pc, #112]	@ (800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d013      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a1a      	ldr	r2, [pc, #104]	@ (800a7f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00e      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a15      	ldr	r2, [pc, #84]	@ (800a7ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d009      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a16      	ldr	r2, [pc, #88]	@ (800a7fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d004      	beq.n	800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a15      	ldr	r2, [pc, #84]	@ (800a800 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d10c      	bne.n	800a7ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	40010000 	.word	0x40010000
 800a7ec:	40010400 	.word	0x40010400
 800a7f0:	40000400 	.word	0x40000400
 800a7f4:	40000800 	.word	0x40000800
 800a7f8:	40000c00 	.word	0x40000c00
 800a7fc:	40014000 	.word	0x40014000
 800a800:	40001800 	.word	0x40001800

0800a804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e040      	b.n	800a8d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d106      	bne.n	800a868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7fa fbee 	bl	8005044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2224      	movs	r2, #36	@ 0x24
 800a86c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f022 0201 	bic.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f82c 	bl	800a8dc <UART_SetConfig>
 800a884:	4603      	mov	r3, r0
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e022      	b.n	800a8d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa84 	bl	800ada4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a8aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	689a      	ldr	r2, [r3, #8]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a8ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f042 0201 	orr.w	r2, r2, #1
 800a8ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 fb0b 	bl	800aee8 <UART_CheckIdleState>
 800a8d2:	4603      	mov	r3, r0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b088      	sub	sp, #32
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	689a      	ldr	r2, [r3, #8]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	431a      	orrs	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	431a      	orrs	r2, r3
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	69db      	ldr	r3, [r3, #28]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	4ba6      	ldr	r3, [pc, #664]	@ (800aba0 <UART_SetConfig+0x2c4>)
 800a908:	4013      	ands	r3, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6812      	ldr	r2, [r2, #0]
 800a90e:	6979      	ldr	r1, [r7, #20]
 800a910:	430b      	orrs	r3, r1
 800a912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	430a      	orrs	r2, r1
 800a928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	4313      	orrs	r3, r2
 800a938:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	430a      	orrs	r2, r1
 800a94c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a94      	ldr	r2, [pc, #592]	@ (800aba4 <UART_SetConfig+0x2c8>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d120      	bne.n	800a99a <UART_SetConfig+0xbe>
 800a958:	4b93      	ldr	r3, [pc, #588]	@ (800aba8 <UART_SetConfig+0x2cc>)
 800a95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a95e:	f003 0303 	and.w	r3, r3, #3
 800a962:	2b03      	cmp	r3, #3
 800a964:	d816      	bhi.n	800a994 <UART_SetConfig+0xb8>
 800a966:	a201      	add	r2, pc, #4	@ (adr r2, 800a96c <UART_SetConfig+0x90>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a97d 	.word	0x0800a97d
 800a970:	0800a989 	.word	0x0800a989
 800a974:	0800a983 	.word	0x0800a983
 800a978:	0800a98f 	.word	0x0800a98f
 800a97c:	2301      	movs	r3, #1
 800a97e:	77fb      	strb	r3, [r7, #31]
 800a980:	e150      	b.n	800ac24 <UART_SetConfig+0x348>
 800a982:	2302      	movs	r3, #2
 800a984:	77fb      	strb	r3, [r7, #31]
 800a986:	e14d      	b.n	800ac24 <UART_SetConfig+0x348>
 800a988:	2304      	movs	r3, #4
 800a98a:	77fb      	strb	r3, [r7, #31]
 800a98c:	e14a      	b.n	800ac24 <UART_SetConfig+0x348>
 800a98e:	2308      	movs	r3, #8
 800a990:	77fb      	strb	r3, [r7, #31]
 800a992:	e147      	b.n	800ac24 <UART_SetConfig+0x348>
 800a994:	2310      	movs	r3, #16
 800a996:	77fb      	strb	r3, [r7, #31]
 800a998:	e144      	b.n	800ac24 <UART_SetConfig+0x348>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a83      	ldr	r2, [pc, #524]	@ (800abac <UART_SetConfig+0x2d0>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d132      	bne.n	800aa0a <UART_SetConfig+0x12e>
 800a9a4:	4b80      	ldr	r3, [pc, #512]	@ (800aba8 <UART_SetConfig+0x2cc>)
 800a9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9aa:	f003 030c 	and.w	r3, r3, #12
 800a9ae:	2b0c      	cmp	r3, #12
 800a9b0:	d828      	bhi.n	800aa04 <UART_SetConfig+0x128>
 800a9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b8 <UART_SetConfig+0xdc>)
 800a9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b8:	0800a9ed 	.word	0x0800a9ed
 800a9bc:	0800aa05 	.word	0x0800aa05
 800a9c0:	0800aa05 	.word	0x0800aa05
 800a9c4:	0800aa05 	.word	0x0800aa05
 800a9c8:	0800a9f9 	.word	0x0800a9f9
 800a9cc:	0800aa05 	.word	0x0800aa05
 800a9d0:	0800aa05 	.word	0x0800aa05
 800a9d4:	0800aa05 	.word	0x0800aa05
 800a9d8:	0800a9f3 	.word	0x0800a9f3
 800a9dc:	0800aa05 	.word	0x0800aa05
 800a9e0:	0800aa05 	.word	0x0800aa05
 800a9e4:	0800aa05 	.word	0x0800aa05
 800a9e8:	0800a9ff 	.word	0x0800a9ff
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	77fb      	strb	r3, [r7, #31]
 800a9f0:	e118      	b.n	800ac24 <UART_SetConfig+0x348>
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	77fb      	strb	r3, [r7, #31]
 800a9f6:	e115      	b.n	800ac24 <UART_SetConfig+0x348>
 800a9f8:	2304      	movs	r3, #4
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e112      	b.n	800ac24 <UART_SetConfig+0x348>
 800a9fe:	2308      	movs	r3, #8
 800aa00:	77fb      	strb	r3, [r7, #31]
 800aa02:	e10f      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa04:	2310      	movs	r3, #16
 800aa06:	77fb      	strb	r3, [r7, #31]
 800aa08:	e10c      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a68      	ldr	r2, [pc, #416]	@ (800abb0 <UART_SetConfig+0x2d4>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d120      	bne.n	800aa56 <UART_SetConfig+0x17a>
 800aa14:	4b64      	ldr	r3, [pc, #400]	@ (800aba8 <UART_SetConfig+0x2cc>)
 800aa16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa1a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa1e:	2b30      	cmp	r3, #48	@ 0x30
 800aa20:	d013      	beq.n	800aa4a <UART_SetConfig+0x16e>
 800aa22:	2b30      	cmp	r3, #48	@ 0x30
 800aa24:	d814      	bhi.n	800aa50 <UART_SetConfig+0x174>
 800aa26:	2b20      	cmp	r3, #32
 800aa28:	d009      	beq.n	800aa3e <UART_SetConfig+0x162>
 800aa2a:	2b20      	cmp	r3, #32
 800aa2c:	d810      	bhi.n	800aa50 <UART_SetConfig+0x174>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d002      	beq.n	800aa38 <UART_SetConfig+0x15c>
 800aa32:	2b10      	cmp	r3, #16
 800aa34:	d006      	beq.n	800aa44 <UART_SetConfig+0x168>
 800aa36:	e00b      	b.n	800aa50 <UART_SetConfig+0x174>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	77fb      	strb	r3, [r7, #31]
 800aa3c:	e0f2      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa3e:	2302      	movs	r3, #2
 800aa40:	77fb      	strb	r3, [r7, #31]
 800aa42:	e0ef      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa44:	2304      	movs	r3, #4
 800aa46:	77fb      	strb	r3, [r7, #31]
 800aa48:	e0ec      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa4a:	2308      	movs	r3, #8
 800aa4c:	77fb      	strb	r3, [r7, #31]
 800aa4e:	e0e9      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa50:	2310      	movs	r3, #16
 800aa52:	77fb      	strb	r3, [r7, #31]
 800aa54:	e0e6      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a56      	ldr	r2, [pc, #344]	@ (800abb4 <UART_SetConfig+0x2d8>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d120      	bne.n	800aaa2 <UART_SetConfig+0x1c6>
 800aa60:	4b51      	ldr	r3, [pc, #324]	@ (800aba8 <UART_SetConfig+0x2cc>)
 800aa62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aa6a:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa6c:	d013      	beq.n	800aa96 <UART_SetConfig+0x1ba>
 800aa6e:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa70:	d814      	bhi.n	800aa9c <UART_SetConfig+0x1c0>
 800aa72:	2b80      	cmp	r3, #128	@ 0x80
 800aa74:	d009      	beq.n	800aa8a <UART_SetConfig+0x1ae>
 800aa76:	2b80      	cmp	r3, #128	@ 0x80
 800aa78:	d810      	bhi.n	800aa9c <UART_SetConfig+0x1c0>
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d002      	beq.n	800aa84 <UART_SetConfig+0x1a8>
 800aa7e:	2b40      	cmp	r3, #64	@ 0x40
 800aa80:	d006      	beq.n	800aa90 <UART_SetConfig+0x1b4>
 800aa82:	e00b      	b.n	800aa9c <UART_SetConfig+0x1c0>
 800aa84:	2300      	movs	r3, #0
 800aa86:	77fb      	strb	r3, [r7, #31]
 800aa88:	e0cc      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	77fb      	strb	r3, [r7, #31]
 800aa8e:	e0c9      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa90:	2304      	movs	r3, #4
 800aa92:	77fb      	strb	r3, [r7, #31]
 800aa94:	e0c6      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa96:	2308      	movs	r3, #8
 800aa98:	77fb      	strb	r3, [r7, #31]
 800aa9a:	e0c3      	b.n	800ac24 <UART_SetConfig+0x348>
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	77fb      	strb	r3, [r7, #31]
 800aaa0:	e0c0      	b.n	800ac24 <UART_SetConfig+0x348>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a44      	ldr	r2, [pc, #272]	@ (800abb8 <UART_SetConfig+0x2dc>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d125      	bne.n	800aaf8 <UART_SetConfig+0x21c>
 800aaac:	4b3e      	ldr	r3, [pc, #248]	@ (800aba8 <UART_SetConfig+0x2cc>)
 800aaae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaba:	d017      	beq.n	800aaec <UART_SetConfig+0x210>
 800aabc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aac0:	d817      	bhi.n	800aaf2 <UART_SetConfig+0x216>
 800aac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aac6:	d00b      	beq.n	800aae0 <UART_SetConfig+0x204>
 800aac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aacc:	d811      	bhi.n	800aaf2 <UART_SetConfig+0x216>
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <UART_SetConfig+0x1fe>
 800aad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aad6:	d006      	beq.n	800aae6 <UART_SetConfig+0x20a>
 800aad8:	e00b      	b.n	800aaf2 <UART_SetConfig+0x216>
 800aada:	2300      	movs	r3, #0
 800aadc:	77fb      	strb	r3, [r7, #31]
 800aade:	e0a1      	b.n	800ac24 <UART_SetConfig+0x348>
 800aae0:	2302      	movs	r3, #2
 800aae2:	77fb      	strb	r3, [r7, #31]
 800aae4:	e09e      	b.n	800ac24 <UART_SetConfig+0x348>
 800aae6:	2304      	movs	r3, #4
 800aae8:	77fb      	strb	r3, [r7, #31]
 800aaea:	e09b      	b.n	800ac24 <UART_SetConfig+0x348>
 800aaec:	2308      	movs	r3, #8
 800aaee:	77fb      	strb	r3, [r7, #31]
 800aaf0:	e098      	b.n	800ac24 <UART_SetConfig+0x348>
 800aaf2:	2310      	movs	r3, #16
 800aaf4:	77fb      	strb	r3, [r7, #31]
 800aaf6:	e095      	b.n	800ac24 <UART_SetConfig+0x348>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a2f      	ldr	r2, [pc, #188]	@ (800abbc <UART_SetConfig+0x2e0>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d125      	bne.n	800ab4e <UART_SetConfig+0x272>
 800ab02:	4b29      	ldr	r3, [pc, #164]	@ (800aba8 <UART_SetConfig+0x2cc>)
 800ab04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ab0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab10:	d017      	beq.n	800ab42 <UART_SetConfig+0x266>
 800ab12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab16:	d817      	bhi.n	800ab48 <UART_SetConfig+0x26c>
 800ab18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab1c:	d00b      	beq.n	800ab36 <UART_SetConfig+0x25a>
 800ab1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab22:	d811      	bhi.n	800ab48 <UART_SetConfig+0x26c>
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <UART_SetConfig+0x254>
 800ab28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab2c:	d006      	beq.n	800ab3c <UART_SetConfig+0x260>
 800ab2e:	e00b      	b.n	800ab48 <UART_SetConfig+0x26c>
 800ab30:	2301      	movs	r3, #1
 800ab32:	77fb      	strb	r3, [r7, #31]
 800ab34:	e076      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab36:	2302      	movs	r3, #2
 800ab38:	77fb      	strb	r3, [r7, #31]
 800ab3a:	e073      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab3c:	2304      	movs	r3, #4
 800ab3e:	77fb      	strb	r3, [r7, #31]
 800ab40:	e070      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab42:	2308      	movs	r3, #8
 800ab44:	77fb      	strb	r3, [r7, #31]
 800ab46:	e06d      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab48:	2310      	movs	r3, #16
 800ab4a:	77fb      	strb	r3, [r7, #31]
 800ab4c:	e06a      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a1b      	ldr	r2, [pc, #108]	@ (800abc0 <UART_SetConfig+0x2e4>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d138      	bne.n	800abca <UART_SetConfig+0x2ee>
 800ab58:	4b13      	ldr	r3, [pc, #76]	@ (800aba8 <UART_SetConfig+0x2cc>)
 800ab5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ab62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab66:	d017      	beq.n	800ab98 <UART_SetConfig+0x2bc>
 800ab68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ab6c:	d82a      	bhi.n	800abc4 <UART_SetConfig+0x2e8>
 800ab6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab72:	d00b      	beq.n	800ab8c <UART_SetConfig+0x2b0>
 800ab74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab78:	d824      	bhi.n	800abc4 <UART_SetConfig+0x2e8>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <UART_SetConfig+0x2aa>
 800ab7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab82:	d006      	beq.n	800ab92 <UART_SetConfig+0x2b6>
 800ab84:	e01e      	b.n	800abc4 <UART_SetConfig+0x2e8>
 800ab86:	2300      	movs	r3, #0
 800ab88:	77fb      	strb	r3, [r7, #31]
 800ab8a:	e04b      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	77fb      	strb	r3, [r7, #31]
 800ab90:	e048      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab92:	2304      	movs	r3, #4
 800ab94:	77fb      	strb	r3, [r7, #31]
 800ab96:	e045      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab98:	2308      	movs	r3, #8
 800ab9a:	77fb      	strb	r3, [r7, #31]
 800ab9c:	e042      	b.n	800ac24 <UART_SetConfig+0x348>
 800ab9e:	bf00      	nop
 800aba0:	efff69f3 	.word	0xefff69f3
 800aba4:	40011000 	.word	0x40011000
 800aba8:	40023800 	.word	0x40023800
 800abac:	40004400 	.word	0x40004400
 800abb0:	40004800 	.word	0x40004800
 800abb4:	40004c00 	.word	0x40004c00
 800abb8:	40005000 	.word	0x40005000
 800abbc:	40011400 	.word	0x40011400
 800abc0:	40007800 	.word	0x40007800
 800abc4:	2310      	movs	r3, #16
 800abc6:	77fb      	strb	r3, [r7, #31]
 800abc8:	e02c      	b.n	800ac24 <UART_SetConfig+0x348>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a72      	ldr	r2, [pc, #456]	@ (800ad98 <UART_SetConfig+0x4bc>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d125      	bne.n	800ac20 <UART_SetConfig+0x344>
 800abd4:	4b71      	ldr	r3, [pc, #452]	@ (800ad9c <UART_SetConfig+0x4c0>)
 800abd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800abde:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800abe2:	d017      	beq.n	800ac14 <UART_SetConfig+0x338>
 800abe4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800abe8:	d817      	bhi.n	800ac1a <UART_SetConfig+0x33e>
 800abea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abee:	d00b      	beq.n	800ac08 <UART_SetConfig+0x32c>
 800abf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abf4:	d811      	bhi.n	800ac1a <UART_SetConfig+0x33e>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <UART_SetConfig+0x326>
 800abfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abfe:	d006      	beq.n	800ac0e <UART_SetConfig+0x332>
 800ac00:	e00b      	b.n	800ac1a <UART_SetConfig+0x33e>
 800ac02:	2300      	movs	r3, #0
 800ac04:	77fb      	strb	r3, [r7, #31]
 800ac06:	e00d      	b.n	800ac24 <UART_SetConfig+0x348>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	77fb      	strb	r3, [r7, #31]
 800ac0c:	e00a      	b.n	800ac24 <UART_SetConfig+0x348>
 800ac0e:	2304      	movs	r3, #4
 800ac10:	77fb      	strb	r3, [r7, #31]
 800ac12:	e007      	b.n	800ac24 <UART_SetConfig+0x348>
 800ac14:	2308      	movs	r3, #8
 800ac16:	77fb      	strb	r3, [r7, #31]
 800ac18:	e004      	b.n	800ac24 <UART_SetConfig+0x348>
 800ac1a:	2310      	movs	r3, #16
 800ac1c:	77fb      	strb	r3, [r7, #31]
 800ac1e:	e001      	b.n	800ac24 <UART_SetConfig+0x348>
 800ac20:	2310      	movs	r3, #16
 800ac22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac2c:	d15b      	bne.n	800ace6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ac2e:	7ffb      	ldrb	r3, [r7, #31]
 800ac30:	2b08      	cmp	r3, #8
 800ac32:	d828      	bhi.n	800ac86 <UART_SetConfig+0x3aa>
 800ac34:	a201      	add	r2, pc, #4	@ (adr r2, 800ac3c <UART_SetConfig+0x360>)
 800ac36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3a:	bf00      	nop
 800ac3c:	0800ac61 	.word	0x0800ac61
 800ac40:	0800ac69 	.word	0x0800ac69
 800ac44:	0800ac71 	.word	0x0800ac71
 800ac48:	0800ac87 	.word	0x0800ac87
 800ac4c:	0800ac77 	.word	0x0800ac77
 800ac50:	0800ac87 	.word	0x0800ac87
 800ac54:	0800ac87 	.word	0x0800ac87
 800ac58:	0800ac87 	.word	0x0800ac87
 800ac5c:	0800ac7f 	.word	0x0800ac7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac60:	f7fd ffca 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
 800ac64:	61b8      	str	r0, [r7, #24]
        break;
 800ac66:	e013      	b.n	800ac90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac68:	f7fd ffda 	bl	8008c20 <HAL_RCC_GetPCLK2Freq>
 800ac6c:	61b8      	str	r0, [r7, #24]
        break;
 800ac6e:	e00f      	b.n	800ac90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac70:	4b4b      	ldr	r3, [pc, #300]	@ (800ada0 <UART_SetConfig+0x4c4>)
 800ac72:	61bb      	str	r3, [r7, #24]
        break;
 800ac74:	e00c      	b.n	800ac90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac76:	f7fd feed 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 800ac7a:	61b8      	str	r0, [r7, #24]
        break;
 800ac7c:	e008      	b.n	800ac90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac82:	61bb      	str	r3, [r7, #24]
        break;
 800ac84:	e004      	b.n	800ac90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	77bb      	strb	r3, [r7, #30]
        break;
 800ac8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d074      	beq.n	800ad80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	005a      	lsls	r2, r3, #1
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	085b      	lsrs	r3, r3, #1
 800aca0:	441a      	add	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	2b0f      	cmp	r3, #15
 800acb0:	d916      	bls.n	800ace0 <UART_SetConfig+0x404>
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acb8:	d212      	bcs.n	800ace0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	f023 030f 	bic.w	r3, r3, #15
 800acc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	085b      	lsrs	r3, r3, #1
 800acc8:	b29b      	uxth	r3, r3
 800acca:	f003 0307 	and.w	r3, r3, #7
 800acce:	b29a      	uxth	r2, r3
 800acd0:	89fb      	ldrh	r3, [r7, #14]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	89fa      	ldrh	r2, [r7, #14]
 800acdc:	60da      	str	r2, [r3, #12]
 800acde:	e04f      	b.n	800ad80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	77bb      	strb	r3, [r7, #30]
 800ace4:	e04c      	b.n	800ad80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ace6:	7ffb      	ldrb	r3, [r7, #31]
 800ace8:	2b08      	cmp	r3, #8
 800acea:	d828      	bhi.n	800ad3e <UART_SetConfig+0x462>
 800acec:	a201      	add	r2, pc, #4	@ (adr r2, 800acf4 <UART_SetConfig+0x418>)
 800acee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf2:	bf00      	nop
 800acf4:	0800ad19 	.word	0x0800ad19
 800acf8:	0800ad21 	.word	0x0800ad21
 800acfc:	0800ad29 	.word	0x0800ad29
 800ad00:	0800ad3f 	.word	0x0800ad3f
 800ad04:	0800ad2f 	.word	0x0800ad2f
 800ad08:	0800ad3f 	.word	0x0800ad3f
 800ad0c:	0800ad3f 	.word	0x0800ad3f
 800ad10:	0800ad3f 	.word	0x0800ad3f
 800ad14:	0800ad37 	.word	0x0800ad37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad18:	f7fd ff6e 	bl	8008bf8 <HAL_RCC_GetPCLK1Freq>
 800ad1c:	61b8      	str	r0, [r7, #24]
        break;
 800ad1e:	e013      	b.n	800ad48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad20:	f7fd ff7e 	bl	8008c20 <HAL_RCC_GetPCLK2Freq>
 800ad24:	61b8      	str	r0, [r7, #24]
        break;
 800ad26:	e00f      	b.n	800ad48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad28:	4b1d      	ldr	r3, [pc, #116]	@ (800ada0 <UART_SetConfig+0x4c4>)
 800ad2a:	61bb      	str	r3, [r7, #24]
        break;
 800ad2c:	e00c      	b.n	800ad48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad2e:	f7fd fe91 	bl	8008a54 <HAL_RCC_GetSysClockFreq>
 800ad32:	61b8      	str	r0, [r7, #24]
        break;
 800ad34:	e008      	b.n	800ad48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad3a:	61bb      	str	r3, [r7, #24]
        break;
 800ad3c:	e004      	b.n	800ad48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	77bb      	strb	r3, [r7, #30]
        break;
 800ad46:	bf00      	nop
    }

    if (pclk != 0U)
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d018      	beq.n	800ad80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	085a      	lsrs	r2, r3, #1
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	441a      	add	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b0f      	cmp	r3, #15
 800ad66:	d909      	bls.n	800ad7c <UART_SetConfig+0x4a0>
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad6e:	d205      	bcs.n	800ad7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	60da      	str	r2, [r3, #12]
 800ad7a:	e001      	b.n	800ad80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ad8c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3720      	adds	r7, #32
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	40007c00 	.word	0x40007c00
 800ad9c:	40023800 	.word	0x40023800
 800ada0:	00f42400 	.word	0x00f42400

0800ada4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00a      	beq.n	800adce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	430a      	orrs	r2, r1
 800adcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	430a      	orrs	r2, r1
 800adee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d00a      	beq.n	800ae12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae16:	f003 0308 	and.w	r3, r3, #8
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00a      	beq.n	800ae34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	430a      	orrs	r2, r1
 800ae32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae38:	f003 0310 	and.w	r3, r3, #16
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00a      	beq.n	800ae56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae5a:	f003 0320 	and.w	r3, r3, #32
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00a      	beq.n	800ae78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	430a      	orrs	r2, r1
 800ae76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d01a      	beq.n	800aeba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aea2:	d10a      	bne.n	800aeba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	430a      	orrs	r2, r1
 800aeb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00a      	beq.n	800aedc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	430a      	orrs	r2, r1
 800aeda:	605a      	str	r2, [r3, #4]
  }
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af02      	add	r7, sp, #8
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aef8:	f7fa f9fe 	bl	80052f8 <HAL_GetTick>
 800aefc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f003 0308 	and.w	r3, r3, #8
 800af08:	2b08      	cmp	r3, #8
 800af0a:	d10e      	bne.n	800af2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f81b 	bl	800af56 <UART_WaitOnFlagUntilTimeout>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af26:	2303      	movs	r3, #3
 800af28:	e011      	b.n	800af4e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2220      	movs	r2, #32
 800af2e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2220      	movs	r2, #32
 800af34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b09c      	sub	sp, #112	@ 0x70
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	603b      	str	r3, [r7, #0]
 800af62:	4613      	mov	r3, r2
 800af64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af66:	e0a7      	b.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6e:	f000 80a3 	beq.w	800b0b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af72:	f7fa f9c1 	bl	80052f8 <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800af7e:	429a      	cmp	r2, r3
 800af80:	d302      	bcc.n	800af88 <UART_WaitOnFlagUntilTimeout+0x32>
 800af82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af84:	2b00      	cmp	r3, #0
 800af86:	d13f      	bne.n	800b008 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800af96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af98:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800af9c:	667b      	str	r3, [r7, #100]	@ 0x64
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	461a      	mov	r2, r3
 800afa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800afa8:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afaa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800afac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800afb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e6      	bne.n	800af88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3308      	adds	r3, #8
 800afc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800afca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afcc:	f023 0301 	bic.w	r3, r3, #1
 800afd0:	663b      	str	r3, [r7, #96]	@ 0x60
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3308      	adds	r3, #8
 800afd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afda:	64ba      	str	r2, [r7, #72]	@ 0x48
 800afdc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800afe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800afe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e5      	bne.n	800afba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2220      	movs	r2, #32
 800aff2:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2220      	movs	r2, #32
 800aff8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e068      	b.n	800b0da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0304 	and.w	r3, r3, #4
 800b012:	2b00      	cmp	r3, #0
 800b014:	d050      	beq.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	69db      	ldr	r3, [r3, #28]
 800b01c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b024:	d148      	bne.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b02e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b038:	e853 3f00 	ldrex	r3, [r3]
 800b03c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b040:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b044:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b050:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b052:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b054:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b056:	e841 2300 	strex	r3, r2, [r1]
 800b05a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1e6      	bne.n	800b030 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3308      	adds	r3, #8
 800b068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	613b      	str	r3, [r7, #16]
   return(result);
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f023 0301 	bic.w	r3, r3, #1
 800b078:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3308      	adds	r3, #8
 800b080:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b082:	623a      	str	r2, [r7, #32]
 800b084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	69f9      	ldr	r1, [r7, #28]
 800b088:	6a3a      	ldr	r2, [r7, #32]
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e5      	bne.n	800b062 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2220      	movs	r2, #32
 800b09a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2220      	movs	r2, #32
 800b0a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e010      	b.n	800b0da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	69da      	ldr	r2, [r3, #28]
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	bf0c      	ite	eq
 800b0c8:	2301      	moveq	r3, #1
 800b0ca:	2300      	movne	r3, #0
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	f43f af48 	beq.w	800af68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3770      	adds	r7, #112	@ 0x70
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d121      	bne.n	800b13a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	4b27      	ldr	r3, [pc, #156]	@ (800b198 <FMC_SDRAM_Init+0xb4>)
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	6851      	ldr	r1, [r2, #4]
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	6892      	ldr	r2, [r2, #8]
 800b106:	4311      	orrs	r1, r2
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	68d2      	ldr	r2, [r2, #12]
 800b10c:	4311      	orrs	r1, r2
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	6912      	ldr	r2, [r2, #16]
 800b112:	4311      	orrs	r1, r2
 800b114:	683a      	ldr	r2, [r7, #0]
 800b116:	6952      	ldr	r2, [r2, #20]
 800b118:	4311      	orrs	r1, r2
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	6992      	ldr	r2, [r2, #24]
 800b11e:	4311      	orrs	r1, r2
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	69d2      	ldr	r2, [r2, #28]
 800b124:	4311      	orrs	r1, r2
 800b126:	683a      	ldr	r2, [r7, #0]
 800b128:	6a12      	ldr	r2, [r2, #32]
 800b12a:	4311      	orrs	r1, r2
 800b12c:	683a      	ldr	r2, [r7, #0]
 800b12e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b130:	430a      	orrs	r2, r1
 800b132:	431a      	orrs	r2, r3
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	601a      	str	r2, [r3, #0]
 800b138:	e026      	b.n	800b188 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	69d9      	ldr	r1, [r3, #28]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	6a1b      	ldr	r3, [r3, #32]
 800b14a:	4319      	orrs	r1, r3
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b150:	430b      	orrs	r3, r1
 800b152:	431a      	orrs	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	4b0e      	ldr	r3, [pc, #56]	@ (800b198 <FMC_SDRAM_Init+0xb4>)
 800b15e:	4013      	ands	r3, r2
 800b160:	683a      	ldr	r2, [r7, #0]
 800b162:	6851      	ldr	r1, [r2, #4]
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	6892      	ldr	r2, [r2, #8]
 800b168:	4311      	orrs	r1, r2
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	68d2      	ldr	r2, [r2, #12]
 800b16e:	4311      	orrs	r1, r2
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	6912      	ldr	r2, [r2, #16]
 800b174:	4311      	orrs	r1, r2
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	6952      	ldr	r2, [r2, #20]
 800b17a:	4311      	orrs	r1, r2
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	6992      	ldr	r2, [r2, #24]
 800b180:	430a      	orrs	r2, r1
 800b182:	431a      	orrs	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	ffff8000 	.word	0xffff8000

0800b19c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d128      	bne.n	800b200 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	1e59      	subs	r1, r3, #1
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	011b      	lsls	r3, r3, #4
 800b1c4:	4319      	orrs	r1, r3
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	021b      	lsls	r3, r3, #8
 800b1ce:	4319      	orrs	r1, r3
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	031b      	lsls	r3, r3, #12
 800b1d8:	4319      	orrs	r1, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	041b      	lsls	r3, r3, #16
 800b1e2:	4319      	orrs	r1, r3
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	695b      	ldr	r3, [r3, #20]
 800b1e8:	3b01      	subs	r3, #1
 800b1ea:	051b      	lsls	r3, r3, #20
 800b1ec:	4319      	orrs	r1, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	061b      	lsls	r3, r3, #24
 800b1f6:	430b      	orrs	r3, r1
 800b1f8:	431a      	orrs	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	609a      	str	r2, [r3, #8]
 800b1fe:	e02d      	b.n	800b25c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	689a      	ldr	r2, [r3, #8]
 800b204:	4b19      	ldr	r3, [pc, #100]	@ (800b26c <FMC_SDRAM_Timing_Init+0xd0>)
 800b206:	4013      	ands	r3, r2
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	68d2      	ldr	r2, [r2, #12]
 800b20c:	3a01      	subs	r2, #1
 800b20e:	0311      	lsls	r1, r2, #12
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	6952      	ldr	r2, [r2, #20]
 800b214:	3a01      	subs	r2, #1
 800b216:	0512      	lsls	r2, r2, #20
 800b218:	430a      	orrs	r2, r1
 800b21a:	431a      	orrs	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	1e59      	subs	r1, r3, #1
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	3b01      	subs	r3, #1
 800b234:	011b      	lsls	r3, r3, #4
 800b236:	4319      	orrs	r1, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	3b01      	subs	r3, #1
 800b23e:	021b      	lsls	r3, r3, #8
 800b240:	4319      	orrs	r1, r3
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	3b01      	subs	r3, #1
 800b248:	041b      	lsls	r3, r3, #16
 800b24a:	4319      	orrs	r1, r3
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	3b01      	subs	r3, #1
 800b252:	061b      	lsls	r3, r3, #24
 800b254:	430b      	orrs	r3, r1
 800b256:	431a      	orrs	r2, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	ff0f0fff 	.word	0xff0f0fff

0800b270 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	691a      	ldr	r2, [r3, #16]
 800b280:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b4 <FMC_SDRAM_SendCommand+0x44>)
 800b282:	4013      	ands	r3, r2
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	6811      	ldr	r1, [r2, #0]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	6852      	ldr	r2, [r2, #4]
 800b28c:	4311      	orrs	r1, r2
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	6892      	ldr	r2, [r2, #8]
 800b292:	3a01      	subs	r2, #1
 800b294:	0152      	lsls	r2, r2, #5
 800b296:	4311      	orrs	r1, r2
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	68d2      	ldr	r2, [r2, #12]
 800b29c:	0252      	lsls	r2, r2, #9
 800b29e:	430a      	orrs	r2, r1
 800b2a0:	431a      	orrs	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr
 800b2b4:	ffc00000 	.word	0xffc00000

0800b2b8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	695a      	ldr	r2, [r3, #20]
 800b2c6:	4b07      	ldr	r3, [pc, #28]	@ (800b2e4 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	683a      	ldr	r2, [r7, #0]
 800b2cc:	0052      	lsls	r2, r2, #1
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr
 800b2e2:	bf00      	nop
 800b2e4:	ffffc001 	.word	0xffffc001

0800b2e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b2f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b2fa:	2b84      	cmp	r3, #132	@ 0x84
 800b2fc:	d005      	beq.n	800b30a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b2fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	4413      	add	r3, r2
 800b306:	3303      	adds	r3, #3
 800b308:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b30a:	68fb      	ldr	r3, [r7, #12]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3714      	adds	r7, #20
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b31c:	f000 fe88 	bl	800c030 <vTaskStartScheduler>
  
  return osOK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	bd80      	pop	{r7, pc}

0800b326 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b326:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b328:	b089      	sub	sp, #36	@ 0x24
 800b32a:	af04      	add	r7, sp, #16
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d020      	beq.n	800b37a <osThreadCreate+0x54>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01c      	beq.n	800b37a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	685c      	ldr	r4, [r3, #4]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	691e      	ldr	r6, [r3, #16]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b352:	4618      	mov	r0, r3
 800b354:	f7ff ffc8 	bl	800b2e8 <makeFreeRtosPriority>
 800b358:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	695b      	ldr	r3, [r3, #20]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b362:	9202      	str	r2, [sp, #8]
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	9100      	str	r1, [sp, #0]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	4632      	mov	r2, r6
 800b36c:	4629      	mov	r1, r5
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 fc86 	bl	800bc80 <xTaskCreateStatic>
 800b374:	4603      	mov	r3, r0
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	e01c      	b.n	800b3b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	685c      	ldr	r4, [r3, #4]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b386:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b38e:	4618      	mov	r0, r3
 800b390:	f7ff ffaa 	bl	800b2e8 <makeFreeRtosPriority>
 800b394:	4602      	mov	r2, r0
 800b396:	f107 030c 	add.w	r3, r7, #12
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	9200      	str	r2, [sp, #0]
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	4632      	mov	r2, r6
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fcd1 	bl	800bd4c <xTaskCreate>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d001      	beq.n	800b3b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e000      	b.n	800b3b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b3be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b084      	sub	sp, #16
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <osDelay+0x16>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	e000      	b.n	800b3d6 <osDelay+0x18>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f000 fdf2 	bl	800bfc0 <vTaskDelay>
  
  return osOK;
 800b3dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b082      	sub	sp, #8
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d007      	beq.n	800b406 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	f000 fa46 	bl	800b88e <xQueueCreateMutexStatic>
 800b402:	4603      	mov	r3, r0
 800b404:	e003      	b.n	800b40e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b406:	2001      	movs	r0, #1
 800b408:	f000 fa29 	bl	800b85e <xQueueCreateMutex>
 800b40c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	f103 0208 	add.w	r2, r3, #8
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f04f 32ff 	mov.w	r2, #4294967295
 800b42e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f103 0208 	add.w	r2, r3, #8
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f103 0208 	add.w	r2, r3, #8
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b44a:	bf00      	nop
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr

0800b456 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b456:	b480      	push	{r7}
 800b458:	b083      	sub	sp, #12
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	689a      	ldr	r2, [r3, #8]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	601a      	str	r2, [r3, #0]
}
 800b4ac:	bf00      	nop
 800b4ae:	3714      	adds	r7, #20
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ce:	d103      	bne.n	800b4d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691b      	ldr	r3, [r3, #16]
 800b4d4:	60fb      	str	r3, [r7, #12]
 800b4d6:	e00c      	b.n	800b4f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3308      	adds	r3, #8
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	e002      	b.n	800b4e6 <vListInsert+0x2e>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	60fb      	str	r3, [r7, #12]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d2f6      	bcs.n	800b4e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	683a      	ldr	r2, [r7, #0]
 800b500:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	601a      	str	r2, [r3, #0]
}
 800b51e:	bf00      	nop
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b52a:	b480      	push	{r7}
 800b52c:	b085      	sub	sp, #20
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	6892      	ldr	r2, [r2, #8]
 800b540:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	6852      	ldr	r2, [r2, #4]
 800b54a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	429a      	cmp	r2, r3
 800b554:	d103      	bne.n	800b55e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689a      	ldr	r2, [r3, #8]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	1e5a      	subs	r2, r3, #1
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
	...

0800b580 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10d      	bne.n	800b5b0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b598:	b672      	cpsid	i
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	b662      	cpsie	i
 800b5a8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b5aa:	bf00      	nop
 800b5ac:	bf00      	nop
 800b5ae:	e7fd      	b.n	800b5ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b5b0:	f001 fb7c 	bl	800ccac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5bc:	68f9      	ldr	r1, [r7, #12]
 800b5be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b5c0:	fb01 f303 	mul.w	r3, r1, r3
 800b5c4:	441a      	add	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	68f9      	ldr	r1, [r7, #12]
 800b5e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b5e6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ea:	441a      	add	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	22ff      	movs	r2, #255	@ 0xff
 800b5f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	22ff      	movs	r2, #255	@ 0xff
 800b5fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d114      	bne.n	800b630 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d01a      	beq.n	800b644 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	3310      	adds	r3, #16
 800b612:	4618      	mov	r0, r3
 800b614:	f000 ff62 	bl	800c4dc <xTaskRemoveFromEventList>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d012      	beq.n	800b644 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b61e:	4b0d      	ldr	r3, [pc, #52]	@ (800b654 <xQueueGenericReset+0xd4>)
 800b620:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	e009      	b.n	800b644 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	3310      	adds	r3, #16
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff feee 	bl	800b416 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3324      	adds	r3, #36	@ 0x24
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff fee9 	bl	800b416 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b644:	f001 fb68 	bl	800cd18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b648:	2301      	movs	r3, #1
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	e000ed04 	.word	0xe000ed04

0800b658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08e      	sub	sp, #56	@ 0x38
 800b65c:	af02      	add	r7, sp, #8
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10d      	bne.n	800b688 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	b672      	cpsid	i
 800b672:	f383 8811 	msr	BASEPRI, r3
 800b676:	f3bf 8f6f 	isb	sy
 800b67a:	f3bf 8f4f 	dsb	sy
 800b67e:	b662      	cpsie	i
 800b680:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b682:	bf00      	nop
 800b684:	bf00      	nop
 800b686:	e7fd      	b.n	800b684 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10d      	bne.n	800b6aa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b692:	b672      	cpsid	i
 800b694:	f383 8811 	msr	BASEPRI, r3
 800b698:	f3bf 8f6f 	isb	sy
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	b662      	cpsie	i
 800b6a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	e7fd      	b.n	800b6a6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <xQueueGenericCreateStatic+0x5e>
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <xQueueGenericCreateStatic+0x62>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e000      	b.n	800b6bc <xQueueGenericCreateStatic+0x64>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10d      	bne.n	800b6dc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c4:	b672      	cpsid	i
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	b662      	cpsie	i
 800b6d4:	623b      	str	r3, [r7, #32]
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d102      	bne.n	800b6e8 <xQueueGenericCreateStatic+0x90>
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d101      	bne.n	800b6ec <xQueueGenericCreateStatic+0x94>
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	e000      	b.n	800b6ee <xQueueGenericCreateStatic+0x96>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10d      	bne.n	800b70e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f6:	b672      	cpsid	i
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	b662      	cpsie	i
 800b706:	61fb      	str	r3, [r7, #28]
}
 800b708:	bf00      	nop
 800b70a:	bf00      	nop
 800b70c:	e7fd      	b.n	800b70a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b70e:	2348      	movs	r3, #72	@ 0x48
 800b710:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	2b48      	cmp	r3, #72	@ 0x48
 800b716:	d00d      	beq.n	800b734 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71c:	b672      	cpsid	i
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	b662      	cpsie	i
 800b72c:	61bb      	str	r3, [r7, #24]
}
 800b72e:	bf00      	nop
 800b730:	bf00      	nop
 800b732:	e7fd      	b.n	800b730 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b734:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00d      	beq.n	800b75c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b742:	2201      	movs	r2, #1
 800b744:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b748:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	4613      	mov	r3, r2
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	68b9      	ldr	r1, [r7, #8]
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f000 f848 	bl	800b7ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b75c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b75e:	4618      	mov	r0, r3
 800b760:	3730      	adds	r7, #48	@ 0x30
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b766:	b580      	push	{r7, lr}
 800b768:	b08a      	sub	sp, #40	@ 0x28
 800b76a:	af02      	add	r7, sp, #8
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	4613      	mov	r3, r2
 800b772:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10d      	bne.n	800b796 <xQueueGenericCreate+0x30>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77e:	b672      	cpsid	i
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	b662      	cpsie	i
 800b78e:	613b      	str	r3, [r7, #16]
}
 800b790:	bf00      	nop
 800b792:	bf00      	nop
 800b794:	e7fd      	b.n	800b792 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b79c:	2300      	movs	r3, #0
 800b79e:	61fb      	str	r3, [r7, #28]
 800b7a0:	e004      	b.n	800b7ac <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	fb02 f303 	mul.w	r3, r2, r3
 800b7aa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	3348      	adds	r3, #72	@ 0x48
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f001 fb63 	bl	800ce7c <pvPortMalloc>
 800b7b6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d011      	beq.n	800b7e2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	3348      	adds	r3, #72	@ 0x48
 800b7c6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7d0:	79fa      	ldrb	r2, [r7, #7]
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	68b9      	ldr	r1, [r7, #8]
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 f805 	bl	800b7ec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7e2:	69bb      	ldr	r3, [r7, #24]
	}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3720      	adds	r7, #32
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	69ba      	ldr	r2, [r7, #24]
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	e002      	b.n	800b80e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b81a:	2101      	movs	r1, #1
 800b81c:	69b8      	ldr	r0, [r7, #24]
 800b81e:	f7ff feaf 	bl	800b580 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b822:	bf00      	nop
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00e      	beq.n	800b856 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b84a:	2300      	movs	r3, #0
 800b84c:	2200      	movs	r2, #0
 800b84e:	2100      	movs	r1, #0
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f837 	bl	800b8c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b856:	bf00      	nop
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b086      	sub	sp, #24
 800b862:	af00      	add	r7, sp, #0
 800b864:	4603      	mov	r3, r0
 800b866:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b868:	2301      	movs	r3, #1
 800b86a:	617b      	str	r3, [r7, #20]
 800b86c:	2300      	movs	r3, #0
 800b86e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b870:	79fb      	ldrb	r3, [r7, #7]
 800b872:	461a      	mov	r2, r3
 800b874:	6939      	ldr	r1, [r7, #16]
 800b876:	6978      	ldr	r0, [r7, #20]
 800b878:	f7ff ff75 	bl	800b766 <xQueueGenericCreate>
 800b87c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff ffd3 	bl	800b82a <prvInitialiseMutex>

		return xNewQueue;
 800b884:	68fb      	ldr	r3, [r7, #12]
	}
 800b886:	4618      	mov	r0, r3
 800b888:	3718      	adds	r7, #24
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b088      	sub	sp, #32
 800b892:	af02      	add	r7, sp, #8
 800b894:	4603      	mov	r3, r0
 800b896:	6039      	str	r1, [r7, #0]
 800b898:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b89a:	2301      	movs	r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b8a2:	79fb      	ldrb	r3, [r7, #7]
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	6939      	ldr	r1, [r7, #16]
 800b8ac:	6978      	ldr	r0, [r7, #20]
 800b8ae:	f7ff fed3 	bl	800b658 <xQueueGenericCreateStatic>
 800b8b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f7ff ffb8 	bl	800b82a <prvInitialiseMutex>

		return xNewQueue;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
	}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b08e      	sub	sp, #56	@ 0x38
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
 800b8d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10d      	bne.n	800b8fc <xQueueGenericSend+0x38>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e4:	b672      	cpsid	i
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	b662      	cpsie	i
 800b8f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b8f6:	bf00      	nop
 800b8f8:	bf00      	nop
 800b8fa:	e7fd      	b.n	800b8f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d103      	bne.n	800b90a <xQueueGenericSend+0x46>
 800b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <xQueueGenericSend+0x4a>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <xQueueGenericSend+0x4c>
 800b90e:	2300      	movs	r3, #0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10d      	bne.n	800b930 <xQueueGenericSend+0x6c>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b918:	b672      	cpsid	i
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	b662      	cpsie	i
 800b928:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b92a:	bf00      	nop
 800b92c:	bf00      	nop
 800b92e:	e7fd      	b.n	800b92c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	2b02      	cmp	r3, #2
 800b934:	d103      	bne.n	800b93e <xQueueGenericSend+0x7a>
 800b936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d101      	bne.n	800b942 <xQueueGenericSend+0x7e>
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <xQueueGenericSend+0x80>
 800b942:	2300      	movs	r3, #0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10d      	bne.n	800b964 <xQueueGenericSend+0xa0>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94c:	b672      	cpsid	i
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	b662      	cpsie	i
 800b95c:	623b      	str	r3, [r7, #32]
}
 800b95e:	bf00      	nop
 800b960:	bf00      	nop
 800b962:	e7fd      	b.n	800b960 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b964:	f000 ff82 	bl	800c86c <xTaskGetSchedulerState>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d102      	bne.n	800b974 <xQueueGenericSend+0xb0>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <xQueueGenericSend+0xb4>
 800b974:	2301      	movs	r3, #1
 800b976:	e000      	b.n	800b97a <xQueueGenericSend+0xb6>
 800b978:	2300      	movs	r3, #0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10d      	bne.n	800b99a <xQueueGenericSend+0xd6>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b982:	b672      	cpsid	i
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	b662      	cpsie	i
 800b992:	61fb      	str	r3, [r7, #28]
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop
 800b998:	e7fd      	b.n	800b996 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b99a:	f001 f987 	bl	800ccac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d302      	bcc.n	800b9b0 <xQueueGenericSend+0xec>
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d129      	bne.n	800ba04 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b9b6:	f000 f88f 	bl	800bad8 <prvCopyDataToQueue>
 800b9ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d010      	beq.n	800b9e6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c6:	3324      	adds	r3, #36	@ 0x24
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f000 fd87 	bl	800c4dc <xTaskRemoveFromEventList>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d013      	beq.n	800b9fc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b9d4:	4b3f      	ldr	r3, [pc, #252]	@ (800bad4 <xQueueGenericSend+0x210>)
 800b9d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	e00a      	b.n	800b9fc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d007      	beq.n	800b9fc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b9ec:	4b39      	ldr	r3, [pc, #228]	@ (800bad4 <xQueueGenericSend+0x210>)
 800b9ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9f2:	601a      	str	r2, [r3, #0]
 800b9f4:	f3bf 8f4f 	dsb	sy
 800b9f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b9fc:	f001 f98c 	bl	800cd18 <vPortExitCritical>
				return pdPASS;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e063      	b.n	800bacc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d103      	bne.n	800ba12 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba0a:	f001 f985 	bl	800cd18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	e05c      	b.n	800bacc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d106      	bne.n	800ba26 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba18:	f107 0314 	add.w	r3, r7, #20
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 fdc3 	bl	800c5a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba22:	2301      	movs	r3, #1
 800ba24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba26:	f001 f977 	bl	800cd18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba2a:	f000 fb67 	bl	800c0fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba2e:	f001 f93d 	bl	800ccac <vPortEnterCritical>
 800ba32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba38:	b25b      	sxtb	r3, r3
 800ba3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3e:	d103      	bne.n	800ba48 <xQueueGenericSend+0x184>
 800ba40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba4e:	b25b      	sxtb	r3, r3
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d103      	bne.n	800ba5e <xQueueGenericSend+0x19a>
 800ba56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba5e:	f001 f95b 	bl	800cd18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ba62:	1d3a      	adds	r2, r7, #4
 800ba64:	f107 0314 	add.w	r3, r7, #20
 800ba68:	4611      	mov	r1, r2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 fdb2 	bl	800c5d4 <xTaskCheckForTimeOut>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d124      	bne.n	800bac0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ba76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba78:	f000 f8ea 	bl	800bc50 <prvIsQueueFull>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d018      	beq.n	800bab4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ba82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba84:	3310      	adds	r3, #16
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	4611      	mov	r1, r2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 fcfe 	bl	800c48c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ba90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ba92:	f000 f88b 	bl	800bbac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ba96:	f000 fb3f 	bl	800c118 <xTaskResumeAll>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f47f af7c 	bne.w	800b99a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800baa2:	4b0c      	ldr	r3, [pc, #48]	@ (800bad4 <xQueueGenericSend+0x210>)
 800baa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa8:	601a      	str	r2, [r3, #0]
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	e772      	b.n	800b99a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bab6:	f000 f879 	bl	800bbac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800baba:	f000 fb2d 	bl	800c118 <xTaskResumeAll>
 800babe:	e76c      	b.n	800b99a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bac2:	f000 f873 	bl	800bbac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bac6:	f000 fb27 	bl	800c118 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800baca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3738      	adds	r7, #56	@ 0x38
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	e000ed04 	.word	0xe000ed04

0800bad8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bae4:	2300      	movs	r3, #0
 800bae6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10d      	bne.n	800bb12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d14d      	bne.n	800bb9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 fed0 	bl	800c8a8 <xTaskPriorityDisinherit>
 800bb08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	609a      	str	r2, [r3, #8]
 800bb10:	e043      	b.n	800bb9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d119      	bne.n	800bb4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6858      	ldr	r0, [r3, #4]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb20:	461a      	mov	r2, r3
 800bb22:	68b9      	ldr	r1, [r7, #8]
 800bb24:	f001 fd73 	bl	800d60e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	685a      	ldr	r2, [r3, #4]
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb30:	441a      	add	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d32b      	bcc.n	800bb9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	605a      	str	r2, [r3, #4]
 800bb4a:	e026      	b.n	800bb9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	68d8      	ldr	r0, [r3, #12]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb54:	461a      	mov	r2, r3
 800bb56:	68b9      	ldr	r1, [r7, #8]
 800bb58:	f001 fd59 	bl	800d60e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	68da      	ldr	r2, [r3, #12]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb64:	425b      	negs	r3, r3
 800bb66:	441a      	add	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	68da      	ldr	r2, [r3, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d207      	bcs.n	800bb88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	689a      	ldr	r2, [r3, #8]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb80:	425b      	negs	r3, r3
 800bb82:	441a      	add	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d105      	bne.n	800bb9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	1c5a      	adds	r2, r3, #1
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bba2:	697b      	ldr	r3, [r7, #20]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bbb4:	f001 f87a 	bl	800ccac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbc0:	e011      	b.n	800bbe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d012      	beq.n	800bbf0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3324      	adds	r3, #36	@ 0x24
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fc84 	bl	800c4dc <xTaskRemoveFromEventList>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbda:	f000 fd63 	bl	800c6a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	dce9      	bgt.n	800bbc2 <prvUnlockQueue+0x16>
 800bbee:	e000      	b.n	800bbf2 <prvUnlockQueue+0x46>
					break;
 800bbf0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	22ff      	movs	r2, #255	@ 0xff
 800bbf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bbfa:	f001 f88d 	bl	800cd18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bbfe:	f001 f855 	bl	800ccac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc0a:	e011      	b.n	800bc30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d012      	beq.n	800bc3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	3310      	adds	r3, #16
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f000 fc5f 	bl	800c4dc <xTaskRemoveFromEventList>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc24:	f000 fd3e 	bl	800c6a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	dce9      	bgt.n	800bc0c <prvUnlockQueue+0x60>
 800bc38:	e000      	b.n	800bc3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	22ff      	movs	r2, #255	@ 0xff
 800bc40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bc44:	f001 f868 	bl	800cd18 <vPortExitCritical>
}
 800bc48:	bf00      	nop
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc58:	f001 f828 	bl	800ccac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d102      	bne.n	800bc6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e001      	b.n	800bc72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc72:	f001 f851 	bl	800cd18 <vPortExitCritical>

	return xReturn;
 800bc76:	68fb      	ldr	r3, [r7, #12]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08e      	sub	sp, #56	@ 0x38
 800bc84:	af04      	add	r7, sp, #16
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10d      	bne.n	800bcb0 <xTaskCreateStatic+0x30>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc98:	b672      	cpsid	i
 800bc9a:	f383 8811 	msr	BASEPRI, r3
 800bc9e:	f3bf 8f6f 	isb	sy
 800bca2:	f3bf 8f4f 	dsb	sy
 800bca6:	b662      	cpsie	i
 800bca8:	623b      	str	r3, [r7, #32]
}
 800bcaa:	bf00      	nop
 800bcac:	bf00      	nop
 800bcae:	e7fd      	b.n	800bcac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10d      	bne.n	800bcd2 <xTaskCreateStatic+0x52>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcba:	b672      	cpsid	i
 800bcbc:	f383 8811 	msr	BASEPRI, r3
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	b662      	cpsie	i
 800bcca:	61fb      	str	r3, [r7, #28]
}
 800bccc:	bf00      	nop
 800bcce:	bf00      	nop
 800bcd0:	e7fd      	b.n	800bcce <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcd2:	2354      	movs	r3, #84	@ 0x54
 800bcd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	2b54      	cmp	r3, #84	@ 0x54
 800bcda:	d00d      	beq.n	800bcf8 <xTaskCreateStatic+0x78>
	__asm volatile
 800bcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce0:	b672      	cpsid	i
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	b662      	cpsie	i
 800bcf0:	61bb      	str	r3, [r7, #24]
}
 800bcf2:	bf00      	nop
 800bcf4:	bf00      	nop
 800bcf6:	e7fd      	b.n	800bcf4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bcf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d01e      	beq.n	800bd3e <xTaskCreateStatic+0xbe>
 800bd00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d01b      	beq.n	800bd3e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd12:	2202      	movs	r2, #2
 800bd14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd18:	2300      	movs	r3, #0
 800bd1a:	9303      	str	r3, [sp, #12]
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1e:	9302      	str	r3, [sp, #8]
 800bd20:	f107 0314 	add.w	r3, r7, #20
 800bd24:	9301      	str	r3, [sp, #4]
 800bd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	68b9      	ldr	r1, [r7, #8]
 800bd30:	68f8      	ldr	r0, [r7, #12]
 800bd32:	f000 f850 	bl	800bdd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd38:	f000 f8d8 	bl	800beec <prvAddNewTaskToReadyList>
 800bd3c:	e001      	b.n	800bd42 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd42:	697b      	ldr	r3, [r7, #20]
	}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3728      	adds	r7, #40	@ 0x28
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08c      	sub	sp, #48	@ 0x30
 800bd50:	af04      	add	r7, sp, #16
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	603b      	str	r3, [r7, #0]
 800bd58:	4613      	mov	r3, r2
 800bd5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd5c:	88fb      	ldrh	r3, [r7, #6]
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4618      	mov	r0, r3
 800bd62:	f001 f88b 	bl	800ce7c <pvPortMalloc>
 800bd66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00e      	beq.n	800bd8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd6e:	2054      	movs	r0, #84	@ 0x54
 800bd70:	f001 f884 	bl	800ce7c <pvPortMalloc>
 800bd74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd82:	e005      	b.n	800bd90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd84:	6978      	ldr	r0, [r7, #20]
 800bd86:	f001 f947 	bl	800d018 <vPortFree>
 800bd8a:	e001      	b.n	800bd90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d017      	beq.n	800bdc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd9e:	88fa      	ldrh	r2, [r7, #6]
 800bda0:	2300      	movs	r3, #0
 800bda2:	9303      	str	r3, [sp, #12]
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	9302      	str	r3, [sp, #8]
 800bda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdaa:	9301      	str	r3, [sp, #4]
 800bdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	68b9      	ldr	r1, [r7, #8]
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f000 f80e 	bl	800bdd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdba:	69f8      	ldr	r0, [r7, #28]
 800bdbc:	f000 f896 	bl	800beec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	61bb      	str	r3, [r7, #24]
 800bdc4:	e002      	b.n	800bdcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bdc6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bdcc:	69bb      	ldr	r3, [r7, #24]
	}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3720      	adds	r7, #32
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b088      	sub	sp, #32
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800bdee:	440b      	add	r3, r1
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	f023 0307 	bic.w	r3, r3, #7
 800bdfc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	f003 0307 	and.w	r3, r3, #7
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00d      	beq.n	800be24 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	b672      	cpsid	i
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	b662      	cpsie	i
 800be1c:	617b      	str	r3, [r7, #20]
}
 800be1e:	bf00      	nop
 800be20:	bf00      	nop
 800be22:	e7fd      	b.n	800be20 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d01f      	beq.n	800be6a <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be2a:	2300      	movs	r3, #0
 800be2c:	61fb      	str	r3, [r7, #28]
 800be2e:	e012      	b.n	800be56 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	4413      	add	r3, r2
 800be36:	7819      	ldrb	r1, [r3, #0]
 800be38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	4413      	add	r3, r2
 800be3e:	3334      	adds	r3, #52	@ 0x34
 800be40:	460a      	mov	r2, r1
 800be42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	4413      	add	r3, r2
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d006      	beq.n	800be5e <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	3301      	adds	r3, #1
 800be54:	61fb      	str	r3, [r7, #28]
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	2b0f      	cmp	r3, #15
 800be5a:	d9e9      	bls.n	800be30 <prvInitialiseNewTask+0x5a>
 800be5c:	e000      	b.n	800be60 <prvInitialiseNewTask+0x8a>
			{
				break;
 800be5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be62:	2200      	movs	r2, #0
 800be64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be68:	e003      	b.n	800be72 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be74:	2b06      	cmp	r3, #6
 800be76:	d901      	bls.n	800be7c <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be78:	2306      	movs	r3, #6
 800be7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be80:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be86:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800be88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be8a:	2200      	movs	r2, #0
 800be8c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be90:	3304      	adds	r3, #4
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fadf 	bl	800b456 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9a:	3318      	adds	r3, #24
 800be9c:	4618      	mov	r0, r3
 800be9e:	f7ff fada 	bl	800b456 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bea6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beaa:	f1c3 0207 	rsb	r2, r3, #7
 800beae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800beb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beb6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800beb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beba:	2200      	movs	r2, #0
 800bebc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec0:	2200      	movs	r2, #0
 800bec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	68f9      	ldr	r1, [r7, #12]
 800beca:	69b8      	ldr	r0, [r7, #24]
 800becc:	f000 fdde 	bl	800ca8c <pxPortInitialiseStack>
 800bed0:	4602      	mov	r2, r0
 800bed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bed4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d002      	beq.n	800bee2 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bede:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bee2:	bf00      	nop
 800bee4:	3720      	adds	r7, #32
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
	...

0800beec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bef4:	f000 feda 	bl	800ccac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bef8:	4b2a      	ldr	r3, [pc, #168]	@ (800bfa4 <prvAddNewTaskToReadyList+0xb8>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	4a29      	ldr	r2, [pc, #164]	@ (800bfa4 <prvAddNewTaskToReadyList+0xb8>)
 800bf00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf02:	4b29      	ldr	r3, [pc, #164]	@ (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d109      	bne.n	800bf1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf0a:	4a27      	ldr	r2, [pc, #156]	@ (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf10:	4b24      	ldr	r3, [pc, #144]	@ (800bfa4 <prvAddNewTaskToReadyList+0xb8>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	d110      	bne.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf18:	f000 fbe8 	bl	800c6ec <prvInitialiseTaskLists>
 800bf1c:	e00d      	b.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf1e:	4b23      	ldr	r3, [pc, #140]	@ (800bfac <prvAddNewTaskToReadyList+0xc0>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf26:	4b20      	ldr	r3, [pc, #128]	@ (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d802      	bhi.n	800bf3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf34:	4a1c      	ldr	r2, [pc, #112]	@ (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf3a:	4b1d      	ldr	r3, [pc, #116]	@ (800bfb0 <prvAddNewTaskToReadyList+0xc4>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	4a1b      	ldr	r2, [pc, #108]	@ (800bfb0 <prvAddNewTaskToReadyList+0xc4>)
 800bf42:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf48:	2201      	movs	r2, #1
 800bf4a:	409a      	lsls	r2, r3
 800bf4c:	4b19      	ldr	r3, [pc, #100]	@ (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	4a18      	ldr	r2, [pc, #96]	@ (800bfb4 <prvAddNewTaskToReadyList+0xc8>)
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4a15      	ldr	r2, [pc, #84]	@ (800bfb8 <prvAddNewTaskToReadyList+0xcc>)
 800bf64:	441a      	add	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	f7ff fa7f 	bl	800b470 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf72:	f000 fed1 	bl	800cd18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf76:	4b0d      	ldr	r3, [pc, #52]	@ (800bfac <prvAddNewTaskToReadyList+0xc0>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00e      	beq.n	800bf9c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf7e:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa8 <prvAddNewTaskToReadyList+0xbc>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d207      	bcs.n	800bf9c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bfbc <prvAddNewTaskToReadyList+0xd0>)
 800bf8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20000f38 	.word	0x20000f38
 800bfa8:	20000e38 	.word	0x20000e38
 800bfac:	20000f44 	.word	0x20000f44
 800bfb0:	20000f54 	.word	0x20000f54
 800bfb4:	20000f40 	.word	0x20000f40
 800bfb8:	20000e3c 	.word	0x20000e3c
 800bfbc:	e000ed04 	.word	0xe000ed04

0800bfc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d01a      	beq.n	800c008 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bfd2:	4b15      	ldr	r3, [pc, #84]	@ (800c028 <vTaskDelay+0x68>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00d      	beq.n	800bff6 <vTaskDelay+0x36>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfde:	b672      	cpsid	i
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	b662      	cpsie	i
 800bfee:	60bb      	str	r3, [r7, #8]
}
 800bff0:	bf00      	nop
 800bff2:	bf00      	nop
 800bff4:	e7fd      	b.n	800bff2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bff6:	f000 f881 	bl	800c0fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bffa:	2100      	movs	r1, #0
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fcdf 	bl	800c9c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c002:	f000 f889 	bl	800c118 <xTaskResumeAll>
 800c006:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d107      	bne.n	800c01e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800c00e:	4b07      	ldr	r3, [pc, #28]	@ (800c02c <vTaskDelay+0x6c>)
 800c010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c014:	601a      	str	r2, [r3, #0]
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c01e:	bf00      	nop
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	20000f60 	.word	0x20000f60
 800c02c:	e000ed04 	.word	0xe000ed04

0800c030 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b08a      	sub	sp, #40	@ 0x28
 800c034:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c036:	2300      	movs	r3, #0
 800c038:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c03e:	463a      	mov	r2, r7
 800c040:	1d39      	adds	r1, r7, #4
 800c042:	f107 0308 	add.w	r3, r7, #8
 800c046:	4618      	mov	r0, r3
 800c048:	f7f4 fd70 	bl	8000b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	9202      	str	r2, [sp, #8]
 800c054:	9301      	str	r3, [sp, #4]
 800c056:	2300      	movs	r3, #0
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	2300      	movs	r3, #0
 800c05c:	460a      	mov	r2, r1
 800c05e:	4921      	ldr	r1, [pc, #132]	@ (800c0e4 <vTaskStartScheduler+0xb4>)
 800c060:	4821      	ldr	r0, [pc, #132]	@ (800c0e8 <vTaskStartScheduler+0xb8>)
 800c062:	f7ff fe0d 	bl	800bc80 <xTaskCreateStatic>
 800c066:	4603      	mov	r3, r0
 800c068:	4a20      	ldr	r2, [pc, #128]	@ (800c0ec <vTaskStartScheduler+0xbc>)
 800c06a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c06c:	4b1f      	ldr	r3, [pc, #124]	@ (800c0ec <vTaskStartScheduler+0xbc>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c074:	2301      	movs	r3, #1
 800c076:	617b      	str	r3, [r7, #20]
 800c078:	e001      	b.n	800c07e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d118      	bne.n	800c0b6 <vTaskStartScheduler+0x86>
	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c088:	b672      	cpsid	i
 800c08a:	f383 8811 	msr	BASEPRI, r3
 800c08e:	f3bf 8f6f 	isb	sy
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	b662      	cpsie	i
 800c098:	613b      	str	r3, [r7, #16]
}
 800c09a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c09c:	4b14      	ldr	r3, [pc, #80]	@ (800c0f0 <vTaskStartScheduler+0xc0>)
 800c09e:	f04f 32ff 	mov.w	r2, #4294967295
 800c0a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0a4:	4b13      	ldr	r3, [pc, #76]	@ (800c0f4 <vTaskStartScheduler+0xc4>)
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c0aa:	4b13      	ldr	r3, [pc, #76]	@ (800c0f8 <vTaskStartScheduler+0xc8>)
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c0b0:	f000 fd7e 	bl	800cbb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c0b4:	e011      	b.n	800c0da <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0bc:	d10d      	bne.n	800c0da <vTaskStartScheduler+0xaa>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0c2:	b672      	cpsid	i
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	b662      	cpsie	i
 800c0d2:	60fb      	str	r3, [r7, #12]
}
 800c0d4:	bf00      	nop
 800c0d6:	bf00      	nop
 800c0d8:	e7fd      	b.n	800c0d6 <vTaskStartScheduler+0xa6>
}
 800c0da:	bf00      	nop
 800c0dc:	3718      	adds	r7, #24
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	0800e750 	.word	0x0800e750
 800c0e8:	0800c6bd 	.word	0x0800c6bd
 800c0ec:	20000f5c 	.word	0x20000f5c
 800c0f0:	20000f58 	.word	0x20000f58
 800c0f4:	20000f44 	.word	0x20000f44
 800c0f8:	20000f3c 	.word	0x20000f3c

0800c0fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c100:	4b04      	ldr	r3, [pc, #16]	@ (800c114 <vTaskSuspendAll+0x18>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	3301      	adds	r3, #1
 800c106:	4a03      	ldr	r2, [pc, #12]	@ (800c114 <vTaskSuspendAll+0x18>)
 800c108:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c10a:	bf00      	nop
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	20000f60 	.word	0x20000f60

0800c118 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c122:	2300      	movs	r3, #0
 800c124:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c126:	4b43      	ldr	r3, [pc, #268]	@ (800c234 <xTaskResumeAll+0x11c>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10d      	bne.n	800c14a <xTaskResumeAll+0x32>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	b672      	cpsid	i
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	b662      	cpsie	i
 800c142:	603b      	str	r3, [r7, #0]
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop
 800c148:	e7fd      	b.n	800c146 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c14a:	f000 fdaf 	bl	800ccac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c14e:	4b39      	ldr	r3, [pc, #228]	@ (800c234 <xTaskResumeAll+0x11c>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	3b01      	subs	r3, #1
 800c154:	4a37      	ldr	r2, [pc, #220]	@ (800c234 <xTaskResumeAll+0x11c>)
 800c156:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c158:	4b36      	ldr	r3, [pc, #216]	@ (800c234 <xTaskResumeAll+0x11c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d161      	bne.n	800c224 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c160:	4b35      	ldr	r3, [pc, #212]	@ (800c238 <xTaskResumeAll+0x120>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d05d      	beq.n	800c224 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c168:	e02e      	b.n	800c1c8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c16a:	4b34      	ldr	r3, [pc, #208]	@ (800c23c <xTaskResumeAll+0x124>)
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	3318      	adds	r3, #24
 800c176:	4618      	mov	r0, r3
 800c178:	f7ff f9d7 	bl	800b52a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	3304      	adds	r3, #4
 800c180:	4618      	mov	r0, r3
 800c182:	f7ff f9d2 	bl	800b52a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c18a:	2201      	movs	r2, #1
 800c18c:	409a      	lsls	r2, r3
 800c18e:	4b2c      	ldr	r3, [pc, #176]	@ (800c240 <xTaskResumeAll+0x128>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4313      	orrs	r3, r2
 800c194:	4a2a      	ldr	r2, [pc, #168]	@ (800c240 <xTaskResumeAll+0x128>)
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4a27      	ldr	r2, [pc, #156]	@ (800c244 <xTaskResumeAll+0x12c>)
 800c1a6:	441a      	add	r2, r3
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7ff f95e 	bl	800b470 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1b8:	4b23      	ldr	r3, [pc, #140]	@ (800c248 <xTaskResumeAll+0x130>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d302      	bcc.n	800c1c8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c1c2:	4b22      	ldr	r3, [pc, #136]	@ (800c24c <xTaskResumeAll+0x134>)
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1c8:	4b1c      	ldr	r3, [pc, #112]	@ (800c23c <xTaskResumeAll+0x124>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d1cc      	bne.n	800c16a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c1d6:	f000 fb29 	bl	800c82c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c1da:	4b1d      	ldr	r3, [pc, #116]	@ (800c250 <xTaskResumeAll+0x138>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d010      	beq.n	800c208 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c1e6:	f000 f837 	bl	800c258 <xTaskIncrementTick>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c1f0:	4b16      	ldr	r3, [pc, #88]	@ (800c24c <xTaskResumeAll+0x134>)
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d1f1      	bne.n	800c1e6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c202:	4b13      	ldr	r3, [pc, #76]	@ (800c250 <xTaskResumeAll+0x138>)
 800c204:	2200      	movs	r2, #0
 800c206:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c208:	4b10      	ldr	r3, [pc, #64]	@ (800c24c <xTaskResumeAll+0x134>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d009      	beq.n	800c224 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c210:	2301      	movs	r3, #1
 800c212:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c214:	4b0f      	ldr	r3, [pc, #60]	@ (800c254 <xTaskResumeAll+0x13c>)
 800c216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c21a:	601a      	str	r2, [r3, #0]
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c224:	f000 fd78 	bl	800cd18 <vPortExitCritical>

	return xAlreadyYielded;
 800c228:	68bb      	ldr	r3, [r7, #8]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20000f60 	.word	0x20000f60
 800c238:	20000f38 	.word	0x20000f38
 800c23c:	20000ef8 	.word	0x20000ef8
 800c240:	20000f40 	.word	0x20000f40
 800c244:	20000e3c 	.word	0x20000e3c
 800c248:	20000e38 	.word	0x20000e38
 800c24c:	20000f4c 	.word	0x20000f4c
 800c250:	20000f48 	.word	0x20000f48
 800c254:	e000ed04 	.word	0xe000ed04

0800c258 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c25e:	2300      	movs	r3, #0
 800c260:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c262:	4b50      	ldr	r3, [pc, #320]	@ (800c3a4 <xTaskIncrementTick+0x14c>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f040 808b 	bne.w	800c382 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c26c:	4b4e      	ldr	r3, [pc, #312]	@ (800c3a8 <xTaskIncrementTick+0x150>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3301      	adds	r3, #1
 800c272:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c274:	4a4c      	ldr	r2, [pc, #304]	@ (800c3a8 <xTaskIncrementTick+0x150>)
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d123      	bne.n	800c2c8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c280:	4b4a      	ldr	r3, [pc, #296]	@ (800c3ac <xTaskIncrementTick+0x154>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00d      	beq.n	800c2a6 <xTaskIncrementTick+0x4e>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c28e:	b672      	cpsid	i
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	b662      	cpsie	i
 800c29e:	603b      	str	r3, [r7, #0]
}
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	e7fd      	b.n	800c2a2 <xTaskIncrementTick+0x4a>
 800c2a6:	4b41      	ldr	r3, [pc, #260]	@ (800c3ac <xTaskIncrementTick+0x154>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	4b40      	ldr	r3, [pc, #256]	@ (800c3b0 <xTaskIncrementTick+0x158>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a3e      	ldr	r2, [pc, #248]	@ (800c3ac <xTaskIncrementTick+0x154>)
 800c2b2:	6013      	str	r3, [r2, #0]
 800c2b4:	4a3e      	ldr	r2, [pc, #248]	@ (800c3b0 <xTaskIncrementTick+0x158>)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6013      	str	r3, [r2, #0]
 800c2ba:	4b3e      	ldr	r3, [pc, #248]	@ (800c3b4 <xTaskIncrementTick+0x15c>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	4a3c      	ldr	r2, [pc, #240]	@ (800c3b4 <xTaskIncrementTick+0x15c>)
 800c2c2:	6013      	str	r3, [r2, #0]
 800c2c4:	f000 fab2 	bl	800c82c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c2c8:	4b3b      	ldr	r3, [pc, #236]	@ (800c3b8 <xTaskIncrementTick+0x160>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	693a      	ldr	r2, [r7, #16]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d348      	bcc.n	800c364 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2d2:	4b36      	ldr	r3, [pc, #216]	@ (800c3ac <xTaskIncrementTick+0x154>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d104      	bne.n	800c2e6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2dc:	4b36      	ldr	r3, [pc, #216]	@ (800c3b8 <xTaskIncrementTick+0x160>)
 800c2de:	f04f 32ff 	mov.w	r2, #4294967295
 800c2e2:	601a      	str	r2, [r3, #0]
					break;
 800c2e4:	e03e      	b.n	800c364 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2e6:	4b31      	ldr	r3, [pc, #196]	@ (800c3ac <xTaskIncrementTick+0x154>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d203      	bcs.n	800c306 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c2fe:	4a2e      	ldr	r2, [pc, #184]	@ (800c3b8 <xTaskIncrementTick+0x160>)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c304:	e02e      	b.n	800c364 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	3304      	adds	r3, #4
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7ff f90d 	bl	800b52a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c314:	2b00      	cmp	r3, #0
 800c316:	d004      	beq.n	800c322 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	3318      	adds	r3, #24
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff f904 	bl	800b52a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c326:	2201      	movs	r2, #1
 800c328:	409a      	lsls	r2, r3
 800c32a:	4b24      	ldr	r3, [pc, #144]	@ (800c3bc <xTaskIncrementTick+0x164>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4313      	orrs	r3, r2
 800c330:	4a22      	ldr	r2, [pc, #136]	@ (800c3bc <xTaskIncrementTick+0x164>)
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c338:	4613      	mov	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4a1f      	ldr	r2, [pc, #124]	@ (800c3c0 <xTaskIncrementTick+0x168>)
 800c342:	441a      	add	r2, r3
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	3304      	adds	r3, #4
 800c348:	4619      	mov	r1, r3
 800c34a:	4610      	mov	r0, r2
 800c34c:	f7ff f890 	bl	800b470 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c354:	4b1b      	ldr	r3, [pc, #108]	@ (800c3c4 <xTaskIncrementTick+0x16c>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d3b9      	bcc.n	800c2d2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c35e:	2301      	movs	r3, #1
 800c360:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c362:	e7b6      	b.n	800c2d2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c364:	4b17      	ldr	r3, [pc, #92]	@ (800c3c4 <xTaskIncrementTick+0x16c>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c36a:	4915      	ldr	r1, [pc, #84]	@ (800c3c0 <xTaskIncrementTick+0x168>)
 800c36c:	4613      	mov	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4413      	add	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	440b      	add	r3, r1
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d907      	bls.n	800c38c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c37c:	2301      	movs	r3, #1
 800c37e:	617b      	str	r3, [r7, #20]
 800c380:	e004      	b.n	800c38c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c382:	4b11      	ldr	r3, [pc, #68]	@ (800c3c8 <xTaskIncrementTick+0x170>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	3301      	adds	r3, #1
 800c388:	4a0f      	ldr	r2, [pc, #60]	@ (800c3c8 <xTaskIncrementTick+0x170>)
 800c38a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c38c:	4b0f      	ldr	r3, [pc, #60]	@ (800c3cc <xTaskIncrementTick+0x174>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d001      	beq.n	800c398 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c394:	2301      	movs	r3, #1
 800c396:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c398:	697b      	ldr	r3, [r7, #20]
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3718      	adds	r7, #24
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000f60 	.word	0x20000f60
 800c3a8:	20000f3c 	.word	0x20000f3c
 800c3ac:	20000ef0 	.word	0x20000ef0
 800c3b0:	20000ef4 	.word	0x20000ef4
 800c3b4:	20000f50 	.word	0x20000f50
 800c3b8:	20000f58 	.word	0x20000f58
 800c3bc:	20000f40 	.word	0x20000f40
 800c3c0:	20000e3c 	.word	0x20000e3c
 800c3c4:	20000e38 	.word	0x20000e38
 800c3c8:	20000f48 	.word	0x20000f48
 800c3cc:	20000f4c 	.word	0x20000f4c

0800c3d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b087      	sub	sp, #28
 800c3d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c3d6:	4b28      	ldr	r3, [pc, #160]	@ (800c478 <vTaskSwitchContext+0xa8>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d003      	beq.n	800c3e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c3de:	4b27      	ldr	r3, [pc, #156]	@ (800c47c <vTaskSwitchContext+0xac>)
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c3e4:	e042      	b.n	800c46c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c3e6:	4b25      	ldr	r3, [pc, #148]	@ (800c47c <vTaskSwitchContext+0xac>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ec:	4b24      	ldr	r3, [pc, #144]	@ (800c480 <vTaskSwitchContext+0xb0>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	fab3 f383 	clz	r3, r3
 800c3f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c3fa:	7afb      	ldrb	r3, [r7, #11]
 800c3fc:	f1c3 031f 	rsb	r3, r3, #31
 800c400:	617b      	str	r3, [r7, #20]
 800c402:	4920      	ldr	r1, [pc, #128]	@ (800c484 <vTaskSwitchContext+0xb4>)
 800c404:	697a      	ldr	r2, [r7, #20]
 800c406:	4613      	mov	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	440b      	add	r3, r1
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10d      	bne.n	800c432 <vTaskSwitchContext+0x62>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41a:	b672      	cpsid	i
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	b662      	cpsie	i
 800c42a:	607b      	str	r3, [r7, #4]
}
 800c42c:	bf00      	nop
 800c42e:	bf00      	nop
 800c430:	e7fd      	b.n	800c42e <vTaskSwitchContext+0x5e>
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	4613      	mov	r3, r2
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4413      	add	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4a11      	ldr	r2, [pc, #68]	@ (800c484 <vTaskSwitchContext+0xb4>)
 800c43e:	4413      	add	r3, r2
 800c440:	613b      	str	r3, [r7, #16]
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	605a      	str	r2, [r3, #4]
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	685a      	ldr	r2, [r3, #4]
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	3308      	adds	r3, #8
 800c454:	429a      	cmp	r2, r3
 800c456:	d104      	bne.n	800c462 <vTaskSwitchContext+0x92>
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	685a      	ldr	r2, [r3, #4]
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	605a      	str	r2, [r3, #4]
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	4a07      	ldr	r2, [pc, #28]	@ (800c488 <vTaskSwitchContext+0xb8>)
 800c46a:	6013      	str	r3, [r2, #0]
}
 800c46c:	bf00      	nop
 800c46e:	371c      	adds	r7, #28
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	20000f60 	.word	0x20000f60
 800c47c:	20000f4c 	.word	0x20000f4c
 800c480:	20000f40 	.word	0x20000f40
 800c484:	20000e3c 	.word	0x20000e3c
 800c488:	20000e38 	.word	0x20000e38

0800c48c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10d      	bne.n	800c4b8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a0:	b672      	cpsid	i
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	b662      	cpsie	i
 800c4b0:	60fb      	str	r3, [r7, #12]
}
 800c4b2:	bf00      	nop
 800c4b4:	bf00      	nop
 800c4b6:	e7fd      	b.n	800c4b4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4b8:	4b07      	ldr	r3, [pc, #28]	@ (800c4d8 <vTaskPlaceOnEventList+0x4c>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3318      	adds	r3, #24
 800c4be:	4619      	mov	r1, r3
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7fe fff9 	bl	800b4b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4c6:	2101      	movs	r1, #1
 800c4c8:	6838      	ldr	r0, [r7, #0]
 800c4ca:	f000 fa79 	bl	800c9c0 <prvAddCurrentTaskToDelayedList>
}
 800c4ce:	bf00      	nop
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	20000e38 	.word	0x20000e38

0800c4dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d10d      	bne.n	800c50e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f6:	b672      	cpsid	i
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	b662      	cpsie	i
 800c506:	60fb      	str	r3, [r7, #12]
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	e7fd      	b.n	800c50a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	3318      	adds	r3, #24
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff f809 	bl	800b52a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c518:	4b1d      	ldr	r3, [pc, #116]	@ (800c590 <xTaskRemoveFromEventList+0xb4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d11c      	bne.n	800c55a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	3304      	adds	r3, #4
 800c524:	4618      	mov	r0, r3
 800c526:	f7ff f800 	bl	800b52a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c52e:	2201      	movs	r2, #1
 800c530:	409a      	lsls	r2, r3
 800c532:	4b18      	ldr	r3, [pc, #96]	@ (800c594 <xTaskRemoveFromEventList+0xb8>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4313      	orrs	r3, r2
 800c538:	4a16      	ldr	r2, [pc, #88]	@ (800c594 <xTaskRemoveFromEventList+0xb8>)
 800c53a:	6013      	str	r3, [r2, #0]
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c540:	4613      	mov	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4a13      	ldr	r2, [pc, #76]	@ (800c598 <xTaskRemoveFromEventList+0xbc>)
 800c54a:	441a      	add	r2, r3
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	3304      	adds	r3, #4
 800c550:	4619      	mov	r1, r3
 800c552:	4610      	mov	r0, r2
 800c554:	f7fe ff8c 	bl	800b470 <vListInsertEnd>
 800c558:	e005      	b.n	800c566 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	3318      	adds	r3, #24
 800c55e:	4619      	mov	r1, r3
 800c560:	480e      	ldr	r0, [pc, #56]	@ (800c59c <xTaskRemoveFromEventList+0xc0>)
 800c562:	f7fe ff85 	bl	800b470 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c56a:	4b0d      	ldr	r3, [pc, #52]	@ (800c5a0 <xTaskRemoveFromEventList+0xc4>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c570:	429a      	cmp	r2, r3
 800c572:	d905      	bls.n	800c580 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c574:	2301      	movs	r3, #1
 800c576:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c578:	4b0a      	ldr	r3, [pc, #40]	@ (800c5a4 <xTaskRemoveFromEventList+0xc8>)
 800c57a:	2201      	movs	r2, #1
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	e001      	b.n	800c584 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c580:	2300      	movs	r3, #0
 800c582:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c584:	697b      	ldr	r3, [r7, #20]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3718      	adds	r7, #24
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
 800c58e:	bf00      	nop
 800c590:	20000f60 	.word	0x20000f60
 800c594:	20000f40 	.word	0x20000f40
 800c598:	20000e3c 	.word	0x20000e3c
 800c59c:	20000ef8 	.word	0x20000ef8
 800c5a0:	20000e38 	.word	0x20000e38
 800c5a4:	20000f4c 	.word	0x20000f4c

0800c5a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5b0:	4b06      	ldr	r3, [pc, #24]	@ (800c5cc <vTaskInternalSetTimeOutState+0x24>)
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5b8:	4b05      	ldr	r3, [pc, #20]	@ (800c5d0 <vTaskInternalSetTimeOutState+0x28>)
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	605a      	str	r2, [r3, #4]
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	20000f50 	.word	0x20000f50
 800c5d0:	20000f3c 	.word	0x20000f3c

0800c5d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b088      	sub	sp, #32
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d10d      	bne.n	800c600 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800c5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e8:	b672      	cpsid	i
 800c5ea:	f383 8811 	msr	BASEPRI, r3
 800c5ee:	f3bf 8f6f 	isb	sy
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	b662      	cpsie	i
 800c5f8:	613b      	str	r3, [r7, #16]
}
 800c5fa:	bf00      	nop
 800c5fc:	bf00      	nop
 800c5fe:	e7fd      	b.n	800c5fc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10d      	bne.n	800c622 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800c606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c60a:	b672      	cpsid	i
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	b662      	cpsie	i
 800c61a:	60fb      	str	r3, [r7, #12]
}
 800c61c:	bf00      	nop
 800c61e:	bf00      	nop
 800c620:	e7fd      	b.n	800c61e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800c622:	f000 fb43 	bl	800ccac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c626:	4b1d      	ldr	r3, [pc, #116]	@ (800c69c <xTaskCheckForTimeOut+0xc8>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	69ba      	ldr	r2, [r7, #24]
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c63e:	d102      	bne.n	800c646 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c640:	2300      	movs	r3, #0
 800c642:	61fb      	str	r3, [r7, #28]
 800c644:	e023      	b.n	800c68e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	4b15      	ldr	r3, [pc, #84]	@ (800c6a0 <xTaskCheckForTimeOut+0xcc>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d007      	beq.n	800c662 <xTaskCheckForTimeOut+0x8e>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	69ba      	ldr	r2, [r7, #24]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d302      	bcc.n	800c662 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c65c:	2301      	movs	r3, #1
 800c65e:	61fb      	str	r3, [r7, #28]
 800c660:	e015      	b.n	800c68e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	697a      	ldr	r2, [r7, #20]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d20b      	bcs.n	800c684 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	1ad2      	subs	r2, r2, r3
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff ff95 	bl	800c5a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c67e:	2300      	movs	r3, #0
 800c680:	61fb      	str	r3, [r7, #28]
 800c682:	e004      	b.n	800c68e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	2200      	movs	r2, #0
 800c688:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c68a:	2301      	movs	r3, #1
 800c68c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c68e:	f000 fb43 	bl	800cd18 <vPortExitCritical>

	return xReturn;
 800c692:	69fb      	ldr	r3, [r7, #28]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3720      	adds	r7, #32
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	20000f3c 	.word	0x20000f3c
 800c6a0:	20000f50 	.word	0x20000f50

0800c6a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6a8:	4b03      	ldr	r3, [pc, #12]	@ (800c6b8 <vTaskMissedYield+0x14>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	601a      	str	r2, [r3, #0]
}
 800c6ae:	bf00      	nop
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr
 800c6b8:	20000f4c 	.word	0x20000f4c

0800c6bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6c4:	f000 f852 	bl	800c76c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6c8:	4b06      	ldr	r3, [pc, #24]	@ (800c6e4 <prvIdleTask+0x28>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d9f9      	bls.n	800c6c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6d0:	4b05      	ldr	r3, [pc, #20]	@ (800c6e8 <prvIdleTask+0x2c>)
 800c6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6d6:	601a      	str	r2, [r3, #0]
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6e0:	e7f0      	b.n	800c6c4 <prvIdleTask+0x8>
 800c6e2:	bf00      	nop
 800c6e4:	20000e3c 	.word	0x20000e3c
 800c6e8:	e000ed04 	.word	0xe000ed04

0800c6ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	607b      	str	r3, [r7, #4]
 800c6f6:	e00c      	b.n	800c712 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4a12      	ldr	r2, [pc, #72]	@ (800c74c <prvInitialiseTaskLists+0x60>)
 800c704:	4413      	add	r3, r2
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe fe85 	bl	800b416 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3301      	adds	r3, #1
 800c710:	607b      	str	r3, [r7, #4]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2b06      	cmp	r3, #6
 800c716:	d9ef      	bls.n	800c6f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c718:	480d      	ldr	r0, [pc, #52]	@ (800c750 <prvInitialiseTaskLists+0x64>)
 800c71a:	f7fe fe7c 	bl	800b416 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c71e:	480d      	ldr	r0, [pc, #52]	@ (800c754 <prvInitialiseTaskLists+0x68>)
 800c720:	f7fe fe79 	bl	800b416 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c724:	480c      	ldr	r0, [pc, #48]	@ (800c758 <prvInitialiseTaskLists+0x6c>)
 800c726:	f7fe fe76 	bl	800b416 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c72a:	480c      	ldr	r0, [pc, #48]	@ (800c75c <prvInitialiseTaskLists+0x70>)
 800c72c:	f7fe fe73 	bl	800b416 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c730:	480b      	ldr	r0, [pc, #44]	@ (800c760 <prvInitialiseTaskLists+0x74>)
 800c732:	f7fe fe70 	bl	800b416 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c736:	4b0b      	ldr	r3, [pc, #44]	@ (800c764 <prvInitialiseTaskLists+0x78>)
 800c738:	4a05      	ldr	r2, [pc, #20]	@ (800c750 <prvInitialiseTaskLists+0x64>)
 800c73a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c73c:	4b0a      	ldr	r3, [pc, #40]	@ (800c768 <prvInitialiseTaskLists+0x7c>)
 800c73e:	4a05      	ldr	r2, [pc, #20]	@ (800c754 <prvInitialiseTaskLists+0x68>)
 800c740:	601a      	str	r2, [r3, #0]
}
 800c742:	bf00      	nop
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20000e3c 	.word	0x20000e3c
 800c750:	20000ec8 	.word	0x20000ec8
 800c754:	20000edc 	.word	0x20000edc
 800c758:	20000ef8 	.word	0x20000ef8
 800c75c:	20000f0c 	.word	0x20000f0c
 800c760:	20000f24 	.word	0x20000f24
 800c764:	20000ef0 	.word	0x20000ef0
 800c768:	20000ef4 	.word	0x20000ef4

0800c76c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c772:	e019      	b.n	800c7a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c774:	f000 fa9a 	bl	800ccac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c778:	4b10      	ldr	r3, [pc, #64]	@ (800c7bc <prvCheckTasksWaitingTermination+0x50>)
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3304      	adds	r3, #4
 800c784:	4618      	mov	r0, r3
 800c786:	f7fe fed0 	bl	800b52a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c78a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7c0 <prvCheckTasksWaitingTermination+0x54>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3b01      	subs	r3, #1
 800c790:	4a0b      	ldr	r2, [pc, #44]	@ (800c7c0 <prvCheckTasksWaitingTermination+0x54>)
 800c792:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c794:	4b0b      	ldr	r3, [pc, #44]	@ (800c7c4 <prvCheckTasksWaitingTermination+0x58>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3b01      	subs	r3, #1
 800c79a:	4a0a      	ldr	r2, [pc, #40]	@ (800c7c4 <prvCheckTasksWaitingTermination+0x58>)
 800c79c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c79e:	f000 fabb 	bl	800cd18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f810 	bl	800c7c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7a8:	4b06      	ldr	r3, [pc, #24]	@ (800c7c4 <prvCheckTasksWaitingTermination+0x58>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1e1      	bne.n	800c774 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	20000f0c 	.word	0x20000f0c
 800c7c0:	20000f38 	.word	0x20000f38
 800c7c4:	20000f20 	.word	0x20000f20

0800c7c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d108      	bne.n	800c7ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f000 fc1a 	bl	800d018 <vPortFree>
				vPortFree( pxTCB );
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fc17 	bl	800d018 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7ea:	e01b      	b.n	800c824 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d103      	bne.n	800c7fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fc0e 	bl	800d018 <vPortFree>
	}
 800c7fc:	e012      	b.n	800c824 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800c804:	2b02      	cmp	r3, #2
 800c806:	d00d      	beq.n	800c824 <prvDeleteTCB+0x5c>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80c:	b672      	cpsid	i
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	b662      	cpsie	i
 800c81c:	60fb      	str	r3, [r7, #12]
}
 800c81e:	bf00      	nop
 800c820:	bf00      	nop
 800c822:	e7fd      	b.n	800c820 <prvDeleteTCB+0x58>
	}
 800c824:	bf00      	nop
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c832:	4b0c      	ldr	r3, [pc, #48]	@ (800c864 <prvResetNextTaskUnblockTime+0x38>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d104      	bne.n	800c846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c83c:	4b0a      	ldr	r3, [pc, #40]	@ (800c868 <prvResetNextTaskUnblockTime+0x3c>)
 800c83e:	f04f 32ff 	mov.w	r2, #4294967295
 800c842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c844:	e008      	b.n	800c858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c846:	4b07      	ldr	r3, [pc, #28]	@ (800c864 <prvResetNextTaskUnblockTime+0x38>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4a04      	ldr	r2, [pc, #16]	@ (800c868 <prvResetNextTaskUnblockTime+0x3c>)
 800c856:	6013      	str	r3, [r2, #0]
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr
 800c864:	20000ef0 	.word	0x20000ef0
 800c868:	20000f58 	.word	0x20000f58

0800c86c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c872:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a0 <xTaskGetSchedulerState+0x34>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d102      	bne.n	800c880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c87a:	2301      	movs	r3, #1
 800c87c:	607b      	str	r3, [r7, #4]
 800c87e:	e008      	b.n	800c892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c880:	4b08      	ldr	r3, [pc, #32]	@ (800c8a4 <xTaskGetSchedulerState+0x38>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d102      	bne.n	800c88e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c888:	2302      	movs	r3, #2
 800c88a:	607b      	str	r3, [r7, #4]
 800c88c:	e001      	b.n	800c892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c88e:	2300      	movs	r3, #0
 800c890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c892:	687b      	ldr	r3, [r7, #4]
	}
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	20000f44 	.word	0x20000f44
 800c8a4:	20000f60 	.word	0x20000f60

0800c8a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d074      	beq.n	800c9a8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8be:	4b3d      	ldr	r3, [pc, #244]	@ (800c9b4 <xTaskPriorityDisinherit+0x10c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	693a      	ldr	r2, [r7, #16]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d00d      	beq.n	800c8e4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800c8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8cc:	b672      	cpsid	i
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	b662      	cpsie	i
 800c8dc:	60fb      	str	r3, [r7, #12]
}
 800c8de:	bf00      	nop
 800c8e0:	bf00      	nop
 800c8e2:	e7fd      	b.n	800c8e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10d      	bne.n	800c908 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f0:	b672      	cpsid	i
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	b662      	cpsie	i
 800c900:	60bb      	str	r3, [r7, #8]
}
 800c902:	bf00      	nop
 800c904:	bf00      	nop
 800c906:	e7fd      	b.n	800c904 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c90c:	1e5a      	subs	r2, r3, #1
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d044      	beq.n	800c9a8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c922:	2b00      	cmp	r3, #0
 800c924:	d140      	bne.n	800c9a8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	3304      	adds	r3, #4
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fe fdfd 	bl	800b52a <uxListRemove>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d115      	bne.n	800c962 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c93a:	491f      	ldr	r1, [pc, #124]	@ (800c9b8 <xTaskPriorityDisinherit+0x110>)
 800c93c:	4613      	mov	r3, r2
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	4413      	add	r3, r2
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	440b      	add	r3, r1
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d10a      	bne.n	800c962 <xTaskPriorityDisinherit+0xba>
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c950:	2201      	movs	r2, #1
 800c952:	fa02 f303 	lsl.w	r3, r2, r3
 800c956:	43da      	mvns	r2, r3
 800c958:	4b18      	ldr	r3, [pc, #96]	@ (800c9bc <xTaskPriorityDisinherit+0x114>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4013      	ands	r3, r2
 800c95e:	4a17      	ldr	r2, [pc, #92]	@ (800c9bc <xTaskPriorityDisinherit+0x114>)
 800c960:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c96e:	f1c3 0207 	rsb	r2, r3, #7
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c97a:	2201      	movs	r2, #1
 800c97c:	409a      	lsls	r2, r3
 800c97e:	4b0f      	ldr	r3, [pc, #60]	@ (800c9bc <xTaskPriorityDisinherit+0x114>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4313      	orrs	r3, r2
 800c984:	4a0d      	ldr	r2, [pc, #52]	@ (800c9bc <xTaskPriorityDisinherit+0x114>)
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c98c:	4613      	mov	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4a08      	ldr	r2, [pc, #32]	@ (800c9b8 <xTaskPriorityDisinherit+0x110>)
 800c996:	441a      	add	r2, r3
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4619      	mov	r1, r3
 800c99e:	4610      	mov	r0, r2
 800c9a0:	f7fe fd66 	bl	800b470 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9a8:	697b      	ldr	r3, [r7, #20]
	}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	20000e38 	.word	0x20000e38
 800c9b8:	20000e3c 	.word	0x20000e3c
 800c9bc:	20000f40 	.word	0x20000f40

0800c9c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b084      	sub	sp, #16
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c9ca:	4b29      	ldr	r3, [pc, #164]	@ (800ca70 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9d0:	4b28      	ldr	r3, [pc, #160]	@ (800ca74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fda7 	bl	800b52a <uxListRemove>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10b      	bne.n	800c9fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c9e2:	4b24      	ldr	r3, [pc, #144]	@ (800ca74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ee:	43da      	mvns	r2, r3
 800c9f0:	4b21      	ldr	r3, [pc, #132]	@ (800ca78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4013      	ands	r3, r2
 800c9f6:	4a20      	ldr	r2, [pc, #128]	@ (800ca78 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c9f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca00:	d10a      	bne.n	800ca18 <prvAddCurrentTaskToDelayedList+0x58>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d007      	beq.n	800ca18 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca08:	4b1a      	ldr	r3, [pc, #104]	@ (800ca74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3304      	adds	r3, #4
 800ca0e:	4619      	mov	r1, r3
 800ca10:	481a      	ldr	r0, [pc, #104]	@ (800ca7c <prvAddCurrentTaskToDelayedList+0xbc>)
 800ca12:	f7fe fd2d 	bl	800b470 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca16:	e026      	b.n	800ca66 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca20:	4b14      	ldr	r3, [pc, #80]	@ (800ca74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d209      	bcs.n	800ca44 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca30:	4b13      	ldr	r3, [pc, #76]	@ (800ca80 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	4b0f      	ldr	r3, [pc, #60]	@ (800ca74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	3304      	adds	r3, #4
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	4610      	mov	r0, r2
 800ca3e:	f7fe fd3b 	bl	800b4b8 <vListInsert>
}
 800ca42:	e010      	b.n	800ca66 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca44:	4b0f      	ldr	r3, [pc, #60]	@ (800ca84 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	4b0a      	ldr	r3, [pc, #40]	@ (800ca74 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4619      	mov	r1, r3
 800ca50:	4610      	mov	r0, r2
 800ca52:	f7fe fd31 	bl	800b4b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca56:	4b0c      	ldr	r3, [pc, #48]	@ (800ca88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d202      	bcs.n	800ca66 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ca60:	4a09      	ldr	r2, [pc, #36]	@ (800ca88 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	6013      	str	r3, [r2, #0]
}
 800ca66:	bf00      	nop
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	20000f3c 	.word	0x20000f3c
 800ca74:	20000e38 	.word	0x20000e38
 800ca78:	20000f40 	.word	0x20000f40
 800ca7c:	20000f24 	.word	0x20000f24
 800ca80:	20000ef4 	.word	0x20000ef4
 800ca84:	20000ef0 	.word	0x20000ef0
 800ca88:	20000f58 	.word	0x20000f58

0800ca8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	3b04      	subs	r3, #4
 800ca9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800caa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	3b04      	subs	r3, #4
 800caaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	f023 0201 	bic.w	r2, r3, #1
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3b04      	subs	r3, #4
 800caba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cabc:	4a0c      	ldr	r2, [pc, #48]	@ (800caf0 <pxPortInitialiseStack+0x64>)
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	3b14      	subs	r3, #20
 800cac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3b04      	subs	r3, #4
 800cad2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f06f 0202 	mvn.w	r2, #2
 800cada:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	3b20      	subs	r3, #32
 800cae0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cae2:	68fb      	ldr	r3, [r7, #12]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	0800caf5 	.word	0x0800caf5

0800caf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cafa:	2300      	movs	r3, #0
 800cafc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cafe:	4b15      	ldr	r3, [pc, #84]	@ (800cb54 <prvTaskExitError+0x60>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb06:	d00d      	beq.n	800cb24 <prvTaskExitError+0x30>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0c:	b672      	cpsid	i
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	b662      	cpsie	i
 800cb1c:	60fb      	str	r3, [r7, #12]
}
 800cb1e:	bf00      	nop
 800cb20:	bf00      	nop
 800cb22:	e7fd      	b.n	800cb20 <prvTaskExitError+0x2c>
	__asm volatile
 800cb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb28:	b672      	cpsid	i
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	b662      	cpsie	i
 800cb38:	60bb      	str	r3, [r7, #8]
}
 800cb3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb3c:	bf00      	nop
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d0fc      	beq.n	800cb3e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb44:	bf00      	nop
 800cb46:	bf00      	nop
 800cb48:	3714      	adds	r7, #20
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
 800cb52:	bf00      	nop
 800cb54:	20000058 	.word	0x20000058
	...

0800cb60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb60:	4b07      	ldr	r3, [pc, #28]	@ (800cb80 <pxCurrentTCBConst2>)
 800cb62:	6819      	ldr	r1, [r3, #0]
 800cb64:	6808      	ldr	r0, [r1, #0]
 800cb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb6a:	f380 8809 	msr	PSP, r0
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f04f 0000 	mov.w	r0, #0
 800cb76:	f380 8811 	msr	BASEPRI, r0
 800cb7a:	4770      	bx	lr
 800cb7c:	f3af 8000 	nop.w

0800cb80 <pxCurrentTCBConst2>:
 800cb80:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop

0800cb88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb88:	4808      	ldr	r0, [pc, #32]	@ (800cbac <prvPortStartFirstTask+0x24>)
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	6800      	ldr	r0, [r0, #0]
 800cb8e:	f380 8808 	msr	MSP, r0
 800cb92:	f04f 0000 	mov.w	r0, #0
 800cb96:	f380 8814 	msr	CONTROL, r0
 800cb9a:	b662      	cpsie	i
 800cb9c:	b661      	cpsie	f
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	df00      	svc	0
 800cba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbaa:	bf00      	nop
 800cbac:	e000ed08 	.word	0xe000ed08

0800cbb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cbb6:	4b37      	ldr	r3, [pc, #220]	@ (800cc94 <xPortStartScheduler+0xe4>)
 800cbb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	22ff      	movs	r2, #255	@ 0xff
 800cbc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cbd0:	78fb      	ldrb	r3, [r7, #3]
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cbd8:	b2da      	uxtb	r2, r3
 800cbda:	4b2f      	ldr	r3, [pc, #188]	@ (800cc98 <xPortStartScheduler+0xe8>)
 800cbdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbde:	4b2f      	ldr	r3, [pc, #188]	@ (800cc9c <xPortStartScheduler+0xec>)
 800cbe0:	2207      	movs	r2, #7
 800cbe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbe4:	e009      	b.n	800cbfa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cbe6:	4b2d      	ldr	r3, [pc, #180]	@ (800cc9c <xPortStartScheduler+0xec>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	3b01      	subs	r3, #1
 800cbec:	4a2b      	ldr	r2, [pc, #172]	@ (800cc9c <xPortStartScheduler+0xec>)
 800cbee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cbf0:	78fb      	ldrb	r3, [r7, #3]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	005b      	lsls	r3, r3, #1
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbfa:	78fb      	ldrb	r3, [r7, #3]
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc02:	2b80      	cmp	r3, #128	@ 0x80
 800cc04:	d0ef      	beq.n	800cbe6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc06:	4b25      	ldr	r3, [pc, #148]	@ (800cc9c <xPortStartScheduler+0xec>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f1c3 0307 	rsb	r3, r3, #7
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d00d      	beq.n	800cc2e <xPortStartScheduler+0x7e>
	__asm volatile
 800cc12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc16:	b672      	cpsid	i
 800cc18:	f383 8811 	msr	BASEPRI, r3
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	b662      	cpsie	i
 800cc26:	60bb      	str	r3, [r7, #8]
}
 800cc28:	bf00      	nop
 800cc2a:	bf00      	nop
 800cc2c:	e7fd      	b.n	800cc2a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc2e:	4b1b      	ldr	r3, [pc, #108]	@ (800cc9c <xPortStartScheduler+0xec>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	021b      	lsls	r3, r3, #8
 800cc34:	4a19      	ldr	r2, [pc, #100]	@ (800cc9c <xPortStartScheduler+0xec>)
 800cc36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc38:	4b18      	ldr	r3, [pc, #96]	@ (800cc9c <xPortStartScheduler+0xec>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cc40:	4a16      	ldr	r2, [pc, #88]	@ (800cc9c <xPortStartScheduler+0xec>)
 800cc42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc4c:	4b14      	ldr	r3, [pc, #80]	@ (800cca0 <xPortStartScheduler+0xf0>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a13      	ldr	r2, [pc, #76]	@ (800cca0 <xPortStartScheduler+0xf0>)
 800cc52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cc56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc58:	4b11      	ldr	r3, [pc, #68]	@ (800cca0 <xPortStartScheduler+0xf0>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a10      	ldr	r2, [pc, #64]	@ (800cca0 <xPortStartScheduler+0xf0>)
 800cc5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cc62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc64:	f000 f8dc 	bl	800ce20 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc68:	4b0e      	ldr	r3, [pc, #56]	@ (800cca4 <xPortStartScheduler+0xf4>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc6e:	f000 f8fb 	bl	800ce68 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc72:	4b0d      	ldr	r3, [pc, #52]	@ (800cca8 <xPortStartScheduler+0xf8>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a0c      	ldr	r2, [pc, #48]	@ (800cca8 <xPortStartScheduler+0xf8>)
 800cc78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cc7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc7e:	f7ff ff83 	bl	800cb88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc82:	f7ff fba5 	bl	800c3d0 <vTaskSwitchContext>
	prvTaskExitError();
 800cc86:	f7ff ff35 	bl	800caf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	e000e400 	.word	0xe000e400
 800cc98:	20000f64 	.word	0x20000f64
 800cc9c:	20000f68 	.word	0x20000f68
 800cca0:	e000ed20 	.word	0xe000ed20
 800cca4:	20000058 	.word	0x20000058
 800cca8:	e000ef34 	.word	0xe000ef34

0800ccac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccb6:	b672      	cpsid	i
 800ccb8:	f383 8811 	msr	BASEPRI, r3
 800ccbc:	f3bf 8f6f 	isb	sy
 800ccc0:	f3bf 8f4f 	dsb	sy
 800ccc4:	b662      	cpsie	i
 800ccc6:	607b      	str	r3, [r7, #4]
}
 800ccc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ccca:	4b11      	ldr	r3, [pc, #68]	@ (800cd10 <vPortEnterCritical+0x64>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	4a0f      	ldr	r2, [pc, #60]	@ (800cd10 <vPortEnterCritical+0x64>)
 800ccd2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ccd4:	4b0e      	ldr	r3, [pc, #56]	@ (800cd10 <vPortEnterCritical+0x64>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d112      	bne.n	800cd02 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccdc:	4b0d      	ldr	r3, [pc, #52]	@ (800cd14 <vPortEnterCritical+0x68>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00d      	beq.n	800cd02 <vPortEnterCritical+0x56>
	__asm volatile
 800cce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccea:	b672      	cpsid	i
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	b662      	cpsie	i
 800ccfa:	603b      	str	r3, [r7, #0]
}
 800ccfc:	bf00      	nop
 800ccfe:	bf00      	nop
 800cd00:	e7fd      	b.n	800ccfe <vPortEnterCritical+0x52>
	}
}
 800cd02:	bf00      	nop
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	20000058 	.word	0x20000058
 800cd14:	e000ed04 	.word	0xe000ed04

0800cd18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd1e:	4b13      	ldr	r3, [pc, #76]	@ (800cd6c <vPortExitCritical+0x54>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d10d      	bne.n	800cd42 <vPortExitCritical+0x2a>
	__asm volatile
 800cd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2a:	b672      	cpsid	i
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	b662      	cpsie	i
 800cd3a:	607b      	str	r3, [r7, #4]
}
 800cd3c:	bf00      	nop
 800cd3e:	bf00      	nop
 800cd40:	e7fd      	b.n	800cd3e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cd42:	4b0a      	ldr	r3, [pc, #40]	@ (800cd6c <vPortExitCritical+0x54>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	3b01      	subs	r3, #1
 800cd48:	4a08      	ldr	r2, [pc, #32]	@ (800cd6c <vPortExitCritical+0x54>)
 800cd4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd4c:	4b07      	ldr	r3, [pc, #28]	@ (800cd6c <vPortExitCritical+0x54>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d105      	bne.n	800cd60 <vPortExitCritical+0x48>
 800cd54:	2300      	movs	r3, #0
 800cd56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cd5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	20000058 	.word	0x20000058

0800cd70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd70:	f3ef 8009 	mrs	r0, PSP
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	4b15      	ldr	r3, [pc, #84]	@ (800cdd0 <pxCurrentTCBConst>)
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	f01e 0f10 	tst.w	lr, #16
 800cd80:	bf08      	it	eq
 800cd82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8a:	6010      	str	r0, [r2, #0]
 800cd8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cd94:	b672      	cpsid	i
 800cd96:	f380 8811 	msr	BASEPRI, r0
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	b662      	cpsie	i
 800cda4:	f7ff fb14 	bl	800c3d0 <vTaskSwitchContext>
 800cda8:	f04f 0000 	mov.w	r0, #0
 800cdac:	f380 8811 	msr	BASEPRI, r0
 800cdb0:	bc09      	pop	{r0, r3}
 800cdb2:	6819      	ldr	r1, [r3, #0]
 800cdb4:	6808      	ldr	r0, [r1, #0]
 800cdb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdba:	f01e 0f10 	tst.w	lr, #16
 800cdbe:	bf08      	it	eq
 800cdc0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdc4:	f380 8809 	msr	PSP, r0
 800cdc8:	f3bf 8f6f 	isb	sy
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop

0800cdd0 <pxCurrentTCBConst>:
 800cdd0:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cdd4:	bf00      	nop
 800cdd6:	bf00      	nop

0800cdd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
	__asm volatile
 800cdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde2:	b672      	cpsid	i
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	b662      	cpsie	i
 800cdf2:	607b      	str	r3, [r7, #4]
}
 800cdf4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cdf6:	f7ff fa2f 	bl	800c258 <xTaskIncrementTick>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d003      	beq.n	800ce08 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce00:	4b06      	ldr	r3, [pc, #24]	@ (800ce1c <SysTick_Handler+0x44>)
 800ce02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	2300      	movs	r3, #0
 800ce0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	f383 8811 	msr	BASEPRI, r3
}
 800ce12:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce14:	bf00      	nop
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	e000ed04 	.word	0xe000ed04

0800ce20 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce20:	b480      	push	{r7}
 800ce22:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce24:	4b0b      	ldr	r3, [pc, #44]	@ (800ce54 <vPortSetupTimerInterrupt+0x34>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ce58 <vPortSetupTimerInterrupt+0x38>)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce30:	4b0a      	ldr	r3, [pc, #40]	@ (800ce5c <vPortSetupTimerInterrupt+0x3c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a0a      	ldr	r2, [pc, #40]	@ (800ce60 <vPortSetupTimerInterrupt+0x40>)
 800ce36:	fba2 2303 	umull	r2, r3, r2, r3
 800ce3a:	099b      	lsrs	r3, r3, #6
 800ce3c:	4a09      	ldr	r2, [pc, #36]	@ (800ce64 <vPortSetupTimerInterrupt+0x44>)
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce42:	4b04      	ldr	r3, [pc, #16]	@ (800ce54 <vPortSetupTimerInterrupt+0x34>)
 800ce44:	2207      	movs	r2, #7
 800ce46:	601a      	str	r2, [r3, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	e000e010 	.word	0xe000e010
 800ce58:	e000e018 	.word	0xe000e018
 800ce5c:	2000004c 	.word	0x2000004c
 800ce60:	10624dd3 	.word	0x10624dd3
 800ce64:	e000e014 	.word	0xe000e014

0800ce68 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce68:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ce78 <vPortEnableVFP+0x10>
 800ce6c:	6801      	ldr	r1, [r0, #0]
 800ce6e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ce72:	6001      	str	r1, [r0, #0]
 800ce74:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce76:	bf00      	nop
 800ce78:	e000ed88 	.word	0xe000ed88

0800ce7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08a      	sub	sp, #40	@ 0x28
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce84:	2300      	movs	r3, #0
 800ce86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce88:	f7ff f938 	bl	800c0fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce8c:	4b5d      	ldr	r3, [pc, #372]	@ (800d004 <pvPortMalloc+0x188>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce94:	f000 f920 	bl	800d0d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce98:	4b5b      	ldr	r3, [pc, #364]	@ (800d008 <pvPortMalloc+0x18c>)
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4013      	ands	r3, r2
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f040 8094 	bne.w	800cfce <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d020      	beq.n	800ceee <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800ceac:	2208      	movs	r2, #8
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f003 0307 	and.w	r3, r3, #7
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d017      	beq.n	800ceee <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f023 0307 	bic.w	r3, r3, #7
 800cec4:	3308      	adds	r3, #8
 800cec6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f003 0307 	and.w	r3, r3, #7
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d00d      	beq.n	800ceee <pvPortMalloc+0x72>
	__asm volatile
 800ced2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced6:	b672      	cpsid	i
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	b662      	cpsie	i
 800cee6:	617b      	str	r3, [r7, #20]
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	e7fd      	b.n	800ceea <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d06c      	beq.n	800cfce <pvPortMalloc+0x152>
 800cef4:	4b45      	ldr	r3, [pc, #276]	@ (800d00c <pvPortMalloc+0x190>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d867      	bhi.n	800cfce <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cefe:	4b44      	ldr	r3, [pc, #272]	@ (800d010 <pvPortMalloc+0x194>)
 800cf00:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf02:	4b43      	ldr	r3, [pc, #268]	@ (800d010 <pvPortMalloc+0x194>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf08:	e004      	b.n	800cf14 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf0c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d903      	bls.n	800cf26 <pvPortMalloc+0xaa>
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1f1      	bne.n	800cf0a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf26:	4b37      	ldr	r3, [pc, #220]	@ (800d004 <pvPortMalloc+0x188>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d04e      	beq.n	800cfce <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	2208      	movs	r2, #8
 800cf36:	4413      	add	r3, r2
 800cf38:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	6a3b      	ldr	r3, [r7, #32]
 800cf40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf44:	685a      	ldr	r2, [r3, #4]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	1ad2      	subs	r2, r2, r3
 800cf4a:	2308      	movs	r3, #8
 800cf4c:	005b      	lsls	r3, r3, #1
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d922      	bls.n	800cf98 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	4413      	add	r3, r2
 800cf58:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	f003 0307 	and.w	r3, r3, #7
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00d      	beq.n	800cf80 <pvPortMalloc+0x104>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf68:	b672      	cpsid	i
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	b662      	cpsie	i
 800cf78:	613b      	str	r3, [r7, #16]
}
 800cf7a:	bf00      	nop
 800cf7c:	bf00      	nop
 800cf7e:	e7fd      	b.n	800cf7c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	1ad2      	subs	r2, r2, r3
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf92:	69b8      	ldr	r0, [r7, #24]
 800cf94:	f000 f902 	bl	800d19c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf98:	4b1c      	ldr	r3, [pc, #112]	@ (800d00c <pvPortMalloc+0x190>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	4a1a      	ldr	r2, [pc, #104]	@ (800d00c <pvPortMalloc+0x190>)
 800cfa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfa6:	4b19      	ldr	r3, [pc, #100]	@ (800d00c <pvPortMalloc+0x190>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b1a      	ldr	r3, [pc, #104]	@ (800d014 <pvPortMalloc+0x198>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d203      	bcs.n	800cfba <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfb2:	4b16      	ldr	r3, [pc, #88]	@ (800d00c <pvPortMalloc+0x190>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a17      	ldr	r2, [pc, #92]	@ (800d014 <pvPortMalloc+0x198>)
 800cfb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfbc:	685a      	ldr	r2, [r3, #4]
 800cfbe:	4b12      	ldr	r3, [pc, #72]	@ (800d008 <pvPortMalloc+0x18c>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	431a      	orrs	r2, r3
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfca:	2200      	movs	r2, #0
 800cfcc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cfce:	f7ff f8a3 	bl	800c118 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	f003 0307 	and.w	r3, r3, #7
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00d      	beq.n	800cff8 <pvPortMalloc+0x17c>
	__asm volatile
 800cfdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe0:	b672      	cpsid	i
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	b662      	cpsie	i
 800cff0:	60fb      	str	r3, [r7, #12]
}
 800cff2:	bf00      	nop
 800cff4:	bf00      	nop
 800cff6:	e7fd      	b.n	800cff4 <pvPortMalloc+0x178>
	return pvReturn;
 800cff8:	69fb      	ldr	r3, [r7, #28]
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3728      	adds	r7, #40	@ 0x28
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	20004b74 	.word	0x20004b74
 800d008:	20004b80 	.word	0x20004b80
 800d00c:	20004b78 	.word	0x20004b78
 800d010:	20004b6c 	.word	0x20004b6c
 800d014:	20004b7c 	.word	0x20004b7c

0800d018 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b086      	sub	sp, #24
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d04e      	beq.n	800d0c8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d02a:	2308      	movs	r3, #8
 800d02c:	425b      	negs	r3, r3
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	4413      	add	r3, r2
 800d032:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	4b24      	ldr	r3, [pc, #144]	@ (800d0d0 <vPortFree+0xb8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4013      	ands	r3, r2
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10d      	bne.n	800d062 <vPortFree+0x4a>
	__asm volatile
 800d046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d04a:	b672      	cpsid	i
 800d04c:	f383 8811 	msr	BASEPRI, r3
 800d050:	f3bf 8f6f 	isb	sy
 800d054:	f3bf 8f4f 	dsb	sy
 800d058:	b662      	cpsie	i
 800d05a:	60fb      	str	r3, [r7, #12]
}
 800d05c:	bf00      	nop
 800d05e:	bf00      	nop
 800d060:	e7fd      	b.n	800d05e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00d      	beq.n	800d086 <vPortFree+0x6e>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d06e:	b672      	cpsid	i
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	b662      	cpsie	i
 800d07e:	60bb      	str	r3, [r7, #8]
}
 800d080:	bf00      	nop
 800d082:	bf00      	nop
 800d084:	e7fd      	b.n	800d082 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	685a      	ldr	r2, [r3, #4]
 800d08a:	4b11      	ldr	r3, [pc, #68]	@ (800d0d0 <vPortFree+0xb8>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4013      	ands	r3, r2
 800d090:	2b00      	cmp	r3, #0
 800d092:	d019      	beq.n	800d0c8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d115      	bne.n	800d0c8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	685a      	ldr	r2, [r3, #4]
 800d0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d0d0 <vPortFree+0xb8>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	43db      	mvns	r3, r3
 800d0a6:	401a      	ands	r2, r3
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0ac:	f7ff f826 	bl	800c0fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	685a      	ldr	r2, [r3, #4]
 800d0b4:	4b07      	ldr	r3, [pc, #28]	@ (800d0d4 <vPortFree+0xbc>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	4a06      	ldr	r2, [pc, #24]	@ (800d0d4 <vPortFree+0xbc>)
 800d0bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0be:	6938      	ldr	r0, [r7, #16]
 800d0c0:	f000 f86c 	bl	800d19c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d0c4:	f7ff f828 	bl	800c118 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0c8:	bf00      	nop
 800d0ca:	3718      	adds	r7, #24
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	20004b80 	.word	0x20004b80
 800d0d4:	20004b78 	.word	0x20004b78

0800d0d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0de:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d0e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d0e4:	4b27      	ldr	r3, [pc, #156]	@ (800d184 <prvHeapInit+0xac>)
 800d0e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f003 0307 	and.w	r3, r3, #7
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00c      	beq.n	800d10c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3307      	adds	r3, #7
 800d0f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f023 0307 	bic.w	r3, r3, #7
 800d0fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d100:	68ba      	ldr	r2, [r7, #8]
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	1ad3      	subs	r3, r2, r3
 800d106:	4a1f      	ldr	r2, [pc, #124]	@ (800d184 <prvHeapInit+0xac>)
 800d108:	4413      	add	r3, r2
 800d10a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d110:	4a1d      	ldr	r2, [pc, #116]	@ (800d188 <prvHeapInit+0xb0>)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d116:	4b1c      	ldr	r3, [pc, #112]	@ (800d188 <prvHeapInit+0xb0>)
 800d118:	2200      	movs	r2, #0
 800d11a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	68ba      	ldr	r2, [r7, #8]
 800d120:	4413      	add	r3, r2
 800d122:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d124:	2208      	movs	r2, #8
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	1a9b      	subs	r3, r3, r2
 800d12a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f023 0307 	bic.w	r3, r3, #7
 800d132:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	4a15      	ldr	r2, [pc, #84]	@ (800d18c <prvHeapInit+0xb4>)
 800d138:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d13a:	4b14      	ldr	r3, [pc, #80]	@ (800d18c <prvHeapInit+0xb4>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2200      	movs	r2, #0
 800d140:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d142:	4b12      	ldr	r3, [pc, #72]	@ (800d18c <prvHeapInit+0xb4>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2200      	movs	r2, #0
 800d148:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	1ad2      	subs	r2, r2, r3
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d158:	4b0c      	ldr	r3, [pc, #48]	@ (800d18c <prvHeapInit+0xb4>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	4a0a      	ldr	r2, [pc, #40]	@ (800d190 <prvHeapInit+0xb8>)
 800d166:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	4a09      	ldr	r2, [pc, #36]	@ (800d194 <prvHeapInit+0xbc>)
 800d16e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d170:	4b09      	ldr	r3, [pc, #36]	@ (800d198 <prvHeapInit+0xc0>)
 800d172:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d176:	601a      	str	r2, [r3, #0]
}
 800d178:	bf00      	nop
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	20000f6c 	.word	0x20000f6c
 800d188:	20004b6c 	.word	0x20004b6c
 800d18c:	20004b74 	.word	0x20004b74
 800d190:	20004b7c 	.word	0x20004b7c
 800d194:	20004b78 	.word	0x20004b78
 800d198:	20004b80 	.word	0x20004b80

0800d19c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1a4:	4b28      	ldr	r3, [pc, #160]	@ (800d248 <prvInsertBlockIntoFreeList+0xac>)
 800d1a6:	60fb      	str	r3, [r7, #12]
 800d1a8:	e002      	b.n	800d1b0 <prvInsertBlockIntoFreeList+0x14>
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	60fb      	str	r3, [r7, #12]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d8f7      	bhi.n	800d1aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d108      	bne.n	800d1de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	685a      	ldr	r2, [r3, #4]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	685b      	ldr	r3, [r3, #4]
 800d1d4:	441a      	add	r2, r3
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	441a      	add	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d118      	bne.n	800d224 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	4b15      	ldr	r3, [pc, #84]	@ (800d24c <prvInsertBlockIntoFreeList+0xb0>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d00d      	beq.n	800d21a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685a      	ldr	r2, [r3, #4]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	441a      	add	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	e008      	b.n	800d22c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d21a:	4b0c      	ldr	r3, [pc, #48]	@ (800d24c <prvInsertBlockIntoFreeList+0xb0>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	e003      	b.n	800d22c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	429a      	cmp	r2, r3
 800d232:	d002      	beq.n	800d23a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d23a:	bf00      	nop
 800d23c:	3714      	adds	r7, #20
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	20004b6c 	.word	0x20004b6c
 800d24c:	20004b74 	.word	0x20004b74

0800d250 <rand>:
 800d250:	4b16      	ldr	r3, [pc, #88]	@ (800d2ac <rand+0x5c>)
 800d252:	b510      	push	{r4, lr}
 800d254:	681c      	ldr	r4, [r3, #0]
 800d256:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d258:	b9b3      	cbnz	r3, 800d288 <rand+0x38>
 800d25a:	2018      	movs	r0, #24
 800d25c:	f000 fa4e 	bl	800d6fc <malloc>
 800d260:	4602      	mov	r2, r0
 800d262:	6320      	str	r0, [r4, #48]	@ 0x30
 800d264:	b920      	cbnz	r0, 800d270 <rand+0x20>
 800d266:	4b12      	ldr	r3, [pc, #72]	@ (800d2b0 <rand+0x60>)
 800d268:	4812      	ldr	r0, [pc, #72]	@ (800d2b4 <rand+0x64>)
 800d26a:	2152      	movs	r1, #82	@ 0x52
 800d26c:	f000 f9de 	bl	800d62c <__assert_func>
 800d270:	4911      	ldr	r1, [pc, #68]	@ (800d2b8 <rand+0x68>)
 800d272:	4b12      	ldr	r3, [pc, #72]	@ (800d2bc <rand+0x6c>)
 800d274:	e9c0 1300 	strd	r1, r3, [r0]
 800d278:	4b11      	ldr	r3, [pc, #68]	@ (800d2c0 <rand+0x70>)
 800d27a:	6083      	str	r3, [r0, #8]
 800d27c:	230b      	movs	r3, #11
 800d27e:	8183      	strh	r3, [r0, #12]
 800d280:	2100      	movs	r1, #0
 800d282:	2001      	movs	r0, #1
 800d284:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d288:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d28a:	480e      	ldr	r0, [pc, #56]	@ (800d2c4 <rand+0x74>)
 800d28c:	690b      	ldr	r3, [r1, #16]
 800d28e:	694c      	ldr	r4, [r1, #20]
 800d290:	4a0d      	ldr	r2, [pc, #52]	@ (800d2c8 <rand+0x78>)
 800d292:	4358      	muls	r0, r3
 800d294:	fb02 0004 	mla	r0, r2, r4, r0
 800d298:	fba3 3202 	umull	r3, r2, r3, r2
 800d29c:	3301      	adds	r3, #1
 800d29e:	eb40 0002 	adc.w	r0, r0, r2
 800d2a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d2a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d2aa:	bd10      	pop	{r4, pc}
 800d2ac:	20000068 	.word	0x20000068
 800d2b0:	0801ca44 	.word	0x0801ca44
 800d2b4:	0801ca5b 	.word	0x0801ca5b
 800d2b8:	abcd330e 	.word	0xabcd330e
 800d2bc:	e66d1234 	.word	0xe66d1234
 800d2c0:	0005deec 	.word	0x0005deec
 800d2c4:	5851f42d 	.word	0x5851f42d
 800d2c8:	4c957f2d 	.word	0x4c957f2d

0800d2cc <std>:
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	b510      	push	{r4, lr}
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	e9c0 3300 	strd	r3, r3, [r0]
 800d2d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2da:	6083      	str	r3, [r0, #8]
 800d2dc:	8181      	strh	r1, [r0, #12]
 800d2de:	6643      	str	r3, [r0, #100]	@ 0x64
 800d2e0:	81c2      	strh	r2, [r0, #14]
 800d2e2:	6183      	str	r3, [r0, #24]
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	2208      	movs	r2, #8
 800d2e8:	305c      	adds	r0, #92	@ 0x5c
 800d2ea:	f000 f914 	bl	800d516 <memset>
 800d2ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d324 <std+0x58>)
 800d2f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d328 <std+0x5c>)
 800d2f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d32c <std+0x60>)
 800d2f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d2fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d330 <std+0x64>)
 800d2fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d2fe:	4b0d      	ldr	r3, [pc, #52]	@ (800d334 <std+0x68>)
 800d300:	6224      	str	r4, [r4, #32]
 800d302:	429c      	cmp	r4, r3
 800d304:	d006      	beq.n	800d314 <std+0x48>
 800d306:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d30a:	4294      	cmp	r4, r2
 800d30c:	d002      	beq.n	800d314 <std+0x48>
 800d30e:	33d0      	adds	r3, #208	@ 0xd0
 800d310:	429c      	cmp	r4, r3
 800d312:	d105      	bne.n	800d320 <std+0x54>
 800d314:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d31c:	f000 b974 	b.w	800d608 <__retarget_lock_init_recursive>
 800d320:	bd10      	pop	{r4, pc}
 800d322:	bf00      	nop
 800d324:	0800d491 	.word	0x0800d491
 800d328:	0800d4b3 	.word	0x0800d4b3
 800d32c:	0800d4eb 	.word	0x0800d4eb
 800d330:	0800d50f 	.word	0x0800d50f
 800d334:	20004b84 	.word	0x20004b84

0800d338 <stdio_exit_handler>:
 800d338:	4a02      	ldr	r2, [pc, #8]	@ (800d344 <stdio_exit_handler+0xc>)
 800d33a:	4903      	ldr	r1, [pc, #12]	@ (800d348 <stdio_exit_handler+0x10>)
 800d33c:	4803      	ldr	r0, [pc, #12]	@ (800d34c <stdio_exit_handler+0x14>)
 800d33e:	f000 b869 	b.w	800d414 <_fwalk_sglue>
 800d342:	bf00      	nop
 800d344:	2000005c 	.word	0x2000005c
 800d348:	0800df3d 	.word	0x0800df3d
 800d34c:	2000006c 	.word	0x2000006c

0800d350 <cleanup_stdio>:
 800d350:	6841      	ldr	r1, [r0, #4]
 800d352:	4b0c      	ldr	r3, [pc, #48]	@ (800d384 <cleanup_stdio+0x34>)
 800d354:	4299      	cmp	r1, r3
 800d356:	b510      	push	{r4, lr}
 800d358:	4604      	mov	r4, r0
 800d35a:	d001      	beq.n	800d360 <cleanup_stdio+0x10>
 800d35c:	f000 fdee 	bl	800df3c <_fflush_r>
 800d360:	68a1      	ldr	r1, [r4, #8]
 800d362:	4b09      	ldr	r3, [pc, #36]	@ (800d388 <cleanup_stdio+0x38>)
 800d364:	4299      	cmp	r1, r3
 800d366:	d002      	beq.n	800d36e <cleanup_stdio+0x1e>
 800d368:	4620      	mov	r0, r4
 800d36a:	f000 fde7 	bl	800df3c <_fflush_r>
 800d36e:	68e1      	ldr	r1, [r4, #12]
 800d370:	4b06      	ldr	r3, [pc, #24]	@ (800d38c <cleanup_stdio+0x3c>)
 800d372:	4299      	cmp	r1, r3
 800d374:	d004      	beq.n	800d380 <cleanup_stdio+0x30>
 800d376:	4620      	mov	r0, r4
 800d378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d37c:	f000 bdde 	b.w	800df3c <_fflush_r>
 800d380:	bd10      	pop	{r4, pc}
 800d382:	bf00      	nop
 800d384:	20004b84 	.word	0x20004b84
 800d388:	20004bec 	.word	0x20004bec
 800d38c:	20004c54 	.word	0x20004c54

0800d390 <global_stdio_init.part.0>:
 800d390:	b510      	push	{r4, lr}
 800d392:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c0 <global_stdio_init.part.0+0x30>)
 800d394:	4c0b      	ldr	r4, [pc, #44]	@ (800d3c4 <global_stdio_init.part.0+0x34>)
 800d396:	4a0c      	ldr	r2, [pc, #48]	@ (800d3c8 <global_stdio_init.part.0+0x38>)
 800d398:	601a      	str	r2, [r3, #0]
 800d39a:	4620      	mov	r0, r4
 800d39c:	2200      	movs	r2, #0
 800d39e:	2104      	movs	r1, #4
 800d3a0:	f7ff ff94 	bl	800d2cc <std>
 800d3a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	2109      	movs	r1, #9
 800d3ac:	f7ff ff8e 	bl	800d2cc <std>
 800d3b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3ba:	2112      	movs	r1, #18
 800d3bc:	f7ff bf86 	b.w	800d2cc <std>
 800d3c0:	20004cbc 	.word	0x20004cbc
 800d3c4:	20004b84 	.word	0x20004b84
 800d3c8:	0800d339 	.word	0x0800d339

0800d3cc <__sfp_lock_acquire>:
 800d3cc:	4801      	ldr	r0, [pc, #4]	@ (800d3d4 <__sfp_lock_acquire+0x8>)
 800d3ce:	f000 b91c 	b.w	800d60a <__retarget_lock_acquire_recursive>
 800d3d2:	bf00      	nop
 800d3d4:	20004cc5 	.word	0x20004cc5

0800d3d8 <__sfp_lock_release>:
 800d3d8:	4801      	ldr	r0, [pc, #4]	@ (800d3e0 <__sfp_lock_release+0x8>)
 800d3da:	f000 b917 	b.w	800d60c <__retarget_lock_release_recursive>
 800d3de:	bf00      	nop
 800d3e0:	20004cc5 	.word	0x20004cc5

0800d3e4 <__sinit>:
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	f7ff fff0 	bl	800d3cc <__sfp_lock_acquire>
 800d3ec:	6a23      	ldr	r3, [r4, #32]
 800d3ee:	b11b      	cbz	r3, 800d3f8 <__sinit+0x14>
 800d3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3f4:	f7ff bff0 	b.w	800d3d8 <__sfp_lock_release>
 800d3f8:	4b04      	ldr	r3, [pc, #16]	@ (800d40c <__sinit+0x28>)
 800d3fa:	6223      	str	r3, [r4, #32]
 800d3fc:	4b04      	ldr	r3, [pc, #16]	@ (800d410 <__sinit+0x2c>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1f5      	bne.n	800d3f0 <__sinit+0xc>
 800d404:	f7ff ffc4 	bl	800d390 <global_stdio_init.part.0>
 800d408:	e7f2      	b.n	800d3f0 <__sinit+0xc>
 800d40a:	bf00      	nop
 800d40c:	0800d351 	.word	0x0800d351
 800d410:	20004cbc 	.word	0x20004cbc

0800d414 <_fwalk_sglue>:
 800d414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d418:	4607      	mov	r7, r0
 800d41a:	4688      	mov	r8, r1
 800d41c:	4614      	mov	r4, r2
 800d41e:	2600      	movs	r6, #0
 800d420:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d424:	f1b9 0901 	subs.w	r9, r9, #1
 800d428:	d505      	bpl.n	800d436 <_fwalk_sglue+0x22>
 800d42a:	6824      	ldr	r4, [r4, #0]
 800d42c:	2c00      	cmp	r4, #0
 800d42e:	d1f7      	bne.n	800d420 <_fwalk_sglue+0xc>
 800d430:	4630      	mov	r0, r6
 800d432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d436:	89ab      	ldrh	r3, [r5, #12]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d907      	bls.n	800d44c <_fwalk_sglue+0x38>
 800d43c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d440:	3301      	adds	r3, #1
 800d442:	d003      	beq.n	800d44c <_fwalk_sglue+0x38>
 800d444:	4629      	mov	r1, r5
 800d446:	4638      	mov	r0, r7
 800d448:	47c0      	blx	r8
 800d44a:	4306      	orrs	r6, r0
 800d44c:	3568      	adds	r5, #104	@ 0x68
 800d44e:	e7e9      	b.n	800d424 <_fwalk_sglue+0x10>

0800d450 <siprintf>:
 800d450:	b40e      	push	{r1, r2, r3}
 800d452:	b500      	push	{lr}
 800d454:	b09c      	sub	sp, #112	@ 0x70
 800d456:	ab1d      	add	r3, sp, #116	@ 0x74
 800d458:	9002      	str	r0, [sp, #8]
 800d45a:	9006      	str	r0, [sp, #24]
 800d45c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d460:	4809      	ldr	r0, [pc, #36]	@ (800d488 <siprintf+0x38>)
 800d462:	9107      	str	r1, [sp, #28]
 800d464:	9104      	str	r1, [sp, #16]
 800d466:	4909      	ldr	r1, [pc, #36]	@ (800d48c <siprintf+0x3c>)
 800d468:	f853 2b04 	ldr.w	r2, [r3], #4
 800d46c:	9105      	str	r1, [sp, #20]
 800d46e:	6800      	ldr	r0, [r0, #0]
 800d470:	9301      	str	r3, [sp, #4]
 800d472:	a902      	add	r1, sp, #8
 800d474:	f000 fa54 	bl	800d920 <_svfiprintf_r>
 800d478:	9b02      	ldr	r3, [sp, #8]
 800d47a:	2200      	movs	r2, #0
 800d47c:	701a      	strb	r2, [r3, #0]
 800d47e:	b01c      	add	sp, #112	@ 0x70
 800d480:	f85d eb04 	ldr.w	lr, [sp], #4
 800d484:	b003      	add	sp, #12
 800d486:	4770      	bx	lr
 800d488:	20000068 	.word	0x20000068
 800d48c:	ffff0208 	.word	0xffff0208

0800d490 <__sread>:
 800d490:	b510      	push	{r4, lr}
 800d492:	460c      	mov	r4, r1
 800d494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d498:	f000 f868 	bl	800d56c <_read_r>
 800d49c:	2800      	cmp	r0, #0
 800d49e:	bfab      	itete	ge
 800d4a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d4a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d4a4:	181b      	addge	r3, r3, r0
 800d4a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d4aa:	bfac      	ite	ge
 800d4ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d4ae:	81a3      	strhlt	r3, [r4, #12]
 800d4b0:	bd10      	pop	{r4, pc}

0800d4b2 <__swrite>:
 800d4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b6:	461f      	mov	r7, r3
 800d4b8:	898b      	ldrh	r3, [r1, #12]
 800d4ba:	05db      	lsls	r3, r3, #23
 800d4bc:	4605      	mov	r5, r0
 800d4be:	460c      	mov	r4, r1
 800d4c0:	4616      	mov	r6, r2
 800d4c2:	d505      	bpl.n	800d4d0 <__swrite+0x1e>
 800d4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f000 f83c 	bl	800d548 <_lseek_r>
 800d4d0:	89a3      	ldrh	r3, [r4, #12]
 800d4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d4da:	81a3      	strh	r3, [r4, #12]
 800d4dc:	4632      	mov	r2, r6
 800d4de:	463b      	mov	r3, r7
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4e6:	f000 b853 	b.w	800d590 <_write_r>

0800d4ea <__sseek>:
 800d4ea:	b510      	push	{r4, lr}
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f2:	f000 f829 	bl	800d548 <_lseek_r>
 800d4f6:	1c43      	adds	r3, r0, #1
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	bf15      	itete	ne
 800d4fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d4fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d502:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d506:	81a3      	strheq	r3, [r4, #12]
 800d508:	bf18      	it	ne
 800d50a:	81a3      	strhne	r3, [r4, #12]
 800d50c:	bd10      	pop	{r4, pc}

0800d50e <__sclose>:
 800d50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d512:	f000 b809 	b.w	800d528 <_close_r>

0800d516 <memset>:
 800d516:	4402      	add	r2, r0
 800d518:	4603      	mov	r3, r0
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d100      	bne.n	800d520 <memset+0xa>
 800d51e:	4770      	bx	lr
 800d520:	f803 1b01 	strb.w	r1, [r3], #1
 800d524:	e7f9      	b.n	800d51a <memset+0x4>
	...

0800d528 <_close_r>:
 800d528:	b538      	push	{r3, r4, r5, lr}
 800d52a:	4d06      	ldr	r5, [pc, #24]	@ (800d544 <_close_r+0x1c>)
 800d52c:	2300      	movs	r3, #0
 800d52e:	4604      	mov	r4, r0
 800d530:	4608      	mov	r0, r1
 800d532:	602b      	str	r3, [r5, #0]
 800d534:	f7f7 fa56 	bl	80049e4 <_close>
 800d538:	1c43      	adds	r3, r0, #1
 800d53a:	d102      	bne.n	800d542 <_close_r+0x1a>
 800d53c:	682b      	ldr	r3, [r5, #0]
 800d53e:	b103      	cbz	r3, 800d542 <_close_r+0x1a>
 800d540:	6023      	str	r3, [r4, #0]
 800d542:	bd38      	pop	{r3, r4, r5, pc}
 800d544:	20004cc0 	.word	0x20004cc0

0800d548 <_lseek_r>:
 800d548:	b538      	push	{r3, r4, r5, lr}
 800d54a:	4d07      	ldr	r5, [pc, #28]	@ (800d568 <_lseek_r+0x20>)
 800d54c:	4604      	mov	r4, r0
 800d54e:	4608      	mov	r0, r1
 800d550:	4611      	mov	r1, r2
 800d552:	2200      	movs	r2, #0
 800d554:	602a      	str	r2, [r5, #0]
 800d556:	461a      	mov	r2, r3
 800d558:	f7f7 fa6b 	bl	8004a32 <_lseek>
 800d55c:	1c43      	adds	r3, r0, #1
 800d55e:	d102      	bne.n	800d566 <_lseek_r+0x1e>
 800d560:	682b      	ldr	r3, [r5, #0]
 800d562:	b103      	cbz	r3, 800d566 <_lseek_r+0x1e>
 800d564:	6023      	str	r3, [r4, #0]
 800d566:	bd38      	pop	{r3, r4, r5, pc}
 800d568:	20004cc0 	.word	0x20004cc0

0800d56c <_read_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	4d07      	ldr	r5, [pc, #28]	@ (800d58c <_read_r+0x20>)
 800d570:	4604      	mov	r4, r0
 800d572:	4608      	mov	r0, r1
 800d574:	4611      	mov	r1, r2
 800d576:	2200      	movs	r2, #0
 800d578:	602a      	str	r2, [r5, #0]
 800d57a:	461a      	mov	r2, r3
 800d57c:	f7f7 f9f9 	bl	8004972 <_read>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d102      	bne.n	800d58a <_read_r+0x1e>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	b103      	cbz	r3, 800d58a <_read_r+0x1e>
 800d588:	6023      	str	r3, [r4, #0]
 800d58a:	bd38      	pop	{r3, r4, r5, pc}
 800d58c:	20004cc0 	.word	0x20004cc0

0800d590 <_write_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d07      	ldr	r5, [pc, #28]	@ (800d5b0 <_write_r+0x20>)
 800d594:	4604      	mov	r4, r0
 800d596:	4608      	mov	r0, r1
 800d598:	4611      	mov	r1, r2
 800d59a:	2200      	movs	r2, #0
 800d59c:	602a      	str	r2, [r5, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	f7f7 fa04 	bl	80049ac <_write>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d102      	bne.n	800d5ae <_write_r+0x1e>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	b103      	cbz	r3, 800d5ae <_write_r+0x1e>
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	20004cc0 	.word	0x20004cc0

0800d5b4 <__errno>:
 800d5b4:	4b01      	ldr	r3, [pc, #4]	@ (800d5bc <__errno+0x8>)
 800d5b6:	6818      	ldr	r0, [r3, #0]
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	20000068 	.word	0x20000068

0800d5c0 <__libc_init_array>:
 800d5c0:	b570      	push	{r4, r5, r6, lr}
 800d5c2:	4d0d      	ldr	r5, [pc, #52]	@ (800d5f8 <__libc_init_array+0x38>)
 800d5c4:	4c0d      	ldr	r4, [pc, #52]	@ (800d5fc <__libc_init_array+0x3c>)
 800d5c6:	1b64      	subs	r4, r4, r5
 800d5c8:	10a4      	asrs	r4, r4, #2
 800d5ca:	2600      	movs	r6, #0
 800d5cc:	42a6      	cmp	r6, r4
 800d5ce:	d109      	bne.n	800d5e4 <__libc_init_array+0x24>
 800d5d0:	4d0b      	ldr	r5, [pc, #44]	@ (800d600 <__libc_init_array+0x40>)
 800d5d2:	4c0c      	ldr	r4, [pc, #48]	@ (800d604 <__libc_init_array+0x44>)
 800d5d4:	f000 fff0 	bl	800e5b8 <_init>
 800d5d8:	1b64      	subs	r4, r4, r5
 800d5da:	10a4      	asrs	r4, r4, #2
 800d5dc:	2600      	movs	r6, #0
 800d5de:	42a6      	cmp	r6, r4
 800d5e0:	d105      	bne.n	800d5ee <__libc_init_array+0x2e>
 800d5e2:	bd70      	pop	{r4, r5, r6, pc}
 800d5e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5e8:	4798      	blx	r3
 800d5ea:	3601      	adds	r6, #1
 800d5ec:	e7ee      	b.n	800d5cc <__libc_init_array+0xc>
 800d5ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5f2:	4798      	blx	r3
 800d5f4:	3601      	adds	r6, #1
 800d5f6:	e7f2      	b.n	800d5de <__libc_init_array+0x1e>
 800d5f8:	0801cb2c 	.word	0x0801cb2c
 800d5fc:	0801cb2c 	.word	0x0801cb2c
 800d600:	0801cb2c 	.word	0x0801cb2c
 800d604:	0801cb30 	.word	0x0801cb30

0800d608 <__retarget_lock_init_recursive>:
 800d608:	4770      	bx	lr

0800d60a <__retarget_lock_acquire_recursive>:
 800d60a:	4770      	bx	lr

0800d60c <__retarget_lock_release_recursive>:
 800d60c:	4770      	bx	lr

0800d60e <memcpy>:
 800d60e:	440a      	add	r2, r1
 800d610:	4291      	cmp	r1, r2
 800d612:	f100 33ff 	add.w	r3, r0, #4294967295
 800d616:	d100      	bne.n	800d61a <memcpy+0xc>
 800d618:	4770      	bx	lr
 800d61a:	b510      	push	{r4, lr}
 800d61c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d620:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d624:	4291      	cmp	r1, r2
 800d626:	d1f9      	bne.n	800d61c <memcpy+0xe>
 800d628:	bd10      	pop	{r4, pc}
	...

0800d62c <__assert_func>:
 800d62c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d62e:	4614      	mov	r4, r2
 800d630:	461a      	mov	r2, r3
 800d632:	4b09      	ldr	r3, [pc, #36]	@ (800d658 <__assert_func+0x2c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4605      	mov	r5, r0
 800d638:	68d8      	ldr	r0, [r3, #12]
 800d63a:	b954      	cbnz	r4, 800d652 <__assert_func+0x26>
 800d63c:	4b07      	ldr	r3, [pc, #28]	@ (800d65c <__assert_func+0x30>)
 800d63e:	461c      	mov	r4, r3
 800d640:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d644:	9100      	str	r1, [sp, #0]
 800d646:	462b      	mov	r3, r5
 800d648:	4905      	ldr	r1, [pc, #20]	@ (800d660 <__assert_func+0x34>)
 800d64a:	f000 fc9f 	bl	800df8c <fiprintf>
 800d64e:	f000 fcd9 	bl	800e004 <abort>
 800d652:	4b04      	ldr	r3, [pc, #16]	@ (800d664 <__assert_func+0x38>)
 800d654:	e7f4      	b.n	800d640 <__assert_func+0x14>
 800d656:	bf00      	nop
 800d658:	20000068 	.word	0x20000068
 800d65c:	0801caee 	.word	0x0801caee
 800d660:	0801cac0 	.word	0x0801cac0
 800d664:	0801cab3 	.word	0x0801cab3

0800d668 <_free_r>:
 800d668:	b538      	push	{r3, r4, r5, lr}
 800d66a:	4605      	mov	r5, r0
 800d66c:	2900      	cmp	r1, #0
 800d66e:	d041      	beq.n	800d6f4 <_free_r+0x8c>
 800d670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d674:	1f0c      	subs	r4, r1, #4
 800d676:	2b00      	cmp	r3, #0
 800d678:	bfb8      	it	lt
 800d67a:	18e4      	addlt	r4, r4, r3
 800d67c:	f000 f8e8 	bl	800d850 <__malloc_lock>
 800d680:	4a1d      	ldr	r2, [pc, #116]	@ (800d6f8 <_free_r+0x90>)
 800d682:	6813      	ldr	r3, [r2, #0]
 800d684:	b933      	cbnz	r3, 800d694 <_free_r+0x2c>
 800d686:	6063      	str	r3, [r4, #4]
 800d688:	6014      	str	r4, [r2, #0]
 800d68a:	4628      	mov	r0, r5
 800d68c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d690:	f000 b8e4 	b.w	800d85c <__malloc_unlock>
 800d694:	42a3      	cmp	r3, r4
 800d696:	d908      	bls.n	800d6aa <_free_r+0x42>
 800d698:	6820      	ldr	r0, [r4, #0]
 800d69a:	1821      	adds	r1, r4, r0
 800d69c:	428b      	cmp	r3, r1
 800d69e:	bf01      	itttt	eq
 800d6a0:	6819      	ldreq	r1, [r3, #0]
 800d6a2:	685b      	ldreq	r3, [r3, #4]
 800d6a4:	1809      	addeq	r1, r1, r0
 800d6a6:	6021      	streq	r1, [r4, #0]
 800d6a8:	e7ed      	b.n	800d686 <_free_r+0x1e>
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	b10b      	cbz	r3, 800d6b4 <_free_r+0x4c>
 800d6b0:	42a3      	cmp	r3, r4
 800d6b2:	d9fa      	bls.n	800d6aa <_free_r+0x42>
 800d6b4:	6811      	ldr	r1, [r2, #0]
 800d6b6:	1850      	adds	r0, r2, r1
 800d6b8:	42a0      	cmp	r0, r4
 800d6ba:	d10b      	bne.n	800d6d4 <_free_r+0x6c>
 800d6bc:	6820      	ldr	r0, [r4, #0]
 800d6be:	4401      	add	r1, r0
 800d6c0:	1850      	adds	r0, r2, r1
 800d6c2:	4283      	cmp	r3, r0
 800d6c4:	6011      	str	r1, [r2, #0]
 800d6c6:	d1e0      	bne.n	800d68a <_free_r+0x22>
 800d6c8:	6818      	ldr	r0, [r3, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	6053      	str	r3, [r2, #4]
 800d6ce:	4408      	add	r0, r1
 800d6d0:	6010      	str	r0, [r2, #0]
 800d6d2:	e7da      	b.n	800d68a <_free_r+0x22>
 800d6d4:	d902      	bls.n	800d6dc <_free_r+0x74>
 800d6d6:	230c      	movs	r3, #12
 800d6d8:	602b      	str	r3, [r5, #0]
 800d6da:	e7d6      	b.n	800d68a <_free_r+0x22>
 800d6dc:	6820      	ldr	r0, [r4, #0]
 800d6de:	1821      	adds	r1, r4, r0
 800d6e0:	428b      	cmp	r3, r1
 800d6e2:	bf04      	itt	eq
 800d6e4:	6819      	ldreq	r1, [r3, #0]
 800d6e6:	685b      	ldreq	r3, [r3, #4]
 800d6e8:	6063      	str	r3, [r4, #4]
 800d6ea:	bf04      	itt	eq
 800d6ec:	1809      	addeq	r1, r1, r0
 800d6ee:	6021      	streq	r1, [r4, #0]
 800d6f0:	6054      	str	r4, [r2, #4]
 800d6f2:	e7ca      	b.n	800d68a <_free_r+0x22>
 800d6f4:	bd38      	pop	{r3, r4, r5, pc}
 800d6f6:	bf00      	nop
 800d6f8:	20004ccc 	.word	0x20004ccc

0800d6fc <malloc>:
 800d6fc:	4b02      	ldr	r3, [pc, #8]	@ (800d708 <malloc+0xc>)
 800d6fe:	4601      	mov	r1, r0
 800d700:	6818      	ldr	r0, [r3, #0]
 800d702:	f000 b825 	b.w	800d750 <_malloc_r>
 800d706:	bf00      	nop
 800d708:	20000068 	.word	0x20000068

0800d70c <sbrk_aligned>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	4e0f      	ldr	r6, [pc, #60]	@ (800d74c <sbrk_aligned+0x40>)
 800d710:	460c      	mov	r4, r1
 800d712:	6831      	ldr	r1, [r6, #0]
 800d714:	4605      	mov	r5, r0
 800d716:	b911      	cbnz	r1, 800d71e <sbrk_aligned+0x12>
 800d718:	f000 fc64 	bl	800dfe4 <_sbrk_r>
 800d71c:	6030      	str	r0, [r6, #0]
 800d71e:	4621      	mov	r1, r4
 800d720:	4628      	mov	r0, r5
 800d722:	f000 fc5f 	bl	800dfe4 <_sbrk_r>
 800d726:	1c43      	adds	r3, r0, #1
 800d728:	d103      	bne.n	800d732 <sbrk_aligned+0x26>
 800d72a:	f04f 34ff 	mov.w	r4, #4294967295
 800d72e:	4620      	mov	r0, r4
 800d730:	bd70      	pop	{r4, r5, r6, pc}
 800d732:	1cc4      	adds	r4, r0, #3
 800d734:	f024 0403 	bic.w	r4, r4, #3
 800d738:	42a0      	cmp	r0, r4
 800d73a:	d0f8      	beq.n	800d72e <sbrk_aligned+0x22>
 800d73c:	1a21      	subs	r1, r4, r0
 800d73e:	4628      	mov	r0, r5
 800d740:	f000 fc50 	bl	800dfe4 <_sbrk_r>
 800d744:	3001      	adds	r0, #1
 800d746:	d1f2      	bne.n	800d72e <sbrk_aligned+0x22>
 800d748:	e7ef      	b.n	800d72a <sbrk_aligned+0x1e>
 800d74a:	bf00      	nop
 800d74c:	20004cc8 	.word	0x20004cc8

0800d750 <_malloc_r>:
 800d750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d754:	1ccd      	adds	r5, r1, #3
 800d756:	f025 0503 	bic.w	r5, r5, #3
 800d75a:	3508      	adds	r5, #8
 800d75c:	2d0c      	cmp	r5, #12
 800d75e:	bf38      	it	cc
 800d760:	250c      	movcc	r5, #12
 800d762:	2d00      	cmp	r5, #0
 800d764:	4606      	mov	r6, r0
 800d766:	db01      	blt.n	800d76c <_malloc_r+0x1c>
 800d768:	42a9      	cmp	r1, r5
 800d76a:	d904      	bls.n	800d776 <_malloc_r+0x26>
 800d76c:	230c      	movs	r3, #12
 800d76e:	6033      	str	r3, [r6, #0]
 800d770:	2000      	movs	r0, #0
 800d772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d776:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d84c <_malloc_r+0xfc>
 800d77a:	f000 f869 	bl	800d850 <__malloc_lock>
 800d77e:	f8d8 3000 	ldr.w	r3, [r8]
 800d782:	461c      	mov	r4, r3
 800d784:	bb44      	cbnz	r4, 800d7d8 <_malloc_r+0x88>
 800d786:	4629      	mov	r1, r5
 800d788:	4630      	mov	r0, r6
 800d78a:	f7ff ffbf 	bl	800d70c <sbrk_aligned>
 800d78e:	1c43      	adds	r3, r0, #1
 800d790:	4604      	mov	r4, r0
 800d792:	d158      	bne.n	800d846 <_malloc_r+0xf6>
 800d794:	f8d8 4000 	ldr.w	r4, [r8]
 800d798:	4627      	mov	r7, r4
 800d79a:	2f00      	cmp	r7, #0
 800d79c:	d143      	bne.n	800d826 <_malloc_r+0xd6>
 800d79e:	2c00      	cmp	r4, #0
 800d7a0:	d04b      	beq.n	800d83a <_malloc_r+0xea>
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	4639      	mov	r1, r7
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	eb04 0903 	add.w	r9, r4, r3
 800d7ac:	f000 fc1a 	bl	800dfe4 <_sbrk_r>
 800d7b0:	4581      	cmp	r9, r0
 800d7b2:	d142      	bne.n	800d83a <_malloc_r+0xea>
 800d7b4:	6821      	ldr	r1, [r4, #0]
 800d7b6:	1a6d      	subs	r5, r5, r1
 800d7b8:	4629      	mov	r1, r5
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff ffa6 	bl	800d70c <sbrk_aligned>
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	d03a      	beq.n	800d83a <_malloc_r+0xea>
 800d7c4:	6823      	ldr	r3, [r4, #0]
 800d7c6:	442b      	add	r3, r5
 800d7c8:	6023      	str	r3, [r4, #0]
 800d7ca:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	bb62      	cbnz	r2, 800d82c <_malloc_r+0xdc>
 800d7d2:	f8c8 7000 	str.w	r7, [r8]
 800d7d6:	e00f      	b.n	800d7f8 <_malloc_r+0xa8>
 800d7d8:	6822      	ldr	r2, [r4, #0]
 800d7da:	1b52      	subs	r2, r2, r5
 800d7dc:	d420      	bmi.n	800d820 <_malloc_r+0xd0>
 800d7de:	2a0b      	cmp	r2, #11
 800d7e0:	d917      	bls.n	800d812 <_malloc_r+0xc2>
 800d7e2:	1961      	adds	r1, r4, r5
 800d7e4:	42a3      	cmp	r3, r4
 800d7e6:	6025      	str	r5, [r4, #0]
 800d7e8:	bf18      	it	ne
 800d7ea:	6059      	strne	r1, [r3, #4]
 800d7ec:	6863      	ldr	r3, [r4, #4]
 800d7ee:	bf08      	it	eq
 800d7f0:	f8c8 1000 	streq.w	r1, [r8]
 800d7f4:	5162      	str	r2, [r4, r5]
 800d7f6:	604b      	str	r3, [r1, #4]
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	f000 f82f 	bl	800d85c <__malloc_unlock>
 800d7fe:	f104 000b 	add.w	r0, r4, #11
 800d802:	1d23      	adds	r3, r4, #4
 800d804:	f020 0007 	bic.w	r0, r0, #7
 800d808:	1ac2      	subs	r2, r0, r3
 800d80a:	bf1c      	itt	ne
 800d80c:	1a1b      	subne	r3, r3, r0
 800d80e:	50a3      	strne	r3, [r4, r2]
 800d810:	e7af      	b.n	800d772 <_malloc_r+0x22>
 800d812:	6862      	ldr	r2, [r4, #4]
 800d814:	42a3      	cmp	r3, r4
 800d816:	bf0c      	ite	eq
 800d818:	f8c8 2000 	streq.w	r2, [r8]
 800d81c:	605a      	strne	r2, [r3, #4]
 800d81e:	e7eb      	b.n	800d7f8 <_malloc_r+0xa8>
 800d820:	4623      	mov	r3, r4
 800d822:	6864      	ldr	r4, [r4, #4]
 800d824:	e7ae      	b.n	800d784 <_malloc_r+0x34>
 800d826:	463c      	mov	r4, r7
 800d828:	687f      	ldr	r7, [r7, #4]
 800d82a:	e7b6      	b.n	800d79a <_malloc_r+0x4a>
 800d82c:	461a      	mov	r2, r3
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	42a3      	cmp	r3, r4
 800d832:	d1fb      	bne.n	800d82c <_malloc_r+0xdc>
 800d834:	2300      	movs	r3, #0
 800d836:	6053      	str	r3, [r2, #4]
 800d838:	e7de      	b.n	800d7f8 <_malloc_r+0xa8>
 800d83a:	230c      	movs	r3, #12
 800d83c:	6033      	str	r3, [r6, #0]
 800d83e:	4630      	mov	r0, r6
 800d840:	f000 f80c 	bl	800d85c <__malloc_unlock>
 800d844:	e794      	b.n	800d770 <_malloc_r+0x20>
 800d846:	6005      	str	r5, [r0, #0]
 800d848:	e7d6      	b.n	800d7f8 <_malloc_r+0xa8>
 800d84a:	bf00      	nop
 800d84c:	20004ccc 	.word	0x20004ccc

0800d850 <__malloc_lock>:
 800d850:	4801      	ldr	r0, [pc, #4]	@ (800d858 <__malloc_lock+0x8>)
 800d852:	f7ff beda 	b.w	800d60a <__retarget_lock_acquire_recursive>
 800d856:	bf00      	nop
 800d858:	20004cc4 	.word	0x20004cc4

0800d85c <__malloc_unlock>:
 800d85c:	4801      	ldr	r0, [pc, #4]	@ (800d864 <__malloc_unlock+0x8>)
 800d85e:	f7ff bed5 	b.w	800d60c <__retarget_lock_release_recursive>
 800d862:	bf00      	nop
 800d864:	20004cc4 	.word	0x20004cc4

0800d868 <__ssputs_r>:
 800d868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d86c:	688e      	ldr	r6, [r1, #8]
 800d86e:	461f      	mov	r7, r3
 800d870:	42be      	cmp	r6, r7
 800d872:	680b      	ldr	r3, [r1, #0]
 800d874:	4682      	mov	sl, r0
 800d876:	460c      	mov	r4, r1
 800d878:	4690      	mov	r8, r2
 800d87a:	d82d      	bhi.n	800d8d8 <__ssputs_r+0x70>
 800d87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d880:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d884:	d026      	beq.n	800d8d4 <__ssputs_r+0x6c>
 800d886:	6965      	ldr	r5, [r4, #20]
 800d888:	6909      	ldr	r1, [r1, #16]
 800d88a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d88e:	eba3 0901 	sub.w	r9, r3, r1
 800d892:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d896:	1c7b      	adds	r3, r7, #1
 800d898:	444b      	add	r3, r9
 800d89a:	106d      	asrs	r5, r5, #1
 800d89c:	429d      	cmp	r5, r3
 800d89e:	bf38      	it	cc
 800d8a0:	461d      	movcc	r5, r3
 800d8a2:	0553      	lsls	r3, r2, #21
 800d8a4:	d527      	bpl.n	800d8f6 <__ssputs_r+0x8e>
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	f7ff ff52 	bl	800d750 <_malloc_r>
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	b360      	cbz	r0, 800d90a <__ssputs_r+0xa2>
 800d8b0:	6921      	ldr	r1, [r4, #16]
 800d8b2:	464a      	mov	r2, r9
 800d8b4:	f7ff feab 	bl	800d60e <memcpy>
 800d8b8:	89a3      	ldrh	r3, [r4, #12]
 800d8ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d8be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8c2:	81a3      	strh	r3, [r4, #12]
 800d8c4:	6126      	str	r6, [r4, #16]
 800d8c6:	6165      	str	r5, [r4, #20]
 800d8c8:	444e      	add	r6, r9
 800d8ca:	eba5 0509 	sub.w	r5, r5, r9
 800d8ce:	6026      	str	r6, [r4, #0]
 800d8d0:	60a5      	str	r5, [r4, #8]
 800d8d2:	463e      	mov	r6, r7
 800d8d4:	42be      	cmp	r6, r7
 800d8d6:	d900      	bls.n	800d8da <__ssputs_r+0x72>
 800d8d8:	463e      	mov	r6, r7
 800d8da:	6820      	ldr	r0, [r4, #0]
 800d8dc:	4632      	mov	r2, r6
 800d8de:	4641      	mov	r1, r8
 800d8e0:	f000 fb66 	bl	800dfb0 <memmove>
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	1b9b      	subs	r3, r3, r6
 800d8e8:	60a3      	str	r3, [r4, #8]
 800d8ea:	6823      	ldr	r3, [r4, #0]
 800d8ec:	4433      	add	r3, r6
 800d8ee:	6023      	str	r3, [r4, #0]
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f6:	462a      	mov	r2, r5
 800d8f8:	f000 fb8b 	bl	800e012 <_realloc_r>
 800d8fc:	4606      	mov	r6, r0
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d1e0      	bne.n	800d8c4 <__ssputs_r+0x5c>
 800d902:	6921      	ldr	r1, [r4, #16]
 800d904:	4650      	mov	r0, sl
 800d906:	f7ff feaf 	bl	800d668 <_free_r>
 800d90a:	230c      	movs	r3, #12
 800d90c:	f8ca 3000 	str.w	r3, [sl]
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d916:	81a3      	strh	r3, [r4, #12]
 800d918:	f04f 30ff 	mov.w	r0, #4294967295
 800d91c:	e7e9      	b.n	800d8f2 <__ssputs_r+0x8a>
	...

0800d920 <_svfiprintf_r>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	4698      	mov	r8, r3
 800d926:	898b      	ldrh	r3, [r1, #12]
 800d928:	061b      	lsls	r3, r3, #24
 800d92a:	b09d      	sub	sp, #116	@ 0x74
 800d92c:	4607      	mov	r7, r0
 800d92e:	460d      	mov	r5, r1
 800d930:	4614      	mov	r4, r2
 800d932:	d510      	bpl.n	800d956 <_svfiprintf_r+0x36>
 800d934:	690b      	ldr	r3, [r1, #16]
 800d936:	b973      	cbnz	r3, 800d956 <_svfiprintf_r+0x36>
 800d938:	2140      	movs	r1, #64	@ 0x40
 800d93a:	f7ff ff09 	bl	800d750 <_malloc_r>
 800d93e:	6028      	str	r0, [r5, #0]
 800d940:	6128      	str	r0, [r5, #16]
 800d942:	b930      	cbnz	r0, 800d952 <_svfiprintf_r+0x32>
 800d944:	230c      	movs	r3, #12
 800d946:	603b      	str	r3, [r7, #0]
 800d948:	f04f 30ff 	mov.w	r0, #4294967295
 800d94c:	b01d      	add	sp, #116	@ 0x74
 800d94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d952:	2340      	movs	r3, #64	@ 0x40
 800d954:	616b      	str	r3, [r5, #20]
 800d956:	2300      	movs	r3, #0
 800d958:	9309      	str	r3, [sp, #36]	@ 0x24
 800d95a:	2320      	movs	r3, #32
 800d95c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d960:	f8cd 800c 	str.w	r8, [sp, #12]
 800d964:	2330      	movs	r3, #48	@ 0x30
 800d966:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800db04 <_svfiprintf_r+0x1e4>
 800d96a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d96e:	f04f 0901 	mov.w	r9, #1
 800d972:	4623      	mov	r3, r4
 800d974:	469a      	mov	sl, r3
 800d976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d97a:	b10a      	cbz	r2, 800d980 <_svfiprintf_r+0x60>
 800d97c:	2a25      	cmp	r2, #37	@ 0x25
 800d97e:	d1f9      	bne.n	800d974 <_svfiprintf_r+0x54>
 800d980:	ebba 0b04 	subs.w	fp, sl, r4
 800d984:	d00b      	beq.n	800d99e <_svfiprintf_r+0x7e>
 800d986:	465b      	mov	r3, fp
 800d988:	4622      	mov	r2, r4
 800d98a:	4629      	mov	r1, r5
 800d98c:	4638      	mov	r0, r7
 800d98e:	f7ff ff6b 	bl	800d868 <__ssputs_r>
 800d992:	3001      	adds	r0, #1
 800d994:	f000 80a7 	beq.w	800dae6 <_svfiprintf_r+0x1c6>
 800d998:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d99a:	445a      	add	r2, fp
 800d99c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d99e:	f89a 3000 	ldrb.w	r3, [sl]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f000 809f 	beq.w	800dae6 <_svfiprintf_r+0x1c6>
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9b2:	f10a 0a01 	add.w	sl, sl, #1
 800d9b6:	9304      	str	r3, [sp, #16]
 800d9b8:	9307      	str	r3, [sp, #28]
 800d9ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d9be:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9c0:	4654      	mov	r4, sl
 800d9c2:	2205      	movs	r2, #5
 800d9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c8:	484e      	ldr	r0, [pc, #312]	@ (800db04 <_svfiprintf_r+0x1e4>)
 800d9ca:	f7f2 fc21 	bl	8000210 <memchr>
 800d9ce:	9a04      	ldr	r2, [sp, #16]
 800d9d0:	b9d8      	cbnz	r0, 800da0a <_svfiprintf_r+0xea>
 800d9d2:	06d0      	lsls	r0, r2, #27
 800d9d4:	bf44      	itt	mi
 800d9d6:	2320      	movmi	r3, #32
 800d9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9dc:	0711      	lsls	r1, r2, #28
 800d9de:	bf44      	itt	mi
 800d9e0:	232b      	movmi	r3, #43	@ 0x2b
 800d9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9ec:	d015      	beq.n	800da1a <_svfiprintf_r+0xfa>
 800d9ee:	9a07      	ldr	r2, [sp, #28]
 800d9f0:	4654      	mov	r4, sl
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	f04f 0c0a 	mov.w	ip, #10
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9fe:	3b30      	subs	r3, #48	@ 0x30
 800da00:	2b09      	cmp	r3, #9
 800da02:	d94b      	bls.n	800da9c <_svfiprintf_r+0x17c>
 800da04:	b1b0      	cbz	r0, 800da34 <_svfiprintf_r+0x114>
 800da06:	9207      	str	r2, [sp, #28]
 800da08:	e014      	b.n	800da34 <_svfiprintf_r+0x114>
 800da0a:	eba0 0308 	sub.w	r3, r0, r8
 800da0e:	fa09 f303 	lsl.w	r3, r9, r3
 800da12:	4313      	orrs	r3, r2
 800da14:	9304      	str	r3, [sp, #16]
 800da16:	46a2      	mov	sl, r4
 800da18:	e7d2      	b.n	800d9c0 <_svfiprintf_r+0xa0>
 800da1a:	9b03      	ldr	r3, [sp, #12]
 800da1c:	1d19      	adds	r1, r3, #4
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	9103      	str	r1, [sp, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	bfbb      	ittet	lt
 800da26:	425b      	neglt	r3, r3
 800da28:	f042 0202 	orrlt.w	r2, r2, #2
 800da2c:	9307      	strge	r3, [sp, #28]
 800da2e:	9307      	strlt	r3, [sp, #28]
 800da30:	bfb8      	it	lt
 800da32:	9204      	strlt	r2, [sp, #16]
 800da34:	7823      	ldrb	r3, [r4, #0]
 800da36:	2b2e      	cmp	r3, #46	@ 0x2e
 800da38:	d10a      	bne.n	800da50 <_svfiprintf_r+0x130>
 800da3a:	7863      	ldrb	r3, [r4, #1]
 800da3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800da3e:	d132      	bne.n	800daa6 <_svfiprintf_r+0x186>
 800da40:	9b03      	ldr	r3, [sp, #12]
 800da42:	1d1a      	adds	r2, r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	9203      	str	r2, [sp, #12]
 800da48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da4c:	3402      	adds	r4, #2
 800da4e:	9305      	str	r3, [sp, #20]
 800da50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800db14 <_svfiprintf_r+0x1f4>
 800da54:	7821      	ldrb	r1, [r4, #0]
 800da56:	2203      	movs	r2, #3
 800da58:	4650      	mov	r0, sl
 800da5a:	f7f2 fbd9 	bl	8000210 <memchr>
 800da5e:	b138      	cbz	r0, 800da70 <_svfiprintf_r+0x150>
 800da60:	9b04      	ldr	r3, [sp, #16]
 800da62:	eba0 000a 	sub.w	r0, r0, sl
 800da66:	2240      	movs	r2, #64	@ 0x40
 800da68:	4082      	lsls	r2, r0
 800da6a:	4313      	orrs	r3, r2
 800da6c:	3401      	adds	r4, #1
 800da6e:	9304      	str	r3, [sp, #16]
 800da70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da74:	4824      	ldr	r0, [pc, #144]	@ (800db08 <_svfiprintf_r+0x1e8>)
 800da76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da7a:	2206      	movs	r2, #6
 800da7c:	f7f2 fbc8 	bl	8000210 <memchr>
 800da80:	2800      	cmp	r0, #0
 800da82:	d036      	beq.n	800daf2 <_svfiprintf_r+0x1d2>
 800da84:	4b21      	ldr	r3, [pc, #132]	@ (800db0c <_svfiprintf_r+0x1ec>)
 800da86:	bb1b      	cbnz	r3, 800dad0 <_svfiprintf_r+0x1b0>
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	3307      	adds	r3, #7
 800da8c:	f023 0307 	bic.w	r3, r3, #7
 800da90:	3308      	adds	r3, #8
 800da92:	9303      	str	r3, [sp, #12]
 800da94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da96:	4433      	add	r3, r6
 800da98:	9309      	str	r3, [sp, #36]	@ 0x24
 800da9a:	e76a      	b.n	800d972 <_svfiprintf_r+0x52>
 800da9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800daa0:	460c      	mov	r4, r1
 800daa2:	2001      	movs	r0, #1
 800daa4:	e7a8      	b.n	800d9f8 <_svfiprintf_r+0xd8>
 800daa6:	2300      	movs	r3, #0
 800daa8:	3401      	adds	r4, #1
 800daaa:	9305      	str	r3, [sp, #20]
 800daac:	4619      	mov	r1, r3
 800daae:	f04f 0c0a 	mov.w	ip, #10
 800dab2:	4620      	mov	r0, r4
 800dab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dab8:	3a30      	subs	r2, #48	@ 0x30
 800daba:	2a09      	cmp	r2, #9
 800dabc:	d903      	bls.n	800dac6 <_svfiprintf_r+0x1a6>
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d0c6      	beq.n	800da50 <_svfiprintf_r+0x130>
 800dac2:	9105      	str	r1, [sp, #20]
 800dac4:	e7c4      	b.n	800da50 <_svfiprintf_r+0x130>
 800dac6:	fb0c 2101 	mla	r1, ip, r1, r2
 800daca:	4604      	mov	r4, r0
 800dacc:	2301      	movs	r3, #1
 800dace:	e7f0      	b.n	800dab2 <_svfiprintf_r+0x192>
 800dad0:	ab03      	add	r3, sp, #12
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	462a      	mov	r2, r5
 800dad6:	4b0e      	ldr	r3, [pc, #56]	@ (800db10 <_svfiprintf_r+0x1f0>)
 800dad8:	a904      	add	r1, sp, #16
 800dada:	4638      	mov	r0, r7
 800dadc:	f3af 8000 	nop.w
 800dae0:	1c42      	adds	r2, r0, #1
 800dae2:	4606      	mov	r6, r0
 800dae4:	d1d6      	bne.n	800da94 <_svfiprintf_r+0x174>
 800dae6:	89ab      	ldrh	r3, [r5, #12]
 800dae8:	065b      	lsls	r3, r3, #25
 800daea:	f53f af2d 	bmi.w	800d948 <_svfiprintf_r+0x28>
 800daee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800daf0:	e72c      	b.n	800d94c <_svfiprintf_r+0x2c>
 800daf2:	ab03      	add	r3, sp, #12
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	462a      	mov	r2, r5
 800daf8:	4b05      	ldr	r3, [pc, #20]	@ (800db10 <_svfiprintf_r+0x1f0>)
 800dafa:	a904      	add	r1, sp, #16
 800dafc:	4638      	mov	r0, r7
 800dafe:	f000 f879 	bl	800dbf4 <_printf_i>
 800db02:	e7ed      	b.n	800dae0 <_svfiprintf_r+0x1c0>
 800db04:	0801caef 	.word	0x0801caef
 800db08:	0801caf9 	.word	0x0801caf9
 800db0c:	00000000 	.word	0x00000000
 800db10:	0800d869 	.word	0x0800d869
 800db14:	0801caf5 	.word	0x0801caf5

0800db18 <_printf_common>:
 800db18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db1c:	4616      	mov	r6, r2
 800db1e:	4698      	mov	r8, r3
 800db20:	688a      	ldr	r2, [r1, #8]
 800db22:	690b      	ldr	r3, [r1, #16]
 800db24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db28:	4293      	cmp	r3, r2
 800db2a:	bfb8      	it	lt
 800db2c:	4613      	movlt	r3, r2
 800db2e:	6033      	str	r3, [r6, #0]
 800db30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db34:	4607      	mov	r7, r0
 800db36:	460c      	mov	r4, r1
 800db38:	b10a      	cbz	r2, 800db3e <_printf_common+0x26>
 800db3a:	3301      	adds	r3, #1
 800db3c:	6033      	str	r3, [r6, #0]
 800db3e:	6823      	ldr	r3, [r4, #0]
 800db40:	0699      	lsls	r1, r3, #26
 800db42:	bf42      	ittt	mi
 800db44:	6833      	ldrmi	r3, [r6, #0]
 800db46:	3302      	addmi	r3, #2
 800db48:	6033      	strmi	r3, [r6, #0]
 800db4a:	6825      	ldr	r5, [r4, #0]
 800db4c:	f015 0506 	ands.w	r5, r5, #6
 800db50:	d106      	bne.n	800db60 <_printf_common+0x48>
 800db52:	f104 0a19 	add.w	sl, r4, #25
 800db56:	68e3      	ldr	r3, [r4, #12]
 800db58:	6832      	ldr	r2, [r6, #0]
 800db5a:	1a9b      	subs	r3, r3, r2
 800db5c:	42ab      	cmp	r3, r5
 800db5e:	dc26      	bgt.n	800dbae <_printf_common+0x96>
 800db60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db64:	6822      	ldr	r2, [r4, #0]
 800db66:	3b00      	subs	r3, #0
 800db68:	bf18      	it	ne
 800db6a:	2301      	movne	r3, #1
 800db6c:	0692      	lsls	r2, r2, #26
 800db6e:	d42b      	bmi.n	800dbc8 <_printf_common+0xb0>
 800db70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db74:	4641      	mov	r1, r8
 800db76:	4638      	mov	r0, r7
 800db78:	47c8      	blx	r9
 800db7a:	3001      	adds	r0, #1
 800db7c:	d01e      	beq.n	800dbbc <_printf_common+0xa4>
 800db7e:	6823      	ldr	r3, [r4, #0]
 800db80:	6922      	ldr	r2, [r4, #16]
 800db82:	f003 0306 	and.w	r3, r3, #6
 800db86:	2b04      	cmp	r3, #4
 800db88:	bf02      	ittt	eq
 800db8a:	68e5      	ldreq	r5, [r4, #12]
 800db8c:	6833      	ldreq	r3, [r6, #0]
 800db8e:	1aed      	subeq	r5, r5, r3
 800db90:	68a3      	ldr	r3, [r4, #8]
 800db92:	bf0c      	ite	eq
 800db94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db98:	2500      	movne	r5, #0
 800db9a:	4293      	cmp	r3, r2
 800db9c:	bfc4      	itt	gt
 800db9e:	1a9b      	subgt	r3, r3, r2
 800dba0:	18ed      	addgt	r5, r5, r3
 800dba2:	2600      	movs	r6, #0
 800dba4:	341a      	adds	r4, #26
 800dba6:	42b5      	cmp	r5, r6
 800dba8:	d11a      	bne.n	800dbe0 <_printf_common+0xc8>
 800dbaa:	2000      	movs	r0, #0
 800dbac:	e008      	b.n	800dbc0 <_printf_common+0xa8>
 800dbae:	2301      	movs	r3, #1
 800dbb0:	4652      	mov	r2, sl
 800dbb2:	4641      	mov	r1, r8
 800dbb4:	4638      	mov	r0, r7
 800dbb6:	47c8      	blx	r9
 800dbb8:	3001      	adds	r0, #1
 800dbba:	d103      	bne.n	800dbc4 <_printf_common+0xac>
 800dbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbc4:	3501      	adds	r5, #1
 800dbc6:	e7c6      	b.n	800db56 <_printf_common+0x3e>
 800dbc8:	18e1      	adds	r1, r4, r3
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	2030      	movs	r0, #48	@ 0x30
 800dbce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dbd2:	4422      	add	r2, r4
 800dbd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dbd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dbdc:	3302      	adds	r3, #2
 800dbde:	e7c7      	b.n	800db70 <_printf_common+0x58>
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	4622      	mov	r2, r4
 800dbe4:	4641      	mov	r1, r8
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	47c8      	blx	r9
 800dbea:	3001      	adds	r0, #1
 800dbec:	d0e6      	beq.n	800dbbc <_printf_common+0xa4>
 800dbee:	3601      	adds	r6, #1
 800dbf0:	e7d9      	b.n	800dba6 <_printf_common+0x8e>
	...

0800dbf4 <_printf_i>:
 800dbf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dbf8:	7e0f      	ldrb	r7, [r1, #24]
 800dbfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dbfc:	2f78      	cmp	r7, #120	@ 0x78
 800dbfe:	4691      	mov	r9, r2
 800dc00:	4680      	mov	r8, r0
 800dc02:	460c      	mov	r4, r1
 800dc04:	469a      	mov	sl, r3
 800dc06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc0a:	d807      	bhi.n	800dc1c <_printf_i+0x28>
 800dc0c:	2f62      	cmp	r7, #98	@ 0x62
 800dc0e:	d80a      	bhi.n	800dc26 <_printf_i+0x32>
 800dc10:	2f00      	cmp	r7, #0
 800dc12:	f000 80d2 	beq.w	800ddba <_printf_i+0x1c6>
 800dc16:	2f58      	cmp	r7, #88	@ 0x58
 800dc18:	f000 80b9 	beq.w	800dd8e <_printf_i+0x19a>
 800dc1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc24:	e03a      	b.n	800dc9c <_printf_i+0xa8>
 800dc26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc2a:	2b15      	cmp	r3, #21
 800dc2c:	d8f6      	bhi.n	800dc1c <_printf_i+0x28>
 800dc2e:	a101      	add	r1, pc, #4	@ (adr r1, 800dc34 <_printf_i+0x40>)
 800dc30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc34:	0800dc8d 	.word	0x0800dc8d
 800dc38:	0800dca1 	.word	0x0800dca1
 800dc3c:	0800dc1d 	.word	0x0800dc1d
 800dc40:	0800dc1d 	.word	0x0800dc1d
 800dc44:	0800dc1d 	.word	0x0800dc1d
 800dc48:	0800dc1d 	.word	0x0800dc1d
 800dc4c:	0800dca1 	.word	0x0800dca1
 800dc50:	0800dc1d 	.word	0x0800dc1d
 800dc54:	0800dc1d 	.word	0x0800dc1d
 800dc58:	0800dc1d 	.word	0x0800dc1d
 800dc5c:	0800dc1d 	.word	0x0800dc1d
 800dc60:	0800dda1 	.word	0x0800dda1
 800dc64:	0800dccb 	.word	0x0800dccb
 800dc68:	0800dd5b 	.word	0x0800dd5b
 800dc6c:	0800dc1d 	.word	0x0800dc1d
 800dc70:	0800dc1d 	.word	0x0800dc1d
 800dc74:	0800ddc3 	.word	0x0800ddc3
 800dc78:	0800dc1d 	.word	0x0800dc1d
 800dc7c:	0800dccb 	.word	0x0800dccb
 800dc80:	0800dc1d 	.word	0x0800dc1d
 800dc84:	0800dc1d 	.word	0x0800dc1d
 800dc88:	0800dd63 	.word	0x0800dd63
 800dc8c:	6833      	ldr	r3, [r6, #0]
 800dc8e:	1d1a      	adds	r2, r3, #4
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	6032      	str	r2, [r6, #0]
 800dc94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e09d      	b.n	800dddc <_printf_i+0x1e8>
 800dca0:	6833      	ldr	r3, [r6, #0]
 800dca2:	6820      	ldr	r0, [r4, #0]
 800dca4:	1d19      	adds	r1, r3, #4
 800dca6:	6031      	str	r1, [r6, #0]
 800dca8:	0606      	lsls	r6, r0, #24
 800dcaa:	d501      	bpl.n	800dcb0 <_printf_i+0xbc>
 800dcac:	681d      	ldr	r5, [r3, #0]
 800dcae:	e003      	b.n	800dcb8 <_printf_i+0xc4>
 800dcb0:	0645      	lsls	r5, r0, #25
 800dcb2:	d5fb      	bpl.n	800dcac <_printf_i+0xb8>
 800dcb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dcb8:	2d00      	cmp	r5, #0
 800dcba:	da03      	bge.n	800dcc4 <_printf_i+0xd0>
 800dcbc:	232d      	movs	r3, #45	@ 0x2d
 800dcbe:	426d      	negs	r5, r5
 800dcc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcc4:	4859      	ldr	r0, [pc, #356]	@ (800de2c <_printf_i+0x238>)
 800dcc6:	230a      	movs	r3, #10
 800dcc8:	e011      	b.n	800dcee <_printf_i+0xfa>
 800dcca:	6821      	ldr	r1, [r4, #0]
 800dccc:	6833      	ldr	r3, [r6, #0]
 800dcce:	0608      	lsls	r0, r1, #24
 800dcd0:	f853 5b04 	ldr.w	r5, [r3], #4
 800dcd4:	d402      	bmi.n	800dcdc <_printf_i+0xe8>
 800dcd6:	0649      	lsls	r1, r1, #25
 800dcd8:	bf48      	it	mi
 800dcda:	b2ad      	uxthmi	r5, r5
 800dcdc:	2f6f      	cmp	r7, #111	@ 0x6f
 800dcde:	4853      	ldr	r0, [pc, #332]	@ (800de2c <_printf_i+0x238>)
 800dce0:	6033      	str	r3, [r6, #0]
 800dce2:	bf14      	ite	ne
 800dce4:	230a      	movne	r3, #10
 800dce6:	2308      	moveq	r3, #8
 800dce8:	2100      	movs	r1, #0
 800dcea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dcee:	6866      	ldr	r6, [r4, #4]
 800dcf0:	60a6      	str	r6, [r4, #8]
 800dcf2:	2e00      	cmp	r6, #0
 800dcf4:	bfa2      	ittt	ge
 800dcf6:	6821      	ldrge	r1, [r4, #0]
 800dcf8:	f021 0104 	bicge.w	r1, r1, #4
 800dcfc:	6021      	strge	r1, [r4, #0]
 800dcfe:	b90d      	cbnz	r5, 800dd04 <_printf_i+0x110>
 800dd00:	2e00      	cmp	r6, #0
 800dd02:	d04b      	beq.n	800dd9c <_printf_i+0x1a8>
 800dd04:	4616      	mov	r6, r2
 800dd06:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd0a:	fb03 5711 	mls	r7, r3, r1, r5
 800dd0e:	5dc7      	ldrb	r7, [r0, r7]
 800dd10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd14:	462f      	mov	r7, r5
 800dd16:	42bb      	cmp	r3, r7
 800dd18:	460d      	mov	r5, r1
 800dd1a:	d9f4      	bls.n	800dd06 <_printf_i+0x112>
 800dd1c:	2b08      	cmp	r3, #8
 800dd1e:	d10b      	bne.n	800dd38 <_printf_i+0x144>
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	07df      	lsls	r7, r3, #31
 800dd24:	d508      	bpl.n	800dd38 <_printf_i+0x144>
 800dd26:	6923      	ldr	r3, [r4, #16]
 800dd28:	6861      	ldr	r1, [r4, #4]
 800dd2a:	4299      	cmp	r1, r3
 800dd2c:	bfde      	ittt	le
 800dd2e:	2330      	movle	r3, #48	@ 0x30
 800dd30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd38:	1b92      	subs	r2, r2, r6
 800dd3a:	6122      	str	r2, [r4, #16]
 800dd3c:	f8cd a000 	str.w	sl, [sp]
 800dd40:	464b      	mov	r3, r9
 800dd42:	aa03      	add	r2, sp, #12
 800dd44:	4621      	mov	r1, r4
 800dd46:	4640      	mov	r0, r8
 800dd48:	f7ff fee6 	bl	800db18 <_printf_common>
 800dd4c:	3001      	adds	r0, #1
 800dd4e:	d14a      	bne.n	800dde6 <_printf_i+0x1f2>
 800dd50:	f04f 30ff 	mov.w	r0, #4294967295
 800dd54:	b004      	add	sp, #16
 800dd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd5a:	6823      	ldr	r3, [r4, #0]
 800dd5c:	f043 0320 	orr.w	r3, r3, #32
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	4833      	ldr	r0, [pc, #204]	@ (800de30 <_printf_i+0x23c>)
 800dd64:	2778      	movs	r7, #120	@ 0x78
 800dd66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd6a:	6823      	ldr	r3, [r4, #0]
 800dd6c:	6831      	ldr	r1, [r6, #0]
 800dd6e:	061f      	lsls	r7, r3, #24
 800dd70:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd74:	d402      	bmi.n	800dd7c <_printf_i+0x188>
 800dd76:	065f      	lsls	r7, r3, #25
 800dd78:	bf48      	it	mi
 800dd7a:	b2ad      	uxthmi	r5, r5
 800dd7c:	6031      	str	r1, [r6, #0]
 800dd7e:	07d9      	lsls	r1, r3, #31
 800dd80:	bf44      	itt	mi
 800dd82:	f043 0320 	orrmi.w	r3, r3, #32
 800dd86:	6023      	strmi	r3, [r4, #0]
 800dd88:	b11d      	cbz	r5, 800dd92 <_printf_i+0x19e>
 800dd8a:	2310      	movs	r3, #16
 800dd8c:	e7ac      	b.n	800dce8 <_printf_i+0xf4>
 800dd8e:	4827      	ldr	r0, [pc, #156]	@ (800de2c <_printf_i+0x238>)
 800dd90:	e7e9      	b.n	800dd66 <_printf_i+0x172>
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	f023 0320 	bic.w	r3, r3, #32
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	e7f6      	b.n	800dd8a <_printf_i+0x196>
 800dd9c:	4616      	mov	r6, r2
 800dd9e:	e7bd      	b.n	800dd1c <_printf_i+0x128>
 800dda0:	6833      	ldr	r3, [r6, #0]
 800dda2:	6825      	ldr	r5, [r4, #0]
 800dda4:	6961      	ldr	r1, [r4, #20]
 800dda6:	1d18      	adds	r0, r3, #4
 800dda8:	6030      	str	r0, [r6, #0]
 800ddaa:	062e      	lsls	r6, r5, #24
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	d501      	bpl.n	800ddb4 <_printf_i+0x1c0>
 800ddb0:	6019      	str	r1, [r3, #0]
 800ddb2:	e002      	b.n	800ddba <_printf_i+0x1c6>
 800ddb4:	0668      	lsls	r0, r5, #25
 800ddb6:	d5fb      	bpl.n	800ddb0 <_printf_i+0x1bc>
 800ddb8:	8019      	strh	r1, [r3, #0]
 800ddba:	2300      	movs	r3, #0
 800ddbc:	6123      	str	r3, [r4, #16]
 800ddbe:	4616      	mov	r6, r2
 800ddc0:	e7bc      	b.n	800dd3c <_printf_i+0x148>
 800ddc2:	6833      	ldr	r3, [r6, #0]
 800ddc4:	1d1a      	adds	r2, r3, #4
 800ddc6:	6032      	str	r2, [r6, #0]
 800ddc8:	681e      	ldr	r6, [r3, #0]
 800ddca:	6862      	ldr	r2, [r4, #4]
 800ddcc:	2100      	movs	r1, #0
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f7f2 fa1e 	bl	8000210 <memchr>
 800ddd4:	b108      	cbz	r0, 800ddda <_printf_i+0x1e6>
 800ddd6:	1b80      	subs	r0, r0, r6
 800ddd8:	6060      	str	r0, [r4, #4]
 800ddda:	6863      	ldr	r3, [r4, #4]
 800dddc:	6123      	str	r3, [r4, #16]
 800ddde:	2300      	movs	r3, #0
 800dde0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dde4:	e7aa      	b.n	800dd3c <_printf_i+0x148>
 800dde6:	6923      	ldr	r3, [r4, #16]
 800dde8:	4632      	mov	r2, r6
 800ddea:	4649      	mov	r1, r9
 800ddec:	4640      	mov	r0, r8
 800ddee:	47d0      	blx	sl
 800ddf0:	3001      	adds	r0, #1
 800ddf2:	d0ad      	beq.n	800dd50 <_printf_i+0x15c>
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	079b      	lsls	r3, r3, #30
 800ddf8:	d413      	bmi.n	800de22 <_printf_i+0x22e>
 800ddfa:	68e0      	ldr	r0, [r4, #12]
 800ddfc:	9b03      	ldr	r3, [sp, #12]
 800ddfe:	4298      	cmp	r0, r3
 800de00:	bfb8      	it	lt
 800de02:	4618      	movlt	r0, r3
 800de04:	e7a6      	b.n	800dd54 <_printf_i+0x160>
 800de06:	2301      	movs	r3, #1
 800de08:	4632      	mov	r2, r6
 800de0a:	4649      	mov	r1, r9
 800de0c:	4640      	mov	r0, r8
 800de0e:	47d0      	blx	sl
 800de10:	3001      	adds	r0, #1
 800de12:	d09d      	beq.n	800dd50 <_printf_i+0x15c>
 800de14:	3501      	adds	r5, #1
 800de16:	68e3      	ldr	r3, [r4, #12]
 800de18:	9903      	ldr	r1, [sp, #12]
 800de1a:	1a5b      	subs	r3, r3, r1
 800de1c:	42ab      	cmp	r3, r5
 800de1e:	dcf2      	bgt.n	800de06 <_printf_i+0x212>
 800de20:	e7eb      	b.n	800ddfa <_printf_i+0x206>
 800de22:	2500      	movs	r5, #0
 800de24:	f104 0619 	add.w	r6, r4, #25
 800de28:	e7f5      	b.n	800de16 <_printf_i+0x222>
 800de2a:	bf00      	nop
 800de2c:	0801cb00 	.word	0x0801cb00
 800de30:	0801cb11 	.word	0x0801cb11

0800de34 <__sflush_r>:
 800de34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de3c:	0716      	lsls	r6, r2, #28
 800de3e:	4605      	mov	r5, r0
 800de40:	460c      	mov	r4, r1
 800de42:	d454      	bmi.n	800deee <__sflush_r+0xba>
 800de44:	684b      	ldr	r3, [r1, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	dc02      	bgt.n	800de50 <__sflush_r+0x1c>
 800de4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dd48      	ble.n	800dee2 <__sflush_r+0xae>
 800de50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de52:	2e00      	cmp	r6, #0
 800de54:	d045      	beq.n	800dee2 <__sflush_r+0xae>
 800de56:	2300      	movs	r3, #0
 800de58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800de5c:	682f      	ldr	r7, [r5, #0]
 800de5e:	6a21      	ldr	r1, [r4, #32]
 800de60:	602b      	str	r3, [r5, #0]
 800de62:	d030      	beq.n	800dec6 <__sflush_r+0x92>
 800de64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800de66:	89a3      	ldrh	r3, [r4, #12]
 800de68:	0759      	lsls	r1, r3, #29
 800de6a:	d505      	bpl.n	800de78 <__sflush_r+0x44>
 800de6c:	6863      	ldr	r3, [r4, #4]
 800de6e:	1ad2      	subs	r2, r2, r3
 800de70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800de72:	b10b      	cbz	r3, 800de78 <__sflush_r+0x44>
 800de74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800de76:	1ad2      	subs	r2, r2, r3
 800de78:	2300      	movs	r3, #0
 800de7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800de7c:	6a21      	ldr	r1, [r4, #32]
 800de7e:	4628      	mov	r0, r5
 800de80:	47b0      	blx	r6
 800de82:	1c43      	adds	r3, r0, #1
 800de84:	89a3      	ldrh	r3, [r4, #12]
 800de86:	d106      	bne.n	800de96 <__sflush_r+0x62>
 800de88:	6829      	ldr	r1, [r5, #0]
 800de8a:	291d      	cmp	r1, #29
 800de8c:	d82b      	bhi.n	800dee6 <__sflush_r+0xb2>
 800de8e:	4a2a      	ldr	r2, [pc, #168]	@ (800df38 <__sflush_r+0x104>)
 800de90:	410a      	asrs	r2, r1
 800de92:	07d6      	lsls	r6, r2, #31
 800de94:	d427      	bmi.n	800dee6 <__sflush_r+0xb2>
 800de96:	2200      	movs	r2, #0
 800de98:	6062      	str	r2, [r4, #4]
 800de9a:	04d9      	lsls	r1, r3, #19
 800de9c:	6922      	ldr	r2, [r4, #16]
 800de9e:	6022      	str	r2, [r4, #0]
 800dea0:	d504      	bpl.n	800deac <__sflush_r+0x78>
 800dea2:	1c42      	adds	r2, r0, #1
 800dea4:	d101      	bne.n	800deaa <__sflush_r+0x76>
 800dea6:	682b      	ldr	r3, [r5, #0]
 800dea8:	b903      	cbnz	r3, 800deac <__sflush_r+0x78>
 800deaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800deac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800deae:	602f      	str	r7, [r5, #0]
 800deb0:	b1b9      	cbz	r1, 800dee2 <__sflush_r+0xae>
 800deb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800deb6:	4299      	cmp	r1, r3
 800deb8:	d002      	beq.n	800dec0 <__sflush_r+0x8c>
 800deba:	4628      	mov	r0, r5
 800debc:	f7ff fbd4 	bl	800d668 <_free_r>
 800dec0:	2300      	movs	r3, #0
 800dec2:	6363      	str	r3, [r4, #52]	@ 0x34
 800dec4:	e00d      	b.n	800dee2 <__sflush_r+0xae>
 800dec6:	2301      	movs	r3, #1
 800dec8:	4628      	mov	r0, r5
 800deca:	47b0      	blx	r6
 800decc:	4602      	mov	r2, r0
 800dece:	1c50      	adds	r0, r2, #1
 800ded0:	d1c9      	bne.n	800de66 <__sflush_r+0x32>
 800ded2:	682b      	ldr	r3, [r5, #0]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d0c6      	beq.n	800de66 <__sflush_r+0x32>
 800ded8:	2b1d      	cmp	r3, #29
 800deda:	d001      	beq.n	800dee0 <__sflush_r+0xac>
 800dedc:	2b16      	cmp	r3, #22
 800dede:	d11e      	bne.n	800df1e <__sflush_r+0xea>
 800dee0:	602f      	str	r7, [r5, #0]
 800dee2:	2000      	movs	r0, #0
 800dee4:	e022      	b.n	800df2c <__sflush_r+0xf8>
 800dee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deea:	b21b      	sxth	r3, r3
 800deec:	e01b      	b.n	800df26 <__sflush_r+0xf2>
 800deee:	690f      	ldr	r7, [r1, #16]
 800def0:	2f00      	cmp	r7, #0
 800def2:	d0f6      	beq.n	800dee2 <__sflush_r+0xae>
 800def4:	0793      	lsls	r3, r2, #30
 800def6:	680e      	ldr	r6, [r1, #0]
 800def8:	bf08      	it	eq
 800defa:	694b      	ldreq	r3, [r1, #20]
 800defc:	600f      	str	r7, [r1, #0]
 800defe:	bf18      	it	ne
 800df00:	2300      	movne	r3, #0
 800df02:	eba6 0807 	sub.w	r8, r6, r7
 800df06:	608b      	str	r3, [r1, #8]
 800df08:	f1b8 0f00 	cmp.w	r8, #0
 800df0c:	dde9      	ble.n	800dee2 <__sflush_r+0xae>
 800df0e:	6a21      	ldr	r1, [r4, #32]
 800df10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800df12:	4643      	mov	r3, r8
 800df14:	463a      	mov	r2, r7
 800df16:	4628      	mov	r0, r5
 800df18:	47b0      	blx	r6
 800df1a:	2800      	cmp	r0, #0
 800df1c:	dc08      	bgt.n	800df30 <__sflush_r+0xfc>
 800df1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df26:	81a3      	strh	r3, [r4, #12]
 800df28:	f04f 30ff 	mov.w	r0, #4294967295
 800df2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df30:	4407      	add	r7, r0
 800df32:	eba8 0800 	sub.w	r8, r8, r0
 800df36:	e7e7      	b.n	800df08 <__sflush_r+0xd4>
 800df38:	dfbffffe 	.word	0xdfbffffe

0800df3c <_fflush_r>:
 800df3c:	b538      	push	{r3, r4, r5, lr}
 800df3e:	690b      	ldr	r3, [r1, #16]
 800df40:	4605      	mov	r5, r0
 800df42:	460c      	mov	r4, r1
 800df44:	b913      	cbnz	r3, 800df4c <_fflush_r+0x10>
 800df46:	2500      	movs	r5, #0
 800df48:	4628      	mov	r0, r5
 800df4a:	bd38      	pop	{r3, r4, r5, pc}
 800df4c:	b118      	cbz	r0, 800df56 <_fflush_r+0x1a>
 800df4e:	6a03      	ldr	r3, [r0, #32]
 800df50:	b90b      	cbnz	r3, 800df56 <_fflush_r+0x1a>
 800df52:	f7ff fa47 	bl	800d3e4 <__sinit>
 800df56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0f3      	beq.n	800df46 <_fflush_r+0xa>
 800df5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800df60:	07d0      	lsls	r0, r2, #31
 800df62:	d404      	bmi.n	800df6e <_fflush_r+0x32>
 800df64:	0599      	lsls	r1, r3, #22
 800df66:	d402      	bmi.n	800df6e <_fflush_r+0x32>
 800df68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df6a:	f7ff fb4e 	bl	800d60a <__retarget_lock_acquire_recursive>
 800df6e:	4628      	mov	r0, r5
 800df70:	4621      	mov	r1, r4
 800df72:	f7ff ff5f 	bl	800de34 <__sflush_r>
 800df76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800df78:	07da      	lsls	r2, r3, #31
 800df7a:	4605      	mov	r5, r0
 800df7c:	d4e4      	bmi.n	800df48 <_fflush_r+0xc>
 800df7e:	89a3      	ldrh	r3, [r4, #12]
 800df80:	059b      	lsls	r3, r3, #22
 800df82:	d4e1      	bmi.n	800df48 <_fflush_r+0xc>
 800df84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800df86:	f7ff fb41 	bl	800d60c <__retarget_lock_release_recursive>
 800df8a:	e7dd      	b.n	800df48 <_fflush_r+0xc>

0800df8c <fiprintf>:
 800df8c:	b40e      	push	{r1, r2, r3}
 800df8e:	b503      	push	{r0, r1, lr}
 800df90:	4601      	mov	r1, r0
 800df92:	ab03      	add	r3, sp, #12
 800df94:	4805      	ldr	r0, [pc, #20]	@ (800dfac <fiprintf+0x20>)
 800df96:	f853 2b04 	ldr.w	r2, [r3], #4
 800df9a:	6800      	ldr	r0, [r0, #0]
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	f000 f88f 	bl	800e0c0 <_vfiprintf_r>
 800dfa2:	b002      	add	sp, #8
 800dfa4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfa8:	b003      	add	sp, #12
 800dfaa:	4770      	bx	lr
 800dfac:	20000068 	.word	0x20000068

0800dfb0 <memmove>:
 800dfb0:	4288      	cmp	r0, r1
 800dfb2:	b510      	push	{r4, lr}
 800dfb4:	eb01 0402 	add.w	r4, r1, r2
 800dfb8:	d902      	bls.n	800dfc0 <memmove+0x10>
 800dfba:	4284      	cmp	r4, r0
 800dfbc:	4623      	mov	r3, r4
 800dfbe:	d807      	bhi.n	800dfd0 <memmove+0x20>
 800dfc0:	1e43      	subs	r3, r0, #1
 800dfc2:	42a1      	cmp	r1, r4
 800dfc4:	d008      	beq.n	800dfd8 <memmove+0x28>
 800dfc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfce:	e7f8      	b.n	800dfc2 <memmove+0x12>
 800dfd0:	4402      	add	r2, r0
 800dfd2:	4601      	mov	r1, r0
 800dfd4:	428a      	cmp	r2, r1
 800dfd6:	d100      	bne.n	800dfda <memmove+0x2a>
 800dfd8:	bd10      	pop	{r4, pc}
 800dfda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfe2:	e7f7      	b.n	800dfd4 <memmove+0x24>

0800dfe4 <_sbrk_r>:
 800dfe4:	b538      	push	{r3, r4, r5, lr}
 800dfe6:	4d06      	ldr	r5, [pc, #24]	@ (800e000 <_sbrk_r+0x1c>)
 800dfe8:	2300      	movs	r3, #0
 800dfea:	4604      	mov	r4, r0
 800dfec:	4608      	mov	r0, r1
 800dfee:	602b      	str	r3, [r5, #0]
 800dff0:	f7f6 fd2c 	bl	8004a4c <_sbrk>
 800dff4:	1c43      	adds	r3, r0, #1
 800dff6:	d102      	bne.n	800dffe <_sbrk_r+0x1a>
 800dff8:	682b      	ldr	r3, [r5, #0]
 800dffa:	b103      	cbz	r3, 800dffe <_sbrk_r+0x1a>
 800dffc:	6023      	str	r3, [r4, #0]
 800dffe:	bd38      	pop	{r3, r4, r5, pc}
 800e000:	20004cc0 	.word	0x20004cc0

0800e004 <abort>:
 800e004:	b508      	push	{r3, lr}
 800e006:	2006      	movs	r0, #6
 800e008:	f000 fa2e 	bl	800e468 <raise>
 800e00c:	2001      	movs	r0, #1
 800e00e:	f7f6 fca5 	bl	800495c <_exit>

0800e012 <_realloc_r>:
 800e012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e016:	4680      	mov	r8, r0
 800e018:	4615      	mov	r5, r2
 800e01a:	460c      	mov	r4, r1
 800e01c:	b921      	cbnz	r1, 800e028 <_realloc_r+0x16>
 800e01e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e022:	4611      	mov	r1, r2
 800e024:	f7ff bb94 	b.w	800d750 <_malloc_r>
 800e028:	b92a      	cbnz	r2, 800e036 <_realloc_r+0x24>
 800e02a:	f7ff fb1d 	bl	800d668 <_free_r>
 800e02e:	2400      	movs	r4, #0
 800e030:	4620      	mov	r0, r4
 800e032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e036:	f000 fa33 	bl	800e4a0 <_malloc_usable_size_r>
 800e03a:	4285      	cmp	r5, r0
 800e03c:	4606      	mov	r6, r0
 800e03e:	d802      	bhi.n	800e046 <_realloc_r+0x34>
 800e040:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e044:	d8f4      	bhi.n	800e030 <_realloc_r+0x1e>
 800e046:	4629      	mov	r1, r5
 800e048:	4640      	mov	r0, r8
 800e04a:	f7ff fb81 	bl	800d750 <_malloc_r>
 800e04e:	4607      	mov	r7, r0
 800e050:	2800      	cmp	r0, #0
 800e052:	d0ec      	beq.n	800e02e <_realloc_r+0x1c>
 800e054:	42b5      	cmp	r5, r6
 800e056:	462a      	mov	r2, r5
 800e058:	4621      	mov	r1, r4
 800e05a:	bf28      	it	cs
 800e05c:	4632      	movcs	r2, r6
 800e05e:	f7ff fad6 	bl	800d60e <memcpy>
 800e062:	4621      	mov	r1, r4
 800e064:	4640      	mov	r0, r8
 800e066:	f7ff faff 	bl	800d668 <_free_r>
 800e06a:	463c      	mov	r4, r7
 800e06c:	e7e0      	b.n	800e030 <_realloc_r+0x1e>

0800e06e <__sfputc_r>:
 800e06e:	6893      	ldr	r3, [r2, #8]
 800e070:	3b01      	subs	r3, #1
 800e072:	2b00      	cmp	r3, #0
 800e074:	b410      	push	{r4}
 800e076:	6093      	str	r3, [r2, #8]
 800e078:	da08      	bge.n	800e08c <__sfputc_r+0x1e>
 800e07a:	6994      	ldr	r4, [r2, #24]
 800e07c:	42a3      	cmp	r3, r4
 800e07e:	db01      	blt.n	800e084 <__sfputc_r+0x16>
 800e080:	290a      	cmp	r1, #10
 800e082:	d103      	bne.n	800e08c <__sfputc_r+0x1e>
 800e084:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e088:	f000 b932 	b.w	800e2f0 <__swbuf_r>
 800e08c:	6813      	ldr	r3, [r2, #0]
 800e08e:	1c58      	adds	r0, r3, #1
 800e090:	6010      	str	r0, [r2, #0]
 800e092:	7019      	strb	r1, [r3, #0]
 800e094:	4608      	mov	r0, r1
 800e096:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <__sfputs_r>:
 800e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09e:	4606      	mov	r6, r0
 800e0a0:	460f      	mov	r7, r1
 800e0a2:	4614      	mov	r4, r2
 800e0a4:	18d5      	adds	r5, r2, r3
 800e0a6:	42ac      	cmp	r4, r5
 800e0a8:	d101      	bne.n	800e0ae <__sfputs_r+0x12>
 800e0aa:	2000      	movs	r0, #0
 800e0ac:	e007      	b.n	800e0be <__sfputs_r+0x22>
 800e0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b2:	463a      	mov	r2, r7
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f7ff ffda 	bl	800e06e <__sfputc_r>
 800e0ba:	1c43      	adds	r3, r0, #1
 800e0bc:	d1f3      	bne.n	800e0a6 <__sfputs_r+0xa>
 800e0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e0c0 <_vfiprintf_r>:
 800e0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c4:	460d      	mov	r5, r1
 800e0c6:	b09d      	sub	sp, #116	@ 0x74
 800e0c8:	4614      	mov	r4, r2
 800e0ca:	4698      	mov	r8, r3
 800e0cc:	4606      	mov	r6, r0
 800e0ce:	b118      	cbz	r0, 800e0d8 <_vfiprintf_r+0x18>
 800e0d0:	6a03      	ldr	r3, [r0, #32]
 800e0d2:	b90b      	cbnz	r3, 800e0d8 <_vfiprintf_r+0x18>
 800e0d4:	f7ff f986 	bl	800d3e4 <__sinit>
 800e0d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0da:	07d9      	lsls	r1, r3, #31
 800e0dc:	d405      	bmi.n	800e0ea <_vfiprintf_r+0x2a>
 800e0de:	89ab      	ldrh	r3, [r5, #12]
 800e0e0:	059a      	lsls	r2, r3, #22
 800e0e2:	d402      	bmi.n	800e0ea <_vfiprintf_r+0x2a>
 800e0e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0e6:	f7ff fa90 	bl	800d60a <__retarget_lock_acquire_recursive>
 800e0ea:	89ab      	ldrh	r3, [r5, #12]
 800e0ec:	071b      	lsls	r3, r3, #28
 800e0ee:	d501      	bpl.n	800e0f4 <_vfiprintf_r+0x34>
 800e0f0:	692b      	ldr	r3, [r5, #16]
 800e0f2:	b99b      	cbnz	r3, 800e11c <_vfiprintf_r+0x5c>
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f000 f938 	bl	800e36c <__swsetup_r>
 800e0fc:	b170      	cbz	r0, 800e11c <_vfiprintf_r+0x5c>
 800e0fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e100:	07dc      	lsls	r4, r3, #31
 800e102:	d504      	bpl.n	800e10e <_vfiprintf_r+0x4e>
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	b01d      	add	sp, #116	@ 0x74
 800e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10e:	89ab      	ldrh	r3, [r5, #12]
 800e110:	0598      	lsls	r0, r3, #22
 800e112:	d4f7      	bmi.n	800e104 <_vfiprintf_r+0x44>
 800e114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e116:	f7ff fa79 	bl	800d60c <__retarget_lock_release_recursive>
 800e11a:	e7f3      	b.n	800e104 <_vfiprintf_r+0x44>
 800e11c:	2300      	movs	r3, #0
 800e11e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e120:	2320      	movs	r3, #32
 800e122:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e126:	f8cd 800c 	str.w	r8, [sp, #12]
 800e12a:	2330      	movs	r3, #48	@ 0x30
 800e12c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2dc <_vfiprintf_r+0x21c>
 800e130:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e134:	f04f 0901 	mov.w	r9, #1
 800e138:	4623      	mov	r3, r4
 800e13a:	469a      	mov	sl, r3
 800e13c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e140:	b10a      	cbz	r2, 800e146 <_vfiprintf_r+0x86>
 800e142:	2a25      	cmp	r2, #37	@ 0x25
 800e144:	d1f9      	bne.n	800e13a <_vfiprintf_r+0x7a>
 800e146:	ebba 0b04 	subs.w	fp, sl, r4
 800e14a:	d00b      	beq.n	800e164 <_vfiprintf_r+0xa4>
 800e14c:	465b      	mov	r3, fp
 800e14e:	4622      	mov	r2, r4
 800e150:	4629      	mov	r1, r5
 800e152:	4630      	mov	r0, r6
 800e154:	f7ff ffa2 	bl	800e09c <__sfputs_r>
 800e158:	3001      	adds	r0, #1
 800e15a:	f000 80a7 	beq.w	800e2ac <_vfiprintf_r+0x1ec>
 800e15e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e160:	445a      	add	r2, fp
 800e162:	9209      	str	r2, [sp, #36]	@ 0x24
 800e164:	f89a 3000 	ldrb.w	r3, [sl]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f000 809f 	beq.w	800e2ac <_vfiprintf_r+0x1ec>
 800e16e:	2300      	movs	r3, #0
 800e170:	f04f 32ff 	mov.w	r2, #4294967295
 800e174:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e178:	f10a 0a01 	add.w	sl, sl, #1
 800e17c:	9304      	str	r3, [sp, #16]
 800e17e:	9307      	str	r3, [sp, #28]
 800e180:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e184:	931a      	str	r3, [sp, #104]	@ 0x68
 800e186:	4654      	mov	r4, sl
 800e188:	2205      	movs	r2, #5
 800e18a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e18e:	4853      	ldr	r0, [pc, #332]	@ (800e2dc <_vfiprintf_r+0x21c>)
 800e190:	f7f2 f83e 	bl	8000210 <memchr>
 800e194:	9a04      	ldr	r2, [sp, #16]
 800e196:	b9d8      	cbnz	r0, 800e1d0 <_vfiprintf_r+0x110>
 800e198:	06d1      	lsls	r1, r2, #27
 800e19a:	bf44      	itt	mi
 800e19c:	2320      	movmi	r3, #32
 800e19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a2:	0713      	lsls	r3, r2, #28
 800e1a4:	bf44      	itt	mi
 800e1a6:	232b      	movmi	r3, #43	@ 0x2b
 800e1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1ac:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1b2:	d015      	beq.n	800e1e0 <_vfiprintf_r+0x120>
 800e1b4:	9a07      	ldr	r2, [sp, #28]
 800e1b6:	4654      	mov	r4, sl
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	f04f 0c0a 	mov.w	ip, #10
 800e1be:	4621      	mov	r1, r4
 800e1c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1c4:	3b30      	subs	r3, #48	@ 0x30
 800e1c6:	2b09      	cmp	r3, #9
 800e1c8:	d94b      	bls.n	800e262 <_vfiprintf_r+0x1a2>
 800e1ca:	b1b0      	cbz	r0, 800e1fa <_vfiprintf_r+0x13a>
 800e1cc:	9207      	str	r2, [sp, #28]
 800e1ce:	e014      	b.n	800e1fa <_vfiprintf_r+0x13a>
 800e1d0:	eba0 0308 	sub.w	r3, r0, r8
 800e1d4:	fa09 f303 	lsl.w	r3, r9, r3
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	9304      	str	r3, [sp, #16]
 800e1dc:	46a2      	mov	sl, r4
 800e1de:	e7d2      	b.n	800e186 <_vfiprintf_r+0xc6>
 800e1e0:	9b03      	ldr	r3, [sp, #12]
 800e1e2:	1d19      	adds	r1, r3, #4
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	9103      	str	r1, [sp, #12]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	bfbb      	ittet	lt
 800e1ec:	425b      	neglt	r3, r3
 800e1ee:	f042 0202 	orrlt.w	r2, r2, #2
 800e1f2:	9307      	strge	r3, [sp, #28]
 800e1f4:	9307      	strlt	r3, [sp, #28]
 800e1f6:	bfb8      	it	lt
 800e1f8:	9204      	strlt	r2, [sp, #16]
 800e1fa:	7823      	ldrb	r3, [r4, #0]
 800e1fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1fe:	d10a      	bne.n	800e216 <_vfiprintf_r+0x156>
 800e200:	7863      	ldrb	r3, [r4, #1]
 800e202:	2b2a      	cmp	r3, #42	@ 0x2a
 800e204:	d132      	bne.n	800e26c <_vfiprintf_r+0x1ac>
 800e206:	9b03      	ldr	r3, [sp, #12]
 800e208:	1d1a      	adds	r2, r3, #4
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	9203      	str	r2, [sp, #12]
 800e20e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e212:	3402      	adds	r4, #2
 800e214:	9305      	str	r3, [sp, #20]
 800e216:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e2ec <_vfiprintf_r+0x22c>
 800e21a:	7821      	ldrb	r1, [r4, #0]
 800e21c:	2203      	movs	r2, #3
 800e21e:	4650      	mov	r0, sl
 800e220:	f7f1 fff6 	bl	8000210 <memchr>
 800e224:	b138      	cbz	r0, 800e236 <_vfiprintf_r+0x176>
 800e226:	9b04      	ldr	r3, [sp, #16]
 800e228:	eba0 000a 	sub.w	r0, r0, sl
 800e22c:	2240      	movs	r2, #64	@ 0x40
 800e22e:	4082      	lsls	r2, r0
 800e230:	4313      	orrs	r3, r2
 800e232:	3401      	adds	r4, #1
 800e234:	9304      	str	r3, [sp, #16]
 800e236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e23a:	4829      	ldr	r0, [pc, #164]	@ (800e2e0 <_vfiprintf_r+0x220>)
 800e23c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e240:	2206      	movs	r2, #6
 800e242:	f7f1 ffe5 	bl	8000210 <memchr>
 800e246:	2800      	cmp	r0, #0
 800e248:	d03f      	beq.n	800e2ca <_vfiprintf_r+0x20a>
 800e24a:	4b26      	ldr	r3, [pc, #152]	@ (800e2e4 <_vfiprintf_r+0x224>)
 800e24c:	bb1b      	cbnz	r3, 800e296 <_vfiprintf_r+0x1d6>
 800e24e:	9b03      	ldr	r3, [sp, #12]
 800e250:	3307      	adds	r3, #7
 800e252:	f023 0307 	bic.w	r3, r3, #7
 800e256:	3308      	adds	r3, #8
 800e258:	9303      	str	r3, [sp, #12]
 800e25a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e25c:	443b      	add	r3, r7
 800e25e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e260:	e76a      	b.n	800e138 <_vfiprintf_r+0x78>
 800e262:	fb0c 3202 	mla	r2, ip, r2, r3
 800e266:	460c      	mov	r4, r1
 800e268:	2001      	movs	r0, #1
 800e26a:	e7a8      	b.n	800e1be <_vfiprintf_r+0xfe>
 800e26c:	2300      	movs	r3, #0
 800e26e:	3401      	adds	r4, #1
 800e270:	9305      	str	r3, [sp, #20]
 800e272:	4619      	mov	r1, r3
 800e274:	f04f 0c0a 	mov.w	ip, #10
 800e278:	4620      	mov	r0, r4
 800e27a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e27e:	3a30      	subs	r2, #48	@ 0x30
 800e280:	2a09      	cmp	r2, #9
 800e282:	d903      	bls.n	800e28c <_vfiprintf_r+0x1cc>
 800e284:	2b00      	cmp	r3, #0
 800e286:	d0c6      	beq.n	800e216 <_vfiprintf_r+0x156>
 800e288:	9105      	str	r1, [sp, #20]
 800e28a:	e7c4      	b.n	800e216 <_vfiprintf_r+0x156>
 800e28c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e290:	4604      	mov	r4, r0
 800e292:	2301      	movs	r3, #1
 800e294:	e7f0      	b.n	800e278 <_vfiprintf_r+0x1b8>
 800e296:	ab03      	add	r3, sp, #12
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	462a      	mov	r2, r5
 800e29c:	4b12      	ldr	r3, [pc, #72]	@ (800e2e8 <_vfiprintf_r+0x228>)
 800e29e:	a904      	add	r1, sp, #16
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f3af 8000 	nop.w
 800e2a6:	4607      	mov	r7, r0
 800e2a8:	1c78      	adds	r0, r7, #1
 800e2aa:	d1d6      	bne.n	800e25a <_vfiprintf_r+0x19a>
 800e2ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e2ae:	07d9      	lsls	r1, r3, #31
 800e2b0:	d405      	bmi.n	800e2be <_vfiprintf_r+0x1fe>
 800e2b2:	89ab      	ldrh	r3, [r5, #12]
 800e2b4:	059a      	lsls	r2, r3, #22
 800e2b6:	d402      	bmi.n	800e2be <_vfiprintf_r+0x1fe>
 800e2b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e2ba:	f7ff f9a7 	bl	800d60c <__retarget_lock_release_recursive>
 800e2be:	89ab      	ldrh	r3, [r5, #12]
 800e2c0:	065b      	lsls	r3, r3, #25
 800e2c2:	f53f af1f 	bmi.w	800e104 <_vfiprintf_r+0x44>
 800e2c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2c8:	e71e      	b.n	800e108 <_vfiprintf_r+0x48>
 800e2ca:	ab03      	add	r3, sp, #12
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	462a      	mov	r2, r5
 800e2d0:	4b05      	ldr	r3, [pc, #20]	@ (800e2e8 <_vfiprintf_r+0x228>)
 800e2d2:	a904      	add	r1, sp, #16
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f7ff fc8d 	bl	800dbf4 <_printf_i>
 800e2da:	e7e4      	b.n	800e2a6 <_vfiprintf_r+0x1e6>
 800e2dc:	0801caef 	.word	0x0801caef
 800e2e0:	0801caf9 	.word	0x0801caf9
 800e2e4:	00000000 	.word	0x00000000
 800e2e8:	0800e09d 	.word	0x0800e09d
 800e2ec:	0801caf5 	.word	0x0801caf5

0800e2f0 <__swbuf_r>:
 800e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f2:	460e      	mov	r6, r1
 800e2f4:	4614      	mov	r4, r2
 800e2f6:	4605      	mov	r5, r0
 800e2f8:	b118      	cbz	r0, 800e302 <__swbuf_r+0x12>
 800e2fa:	6a03      	ldr	r3, [r0, #32]
 800e2fc:	b90b      	cbnz	r3, 800e302 <__swbuf_r+0x12>
 800e2fe:	f7ff f871 	bl	800d3e4 <__sinit>
 800e302:	69a3      	ldr	r3, [r4, #24]
 800e304:	60a3      	str	r3, [r4, #8]
 800e306:	89a3      	ldrh	r3, [r4, #12]
 800e308:	071a      	lsls	r2, r3, #28
 800e30a:	d501      	bpl.n	800e310 <__swbuf_r+0x20>
 800e30c:	6923      	ldr	r3, [r4, #16]
 800e30e:	b943      	cbnz	r3, 800e322 <__swbuf_r+0x32>
 800e310:	4621      	mov	r1, r4
 800e312:	4628      	mov	r0, r5
 800e314:	f000 f82a 	bl	800e36c <__swsetup_r>
 800e318:	b118      	cbz	r0, 800e322 <__swbuf_r+0x32>
 800e31a:	f04f 37ff 	mov.w	r7, #4294967295
 800e31e:	4638      	mov	r0, r7
 800e320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e322:	6823      	ldr	r3, [r4, #0]
 800e324:	6922      	ldr	r2, [r4, #16]
 800e326:	1a98      	subs	r0, r3, r2
 800e328:	6963      	ldr	r3, [r4, #20]
 800e32a:	b2f6      	uxtb	r6, r6
 800e32c:	4283      	cmp	r3, r0
 800e32e:	4637      	mov	r7, r6
 800e330:	dc05      	bgt.n	800e33e <__swbuf_r+0x4e>
 800e332:	4621      	mov	r1, r4
 800e334:	4628      	mov	r0, r5
 800e336:	f7ff fe01 	bl	800df3c <_fflush_r>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d1ed      	bne.n	800e31a <__swbuf_r+0x2a>
 800e33e:	68a3      	ldr	r3, [r4, #8]
 800e340:	3b01      	subs	r3, #1
 800e342:	60a3      	str	r3, [r4, #8]
 800e344:	6823      	ldr	r3, [r4, #0]
 800e346:	1c5a      	adds	r2, r3, #1
 800e348:	6022      	str	r2, [r4, #0]
 800e34a:	701e      	strb	r6, [r3, #0]
 800e34c:	6962      	ldr	r2, [r4, #20]
 800e34e:	1c43      	adds	r3, r0, #1
 800e350:	429a      	cmp	r2, r3
 800e352:	d004      	beq.n	800e35e <__swbuf_r+0x6e>
 800e354:	89a3      	ldrh	r3, [r4, #12]
 800e356:	07db      	lsls	r3, r3, #31
 800e358:	d5e1      	bpl.n	800e31e <__swbuf_r+0x2e>
 800e35a:	2e0a      	cmp	r6, #10
 800e35c:	d1df      	bne.n	800e31e <__swbuf_r+0x2e>
 800e35e:	4621      	mov	r1, r4
 800e360:	4628      	mov	r0, r5
 800e362:	f7ff fdeb 	bl	800df3c <_fflush_r>
 800e366:	2800      	cmp	r0, #0
 800e368:	d0d9      	beq.n	800e31e <__swbuf_r+0x2e>
 800e36a:	e7d6      	b.n	800e31a <__swbuf_r+0x2a>

0800e36c <__swsetup_r>:
 800e36c:	b538      	push	{r3, r4, r5, lr}
 800e36e:	4b29      	ldr	r3, [pc, #164]	@ (800e414 <__swsetup_r+0xa8>)
 800e370:	4605      	mov	r5, r0
 800e372:	6818      	ldr	r0, [r3, #0]
 800e374:	460c      	mov	r4, r1
 800e376:	b118      	cbz	r0, 800e380 <__swsetup_r+0x14>
 800e378:	6a03      	ldr	r3, [r0, #32]
 800e37a:	b90b      	cbnz	r3, 800e380 <__swsetup_r+0x14>
 800e37c:	f7ff f832 	bl	800d3e4 <__sinit>
 800e380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e384:	0719      	lsls	r1, r3, #28
 800e386:	d422      	bmi.n	800e3ce <__swsetup_r+0x62>
 800e388:	06da      	lsls	r2, r3, #27
 800e38a:	d407      	bmi.n	800e39c <__swsetup_r+0x30>
 800e38c:	2209      	movs	r2, #9
 800e38e:	602a      	str	r2, [r5, #0]
 800e390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e394:	81a3      	strh	r3, [r4, #12]
 800e396:	f04f 30ff 	mov.w	r0, #4294967295
 800e39a:	e033      	b.n	800e404 <__swsetup_r+0x98>
 800e39c:	0758      	lsls	r0, r3, #29
 800e39e:	d512      	bpl.n	800e3c6 <__swsetup_r+0x5a>
 800e3a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3a2:	b141      	cbz	r1, 800e3b6 <__swsetup_r+0x4a>
 800e3a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e3a8:	4299      	cmp	r1, r3
 800e3aa:	d002      	beq.n	800e3b2 <__swsetup_r+0x46>
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f7ff f95b 	bl	800d668 <_free_r>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e3b6:	89a3      	ldrh	r3, [r4, #12]
 800e3b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e3bc:	81a3      	strh	r3, [r4, #12]
 800e3be:	2300      	movs	r3, #0
 800e3c0:	6063      	str	r3, [r4, #4]
 800e3c2:	6923      	ldr	r3, [r4, #16]
 800e3c4:	6023      	str	r3, [r4, #0]
 800e3c6:	89a3      	ldrh	r3, [r4, #12]
 800e3c8:	f043 0308 	orr.w	r3, r3, #8
 800e3cc:	81a3      	strh	r3, [r4, #12]
 800e3ce:	6923      	ldr	r3, [r4, #16]
 800e3d0:	b94b      	cbnz	r3, 800e3e6 <__swsetup_r+0x7a>
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e3d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3dc:	d003      	beq.n	800e3e6 <__swsetup_r+0x7a>
 800e3de:	4621      	mov	r1, r4
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	f000 f88b 	bl	800e4fc <__smakebuf_r>
 800e3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ea:	f013 0201 	ands.w	r2, r3, #1
 800e3ee:	d00a      	beq.n	800e406 <__swsetup_r+0x9a>
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	60a2      	str	r2, [r4, #8]
 800e3f4:	6962      	ldr	r2, [r4, #20]
 800e3f6:	4252      	negs	r2, r2
 800e3f8:	61a2      	str	r2, [r4, #24]
 800e3fa:	6922      	ldr	r2, [r4, #16]
 800e3fc:	b942      	cbnz	r2, 800e410 <__swsetup_r+0xa4>
 800e3fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e402:	d1c5      	bne.n	800e390 <__swsetup_r+0x24>
 800e404:	bd38      	pop	{r3, r4, r5, pc}
 800e406:	0799      	lsls	r1, r3, #30
 800e408:	bf58      	it	pl
 800e40a:	6962      	ldrpl	r2, [r4, #20]
 800e40c:	60a2      	str	r2, [r4, #8]
 800e40e:	e7f4      	b.n	800e3fa <__swsetup_r+0x8e>
 800e410:	2000      	movs	r0, #0
 800e412:	e7f7      	b.n	800e404 <__swsetup_r+0x98>
 800e414:	20000068 	.word	0x20000068

0800e418 <_raise_r>:
 800e418:	291f      	cmp	r1, #31
 800e41a:	b538      	push	{r3, r4, r5, lr}
 800e41c:	4605      	mov	r5, r0
 800e41e:	460c      	mov	r4, r1
 800e420:	d904      	bls.n	800e42c <_raise_r+0x14>
 800e422:	2316      	movs	r3, #22
 800e424:	6003      	str	r3, [r0, #0]
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	bd38      	pop	{r3, r4, r5, pc}
 800e42c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e42e:	b112      	cbz	r2, 800e436 <_raise_r+0x1e>
 800e430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e434:	b94b      	cbnz	r3, 800e44a <_raise_r+0x32>
 800e436:	4628      	mov	r0, r5
 800e438:	f000 f830 	bl	800e49c <_getpid_r>
 800e43c:	4622      	mov	r2, r4
 800e43e:	4601      	mov	r1, r0
 800e440:	4628      	mov	r0, r5
 800e442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e446:	f000 b817 	b.w	800e478 <_kill_r>
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d00a      	beq.n	800e464 <_raise_r+0x4c>
 800e44e:	1c59      	adds	r1, r3, #1
 800e450:	d103      	bne.n	800e45a <_raise_r+0x42>
 800e452:	2316      	movs	r3, #22
 800e454:	6003      	str	r3, [r0, #0]
 800e456:	2001      	movs	r0, #1
 800e458:	e7e7      	b.n	800e42a <_raise_r+0x12>
 800e45a:	2100      	movs	r1, #0
 800e45c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e460:	4620      	mov	r0, r4
 800e462:	4798      	blx	r3
 800e464:	2000      	movs	r0, #0
 800e466:	e7e0      	b.n	800e42a <_raise_r+0x12>

0800e468 <raise>:
 800e468:	4b02      	ldr	r3, [pc, #8]	@ (800e474 <raise+0xc>)
 800e46a:	4601      	mov	r1, r0
 800e46c:	6818      	ldr	r0, [r3, #0]
 800e46e:	f7ff bfd3 	b.w	800e418 <_raise_r>
 800e472:	bf00      	nop
 800e474:	20000068 	.word	0x20000068

0800e478 <_kill_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4d07      	ldr	r5, [pc, #28]	@ (800e498 <_kill_r+0x20>)
 800e47c:	2300      	movs	r3, #0
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	4611      	mov	r1, r2
 800e484:	602b      	str	r3, [r5, #0]
 800e486:	f7f6 fa59 	bl	800493c <_kill>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	d102      	bne.n	800e494 <_kill_r+0x1c>
 800e48e:	682b      	ldr	r3, [r5, #0]
 800e490:	b103      	cbz	r3, 800e494 <_kill_r+0x1c>
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	bd38      	pop	{r3, r4, r5, pc}
 800e496:	bf00      	nop
 800e498:	20004cc0 	.word	0x20004cc0

0800e49c <_getpid_r>:
 800e49c:	f7f6 ba46 	b.w	800492c <_getpid>

0800e4a0 <_malloc_usable_size_r>:
 800e4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4a4:	1f18      	subs	r0, r3, #4
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	bfbc      	itt	lt
 800e4aa:	580b      	ldrlt	r3, [r1, r0]
 800e4ac:	18c0      	addlt	r0, r0, r3
 800e4ae:	4770      	bx	lr

0800e4b0 <__swhatbuf_r>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4b8:	2900      	cmp	r1, #0
 800e4ba:	b096      	sub	sp, #88	@ 0x58
 800e4bc:	4615      	mov	r5, r2
 800e4be:	461e      	mov	r6, r3
 800e4c0:	da0d      	bge.n	800e4de <__swhatbuf_r+0x2e>
 800e4c2:	89a3      	ldrh	r3, [r4, #12]
 800e4c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e4c8:	f04f 0100 	mov.w	r1, #0
 800e4cc:	bf14      	ite	ne
 800e4ce:	2340      	movne	r3, #64	@ 0x40
 800e4d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	6031      	str	r1, [r6, #0]
 800e4d8:	602b      	str	r3, [r5, #0]
 800e4da:	b016      	add	sp, #88	@ 0x58
 800e4dc:	bd70      	pop	{r4, r5, r6, pc}
 800e4de:	466a      	mov	r2, sp
 800e4e0:	f000 f848 	bl	800e574 <_fstat_r>
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	dbec      	blt.n	800e4c2 <__swhatbuf_r+0x12>
 800e4e8:	9901      	ldr	r1, [sp, #4]
 800e4ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4f2:	4259      	negs	r1, r3
 800e4f4:	4159      	adcs	r1, r3
 800e4f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4fa:	e7eb      	b.n	800e4d4 <__swhatbuf_r+0x24>

0800e4fc <__smakebuf_r>:
 800e4fc:	898b      	ldrh	r3, [r1, #12]
 800e4fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e500:	079d      	lsls	r5, r3, #30
 800e502:	4606      	mov	r6, r0
 800e504:	460c      	mov	r4, r1
 800e506:	d507      	bpl.n	800e518 <__smakebuf_r+0x1c>
 800e508:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	6123      	str	r3, [r4, #16]
 800e510:	2301      	movs	r3, #1
 800e512:	6163      	str	r3, [r4, #20]
 800e514:	b003      	add	sp, #12
 800e516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e518:	ab01      	add	r3, sp, #4
 800e51a:	466a      	mov	r2, sp
 800e51c:	f7ff ffc8 	bl	800e4b0 <__swhatbuf_r>
 800e520:	9f00      	ldr	r7, [sp, #0]
 800e522:	4605      	mov	r5, r0
 800e524:	4639      	mov	r1, r7
 800e526:	4630      	mov	r0, r6
 800e528:	f7ff f912 	bl	800d750 <_malloc_r>
 800e52c:	b948      	cbnz	r0, 800e542 <__smakebuf_r+0x46>
 800e52e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e532:	059a      	lsls	r2, r3, #22
 800e534:	d4ee      	bmi.n	800e514 <__smakebuf_r+0x18>
 800e536:	f023 0303 	bic.w	r3, r3, #3
 800e53a:	f043 0302 	orr.w	r3, r3, #2
 800e53e:	81a3      	strh	r3, [r4, #12]
 800e540:	e7e2      	b.n	800e508 <__smakebuf_r+0xc>
 800e542:	89a3      	ldrh	r3, [r4, #12]
 800e544:	6020      	str	r0, [r4, #0]
 800e546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e54a:	81a3      	strh	r3, [r4, #12]
 800e54c:	9b01      	ldr	r3, [sp, #4]
 800e54e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e552:	b15b      	cbz	r3, 800e56c <__smakebuf_r+0x70>
 800e554:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e558:	4630      	mov	r0, r6
 800e55a:	f000 f81d 	bl	800e598 <_isatty_r>
 800e55e:	b128      	cbz	r0, 800e56c <__smakebuf_r+0x70>
 800e560:	89a3      	ldrh	r3, [r4, #12]
 800e562:	f023 0303 	bic.w	r3, r3, #3
 800e566:	f043 0301 	orr.w	r3, r3, #1
 800e56a:	81a3      	strh	r3, [r4, #12]
 800e56c:	89a3      	ldrh	r3, [r4, #12]
 800e56e:	431d      	orrs	r5, r3
 800e570:	81a5      	strh	r5, [r4, #12]
 800e572:	e7cf      	b.n	800e514 <__smakebuf_r+0x18>

0800e574 <_fstat_r>:
 800e574:	b538      	push	{r3, r4, r5, lr}
 800e576:	4d07      	ldr	r5, [pc, #28]	@ (800e594 <_fstat_r+0x20>)
 800e578:	2300      	movs	r3, #0
 800e57a:	4604      	mov	r4, r0
 800e57c:	4608      	mov	r0, r1
 800e57e:	4611      	mov	r1, r2
 800e580:	602b      	str	r3, [r5, #0]
 800e582:	f7f6 fa3b 	bl	80049fc <_fstat>
 800e586:	1c43      	adds	r3, r0, #1
 800e588:	d102      	bne.n	800e590 <_fstat_r+0x1c>
 800e58a:	682b      	ldr	r3, [r5, #0]
 800e58c:	b103      	cbz	r3, 800e590 <_fstat_r+0x1c>
 800e58e:	6023      	str	r3, [r4, #0]
 800e590:	bd38      	pop	{r3, r4, r5, pc}
 800e592:	bf00      	nop
 800e594:	20004cc0 	.word	0x20004cc0

0800e598 <_isatty_r>:
 800e598:	b538      	push	{r3, r4, r5, lr}
 800e59a:	4d06      	ldr	r5, [pc, #24]	@ (800e5b4 <_isatty_r+0x1c>)
 800e59c:	2300      	movs	r3, #0
 800e59e:	4604      	mov	r4, r0
 800e5a0:	4608      	mov	r0, r1
 800e5a2:	602b      	str	r3, [r5, #0]
 800e5a4:	f7f6 fa3a 	bl	8004a1c <_isatty>
 800e5a8:	1c43      	adds	r3, r0, #1
 800e5aa:	d102      	bne.n	800e5b2 <_isatty_r+0x1a>
 800e5ac:	682b      	ldr	r3, [r5, #0]
 800e5ae:	b103      	cbz	r3, 800e5b2 <_isatty_r+0x1a>
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	bd38      	pop	{r3, r4, r5, pc}
 800e5b4:	20004cc0 	.word	0x20004cc0

0800e5b8 <_init>:
 800e5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ba:	bf00      	nop
 800e5bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5be:	bc08      	pop	{r3}
 800e5c0:	469e      	mov	lr, r3
 800e5c2:	4770      	bx	lr

0800e5c4 <_fini>:
 800e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c6:	bf00      	nop
 800e5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ca:	bc08      	pop	{r3}
 800e5cc:	469e      	mov	lr, r3
 800e5ce:	4770      	bx	lr
